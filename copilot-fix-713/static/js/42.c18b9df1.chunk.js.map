{"version":3,"file":"static/js/42.c18b9df1.chunk.js","mappings":"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","sources":["components/QuestionnaireEditor.js"],"sourcesContent":["import React, { useState, useEffect, Component } from 'react';\nimport { PageLayout, AssetEditorLayout, useDAKParams } from './framework';\nimport ContextualHelpMascot from './ContextualHelpMascot';\nimport githubService from '../services/githubService';\nimport './QuestionnaireEditor.css';\n\n// Enhanced Visual Editor Component with LForms integration\nconst LFormsVisualEditor = ({ questionnaire, onChange }) => {\n  const [previewMode, setPreviewMode] = useState(false);\n  \n  // LForms integration - using fallback editor for now\n  useEffect(() => {\n    const initializeLForms = async () => {\n      try {\n        // Dynamic import commented out until lforms is properly configured\n        // const LForms = await import('lforms');\n        console.log('LForms initialization skipped - using fallback editor');\n      } catch (error) {\n        console.log('LForms not available, using fallback editor');\n      }\n    };\n    \n    initializeLForms();\n  }, []);\n  \n  const addQuestion = () => {\n    const newItem = {\n      linkId: `item-${Date.now()}`,\n      text: `New Question ${(questionnaire.item?.length || 0) + 1}`,\n      type: 'string',\n      required: false\n    };\n    \n    const updatedQuestionnaire = {\n      ...questionnaire,\n      item: [...(questionnaire.item || []), newItem]\n    };\n    \n    onChange(updatedQuestionnaire);\n  };\n\n  const removeQuestion = (index) => {\n    if (!questionnaire.item) return;\n    \n    const updatedItems = questionnaire.item.filter((_, i) => i !== index);\n    const updatedQuestionnaire = {\n      ...questionnaire,\n      item: updatedItems\n    };\n    \n    onChange(updatedQuestionnaire);\n  };\n\n  const updateQuestion = (index, field, value) => {\n    if (!questionnaire.item) return;\n    \n    const updatedItems = [...questionnaire.item];\n    updatedItems[index] = { ...updatedItems[index], [field]: value };\n    \n    const updatedQuestionnaire = {\n      ...questionnaire,\n      item: updatedItems\n    };\n    \n    onChange(updatedQuestionnaire);\n  };\n\n  const updateMetadata = (field, value) => {\n    const updatedQuestionnaire = {\n      ...questionnaire,\n      [field]: value\n    };\n    onChange(updatedQuestionnaire);\n  };\n\n  return (\n    <div className=\"lforms-visual-editor\">\n      <div className=\"editor-modes\">\n        <button \n          className={`mode-toggle ${!previewMode ? 'active' : ''}`}\n          onClick={() => setPreviewMode(false)}\n        >\n          🔧 Build Mode\n        </button>\n        <button \n          className={`mode-toggle ${previewMode ? 'active' : ''}`}\n          onClick={() => setPreviewMode(true)}\n        >\n          👁️ Preview Mode\n        </button>\n      </div>\n\n      {previewMode ? (\n        <div className=\"lforms-preview\">\n          <h5>Live Preview</h5>\n          <div className=\"simple-questionnaire-preview\">\n            <div className=\"preview-header\">\n              <h3>{questionnaire.title || 'Untitled Questionnaire'}</h3>\n              <p>{questionnaire.description || 'No description provided'}</p>\n            </div>\n            \n            <div className=\"preview-questions\">\n              {questionnaire.item?.map((item, index) => (\n                <div key={item.linkId} className=\"preview-question\">\n                  <label className=\"preview-question-label\">\n                    {index + 1}. {item.text}\n                    {item.required && <span className=\"required-asterisk\"> *</span>}\n                  </label>\n                  \n                  {item.type === 'string' && (\n                    <input type=\"text\" placeholder=\"Text answer\" disabled />\n                  )}\n                  {item.type === 'text' && (\n                    <textarea placeholder=\"Long text answer\" disabled rows={3} />\n                  )}\n                  {item.type === 'boolean' && (\n                    <div className=\"preview-boolean\">\n                      <label><input type=\"radio\" disabled /> Yes</label>\n                      <label><input type=\"radio\" disabled /> No</label>\n                    </div>\n                  )}\n                  {item.type === 'decimal' && (\n                    <input type=\"number\" step=\"0.01\" placeholder=\"Number\" disabled />\n                  )}\n                  {item.type === 'integer' && (\n                    <input type=\"number\" step=\"1\" placeholder=\"Integer\" disabled />\n                  )}\n                  {item.type === 'date' && (\n                    <input type=\"date\" disabled />\n                  )}\n                  {item.type === 'choice' && (\n                    <select disabled>\n                      <option>Select an option...</option>\n                    </select>\n                  )}\n                </div>\n              )) || <p className=\"no-questions-preview\">No questions added yet.</p>}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"lforms-builder\">\n          <div className=\"questionnaire-metadata-editor\">\n            <h5>Questionnaire Details</h5>\n            <div className=\"metadata-grid\">\n              <div className=\"field-group\">\n                <label htmlFor=\"questionnaire-title\">Title:</label>\n                <input\n                  id=\"questionnaire-title\"\n                  type=\"text\"\n                  value={questionnaire.title || ''}\n                  onChange={(e) => updateMetadata('title', e.target.value)}\n                  placeholder=\"Enter questionnaire title\"\n                />\n              </div>\n              <div className=\"field-group\">\n                <label htmlFor=\"questionnaire-name\">Name:</label>\n                <input\n                  id=\"questionnaire-name\"\n                  type=\"text\"\n                  value={questionnaire.name || ''}\n                  onChange={(e) => updateMetadata('name', e.target.value)}\n                  placeholder=\"Enter questionnaire name\"\n                />\n              </div>\n              <div className=\"field-group\">\n                <label htmlFor=\"questionnaire-status\">Status:</label>\n                <select\n                  id=\"questionnaire-status\"\n                  value={questionnaire.status || 'draft'}\n                  onChange={(e) => updateMetadata('status', e.target.value)}\n                >\n                  <option value=\"draft\">Draft</option>\n                  <option value=\"active\">Active</option>\n                  <option value=\"retired\">Retired</option>\n                </select>\n              </div>\n              <div className=\"field-group\">\n                <label htmlFor=\"questionnaire-publisher\">Publisher:</label>\n                <input\n                  id=\"questionnaire-publisher\"\n                  type=\"text\"\n                  value={questionnaire.publisher || ''}\n                  onChange={(e) => updateMetadata('publisher', e.target.value)}\n                  placeholder=\"Enter publisher\"\n                />\n              </div>\n            </div>\n            <div className=\"field-group\">\n              <label htmlFor=\"questionnaire-description\">Description:</label>\n              <textarea\n                id=\"questionnaire-description\"\n                value={questionnaire.description || ''}\n                onChange={(e) => updateMetadata('description', e.target.value)}\n                placeholder=\"Enter questionnaire description\"\n                rows={3}\n              />\n            </div>\n          </div>\n\n          <div className=\"questions-builder\">\n            <div className=\"questions-header\">\n              <h5>Questions ({questionnaire.item?.length || 0})</h5>\n              <button onClick={addQuestion} className=\"add-question-btn\">\n                + Add Question\n              </button>\n            </div>\n\n            {questionnaire.item?.map((item, index) => (\n              <div key={item.linkId} className=\"question-editor\">\n                <div className=\"question-header\">\n                  <span className=\"question-number\">Q{index + 1}</span>\n                  <button \n                    onClick={() => removeQuestion(index)} \n                    className=\"remove-question-btn\"\n                    title=\"Remove question\"\n                  >\n                    ✕\n                  </button>\n                </div>\n                \n                <div className=\"question-fields\">\n                  <div className=\"field-group\">\n                    <label htmlFor={`question-text-${index}`}>Question Text:</label>\n                    <input\n                      id={`question-text-${index}`}\n                      type=\"text\"\n                      value={item.text || ''}\n                      onChange={(e) => updateQuestion(index, 'text', e.target.value)}\n                      placeholder=\"Enter question text\"\n                    />\n                  </div>\n                  \n                  <div className=\"field-group\">\n                    <label htmlFor={`question-linkid-${index}`}>Link ID:</label>\n                    <input\n                      id={`question-linkid-${index}`}\n                      type=\"text\"\n                      value={item.linkId || ''}\n                      onChange={(e) => updateQuestion(index, 'linkId', e.target.value)}\n                      placeholder=\"Enter unique ID\"\n                    />\n                  </div>\n                  \n                  <div className=\"field-group\">\n                    <label htmlFor={`question-type-${index}`}>Question Type:</label>\n                    <select\n                      id={`question-type-${index}`}\n                      value={item.type || 'string'}\n                      onChange={(e) => updateQuestion(index, 'type', e.target.value)}\n                    >\n                      <option value=\"string\">Short Text</option>\n                      <option value=\"text\">Long Text</option>\n                      <option value=\"boolean\">Yes/No</option>\n                      <option value=\"decimal\">Decimal Number</option>\n                      <option value=\"integer\">Integer</option>\n                      <option value=\"date\">Date</option>\n                      <option value=\"choice\">Single Choice</option>\n                      <option value=\"open-choice\">Choice with Other</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"field-group checkbox-group\">\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={item.required || false}\n                        onChange={(e) => updateQuestion(index, 'required', e.target.checked)}\n                      />\n                      Required\n                    </label>\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            {(!questionnaire.item || questionnaire.item.length === 0) && (\n              <div className=\"no-questions\">\n                <p>No questions yet. Click \"Add Question\" to get started.</p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst QuestionnaireEditorContent = () => {\n  const { repository, branch, isLoading: pageLoading } = useDAKParams();\n  \n  // Component state\n  const [questionnaires, setQuestionnaires] = useState([]);\n  const [selectedQuestionnaire, setSelectedQuestionnaire] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [editing, setEditing] = useState(false);\n  const [questionnaireContent, setQuestionnaireContent] = useState(null);\n  const [originalContent, setOriginalContent] = useState(null);\n  \n  // LForms integration state\n  const [lformsLoaded, setLformsLoaded] = useState(false);\n  const [editMode, setEditMode] = useState('visual'); // 'visual' or 'json'\n  const [lformsError, setLformsError] = useState(null);\n\n  // Check if we have the necessary context data\n  const hasRequiredData = repository && branch && !pageLoading;\n\n  // Load LForms library\n  useEffect(() => {\n    const loadLForms = async () => {\n      try {\n        setLformsError(null);\n        \n        // LForms library loading temporarily disabled\n        // const LForms = await import('lforms');\n        \n        // Use built-in editor as fallback for now\n        console.log('Using built-in visual editor');\n        setLformsLoaded(true);\n      } catch (error) {\n        console.error('Failed to load LForms:', error);\n        setLformsError(`Failed to load questionnaire editor: ${error.message}`);\n        // Still mark as loaded to enable basic functionality\n        console.log('Using built-in visual editor as fallback');\n        setLformsLoaded(true);\n      }\n    };\n\n    loadLForms();\n  }, []);\n\n  // Load questionnaires from repository\n  useEffect(() => {\n    const loadQuestionnaires = async () => {\n      // Don't attempt to load if PageProvider context is not ready\n      if (!hasRequiredData) {\n        console.log('QuestionnaireEditor: Waiting for PageProvider context...', { \n          repository: !!repository, \n          branch: !!branch, \n          pageLoading \n        });\n        return;\n      }\n      \n      try {\n        console.log('QuestionnaireEditor: Loading questionnaires for', repository.name, 'branch', branch);\n        setLoading(true);\n        setError(null);\n        \n        const allQuestionnaires = [];\n        \n        // Check multiple possible locations for questionnaires\n        const paths = [\n          { path: 'input/questionnaires', extensions: ['.json'], type: 'JSON' },\n          { path: 'input/fsh/questionnaires', extensions: ['.fsh'], type: 'FSH' }\n        ];\n        \n        for (const pathConfig of paths) {\n          try {\n            const files = await githubService.getDirectoryContents(\n              repository.owner.login,\n              repository.name,\n              pathConfig.path,\n              branch\n            );\n            \n            // Filter for supported file extensions\n            const questionnaireFiles = files\n              .filter(file => file.type === 'file' && \n                pathConfig.extensions.some(ext => file.name.endsWith(ext)))\n              .map(file => {\n                const extension = pathConfig.extensions.find(ext => file.name.endsWith(ext));\n                return {\n                  ...file,\n                  displayName: file.name.replace(extension, ''),\n                  fullPath: `${pathConfig.path}/${file.name}`,\n                  fileType: pathConfig.type,\n                  extension: extension\n                };\n              });\n            \n            allQuestionnaires.push(...questionnaireFiles);\n          } catch (error) {\n            // Directory doesn't exist, continue with other paths\n            if (error.status !== 404) {\n              console.warn(`Error loading from ${pathConfig.path}:`, error);\n            }\n          }\n        }\n        \n        setQuestionnaires(allQuestionnaires);\n      } catch (error) {\n        console.error('Error loading questionnaires:', error);\n        setError(`Failed to load questionnaires: ${error.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadQuestionnaires();\n  }, [hasRequiredData, repository, branch, pageLoading]); // Include pageLoading since it's used in the effect\n\n  // Early return if PageProvider context is not ready\n  if (!repository || !branch) {\n    return (\n      <div className=\"questionnaire-editor-loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Initializing Questionnaire Editor...</p>\n      </div>\n    );\n  }\n\n  // Load questionnaire content\n  const loadQuestionnaireContent = async (questionnaire) => {\n    try {\n      setLoading(true);\n      const content = await githubService.getFileContent(\n        repository.owner.login,\n        repository.name,\n        questionnaire.fullPath,\n        branch\n      );\n      \n      let questionnaireData;\n      \n      if (questionnaire.fileType === 'JSON') {\n        // Parse JSON questionnaire\n        questionnaireData = JSON.parse(content);\n      } else if (questionnaire.fileType === 'FSH') {\n        // For FSH files, create a preview object with metadata\n        questionnaireData = {\n          resourceType: 'Questionnaire',\n          fileType: 'FSH',\n          title: extractFshTitle(content) || questionnaire.displayName,\n          status: extractFshStatus(content) || 'draft',\n          name: extractFshName(content) || questionnaire.displayName,\n          description: extractFshDescription(content) || 'FHIR Shorthand Questionnaire',\n          rawContent: content,\n          isReadOnly: true\n        };\n      }\n      \n      setQuestionnaireContent(questionnaireData);\n      setOriginalContent(content);\n      setSelectedQuestionnaire(questionnaire);\n      setEditing(true);\n      \n      console.log('Questionnaire loaded:', questionnaireData);\n    } catch (error) {\n      console.error('Error loading questionnaire content:', error);\n      setError(`Failed to load questionnaire: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Helper functions to extract metadata from FSH content\n  const extractFshTitle = (content) => {\n    // Support various FSH title patterns\n    const patterns = [\n      /\\*\\s*title\\s*=\\s*\"([^\"]+)\"/,  // * title = \"Title\"\n      /^\\s*Title:\\s*\"?([^\"\\n]+)\"?/m,  // Title: \"Title\" or Title: Title\n      /Instance:\\s*\\w+\\s*\"([^\"]+)\"/   // Instance: Name \"Title\"\n    ];\n    \n    for (const pattern of patterns) {\n      const match = content.match(pattern);\n      if (match) return match[1].trim();\n    }\n    return null;\n  };\n\n  const extractFshStatus = (content) => {\n    // Support various FSH status patterns\n    const patterns = [\n      /\\*\\s*status\\s*=\\s*#(\\w+)/,     // * status = #draft\n      /^\\s*Status:\\s*#?(\\w+)/m        // Status: draft or Status: #draft\n    ];\n    \n    for (const pattern of patterns) {\n      const match = content.match(pattern);\n      if (match) return match[1];\n    }\n    return null;\n  };\n\n  const extractFshName = (content) => {\n    // Support various FSH name patterns\n    const patterns = [\n      /\\*\\s*name\\s*=\\s*\"([^\"]+)\"/,     // * name = \"Name\"\n      /^\\s*Name:\\s*\"?([^\"\\n]+)\"?/m,    // Name: \"Name\" or Name: Name\n      /Instance:\\s*(\\w+)/              // Instance: InstanceName\n    ];\n    \n    for (const pattern of patterns) {\n      const match = content.match(pattern);\n      if (match) return match[1].trim();\n    }\n    return null;\n  };\n\n  const extractFshDescription = (content) => {\n    // Support various FSH description patterns\n    const patterns = [\n      /\\*\\s*description\\s*=\\s*\"([^\"]+)\"/,    // * description = \"Description\"\n      /^\\s*Description:\\s*\"?([^\"\\n]+)\"?/m,   // Description: \"Text\" or Description: Text\n      /\\/\\/\\s*(.+)/                          // // Comment line\n    ];\n    \n    for (const pattern of patterns) {\n      const match = content.match(pattern);\n      if (match) return match[1].trim();\n    }\n    return null;\n  };\n\n  // Create new questionnaire\n  const createNewQuestionnaire = () => {\n    const newQuestionnaire = {\n      resourceType: 'Questionnaire',\n      id: `questionnaire-${Date.now()}`,\n      meta: {\n        versionId: '1',\n        lastUpdated: new Date().toISOString()\n      },\n      url: `http://example.org/Questionnaire/${Date.now()}`,\n      name: 'NewQuestionnaire',\n      title: 'New Questionnaire',\n      status: 'draft',\n      date: new Date().toISOString().split('T')[0],\n      publisher: 'WHO SMART Guidelines',\n      description: 'A new FHIR Questionnaire',\n      item: [\n        {\n          linkId: '1',\n          text: 'Sample Question',\n          type: 'string',\n          required: false\n        }\n      ]\n    };\n\n    setQuestionnaireContent(newQuestionnaire);\n    setOriginalContent(JSON.stringify(newQuestionnaire, null, 2));\n    setSelectedQuestionnaire({\n      name: `${newQuestionnaire.name}.json`,\n      displayName: newQuestionnaire.name,\n      fullPath: `input/questionnaires/${newQuestionnaire.name}.json`,\n      fileType: 'JSON',\n      isNew: true\n    });\n    setEditing(true);\n    setEditMode('visual'); // Start with visual editor for new questionnaires\n\n    console.log('New questionnaire created:', newQuestionnaire);\n  };\n\n  // Handle save operation (called by AssetEditorLayout)\n  const handleSave = (content, saveType) => {\n    console.log(`Questionnaire saved to ${saveType}`);\n    \n    if (saveType === 'github') {\n      // Refresh questionnaires list after GitHub save\n      const loadQuestionnaires = async () => {\n        try {\n          const allQuestionnaires = [];\n          \n          const paths = [\n            { path: 'input/questionnaires', extensions: ['.json'], type: 'JSON' },\n            { path: 'input/fsh/questionnaires', extensions: ['.fsh'], type: 'FSH' }\n          ];\n          \n          for (const pathConfig of paths) {\n            try {\n              const files = await githubService.getDirectoryContents(\n                repository.owner.login,\n                repository.name,\n                pathConfig.path,\n                branch\n              );\n              \n              const questionnaireFiles = files\n                .filter(file => file.type === 'file' && \n                  pathConfig.extensions.some(ext => file.name.endsWith(ext)))\n                .map(file => {\n                  const extension = pathConfig.extensions.find(ext => file.name.endsWith(ext));\n                  return {\n                    ...file,\n                    displayName: file.name.replace(extension, ''),\n                    fullPath: `${pathConfig.path}/${file.name}`,\n                    fileType: pathConfig.type,\n                    extension: extension\n                  };\n                });\n              \n              allQuestionnaires.push(...questionnaireFiles);\n            } catch (error) {\n              if (error.status !== 404) {\n                console.warn(`Error loading from ${pathConfig.path}:`, error);\n              }\n            }\n          }\n          \n          setQuestionnaires(allQuestionnaires);\n        } catch (error) {\n          console.error('Error refreshing questionnaires:', error);\n        }\n      };\n      \n      loadQuestionnaires();\n    }\n  };\n\n  // Check if there are changes in the questionnaire\n  const hasChanges = questionnaireContent && originalContent &&\n    JSON.stringify(questionnaireContent, null, 2) !== originalContent;\n\n  // Show loading state when PageProvider is not ready\n  if (!hasRequiredData) {\n    return (\n      <AssetEditorLayout pageName=\"questionnaire-editor\">\n        <div className=\"questionnaire-editor-loading\">\n          <h2>Initializing Questionnaire Editor...</h2>\n          <p>Loading repository context...</p>\n        </div>\n      </AssetEditorLayout>\n    );\n  }\n\n  // Show loading state when fetching questionnaires\n  if (loading && !editing) {\n    return (\n      <AssetEditorLayout \n        pageName=\"questionnaire-editor\"\n        repository={repository}\n        branch={branch}\n      >\n        <div className=\"questionnaire-editor-loading\">\n          <h2>Loading Questionnaires...</h2>\n          <p>Fetching questionnaire files from repository...</p>\n        </div>\n      </AssetEditorLayout>\n    );\n  }\n\n  return (\n    <AssetEditorLayout\n      pageName=\"questionnaire-editor\"\n      file={selectedQuestionnaire}\n      repository={repository}\n      branch={branch}\n      content={questionnaireContent ? JSON.stringify(questionnaireContent, null, 2) : null}\n      originalContent={originalContent}\n      hasChanges={hasChanges}\n      onSave={handleSave}\n      showSaveButtons={editing}\n    >\n      <div className=\"questionnaire-editor\">\n        <div className=\"questionnaire-content\">\n          {error && (\n            <div className=\"error-message\">\n              <strong>Error:</strong> {error}\n            </div>\n          )}\n\n          {!editing ? (\n            <div className=\"questionnaire-list\">\n              <div className=\"list-header\">\n                <h2>Questionnaires ({questionnaires.length})</h2>\n                <button \n                  onClick={createNewQuestionnaire}\n                  className=\"btn-primary\"\n                  disabled={!lformsLoaded}\n                >\n                  + Create New Questionnaire\n                </button>\n              </div>\n\n              {questionnaires.length === 0 ? (\n                <div className=\"empty-state\">\n                  <div className=\"empty-icon\">📋</div>\n                  <h3>No Questionnaires Found</h3>\n                  <p>This repository doesn't have any FHIR Questionnaire files yet.</p>\n                  <p>Questionnaires can be stored as:</p>\n                  <ul style={{textAlign: 'left', maxWidth: '400px', margin: '0 auto'}}>\n                    <li><code>input/questionnaires/*.json</code> - FHIR JSON format</li>\n                    <li><code>input/fsh/questionnaires/*.fsh</code> - FHIR Shorthand format</li>\n                  </ul>\n                  <button \n                    onClick={createNewQuestionnaire}\n                    className=\"btn-primary\"\n                    disabled={!lformsLoaded}\n                  >\n                    Create Your First Questionnaire\n                  </button>\n                </div>\n              ) : (\n                <div className=\"questionnaire-grid\">\n                  {questionnaires.map((questionnaire) => (\n                    <div \n                      key={questionnaire.name}\n                      className=\"questionnaire-card\"\n                      onClick={() => loadQuestionnaireContent(questionnaire)}\n                    >\n                      <div className=\"card-icon\">\n                        {questionnaire.fileType === 'FSH' ? '📝' : '📋'}\n                      </div>\n                      <div className=\"card-content\">\n                        <h3>{questionnaire.displayName}</h3>\n                        <p className=\"card-type\">{questionnaire.fileType} Questionnaire</p>\n                        <p className=\"card-path\">{questionnaire.fullPath}</p>\n                        <p className=\"card-size\">{(questionnaire.size / 1024).toFixed(1)} KB</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"questionnaire-editor-container\">\n              <div className=\"editor-header\">\n                <button \n                  onClick={() => setEditing(false)}\n                  className=\"back-to-list\"\n                >\n                  ← Back to List\n                </button>\n                <h2>{selectedQuestionnaire?.displayName || 'New Questionnaire'}</h2>\n                \n                {/* Mode toggle for JSON questionnaires */}\n                {questionnaireContent?.fileType !== 'FSH' && (\n                  <div className=\"edit-mode-toggle\">\n                    <button \n                      className={`mode-btn ${editMode === 'visual' ? 'active' : ''}`}\n                      onClick={() => setEditMode('visual')}\n                    >\n                      📝 Visual Editor\n                    </button>\n                    <button \n                      className={`mode-btn ${editMode === 'json' ? 'active' : ''}`}\n                      onClick={() => setEditMode('json')}\n                    >\n                      {} JSON Editor\n                    </button>\n                  </div>\n                )}\n              </div>\n\n              {lformsError && (\n                <div className=\"error-message\">\n                  <strong>LForms Error:</strong> {lformsError}\n                </div>\n              )}\n\n              {!lformsLoaded ? (\n                <div className=\"lforms-loading\">\n                  <p>Loading questionnaire editor...</p>\n                </div>\n              ) : (\n                <div className=\"lforms-container\">\n                  {/* Preview Section */}\n                  <div className=\"questionnaire-preview\">\n                    <h4>Questionnaire Preview</h4>\n                    <div className=\"questionnaire-metadata\">\n                      <p><strong>Title:</strong> {questionnaireContent?.title || 'Untitled'}</p>\n                      <p><strong>Status:</strong> {questionnaireContent?.status || 'draft'}</p>\n                      <p><strong>Format:</strong> {questionnaireContent?.fileType || 'JSON'}</p>\n                      <p><strong>Date:</strong> {questionnaireContent?.date || 'Not specified'}</p>\n                      {questionnaireContent?.fileType !== 'FSH' && (\n                        <p><strong>Items:</strong> {questionnaireContent?.item?.length || 0} questions</p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {/* Editor Section */}\n                  {questionnaireContent?.fileType === 'FSH' ? (\n                    // FSH files - read-only mode\n                    <div className=\"questionnaire-content-editor\">\n                      <h4>\n                        FHIR Shorthand Content\n                        <span className=\"readonly-badge\"> (Read-Only)</span>\n                      </h4>\n                      \n                      <div className=\"fsh-editor\">\n                        <textarea\n                          value={questionnaireContent?.rawContent || ''}\n                          readOnly={true}\n                          className=\"fsh-content\"\n                          rows={20}\n                        />\n                        <div className=\"fsh-notice\">\n                          <strong>📝 FSH File:</strong> This is a FHIR Shorthand questionnaire. \n                          Direct editing is not supported yet - please edit the .fsh file directly in your repository.\n                        </div>\n                      </div>\n                    </div>\n                  ) : editMode === 'visual' ? (\n                    // Visual editor\n                    <div className=\"visual-editor-section\">\n                      <h4>Visual Questionnaire Builder</h4>\n                      <div className=\"lforms-visual-editor\">\n                        <LFormsVisualEditor \n                          questionnaire={questionnaireContent}\n                          onChange={(updatedQuestionnaire) => {\n                            setQuestionnaireContent(updatedQuestionnaire);\n                          }}\n                          onError={setLformsError}\n                        />\n                      </div>\n                    </div>\n                  ) : (\n                    // JSON editor mode\n                    <div className=\"questionnaire-content-editor\">\n                      <h4>Raw JSON Content</h4>\n                      <textarea\n                        value={JSON.stringify(questionnaireContent, null, 2)}\n                        onChange={(e) => {\n                          try {\n                            const newContent = JSON.parse(e.target.value);\n                            setQuestionnaireContent(newContent);\n                          } catch (error) {\n                            // Invalid JSON, don't update\n                            console.warn('Invalid JSON in editor');\n                          }\n                        }}\n                        className=\"json-editor\"\n                        rows={20}\n                      />\n                    </div>\n                  )}\n                  \n                  <div className=\"editor-instructions\">\n                    <h4>Editing Instructions:</h4>\n                    {questionnaireContent?.fileType === 'FSH' ? (\n                      <ul>\n                        <li>This is a FHIR Shorthand (.fsh) questionnaire file</li>\n                        <li>FSH files define questionnaires using a domain-specific language</li>\n                        <li>To edit this questionnaire, modify the .fsh file directly in your repository</li>\n                        <li>FSH files are compiled into JSON during the build process</li>\n                        <li>Learn more about FHIR Shorthand at <a href=\"https://build.fhir.org/ig/HL7/fhir-shorthand/\" target=\"_blank\" rel=\"noopener noreferrer\">HL7 FHIR Shorthand</a></li>\n                      </ul>\n                    ) : editMode === 'visual' ? (\n                      <ul>\n                        <li>Use the visual editor above to build your questionnaire interactively</li>\n                        <li>Add, remove, and modify questions using the form builder interface</li>\n                        <li>Preview your questionnaire as users will see it</li>\n                        <li>Switch to JSON mode to see the raw FHIR Questionnaire structure</li>\n                        <li>Changes are automatically saved as you work</li>\n                      </ul>\n                    ) : (\n                      <ul>\n                        <li>Edit the JSON structure above to modify the questionnaire</li>\n                        <li>The preview shows key questionnaire metadata</li>\n                        <li>Changes are automatically detected for saving</li>\n                        <li>Switch to Visual mode for an easier editing experience</li>\n                        <li>Click \"Save to Staging\" to save changes locally</li>\n                      </ul>\n                    )}\n                    <div className=\"help-tip\">\n                      <strong>✨ New:</strong> Visual questionnaire editor is now available using LHC-Forms!\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        <ContextualHelpMascot \n          pageId=\"questionnaire-editor\"\n          contextData={{\n            repository: repository.name,\n            branch: branch,\n            hasQuestionnaires: questionnaires.length > 0,\n            isEditing: editing\n          }}\n        />\n      </div>\n    </AssetEditorLayout>\n  );\n};\n\n// Error Boundary for QuestionnaireEditor\nclass QuestionnaireErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error: error.message };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error('QuestionnaireEditor caught an error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <AssetEditorLayout pageName=\"questionnaire-editor\">\n          <div className=\"error-state\">\n            <h2>⚠️ Questionnaire Editor Error</h2>\n            <p>An unexpected error occurred while loading the questionnaire editor.</p>\n            <div className=\"error-details\">\n              <strong>Error:</strong> {this.state.error}\n            </div>\n            <button \n              onClick={() => {\n                this.setState({ hasError: false, error: null });\n                window.location.reload();\n              }}\n              className=\"btn-primary\"\n            >\n              Reload Editor\n            </button>\n          </div>\n        </AssetEditorLayout>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nconst QuestionnaireEditor = () => {\n  return (\n    <PageLayout pageName=\"questionnaire-editor\">\n      <QuestionnaireErrorBoundary>\n        <QuestionnaireEditorContent />\n      </QuestionnaireErrorBoundary>\n    </PageLayout>\n  );\n};\n\nexport default QuestionnaireEditor;"],"names":["LFormsVisualEditor","_ref","_questionnaire$item2","_questionnaire$item3","_questionnaire$item4","questionnaire","onChange","previewMode","setPreviewMode","useState","useEffect","async","console","log","error","initializeLForms","updateQuestion","index","field","value","item","updatedItems","_objectSpread","updatedQuestionnaire","updateMetadata","_jsxs","className","children","_jsx","concat","onClick","title","description","map","text","required","type","placeholder","disabled","rows","step","linkId","htmlFor","id","e","target","name","status","publisher","length","addQuestion","_questionnaire$item","newItem","Date","now","filter","_","i","removeQuestion","checked","QuestionnaireEditorContent","_questionnaireContent","repository","branch","isLoading","pageLoading","useDAKParams","questionnaires","setQuestionnaires","selectedQuestionnaire","setSelectedQuestionnaire","loading","setLoading","setError","editing","setEditing","questionnaireContent","setQuestionnaireContent","originalContent","setOriginalContent","lformsLoaded","setLformsLoaded","editMode","setEditMode","lformsError","setLformsError","hasRequiredData","message","loadLForms","allQuestionnaires","paths","path","extensions","pathConfig","questionnaireFiles","githubService","getDirectoryContents","owner","login","file","some","ext","endsWith","extension","find","displayName","replace","fullPath","fileType","push","warn","loadQuestionnaires","extractFshTitle","content","patterns","pattern","match","trim","extractFshStatus","extractFshName","extractFshDescription","createNewQuestionnaire","newQuestionnaire","resourceType","meta","versionId","lastUpdated","toISOString","url","date","split","JSON","stringify","isNew","hasChanges","AssetEditorLayout","pageName","onSave","handleSave","saveType","showSaveButtons","rawContent","readOnly","onError","newContent","parse","href","rel","style","textAlign","maxWidth","margin","getFileContent","questionnaireData","isReadOnly","loadQuestionnaireContent","size","toFixed","ContextualHelpMascot","pageId","contextData","hasQuestionnaires","isEditing","QuestionnaireErrorBoundary","Component","constructor","props","super","this","state","hasError","getDerivedStateFromError","componentDidCatch","errorInfo","render","setState","window","location","reload","QuestionnaireEditor","PageLayout"],"sourceRoot":""}