"use strict";(self.webpackChunksgex_workbench=self.webpackChunksgex_workbench||[]).push([[7018],{49162:(e,t,r)=>{r.d(t,{Q5:()=>n,hI:()=>i,kv:()=>c,q_:()=>a,uC:()=>o,x:()=>s});const s={DAK:"dak",COMPONENT:"component",ASSET:"asset"};class n{constructor(e){let{id:t,level:r,title:s,description:n,parameters:i=[],tags:a=[],version:o="1.0.0",isTemplate:c=!1,componentTypes:l=[],assetTypes:u=[]}=e;this.id=t,this.level=r,this.title=s,this.description=n,this.parameters=i,this.tags=a,this.version=o,this.isTemplate=c,this.componentTypes=l,this.assetTypes=u}}class i{constructor(e){let{name:t,type:r="string",required:s=!1,description:n="",defaultValue:i=null,validation:a={}}=e;this.name=t,this.type=r,this.required=s,this.description=n,this.defaultValue=i,this.validation=a}}class a{constructor(e){let{repository:t,locale:r="en_US",branch:s="main",user:n=null,assetFile:i=null,componentType:a=null,storage:o=null}=e;this.repository=t,this.locale=r,this.branch=s,this.user=n,this.assetFile=i,this.componentType=a,this.storage=o}}class o{constructor(e){let{structured:t={},narrative:r="",warnings:s=[],errors:n=[],meta:i={}}=e;this.structured=t,this.narrative=r,this.warnings=s,this.errors=n,this.meta=i}}class c{constructor(e){let{scope:t="repository",key:r="",ttl:s=3600,dependencies:n=[]}=e;this.scope=t,this.key=r,this.ttl=s,this.dependencies=n}}},87018:(e,t,r)=>{r.d(t,{A:()=>h});var s=r(89379),n=r(49162),i=r(16558);const a=new class{constructor(){this.registry=null,this.loaded=!1}loadFromYaml(e){try{this.registry=i.default.load(e),this.loaded=!0}catch(t){throw new Error("Failed to parse parameter registry YAML: ".concat(t.message))}}getParameters(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(!this.loaded||!this.registry)throw new Error("Parameter registry not loaded");const r=[];if(this.registry.defaults)for(const[s,a]of Object.entries(this.registry.defaults))r.push(new n.hI({name:s,type:a.type,required:a.required||!1,description:a.description||"",defaultValue:a.default||null,validation:a.validation||{}}));if(this.registry[e])if(t&&this.registry[e][t])for(const[a,o]of Object.entries(this.registry[e][t]))r.push(new n.hI((0,s.A)({name:a},o)));else if(!t)for(const[a,o]of Object.entries(this.registry[e]))"object"===typeof o&&o.type&&r.push(new n.hI((0,s.A)({name:a},o)));const i=new Map;return r.forEach(e=>{i.set(e.name,e)}),Array.from(i.values())}validateParameters(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;const s=this.getParameters(t,r),n={},i=[];for(const a of s){const t=e[a.name];if(a.required&&(void 0===t||null===t)){i.push("Required parameter '".concat(a.name,"' is missing"));continue}const r=void 0!==t?t:a.defaultValue;if(null!==r&&void 0!==r){const e=this.validateParameterType(r,a);if(e){i.push("Parameter '".concat(a.name,"': ").concat(e));continue}const t=this.validateParameterCustom(r,a);if(t){i.push("Parameter '".concat(a.name,"': ").concat(t));continue}}n[a.name]=r}for(const a of Object.keys(e))s.find(e=>e.name===a)||i.push("Unknown parameter '".concat(a,"'"));return{normalized:n,errors:i,isValid:0===i.length}}validateParameterType(e,t){const r=t.type,s=typeof e;switch(r){case"string":if("string"!==s)return"Expected string, got ".concat(s);break;case"boolean":if("boolean"!==s)return"Expected boolean, got ".concat(s);break;case"number":if("number"!==s||isNaN(e))return"Expected number, got ".concat(s);break;case"array":if(!Array.isArray(e))return"Expected array, got ".concat(s);break;case"object":if("object"!==s||Array.isArray(e))return"Expected object, got ".concat(s);break;default:return"Unknown type: ".concat(r)}return null}validateParameterCustom(e,t){if(!t.validation)return null;const r=t.validation;if(r.pattern&&"string"===typeof e){if(!new RegExp(r.pattern).test(e))return"Value does not match pattern ".concat(r.pattern)}return r.enum&&Array.isArray(r.enum)&&!r.enum.includes(e)?"Value must be one of: ".concat(r.enum.join(", ")):void 0!==r.minLength&&"string"===typeof e&&e.length<r.minLength?"String must be at least ".concat(r.minLength," characters"):void 0!==r.maxLength&&"string"===typeof e&&e.length>r.maxLength?"String must be at most ".concat(r.maxLength," characters"):void 0!==r.min&&"number"===typeof e&&e<r.min?"Number must be at least ".concat(r.min):void 0!==r.max&&"number"===typeof e&&e>r.max?"Number must be at most ".concat(r.max):null}getParameterSchema(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const r=this.getParameters(e,t),s={},n=[];for(const i of r){const e={type:i.type,description:i.description};null!==i.defaultValue&&(e.default=i.defaultValue),i.validation&&Object.assign(e,i.validation),s[i.name]=e,i.required&&n.push(i.name)}return{type:"object",properties:s,required:n}}};a.loadFromYaml('\ndefaults:\n  repository:\n    type: string\n    required: true\n    description: "Repository context (always required)"\n  locale:\n    type: string\n    required: false\n    default: "en_US"\n    description: "Locale for responses"\n  branch:\n    type: string\n    required: false\n    default: "main"\n    description: "Git branch context"\n\ndak:\n\ncomponent:\n  businessProcess:\n    componentType:\n      type: string\n      required: true\n      default: "businessProcess"\n      description: "Type of component being analyzed"\n\nasset:\n  lesson:\n    assetFile:\n      type: string\n      required: true\n      description: "Relative path to the lesson file"\n');const o=a;var c=r(85571);class l{async readFile(e){throw new Error("readFile must be implemented by subclass")}async fileExists(e){throw new Error("fileExists must be implemented by subclass")}async listFiles(e){throw new Error("listFiles must be implemented by subclass")}async getFileInfo(e){throw new Error("getFileInfo must be implemented by subclass")}}class u extends l{constructor(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"main";super(),this.githubService=e,this.repository=t,this.branch=r,this.cache=new Map,this.logger=c.A.getLogger("GitHubStorage")}parseRepository(e){if("string"===typeof e){if(e.includes("github.com")){const t=e.match(/github\.com\/([^/]+)\/([^/?#]+)/);if(t)return{owner:t[1],repo:t[2].replace(/\.git$/,"")}}const t=e.split("/");if(2===t.length)return{owner:t[0],repo:t[1]}}throw new Error("Invalid repository format: ".concat(e))}async readFile(e){const t="".concat(this.repository,":").concat(this.branch,":").concat(e);if(this.cache.has(t))return this.logger.debug("Cache hit for ".concat(e)),this.cache.get(t);try{const{owner:r,repo:s}=this.parseRepository(this.repository);this.logger.debug("Reading file ".concat(e," from ").concat(r,"/").concat(s," (branch: ").concat(this.branch,")")),this.logger.debug("About to call githubService.getFileContent...");const n=await this.githubService.getFileContent(r,s,e,this.branch);if(this.logger.debug("\u2705 GitHub service call completed successfully"),this.logger.debug("Received content - type: ".concat(typeof n,", length: ").concat((null===n||void 0===n?void 0:n.length)||"undefined")),"string"!==typeof n)throw this.logger.error("\u274c Expected string but got ".concat(typeof n,":"),n),new Error("GitHub service returned invalid content type: ".concat(typeof n));0===n.length&&this.logger.warn("\u26a0\ufe0f Content string is empty for ".concat(e)),this.logger.debug("Converting string to Buffer...");const i=Buffer.from(n,"utf-8");return this.logger.debug("\u2705 Buffer created successfully, size: ".concat(i.length," bytes")),this.cache.set(t,i),this.logger.debug("\u2705 Successfully read file ".concat(e,", cached and returning content")),this.logger.debug("Content preview (first 200 chars):",n.substring(0,200)),i}catch(s){var r;throw this.logger.error("\u274c Failed to read file ".concat(e,":"),s),this.logger.error("Error details:",{message:s.message,name:s.name,stack:null===(r=s.stack)||void 0===r?void 0:r.substring(0,500)}),new Error("Failed to read file ".concat(e,": ").concat(s.message))}}async fileExists(e){try{this.logger.debug("Checking if file exists: ".concat(e)),this.logger.debug("Repository: ".concat(this.repository,", Branch: ").concat(this.branch));const{owner:t,repo:r}=this.parseRepository(this.repository);this.logger.debug("Parsed repository - owner: ".concat(t,", repo: ").concat(r)),this.githubService&&this.githubService.isAuth?this.logger.debug("Authentication status: ".concat(this.githubService.isAuth())):this.logger.debug("GitHub service not available or no auth method"),this.logger.debug("About to call readFile...");const s=await this.readFile(e);return this.logger.debug("readFile completed successfully for ".concat(e,", content size: ").concat((null===s||void 0===s?void 0:s.length)||"undefined")),this.logger.debug("File ".concat(e," exists - returning true")),!0}catch(r){var t;return this.logger.error("readFile failed for ".concat(e,":"),r.message),this.logger.error("Full error details:",{name:r.name,message:r.message,stack:null===(t=r.stack)||void 0===t?void 0:t.substring(0,300)}),this.logger.debug("File ".concat(e," does not exist - returning false")),!1}}async listFiles(e){try{const{owner:t,repo:r}=this.parseRepository(this.repository),s=(await this.githubService.getRepositoryTree(t,r,this.branch,!0)).tree.filter(e=>"blob"===e.type).map(e=>e.path);if(e.includes("*")||e.includes("?")){const t=e.replace(/\./g,"\\.").replace(/\*/g,".*").replace(/\?/g,"."),r=new RegExp("^".concat(t,"$"));return s.filter(e=>r.test(e))}return s.filter(t=>t.startsWith(e))}catch(t){throw new Error("Failed to list files: ".concat(t.message))}}async getFileInfo(e){try{const{owner:t,repo:r}=this.parseRepository(this.repository),s=await this.githubService.getFileContent(t,r,e,this.branch);return{size:Buffer.from(s.content,"base64").length,sha:s.sha,path:s.path,type:s.type,url:s.html_url}}catch(t){throw new Error("Failed to get file info for ".concat(e,": ").concat(t.message))}}}const h=new class{constructor(){this.questionRegistry=new Map,this.initialized=!1}async initialize(){if(!this.initialized)try{await this.loadQuestions(),this.initialized=!0}catch(e){throw new Error("Failed to initialize FAQ engine: ".concat(e.message))}}async loadQuestions(){const e=[{id:"dak-name",module:()=>r.e(399).then(r.bind(r,30399))},{id:"dak-version",module:()=>r.e(3714).then(r.bind(r,33714))},{id:"business-process-workflows",module:()=>r.e(7076).then(r.bind(r,97076))},{id:"decision-table-inputs",module:()=>r.e(5619).then(r.bind(r,85619))}];for(const r of e)try{const e=await r.module();e.metadata&&e.execute?this.questionRegistry.set(r.id,{metadata:e.metadata,execute:e.execute,Render:e.Render||null}):console.warn("Question ".concat(r.id," is missing required exports (metadata, execute)"))}catch(t){console.error("Failed to load question ".concat(r.id,":"),t)}}getCatalog(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!this.initialized)throw new Error("FAQ engine not initialized");let t=Array.from(this.questionRegistry.values()).map(e=>e.metadata);return e.level&&(t=t.filter(t=>t.level===e.level)),e.tags&&Array.isArray(e.tags)&&(t=t.filter(t=>e.tags.some(e=>t.tags.includes(e)))),e.componentType&&(t=t.filter(t=>!t.componentTypes||0===t.componentTypes.length||t.componentTypes.includes(e.componentType))),e.assetType&&(t=t.filter(t=>!t.assetTypes||0===t.assetTypes.length||t.assetTypes.includes(e.assetType))),t}async executeBatch(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.initialized||await this.initialize();const r=[];for(const i of e)try{const e=await this.executeQuestion(i,t);r.push({questionId:i.questionId,success:!0,result:e})}catch(s){r.push({questionId:i.questionId,success:!1,error:s.message,result:new n.uC({structured:{},narrative:this.getErrorNarrative(i.locale||"en_US",s.message),errors:[s.message],meta:{}})})}return r}async executeQuestion(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const{questionId:r,parameters:i={},assetFiles:a=[]}=e,c=this.questionRegistry.get(r);if(!c)throw new Error("Question not found: ".concat(r));if(c.metadata.isTemplate&&a.length>0)return await this.executeTemplateQuestion(c,e,t);const l=o.validateParameters(i,c.metadata.level,this.getQuestionType(c.metadata));if(!l.isValid)throw new Error("Parameter validation failed: ".concat(l.errors.join(", ")));const u=this.createStorage(l.normalized,t),h=new n.q_({repository:l.normalized.repository,locale:l.normalized.locale||"en_US",branch:l.normalized.branch||"main",user:t.user||null,assetFile:l.normalized.assetFile||null,componentType:l.normalized.componentType||null,storage:u}),d=(0,s.A)((0,s.A)({},l.normalized),{},{storage:u,context:h});return await c.execute(d)}async executeTemplateQuestion(e,t,r){const{parameters:i={},assetFiles:a=[]}=t,c=[],l=[],u=[];for(const p of a)try{const t=(0,s.A)((0,s.A)({},i),{},{assetFile:p}),a=o.validateParameters(t,e.metadata.level,this.getQuestionType(e.metadata));if(!a.isValid){u.push("Asset ".concat(p,": ").concat(a.errors.join(", ")));continue}const h=this.createStorage(a.normalized,r),d=new n.q_({repository:a.normalized.repository,locale:a.normalized.locale||"en_US",branch:a.normalized.branch||"main",user:r.user||null,assetFile:p,componentType:a.normalized.componentType||null,storage:h}),g=(0,s.A)((0,s.A)({},a.normalized),{},{storage:h,context:d}),m=await e.execute(g);c.push({assetFile:p,result:m}),m.warnings&&l.push(...m.warnings),m.errors&&u.push(...m.errors)}catch(g){u.push("Asset ".concat(p,": ").concat(g.message))}const h={assets:c.map(e=>(0,s.A)({assetFile:e.assetFile},e.result.structured)),summary:{totalAssets:a.length,successfulAssets:c.length,failedAssets:a.length-c.length}},d=this.aggregateNarratives(c,t.locale||"en_US");return new n.uC({structured:h,narrative:d,warnings:l,errors:u,meta:{isAggregated:!0,questionId:e.metadata.id,assetCount:a.length}})}createStorage(e,t){if(t.githubService)return new u(t.githubService,e.repository,e.branch||"main");throw new Error("Local storage not implemented in web context")}getQuestionType(e){return e.componentTypes&&e.componentTypes.length>0?e.componentTypes[0]:e.assetTypes&&e.assetTypes.length>0?e.assetTypes[0]:null}aggregateNarratives(e,t){if(0===e.length)return"<h4>No Results</h4><p>No assets were processed successfully.</p>";let r="<h4>Asset Analysis Results</h4>";r+="<p>Processed ".concat(e.length," asset(s):</p>"),r+="<ul>";for(const{assetFile:s,result:n}of e)r+="<li><strong>".concat(s,"</strong>"),n.errors&&n.errors.length>0?r+=' <span class="error">('.concat(n.errors.length," error(s))</span>"):n.warnings&&n.warnings.length>0?r+=' <span class="warning">('.concat(n.warnings.length," warning(s))</span>"):r+=' <span class="success">\u2713</span>',r+="</li>";return r+="</ul>",r}getErrorNarrative(e,t){const r={en_US:'<h4>Error</h4><p class="error">An error occurred while executing the question: '.concat(t,"</p>"),fr_FR:"<h4>Erreur</h4><p class=\"error\">Une erreur s'est produite lors de l'ex\xe9cution de la question: ".concat(t,"</p>"),es_ES:'<h4>Error</h4><p class="error">Ocurri\xf3 un error al ejecutar la pregunta: '.concat(t,"</p>")};return r[e]||r.en_US}normalizeLocale(e){if(!e)return"en_US";const t=e.replace("-","_");if(["en_US","fr_FR","es_ES","ar_AR","zh_CN","ru_RU"].includes(t))return t;return{en:"en_US",fr:"fr_FR",es:"es_ES",ar:"ar_AR",zh:"zh_CN",ru:"ru_RU"}[t.split("_")[0]]||"en_US"}}}}]);