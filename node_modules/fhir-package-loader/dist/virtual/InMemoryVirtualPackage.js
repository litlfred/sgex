"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemoryVirtualPackage = void 0;
class InMemoryVirtualPackage {
    constructor(packageJSON, resources, options = {}) {
        var _a, _b;
        this.packageJSON = packageJSON;
        this.resources = resources;
        this.log = (_a = options.log) !== null && _a !== void 0 ? _a : (() => { });
        this.allowNonResources = (_b = options.allowNonResources) !== null && _b !== void 0 ? _b : false;
        this.registeredResources = new Set();
    }
    registerResources(register) {
        return __awaiter(this, void 0, void 0, function* () {
            this.resources.forEach((resource, key) => {
                try {
                    register(key, resource, this.allowNonResources);
                    this.registeredResources.add(key);
                }
                catch (e) {
                    this.log('error', `Failed to register resource with key: ${key}`);
                    if (e.stack) {
                        this.log('debug', e.stack);
                    }
                }
            });
        });
    }
    getPackageJSON() {
        return this.packageJSON;
    }
    getResourceByKey(key) {
        if (this.registeredResources.has(key)) {
            const resource = this.resources.get(key);
            if (!resource) {
                throw new Error(`Could not find in-memory resource with key: ${key}`);
            }
            return resource;
        }
        throw new Error(`Unregistered resource key: ${key}`);
    }
}
exports.InMemoryVirtualPackage = InMemoryVirtualPackage;
//# sourceMappingURL=InMemoryVirtualPackage.js.map