"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildDotFhirDotOrgClient = void 0;
const errors_1 = require("../errors");
const utils_1 = require("../utils");
class BuildDotFhirDotOrgClient {
    constructor(options = {}) {
        var _a;
        this.log = (_a = options.log) !== null && _a !== void 0 ? _a : (() => { });
    }
    downloadCurrentBuild(name, branch) {
        return __awaiter(this, void 0, void 0, function* () {
            const version = branch ? `current$${branch}` : 'current';
            const baseURL = yield this.getCurrentBuildBaseURL(name, branch);
            if (!baseURL) {
                throw new errors_1.CurrentPackageLoadError(`${name}#${version}`);
            }
            const url = `${baseURL}/package.tgz`;
            this.log('info', `Attempting to download ${name}#${version} from ${url}`);
            const tarballRes = yield (0, utils_1.axiosGet)(url, { responseType: 'stream' });
            if ((tarballRes === null || tarballRes === void 0 ? void 0 : tarballRes.status) === 200 && (tarballRes === null || tarballRes === void 0 ? void 0 : tarballRes.data)) {
                return tarballRes.data;
            }
            throw new Error(`Failed to download ${name}#${version} from ${url}`);
        });
    }
    getCurrentBuildDate(name, branch) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const baseURL = yield this.getCurrentBuildBaseURL(name, branch);
            const manifest = yield (0, utils_1.axiosGet)(`${baseURL}/package.manifest.json`);
            return (_a = manifest === null || manifest === void 0 ? void 0 : manifest.data) === null || _a === void 0 ? void 0 : _a.date;
        });
    }
    getCurrentBuildBaseURL(name, branch) {
        return __awaiter(this, void 0, void 0, function* () {
            const baseUrl = 'https://build.fhir.org/ig';
            const res = yield (0, utils_1.axiosGet)(`${baseUrl}/qas.json`);
            const qaData = res === null || res === void 0 ? void 0 : res.data;
            // Find matching packages and sort by date to get the most recent
            let newestPackage;
            if ((qaData === null || qaData === void 0 ? void 0 : qaData.length) > 0) {
                let matchingPackages = qaData.filter(p => p['package-id'] === name);
                if (branch == null) {
                    matchingPackages = matchingPackages.filter(p => p.repo.match(/\/(master|main)\/qa\.json$/));
                }
                else {
                    matchingPackages = matchingPackages.filter(p => p.repo.endsWith(`/${branch}/qa.json`));
                }
                newestPackage = matchingPackages.sort((p1, p2) => {
                    return Date.parse(p2['date']) - Date.parse(p1['date']);
                })[0];
            }
            if (newestPackage === null || newestPackage === void 0 ? void 0 : newestPackage.repo) {
                const packagePath = newestPackage.repo.slice(0, -8); // remove "/qa.json" from end
                return `${baseUrl}/${packagePath}`;
            }
        });
    }
}
exports.BuildDotFhirDotOrgClient = BuildDotFhirDotOrgClient;
//# sourceMappingURL=BuildDotFhirDotOrgClient.js.map