"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiskBasedPackageCache = void 0;
const path_1 = __importDefault(require("path"));
const promises_1 = require("stream/promises");
const fhir_1 = require("fhir/fhir");
const fs_extra_1 = __importDefault(require("fs-extra"));
const tar = __importStar(require("tar"));
const temp_1 = __importDefault(require("temp"));
class DiskBasedPackageCache {
    constructor(cachePath, options = {}) {
        var _a;
        this.cachePath = cachePath;
        this.log = (_a = options.log) !== null && _a !== void 0 ? _a : (() => { });
        this.fhirConverter = new fhir_1.Fhir();
    }
    cachePackageTarball(name, version, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const packageLabel = `${name}#${version}`;
            // Extract the package to a temporary directory
            temp_1.default.track();
            const tempDirectory = temp_1.default.mkdirSync();
            yield (0, promises_1.pipeline)(data, tar.x({ cwd: tempDirectory }));
            this.log('info', `Downloaded ${packageLabel}`);
            yield cleanCachedPackage(tempDirectory);
            // Add or replace the package in the FHIR cache
            const targetDirectory = path_1.default.resolve(this.cachePath, packageLabel);
            if (fs_extra_1.default.existsSync(targetDirectory)) {
                yield fs_extra_1.default.remove(targetDirectory);
            }
            yield fs_extra_1.default.move(tempDirectory, targetDirectory);
            this.log('info', `Cached ${packageLabel} to ${targetDirectory}`);
            return targetDirectory;
        });
    }
    isPackageInCache(name, version) {
        return fs_extra_1.default.existsSync(path_1.default.resolve(this.cachePath, `${name}#${version}`));
    }
    getPackagePath(name, version) {
        if (this.isPackageInCache(name, version)) {
            return path_1.default.resolve(this.cachePath, `${name}#${version}`);
        }
    }
    getPackageJSONPath(name, version) {
        const jsonPath = path_1.default.resolve(this.cachePath, `${name}#${version}`, 'package', 'package.json');
        if (fs_extra_1.default.existsSync(jsonPath)) {
            return jsonPath;
        }
    }
    getPotentialResourcePaths(name, version) {
        if (!this.isPackageInCache(name, version)) {
            return [];
        }
        const contentPath = path_1.default.resolve(this.cachePath, `${name}#${version}`, 'package');
        // Since every OS may load paths in a different order, ensure consistency by sorting the final paths
        return fs_extra_1.default
            .readdirSync(contentPath, { withFileTypes: true })
            .filter(entry => entry.isFile() && /^[^.].*\.json$/i.test(entry.name))
            .map(entry => path_1.default.resolve(contentPath, entry.name))
            .sort();
    }
    getResourceAtPath(resourcePath) {
        let resource;
        if (/.xml$/i.test(resourcePath)) {
            try {
                const xml = fs_extra_1.default.readFileSync(resourcePath).toString();
                resource = this.fhirConverter.xmlToObj(xml);
            }
            catch (_a) {
                throw new Error(`Failed to get XML resource at path ${resourcePath}`);
            }
        }
        else if (/.json$/i.test(resourcePath)) {
            try {
                resource = fs_extra_1.default.readJSONSync(resourcePath);
            }
            catch (_b) {
                throw new Error(`Failed to get JSON resource at path ${resourcePath}`);
            }
        }
        else {
            throw new Error(`Failed to find XML or JSON file at path ${resourcePath}`);
        }
        return resource;
    }
}
exports.DiskBasedPackageCache = DiskBasedPackageCache;
/**
 * This function takes a package which contains contents at the same level as the "package" folder, and nests
 * all that content within the "package" folder.
 *
 * A package should have the format described here https://confluence.hl7.org/pages/viewpage.action?pageId=35718629#NPMPackageSpecification-Format
 * in which all contents are within the "package" folder. Some packages (ex US Core 3.1.0) have an incorrect format in which folders
 * are not sub-folders of "package", but are instead at the same level. The IG Publisher fixes these packages as described
 * https://chat.fhir.org/#narrow/stream/215610-shorthand/topic/dev.20dependencies, so we should as well.
 *
 * @param {string} packageDirectory - The directory containing the package
 */
function cleanCachedPackage(packageDirectory) {
    return __awaiter(this, void 0, void 0, function* () {
        if (fs_extra_1.default.existsSync(path_1.default.join(packageDirectory, 'package'))) {
            (yield fs_extra_1.default.readdir(packageDirectory))
                .filter(file => file !== 'package')
                .forEach((file) => __awaiter(this, void 0, void 0, function* () {
                yield fs_extra_1.default.rename(path_1.default.join(packageDirectory, file), path_1.default.join(packageDirectory, 'package', file));
            }));
        }
    });
}
//# sourceMappingURL=DiskBasedPackageCache.js.map