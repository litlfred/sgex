"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NPMRegistryClient = void 0;
const utils_1 = require("../utils");
const utils_2 = require("./utils");
class NPMRegistryClient {
    constructor(endpoint, options) {
        var _a;
        // Remove trailing '/' from endpoint if applicable
        this.endpoint = endpoint.replace(/\/$/, '');
        this.log = (_a = options.log) !== null && _a !== void 0 ? _a : (() => { });
    }
    resolveVersion(name, version) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, utils_2.resolveVersion)(this.endpoint, name, version);
        });
    }
    download(name, version) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            // Resolve version if necessary
            version = yield this.resolveVersion(name, version);
            // Get the manifest information about the package from the registry
            let url;
            try {
                const manifestRes = yield (0, utils_1.axiosGet)(`${this.endpoint}/${name}`);
                // Find the NPM tarball location in the manifest
                url = (_d = (_c = (_b = (_a = manifestRes.data) === null || _a === void 0 ? void 0 : _a.versions) === null || _b === void 0 ? void 0 : _b[version]) === null || _c === void 0 ? void 0 : _c.dist) === null || _d === void 0 ? void 0 : _d.tarball;
            }
            catch (_e) {
                // Do nothing. Undefined url handled below.
            }
            // If tarball URL is not found, fallback to standard NPM approach per
            // https://docs.fire.ly/projects/Simplifier/features/api.html#package-server-api
            if (!url) {
                url = `${this.endpoint}/${name}/-/${name}-${version}.tgz`;
            }
            this.log('info', `Attempting to download ${name}#${version} from ${url}`);
            const tarballRes = yield (0, utils_1.axiosGet)(url, { responseType: 'stream' });
            if ((tarballRes === null || tarballRes === void 0 ? void 0 : tarballRes.status) === 200 && (tarballRes === null || tarballRes === void 0 ? void 0 : tarballRes.data)) {
                return tarballRes.data;
            }
            if ((tarballRes === null || tarballRes === void 0 ? void 0 : tarballRes.status) === 401) {
                this.log('error', 'Unauthorized! Please check your FPL_REGISTRY_TOKEN.');
            }
            throw new Error(`Failed to download ${name}#${version} from ${url}`);
        });
    }
}
exports.NPMRegistryClient = NPMRegistryClient;
//# sourceMappingURL=NPMRegistryClient.js.map