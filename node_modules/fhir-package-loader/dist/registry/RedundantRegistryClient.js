"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedundantRegistryClient = void 0;
class RedundantRegistryClient {
    constructor(clients, options = {}) {
        var _a;
        this.clients = clients;
        this.log = (_a = options.log) !== null && _a !== void 0 ? _a : (() => { });
    }
    resolveVersion(name, version) {
        return __awaiter(this, void 0, void 0, function* () {
            const packageLabel = `${name}#${version}`;
            for (const client of this.clients) {
                try {
                    return yield client.resolveVersion(name, version);
                }
                catch (_a) {
                    // Do nothing. Fallback to the next one.
                }
            }
            throw Error(`Failed to resolve version for ${packageLabel}`);
        });
    }
    download(name, version) {
        return __awaiter(this, void 0, void 0, function* () {
            const packageLabel = `${name}#${version}`;
            for (const client of this.clients) {
                try {
                    return yield client.download(name, version);
                }
                catch (_a) {
                    // Do nothing. Fallback to the next one.
                }
            }
            throw Error(`Failed to download ${packageLabel}`);
        });
    }
}
exports.RedundantRegistryClient = RedundantRegistryClient;
//# sourceMappingURL=RedundantRegistryClient.js.map