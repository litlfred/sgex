"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveVersion = resolveVersion;
const semver_1 = require("semver");
const errors_1 = require("../errors");
const utils_1 = require("../utils");
function resolveVersion(endpoint, name, version) {
    return __awaiter(this, void 0, void 0, function* () {
        let resolvedVersion = version;
        if (version === 'latest') {
            resolvedVersion = yield lookUpLatestVersion(endpoint, name);
        }
        else if (/^\d+\.\d+\.x$/.test(version)) {
            resolvedVersion = yield lookUpLatestPatchVersion(endpoint, name, version);
        }
        else if (/^\d+\.x$/.test(version)) {
            throw new errors_1.IncorrectWildcardVersionFormatError(name, version);
        }
        return resolvedVersion;
    });
}
function lookUpLatestVersion(endpoint, name) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c;
        try {
            const res = yield (0, utils_1.axiosGet)(`${endpoint}/${name}`, {
                responseType: 'json'
            });
            if ((_c = (_b = (_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a['dist-tags']) === null || _b === void 0 ? void 0 : _b.latest) === null || _c === void 0 ? void 0 : _c.length) {
                return res.data['dist-tags'].latest;
            }
            else {
                throw new errors_1.LatestVersionUnavailableError(name);
            }
        }
        catch (_d) {
            throw new errors_1.LatestVersionUnavailableError(name);
        }
    });
}
function lookUpLatestPatchVersion(endpoint, name, version) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        if (!/^\d+\.\d+\.x$/.test(version)) {
            throw new errors_1.IncorrectWildcardVersionFormatError(name, version);
        }
        try {
            const res = yield (0, utils_1.axiosGet)(`${endpoint}/${name}`, {
                responseType: 'json'
            });
            if ((_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a.versions) {
                const versions = Object.keys(res.data.versions);
                const latest = (0, semver_1.maxSatisfying)(versions, version);
                if (latest == null) {
                    throw new errors_1.LatestVersionUnavailableError(name, true);
                }
                return latest;
            }
            else {
                throw new errors_1.LatestVersionUnavailableError(name, true);
            }
        }
        catch (_b) {
            throw new errors_1.LatestVersionUnavailableError(name, true);
        }
    });
}
//# sourceMappingURL=utils.js.map