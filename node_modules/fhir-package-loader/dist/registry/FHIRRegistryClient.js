"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FHIRRegistryClient = void 0;
const https_1 = __importDefault(require("https"));
const utils_1 = require("../utils");
const utils_2 = require("./utils");
class FHIRRegistryClient {
    constructor(endpoint, options) {
        var _a, _b;
        // Remove trailing '/' from endpoint if applicable
        this.endpoint = endpoint.replace(/\/$/, '');
        this.log = (_a = options.log) !== null && _a !== void 0 ? _a : (() => { });
        this.isBrowserEnvironment = (_b = options.isBrowserEnvironment) !== null && _b !== void 0 ? _b : false;
    }
    resolveVersion(name, version) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, utils_2.resolveVersion)(this.endpoint, name, version);
        });
    }
    download(name, version) {
        return __awaiter(this, void 0, void 0, function* () {
            // Resolve version if necessary
            version = yield this.resolveVersion(name, version);
            // Construct URL from endpoint, name, and version
            // See: https://confluence.hl7.org/pages/viewpage.action?pageId=97454344#FHIRPackageRegistryUserDocumentation-Download
            const url = `${this.endpoint}/${name}/${version}`;
            this.log('info', `Attempting to download ${name}#${version} from ${url}`);
            // Right now, this approach is needed for browser environments
            if (this.isBrowserEnvironment) {
                return new Promise((resolve, reject) => {
                    https_1.default
                        .get(url, res => {
                        if (res.statusCode < 400) {
                            resolve(res);
                        }
                        else {
                            reject(`Failed to download ${name}#${version} from ${url}`);
                        }
                    })
                        .on('error', () => {
                        reject(`Failed to download ${name}#${version} from ${url}`);
                    });
                });
            }
            // Axios approach should be used the vast majority of the time
            const res = yield (0, utils_1.axiosGet)(url, { responseType: 'stream' });
            if ((res === null || res === void 0 ? void 0 : res.status) === 200 && (res === null || res === void 0 ? void 0 : res.data)) {
                return res.data;
            }
            throw new Error(`Failed to download ${name}#${version} from ${url}`);
        });
    }
}
exports.FHIRRegistryClient = FHIRRegistryClient;
//# sourceMappingURL=FHIRRegistryClient.js.map