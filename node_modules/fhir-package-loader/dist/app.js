#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const commander_1 = require("commander");
const fs_extra_1 = __importDefault(require("fs-extra"));
const cache_1 = require("./cache");
const current_1 = require("./current");
const db_1 = require("./db");
const loader_1 = require("./loader");
const registry_1 = require("./registry");
const utils_1 = require("./utils");
function getVersion() {
    var _a;
    const packageJSONPath = path_1.default.join(__dirname, '..', 'package.json');
    if (fs_extra_1.default.existsSync(packageJSONPath)) {
        const sushiVersion = (_a = fs_extra_1.default.readJSONSync(packageJSONPath)) === null || _a === void 0 ? void 0 : _a.version;
        return `FHIR Package Loader v${sushiVersion}`;
    }
    return 'unknown';
}
function getHelpText() {
    return `
Examples:
  fpl install hl7.fhir.us.core#current
  fpl install hl7.fhir.us.core#4.0.0 hl7.fhir.us.mcode#2.0.0 --cachePath ./myProject`;
}
function install(fhirPackages, options) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        if (options.debug)
            utils_1.logger.level = 'debug';
        const log = (level, message) => {
            utils_1.logger.log(level, message);
        };
        const packageDB = yield (0, db_1.createSQLJSPackageDB)();
        const fhirCache = (_a = options.cachePath) !== null && _a !== void 0 ? _a : path_1.default.join(os_1.default.homedir(), '.fhir', 'packages');
        const packageCache = new cache_1.DiskBasedPackageCache(fhirCache, { log });
        const registryClient = new registry_1.DefaultRegistryClient({ log });
        const buildClient = new current_1.BuildDotFhirDotOrgClient({ log });
        const loader = new loader_1.BasePackageLoader(packageDB, packageCache, registryClient, buildClient, {
            log
        });
        for (const pkg of fhirPackages) {
            const [name, version] = pkg.split(/[#@]/, 2);
            yield loader.loadPackage(name, version);
        }
        if (options.export) {
            const fplExport = yield loader.exportDB();
            if (fplExport.mimeType === 'application/x-sqlite3') {
                const exportPath = path_1.default.join(process.cwd(), 'FPL.sqlite');
                fs_extra_1.default.writeFileSync(exportPath, fplExport.data);
                utils_1.logger.info(`Exported FPL database to ${exportPath}`);
            }
        }
    });
}
function app() {
    return __awaiter(this, void 0, void 0, function* () {
        const program = new commander_1.Command()
            .name('fpl')
            .description('CLI for downloading FHIR packages')
            .addHelpText('after', getHelpText())
            .version(getVersion(), '-v, --version'); // Use -v (instead of default -V)
        program
            .command('install') // could set default
            .description('download and unzip specified FHIR packages')
            .usage('<fhirPackages...> [options]')
            .argument('<fhirPackages...>', 'list of FHIR packages to load using the format packageId#packageVersion or packageId@packageVersion')
            .option('-c, --cachePath <dir>', 'where to save packages to and load definitions from (default is the local FHIR cache)')
            .option('-d, --debug', 'output extra debugging information')
            .option('-e, --export', 'export a SQLite DB file with data from the loaded packages')
            .action(install);
        yield program.parseAsync(process.argv);
    });
}
app();
//# sourceMappingURL=app.js.map