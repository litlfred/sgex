"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultPackageLoader = defaultPackageLoader;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const DiskBasedPackageCache_1 = require("../cache/DiskBasedPackageCache");
const current_1 = require("../current");
const db_1 = require("../db");
const registry_1 = require("../registry");
const BasePackageLoader_1 = require("./BasePackageLoader");
function defaultPackageLoader(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const packageDB = yield (0, db_1.createSQLJSPackageDB)();
        const fhirCache = path_1.default.join(os_1.default.homedir(), '.fhir', 'packages');
        const packageCache = new DiskBasedPackageCache_1.DiskBasedPackageCache(fhirCache, {
            log: options.log
        });
        const registryClient = new registry_1.DefaultRegistryClient({ log: options.log });
        const buildClient = new current_1.BuildDotFhirDotOrgClient({ log: options.log });
        return new BasePackageLoader_1.BasePackageLoader(packageDB, packageCache, registryClient, buildClient, options);
    });
}
//# sourceMappingURL=DefaultPackageLoader.js.map