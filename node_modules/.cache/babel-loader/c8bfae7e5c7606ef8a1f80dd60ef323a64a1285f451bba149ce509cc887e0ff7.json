{"ast":null,"code":"import { assign } from 'min-dash';\n\n/**\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('../modeling/Modeling').default} Modeling\n *\n * @typedef {import('../../core/Types').ShapeLike} Shape\n */\n\nvar round = Math.round;\n\n/**\n * Service that allows replacing of elements.\n *\n * @param {Modeling} modeling\n * @param {EventBus} eventBus\n */\nexport default function Replace(modeling, eventBus) {\n  this._modeling = modeling;\n  this._eventBus = eventBus;\n}\nReplace.$inject = ['modeling', 'eventBus'];\n\n/**\n * Replace an element.\n *\n * @param {Shape} oldElement The element to be replaced.\n * @param {Object} attrs Containing information about the new element, for\n * example the new bounds and type.\n * @param {Object} hints Custom hints that will be attached to the context. It\n * can be used to inject data that is needed in the command chain. For example\n * it could be used in eventbus.on('commandStack.shape.replace.postExecute') to\n * change shape attributes after shape creation.\n *\n * @return {Shape}\n */\nReplace.prototype.replaceElement = function (oldElement, attrs, hints) {\n  if (oldElement.waypoints) {\n    // TODO(nikku): we do not replace connections, yet\n    return null;\n  }\n  var modeling = this._modeling;\n  var eventBus = this._eventBus;\n  eventBus.fire('replace.start', {\n    element: oldElement,\n    attrs,\n    hints\n  });\n  var width = attrs.width || oldElement.width,\n    height = attrs.height || oldElement.height,\n    x = attrs.x || oldElement.x,\n    y = attrs.y || oldElement.y,\n    centerX = round(x + width / 2),\n    centerY = round(y + height / 2);\n\n  // modeling API requires center coordinates,\n  // account for that when handling shape bounds\n\n  var newElement = modeling.replaceShape(oldElement, assign({}, attrs, {\n    x: centerX,\n    y: centerY,\n    width: width,\n    height: height\n  }), hints);\n  eventBus.fire('replace.end', {\n    element: oldElement,\n    newElement,\n    hints\n  });\n  return newElement;\n};","map":{"version":3,"names":["assign","round","Math","Replace","modeling","eventBus","_modeling","_eventBus","$inject","prototype","replaceElement","oldElement","attrs","hints","waypoints","fire","element","width","height","x","y","centerX","centerY","newElement","replaceShape"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/replace/Replace.js"],"sourcesContent":["import {\n  assign\n} from 'min-dash';\n\n/**\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('../modeling/Modeling').default} Modeling\n *\n * @typedef {import('../../core/Types').ShapeLike} Shape\n */\n\nvar round = Math.round;\n\n/**\n * Service that allows replacing of elements.\n *\n * @param {Modeling} modeling\n * @param {EventBus} eventBus\n */\nexport default function Replace(modeling, eventBus) {\n  this._modeling = modeling;\n  this._eventBus = eventBus;\n}\n\nReplace.$inject = [ 'modeling', 'eventBus' ];\n\n/**\n * Replace an element.\n *\n * @param {Shape} oldElement The element to be replaced.\n * @param {Object} attrs Containing information about the new element, for\n * example the new bounds and type.\n * @param {Object} hints Custom hints that will be attached to the context. It\n * can be used to inject data that is needed in the command chain. For example\n * it could be used in eventbus.on('commandStack.shape.replace.postExecute') to\n * change shape attributes after shape creation.\n *\n * @return {Shape}\n */\nReplace.prototype.replaceElement = function(oldElement, attrs, hints) {\n\n  if (oldElement.waypoints) {\n\n    // TODO(nikku): we do not replace connections, yet\n    return null;\n  }\n\n  var modeling = this._modeling;\n  var eventBus = this._eventBus;\n\n  eventBus.fire('replace.start', {\n    element: oldElement,\n    attrs,\n    hints\n  });\n\n  var width = attrs.width || oldElement.width,\n      height = attrs.height || oldElement.height,\n      x = attrs.x || oldElement.x,\n      y = attrs.y || oldElement.y,\n      centerX = round(x + width / 2),\n      centerY = round(y + height / 2);\n\n  // modeling API requires center coordinates,\n  // account for that when handling shape bounds\n\n  var newElement = modeling.replaceShape(\n    oldElement,\n    assign(\n      {},\n      attrs,\n      {\n        x: centerX,\n        y: centerY,\n        width: width,\n        height: height\n      }\n    ),\n    hints\n  );\n\n  eventBus.fire('replace.end', {\n    element: oldElement,\n    newElement,\n    hints\n  });\n\n  return newElement;\n};\n"],"mappings":"AAAA,SACEA,MAAM,QACD,UAAU;;AAEjB;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,KAAK,GAAGC,IAAI,CAACD,KAAK;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASE,OAAOA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAClD,IAAI,CAACC,SAAS,GAAGF,QAAQ;EACzB,IAAI,CAACG,SAAS,GAAGF,QAAQ;AAC3B;AAEAF,OAAO,CAACK,OAAO,GAAG,CAAE,UAAU,EAAE,UAAU,CAAE;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,OAAO,CAACM,SAAS,CAACC,cAAc,GAAG,UAASC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAE;EAEpE,IAAIF,UAAU,CAACG,SAAS,EAAE;IAExB;IACA,OAAO,IAAI;EACb;EAEA,IAAIV,QAAQ,GAAG,IAAI,CAACE,SAAS;EAC7B,IAAID,QAAQ,GAAG,IAAI,CAACE,SAAS;EAE7BF,QAAQ,CAACU,IAAI,CAAC,eAAe,EAAE;IAC7BC,OAAO,EAAEL,UAAU;IACnBC,KAAK;IACLC;EACF,CAAC,CAAC;EAEF,IAAII,KAAK,GAAGL,KAAK,CAACK,KAAK,IAAIN,UAAU,CAACM,KAAK;IACvCC,MAAM,GAAGN,KAAK,CAACM,MAAM,IAAIP,UAAU,CAACO,MAAM;IAC1CC,CAAC,GAAGP,KAAK,CAACO,CAAC,IAAIR,UAAU,CAACQ,CAAC;IAC3BC,CAAC,GAAGR,KAAK,CAACQ,CAAC,IAAIT,UAAU,CAACS,CAAC;IAC3BC,OAAO,GAAGpB,KAAK,CAACkB,CAAC,GAAGF,KAAK,GAAG,CAAC,CAAC;IAC9BK,OAAO,GAAGrB,KAAK,CAACmB,CAAC,GAAGF,MAAM,GAAG,CAAC,CAAC;;EAEnC;EACA;;EAEA,IAAIK,UAAU,GAAGnB,QAAQ,CAACoB,YAAY,CACpCb,UAAU,EACVX,MAAM,CACJ,CAAC,CAAC,EACFY,KAAK,EACL;IACEO,CAAC,EAAEE,OAAO;IACVD,CAAC,EAAEE,OAAO;IACVL,KAAK,EAAEA,KAAK;IACZC,MAAM,EAAEA;EACV,CACF,CAAC,EACDL,KACF,CAAC;EAEDR,QAAQ,CAACU,IAAI,CAAC,aAAa,EAAE;IAC3BC,OAAO,EAAEL,UAAU;IACnBY,UAAU;IACVV;EACF,CAAC,CAAC;EAEF,OAAOU,UAAU;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}