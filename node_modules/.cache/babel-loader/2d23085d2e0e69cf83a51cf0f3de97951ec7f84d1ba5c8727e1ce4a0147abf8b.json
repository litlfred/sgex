{"ast":null,"code":"import { isArray } from 'min-dash';\n\n/**\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * Reconnect connection handler.\n *\n * @param {Modeling} modeling\n */\nexport default function ReconnectConnectionHandler(modeling) {\n  this._modeling = modeling;\n}\nReconnectConnectionHandler.$inject = ['modeling'];\nReconnectConnectionHandler.prototype.execute = function (context) {\n  var newSource = context.newSource,\n    newTarget = context.newTarget,\n    connection = context.connection,\n    dockingOrPoints = context.dockingOrPoints;\n  if (!newSource && !newTarget) {\n    throw new Error('newSource or newTarget required');\n  }\n  if (isArray(dockingOrPoints)) {\n    context.oldWaypoints = connection.waypoints;\n    connection.waypoints = dockingOrPoints;\n  }\n  if (newSource) {\n    context.oldSource = connection.source;\n    connection.source = newSource;\n  }\n  if (newTarget) {\n    context.oldTarget = connection.target;\n    connection.target = newTarget;\n  }\n  return connection;\n};\nReconnectConnectionHandler.prototype.postExecute = function (context) {\n  var connection = context.connection,\n    newSource = context.newSource,\n    newTarget = context.newTarget,\n    dockingOrPoints = context.dockingOrPoints,\n    hints = context.hints || {};\n  var layoutConnectionHints = {};\n  if (hints.connectionStart) {\n    layoutConnectionHints.connectionStart = hints.connectionStart;\n  }\n  if (hints.connectionEnd) {\n    layoutConnectionHints.connectionEnd = hints.connectionEnd;\n  }\n  if (hints.layoutConnection === false) {\n    return;\n  }\n  if (newSource && (!newTarget || hints.docking === 'source')) {\n    layoutConnectionHints.connectionStart = layoutConnectionHints.connectionStart || getDocking(isArray(dockingOrPoints) ? dockingOrPoints[0] : dockingOrPoints);\n  }\n  if (newTarget && (!newSource || hints.docking === 'target')) {\n    layoutConnectionHints.connectionEnd = layoutConnectionHints.connectionEnd || getDocking(isArray(dockingOrPoints) ? dockingOrPoints[dockingOrPoints.length - 1] : dockingOrPoints);\n  }\n  if (hints.newWaypoints) {\n    layoutConnectionHints.waypoints = hints.newWaypoints;\n  }\n  this._modeling.layoutConnection(connection, layoutConnectionHints);\n};\nReconnectConnectionHandler.prototype.revert = function (context) {\n  var oldSource = context.oldSource,\n    oldTarget = context.oldTarget,\n    oldWaypoints = context.oldWaypoints,\n    connection = context.connection;\n  if (oldSource) {\n    connection.source = oldSource;\n  }\n  if (oldTarget) {\n    connection.target = oldTarget;\n  }\n  if (oldWaypoints) {\n    connection.waypoints = oldWaypoints;\n  }\n  return connection;\n};\n\n// helpers //////////\n\nfunction getDocking(point) {\n  return point.original || point;\n}","map":{"version":3,"names":["isArray","ReconnectConnectionHandler","modeling","_modeling","$inject","prototype","execute","context","newSource","newTarget","connection","dockingOrPoints","Error","oldWaypoints","waypoints","oldSource","source","oldTarget","target","postExecute","hints","layoutConnectionHints","connectionStart","connectionEnd","layoutConnection","docking","getDocking","length","newWaypoints","revert","point","original"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/modeling/cmd/ReconnectConnectionHandler.js"],"sourcesContent":["import { isArray } from 'min-dash';\n\n/**\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * Reconnect connection handler.\n *\n * @param {Modeling} modeling\n */\nexport default function ReconnectConnectionHandler(modeling) {\n  this._modeling = modeling;\n}\n\nReconnectConnectionHandler.$inject = [ 'modeling' ];\n\nReconnectConnectionHandler.prototype.execute = function(context) {\n  var newSource = context.newSource,\n      newTarget = context.newTarget,\n      connection = context.connection,\n      dockingOrPoints = context.dockingOrPoints;\n\n  if (!newSource && !newTarget) {\n    throw new Error('newSource or newTarget required');\n  }\n\n  if (isArray(dockingOrPoints)) {\n    context.oldWaypoints = connection.waypoints;\n    connection.waypoints = dockingOrPoints;\n  }\n\n  if (newSource) {\n    context.oldSource = connection.source;\n    connection.source = newSource;\n  }\n\n  if (newTarget) {\n    context.oldTarget = connection.target;\n    connection.target = newTarget;\n  }\n\n  return connection;\n};\n\nReconnectConnectionHandler.prototype.postExecute = function(context) {\n  var connection = context.connection,\n      newSource = context.newSource,\n      newTarget = context.newTarget,\n      dockingOrPoints = context.dockingOrPoints,\n      hints = context.hints || {};\n\n  var layoutConnectionHints = {};\n\n  if (hints.connectionStart) {\n    layoutConnectionHints.connectionStart = hints.connectionStart;\n  }\n\n  if (hints.connectionEnd) {\n    layoutConnectionHints.connectionEnd = hints.connectionEnd;\n  }\n\n  if (hints.layoutConnection === false) {\n    return;\n  }\n\n  if (newSource && (!newTarget || hints.docking === 'source')) {\n    layoutConnectionHints.connectionStart = layoutConnectionHints.connectionStart\n      || getDocking(isArray(dockingOrPoints) ? dockingOrPoints[ 0 ] : dockingOrPoints);\n  }\n\n  if (newTarget && (!newSource || hints.docking === 'target')) {\n    layoutConnectionHints.connectionEnd = layoutConnectionHints.connectionEnd\n      || getDocking(isArray(dockingOrPoints) ? dockingOrPoints[ dockingOrPoints.length - 1 ] : dockingOrPoints);\n  }\n\n  if (hints.newWaypoints) {\n    layoutConnectionHints.waypoints = hints.newWaypoints;\n  }\n\n  this._modeling.layoutConnection(connection, layoutConnectionHints);\n};\n\nReconnectConnectionHandler.prototype.revert = function(context) {\n  var oldSource = context.oldSource,\n      oldTarget = context.oldTarget,\n      oldWaypoints = context.oldWaypoints,\n      connection = context.connection;\n\n  if (oldSource) {\n    connection.source = oldSource;\n  }\n\n  if (oldTarget) {\n    connection.target = oldTarget;\n  }\n\n  if (oldWaypoints) {\n    connection.waypoints = oldWaypoints;\n  }\n\n  return connection;\n};\n\n\n\n// helpers //////////\n\nfunction getDocking(point) {\n  return point.original || point;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}