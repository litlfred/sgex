{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/runner/work/sgex/sgex/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject0, _templateObject1, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst dataType_1 = require(\"../../compile/validate/dataType\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst equal_1 = require(\"../../runtime/equal\");\nconst error = {\n  message: _ref => {\n    let {\n      params: {\n        i,\n        j\n      }\n    } = _ref;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must NOT have duplicate items (items ## \", \" and \", \" are identical)\"])), j, i);\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        i,\n        j\n      }\n    } = _ref2;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{i: \", \", j: \", \"}\"])), i, j);\n  }\n};\nconst def = {\n  keyword: \"uniqueItems\",\n  type: \"array\",\n  schemaType: \"boolean\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      data,\n      $data,\n      schema,\n      parentSchema,\n      schemaCode,\n      it\n    } = cxt;\n    if (!$data && !schema) return;\n    const valid = gen.let(\"valid\");\n    const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];\n    cxt.block$data(valid, validateUniqueItems, (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \" === false\"])), schemaCode));\n    cxt.ok(valid);\n    function validateUniqueItems() {\n      const i = gen.let(\"i\", (0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \".length\"])), data));\n      const j = gen.let(\"j\");\n      cxt.setParams({\n        i,\n        j\n      });\n      gen.assign(valid, true);\n      gen.if((0, codegen_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \" > 1\"])), i), () => (canOptimize() ? loopN : loopN2)(i, j));\n    }\n    function canOptimize() {\n      return itemTypes.length > 0 && !itemTypes.some(t => t === \"object\" || t === \"array\");\n    }\n    function loopN(i, j) {\n      const item = gen.name(\"item\");\n      const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);\n      const indices = gen.const(\"indices\", (0, codegen_1._)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"{}\"]))));\n      gen.for((0, codegen_1._)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\";\", \"--;\"])), i), () => {\n        gen.let(item, (0, codegen_1._)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\", \"[\", \"]\"])), data, i));\n        gen.if(wrongType, (0, codegen_1._)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"continue\"]))));\n        if (itemTypes.length > 1) gen.if((0, codegen_1._)(_templateObject0 || (_templateObject0 = _taggedTemplateLiteral([\"typeof \", \" == \\\"string\\\"\"])), item), (0, codegen_1._)(_templateObject1 || (_templateObject1 = _taggedTemplateLiteral([\"\", \" += \\\"_\\\"\"])), item));\n        gen.if((0, codegen_1._)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"typeof \", \"[\", \"] == \\\"number\\\"\"])), indices, item), () => {\n          gen.assign(j, (0, codegen_1._)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([\"\", \"[\", \"]\"])), indices, item));\n          cxt.error();\n          gen.assign(valid, false).break();\n        }).code((0, codegen_1._)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([\"\", \"[\", \"] = \", \"\"])), indices, item, i));\n      });\n    }\n    function loopN2(i, j) {\n      const eql = (0, util_1.useFunc)(gen, equal_1.default);\n      const outer = gen.name(\"outer\");\n      gen.label(outer).for((0, codegen_1._)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral([\";\", \"--;\"])), i), () => gen.for((0, codegen_1._)(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral([\"\", \" = \", \"; \", \"--;\"])), j, i, j), () => gen.if((0, codegen_1._)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral([\"\", \"(\", \"[\", \"], \", \"[\", \"])\"])), eql, data, i, data, j), () => {\n        cxt.error();\n        gen.assign(valid, false).break(outer);\n      })));\n    }\n  }\n};\nexports.default = def;","map":{"version":3,"names":["dataType_1","require","codegen_1","util_1","equal_1","error","message","_ref","params","i","j","str","_templateObject","_taggedTemplateLiteral","_ref2","_","_templateObject2","def","keyword","type","schemaType","$data","code","cxt","gen","data","schema","parentSchema","schemaCode","it","valid","let","itemTypes","items","getSchemaTypes","block$data","validateUniqueItems","_templateObject3","ok","_templateObject4","setParams","assign","if","_templateObject5","canOptimize","loopN","loopN2","length","some","t","item","name","wrongType","checkDataTypes","opts","strictNumbers","DataType","Wrong","indices","const","_templateObject6","for","_templateObject7","_templateObject8","_templateObject9","_templateObject0","_templateObject1","_templateObject10","_templateObject11","break","_templateObject12","eql","useFunc","default","outer","label","_templateObject13","_templateObject14","_templateObject15","exports"],"sources":["/home/runner/work/sgex/sgex/node_modules/ajv/lib/vocabularies/validation/uniqueItems.ts"],"sourcesContent":["import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {checkDataTypes, getSchemaTypes, DataType} from \"../../compile/validate/dataType\"\nimport {_, str, Name} from \"../../compile/codegen\"\nimport {useFunc} from \"../../compile/util\"\nimport equal from \"../../runtime/equal\"\n\nexport type UniqueItemsError = ErrorObject<\n  \"uniqueItems\",\n  {i: number; j: number},\n  boolean | {$data: string}\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {i, j}}) =>\n    str`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,\n  params: ({params: {i, j}}) => _`{i: ${i}, j: ${j}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"uniqueItems\",\n  type: \"array\",\n  schemaType: \"boolean\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, $data, schema, parentSchema, schemaCode, it} = cxt\n    if (!$data && !schema) return\n    const valid = gen.let(\"valid\")\n    const itemTypes = parentSchema.items ? getSchemaTypes(parentSchema.items) : []\n    cxt.block$data(valid, validateUniqueItems, _`${schemaCode} === false`)\n    cxt.ok(valid)\n\n    function validateUniqueItems(): void {\n      const i = gen.let(\"i\", _`${data}.length`)\n      const j = gen.let(\"j\")\n      cxt.setParams({i, j})\n      gen.assign(valid, true)\n      gen.if(_`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j))\n    }\n\n    function canOptimize(): boolean {\n      return itemTypes.length > 0 && !itemTypes.some((t) => t === \"object\" || t === \"array\")\n    }\n\n    function loopN(i: Name, j: Name): void {\n      const item = gen.name(\"item\")\n      const wrongType = checkDataTypes(itemTypes, item, it.opts.strictNumbers, DataType.Wrong)\n      const indices = gen.const(\"indices\", _`{}`)\n      gen.for(_`;${i}--;`, () => {\n        gen.let(item, _`${data}[${i}]`)\n        gen.if(wrongType, _`continue`)\n        if (itemTypes.length > 1) gen.if(_`typeof ${item} == \"string\"`, _`${item} += \"_\"`)\n        gen\n          .if(_`typeof ${indices}[${item}] == \"number\"`, () => {\n            gen.assign(j, _`${indices}[${item}]`)\n            cxt.error()\n            gen.assign(valid, false).break()\n          })\n          .code(_`${indices}[${item}] = ${i}`)\n      })\n    }\n\n    function loopN2(i: Name, j: Name): void {\n      const eql = useFunc(gen, equal)\n      const outer = gen.name(\"outer\")\n      gen.label(outer).for(_`;${i}--;`, () =>\n        gen.for(_`${j} = ${i}; ${j}--;`, () =>\n          gen.if(_`${eql}(${data}[${i}], ${data}[${j}])`, () => {\n            cxt.error()\n            gen.assign(valid, false).break(outer)\n          })\n        )\n      )\n    }\n  },\n}\n\nexport default def\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}