{"ast":null,"code":"import{useState,useEffect}from'react';/**\n * Custom hook that returns the appropriate image path based on the current theme\n * @param {string} baseImagePath - The base image path (e.g., \"sgex-mascot.png\", \"authoring.png\")\n * @returns {string} The theme-appropriate image path\n */const useThemeImage=baseImagePath=>{const[currentImagePath,setCurrentImagePath]=useState(baseImagePath);useEffect(()=>{const updateImagePath=()=>{const isDarkMode=document.body.classList.contains('theme-dark');if(isDarkMode){// Convert base image to dark mode version\n// e.g., \"sgex-mascot.png\" -> \"sgex-mascot_grey_tabby.png\"\nconst darkImagePath=baseImagePath.replace(/\\.png$/,'_grey_tabby.png');setCurrentImagePath(darkImagePath);}else{// Use original image for light mode\nsetCurrentImagePath(baseImagePath);}};// Initial update\nupdateImagePath();// Create a MutationObserver to watch for body class changes\nconst observer=new MutationObserver(mutations=>{mutations.forEach(mutation=>{if(mutation.type==='attributes'&&mutation.attributeName==='class'){updateImagePath();}});});// Start observing the body for class changes\nobserver.observe(document.body,{attributes:true,attributeFilter:['class']});// Cleanup observer on unmount\nreturn()=>{observer.disconnect();};},[baseImagePath]);return currentImagePath;};export default useThemeImage;","map":{"version":3,"names":["useState","useEffect","useThemeImage","baseImagePath","currentImagePath","setCurrentImagePath","updateImagePath","isDarkMode","document","body","classList","contains","darkImagePath","replace","observer","MutationObserver","mutations","forEach","mutation","type","attributeName","observe","attributes","attributeFilter","disconnect"],"sources":["/home/runner/work/sgex/sgex/src/hooks/useThemeImage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n/**\n * Custom hook that returns the appropriate image path based on the current theme\n * @param {string} baseImagePath - The base image path (e.g., \"sgex-mascot.png\", \"authoring.png\")\n * @returns {string} The theme-appropriate image path\n */\nconst useThemeImage = (baseImagePath) => {\n  const [currentImagePath, setCurrentImagePath] = useState(baseImagePath);\n\n  useEffect(() => {\n    const updateImagePath = () => {\n      const isDarkMode = document.body.classList.contains('theme-dark');\n      \n      if (isDarkMode) {\n        // Convert base image to dark mode version\n        // e.g., \"sgex-mascot.png\" -> \"sgex-mascot_grey_tabby.png\"\n        const darkImagePath = baseImagePath.replace(/\\.png$/, '_grey_tabby.png');\n        setCurrentImagePath(darkImagePath);\n      } else {\n        // Use original image for light mode\n        setCurrentImagePath(baseImagePath);\n      }\n    };\n\n    // Initial update\n    updateImagePath();\n\n    // Create a MutationObserver to watch for body class changes\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {\n          updateImagePath();\n        }\n      });\n    });\n\n    // Start observing the body for class changes\n    observer.observe(document.body, {\n      attributes: true,\n      attributeFilter: ['class']\n    });\n\n    // Cleanup observer on unmount\n    return () => {\n      observer.disconnect();\n    };\n  }, [baseImagePath]);\n\n  return currentImagePath;\n};\n\nexport default useThemeImage;"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,aAAa,CAAIC,aAAa,EAAK,CACvC,KAAM,CAACC,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGL,QAAQ,CAACG,aAAa,CAAC,CAEvEF,SAAS,CAAC,IAAM,CACd,KAAM,CAAAK,eAAe,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,UAAU,CAAGC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,YAAY,CAAC,CAEjE,GAAIJ,UAAU,CAAE,CACd;AACA;AACA,KAAM,CAAAK,aAAa,CAAGT,aAAa,CAACU,OAAO,CAAC,QAAQ,CAAE,iBAAiB,CAAC,CACxER,mBAAmB,CAACO,aAAa,CAAC,CACpC,CAAC,IAAM,CACL;AACAP,mBAAmB,CAACF,aAAa,CAAC,CACpC,CACF,CAAC,CAED;AACAG,eAAe,CAAC,CAAC,CAEjB;AACA,KAAM,CAAAQ,QAAQ,CAAG,GAAI,CAAAC,gBAAgB,CAAEC,SAAS,EAAK,CACnDA,SAAS,CAACC,OAAO,CAAEC,QAAQ,EAAK,CAC9B,GAAIA,QAAQ,CAACC,IAAI,GAAK,YAAY,EAAID,QAAQ,CAACE,aAAa,GAAK,OAAO,CAAE,CACxEd,eAAe,CAAC,CAAC,CACnB,CACF,CAAC,CAAC,CACJ,CAAC,CAAC,CAEF;AACAQ,QAAQ,CAACO,OAAO,CAACb,QAAQ,CAACC,IAAI,CAAE,CAC9Ba,UAAU,CAAE,IAAI,CAChBC,eAAe,CAAE,CAAC,OAAO,CAC3B,CAAC,CAAC,CAEF;AACA,MAAO,IAAM,CACXT,QAAQ,CAACU,UAAU,CAAC,CAAC,CACvB,CAAC,CACH,CAAC,CAAE,CAACrB,aAAa,CAAC,CAAC,CAEnB,MAAO,CAAAC,gBAAgB,CACzB,CAAC,CAED,cAAe,CAAAF,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}