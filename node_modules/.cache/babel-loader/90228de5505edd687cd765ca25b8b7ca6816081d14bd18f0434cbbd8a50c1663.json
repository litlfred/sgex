{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{useParams,useLocation,useNavigate}from'react-router-dom';import githubService from'../../services/githubService';import dakValidationService from'../../services/dakValidationService';import profileSubscriptionService from'../../services/profileSubscriptionService';/**\n * Page types supported by the framework\n */import{jsx as _jsx}from\"react/jsx-runtime\";export const PAGE_TYPES={TOP_LEVEL:'top-level',USER:'user',DAK:'dak',ASSET:'asset'};/**\n * Context for page framework\n */const PageContext=/*#__PURE__*/createContext(null);/**\n * Hook to use page context\n */export const usePage=()=>{const context=useContext(PageContext);console.log('usePage: called, context is:',context?'available':'null');if(!context){console.error('usePage: PageContext is null - component not wrapped in PageProvider');throw new Error('usePage must be used within a PageProvider');}return context;};/**\n * Determine page type from URL parameters\n */const determinePageType=params=>{const{user,repo}=params;const asset=params['*'];// Wildcard parameter for asset path\nconsole.log('PageProvider: determinePageType called with params:',params);console.log('PageProvider: extracted values:',{user,repo,asset});if(asset)return PAGE_TYPES.ASSET;if(user&&repo)return PAGE_TYPES.DAK;if(user)return PAGE_TYPES.USER;return PAGE_TYPES.TOP_LEVEL;};/**\n * Provider component for page framework\n */export const PageProvider=_ref=>{let{children,pageName}=_ref;const params=useParams();const location=useLocation();const navigate=useNavigate();console.log('PageProvider: initialized with:',{pageName,params,locationPathname:location.pathname});const[pageState,setPageState]=useState({type:determinePageType(params),pageName,loading:false,error:null,user:null,profile:null,repository:null,branch:null,asset:null,isAuthenticated:githubService.isAuth()});// Extract URL parameters\nconst{user,repo}=params;const asset=params['*'];// Wildcard parameter for asset path\n// Load data based on page type\nuseEffect(()=>{const loadPageData=async()=>{try{var _location$state,_location$state2,_location$state3;setPageState(prev=>({...prev,loading:true,error:null}));// Use location state if available, otherwise fetch from URL params\nlet profile=(_location$state=location.state)===null||_location$state===void 0?void 0:_location$state.profile;let repository=(_location$state2=location.state)===null||_location$state2===void 0?void 0:_location$state2.repository;let selectedBranch=((_location$state3=location.state)===null||_location$state3===void 0?void 0:_location$state3.selectedBranch)||params.branch;// For DAK and Asset pages, validate and fetch data\nif(pageState.type===PAGE_TYPES.DAK||pageState.type===PAGE_TYPES.ASSET){var _repository;if(!profile&&user){if(githubService.isAuth()){try{profile=await githubService.getUser(user);}catch(err){// For dashboard pages, redirect instead of throwing error\nif(pageName==='dashboard'||pageName.includes('editor')||pageName.includes('viewer')||pageState.type===PAGE_TYPES.DAK||pageState.type===PAGE_TYPES.ASSET){navigate('/',{state:{warningMessage:`Could not access the requested DAK. User '${user}' not found or not accessible.`},replace:true});return;}throw new Error(`User '${user}' not found or not accessible.`);}}else{// Demo mode for DAK validation\nconst isValidDAK=dakValidationService.validateDemoDAKRepository(user,repo);if(!isValidDAK){// For dashboard pages, redirect instead of throwing error\nif(pageName==='dashboard'||pageName.includes('editor')||pageName.includes('viewer')||pageState.type===PAGE_TYPES.DAK||pageState.type===PAGE_TYPES.ASSET){navigate('/',{state:{warningMessage:`Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.`},replace:true});return;}throw new Error(`Repository '${user}/${repo}' not found or not accessible.`);}profile={login:user,name:user.charAt(0).toUpperCase()+user.slice(1),avatar_url:`https://github.com/${user}.png`,type:'User',isDemo:true};}}if(!repository&&user&&repo){if(githubService.isAuth()){try{repository=await githubService.getRepository(user,repo);// Validate it's a DAK repository\nconst isValidDAK=await dakValidationService.validateDAKRepository(user,repo,selectedBranch||repository.default_branch);if(!isValidDAK){// For dashboard pages, redirect instead of throwing error\nif(pageName==='dashboard'||pageName.includes('editor')||pageName.includes('viewer')||pageState.type===PAGE_TYPES.DAK||pageState.type===PAGE_TYPES.ASSET){navigate('/',{state:{warningMessage:`Could not access the requested DAK. Repository '${user}/${repo}' is not a valid DAK repository.`},replace:true});return;}throw new Error(`Repository '${user}/${repo}' is not a valid DAK repository.`);}}catch(err){// For dashboard pages, redirect instead of throwing error\nif(pageName==='dashboard'||pageName.includes('editor')||pageName.includes('viewer')||pageState.type===PAGE_TYPES.DAK||pageState.type===PAGE_TYPES.ASSET){navigate('/',{state:{warningMessage:`Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.`},replace:true});return;}throw new Error(`Repository '${user}/${repo}' not found or not accessible.`);}}else{// For demo mode, validate the demo repository exists\nconst isValidDAK=dakValidationService.validateDemoDAKRepository(user,repo);if(!isValidDAK){// For dashboard pages, redirect instead of throwing error\nif(pageName==='dashboard'||pageName.includes('editor')||pageName.includes('viewer')||pageState.type===PAGE_TYPES.DAK||pageState.type===PAGE_TYPES.ASSET){navigate('/',{state:{warningMessage:`Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.`},replace:true});return;}throw new Error(`Repository '${user}/${repo}' not found or not accessible.`);}repository={name:repo,full_name:`${user}/${repo}`,owner:{login:user},default_branch:selectedBranch||'main',html_url:`https://github.com/${user}/${repo}`,isDemo:true};}}selectedBranch=selectedBranch||((_repository=repository)===null||_repository===void 0?void 0:_repository.default_branch)||'main';// For asset pages, validate the asset exists (when authenticated or public repo)\nif(pageState.type===PAGE_TYPES.ASSET&&asset){try{await githubService.getFileContent(user,repo,asset,selectedBranch);}catch(err){// For asset pages, redirect instead of throwing error  \nif(pageName==='asset'||pageName.includes('editor')||pageName.includes('viewer')){navigate('/',{state:{warningMessage:`Could not access the requested asset. Asset '${asset}' not found in repository.`},replace:true});return;}throw new Error(`Asset '${asset}' not found in repository.`);}}}// For User pages, just need profile\nif(pageState.type===PAGE_TYPES.USER&&!profile&&user){if(githubService.isAuth()){try{profile=await githubService.getUser(user);}catch(err){// For user pages, redirect instead of throwing error\nnavigate('/',{state:{warningMessage:`Could not access the requested user. User '${user}' not found or not accessible.`},replace:true});return;}}else{profile={login:user,name:user.charAt(0).toUpperCase()+user.slice(1),avatar_url:`https://github.com/${user}.png`,type:'User',isDemo:true};}}setPageState(prev=>({...prev,loading:false,user,profile,repository,branch:selectedBranch,asset,isAuthenticated:githubService.isAuth()}));// Handle profile subscriptions asynchronously\nconst handleSubscriptions=async()=>{try{const currentUser=await githubService.getCurrentUser();if(currentUser){profileSubscriptionService.ensureCurrentUserSubscribed(currentUser);}}catch(error){// Current user fetch failed, but continue with visited profile logic\nconsole.debug('Could not fetch current user for subscriptions:',error);}// Auto-add visited profiles (if not demo and not already subscribed)\nif(profile&&!profile.isDemo&&(pageState.type===PAGE_TYPES.USER||pageState.type===PAGE_TYPES.DAK||pageState.type===PAGE_TYPES.ASSET)){profileSubscriptionService.autoAddVisitedProfile(profile);}};// Run subscription logic without blocking the main page load\nif(githubService.isAuth()){handleSubscriptions();}}catch(error){console.error('Page data loading error:',error);setPageState(prev=>({...prev,loading:false,error:error.message}));}};// Only load data if we have URL parameters that require it\nif(pageState.type!==PAGE_TYPES.TOP_LEVEL&&user||pageState.type===PAGE_TYPES.TOP_LEVEL){loadPageData();}},[user,repo,params.branch,asset,pageState.type,location.state,navigate,pageName]);// Monitor authentication state changes\nuseEffect(()=>{const checkAuthState=()=>{const currentAuthState=githubService.isAuth();if(currentAuthState!==pageState.isAuthenticated){setPageState(prev=>({...prev,isAuthenticated:currentAuthState}));}};// Check periodically for auth state changes (for logout detection)\nconst interval=setInterval(checkAuthState,1000);return()=>clearInterval(interval);},[pageState.isAuthenticated]);const value={...pageState,navigate,params,location};return/*#__PURE__*/_jsx(PageContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useParams","useLocation","useNavigate","githubService","dakValidationService","profileSubscriptionService","jsx","_jsx","PAGE_TYPES","TOP_LEVEL","USER","DAK","ASSET","PageContext","usePage","context","console","log","error","Error","determinePageType","params","user","repo","asset","PageProvider","_ref","children","pageName","location","navigate","locationPathname","pathname","pageState","setPageState","type","loading","profile","repository","branch","isAuthenticated","isAuth","loadPageData","_location$state","_location$state2","_location$state3","prev","state","selectedBranch","_repository","getUser","err","includes","warningMessage","replace","isValidDAK","validateDemoDAKRepository","login","name","charAt","toUpperCase","slice","avatar_url","isDemo","getRepository","validateDAKRepository","default_branch","full_name","owner","html_url","getFileContent","handleSubscriptions","currentUser","getCurrentUser","ensureCurrentUserSubscribed","debug","autoAddVisitedProfile","message","checkAuthState","currentAuthState","interval","setInterval","clearInterval","value","Provider"],"sources":["/home/runner/work/sgex/sgex/src/components/framework/PageProvider.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\nimport githubService from '../../services/githubService';\nimport dakValidationService from '../../services/dakValidationService';\nimport profileSubscriptionService from '../../services/profileSubscriptionService';\n\n/**\n * Page types supported by the framework\n */\nexport const PAGE_TYPES = {\n  TOP_LEVEL: 'top-level',\n  USER: 'user', \n  DAK: 'dak',\n  ASSET: 'asset'\n};\n\n/**\n * Context for page framework\n */\nconst PageContext = createContext(null);\n\n/**\n * Hook to use page context\n */\nexport const usePage = () => {\n  const context = useContext(PageContext);\n  console.log('usePage: called, context is:', context ? 'available' : 'null');\n  if (!context) {\n    console.error('usePage: PageContext is null - component not wrapped in PageProvider');\n    throw new Error('usePage must be used within a PageProvider');\n  }\n  return context;\n};\n\n/**\n * Determine page type from URL parameters\n */\nconst determinePageType = (params) => {\n  const { user, repo } = params;\n  const asset = params['*']; // Wildcard parameter for asset path\n  \n  console.log('PageProvider: determinePageType called with params:', params);\n  console.log('PageProvider: extracted values:', { user, repo, asset });\n  \n  if (asset) return PAGE_TYPES.ASSET;\n  if (user && repo) return PAGE_TYPES.DAK;\n  if (user) return PAGE_TYPES.USER;\n  return PAGE_TYPES.TOP_LEVEL;\n};\n\n/**\n * Provider component for page framework\n */\nexport const PageProvider = ({ children, pageName }) => {\n  const params = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  \n  console.log('PageProvider: initialized with:', {\n    pageName,\n    params,\n    locationPathname: location.pathname\n  });\n  \n  const [pageState, setPageState] = useState({\n    type: determinePageType(params),\n    pageName,\n    loading: false,\n    error: null,\n    user: null,\n    profile: null,\n    repository: null,\n    branch: null,\n    asset: null,\n    isAuthenticated: githubService.isAuth()\n  });\n\n  // Extract URL parameters\n  const { user, repo } = params;\n  const asset = params['*']; // Wildcard parameter for asset path\n\n  // Load data based on page type\n  useEffect(() => {\n    const loadPageData = async () => {\n      try {\n        setPageState(prev => ({ ...prev, loading: true, error: null }));\n\n        // Use location state if available, otherwise fetch from URL params\n        let profile = location.state?.profile;\n        let repository = location.state?.repository;\n        let selectedBranch = location.state?.selectedBranch || params.branch;\n\n        // For DAK and Asset pages, validate and fetch data\n        if (pageState.type === PAGE_TYPES.DAK || pageState.type === PAGE_TYPES.ASSET) {\n          if (!profile && user) {\n            if (githubService.isAuth()) {\n              try {\n                profile = await githubService.getUser(user);\n              } catch (err) {\n                // For dashboard pages, redirect instead of throwing error\n                if (pageName === 'dashboard' || pageName.includes('editor') || pageName.includes('viewer') || pageState.type === PAGE_TYPES.DAK || pageState.type === PAGE_TYPES.ASSET) {\n                  navigate('/', { \n                    state: { \n                      warningMessage: `Could not access the requested DAK. User '${user}' not found or not accessible.` \n                    }, \n                    replace: true \n                  });\n                  return;\n                }\n                throw new Error(`User '${user}' not found or not accessible.`);\n              }\n            } else {\n              // Demo mode for DAK validation\n              const isValidDAK = dakValidationService.validateDemoDAKRepository(user, repo);\n              if (!isValidDAK) {\n                // For dashboard pages, redirect instead of throwing error\n                if (pageName === 'dashboard' || pageName.includes('editor') || pageName.includes('viewer') || pageState.type === PAGE_TYPES.DAK || pageState.type === PAGE_TYPES.ASSET) {\n                  navigate('/', { \n                    state: { \n                      warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n                    }, \n                    replace: true \n                  });\n                  return;\n                }\n                throw new Error(`Repository '${user}/${repo}' not found or not accessible.`);\n              }\n              profile = {\n                login: user,\n                name: user.charAt(0).toUpperCase() + user.slice(1),\n                avatar_url: `https://github.com/${user}.png`,\n                type: 'User',\n                isDemo: true\n              };\n            }\n          }\n\n          if (!repository && user && repo) {\n            if (githubService.isAuth()) {\n              try {\n                repository = await githubService.getRepository(user, repo);\n                // Validate it's a DAK repository\n                const isValidDAK = await dakValidationService.validateDAKRepository(user, repo, selectedBranch || repository.default_branch);\n                if (!isValidDAK) {\n                  // For dashboard pages, redirect instead of throwing error\n                  if (pageName === 'dashboard' || pageName.includes('editor') || pageName.includes('viewer') || pageState.type === PAGE_TYPES.DAK || pageState.type === PAGE_TYPES.ASSET) {\n                    navigate('/', { \n                      state: { \n                        warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' is not a valid DAK repository.` \n                      }, \n                      replace: true \n                    });\n                    return;\n                  }\n                  throw new Error(`Repository '${user}/${repo}' is not a valid DAK repository.`);\n                }\n              } catch (err) {\n                // For dashboard pages, redirect instead of throwing error\n                if (pageName === 'dashboard' || pageName.includes('editor') || pageName.includes('viewer') || pageState.type === PAGE_TYPES.DAK || pageState.type === PAGE_TYPES.ASSET) {\n                  navigate('/', { \n                    state: { \n                      warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n                    }, \n                    replace: true \n                  });\n                  return;\n                }\n                throw new Error(`Repository '${user}/${repo}' not found or not accessible.`);\n              }\n            } else {\n              // For demo mode, validate the demo repository exists\n              const isValidDAK = dakValidationService.validateDemoDAKRepository(user, repo);\n              if (!isValidDAK) {\n                // For dashboard pages, redirect instead of throwing error\n                if (pageName === 'dashboard' || pageName.includes('editor') || pageName.includes('viewer') || pageState.type === PAGE_TYPES.DAK || pageState.type === PAGE_TYPES.ASSET) {\n                  navigate('/', { \n                    state: { \n                      warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n                    }, \n                    replace: true \n                  });\n                  return;\n                }\n                throw new Error(`Repository '${user}/${repo}' not found or not accessible.`);\n              }\n              \n              repository = {\n                name: repo,\n                full_name: `${user}/${repo}`,\n                owner: { login: user },\n                default_branch: selectedBranch || 'main',\n                html_url: `https://github.com/${user}/${repo}`,\n                isDemo: true\n              };\n            }\n          }\n\n          selectedBranch = selectedBranch || repository?.default_branch || 'main';\n\n          // For asset pages, validate the asset exists (when authenticated or public repo)\n          if (pageState.type === PAGE_TYPES.ASSET && asset) {\n            try {\n              await githubService.getFileContent(user, repo, asset, selectedBranch);\n            } catch (err) {\n              // For asset pages, redirect instead of throwing error  \n              if (pageName === 'asset' || pageName.includes('editor') || pageName.includes('viewer')) {\n                navigate('/', { \n                  state: { \n                    warningMessage: `Could not access the requested asset. Asset '${asset}' not found in repository.` \n                  }, \n                  replace: true \n                });\n                return;\n              }\n              throw new Error(`Asset '${asset}' not found in repository.`);\n            }\n          }\n        }\n\n        // For User pages, just need profile\n        if (pageState.type === PAGE_TYPES.USER && !profile && user) {\n          if (githubService.isAuth()) {\n            try {\n              profile = await githubService.getUser(user);\n            } catch (err) {\n              // For user pages, redirect instead of throwing error\n              navigate('/', { \n                state: { \n                  warningMessage: `Could not access the requested user. User '${user}' not found or not accessible.` \n                }, \n                replace: true \n              });\n              return;\n            }\n          } else {\n            profile = {\n              login: user,\n              name: user.charAt(0).toUpperCase() + user.slice(1),\n              avatar_url: `https://github.com/${user}.png`,\n              type: 'User',\n              isDemo: true\n            };\n          }\n        }\n\n        setPageState(prev => ({\n          ...prev,\n          loading: false,\n          user,\n          profile,\n          repository,\n          branch: selectedBranch,\n          asset,\n          isAuthenticated: githubService.isAuth()\n        }));\n\n        // Handle profile subscriptions asynchronously\n        const handleSubscriptions = async () => {\n          try {\n            const currentUser = await githubService.getCurrentUser();\n            if (currentUser) {\n              profileSubscriptionService.ensureCurrentUserSubscribed(currentUser);\n            }\n          } catch (error) {\n            // Current user fetch failed, but continue with visited profile logic\n            console.debug('Could not fetch current user for subscriptions:', error);\n          }\n\n          // Auto-add visited profiles (if not demo and not already subscribed)\n          if (profile && !profile.isDemo && (pageState.type === PAGE_TYPES.USER || pageState.type === PAGE_TYPES.DAK || pageState.type === PAGE_TYPES.ASSET)) {\n            profileSubscriptionService.autoAddVisitedProfile(profile);\n          }\n        };\n\n        // Run subscription logic without blocking the main page load\n        if (githubService.isAuth()) {\n          handleSubscriptions();\n        }\n\n      } catch (error) {\n        console.error('Page data loading error:', error);\n        setPageState(prev => ({\n          ...prev,\n          loading: false,\n          error: error.message\n        }));\n      }\n    };\n\n    // Only load data if we have URL parameters that require it\n    if ((pageState.type !== PAGE_TYPES.TOP_LEVEL && user) || pageState.type === PAGE_TYPES.TOP_LEVEL) {\n      loadPageData();\n    }\n  }, [user, repo, params.branch, asset, pageState.type, location.state, navigate, pageName]);\n\n  // Monitor authentication state changes\n  useEffect(() => {\n    const checkAuthState = () => {\n      const currentAuthState = githubService.isAuth();\n      if (currentAuthState !== pageState.isAuthenticated) {\n        setPageState(prev => ({\n          ...prev,\n          isAuthenticated: currentAuthState\n        }));\n      }\n    };\n\n    // Check periodically for auth state changes (for logout detection)\n    const interval = setInterval(checkAuthState, 1000);\n    \n    return () => clearInterval(interval);\n  }, [pageState.isAuthenticated]);\n\n  const value = {\n    ...pageState,\n    navigate,\n    params,\n    location\n  };\n\n  return (\n    <PageContext.Provider value={value}>\n      {children}\n    </PageContext.Provider>\n  );\n};\n\nPageProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  pageName: PropTypes.string.isRequired\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}