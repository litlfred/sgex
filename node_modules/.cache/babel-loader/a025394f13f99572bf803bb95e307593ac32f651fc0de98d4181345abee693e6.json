{"ast":null,"code":"/**\n * Utility functions for extracting route information from React Router routes\n * This is now a compatibility layer for the new lazy loading system\n */import React from'react';/**\n * Extract valid DAK component names from the shared route configuration\n * This function reads from the global SGEX route configuration that is shared\n * between App.js and 404.html to ensure consistency.\n * \n * @returns {Array} Array of valid DAK component names\n */export const extractDAKComponentsFromRoutes=()=>{// In browser environment, try to get from global config first\nif(typeof window!=='undefined'&&window.getSGEXRouteConfig){const config=window.getSGEXRouteConfig();if(config){return config.getDAKComponentNames();}}// Fallback for server-side rendering or if config not loaded\n// This should match the configuration in public/routes-config.json\nconsole.warn('SGEX route configuration not available, using fallback');return['dashboard','testing-viewer','core-data-dictionary-viewer','health-interventions','actor-editor','business-process-selection','bpmn-editor','bpmn-viewer','bpmn-source','decision-support-logic'];};/**\n * Check if a given component name is a valid DAK component\n * @param {string} component - Component name to validate\n * @returns {boolean} True if component is valid DAK component\n */export const isValidDAKComponent=component=>{const validComponents=extractDAKComponentsFromRoutes();return validComponents.includes(component);};/**\n * Parse a URL path to extract DAK component information\n * @param {string} pathname - URL pathname to parse\n * @returns {Object|null} Parsed DAK URL info or null if not a valid DAK URL\n */export const parseDAKUrl=pathname=>{const pathSegments=pathname.split('/').filter(Boolean);// Valid DAK component routes have at least 3 segments: [component, user, repo]\nif(pathSegments.length>=3){const[component,user,repo,branch,...assetPath]=pathSegments;if(isValidDAKComponent(component)&&user&&repo){return{component,user,repo,branch,assetPath,isValid:true};}}return null;};/**\n * Generate React Router Route objects for all DAK components\n * This is now a legacy function kept for compatibility.\n * The new lazy loading system uses generateLazyRoutes() from lazyRouteUtils.js\n * \n * @param {Object} importedComponents - Object containing all imported React components\n * @returns {Array} Array of route objects for React Router\n */export const generateDAKRoutes=importedComponents=>{console.warn('generateDAKRoutes() is deprecated. Use generateLazyRoutes() from lazyRouteUtils.js instead.');const routes=[];// Get configuration \nconst config=typeof window!=='undefined'&&window.getSGEXRouteConfig?window.getSGEXRouteConfig():null;if(!config){console.warn('SGEX route configuration not available for dynamic route generation');return routes;}// Generate routes for each DAK component using old system\nconst componentNames=config.getDAKComponentNames();componentNames.forEach(componentName=>{const dakComponent=config.dakComponents[componentName];const reactComponentName=dakComponent.component||dakComponent;// Smart component lookup - find the imported component by name\nconst ReactComponentClass=importedComponents[reactComponentName];if(!ReactComponentClass){console.warn(`React component ${reactComponentName} not found in imported components for DAK component ${componentName}`);console.warn('Available components:',Object.keys(importedComponents));return;}// Create React element from the component class\nconst ReactElement=/*#__PURE__*/React.createElement(ReactComponentClass);// Generate the standard DAK route patterns\nroutes.push({path:`/${componentName}`,element:ReactElement,key:`${componentName}-base`},{path:`/${componentName}/:user/:repo`,element:ReactElement,key:`${componentName}-user-repo`},{path:`/${componentName}/:user/:repo/:branch`,element:ReactElement,key:`${componentName}-user-repo-branch`},{path:`/${componentName}/:user/:repo/:branch/*`,element:ReactElement,key:`${componentName}-user-repo-branch-asset`});});return routes;};","map":{"version":3,"names":["React","extractDAKComponentsFromRoutes","window","getSGEXRouteConfig","config","getDAKComponentNames","console","warn","isValidDAKComponent","component","validComponents","includes","parseDAKUrl","pathname","pathSegments","split","filter","Boolean","length","user","repo","branch","assetPath","isValid","generateDAKRoutes","importedComponents","routes","componentNames","forEach","componentName","dakComponent","dakComponents","reactComponentName","ReactComponentClass","Object","keys","ReactElement","createElement","push","path","element","key"],"sources":["/home/runner/work/sgex/sgex/src/utils/routeUtils.js"],"sourcesContent":["/**\n * Utility functions for extracting route information from React Router routes\n * This is now a compatibility layer for the new lazy loading system\n */\nimport React from 'react';\n\n/**\n * Extract valid DAK component names from the shared route configuration\n * This function reads from the global SGEX route configuration that is shared\n * between App.js and 404.html to ensure consistency.\n * \n * @returns {Array} Array of valid DAK component names\n */\nexport const extractDAKComponentsFromRoutes = () => {\n  // In browser environment, try to get from global config first\n  if (typeof window !== 'undefined' && window.getSGEXRouteConfig) {\n    const config = window.getSGEXRouteConfig();\n    if (config) {\n      return config.getDAKComponentNames();\n    }\n  }\n  \n  // Fallback for server-side rendering or if config not loaded\n  // This should match the configuration in public/routes-config.json\n  console.warn('SGEX route configuration not available, using fallback');\n  return [\n    'dashboard',                    \n    'testing-viewer',              \n    'core-data-dictionary-viewer', \n    'health-interventions',        \n    'actor-editor',               \n    'business-process-selection',  \n    'bpmn-editor',                \n    'bpmn-viewer',                \n    'bpmn-source',                \n    'decision-support-logic'       \n  ];\n};\n\n/**\n * Check if a given component name is a valid DAK component\n * @param {string} component - Component name to validate\n * @returns {boolean} True if component is valid DAK component\n */\nexport const isValidDAKComponent = (component) => {\n  const validComponents = extractDAKComponentsFromRoutes();\n  return validComponents.includes(component);\n};\n\n/**\n * Parse a URL path to extract DAK component information\n * @param {string} pathname - URL pathname to parse\n * @returns {Object|null} Parsed DAK URL info or null if not a valid DAK URL\n */\nexport const parseDAKUrl = (pathname) => {\n  const pathSegments = pathname.split('/').filter(Boolean);\n  \n  // Valid DAK component routes have at least 3 segments: [component, user, repo]\n  if (pathSegments.length >= 3) {\n    const [component, user, repo, branch, ...assetPath] = pathSegments;\n    \n    if (isValidDAKComponent(component) && user && repo) {\n      return {\n        component,\n        user,\n        repo,\n        branch,\n        assetPath,\n        isValid: true\n      };\n    }\n  }\n  \n  return null;\n};\n\n/**\n * Generate React Router Route objects for all DAK components\n * This is now a legacy function kept for compatibility.\n * The new lazy loading system uses generateLazyRoutes() from lazyRouteUtils.js\n * \n * @param {Object} importedComponents - Object containing all imported React components\n * @returns {Array} Array of route objects for React Router\n */\nexport const generateDAKRoutes = (importedComponents) => {\n  console.warn('generateDAKRoutes() is deprecated. Use generateLazyRoutes() from lazyRouteUtils.js instead.');\n  \n  const routes = [];\n  \n  // Get configuration \n  const config = (typeof window !== 'undefined' && window.getSGEXRouteConfig) \n    ? window.getSGEXRouteConfig() \n    : null;\n  \n  if (!config) {\n    console.warn('SGEX route configuration not available for dynamic route generation');\n    return routes;\n  }\n  \n  // Generate routes for each DAK component using old system\n  const componentNames = config.getDAKComponentNames();\n  \n  componentNames.forEach(componentName => {\n    const dakComponent = config.dakComponents[componentName];\n    const reactComponentName = dakComponent.component || dakComponent;\n    \n    // Smart component lookup - find the imported component by name\n    const ReactComponentClass = importedComponents[reactComponentName];\n    \n    if (!ReactComponentClass) {\n      console.warn(`React component ${reactComponentName} not found in imported components for DAK component ${componentName}`);\n      console.warn('Available components:', Object.keys(importedComponents));\n      return;\n    }\n    \n    // Create React element from the component class\n    const ReactElement = React.createElement(ReactComponentClass);\n    \n    // Generate the standard DAK route patterns\n    routes.push(\n      {\n        path: `/${componentName}`,\n        element: ReactElement,\n        key: `${componentName}-base`\n      },\n      {\n        path: `/${componentName}/:user/:repo`,\n        element: ReactElement,\n        key: `${componentName}-user-repo`\n      },\n      {\n        path: `/${componentName}/:user/:repo/:branch`,\n        element: ReactElement,\n        key: `${componentName}-user-repo-branch`\n      },\n      {\n        path: `/${componentName}/:user/:repo/:branch/*`,\n        element: ReactElement,\n        key: `${componentName}-user-repo-branch-asset`\n      }\n    );\n  });\n  \n  return routes;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}