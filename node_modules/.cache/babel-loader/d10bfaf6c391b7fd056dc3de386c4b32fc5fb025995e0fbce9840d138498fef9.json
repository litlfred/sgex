{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/runner/work/sgex/sgex/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst equal_1 = require(\"../../runtime/equal\");\nconst error = {\n  message: \"must be equal to constant\",\n  params: _ref => {\n    let {\n      schemaCode\n    } = _ref;\n    return (0, codegen_1._)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"{allowedValue: \", \"}\"])), schemaCode);\n  }\n};\nconst def = {\n  keyword: \"const\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      data,\n      $data,\n      schemaCode,\n      schema\n    } = cxt;\n    if ($data || schema && typeof schema == \"object\") {\n      cxt.fail$data((0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"!\", \"(\", \", \", \")\"])), (0, util_1.useFunc)(gen, equal_1.default), data, schemaCode));\n    } else {\n      cxt.fail((0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \" !== \", \"\"])), schema, data));\n    }\n  }\n};\nexports.default = def;","map":{"version":3,"names":["codegen_1","require","util_1","equal_1","error","message","params","_ref","schemaCode","_","_templateObject","_taggedTemplateLiteral","def","keyword","$data","code","cxt","gen","data","schema","fail$data","_templateObject2","useFunc","default","fail","_templateObject3","exports"],"sources":["/home/runner/work/sgex/sgex/node_modules/ajv/lib/vocabularies/validation/const.ts"],"sourcesContent":["import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_} from \"../../compile/codegen\"\nimport {useFunc} from \"../../compile/util\"\nimport equal from \"../../runtime/equal\"\n\nexport type ConstError = ErrorObject<\"const\", {allowedValue: any}>\n\nconst error: KeywordErrorDefinition = {\n  message: \"must be equal to constant\",\n  params: ({schemaCode}) => _`{allowedValue: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"const\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, $data, schemaCode, schema} = cxt\n    if ($data || (schema && typeof schema == \"object\")) {\n      cxt.fail$data(_`!${useFunc(gen, equal)}(${data}, ${schemaCode})`)\n    } else {\n      cxt.fail(_`${schema} !== ${data}`)\n    }\n  },\n}\n\nexport default def\n"],"mappings":";;;;;;;AAEA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,MAAA,GAAAD,OAAA;AACA,MAAAE,OAAA,GAAAF,OAAA;AAIA,MAAMG,KAAK,GAA2B;EACpCC,OAAO,EAAE,2BAA2B;EACpCC,MAAM,EAAEC,IAAA;IAAA,IAAC;MAACC;IAAU,CAAC,GAAAD,IAAA;IAAA,QAAK,GAAAP,SAAA,CAAAS,CAAC,EAAAC,eAAA,KAAAA,eAAA,GAAAC,sBAAA,6BAAkBH,UAAU;EAAA;CACxD;AAED,MAAMI,GAAG,GAA0B;EACjCC,OAAO,EAAE,OAAO;EAChBC,KAAK,EAAE,IAAI;EACXV,KAAK;EACLW,IAAIA,CAACC,GAAe;IAClB,MAAM;MAACC,GAAG;MAAEC,IAAI;MAAEJ,KAAK;MAAEN,UAAU;MAAEW;IAAM,CAAC,GAAGH,GAAG;IAClD,IAAIF,KAAK,IAAKK,MAAM,IAAI,OAAOA,MAAM,IAAI,QAAS,EAAE;MAClDH,GAAG,CAACI,SAAS,EAAC,GAAApB,SAAA,CAAAS,CAAC,EAAAY,gBAAA,KAAAA,gBAAA,GAAAV,sBAAA,0BAAI,IAAAT,MAAA,CAAAoB,OAAO,EAACL,GAAG,EAAEd,OAAA,CAAAoB,OAAK,CAAC,EAAIL,IAAI,EAAKV,UAAU,CAAG,CAAC;IACnE,CAAC,MAAM;MACLQ,GAAG,CAACQ,IAAI,EAAC,GAAAxB,SAAA,CAAAS,CAAC,EAAAgB,gBAAA,KAAAA,gBAAA,GAAAd,sBAAA,sBAAGQ,MAAM,EAAQD,IAAI,CAAE,CAAC;IACpC;EACF;CACD;AAEDQ,OAAA,CAAAH,OAAA,GAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}