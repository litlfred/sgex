{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import githubService from'../services/githubService';import'./PreviewBadge.css';/**\n * PreviewBadge component that displays when the app is deployed from a non-main branch\n * Shows branch name and links to the associated PR\n * Can expand to show detailed PR information, comments, and add new comments\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PreviewBadge=()=>{const[branchInfo,setBranchInfo]=useState(null);const[prInfo,setPrInfo]=useState([]);// Changed to array to support multiple PRs\nconst[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[isExpanded,setIsExpanded]=useState(false);const[isSticky,setIsSticky]=useState(false);const expandedRef=useRef(null);useEffect(()=>{const detectBranchAndPR=async()=>{try{setLoading(true);setError(null);// Detect current branch from environment or URL\nconst currentBranch=getCurrentBranch();if(!currentBranch||currentBranch==='main'){// Not a preview branch, don't show badge\nsetLoading(false);return;}setBranchInfo({name:currentBranch,safeName:currentBranch.replace(/\\//g,'-')});// Try to fetch PR information for this branch\ntry{const prData=await fetchPRsForBranch(currentBranch);if(prData&&prData.length>0){setPrInfo(prData);}}catch(prError){console.debug('Could not fetch PR info:',prError);// Continue without PR info - still show branch badge\n}setLoading(false);}catch(err){console.error('Error detecting branch:',err);setError(err.message);setLoading(false);}};detectBranchAndPR();},[]);// Handle clicks outside the expanded panel to close it (only if not sticky)\nuseEffect(()=>{const handleClickOutside=event=>{if(expandedRef.current&&!expandedRef.current.contains(event.target)){if(isSticky){setIsSticky(false);}setIsExpanded(false);}};if(isExpanded){// Listen for both mouse and touch events to support mobile devices\ndocument.addEventListener('mousedown',handleClickOutside);document.addEventListener('touchstart',handleClickOutside);return()=>{document.removeEventListener('mousedown',handleClickOutside);document.removeEventListener('touchstart',handleClickOutside);};}},[isExpanded,isSticky]);const getCurrentBranch=()=>{// First try environment variable (set during build)\nif(process.env.REACT_APP_GITHUB_REF_NAME){return process.env.REACT_APP_GITHUB_REF_NAME;}// Fallback: detect from URL path\nconst path=window.location.pathname;// Match pattern: /sgex/{branch-name}/\nconst match=path.match(/^\\/sgex\\/([^/]+)\\//);if(match&&match[1]!=='main'){const safeBranchName=match[1];// Convert safe branch name back to original branch name\n// This handles the common case where slashes are converted to dashes\n// Note: This is a heuristic and may not be perfect for all edge cases\nlet branchName=safeBranchName;// Common patterns: feature-name -> feature/name, fix-123 -> fix/123\nif(safeBranchName.includes('-')&&!safeBranchName.startsWith('v')&&!safeBranchName.match(/^\\d/)){// Try to detect if this looks like a feature branch\nif(safeBranchName.match(/^(feature|fix|hotfix|bugfix|chore|docs|style|refactor|test)-/)){branchName=safeBranchName.replace(/^([^-]+)-/,'$1/');}}return branchName;}return null;};const fetchPRsForBranch=async branchName=>{try{// Get current repository context if available\n// For now, we'll use the main repository\nconst owner='litlfred';const repo='sgex';const prs=await githubService.getPullRequestsForBranch(owner,repo,branchName);return prs;}catch(error){console.debug('Failed to fetch PR info:',error);return[];}};const handleBadgeClick=pr=>{if(pr&&pr.html_url){window.open(pr.html_url,'_blank');}};const handleMouseEnter=()=>{if(!isSticky&&(!prInfo||prInfo.length===0)){setIsExpanded(true);}};const handleMouseLeave=()=>{if(!isSticky&&(!prInfo||prInfo.length===0)){setIsExpanded(false);}};const handleBadgeToggle=event=>{// Only allow toggle for branch-only badges (no PRs)\nif(prInfo&&prInfo.length>0)return;// Prevent event from bubbling up\nevent.stopPropagation();event.preventDefault();if(isSticky){// If already sticky, collapse and remove sticky state\nsetIsSticky(false);setIsExpanded(false);}else{// Make it sticky and ensure it's expanded\nsetIsSticky(true);setIsExpanded(true);}};const truncateTitle=function(title){let maxLength=arguments.length>1&&arguments[1]!==undefined?arguments[1]:30;if(title.length<=maxLength)return title;return title.substring(0,maxLength)+'...';};// Don't render anything if loading, error, or not a preview branch\nif(loading||error||!branchInfo){return null;}// Render multiple badges if there are multiple PRs\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"preview-badge-container\",ref:expandedRef,children:[prInfo&&prInfo.length>0?// Multiple PR badges - each one is clickable and opens the corresponding PR\nprInfo.map((pr,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"preview-badge clickable\",onClick:()=>handleBadgeClick(pr),title:`Click to view PR: ${pr.title}`,children:/*#__PURE__*/_jsxs(\"div\",{className:\"badge-content\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"badge-label\",children:\"PR:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"badge-branch\",children:[\"#\",pr.number]}),/*#__PURE__*/_jsx(\"span\",{className:\"badge-separator\",children:\"|\"}),/*#__PURE__*/_jsx(\"span\",{className:\"badge-pr-title\",children:truncateTitle(pr.title)})]})},pr.id)):/*#__PURE__*/// Single expandable badge for branch with no PRs\n_jsx(\"div\",{className:`preview-badge clickable ${isExpanded?'expanded':''} ${isSticky?'sticky':''}`,onClick:handleBadgeToggle,onMouseEnter:handleMouseEnter,onMouseLeave:handleMouseLeave,title:isSticky?\"Click to collapse\":isExpanded?\"Click to keep expanded\":`Hover to preview, click to pin: ${branchInfo.name}`,children:/*#__PURE__*/_jsxs(\"div\",{className:\"badge-content\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"badge-label\",children:\"Preview:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"badge-branch\",children:branchInfo.name}),/*#__PURE__*/_jsx(\"span\",{className:\"badge-expand-icon\",children:isExpanded?'▼':'▶'})]})}),isExpanded&&(!prInfo||prInfo.length===0)&&/*#__PURE__*/_jsxs(\"div\",{className:\"preview-badge-expanded\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"expanded-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pr-info\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Preview Branch: \",branchInfo.name]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pr-meta\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"pr-state\",\"data-state\":\"unknown\",children:\"No PR found\"}),/*#__PURE__*/_jsx(\"span\",{className:\"pr-author\",children:\"Branch preview\"})]})]}),/*#__PURE__*/_jsx(\"button\",{className:\"close-button\",onClick:e=>{e.stopPropagation();setIsExpanded(false);setIsSticky(false);},title:\"Close expanded view\",children:\"\\xD7\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pr-description\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Branch Information\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"pr-body\",children:[\"This is a preview deployment from the \",/*#__PURE__*/_jsx(\"code\",{children:branchInfo.name}),\" branch.\",!githubService.isAuth()&&/*#__PURE__*/_jsx(\"div\",{style:{marginTop:'0.5rem',fontStyle:'italic',color:'#666'},children:\"Sign in to GitHub to view pull request details and comments.\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"expanded-footer\",children:/*#__PURE__*/_jsx(\"a\",{href:`https://github.com/litlfred/sgex/tree/${branchInfo.name}`,target:\"_blank\",rel:\"noopener noreferrer\",className:\"github-link\",children:\"View Branch on GitHub \\u2192\"})})]})]});};export default PreviewBadge;","map":{"version":3,"names":["React","useState","useEffect","useRef","githubService","jsx","_jsx","jsxs","_jsxs","PreviewBadge","branchInfo","setBranchInfo","prInfo","setPrInfo","loading","setLoading","error","setError","isExpanded","setIsExpanded","isSticky","setIsSticky","expandedRef","detectBranchAndPR","currentBranch","getCurrentBranch","name","safeName","replace","prData","fetchPRsForBranch","length","prError","console","debug","err","message","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","process","env","REACT_APP_GITHUB_REF_NAME","path","window","location","pathname","match","safeBranchName","branchName","includes","startsWith","owner","repo","prs","getPullRequestsForBranch","handleBadgeClick","pr","html_url","open","handleMouseEnter","handleMouseLeave","handleBadgeToggle","stopPropagation","preventDefault","truncateTitle","title","maxLength","arguments","undefined","substring","className","ref","children","map","index","onClick","number","id","onMouseEnter","onMouseLeave","e","isAuth","style","marginTop","fontStyle","color","href","rel"],"sources":["/home/runner/work/sgex/sgex/src/components/PreviewBadge.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport githubService from '../services/githubService';\nimport './PreviewBadge.css';\n\n/**\n * PreviewBadge component that displays when the app is deployed from a non-main branch\n * Shows branch name and links to the associated PR\n * Can expand to show detailed PR information, comments, and add new comments\n */\nconst PreviewBadge = () => {\n  const [branchInfo, setBranchInfo] = useState(null);\n  const [prInfo, setPrInfo] = useState([]); // Changed to array to support multiple PRs\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [isSticky, setIsSticky] = useState(false);\n  const expandedRef = useRef(null);\n\n  useEffect(() => {\n    const detectBranchAndPR = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Detect current branch from environment or URL\n        const currentBranch = getCurrentBranch();\n        \n        if (!currentBranch || currentBranch === 'main') {\n          // Not a preview branch, don't show badge\n          setLoading(false);\n          return;\n        }\n\n        setBranchInfo({\n          name: currentBranch,\n          safeName: currentBranch.replace(/\\//g, '-')\n        });\n\n        // Try to fetch PR information for this branch\n        try {\n          const prData = await fetchPRsForBranch(currentBranch);\n          if (prData && prData.length > 0) {\n            setPrInfo(prData);\n          }\n        } catch (prError) {\n          console.debug('Could not fetch PR info:', prError);\n          // Continue without PR info - still show branch badge\n        }\n\n        setLoading(false);\n      } catch (err) {\n        console.error('Error detecting branch:', err);\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    detectBranchAndPR();\n  }, []);\n\n  // Handle clicks outside the expanded panel to close it (only if not sticky)\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (expandedRef.current && !expandedRef.current.contains(event.target)) {\n        if (isSticky) {\n          setIsSticky(false);\n        }\n        setIsExpanded(false);\n      }\n    };\n\n    if (isExpanded) {\n      // Listen for both mouse and touch events to support mobile devices\n      document.addEventListener('mousedown', handleClickOutside);\n      document.addEventListener('touchstart', handleClickOutside);\n      return () => {\n        document.removeEventListener('mousedown', handleClickOutside);\n        document.removeEventListener('touchstart', handleClickOutside);\n      };\n    }\n  }, [isExpanded, isSticky]);\n\n  const getCurrentBranch = () => {\n    // First try environment variable (set during build)\n    if (process.env.REACT_APP_GITHUB_REF_NAME) {\n      return process.env.REACT_APP_GITHUB_REF_NAME;\n    }\n    \n    // Fallback: detect from URL path\n    const path = window.location.pathname;\n    \n    // Match pattern: /sgex/{branch-name}/\n    const match = path.match(/^\\/sgex\\/([^/]+)\\//);\n    if (match && match[1] !== 'main') {\n      const safeBranchName = match[1];\n      \n      // Convert safe branch name back to original branch name\n      // This handles the common case where slashes are converted to dashes\n      // Note: This is a heuristic and may not be perfect for all edge cases\n      let branchName = safeBranchName;\n      \n      // Common patterns: feature-name -> feature/name, fix-123 -> fix/123\n      if (safeBranchName.includes('-') && !safeBranchName.startsWith('v') && !safeBranchName.match(/^\\d/)) {\n        // Try to detect if this looks like a feature branch\n        if (safeBranchName.match(/^(feature|fix|hotfix|bugfix|chore|docs|style|refactor|test)-/)) {\n          branchName = safeBranchName.replace(/^([^-]+)-/, '$1/');\n        }\n      }\n      \n      return branchName;\n    }\n\n    return null;\n  };\n\n  const fetchPRsForBranch = async (branchName) => {\n    try {\n      // Get current repository context if available\n      // For now, we'll use the main repository\n      const owner = 'litlfred';\n      const repo = 'sgex';\n\n      const prs = await githubService.getPullRequestsForBranch(owner, repo, branchName);\n      \n      return prs;\n\n    } catch (error) {\n      console.debug('Failed to fetch PR info:', error);\n      return [];\n    }\n  };\n\n  const handleBadgeClick = (pr) => {\n    if (pr && pr.html_url) {\n      window.open(pr.html_url, '_blank');\n    }\n  };\n\n  const handleMouseEnter = () => {\n    if (!isSticky && (!prInfo || prInfo.length === 0)) {\n      setIsExpanded(true);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    if (!isSticky && (!prInfo || prInfo.length === 0)) {\n      setIsExpanded(false);\n    }\n  };\n\n  const handleBadgeToggle = (event) => {\n    // Only allow toggle for branch-only badges (no PRs)\n    if (prInfo && prInfo.length > 0) return;\n    \n    // Prevent event from bubbling up\n    event.stopPropagation();\n    event.preventDefault();\n    \n    if (isSticky) {\n      // If already sticky, collapse and remove sticky state\n      setIsSticky(false);\n      setIsExpanded(false);\n    } else {\n      // Make it sticky and ensure it's expanded\n      setIsSticky(true);\n      setIsExpanded(true);\n    }\n  };\n\n  const truncateTitle = (title, maxLength = 30) => {\n    if (title.length <= maxLength) return title;\n    return title.substring(0, maxLength) + '...';\n  };\n\n  // Don't render anything if loading, error, or not a preview branch\n  if (loading || error || !branchInfo) {\n    return null;\n  }\n\n  // Render multiple badges if there are multiple PRs\n  return (\n    <div className=\"preview-badge-container\" ref={expandedRef}>\n      {prInfo && prInfo.length > 0 ? (\n        // Multiple PR badges - each one is clickable and opens the corresponding PR\n        prInfo.map((pr, index) => (\n          <div \n            key={pr.id}\n            className=\"preview-badge clickable\"\n            onClick={() => handleBadgeClick(pr)}\n            title={`Click to view PR: ${pr.title}`}\n          >\n            <div className=\"badge-content\">\n              <span className=\"badge-label\">PR:</span>\n              <span className=\"badge-branch\">#{pr.number}</span>\n              <span className=\"badge-separator\">|</span>\n              <span className=\"badge-pr-title\">{truncateTitle(pr.title)}</span>\n            </div>\n          </div>\n        ))\n      ) : (\n        // Single expandable badge for branch with no PRs\n        <div \n          className={`preview-badge clickable ${isExpanded ? 'expanded' : ''} ${isSticky ? 'sticky' : ''}`}\n          onClick={handleBadgeToggle}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          title={isSticky ? \"Click to collapse\" : isExpanded ? \"Click to keep expanded\" : `Hover to preview, click to pin: ${branchInfo.name}`}\n        >\n          <div className=\"badge-content\">\n            <span className=\"badge-label\">Preview:</span>\n            <span className=\"badge-branch\">{branchInfo.name}</span>\n            <span className=\"badge-expand-icon\">{isExpanded ? '▼' : '▶'}</span>\n          </div>\n        </div>\n      )}\n\n      {isExpanded && (!prInfo || prInfo.length === 0) && (\n        <div className=\"preview-badge-expanded\">\n          <div className=\"expanded-header\">\n            <div className=\"pr-info\">\n              <h3>Preview Branch: {branchInfo.name}</h3>\n              <div className=\"pr-meta\">\n                <span className=\"pr-state\" data-state=\"unknown\">No PR found</span>\n                <span className=\"pr-author\">Branch preview</span>\n              </div>\n            </div>\n            <button \n              className=\"close-button\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setIsExpanded(false);\n                setIsSticky(false);\n              }}\n              title=\"Close expanded view\"\n            >\n              ×\n            </button>\n          </div>\n\n          <div className=\"pr-description\">\n            <h4>Branch Information</h4>\n            <div className=\"pr-body\">\n              This is a preview deployment from the <code>{branchInfo.name}</code> branch.\n              {!githubService.isAuth() && (\n                <div style={{marginTop: '0.5rem', fontStyle: 'italic', color: '#666'}}>\n                  Sign in to GitHub to view pull request details and comments.\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"expanded-footer\">\n            <a href={`https://github.com/litlfred/sgex/tree/${branchInfo.name}`} target=\"_blank\" rel=\"noopener noreferrer\" className=\"github-link\">\n              View Branch on GitHub →\n            </a>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PreviewBadge;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}