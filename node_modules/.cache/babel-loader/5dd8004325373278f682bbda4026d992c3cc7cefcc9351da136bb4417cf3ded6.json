{"ast":null,"code":"/**\n * Utility function to get the appropriate image path based on the current theme\n * This can be used outside React components\n * @param {string} baseImagePath - The base image path (e.g., \"sgex-mascot.png\")\n * @returns {string} The theme-appropriate image path\n */export const getThemeImagePath=baseImagePath=>{const isDarkMode=document.body.classList.contains('theme-dark');// Get the correct base path for the deployment environment\nconst publicUrl=process.env.PUBLIC_URL||'';// Normalize the base image path (remove leading slash if present)\nconst normalizedPath=baseImagePath.startsWith('/')?baseImagePath.slice(1):baseImagePath;let finalPath;if(isDarkMode){// Convert base image to dark mode version\n// e.g., \"sgex-mascot.png\" -> \"sgex-mascot_grey_tabby.png\"\nconst darkImageName=normalizedPath.replace(/\\.png$/,'_grey_tabby.png');finalPath=publicUrl?\"\".concat(publicUrl,\"/\").concat(darkImageName):\"/\".concat(darkImageName);}else{// Use original image for light mode\nfinalPath=publicUrl?\"\".concat(publicUrl,\"/\").concat(normalizedPath):\"/\".concat(normalizedPath);}return finalPath;};export default getThemeImagePath;","map":{"version":3,"names":["getThemeImagePath","baseImagePath","isDarkMode","document","body","classList","contains","publicUrl","process","env","PUBLIC_URL","normalizedPath","startsWith","slice","finalPath","darkImageName","replace","concat"],"sources":["/home/runner/work/sgex/sgex/src/utils/themeUtils.js"],"sourcesContent":["/**\n * Utility function to get the appropriate image path based on the current theme\n * This can be used outside React components\n * @param {string} baseImagePath - The base image path (e.g., \"sgex-mascot.png\")\n * @returns {string} The theme-appropriate image path\n */\nexport const getThemeImagePath = (baseImagePath) => {\n  const isDarkMode = document.body.classList.contains('theme-dark');\n  \n  // Get the correct base path for the deployment environment\n  const publicUrl = process.env.PUBLIC_URL || '';\n  \n  // Normalize the base image path (remove leading slash if present)\n  const normalizedPath = baseImagePath.startsWith('/') ? baseImagePath.slice(1) : baseImagePath;\n  \n  let finalPath;\n  if (isDarkMode) {\n    // Convert base image to dark mode version\n    // e.g., \"sgex-mascot.png\" -> \"sgex-mascot_grey_tabby.png\"\n    const darkImageName = normalizedPath.replace(/\\.png$/, '_grey_tabby.png');\n    finalPath = publicUrl ? `${publicUrl}/${darkImageName}` : `/${darkImageName}`;\n  } else {\n    // Use original image for light mode\n    finalPath = publicUrl ? `${publicUrl}/${normalizedPath}` : `/${normalizedPath}`;\n  }\n  \n  return finalPath;\n};\n\nexport default getThemeImagePath;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,iBAAiB,CAAIC,aAAa,EAAK,CAClD,KAAM,CAAAC,UAAU,CAAGC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,YAAY,CAAC,CAEjE;AACA,KAAM,CAAAC,SAAS,CAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,EAAI,EAAE,CAE9C;AACA,KAAM,CAAAC,cAAc,CAAGV,aAAa,CAACW,UAAU,CAAC,GAAG,CAAC,CAAGX,aAAa,CAACY,KAAK,CAAC,CAAC,CAAC,CAAGZ,aAAa,CAE7F,GAAI,CAAAa,SAAS,CACb,GAAIZ,UAAU,CAAE,CACd;AACA;AACA,KAAM,CAAAa,aAAa,CAAGJ,cAAc,CAACK,OAAO,CAAC,QAAQ,CAAE,iBAAiB,CAAC,CACzEF,SAAS,CAAGP,SAAS,IAAAU,MAAA,CAAMV,SAAS,MAAAU,MAAA,CAAIF,aAAa,MAAAE,MAAA,CAASF,aAAa,CAAE,CAC/E,CAAC,IAAM,CACL;AACAD,SAAS,CAAGP,SAAS,IAAAU,MAAA,CAAMV,SAAS,MAAAU,MAAA,CAAIN,cAAc,MAAAM,MAAA,CAASN,cAAc,CAAE,CACjF,CAEA,MAAO,CAAAG,SAAS,CAClB,CAAC,CAED,cAAe,CAAAd,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}