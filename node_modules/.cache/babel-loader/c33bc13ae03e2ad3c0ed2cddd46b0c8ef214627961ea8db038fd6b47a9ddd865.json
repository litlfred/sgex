{"ast":null,"code":"/**\n * Actor Definition Service\n * \n * Manages actor definitions based on FHIR Persona logical model.\n * Handles conversion to FSH (FHIR Shorthand) format and integration with staging ground.\n */import stagingGroundService from'./stagingGroundService';class ActorDefinitionService{constructor(){this.actorSchema=null;this.loadSchema();}/**\n   * Load the actor definition JSON schema\n   */async loadSchema(){try{const response=await fetch('/schemas/actor-definition.json');this.actorSchema=await response.json();}catch(error){console.warn('Could not load actor definition schema:',error);}}/**\n   * Convert actor definition to FSH format\n   */generateFSH(actorDefinition){var _actorDefinition$meta;if(!actorDefinition||!actorDefinition.id){throw new Error('Invalid actor definition: missing required fields');}const fsh=[];// Profile header\nfsh.push(\"Profile: \".concat(actorDefinition.id));fsh.push(\"Parent: ActorDefinition\");fsh.push(\"Id: \".concat(actorDefinition.id));fsh.push(\"Title: \\\"\".concat(this.escapeFSHString(actorDefinition.name),\"\\\"\"));fsh.push(\"Description: \\\"\".concat(this.escapeFSHString(actorDefinition.description),\"\\\"\"));if((_actorDefinition$meta=actorDefinition.metadata)!==null&&_actorDefinition$meta!==void 0&&_actorDefinition$meta.status){fsh.push(\"* status = #\".concat(actorDefinition.metadata.status));}// Actor type\nif(actorDefinition.type){fsh.push(\"* type = #\".concat(actorDefinition.type));}// Roles\nif(actorDefinition.roles&&actorDefinition.roles.length>0){actorDefinition.roles.forEach((role,index)=>{if(role.system){fsh.push(\"* role[\".concat(index,\"].coding.system = \\\"\").concat(role.system,\"\\\"\"));}fsh.push(\"* role[\".concat(index,\"].coding.code = #\").concat(role.code));fsh.push(\"* role[\".concat(index,\"].coding.display = \\\"\").concat(this.escapeFSHString(role.display),\"\\\"\"));});}// Qualifications\nif(actorDefinition.qualifications&&actorDefinition.qualifications.length>0){actorDefinition.qualifications.forEach((qual,index)=>{fsh.push(\"* qualification[\".concat(index,\"].code.coding.code = #\").concat(qual.code));fsh.push(\"* qualification[\".concat(index,\"].code.coding.display = \\\"\").concat(this.escapeFSHString(qual.display),\"\\\"\"));if(qual.issuer){fsh.push(\"* qualification[\".concat(index,\"].issuer.display = \\\"\").concat(this.escapeFSHString(qual.issuer),\"\\\"\"));}});}// Specialties\nif(actorDefinition.specialties&&actorDefinition.specialties.length>0){actorDefinition.specialties.forEach((specialty,index)=>{if(specialty.system){fsh.push(\"* specialty[\".concat(index,\"].coding.system = \\\"\").concat(specialty.system,\"\\\"\"));}fsh.push(\"* specialty[\".concat(index,\"].coding.code = #\").concat(specialty.code));fsh.push(\"* specialty[\".concat(index,\"].coding.display = \\\"\").concat(this.escapeFSHString(specialty.display),\"\\\"\"));});}// Location context\nif(actorDefinition.location){if(actorDefinition.location.type){fsh.push(\"* location.type = #\".concat(actorDefinition.location.type));}if(actorDefinition.location.description){fsh.push(\"* location.description = \\\"\".concat(this.escapeFSHString(actorDefinition.location.description),\"\\\"\"));}}// Access level as extension\nif(actorDefinition.accessLevel){fsh.push(\"* extension[accessLevel].valueCode = #\".concat(actorDefinition.accessLevel));}// Interactions as extensions\nif(actorDefinition.interactions&&actorDefinition.interactions.length>0){actorDefinition.interactions.forEach((interaction,index)=>{fsh.push(\"* extension[interaction][\".concat(index,\"].extension[type].valueCode = #\").concat(interaction.type));fsh.push(\"* extension[interaction][\".concat(index,\"].extension[target].valueString = \\\"\").concat(this.escapeFSHString(interaction.target),\"\\\"\"));if(interaction.description){fsh.push(\"* extension[interaction][\".concat(index,\"].extension[description].valueString = \\\"\").concat(this.escapeFSHString(interaction.description),\"\\\"\"));}});}// Add metadata\nif(actorDefinition.metadata){if(actorDefinition.metadata.version){fsh.push(\"* version = \\\"\".concat(actorDefinition.metadata.version,\"\\\"\"));}if(actorDefinition.metadata.publisher){fsh.push(\"* publisher = \\\"\".concat(this.escapeFSHString(actorDefinition.metadata.publisher),\"\\\"\"));}if(actorDefinition.metadata.contact&&actorDefinition.metadata.contact.length>0){actorDefinition.metadata.contact.forEach((contact,index)=>{if(contact.name){fsh.push(\"* contact[\".concat(index,\"].name = \\\"\").concat(this.escapeFSHString(contact.name),\"\\\"\"));}if(contact.email){fsh.push(\"* contact[\".concat(index,\"].telecom.system = #email\"));fsh.push(\"* contact[\".concat(index,\"].telecom.value = \\\"\").concat(contact.email,\"\\\"\"));}});}}return fsh.join('\\n');}/**\n   * Escape special characters in FSH strings\n   */escapeFSHString(str){if(!str)return'';return str.replace(/\\\\/g,'\\\\\\\\').replace(/\"/g,'\\\\\"').replace(/\\n/g,'\\\\n');}/**\n   * Parse FSH content back to actor definition (basic implementation)\n   */parseFSH(fshContent){// This is a simplified parser - a full implementation would need a proper FSH parser\nconst lines=fshContent.split('\\n').map(line=>line.trim()).filter(line=>line);const actorDefinition={roles:[],qualifications:[],specialties:[],interactions:[],metadata:{}};for(const line of lines){if(line.startsWith('Profile:')){actorDefinition.id=line.split(':')[1].trim();}else if(line.startsWith('Id:')){actorDefinition.id=line.split(':')[1].trim();}else if(line.startsWith('Title:')){actorDefinition.name=line.split(':')[1].trim().replace(/\"/g,'');}else if(line.startsWith('Description:')){actorDefinition.description=line.split(':')[1].trim().replace(/\"/g,'');}else if(line.includes('type = #')){actorDefinition.type=line.split('#')[1].trim();}// Add more parsing logic as needed\n}return actorDefinition;}/**\n   * Validate actor definition against schema\n   */validateActorDefinition(actorDefinition){const errors=[];// Basic validation\nif(!actorDefinition.id||!actorDefinition.id.match(/^[a-zA-Z][a-zA-Z0-9_-]*$/)){errors.push('ID must start with a letter and contain only letters, numbers, underscores, and hyphens');}if(!actorDefinition.name||actorDefinition.name.trim().length===0){errors.push('Name is required');}if(!actorDefinition.description||actorDefinition.description.trim().length===0){errors.push('Description is required');}if(!actorDefinition.type){errors.push('Actor type is required');}if(!actorDefinition.roles||actorDefinition.roles.length===0){errors.push('At least one role is required');}else{actorDefinition.roles.forEach((role,index)=>{if(!role.code||!role.display){errors.push(\"Role \".concat(index+1,\" must have both code and display name\"));}});}return{isValid:errors.length===0,errors};}/**\n   * Save actor definition to staging ground as FSH\n   */async saveToStagingGround(actorDefinition){try{// Validate first\nconst validation=this.validateActorDefinition(actorDefinition);if(!validation.isValid){throw new Error(\"Validation failed: \".concat(validation.errors.join(', ')));}// Generate FSH content\nconst fshContent=this.generateFSH(actorDefinition);// Create file path in staging ground structure\nconst filePath=\"input/fsh/actors/\".concat(actorDefinition.id,\".fsh\");// Save to staging ground\nconst success=stagingGroundService.updateFile(filePath,fshContent,{type:'actor-definition',actorId:actorDefinition.id,actorName:actorDefinition.name,lastModified:Date.now(),source:'actor-editor'});if(!success){throw new Error('Failed to save to staging ground');}return{success:true,filePath,content:fshContent};}catch(error){console.error('Error saving actor definition:',error);return{success:false,error:error.message};}}/**\n   * Load actor definition from staging ground\n   */getFromStagingGround(actorId){try{const stagingGround=stagingGroundService.getStagingGround();const filePath=\"input/fsh/actors/\".concat(actorId,\".fsh\");const file=stagingGround.files.find(f=>f.path===filePath);if(!file){return null;}// Parse FSH back to actor definition\nconst actorDefinition=this.parseFSH(file.content);return{actorDefinition,metadata:file.metadata,lastModified:file.timestamp};}catch(error){console.error('Error loading actor definition from staging ground:',error);return null;}}/**\n   * List all actor definitions in staging ground\n   */listStagedActors(){try{const stagingGround=stagingGroundService.getStagingGround();return stagingGround.files.filter(file=>{var _file$metadata;return file.path.startsWith('input/fsh/actors/')&&file.path.endsWith('.fsh')&&((_file$metadata=file.metadata)===null||_file$metadata===void 0?void 0:_file$metadata.type)==='actor-definition';}).map(file=>{var _file$metadata2,_file$metadata3;return{id:((_file$metadata2=file.metadata)===null||_file$metadata2===void 0?void 0:_file$metadata2.actorId)||file.path.split('/').pop().replace('.fsh',''),name:((_file$metadata3=file.metadata)===null||_file$metadata3===void 0?void 0:_file$metadata3.actorName)||'Unknown Actor',filePath:file.path,lastModified:file.timestamp,metadata:file.metadata};}).sort((a,b)=>b.lastModified-a.lastModified);}catch(error){console.error('Error listing staged actors:',error);return[];}}/**\n   * Remove actor definition from staging ground\n   */removeFromStagingGround(actorId){try{const filePath=\"input/fsh/actors/\".concat(actorId,\".fsh\");return stagingGroundService.removeFile(filePath);}catch(error){console.error('Error removing actor definition:',error);return false;}}/**\n   * Create a new empty actor definition with defaults\n   */createEmptyActorDefinition(){return{id:'',name:'',description:'',type:'person',roles:[{code:'',display:'',system:'http://snomed.info/sct'}],qualifications:[],specialties:[],location:{type:'facility',description:''},accessLevel:'standard',interactions:[],constraints:{availability:'',jurisdiction:'',limitations:[]},metadata:{version:'1.0.0',status:'draft',publisher:'',contact:[],tags:[]}};}/**\n   * Get predefined actor templates\n   */getActorTemplates(){return[{id:'clinician-template',name:'Healthcare Clinician',description:'A qualified healthcare practitioner who provides direct patient care',type:'practitioner',roles:[{code:'158965000',display:'Medical practitioner',system:'http://snomed.info/sct'}],location:{type:'facility',description:'Healthcare facility or clinic'},accessLevel:'standard'},{id:'nurse-template',name:'Registered Nurse',description:'Licensed nursing professional providing patient care and health education',type:'practitioner',roles:[{code:'224535009',display:'Registered nurse',system:'http://snomed.info/sct'}],location:{type:'facility',description:'Hospital ward, clinic, or community health center'},accessLevel:'standard'},{id:'patient-template',name:'Patient',description:'Individual receiving healthcare services',type:'patient',roles:[{code:'116154003',display:'Patient',system:'http://snomed.info/sct'}],location:{type:'facility',description:'Any healthcare setting where patient receives care'},accessLevel:'read-only'},{id:'admin-template',name:'Healthcare Administrator',description:'Administrative staff managing healthcare operations and data',type:'person',roles:[{code:'394738000',display:'Other related persons',system:'http://snomed.info/sct'}],location:{type:'facility',description:'Administrative offices within healthcare organization'},accessLevel:'administrative'}];}}// Create singleton instance\nconst actorDefinitionService=new ActorDefinitionService();export default actorDefinitionService;","map":{"version":3,"names":["stagingGroundService","ActorDefinitionService","constructor","actorSchema","loadSchema","response","fetch","json","error","console","warn","generateFSH","actorDefinition","_actorDefinition$meta","id","Error","fsh","push","concat","escapeFSHString","name","description","metadata","status","type","roles","length","forEach","role","index","system","code","display","qualifications","qual","issuer","specialties","specialty","location","accessLevel","interactions","interaction","target","version","publisher","contact","email","join","str","replace","parseFSH","fshContent","lines","split","map","line","trim","filter","startsWith","includes","validateActorDefinition","errors","match","isValid","saveToStagingGround","validation","filePath","success","updateFile","actorId","actorName","lastModified","Date","now","source","content","message","getFromStagingGround","stagingGround","getStagingGround","file","files","find","f","path","timestamp","listStagedActors","_file$metadata","endsWith","_file$metadata2","_file$metadata3","pop","sort","a","b","removeFromStagingGround","removeFile","createEmptyActorDefinition","constraints","availability","jurisdiction","limitations","tags","getActorTemplates","actorDefinitionService"],"sources":["/home/runner/work/sgex/sgex/src/services/actorDefinitionService.js"],"sourcesContent":["/**\n * Actor Definition Service\n * \n * Manages actor definitions based on FHIR Persona logical model.\n * Handles conversion to FSH (FHIR Shorthand) format and integration with staging ground.\n */\n\nimport stagingGroundService from './stagingGroundService';\n\nclass ActorDefinitionService {\n  constructor() {\n    this.actorSchema = null;\n    this.loadSchema();\n  }\n\n  /**\n   * Load the actor definition JSON schema\n   */\n  async loadSchema() {\n    try {\n      const response = await fetch('/schemas/actor-definition.json');\n      this.actorSchema = await response.json();\n    } catch (error) {\n      console.warn('Could not load actor definition schema:', error);\n    }\n  }\n\n  /**\n   * Convert actor definition to FSH format\n   */\n  generateFSH(actorDefinition) {\n    if (!actorDefinition || !actorDefinition.id) {\n      throw new Error('Invalid actor definition: missing required fields');\n    }\n\n    const fsh = [];\n    \n    // Profile header\n    fsh.push(`Profile: ${actorDefinition.id}`);\n    fsh.push(`Parent: ActorDefinition`);\n    fsh.push(`Id: ${actorDefinition.id}`);\n    fsh.push(`Title: \"${this.escapeFSHString(actorDefinition.name)}\"`);\n    fsh.push(`Description: \"${this.escapeFSHString(actorDefinition.description)}\"`);\n    \n    if (actorDefinition.metadata?.status) {\n      fsh.push(`* status = #${actorDefinition.metadata.status}`);\n    }\n    \n    // Actor type\n    if (actorDefinition.type) {\n      fsh.push(`* type = #${actorDefinition.type}`);\n    }\n    \n    // Roles\n    if (actorDefinition.roles && actorDefinition.roles.length > 0) {\n      actorDefinition.roles.forEach((role, index) => {\n        if (role.system) {\n          fsh.push(`* role[${index}].coding.system = \"${role.system}\"`);\n        }\n        fsh.push(`* role[${index}].coding.code = #${role.code}`);\n        fsh.push(`* role[${index}].coding.display = \"${this.escapeFSHString(role.display)}\"`);\n      });\n    }\n    \n    // Qualifications\n    if (actorDefinition.qualifications && actorDefinition.qualifications.length > 0) {\n      actorDefinition.qualifications.forEach((qual, index) => {\n        fsh.push(`* qualification[${index}].code.coding.code = #${qual.code}`);\n        fsh.push(`* qualification[${index}].code.coding.display = \"${this.escapeFSHString(qual.display)}\"`);\n        if (qual.issuer) {\n          fsh.push(`* qualification[${index}].issuer.display = \"${this.escapeFSHString(qual.issuer)}\"`);\n        }\n      });\n    }\n    \n    // Specialties\n    if (actorDefinition.specialties && actorDefinition.specialties.length > 0) {\n      actorDefinition.specialties.forEach((specialty, index) => {\n        if (specialty.system) {\n          fsh.push(`* specialty[${index}].coding.system = \"${specialty.system}\"`);\n        }\n        fsh.push(`* specialty[${index}].coding.code = #${specialty.code}`);\n        fsh.push(`* specialty[${index}].coding.display = \"${this.escapeFSHString(specialty.display)}\"`);\n      });\n    }\n    \n    // Location context\n    if (actorDefinition.location) {\n      if (actorDefinition.location.type) {\n        fsh.push(`* location.type = #${actorDefinition.location.type}`);\n      }\n      if (actorDefinition.location.description) {\n        fsh.push(`* location.description = \"${this.escapeFSHString(actorDefinition.location.description)}\"`);\n      }\n    }\n    \n    // Access level as extension\n    if (actorDefinition.accessLevel) {\n      fsh.push(`* extension[accessLevel].valueCode = #${actorDefinition.accessLevel}`);\n    }\n    \n    // Interactions as extensions\n    if (actorDefinition.interactions && actorDefinition.interactions.length > 0) {\n      actorDefinition.interactions.forEach((interaction, index) => {\n        fsh.push(`* extension[interaction][${index}].extension[type].valueCode = #${interaction.type}`);\n        fsh.push(`* extension[interaction][${index}].extension[target].valueString = \"${this.escapeFSHString(interaction.target)}\"`);\n        if (interaction.description) {\n          fsh.push(`* extension[interaction][${index}].extension[description].valueString = \"${this.escapeFSHString(interaction.description)}\"`);\n        }\n      });\n    }\n    \n    // Add metadata\n    if (actorDefinition.metadata) {\n      if (actorDefinition.metadata.version) {\n        fsh.push(`* version = \"${actorDefinition.metadata.version}\"`);\n      }\n      if (actorDefinition.metadata.publisher) {\n        fsh.push(`* publisher = \"${this.escapeFSHString(actorDefinition.metadata.publisher)}\"`);\n      }\n      if (actorDefinition.metadata.contact && actorDefinition.metadata.contact.length > 0) {\n        actorDefinition.metadata.contact.forEach((contact, index) => {\n          if (contact.name) {\n            fsh.push(`* contact[${index}].name = \"${this.escapeFSHString(contact.name)}\"`);\n          }\n          if (contact.email) {\n            fsh.push(`* contact[${index}].telecom.system = #email`);\n            fsh.push(`* contact[${index}].telecom.value = \"${contact.email}\"`);\n          }\n        });\n      }\n    }\n    \n    return fsh.join('\\n');\n  }\n\n  /**\n   * Escape special characters in FSH strings\n   */\n  escapeFSHString(str) {\n    if (!str) return '';\n    return str.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n');\n  }\n\n  /**\n   * Parse FSH content back to actor definition (basic implementation)\n   */\n  parseFSH(fshContent) {\n    // This is a simplified parser - a full implementation would need a proper FSH parser\n    const lines = fshContent.split('\\n').map(line => line.trim()).filter(line => line);\n    const actorDefinition = {\n      roles: [],\n      qualifications: [],\n      specialties: [],\n      interactions: [],\n      metadata: {}\n    };\n\n    for (const line of lines) {\n      if (line.startsWith('Profile:')) {\n        actorDefinition.id = line.split(':')[1].trim();\n      } else if (line.startsWith('Id:')) {\n        actorDefinition.id = line.split(':')[1].trim();\n      } else if (line.startsWith('Title:')) {\n        actorDefinition.name = line.split(':')[1].trim().replace(/\"/g, '');\n      } else if (line.startsWith('Description:')) {\n        actorDefinition.description = line.split(':')[1].trim().replace(/\"/g, '');\n      } else if (line.includes('type = #')) {\n        actorDefinition.type = line.split('#')[1].trim();\n      }\n      // Add more parsing logic as needed\n    }\n\n    return actorDefinition;\n  }\n\n  /**\n   * Validate actor definition against schema\n   */\n  validateActorDefinition(actorDefinition) {\n    const errors = [];\n    \n    // Basic validation\n    if (!actorDefinition.id || !actorDefinition.id.match(/^[a-zA-Z][a-zA-Z0-9_-]*$/)) {\n      errors.push('ID must start with a letter and contain only letters, numbers, underscores, and hyphens');\n    }\n    \n    if (!actorDefinition.name || actorDefinition.name.trim().length === 0) {\n      errors.push('Name is required');\n    }\n    \n    if (!actorDefinition.description || actorDefinition.description.trim().length === 0) {\n      errors.push('Description is required');\n    }\n    \n    if (!actorDefinition.type) {\n      errors.push('Actor type is required');\n    }\n    \n    if (!actorDefinition.roles || actorDefinition.roles.length === 0) {\n      errors.push('At least one role is required');\n    } else {\n      actorDefinition.roles.forEach((role, index) => {\n        if (!role.code || !role.display) {\n          errors.push(`Role ${index + 1} must have both code and display name`);\n        }\n      });\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Save actor definition to staging ground as FSH\n   */\n  async saveToStagingGround(actorDefinition) {\n    try {\n      // Validate first\n      const validation = this.validateActorDefinition(actorDefinition);\n      if (!validation.isValid) {\n        throw new Error(`Validation failed: ${validation.errors.join(', ')}`);\n      }\n\n      // Generate FSH content\n      const fshContent = this.generateFSH(actorDefinition);\n      \n      // Create file path in staging ground structure\n      const filePath = `input/fsh/actors/${actorDefinition.id}.fsh`;\n      \n      // Save to staging ground\n      const success = stagingGroundService.updateFile(filePath, fshContent, {\n        type: 'actor-definition',\n        actorId: actorDefinition.id,\n        actorName: actorDefinition.name,\n        lastModified: Date.now(),\n        source: 'actor-editor'\n      });\n      \n      if (!success) {\n        throw new Error('Failed to save to staging ground');\n      }\n      \n      return {\n        success: true,\n        filePath,\n        content: fshContent\n      };\n      \n    } catch (error) {\n      console.error('Error saving actor definition:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Load actor definition from staging ground\n   */\n  getFromStagingGround(actorId) {\n    try {\n      const stagingGround = stagingGroundService.getStagingGround();\n      const filePath = `input/fsh/actors/${actorId}.fsh`;\n      \n      const file = stagingGround.files.find(f => f.path === filePath);\n      if (!file) {\n        return null;\n      }\n      \n      // Parse FSH back to actor definition\n      const actorDefinition = this.parseFSH(file.content);\n      \n      return {\n        actorDefinition,\n        metadata: file.metadata,\n        lastModified: file.timestamp\n      };\n      \n    } catch (error) {\n      console.error('Error loading actor definition from staging ground:', error);\n      return null;\n    }\n  }\n\n  /**\n   * List all actor definitions in staging ground\n   */\n  listStagedActors() {\n    try {\n      const stagingGround = stagingGroundService.getStagingGround();\n      \n      return stagingGround.files\n        .filter(file => \n          file.path.startsWith('input/fsh/actors/') && \n          file.path.endsWith('.fsh') &&\n          file.metadata?.type === 'actor-definition'\n        )\n        .map(file => ({\n          id: file.metadata?.actorId || file.path.split('/').pop().replace('.fsh', ''),\n          name: file.metadata?.actorName || 'Unknown Actor',\n          filePath: file.path,\n          lastModified: file.timestamp,\n          metadata: file.metadata\n        }))\n        .sort((a, b) => b.lastModified - a.lastModified);\n        \n    } catch (error) {\n      console.error('Error listing staged actors:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Remove actor definition from staging ground\n   */\n  removeFromStagingGround(actorId) {\n    try {\n      const filePath = `input/fsh/actors/${actorId}.fsh`;\n      return stagingGroundService.removeFile(filePath);\n    } catch (error) {\n      console.error('Error removing actor definition:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Create a new empty actor definition with defaults\n   */\n  createEmptyActorDefinition() {\n    return {\n      id: '',\n      name: '',\n      description: '',\n      type: 'person',\n      roles: [\n        {\n          code: '',\n          display: '',\n          system: 'http://snomed.info/sct'\n        }\n      ],\n      qualifications: [],\n      specialties: [],\n      location: {\n        type: 'facility',\n        description: ''\n      },\n      accessLevel: 'standard',\n      interactions: [],\n      constraints: {\n        availability: '',\n        jurisdiction: '',\n        limitations: []\n      },\n      metadata: {\n        version: '1.0.0',\n        status: 'draft',\n        publisher: '',\n        contact: [],\n        tags: []\n      }\n    };\n  }\n\n  /**\n   * Get predefined actor templates\n   */\n  getActorTemplates() {\n    return [\n      {\n        id: 'clinician-template',\n        name: 'Healthcare Clinician',\n        description: 'A qualified healthcare practitioner who provides direct patient care',\n        type: 'practitioner',\n        roles: [\n          {\n            code: '158965000',\n            display: 'Medical practitioner',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Healthcare facility or clinic'\n        },\n        accessLevel: 'standard'\n      },\n      {\n        id: 'nurse-template',\n        name: 'Registered Nurse',\n        description: 'Licensed nursing professional providing patient care and health education',\n        type: 'practitioner',\n        roles: [\n          {\n            code: '224535009',\n            display: 'Registered nurse',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Hospital ward, clinic, or community health center'\n        },\n        accessLevel: 'standard'\n      },\n      {\n        id: 'patient-template',\n        name: 'Patient',\n        description: 'Individual receiving healthcare services',\n        type: 'patient',\n        roles: [\n          {\n            code: '116154003',\n            display: 'Patient',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Any healthcare setting where patient receives care'\n        },\n        accessLevel: 'read-only'\n      },\n      {\n        id: 'admin-template',\n        name: 'Healthcare Administrator',\n        description: 'Administrative staff managing healthcare operations and data',\n        type: 'person',\n        roles: [\n          {\n            code: '394738000',\n            display: 'Other related persons',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Administrative offices within healthcare organization'\n        },\n        accessLevel: 'administrative'\n      }\n    ];\n  }\n}\n\n// Create singleton instance\nconst actorDefinitionService = new ActorDefinitionService();\n\nexport default actorDefinitionService;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,CAAAA,oBAAoB,KAAM,wBAAwB,CAEzD,KAAM,CAAAC,sBAAuB,CAC3BC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,WAAW,CAAG,IAAI,CACvB,IAAI,CAACC,UAAU,CAAC,CAAC,CACnB,CAEA;AACF;AACA,KACE,KAAM,CAAAA,UAAUA,CAAA,CAAG,CACjB,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,gCAAgC,CAAC,CAC9D,IAAI,CAACH,WAAW,CAAG,KAAM,CAAAE,QAAQ,CAACE,IAAI,CAAC,CAAC,CAC1C,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACC,IAAI,CAAC,yCAAyC,CAAEF,KAAK,CAAC,CAChE,CACF,CAEA;AACF;AACA,KACEG,WAAWA,CAACC,eAAe,CAAE,KAAAC,qBAAA,CAC3B,GAAI,CAACD,eAAe,EAAI,CAACA,eAAe,CAACE,EAAE,CAAE,CAC3C,KAAM,IAAI,CAAAC,KAAK,CAAC,mDAAmD,CAAC,CACtE,CAEA,KAAM,CAAAC,GAAG,CAAG,EAAE,CAEd;AACAA,GAAG,CAACC,IAAI,aAAAC,MAAA,CAAaN,eAAe,CAACE,EAAE,CAAE,CAAC,CAC1CE,GAAG,CAACC,IAAI,0BAA0B,CAAC,CACnCD,GAAG,CAACC,IAAI,QAAAC,MAAA,CAAQN,eAAe,CAACE,EAAE,CAAE,CAAC,CACrCE,GAAG,CAACC,IAAI,aAAAC,MAAA,CAAY,IAAI,CAACC,eAAe,CAACP,eAAe,CAACQ,IAAI,CAAC,MAAG,CAAC,CAClEJ,GAAG,CAACC,IAAI,mBAAAC,MAAA,CAAkB,IAAI,CAACC,eAAe,CAACP,eAAe,CAACS,WAAW,CAAC,MAAG,CAAC,CAE/E,IAAAR,qBAAA,CAAID,eAAe,CAACU,QAAQ,UAAAT,qBAAA,WAAxBA,qBAAA,CAA0BU,MAAM,CAAE,CACpCP,GAAG,CAACC,IAAI,gBAAAC,MAAA,CAAgBN,eAAe,CAACU,QAAQ,CAACC,MAAM,CAAE,CAAC,CAC5D,CAEA;AACA,GAAIX,eAAe,CAACY,IAAI,CAAE,CACxBR,GAAG,CAACC,IAAI,cAAAC,MAAA,CAAcN,eAAe,CAACY,IAAI,CAAE,CAAC,CAC/C,CAEA;AACA,GAAIZ,eAAe,CAACa,KAAK,EAAIb,eAAe,CAACa,KAAK,CAACC,MAAM,CAAG,CAAC,CAAE,CAC7Dd,eAAe,CAACa,KAAK,CAACE,OAAO,CAAC,CAACC,IAAI,CAAEC,KAAK,GAAK,CAC7C,GAAID,IAAI,CAACE,MAAM,CAAE,CACfd,GAAG,CAACC,IAAI,WAAAC,MAAA,CAAWW,KAAK,yBAAAX,MAAA,CAAsBU,IAAI,CAACE,MAAM,MAAG,CAAC,CAC/D,CACAd,GAAG,CAACC,IAAI,WAAAC,MAAA,CAAWW,KAAK,sBAAAX,MAAA,CAAoBU,IAAI,CAACG,IAAI,CAAE,CAAC,CACxDf,GAAG,CAACC,IAAI,WAAAC,MAAA,CAAWW,KAAK,0BAAAX,MAAA,CAAuB,IAAI,CAACC,eAAe,CAACS,IAAI,CAACI,OAAO,CAAC,MAAG,CAAC,CACvF,CAAC,CAAC,CACJ,CAEA;AACA,GAAIpB,eAAe,CAACqB,cAAc,EAAIrB,eAAe,CAACqB,cAAc,CAACP,MAAM,CAAG,CAAC,CAAE,CAC/Ed,eAAe,CAACqB,cAAc,CAACN,OAAO,CAAC,CAACO,IAAI,CAAEL,KAAK,GAAK,CACtDb,GAAG,CAACC,IAAI,oBAAAC,MAAA,CAAoBW,KAAK,2BAAAX,MAAA,CAAyBgB,IAAI,CAACH,IAAI,CAAE,CAAC,CACtEf,GAAG,CAACC,IAAI,oBAAAC,MAAA,CAAoBW,KAAK,+BAAAX,MAAA,CAA4B,IAAI,CAACC,eAAe,CAACe,IAAI,CAACF,OAAO,CAAC,MAAG,CAAC,CACnG,GAAIE,IAAI,CAACC,MAAM,CAAE,CACfnB,GAAG,CAACC,IAAI,oBAAAC,MAAA,CAAoBW,KAAK,0BAAAX,MAAA,CAAuB,IAAI,CAACC,eAAe,CAACe,IAAI,CAACC,MAAM,CAAC,MAAG,CAAC,CAC/F,CACF,CAAC,CAAC,CACJ,CAEA;AACA,GAAIvB,eAAe,CAACwB,WAAW,EAAIxB,eAAe,CAACwB,WAAW,CAACV,MAAM,CAAG,CAAC,CAAE,CACzEd,eAAe,CAACwB,WAAW,CAACT,OAAO,CAAC,CAACU,SAAS,CAAER,KAAK,GAAK,CACxD,GAAIQ,SAAS,CAACP,MAAM,CAAE,CACpBd,GAAG,CAACC,IAAI,gBAAAC,MAAA,CAAgBW,KAAK,yBAAAX,MAAA,CAAsBmB,SAAS,CAACP,MAAM,MAAG,CAAC,CACzE,CACAd,GAAG,CAACC,IAAI,gBAAAC,MAAA,CAAgBW,KAAK,sBAAAX,MAAA,CAAoBmB,SAAS,CAACN,IAAI,CAAE,CAAC,CAClEf,GAAG,CAACC,IAAI,gBAAAC,MAAA,CAAgBW,KAAK,0BAAAX,MAAA,CAAuB,IAAI,CAACC,eAAe,CAACkB,SAAS,CAACL,OAAO,CAAC,MAAG,CAAC,CACjG,CAAC,CAAC,CACJ,CAEA;AACA,GAAIpB,eAAe,CAAC0B,QAAQ,CAAE,CAC5B,GAAI1B,eAAe,CAAC0B,QAAQ,CAACd,IAAI,CAAE,CACjCR,GAAG,CAACC,IAAI,uBAAAC,MAAA,CAAuBN,eAAe,CAAC0B,QAAQ,CAACd,IAAI,CAAE,CAAC,CACjE,CACA,GAAIZ,eAAe,CAAC0B,QAAQ,CAACjB,WAAW,CAAE,CACxCL,GAAG,CAACC,IAAI,+BAAAC,MAAA,CAA8B,IAAI,CAACC,eAAe,CAACP,eAAe,CAAC0B,QAAQ,CAACjB,WAAW,CAAC,MAAG,CAAC,CACtG,CACF,CAEA;AACA,GAAIT,eAAe,CAAC2B,WAAW,CAAE,CAC/BvB,GAAG,CAACC,IAAI,0CAAAC,MAAA,CAA0CN,eAAe,CAAC2B,WAAW,CAAE,CAAC,CAClF,CAEA;AACA,GAAI3B,eAAe,CAAC4B,YAAY,EAAI5B,eAAe,CAAC4B,YAAY,CAACd,MAAM,CAAG,CAAC,CAAE,CAC3Ed,eAAe,CAAC4B,YAAY,CAACb,OAAO,CAAC,CAACc,WAAW,CAAEZ,KAAK,GAAK,CAC3Db,GAAG,CAACC,IAAI,6BAAAC,MAAA,CAA6BW,KAAK,oCAAAX,MAAA,CAAkCuB,WAAW,CAACjB,IAAI,CAAE,CAAC,CAC/FR,GAAG,CAACC,IAAI,6BAAAC,MAAA,CAA6BW,KAAK,yCAAAX,MAAA,CAAsC,IAAI,CAACC,eAAe,CAACsB,WAAW,CAACC,MAAM,CAAC,MAAG,CAAC,CAC5H,GAAID,WAAW,CAACpB,WAAW,CAAE,CAC3BL,GAAG,CAACC,IAAI,6BAAAC,MAAA,CAA6BW,KAAK,8CAAAX,MAAA,CAA2C,IAAI,CAACC,eAAe,CAACsB,WAAW,CAACpB,WAAW,CAAC,MAAG,CAAC,CACxI,CACF,CAAC,CAAC,CACJ,CAEA;AACA,GAAIT,eAAe,CAACU,QAAQ,CAAE,CAC5B,GAAIV,eAAe,CAACU,QAAQ,CAACqB,OAAO,CAAE,CACpC3B,GAAG,CAACC,IAAI,kBAAAC,MAAA,CAAiBN,eAAe,CAACU,QAAQ,CAACqB,OAAO,MAAG,CAAC,CAC/D,CACA,GAAI/B,eAAe,CAACU,QAAQ,CAACsB,SAAS,CAAE,CACtC5B,GAAG,CAACC,IAAI,oBAAAC,MAAA,CAAmB,IAAI,CAACC,eAAe,CAACP,eAAe,CAACU,QAAQ,CAACsB,SAAS,CAAC,MAAG,CAAC,CACzF,CACA,GAAIhC,eAAe,CAACU,QAAQ,CAACuB,OAAO,EAAIjC,eAAe,CAACU,QAAQ,CAACuB,OAAO,CAACnB,MAAM,CAAG,CAAC,CAAE,CACnFd,eAAe,CAACU,QAAQ,CAACuB,OAAO,CAAClB,OAAO,CAAC,CAACkB,OAAO,CAAEhB,KAAK,GAAK,CAC3D,GAAIgB,OAAO,CAACzB,IAAI,CAAE,CAChBJ,GAAG,CAACC,IAAI,cAAAC,MAAA,CAAcW,KAAK,gBAAAX,MAAA,CAAa,IAAI,CAACC,eAAe,CAAC0B,OAAO,CAACzB,IAAI,CAAC,MAAG,CAAC,CAChF,CACA,GAAIyB,OAAO,CAACC,KAAK,CAAE,CACjB9B,GAAG,CAACC,IAAI,cAAAC,MAAA,CAAcW,KAAK,6BAA2B,CAAC,CACvDb,GAAG,CAACC,IAAI,cAAAC,MAAA,CAAcW,KAAK,yBAAAX,MAAA,CAAsB2B,OAAO,CAACC,KAAK,MAAG,CAAC,CACpE,CACF,CAAC,CAAC,CACJ,CACF,CAEA,MAAO,CAAA9B,GAAG,CAAC+B,IAAI,CAAC,IAAI,CAAC,CACvB,CAEA;AACF;AACA,KACE5B,eAAeA,CAAC6B,GAAG,CAAE,CACnB,GAAI,CAACA,GAAG,CAAE,MAAO,EAAE,CACnB,MAAO,CAAAA,GAAG,CAACC,OAAO,CAAC,KAAK,CAAE,MAAM,CAAC,CAACA,OAAO,CAAC,IAAI,CAAE,KAAK,CAAC,CAACA,OAAO,CAAC,KAAK,CAAE,KAAK,CAAC,CAC9E,CAEA;AACF;AACA,KACEC,QAAQA,CAACC,UAAU,CAAE,CACnB;AACA,KAAM,CAAAC,KAAK,CAAGD,UAAU,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAACC,IAAI,EAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,CAACF,IAAI,EAAIA,IAAI,CAAC,CAClF,KAAM,CAAA3C,eAAe,CAAG,CACtBa,KAAK,CAAE,EAAE,CACTQ,cAAc,CAAE,EAAE,CAClBG,WAAW,CAAE,EAAE,CACfI,YAAY,CAAE,EAAE,CAChBlB,QAAQ,CAAE,CAAC,CACb,CAAC,CAED,IAAK,KAAM,CAAAiC,IAAI,GAAI,CAAAH,KAAK,CAAE,CACxB,GAAIG,IAAI,CAACG,UAAU,CAAC,UAAU,CAAC,CAAE,CAC/B9C,eAAe,CAACE,EAAE,CAAGyC,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC,CAChD,CAAC,IAAM,IAAID,IAAI,CAACG,UAAU,CAAC,KAAK,CAAC,CAAE,CACjC9C,eAAe,CAACE,EAAE,CAAGyC,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC,CAChD,CAAC,IAAM,IAAID,IAAI,CAACG,UAAU,CAAC,QAAQ,CAAC,CAAE,CACpC9C,eAAe,CAACQ,IAAI,CAAGmC,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC,CAACP,OAAO,CAAC,IAAI,CAAE,EAAE,CAAC,CACpE,CAAC,IAAM,IAAIM,IAAI,CAACG,UAAU,CAAC,cAAc,CAAC,CAAE,CAC1C9C,eAAe,CAACS,WAAW,CAAGkC,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC,CAACP,OAAO,CAAC,IAAI,CAAE,EAAE,CAAC,CAC3E,CAAC,IAAM,IAAIM,IAAI,CAACI,QAAQ,CAAC,UAAU,CAAC,CAAE,CACpC/C,eAAe,CAACY,IAAI,CAAG+B,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC,CAClD,CACA;AACF,CAEA,MAAO,CAAA5C,eAAe,CACxB,CAEA;AACF;AACA,KACEgD,uBAAuBA,CAAChD,eAAe,CAAE,CACvC,KAAM,CAAAiD,MAAM,CAAG,EAAE,CAEjB;AACA,GAAI,CAACjD,eAAe,CAACE,EAAE,EAAI,CAACF,eAAe,CAACE,EAAE,CAACgD,KAAK,CAAC,0BAA0B,CAAC,CAAE,CAChFD,MAAM,CAAC5C,IAAI,CAAC,yFAAyF,CAAC,CACxG,CAEA,GAAI,CAACL,eAAe,CAACQ,IAAI,EAAIR,eAAe,CAACQ,IAAI,CAACoC,IAAI,CAAC,CAAC,CAAC9B,MAAM,GAAK,CAAC,CAAE,CACrEmC,MAAM,CAAC5C,IAAI,CAAC,kBAAkB,CAAC,CACjC,CAEA,GAAI,CAACL,eAAe,CAACS,WAAW,EAAIT,eAAe,CAACS,WAAW,CAACmC,IAAI,CAAC,CAAC,CAAC9B,MAAM,GAAK,CAAC,CAAE,CACnFmC,MAAM,CAAC5C,IAAI,CAAC,yBAAyB,CAAC,CACxC,CAEA,GAAI,CAACL,eAAe,CAACY,IAAI,CAAE,CACzBqC,MAAM,CAAC5C,IAAI,CAAC,wBAAwB,CAAC,CACvC,CAEA,GAAI,CAACL,eAAe,CAACa,KAAK,EAAIb,eAAe,CAACa,KAAK,CAACC,MAAM,GAAK,CAAC,CAAE,CAChEmC,MAAM,CAAC5C,IAAI,CAAC,+BAA+B,CAAC,CAC9C,CAAC,IAAM,CACLL,eAAe,CAACa,KAAK,CAACE,OAAO,CAAC,CAACC,IAAI,CAAEC,KAAK,GAAK,CAC7C,GAAI,CAACD,IAAI,CAACG,IAAI,EAAI,CAACH,IAAI,CAACI,OAAO,CAAE,CAC/B6B,MAAM,CAAC5C,IAAI,SAAAC,MAAA,CAASW,KAAK,CAAG,CAAC,yCAAuC,CAAC,CACvE,CACF,CAAC,CAAC,CACJ,CAEA,MAAO,CACLkC,OAAO,CAAEF,MAAM,CAACnC,MAAM,GAAK,CAAC,CAC5BmC,MACF,CAAC,CACH,CAEA;AACF;AACA,KACE,KAAM,CAAAG,mBAAmBA,CAACpD,eAAe,CAAE,CACzC,GAAI,CACF;AACA,KAAM,CAAAqD,UAAU,CAAG,IAAI,CAACL,uBAAuB,CAAChD,eAAe,CAAC,CAChE,GAAI,CAACqD,UAAU,CAACF,OAAO,CAAE,CACvB,KAAM,IAAI,CAAAhD,KAAK,uBAAAG,MAAA,CAAuB+C,UAAU,CAACJ,MAAM,CAACd,IAAI,CAAC,IAAI,CAAC,CAAE,CAAC,CACvE,CAEA;AACA,KAAM,CAAAI,UAAU,CAAG,IAAI,CAACxC,WAAW,CAACC,eAAe,CAAC,CAEpD;AACA,KAAM,CAAAsD,QAAQ,qBAAAhD,MAAA,CAAuBN,eAAe,CAACE,EAAE,QAAM,CAE7D;AACA,KAAM,CAAAqD,OAAO,CAAGnE,oBAAoB,CAACoE,UAAU,CAACF,QAAQ,CAAEf,UAAU,CAAE,CACpE3B,IAAI,CAAE,kBAAkB,CACxB6C,OAAO,CAAEzD,eAAe,CAACE,EAAE,CAC3BwD,SAAS,CAAE1D,eAAe,CAACQ,IAAI,CAC/BmD,YAAY,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACxBC,MAAM,CAAE,cACV,CAAC,CAAC,CAEF,GAAI,CAACP,OAAO,CAAE,CACZ,KAAM,IAAI,CAAApD,KAAK,CAAC,kCAAkC,CAAC,CACrD,CAEA,MAAO,CACLoD,OAAO,CAAE,IAAI,CACbD,QAAQ,CACRS,OAAO,CAAExB,UACX,CAAC,CAEH,CAAE,MAAO3C,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,MAAO,CACL2D,OAAO,CAAE,KAAK,CACd3D,KAAK,CAAEA,KAAK,CAACoE,OACf,CAAC,CACH,CACF,CAEA;AACF;AACA,KACEC,oBAAoBA,CAACR,OAAO,CAAE,CAC5B,GAAI,CACF,KAAM,CAAAS,aAAa,CAAG9E,oBAAoB,CAAC+E,gBAAgB,CAAC,CAAC,CAC7D,KAAM,CAAAb,QAAQ,qBAAAhD,MAAA,CAAuBmD,OAAO,QAAM,CAElD,KAAM,CAAAW,IAAI,CAAGF,aAAa,CAACG,KAAK,CAACC,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACC,IAAI,GAAKlB,QAAQ,CAAC,CAC/D,GAAI,CAACc,IAAI,CAAE,CACT,MAAO,KAAI,CACb,CAEA;AACA,KAAM,CAAApE,eAAe,CAAG,IAAI,CAACsC,QAAQ,CAAC8B,IAAI,CAACL,OAAO,CAAC,CAEnD,MAAO,CACL/D,eAAe,CACfU,QAAQ,CAAE0D,IAAI,CAAC1D,QAAQ,CACvBiD,YAAY,CAAES,IAAI,CAACK,SACrB,CAAC,CAEH,CAAE,MAAO7E,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qDAAqD,CAAEA,KAAK,CAAC,CAC3E,MAAO,KAAI,CACb,CACF,CAEA;AACF;AACA,KACE8E,gBAAgBA,CAAA,CAAG,CACjB,GAAI,CACF,KAAM,CAAAR,aAAa,CAAG9E,oBAAoB,CAAC+E,gBAAgB,CAAC,CAAC,CAE7D,MAAO,CAAAD,aAAa,CAACG,KAAK,CACvBxB,MAAM,CAACuB,IAAI,OAAAO,cAAA,OACV,CAAAP,IAAI,CAACI,IAAI,CAAC1B,UAAU,CAAC,mBAAmB,CAAC,EACzCsB,IAAI,CAACI,IAAI,CAACI,QAAQ,CAAC,MAAM,CAAC,EAC1B,EAAAD,cAAA,CAAAP,IAAI,CAAC1D,QAAQ,UAAAiE,cAAA,iBAAbA,cAAA,CAAe/D,IAAI,IAAK,kBAAkB,EAC5C,CAAC,CACA8B,GAAG,CAAC0B,IAAI,OAAAS,eAAA,CAAAC,eAAA,OAAK,CACZ5E,EAAE,CAAE,EAAA2E,eAAA,CAAAT,IAAI,CAAC1D,QAAQ,UAAAmE,eAAA,iBAAbA,eAAA,CAAepB,OAAO,GAAIW,IAAI,CAACI,IAAI,CAAC/B,KAAK,CAAC,GAAG,CAAC,CAACsC,GAAG,CAAC,CAAC,CAAC1C,OAAO,CAAC,MAAM,CAAE,EAAE,CAAC,CAC5E7B,IAAI,CAAE,EAAAsE,eAAA,CAAAV,IAAI,CAAC1D,QAAQ,UAAAoE,eAAA,iBAAbA,eAAA,CAAepB,SAAS,GAAI,eAAe,CACjDJ,QAAQ,CAAEc,IAAI,CAACI,IAAI,CACnBb,YAAY,CAAES,IAAI,CAACK,SAAS,CAC5B/D,QAAQ,CAAE0D,IAAI,CAAC1D,QACjB,CAAC,EAAC,CAAC,CACFsE,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAACvB,YAAY,CAAGsB,CAAC,CAACtB,YAAY,CAAC,CAEpD,CAAE,MAAO/D,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD,MAAO,EAAE,CACX,CACF,CAEA;AACF;AACA,KACEuF,uBAAuBA,CAAC1B,OAAO,CAAE,CAC/B,GAAI,CACF,KAAM,CAAAH,QAAQ,qBAAAhD,MAAA,CAAuBmD,OAAO,QAAM,CAClD,MAAO,CAAArE,oBAAoB,CAACgG,UAAU,CAAC9B,QAAQ,CAAC,CAClD,CAAE,MAAO1D,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,MAAO,MAAK,CACd,CACF,CAEA;AACF;AACA,KACEyF,0BAA0BA,CAAA,CAAG,CAC3B,MAAO,CACLnF,EAAE,CAAE,EAAE,CACNM,IAAI,CAAE,EAAE,CACRC,WAAW,CAAE,EAAE,CACfG,IAAI,CAAE,QAAQ,CACdC,KAAK,CAAE,CACL,CACEM,IAAI,CAAE,EAAE,CACRC,OAAO,CAAE,EAAE,CACXF,MAAM,CAAE,wBACV,CAAC,CACF,CACDG,cAAc,CAAE,EAAE,CAClBG,WAAW,CAAE,EAAE,CACfE,QAAQ,CAAE,CACRd,IAAI,CAAE,UAAU,CAChBH,WAAW,CAAE,EACf,CAAC,CACDkB,WAAW,CAAE,UAAU,CACvBC,YAAY,CAAE,EAAE,CAChB0D,WAAW,CAAE,CACXC,YAAY,CAAE,EAAE,CAChBC,YAAY,CAAE,EAAE,CAChBC,WAAW,CAAE,EACf,CAAC,CACD/E,QAAQ,CAAE,CACRqB,OAAO,CAAE,OAAO,CAChBpB,MAAM,CAAE,OAAO,CACfqB,SAAS,CAAE,EAAE,CACbC,OAAO,CAAE,EAAE,CACXyD,IAAI,CAAE,EACR,CACF,CAAC,CACH,CAEA;AACF;AACA,KACEC,iBAAiBA,CAAA,CAAG,CAClB,MAAO,CACL,CACEzF,EAAE,CAAE,oBAAoB,CACxBM,IAAI,CAAE,sBAAsB,CAC5BC,WAAW,CAAE,sEAAsE,CACnFG,IAAI,CAAE,cAAc,CACpBC,KAAK,CAAE,CACL,CACEM,IAAI,CAAE,WAAW,CACjBC,OAAO,CAAE,sBAAsB,CAC/BF,MAAM,CAAE,wBACV,CAAC,CACF,CACDQ,QAAQ,CAAE,CACRd,IAAI,CAAE,UAAU,CAChBH,WAAW,CAAE,+BACf,CAAC,CACDkB,WAAW,CAAE,UACf,CAAC,CACD,CACEzB,EAAE,CAAE,gBAAgB,CACpBM,IAAI,CAAE,kBAAkB,CACxBC,WAAW,CAAE,2EAA2E,CACxFG,IAAI,CAAE,cAAc,CACpBC,KAAK,CAAE,CACL,CACEM,IAAI,CAAE,WAAW,CACjBC,OAAO,CAAE,kBAAkB,CAC3BF,MAAM,CAAE,wBACV,CAAC,CACF,CACDQ,QAAQ,CAAE,CACRd,IAAI,CAAE,UAAU,CAChBH,WAAW,CAAE,mDACf,CAAC,CACDkB,WAAW,CAAE,UACf,CAAC,CACD,CACEzB,EAAE,CAAE,kBAAkB,CACtBM,IAAI,CAAE,SAAS,CACfC,WAAW,CAAE,0CAA0C,CACvDG,IAAI,CAAE,SAAS,CACfC,KAAK,CAAE,CACL,CACEM,IAAI,CAAE,WAAW,CACjBC,OAAO,CAAE,SAAS,CAClBF,MAAM,CAAE,wBACV,CAAC,CACF,CACDQ,QAAQ,CAAE,CACRd,IAAI,CAAE,UAAU,CAChBH,WAAW,CAAE,oDACf,CAAC,CACDkB,WAAW,CAAE,WACf,CAAC,CACD,CACEzB,EAAE,CAAE,gBAAgB,CACpBM,IAAI,CAAE,0BAA0B,CAChCC,WAAW,CAAE,8DAA8D,CAC3EG,IAAI,CAAE,QAAQ,CACdC,KAAK,CAAE,CACL,CACEM,IAAI,CAAE,WAAW,CACjBC,OAAO,CAAE,uBAAuB,CAChCF,MAAM,CAAE,wBACV,CAAC,CACF,CACDQ,QAAQ,CAAE,CACRd,IAAI,CAAE,UAAU,CAChBH,WAAW,CAAE,uDACf,CAAC,CACDkB,WAAW,CAAE,gBACf,CAAC,CACF,CACH,CACF,CAEA;AACA,KAAM,CAAAiE,sBAAsB,CAAG,GAAI,CAAAvG,sBAAsB,CAAC,CAAC,CAE3D,cAAe,CAAAuG,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}