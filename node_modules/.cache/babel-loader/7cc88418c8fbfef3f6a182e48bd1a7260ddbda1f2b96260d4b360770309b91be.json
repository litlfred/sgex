{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/runner/work/sgex/sgex/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n  message: _ref => {\n    let {\n      schemaCode\n    } = _ref;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must be multiple of \", \"\"])), schemaCode);\n  },\n  params: _ref2 => {\n    let {\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{multipleOf: \", \"}\"])), schemaCode);\n  }\n};\nconst def = {\n  keyword: \"multipleOf\",\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      data,\n      schemaCode,\n      it\n    } = cxt;\n    // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n    const prec = it.opts.multipleOfPrecision;\n    const res = gen.let(\"res\");\n    const invalid = prec ? (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"Math.abs(Math.round(\", \") - \", \") > 1e-\", \"\"])), res, res, prec) : (0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \" !== parseInt(\", \")\"])), res, res);\n    cxt.fail$data((0, codegen_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"(\", \" === 0 || (\", \" = \", \"/\", \", \", \"))\"])), schemaCode, res, data, schemaCode, invalid));\n  }\n};\nexports.default = def;","map":{"version":3,"names":["codegen_1","require","error","message","_ref","schemaCode","str","_templateObject","_taggedTemplateLiteral","params","_ref2","_","_templateObject2","def","keyword","type","schemaType","$data","code","cxt","gen","data","it","prec","opts","multipleOfPrecision","res","let","invalid","_templateObject3","_templateObject4","fail$data","_templateObject5","exports","default"],"sources":["/home/runner/work/sgex/sgex/node_modules/ajv/lib/vocabularies/validation/multipleOf.ts"],"sourcesContent":["import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str} from \"../../compile/codegen\"\n\nexport type MultipleOfError = ErrorObject<\n  \"multipleOf\",\n  {multipleOf: number},\n  number | {$data: string}\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({schemaCode}) => str`must be multiple of ${schemaCode}`,\n  params: ({schemaCode}) => _`{multipleOf: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"multipleOf\",\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, schemaCode, it} = cxt\n    // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n    const prec = it.opts.multipleOfPrecision\n    const res = gen.let(\"res\")\n    const invalid = prec\n      ? _`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`\n      : _`${res} !== parseInt(${res})`\n    cxt.fail$data(_`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`)\n  },\n}\n\nexport default def\n"],"mappings":";;;;;;;AAEA,MAAAA,SAAA,GAAAC,OAAA;AAQA,MAAMC,KAAK,GAA2B;EACpCC,OAAO,EAAEC,IAAA;IAAA,IAAC;MAACC;IAAU,CAAC,GAAAD,IAAA;IAAA,QAAK,GAAAJ,SAAA,CAAAM,GAAG,EAAAC,eAAA,KAAAA,eAAA,GAAAC,sBAAA,iCAAuBH,UAAU;EAAA,CAAE;EACjEI,MAAM,EAAEC,KAAA;IAAA,IAAC;MAACL;IAAU,CAAC,GAAAK,KAAA;IAAA,QAAK,GAAAV,SAAA,CAAAW,CAAC,EAAAC,gBAAA,KAAAA,gBAAA,GAAAJ,sBAAA,2BAAgBH,UAAU;EAAA;CACtD;AAED,MAAMQ,GAAG,GAA0B;EACjCC,OAAO,EAAE,YAAY;EACrBC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,QAAQ;EACpBC,KAAK,EAAE,IAAI;EACXf,KAAK;EACLgB,IAAIA,CAACC,GAAe;IAClB,MAAM;MAACC,GAAG;MAAEC,IAAI;MAAEhB,UAAU;MAAEiB;IAAE,CAAC,GAAGH,GAAG;IACvC;IACA,MAAMI,IAAI,GAAGD,EAAE,CAACE,IAAI,CAACC,mBAAmB;IACxC,MAAMC,GAAG,GAAGN,GAAG,CAACO,GAAG,CAAC,KAAK,CAAC;IAC1B,MAAMC,OAAO,GAAGL,IAAI,IAChB,GAAAvB,SAAA,CAAAW,CAAC,EAAAkB,gBAAA,KAAAA,gBAAA,GAAArB,sBAAA,oDAAuBkB,GAAG,EAAOA,GAAG,EAAUH,IAAI,KACnD,GAAAvB,SAAA,CAAAW,CAAC,EAAAmB,gBAAA,KAAAA,gBAAA,GAAAtB,sBAAA,gCAAGkB,GAAG,EAAiBA,GAAG,CAAG;IAClCP,GAAG,CAACY,SAAS,EAAC,GAAA/B,SAAA,CAAAW,CAAC,EAAAqB,gBAAA,KAAAA,gBAAA,GAAAxB,sBAAA,iDAAIH,UAAU,EAAcqB,GAAG,EAAML,IAAI,EAAIhB,UAAU,EAAKuB,OAAO,CAAI,CAAC;EACzF;CACD;AAEDK,OAAA,CAAAC,OAAA,GAAerB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}