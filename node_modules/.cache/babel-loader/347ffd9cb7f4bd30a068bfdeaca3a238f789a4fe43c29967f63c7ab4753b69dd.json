{"ast":null,"code":"import _objectSpread from \"/home/runner/work/sgex/sgex/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _taggedTemplateLiteral from \"/home/runner/work/sgex/sgex/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\nimport _objectWithoutProperties from \"/home/runner/work/sgex/sgex/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\nconst _excluded = [\"selectedEntry\", \"setSelectedEntry\", \"entries\"];\nimport { html, useMemo, useLayoutEffect, useRef } from '../../ui';\nimport PopupMenuItem from './PopupMenuItem';\n\n/**\n * @typedef {import('./PopupMenuProvider').PopupMenuEntry} PopupMenuEntry\n */\n\n/**\n * Component that renders a popup menu entry list.\n *\n * @param {Object} props\n * @param {PopupMenuEntry[]} props.entries\n * @param {PopupMenuEntry} props.selectedEntry\n * @param {(entry: PopupMenuEntry | null) => void} props.setSelectedEntry\n */\nexport default function PopupMenuList(props) {\n  const {\n      selectedEntry,\n      setSelectedEntry,\n      entries\n    } = props,\n    restProps = _objectWithoutProperties(props, _excluded);\n  const resultsRef = useRef();\n  const groups = useMemo(() => groupEntries(entries), [entries]);\n\n  // scroll to selected result\n  useLayoutEffect(() => {\n    const containerEl = resultsRef.current;\n    if (!containerEl) return;\n    const selectedEl = containerEl.querySelector('.selected');\n    if (selectedEl) {\n      scrollIntoView(selectedEl);\n    }\n  }, [selectedEntry]);\n  return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    <div class=\\\"djs-popup-results\\\" ref=\", \">\\n      \", \"\\n    </div>\\n  \"])), resultsRef, groups.map(group => html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n        \", \"\\n        <ul class=\\\"djs-popup-group\\\" data-group=\", \">\\n          \", \"\\n        </ul>\\n      \"])), group.name && html(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n          <div key=\", \" class=\\\"entry-header\\\" title=\", \">\\n            \", \"\\n          </div>\\n        \"])), group.id, group.name, group.name), group.id, group.entries.map(entry => html(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n            <\", \"\\n              key=\", \"\\n              entry=\", \"\\n              selected=\", \"\\n              onMouseEnter=\", \"\\n              onMouseLeave=\", \"\\n              ...\", \"\\n            />\\n          \"])), PopupMenuItem, entry.id, entry, entry === selectedEntry, () => setSelectedEntry(entry), () => setSelectedEntry(null), restProps)))));\n}\n\n// helpers\nfunction groupEntries(entries) {\n  const groups = [];\n  const getGroup = group => groups.find(elem => group.id === elem.id);\n  const containsGroup = group => !!getGroup(group);\n\n  // legacy support for provider built for the old popUp menu\n  const formatGroup = group => typeof group === 'string' ? {\n    id: group\n  } : group;\n  entries.forEach(entry => {\n    // assume a default group when none is provided\n    const group = entry.group ? formatGroup(entry.group) : {\n      id: 'default'\n    };\n    if (!containsGroup(group)) {\n      groups.push(_objectSpread(_objectSpread({}, group), {}, {\n        entries: [entry]\n      }));\n    } else {\n      getGroup(group).entries.push(entry);\n    }\n  });\n  return groups;\n}\n\n// helpers ////////////////\n\nfunction scrollIntoView(el) {\n  if (typeof el.scrollIntoViewIfNeeded === 'function') {\n    el.scrollIntoViewIfNeeded();\n  } else {\n    el.scrollIntoView({\n      scrollMode: 'if-needed',\n      block: 'nearest'\n    });\n  }\n}","map":{"version":3,"names":["html","useMemo","useLayoutEffect","useRef","PopupMenuItem","PopupMenuList","props","selectedEntry","setSelectedEntry","entries","restProps","_objectWithoutProperties","_excluded","resultsRef","groups","groupEntries","containerEl","current","selectedEl","querySelector","scrollIntoView","_templateObject","_taggedTemplateLiteral","map","group","_templateObject2","name","_templateObject3","id","entry","_templateObject4","getGroup","find","elem","containsGroup","formatGroup","forEach","push","_objectSpread","el","scrollIntoViewIfNeeded","scrollMode","block"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/popup-menu/PopupMenuList.js"],"sourcesContent":["import {\n  html,\n  useMemo,\n  useLayoutEffect,\n  useRef\n} from '../../ui';\n\nimport PopupMenuItem from './PopupMenuItem';\n\n/**\n * @typedef {import('./PopupMenuProvider').PopupMenuEntry} PopupMenuEntry\n */\n\n/**\n * Component that renders a popup menu entry list.\n *\n * @param {Object} props\n * @param {PopupMenuEntry[]} props.entries\n * @param {PopupMenuEntry} props.selectedEntry\n * @param {(entry: PopupMenuEntry | null) => void} props.setSelectedEntry\n */\nexport default function PopupMenuList(props) {\n  const {\n    selectedEntry,\n    setSelectedEntry,\n    entries,\n    ...restProps\n  } = props;\n\n  const resultsRef = useRef();\n\n  const groups = useMemo(() => groupEntries(entries), [ entries ]);\n\n  // scroll to selected result\n  useLayoutEffect(() => {\n    const containerEl = resultsRef.current;\n\n    if (!containerEl)\n      return;\n\n    const selectedEl = containerEl.querySelector('.selected');\n\n    if (selectedEl) {\n      scrollIntoView(selectedEl);\n    }\n  }, [ selectedEntry ]);\n\n  return html`\n    <div class=\"djs-popup-results\" ref=${ resultsRef }>\n      ${ groups.map(group => html`\n        ${ group.name && html`\n          <div key=${ group.id } class=\"entry-header\" title=${ group.name }>\n            ${ group.name }\n          </div>\n        ` }\n        <ul class=\"djs-popup-group\" data-group=${ group.id }>\n          ${ group.entries.map(entry => html`\n            <${PopupMenuItem}\n              key=${ entry.id }\n              entry=${ entry }\n              selected=${ entry === selectedEntry }\n              onMouseEnter=${ () => setSelectedEntry(entry) }\n              onMouseLeave=${ () => setSelectedEntry(null) }\n              ...${ restProps }\n            />\n          `) }\n        </ul>\n      `) }\n    </div>\n  `;\n}\n\n\n// helpers\nfunction groupEntries(entries) {\n  const groups = [];\n\n  const getGroup = group => groups.find(elem => group.id === elem.id);\n\n  const containsGroup = group => !!getGroup(group);\n\n  // legacy support for provider built for the old popUp menu\n  const formatGroup = group =>\n    typeof group === 'string' ? { id: group } : group;\n\n  entries.forEach(entry => {\n\n    // assume a default group when none is provided\n    const group = entry.group ? formatGroup(entry.group) : { id: 'default' };\n\n    if (!containsGroup(group)) {\n      groups.push({ ...group, entries: [ entry ] });\n    } else {\n      getGroup(group).entries.push(entry);\n    }\n  });\n\n  return groups;\n}\n\n// helpers ////////////////\n\nfunction scrollIntoView(el) {\n  if (typeof el.scrollIntoViewIfNeeded === 'function') {\n    el.scrollIntoViewIfNeeded();\n  } else {\n    el.scrollIntoView({\n      scrollMode: 'if-needed',\n      block: 'nearest'\n    });\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}