{"ast":null,"code":"import React,{useState,useCallback,useEffect}from'react';import{PageLayout}from'./index';import SaveButtonsContainer from'./SaveButtonsContainer';import CommitMessageDialog from'./CommitMessageDialog';import dataAccessLayer from'../../services/dataAccessLayer';import'./AssetEditorLayout.css';/**\n * Enhanced page framework for asset editors\n * Provides consistent save functionality with user access integration\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AssetEditorLayout=_ref=>{let{children,pageName,// Asset information\nfile,repository,branch,// Content management\ncontent,originalContent,hasChanges=false,// Save callbacks\nonSave,onContentChange,// Custom save functions (for special cases like BPMN that need XML export)\ncustomSaveToGitHub,// UI customization\nshowSaveButtons=true,saveButtonsPosition='top',// 'top', 'bottom', 'both'\n...pageLayoutProps}=_ref;// Save states\nconst[isSavingLocal,setIsSavingLocal]=useState(false);const[isSavingGitHub,setIsSavingGitHub]=useState(false);const[saveError,setSaveError]=useState(null);const[localSaveSuccess,setLocalSaveSuccess]=useState(false);const[githubSaveSuccess,setGithubSaveSuccess]=useState(false);const[saveOptions,setSaveOptions]=useState(null);// Commit dialog state\nconst[showCommitDialog,setShowCommitDialog]=useState(false);const[commitMessage,setCommitMessage]=useState('');// Load save options based on current user and repository\nuseEffect(()=>{const loadSaveOptions=async()=>{if(repository){try{var _repository$owner;const options=await dataAccessLayer.getSaveOptions((_repository$owner=repository.owner)===null||_repository$owner===void 0?void 0:_repository$owner.login,repository.name,branch);setSaveOptions(options);}catch(error){console.error('Error loading save options:',error);}}};loadSaveOptions();},[repository,branch]);// Check if user can save to GitHub based on access service\nconst canSaveToGitHub=(saveOptions===null||saveOptions===void 0?void 0:saveOptions.canSaveGitHub)&&(saveOptions===null||saveOptions===void 0?void 0:saveOptions.showSaveGitHub);// Handle local save\nconst handleSaveLocal=useCallback(async()=>{if(!hasChanges||!(file!==null&&file!==void 0&&file.path))return;try{var _repository$owner2;setIsSavingLocal(true);setSaveError(null);setLocalSaveSuccess(false);// Use data access layer for local save\nconst result=await dataAccessLayer.saveAssetLocal(file.path,content,{repository:(repository===null||repository===void 0?void 0:repository.full_name)||`${repository===null||repository===void 0?void 0:(_repository$owner2=repository.owner)===null||_repository$owner2===void 0?void 0:_repository$owner2.login}/${repository===null||repository===void 0?void 0:repository.name}`,branch:branch||(repository===null||repository===void 0?void 0:repository.default_branch)||'main',fileName:file.name,timestamp:new Date().toISOString()});if(result.result==='success'){setLocalSaveSuccess(true);onSave&&onSave(content,'local');// Auto-hide success message after 3 seconds\nsetTimeout(()=>{setLocalSaveSuccess(false);},3000);}else{throw new Error(result.message||'Failed to save to local storage');}}catch(error){console.error('Error saving file locally:',error);setSaveError(`Failed to save locally: ${error.message}`);}finally{setIsSavingLocal(false);}},[hasChanges,file,content,repository,branch,onSave]);// Handle GitHub save - shows commit dialog\nconst handleSaveGitHub=useCallback(()=>{if(!hasChanges||!canSaveToGitHub)return;setSaveError(null);setShowCommitDialog(true);},[hasChanges,canSaveToGitHub]);// Handle commit to GitHub with message\nconst handleCommitToGitHub=useCallback(async message=>{if(!message.trim()||!(file!==null&&file!==void 0&&file.path))return;try{var _repository$owner3;setIsSavingGitHub(true);setSaveError(null);setGithubSaveSuccess(false);// Use custom save function if provided (for special cases like BPMN)\nif(customSaveToGitHub){const success=await customSaveToGitHub(message.trim());if(success){setGithubSaveSuccess(true);setShowCommitDialog(false);setCommitMessage('');onSave&&onSave(content,'github');// Auto-hide success message after 3 seconds\nsetTimeout(()=>{setGithubSaveSuccess(false);},3000);}else{throw new Error('Custom save function failed');}return;}// Use data access layer for GitHub save\nconst result=await dataAccessLayer.saveAssetGitHub(repository===null||repository===void 0?void 0:(_repository$owner3=repository.owner)===null||_repository$owner3===void 0?void 0:_repository$owner3.login,repository===null||repository===void 0?void 0:repository.name,branch,file.path,content,message.trim());if(result.result==='success'){setGithubSaveSuccess(true);setShowCommitDialog(false);setCommitMessage('');onSave&&onSave(content,'github');// Auto-hide success message after 3 seconds\nsetTimeout(()=>{setGithubSaveSuccess(false);},3000);}else{// Handle different result types\nlet errorMessage=result.message;if(result.result==='demo_mode_blocked'){errorMessage='Demo users cannot save to GitHub. You can save changes locally instead.';}else if(result.result==='permission_denied'){errorMessage='You do not have permission to save to this repository.';}throw new Error(errorMessage);}}catch(error){console.error('Error saving file to GitHub:',error);setSaveError(`Failed to save to GitHub: ${error.message}`);}finally{setIsSavingGitHub(false);}},[file,content,repository,branch,onSave,customSaveToGitHub]);// Handle commit dialog cancel\nconst handleCancelCommit=useCallback(()=>{setShowCommitDialog(false);setCommitMessage('');},[]);const saveButtonsProps={// States\nhasChanges,isSavingLocal,isSavingGitHub,canSaveToGitHub,localSaveSuccess,githubSaveSuccess,// Handlers\nonSaveLocal:handleSaveLocal,onSaveGitHub:handleSaveGitHub};return/*#__PURE__*/_jsx(PageLayout,{pageName:pageName,...pageLayoutProps,children:/*#__PURE__*/_jsxs(\"div\",{className:\"asset-editor-layout\",children:[showSaveButtons&&(saveButtonsPosition==='top'||saveButtonsPosition==='both')&&/*#__PURE__*/_jsx(\"div\",{className:\"save-buttons-top\",children:/*#__PURE__*/_jsx(SaveButtonsContainer,{...saveButtonsProps})}),saveError&&/*#__PURE__*/_jsxs(\"div\",{className:\"asset-editor-error\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"error-icon\",children:\"\\u26A0\\uFE0F\"}),saveError,/*#__PURE__*/_jsx(\"button\",{className:\"btn-link error-dismiss\",onClick:()=>setSaveError(null),children:\"\\u2715\"})]}),localSaveSuccess&&/*#__PURE__*/_jsxs(\"div\",{className:\"asset-editor-success\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"success-icon\",children:\"\\u2705\"}),\"Changes saved locally successfully!\"]}),githubSaveSuccess&&/*#__PURE__*/_jsxs(\"div\",{className:\"asset-editor-success\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"success-icon\",children:\"\\u2705\"}),\"Changes committed to GitHub successfully!\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"asset-editor-content\",children:children}),showSaveButtons&&(saveButtonsPosition==='bottom'||saveButtonsPosition==='both')&&/*#__PURE__*/_jsx(\"div\",{className:\"save-buttons-bottom\",children:/*#__PURE__*/_jsx(SaveButtonsContainer,{...saveButtonsProps})}),showCommitDialog&&/*#__PURE__*/_jsx(CommitMessageDialog,{isOpen:showCommitDialog,commitMessage:commitMessage,setCommitMessage:setCommitMessage,onCommit:handleCommitToGitHub,onCancel:handleCancelCommit,isSaving:isSavingGitHub,fileName:file===null||file===void 0?void 0:file.name})]})});};export default AssetEditorLayout;","map":{"version":3,"names":["React","useState","useCallback","useEffect","PageLayout","SaveButtonsContainer","CommitMessageDialog","dataAccessLayer","jsx","_jsx","jsxs","_jsxs","AssetEditorLayout","_ref","children","pageName","file","repository","branch","content","originalContent","hasChanges","onSave","onContentChange","customSaveToGitHub","showSaveButtons","saveButtonsPosition","pageLayoutProps","isSavingLocal","setIsSavingLocal","isSavingGitHub","setIsSavingGitHub","saveError","setSaveError","localSaveSuccess","setLocalSaveSuccess","githubSaveSuccess","setGithubSaveSuccess","saveOptions","setSaveOptions","showCommitDialog","setShowCommitDialog","commitMessage","setCommitMessage","loadSaveOptions","_repository$owner","options","getSaveOptions","owner","login","name","error","console","canSaveToGitHub","canSaveGitHub","showSaveGitHub","handleSaveLocal","path","_repository$owner2","result","saveAssetLocal","full_name","default_branch","fileName","timestamp","Date","toISOString","setTimeout","Error","message","handleSaveGitHub","handleCommitToGitHub","trim","_repository$owner3","success","saveAssetGitHub","errorMessage","handleCancelCommit","saveButtonsProps","onSaveLocal","onSaveGitHub","className","onClick","isOpen","onCommit","onCancel","isSaving"],"sources":["/home/runner/work/sgex/sgex/src/components/framework/AssetEditorLayout.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { PageLayout } from './index';\nimport SaveButtonsContainer from './SaveButtonsContainer';\nimport CommitMessageDialog from './CommitMessageDialog';\nimport dataAccessLayer from '../../services/dataAccessLayer';\nimport './AssetEditorLayout.css';\n\n/**\n * Enhanced page framework for asset editors\n * Provides consistent save functionality with user access integration\n */\nconst AssetEditorLayout = ({\n  children,\n  pageName,\n  // Asset information\n  file,\n  repository,\n  branch,\n  // Content management\n  content,\n  originalContent,\n  hasChanges = false,\n  // Save callbacks\n  onSave,\n  onContentChange,\n  // Custom save functions (for special cases like BPMN that need XML export)\n  customSaveToGitHub,\n  // UI customization\n  showSaveButtons = true,\n  saveButtonsPosition = 'top', // 'top', 'bottom', 'both'\n  ...pageLayoutProps\n}) => {\n  // Save states\n  const [isSavingLocal, setIsSavingLocal] = useState(false);\n  const [isSavingGitHub, setIsSavingGitHub] = useState(false);\n  const [saveError, setSaveError] = useState(null);\n  const [localSaveSuccess, setLocalSaveSuccess] = useState(false);\n  const [githubSaveSuccess, setGithubSaveSuccess] = useState(false);\n  const [saveOptions, setSaveOptions] = useState(null);\n  \n  // Commit dialog state\n  const [showCommitDialog, setShowCommitDialog] = useState(false);\n  const [commitMessage, setCommitMessage] = useState('');\n\n  // Load save options based on current user and repository\n  useEffect(() => {\n    const loadSaveOptions = async () => {\n      if (repository) {\n        try {\n          const options = await dataAccessLayer.getSaveOptions(\n            repository.owner?.login,\n            repository.name,\n            branch\n          );\n          setSaveOptions(options);\n        } catch (error) {\n          console.error('Error loading save options:', error);\n        }\n      }\n    };\n\n    loadSaveOptions();\n  }, [repository, branch]);\n\n  // Check if user can save to GitHub based on access service\n  const canSaveToGitHub = saveOptions?.canSaveGitHub && saveOptions?.showSaveGitHub;\n\n  // Handle local save\n  const handleSaveLocal = useCallback(async () => {\n    if (!hasChanges || !file?.path) return;\n\n    try {\n      setIsSavingLocal(true);\n      setSaveError(null);\n      setLocalSaveSuccess(false);\n\n      // Use data access layer for local save\n      const result = await dataAccessLayer.saveAssetLocal(file.path, content, {\n        repository: repository?.full_name || `${repository?.owner?.login}/${repository?.name}`,\n        branch: branch || repository?.default_branch || 'main',\n        fileName: file.name,\n        timestamp: new Date().toISOString()\n      });\n      \n      if (result.result === 'success') {\n        setLocalSaveSuccess(true);\n        onSave && onSave(content, 'local');\n        \n        // Auto-hide success message after 3 seconds\n        setTimeout(() => {\n          setLocalSaveSuccess(false);\n        }, 3000);\n      } else {\n        throw new Error(result.message || 'Failed to save to local storage');\n      }\n\n    } catch (error) {\n      console.error('Error saving file locally:', error);\n      setSaveError(`Failed to save locally: ${error.message}`);\n    } finally {\n      setIsSavingLocal(false);\n    }\n  }, [hasChanges, file, content, repository, branch, onSave]);\n\n  // Handle GitHub save - shows commit dialog\n  const handleSaveGitHub = useCallback(() => {\n    if (!hasChanges || !canSaveToGitHub) return;\n    \n    setSaveError(null);\n    setShowCommitDialog(true);\n  }, [hasChanges, canSaveToGitHub]);\n\n  // Handle commit to GitHub with message\n  const handleCommitToGitHub = useCallback(async (message) => {\n    if (!message.trim() || !file?.path) return;\n\n    try {\n      setIsSavingGitHub(true);\n      setSaveError(null);\n      setGithubSaveSuccess(false);\n\n      // Use custom save function if provided (for special cases like BPMN)\n      if (customSaveToGitHub) {\n        const success = await customSaveToGitHub(message.trim());\n        if (success) {\n          setGithubSaveSuccess(true);\n          setShowCommitDialog(false);\n          setCommitMessage('');\n          onSave && onSave(content, 'github');\n          \n          // Auto-hide success message after 3 seconds\n          setTimeout(() => {\n            setGithubSaveSuccess(false);\n          }, 3000);\n        } else {\n          throw new Error('Custom save function failed');\n        }\n        return;\n      }\n\n      // Use data access layer for GitHub save\n      const result = await dataAccessLayer.saveAssetGitHub(\n        repository?.owner?.login,\n        repository?.name,\n        branch,\n        file.path,\n        content,\n        message.trim()\n      );\n\n      if (result.result === 'success') {\n        setGithubSaveSuccess(true);\n        setShowCommitDialog(false);\n        setCommitMessage('');\n        onSave && onSave(content, 'github');\n        \n        // Auto-hide success message after 3 seconds\n        setTimeout(() => {\n          setGithubSaveSuccess(false);\n        }, 3000);\n      } else {\n        // Handle different result types\n        let errorMessage = result.message;\n        if (result.result === 'demo_mode_blocked') {\n          errorMessage = 'Demo users cannot save to GitHub. You can save changes locally instead.';\n        } else if (result.result === 'permission_denied') {\n          errorMessage = 'You do not have permission to save to this repository.';\n        }\n        throw new Error(errorMessage);\n      }\n\n    } catch (error) {\n      console.error('Error saving file to GitHub:', error);\n      setSaveError(`Failed to save to GitHub: ${error.message}`);\n    } finally {\n      setIsSavingGitHub(false);\n    }\n  }, [file, content, repository, branch, onSave, customSaveToGitHub]);\n\n  // Handle commit dialog cancel\n  const handleCancelCommit = useCallback(() => {\n    setShowCommitDialog(false);\n    setCommitMessage('');\n  }, []);\n\n  const saveButtonsProps = {\n    // States\n    hasChanges,\n    isSavingLocal,\n    isSavingGitHub,\n    canSaveToGitHub,\n    localSaveSuccess,\n    githubSaveSuccess,\n    \n    // Handlers\n    onSaveLocal: handleSaveLocal,\n    onSaveGitHub: handleSaveGitHub\n  };\n\n  return (\n    <PageLayout pageName={pageName} {...pageLayoutProps}>\n      <div className=\"asset-editor-layout\">\n        {/* Top save buttons */}\n        {showSaveButtons && (saveButtonsPosition === 'top' || saveButtonsPosition === 'both') && (\n          <div className=\"save-buttons-top\">\n            <SaveButtonsContainer {...saveButtonsProps} />\n          </div>\n        )}\n\n        {/* Error display */}\n        {saveError && (\n          <div className=\"asset-editor-error\">\n            <span className=\"error-icon\">⚠️</span>\n            {saveError}\n            <button \n              className=\"btn-link error-dismiss\"\n              onClick={() => setSaveError(null)}\n            >\n              ✕\n            </button>\n          </div>\n        )}\n\n        {/* Success messages */}\n        {localSaveSuccess && (\n          <div className=\"asset-editor-success\">\n            <span className=\"success-icon\">✅</span>\n            Changes saved locally successfully!\n          </div>\n        )}\n        \n        {githubSaveSuccess && (\n          <div className=\"asset-editor-success\">\n            <span className=\"success-icon\">✅</span>\n            Changes committed to GitHub successfully!\n          </div>\n        )}\n\n        {/* Main content area */}\n        <div className=\"asset-editor-content\">\n          {children}\n        </div>\n\n        {/* Bottom save buttons */}\n        {showSaveButtons && (saveButtonsPosition === 'bottom' || saveButtonsPosition === 'both') && (\n          <div className=\"save-buttons-bottom\">\n            <SaveButtonsContainer {...saveButtonsProps} />\n          </div>\n        )}\n\n        {/* Commit message dialog */}\n        {showCommitDialog && (\n          <CommitMessageDialog\n            isOpen={showCommitDialog}\n            commitMessage={commitMessage}\n            setCommitMessage={setCommitMessage}\n            onCommit={handleCommitToGitHub}\n            onCancel={handleCancelCommit}\n            isSaving={isSavingGitHub}\n            fileName={file?.name}\n          />\n        )}\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default AssetEditorLayout;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}