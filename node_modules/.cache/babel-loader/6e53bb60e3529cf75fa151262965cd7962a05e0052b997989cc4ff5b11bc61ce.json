{"ast":null,"code":"import { forEach } from 'min-dash';\nimport { add as collectionAdd, remove as collectionRemove } from '../../../util/Collections';\n\n/**\n * A handler that implements reversible moving of connections.\n *\n * The handler differs from the layout connection handler in a sense\n * that it preserves the connection layout.\n */\nexport default function MoveConnectionHandler() {}\nMoveConnectionHandler.prototype.execute = function (context) {\n  var connection = context.connection,\n    delta = context.delta;\n  var newParent = context.newParent || connection.parent,\n    newParentIndex = context.newParentIndex,\n    oldParent = connection.parent;\n\n  // save old parent in context\n  context.oldParent = oldParent;\n  context.oldParentIndex = collectionRemove(oldParent.children, connection);\n\n  // add to new parent at position\n  collectionAdd(newParent.children, connection, newParentIndex);\n\n  // update parent\n  connection.parent = newParent;\n\n  // update waypoint positions\n  forEach(connection.waypoints, function (p) {\n    p.x += delta.x;\n    p.y += delta.y;\n    if (p.original) {\n      p.original.x += delta.x;\n      p.original.y += delta.y;\n    }\n  });\n  return connection;\n};\nMoveConnectionHandler.prototype.revert = function (context) {\n  var connection = context.connection,\n    newParent = connection.parent,\n    oldParent = context.oldParent,\n    oldParentIndex = context.oldParentIndex,\n    delta = context.delta;\n\n  // remove from newParent\n  collectionRemove(newParent.children, connection);\n\n  // restore previous location in old parent\n  collectionAdd(oldParent.children, connection, oldParentIndex);\n\n  // restore parent\n  connection.parent = oldParent;\n\n  // revert to old waypoint positions\n  forEach(connection.waypoints, function (p) {\n    p.x -= delta.x;\n    p.y -= delta.y;\n    if (p.original) {\n      p.original.x -= delta.x;\n      p.original.y -= delta.y;\n    }\n  });\n  return connection;\n};","map":{"version":3,"names":["forEach","add","collectionAdd","remove","collectionRemove","MoveConnectionHandler","prototype","execute","context","connection","delta","newParent","parent","newParentIndex","oldParent","oldParentIndex","children","waypoints","p","x","y","original","revert"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/modeling/cmd/MoveConnectionHandler.js"],"sourcesContent":["import { forEach } from 'min-dash';\n\n\nimport {\n  add as collectionAdd,\n  remove as collectionRemove\n} from '../../../util/Collections';\n\n\n/**\n * A handler that implements reversible moving of connections.\n *\n * The handler differs from the layout connection handler in a sense\n * that it preserves the connection layout.\n */\nexport default function MoveConnectionHandler() { }\n\n\nMoveConnectionHandler.prototype.execute = function(context) {\n\n  var connection = context.connection,\n      delta = context.delta;\n\n  var newParent = context.newParent || connection.parent,\n      newParentIndex = context.newParentIndex,\n      oldParent = connection.parent;\n\n  // save old parent in context\n  context.oldParent = oldParent;\n  context.oldParentIndex = collectionRemove(oldParent.children, connection);\n\n  // add to new parent at position\n  collectionAdd(newParent.children, connection, newParentIndex);\n\n  // update parent\n  connection.parent = newParent;\n\n  // update waypoint positions\n  forEach(connection.waypoints, function(p) {\n    p.x += delta.x;\n    p.y += delta.y;\n\n    if (p.original) {\n      p.original.x += delta.x;\n      p.original.y += delta.y;\n    }\n  });\n\n  return connection;\n};\n\nMoveConnectionHandler.prototype.revert = function(context) {\n\n  var connection = context.connection,\n      newParent = connection.parent,\n      oldParent = context.oldParent,\n      oldParentIndex = context.oldParentIndex,\n      delta = context.delta;\n\n  // remove from newParent\n  collectionRemove(newParent.children, connection);\n\n  // restore previous location in old parent\n  collectionAdd(oldParent.children, connection, oldParentIndex);\n\n  // restore parent\n  connection.parent = oldParent;\n\n  // revert to old waypoint positions\n  forEach(connection.waypoints, function(p) {\n    p.x -= delta.x;\n    p.y -= delta.y;\n\n    if (p.original) {\n      p.original.x -= delta.x;\n      p.original.y -= delta.y;\n    }\n  });\n\n  return connection;\n};"],"mappings":"AAAA,SAASA,OAAO,QAAQ,UAAU;AAGlC,SACEC,GAAG,IAAIC,aAAa,EACpBC,MAAM,IAAIC,gBAAgB,QACrB,2BAA2B;;AAGlC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,qBAAqBA,CAAA,EAAG,CAAE;AAGlDA,qBAAqB,CAACC,SAAS,CAACC,OAAO,GAAG,UAASC,OAAO,EAAE;EAE1D,IAAIC,UAAU,GAAGD,OAAO,CAACC,UAAU;IAC/BC,KAAK,GAAGF,OAAO,CAACE,KAAK;EAEzB,IAAIC,SAAS,GAAGH,OAAO,CAACG,SAAS,IAAIF,UAAU,CAACG,MAAM;IAClDC,cAAc,GAAGL,OAAO,CAACK,cAAc;IACvCC,SAAS,GAAGL,UAAU,CAACG,MAAM;;EAEjC;EACAJ,OAAO,CAACM,SAAS,GAAGA,SAAS;EAC7BN,OAAO,CAACO,cAAc,GAAGX,gBAAgB,CAACU,SAAS,CAACE,QAAQ,EAAEP,UAAU,CAAC;;EAEzE;EACAP,aAAa,CAACS,SAAS,CAACK,QAAQ,EAAEP,UAAU,EAAEI,cAAc,CAAC;;EAE7D;EACAJ,UAAU,CAACG,MAAM,GAAGD,SAAS;;EAE7B;EACAX,OAAO,CAACS,UAAU,CAACQ,SAAS,EAAE,UAASC,CAAC,EAAE;IACxCA,CAAC,CAACC,CAAC,IAAIT,KAAK,CAACS,CAAC;IACdD,CAAC,CAACE,CAAC,IAAIV,KAAK,CAACU,CAAC;IAEd,IAAIF,CAAC,CAACG,QAAQ,EAAE;MACdH,CAAC,CAACG,QAAQ,CAACF,CAAC,IAAIT,KAAK,CAACS,CAAC;MACvBD,CAAC,CAACG,QAAQ,CAACD,CAAC,IAAIV,KAAK,CAACU,CAAC;IACzB;EACF,CAAC,CAAC;EAEF,OAAOX,UAAU;AACnB,CAAC;AAEDJ,qBAAqB,CAACC,SAAS,CAACgB,MAAM,GAAG,UAASd,OAAO,EAAE;EAEzD,IAAIC,UAAU,GAAGD,OAAO,CAACC,UAAU;IAC/BE,SAAS,GAAGF,UAAU,CAACG,MAAM;IAC7BE,SAAS,GAAGN,OAAO,CAACM,SAAS;IAC7BC,cAAc,GAAGP,OAAO,CAACO,cAAc;IACvCL,KAAK,GAAGF,OAAO,CAACE,KAAK;;EAEzB;EACAN,gBAAgB,CAACO,SAAS,CAACK,QAAQ,EAAEP,UAAU,CAAC;;EAEhD;EACAP,aAAa,CAACY,SAAS,CAACE,QAAQ,EAAEP,UAAU,EAAEM,cAAc,CAAC;;EAE7D;EACAN,UAAU,CAACG,MAAM,GAAGE,SAAS;;EAE7B;EACAd,OAAO,CAACS,UAAU,CAACQ,SAAS,EAAE,UAASC,CAAC,EAAE;IACxCA,CAAC,CAACC,CAAC,IAAIT,KAAK,CAACS,CAAC;IACdD,CAAC,CAACE,CAAC,IAAIV,KAAK,CAACU,CAAC;IAEd,IAAIF,CAAC,CAACG,QAAQ,EAAE;MACdH,CAAC,CAACG,QAAQ,CAACF,CAAC,IAAIT,KAAK,CAACS,CAAC;MACvBD,CAAC,CAACG,QAAQ,CAACD,CAAC,IAAIV,KAAK,CAACU,CAAC;IACzB;EACF,CAAC,CAAC;EAEF,OAAOX,UAAU;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}