{"ast":null,"code":"var DEFAULT_RENDER_PRIORITY = 1000;\n\n/**\n * @typedef {import('../core/Types').ElementLike} Element\n * @typedef {import('../core/Types').ConnectionLike} Connection\n * @typedef {import('../core/Types').ShapeLike} Shape\n *\n * @typedef {import('../core/EventBus').default} EventBus\n */\n\n/**\n * The base implementation of shape and connection renderers.\n *\n * @param {EventBus} eventBus\n * @param {number} [renderPriority=1000]\n */\nexport default function BaseRenderer(eventBus, renderPriority) {\n  var self = this;\n  renderPriority = renderPriority || DEFAULT_RENDER_PRIORITY;\n  eventBus.on(['render.shape', 'render.connection'], renderPriority, function (evt, context) {\n    var type = evt.type,\n      element = context.element,\n      visuals = context.gfx,\n      attrs = context.attrs;\n    if (self.canRender(element)) {\n      if (type === 'render.shape') {\n        return self.drawShape(visuals, element, attrs);\n      } else {\n        return self.drawConnection(visuals, element, attrs);\n      }\n    }\n  });\n  eventBus.on(['render.getShapePath', 'render.getConnectionPath'], renderPriority, function (evt, element) {\n    if (self.canRender(element)) {\n      if (evt.type === 'render.getShapePath') {\n        return self.getShapePath(element);\n      } else {\n        return self.getConnectionPath(element);\n      }\n    }\n  });\n}\n\n/**\n * Checks whether an element can be rendered.\n *\n * @param {Element} element The element to be rendered.\n *\n * @return {boolean} Whether the element can be rendered.\n */\nBaseRenderer.prototype.canRender = function (element) {};\n\n/**\n * Draws a shape.\n *\n * @param {SVGElement} visuals The SVG element to draw the shape into.\n * @param {Shape} shape The shape to be drawn.\n *\n * @return {SVGElement} The SVG element of the shape drawn.\n */\nBaseRenderer.prototype.drawShape = function (visuals, shape) {};\n\n/**\n * Draws a connection.\n *\n * @param {SVGElement} visuals The SVG element to draw the connection into.\n * @param {Connection} connection The connection to be drawn.\n *\n * @return {SVGElement} The SVG element of the connection drawn.\n */\nBaseRenderer.prototype.drawConnection = function (visuals, connection) {};\n\n/**\n * Gets the SVG path of the graphical representation of a shape.\n *\n * @param {Shape} shape The shape.\n *\n * @return {string} The SVG path of the shape.\n */\nBaseRenderer.prototype.getShapePath = function (shape) {};\n\n/**\n * Gets the SVG path of the graphical representation of a connection.\n *\n * @param {Connection} connection The connection.\n *\n * @return {string} The SVG path of the connection.\n */\nBaseRenderer.prototype.getConnectionPath = function (connection) {};","map":{"version":3,"names":["DEFAULT_RENDER_PRIORITY","BaseRenderer","eventBus","renderPriority","self","on","evt","context","type","element","visuals","gfx","attrs","canRender","drawShape","drawConnection","getShapePath","getConnectionPath","prototype","shape","connection"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/draw/BaseRenderer.js"],"sourcesContent":["var DEFAULT_RENDER_PRIORITY = 1000;\n\n/**\n * @typedef {import('../core/Types').ElementLike} Element\n * @typedef {import('../core/Types').ConnectionLike} Connection\n * @typedef {import('../core/Types').ShapeLike} Shape\n *\n * @typedef {import('../core/EventBus').default} EventBus\n */\n\n/**\n * The base implementation of shape and connection renderers.\n *\n * @param {EventBus} eventBus\n * @param {number} [renderPriority=1000]\n */\nexport default function BaseRenderer(eventBus, renderPriority) {\n  var self = this;\n\n  renderPriority = renderPriority || DEFAULT_RENDER_PRIORITY;\n\n  eventBus.on([ 'render.shape', 'render.connection' ], renderPriority, function(evt, context) {\n    var type = evt.type,\n        element = context.element,\n        visuals = context.gfx,\n        attrs = context.attrs;\n\n    if (self.canRender(element)) {\n      if (type === 'render.shape') {\n        return self.drawShape(visuals, element, attrs);\n      } else {\n        return self.drawConnection(visuals, element, attrs);\n      }\n    }\n  });\n\n  eventBus.on([ 'render.getShapePath', 'render.getConnectionPath' ], renderPriority, function(evt, element) {\n    if (self.canRender(element)) {\n      if (evt.type === 'render.getShapePath') {\n        return self.getShapePath(element);\n      } else {\n        return self.getConnectionPath(element);\n      }\n    }\n  });\n}\n\n/**\n * Checks whether an element can be rendered.\n *\n * @param {Element} element The element to be rendered.\n *\n * @return {boolean} Whether the element can be rendered.\n */\nBaseRenderer.prototype.canRender = function(element) {};\n\n/**\n * Draws a shape.\n *\n * @param {SVGElement} visuals The SVG element to draw the shape into.\n * @param {Shape} shape The shape to be drawn.\n *\n * @return {SVGElement} The SVG element of the shape drawn.\n */\nBaseRenderer.prototype.drawShape = function(visuals, shape) {};\n\n/**\n * Draws a connection.\n *\n * @param {SVGElement} visuals The SVG element to draw the connection into.\n * @param {Connection} connection The connection to be drawn.\n *\n * @return {SVGElement} The SVG element of the connection drawn.\n */\nBaseRenderer.prototype.drawConnection = function(visuals, connection) {};\n\n/**\n * Gets the SVG path of the graphical representation of a shape.\n *\n * @param {Shape} shape The shape.\n *\n * @return {string} The SVG path of the shape.\n */\nBaseRenderer.prototype.getShapePath = function(shape) {};\n\n/**\n * Gets the SVG path of the graphical representation of a connection.\n *\n * @param {Connection} connection The connection.\n *\n * @return {string} The SVG path of the connection.\n */\nBaseRenderer.prototype.getConnectionPath = function(connection) {};\n"],"mappings":"AAAA,IAAIA,uBAAuB,GAAG,IAAI;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,YAAYA,CAACC,QAAQ,EAAEC,cAAc,EAAE;EAC7D,IAAIC,IAAI,GAAG,IAAI;EAEfD,cAAc,GAAGA,cAAc,IAAIH,uBAAuB;EAE1DE,QAAQ,CAACG,EAAE,CAAC,CAAE,cAAc,EAAE,mBAAmB,CAAE,EAAEF,cAAc,EAAE,UAASG,GAAG,EAAEC,OAAO,EAAE;IAC1F,IAAIC,IAAI,GAAGF,GAAG,CAACE,IAAI;MACfC,OAAO,GAAGF,OAAO,CAACE,OAAO;MACzBC,OAAO,GAAGH,OAAO,CAACI,GAAG;MACrBC,KAAK,GAAGL,OAAO,CAACK,KAAK;IAEzB,IAAIR,IAAI,CAACS,SAAS,CAACJ,OAAO,CAAC,EAAE;MAC3B,IAAID,IAAI,KAAK,cAAc,EAAE;QAC3B,OAAOJ,IAAI,CAACU,SAAS,CAACJ,OAAO,EAAED,OAAO,EAAEG,KAAK,CAAC;MAChD,CAAC,MAAM;QACL,OAAOR,IAAI,CAACW,cAAc,CAACL,OAAO,EAAED,OAAO,EAAEG,KAAK,CAAC;MACrD;IACF;EACF,CAAC,CAAC;EAEFV,QAAQ,CAACG,EAAE,CAAC,CAAE,qBAAqB,EAAE,0BAA0B,CAAE,EAAEF,cAAc,EAAE,UAASG,GAAG,EAAEG,OAAO,EAAE;IACxG,IAAIL,IAAI,CAACS,SAAS,CAACJ,OAAO,CAAC,EAAE;MAC3B,IAAIH,GAAG,CAACE,IAAI,KAAK,qBAAqB,EAAE;QACtC,OAAOJ,IAAI,CAACY,YAAY,CAACP,OAAO,CAAC;MACnC,CAAC,MAAM;QACL,OAAOL,IAAI,CAACa,iBAAiB,CAACR,OAAO,CAAC;MACxC;IACF;EACF,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,YAAY,CAACiB,SAAS,CAACL,SAAS,GAAG,UAASJ,OAAO,EAAE,CAAC,CAAC;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,YAAY,CAACiB,SAAS,CAACJ,SAAS,GAAG,UAASJ,OAAO,EAAES,KAAK,EAAE,CAAC,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlB,YAAY,CAACiB,SAAS,CAACH,cAAc,GAAG,UAASL,OAAO,EAAEU,UAAU,EAAE,CAAC,CAAC;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACAnB,YAAY,CAACiB,SAAS,CAACF,YAAY,GAAG,UAASG,KAAK,EAAE,CAAC,CAAC;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACAlB,YAAY,CAACiB,SAAS,CAACD,iBAAiB,GAAG,UAASG,UAAU,EAAE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}