{"ast":null,"code":"import { assign } from 'min-dash';\nimport { getElementLineIntersection } from './LayoutUtil';\n\n/**\n * @typedef {import('../core/ElementRegistry').default} ElementRegistry\n * @typedef {import('../core/GraphicsFactory').default} GraphicsFactory\n */\n\nfunction dockingToPoint(docking) {\n  // use the dockings actual point and\n  // retain the original docking\n  return assign({\n    original: docking.point.original || docking.point\n  }, docking.actual);\n}\n\n/**\n * A {@link ConnectionDocking} that crops connection waypoints based on\n * the path(s) of the connection source and target.\n *\n * @param {ElementRegistry} elementRegistry\n * @param {GraphicsFactory} graphicsFactory\n */\nexport default function CroppingConnectionDocking(elementRegistry, graphicsFactory) {\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n}\nCroppingConnectionDocking.$inject = ['elementRegistry', 'graphicsFactory'];\n\n/**\n * @inheritDoc ConnectionDocking#getCroppedWaypoints\n */\nCroppingConnectionDocking.prototype.getCroppedWaypoints = function (connection, source, target) {\n  source = source || connection.source;\n  target = target || connection.target;\n  var sourceDocking = this.getDockingPoint(connection, source, true),\n    targetDocking = this.getDockingPoint(connection, target);\n  var croppedWaypoints = connection.waypoints.slice(sourceDocking.idx + 1, targetDocking.idx);\n  croppedWaypoints.unshift(dockingToPoint(sourceDocking));\n  croppedWaypoints.push(dockingToPoint(targetDocking));\n  return croppedWaypoints;\n};\n\n/**\n * Return the connection docking point on the specified shape\n *\n * @inheritDoc ConnectionDocking#getDockingPoint\n */\nCroppingConnectionDocking.prototype.getDockingPoint = function (connection, shape, dockStart) {\n  var waypoints = connection.waypoints,\n    dockingIdx,\n    dockingPoint,\n    croppedPoint;\n  dockingIdx = dockStart ? 0 : waypoints.length - 1;\n  dockingPoint = waypoints[dockingIdx];\n  croppedPoint = this._getIntersection(shape, connection, dockStart);\n  return {\n    point: dockingPoint,\n    actual: croppedPoint || dockingPoint,\n    idx: dockingIdx\n  };\n};\n\n// helpers //////////////////////\n\nCroppingConnectionDocking.prototype._getIntersection = function (shape, connection, takeFirst) {\n  var shapePath = this._getShapePath(shape),\n    connectionPath = this._getConnectionPath(connection);\n  return getElementLineIntersection(shapePath, connectionPath, takeFirst);\n};\nCroppingConnectionDocking.prototype._getConnectionPath = function (connection) {\n  return this._graphicsFactory.getConnectionPath(connection);\n};\nCroppingConnectionDocking.prototype._getShapePath = function (shape) {\n  return this._graphicsFactory.getShapePath(shape);\n};\nCroppingConnectionDocking.prototype._getGfx = function (element) {\n  return this._elementRegistry.getGraphics(element);\n};","map":{"version":3,"names":["assign","getElementLineIntersection","dockingToPoint","docking","original","point","actual","CroppingConnectionDocking","elementRegistry","graphicsFactory","_elementRegistry","_graphicsFactory","$inject","prototype","getCroppedWaypoints","connection","source","target","sourceDocking","getDockingPoint","targetDocking","croppedWaypoints","waypoints","slice","idx","unshift","push","shape","dockStart","dockingIdx","dockingPoint","croppedPoint","length","_getIntersection","takeFirst","shapePath","_getShapePath","connectionPath","_getConnectionPath","getConnectionPath","getShapePath","_getGfx","element","getGraphics"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/layout/CroppingConnectionDocking.js"],"sourcesContent":["import {\n  assign\n} from 'min-dash';\n\nimport {\n  getElementLineIntersection\n} from './LayoutUtil';\n\n/**\n * @typedef {import('../core/ElementRegistry').default} ElementRegistry\n * @typedef {import('../core/GraphicsFactory').default} GraphicsFactory\n */\n\nfunction dockingToPoint(docking) {\n\n  // use the dockings actual point and\n  // retain the original docking\n  return assign({ original: docking.point.original || docking.point }, docking.actual);\n}\n\n\n/**\n * A {@link ConnectionDocking} that crops connection waypoints based on\n * the path(s) of the connection source and target.\n *\n * @param {ElementRegistry} elementRegistry\n * @param {GraphicsFactory} graphicsFactory\n */\nexport default function CroppingConnectionDocking(elementRegistry, graphicsFactory) {\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n}\n\nCroppingConnectionDocking.$inject = [ 'elementRegistry', 'graphicsFactory' ];\n\n\n/**\n * @inheritDoc ConnectionDocking#getCroppedWaypoints\n */\nCroppingConnectionDocking.prototype.getCroppedWaypoints = function(connection, source, target) {\n\n  source = source || connection.source;\n  target = target || connection.target;\n\n  var sourceDocking = this.getDockingPoint(connection, source, true),\n      targetDocking = this.getDockingPoint(connection, target);\n\n  var croppedWaypoints = connection.waypoints.slice(sourceDocking.idx + 1, targetDocking.idx);\n\n  croppedWaypoints.unshift(dockingToPoint(sourceDocking));\n  croppedWaypoints.push(dockingToPoint(targetDocking));\n\n  return croppedWaypoints;\n};\n\n/**\n * Return the connection docking point on the specified shape\n *\n * @inheritDoc ConnectionDocking#getDockingPoint\n */\nCroppingConnectionDocking.prototype.getDockingPoint = function(connection, shape, dockStart) {\n\n  var waypoints = connection.waypoints,\n      dockingIdx,\n      dockingPoint,\n      croppedPoint;\n\n  dockingIdx = dockStart ? 0 : waypoints.length - 1;\n  dockingPoint = waypoints[dockingIdx];\n\n  croppedPoint = this._getIntersection(shape, connection, dockStart);\n\n  return {\n    point: dockingPoint,\n    actual: croppedPoint || dockingPoint,\n    idx: dockingIdx\n  };\n};\n\n\n// helpers //////////////////////\n\nCroppingConnectionDocking.prototype._getIntersection = function(shape, connection, takeFirst) {\n\n  var shapePath = this._getShapePath(shape),\n      connectionPath = this._getConnectionPath(connection);\n\n  return getElementLineIntersection(shapePath, connectionPath, takeFirst);\n};\n\nCroppingConnectionDocking.prototype._getConnectionPath = function(connection) {\n  return this._graphicsFactory.getConnectionPath(connection);\n};\n\nCroppingConnectionDocking.prototype._getShapePath = function(shape) {\n  return this._graphicsFactory.getShapePath(shape);\n};\n\nCroppingConnectionDocking.prototype._getGfx = function(element) {\n  return this._elementRegistry.getGraphics(element);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}