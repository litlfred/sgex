{"ast":null,"code":"import IdGenerator from '../../util/IdGenerator';\nconst Ids = new IdGenerator();\n\n/**\n * @typedef { {\n *   promise: Promise<unknown>,\n *   executionId: number\n * } } ScheduledTask\n */\n\n/**\n * A utility that allows you to schedule async tasks.\n *\n * @class\n * @constructor\n *\n * @param { import('../core/EventBus').default } eventBus\n */\nexport default function Scheduler(eventBus) {\n  /**\n   * @type { Record<string, ScheduledTask> }\n   */\n  this._scheduled = {};\n  eventBus.on('diagram.destroy', () => {\n    Object.keys(this._scheduled).forEach(id => {\n      this.cancel(id);\n    });\n  });\n}\nScheduler.$inject = ['eventBus'];\n\n/**\n * Schedule execution of a task in the next tick.\n *\n * Call with an id to ensure only the latest call will be executed.\n *\n * @template T\n\n * @param {(...args: any[]) => T} taskFn function to be executed\n * @param {string} [id] identifying the task to ensure uniqueness\n *\n * @return Promise<T> result of the executed task\n */\nScheduler.prototype.schedule = function (taskFn) {\n  let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Ids.next();\n  this.cancel(id);\n  const newScheduled = this._schedule(taskFn, id);\n  this._scheduled[id] = newScheduled;\n  return newScheduled.promise;\n};\nScheduler.prototype._schedule = function (taskFn, id) {\n  const deferred = defer();\n  const executionId = setTimeout(() => {\n    try {\n      this._scheduled[id] = null;\n      try {\n        deferred.resolve(taskFn());\n      } catch (error) {\n        deferred.reject(error);\n      }\n    } catch (error) {\n      console.error('Scheduler#_schedule execution failed', error);\n    }\n  });\n  return {\n    executionId,\n    promise: deferred.promise\n  };\n};\n\n/**\n * Cancel a previously scheduled task.\n *\n * @param {string} id\n */\nScheduler.prototype.cancel = function (id) {\n  const scheduled = this._scheduled[id];\n  if (scheduled) {\n    this._cancel(scheduled);\n    this._scheduled[id] = null;\n  }\n};\nScheduler.prototype._cancel = function (scheduled) {\n  clearTimeout(scheduled.executionId);\n};\n\n/**\n * @return { {\n *   promise: Promise,\n *   resolve: Function,\n *   reject: Function\n * } }\n */\nfunction defer() {\n  const deferred = {};\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}","map":{"version":3,"names":["IdGenerator","Ids","Scheduler","eventBus","_scheduled","on","Object","keys","forEach","id","cancel","$inject","prototype","schedule","taskFn","arguments","length","undefined","next","newScheduled","_schedule","promise","deferred","defer","executionId","setTimeout","resolve","error","reject","console","scheduled","_cancel","clearTimeout","Promise"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/scheduler/Scheduler.js"],"sourcesContent":["import IdGenerator from '../../util/IdGenerator';\n\nconst Ids = new IdGenerator();\n\n\n/**\n * @typedef { {\n *   promise: Promise<unknown>,\n *   executionId: number\n * } } ScheduledTask\n */\n\n/**\n * A utility that allows you to schedule async tasks.\n *\n * @class\n * @constructor\n *\n * @param { import('../core/EventBus').default } eventBus\n */\nexport default function Scheduler(eventBus) {\n\n  /**\n   * @type { Record<string, ScheduledTask> }\n   */\n  this._scheduled = {};\n\n  eventBus.on('diagram.destroy', () => {\n    Object.keys(this._scheduled).forEach(id => {\n      this.cancel(id);\n    });\n  });\n}\n\nScheduler.$inject = [ 'eventBus' ];\n\n/**\n * Schedule execution of a task in the next tick.\n *\n * Call with an id to ensure only the latest call will be executed.\n *\n * @template T\n\n * @param {(...args: any[]) => T} taskFn function to be executed\n * @param {string} [id] identifying the task to ensure uniqueness\n *\n * @return Promise<T> result of the executed task\n */\nScheduler.prototype.schedule = function(taskFn, id = Ids.next()) {\n\n  this.cancel(id);\n\n  const newScheduled = this._schedule(taskFn, id);\n\n  this._scheduled[id] = newScheduled;\n\n  return newScheduled.promise;\n};\n\nScheduler.prototype._schedule = function(taskFn, id) {\n\n  const deferred = defer();\n\n  const executionId = setTimeout(() => {\n\n    try {\n      this._scheduled[id] = null;\n\n      try {\n        deferred.resolve(taskFn());\n      } catch (error) {\n        deferred.reject(error);\n      }\n    } catch (error) {\n      console.error('Scheduler#_schedule execution failed', error);\n    }\n  });\n\n  return {\n    executionId,\n    promise: deferred.promise\n  };\n};\n\n/**\n * Cancel a previously scheduled task.\n *\n * @param {string} id\n */\nScheduler.prototype.cancel = function(id) {\n\n  const scheduled = this._scheduled[id];\n\n  if (scheduled) {\n    this._cancel(scheduled);\n\n    this._scheduled[id] = null;\n  }\n};\n\nScheduler.prototype._cancel = function(scheduled) {\n  clearTimeout(scheduled.executionId);\n};\n\n/**\n * @return { {\n *   promise: Promise,\n *   resolve: Function,\n *   reject: Function\n * } }\n */\nfunction defer() {\n\n  const deferred = {};\n\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n\n  return deferred;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}