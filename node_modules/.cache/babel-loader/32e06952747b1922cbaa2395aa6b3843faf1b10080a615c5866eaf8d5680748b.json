{"ast":null,"code":"/**\n * Repository Cache Service\n * Manages caching of discovered SMART Guidelines repositories with expiry\n */import logger from'../utils/logger';class RepositoryCacheService{constructor(){this.CACHE_KEY_PREFIX='sgex_repo_cache_';this.CACHE_EXPIRY_HOURS=24;// Cache expires after 24 hours\nthis.logger=logger.getLogger('RepositoryCacheService');this.logger.debug('RepositoryCacheService initialized',{cacheExpiryHours:this.CACHE_EXPIRY_HOURS});}/**\n   * Generate cache key for a user/organization\n   */getCacheKey(owner){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'user';return`${this.CACHE_KEY_PREFIX}${type}_${owner}`;}/**\n   * Check if cached data is stale (older than 24 hours)\n   */isStale(timestamp){const now=Date.now();const cacheAge=now-timestamp;const maxAge=this.CACHE_EXPIRY_HOURS*60*60*1000;// 24 hours in milliseconds\nreturn cacheAge>maxAge;}/**\n   * Get cached repositories for a user/organization\n   * Returns null if cache doesn't exist or is stale\n   */getCachedRepositories(owner){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'user';try{var _parsed$repositories;const cacheKey=this.getCacheKey(owner,type);this.logger.cache('get',cacheKey);const cachedData=localStorage.getItem(cacheKey);if(!cachedData){this.logger.cache('miss',cacheKey,'No cached data found');return null;}const parsed=JSON.parse(cachedData);// Check if cache is stale\nif(this.isStale(parsed.timestamp)){// Remove stale cache\nthis.logger.cache('expired',cacheKey,{age:Date.now()-parsed.timestamp});localStorage.removeItem(cacheKey);return null;}this.logger.cache('hit',cacheKey,{repositoryCount:((_parsed$repositories=parsed.repositories)===null||_parsed$repositories===void 0?void 0:_parsed$repositories.length)||0,age:Date.now()-parsed.timestamp});return{repositories:parsed.repositories,timestamp:parsed.timestamp,owner:parsed.owner,type:parsed.type};}catch(error){const cacheKey=this.getCacheKey(owner,type);this.logger.error('Error reading repository cache',{cacheKey,error:error.message});console.warn('Error reading repository cache:',error);return null;}}/**\n   * Cache repositories for a user/organization\n   */setCachedRepositories(owner){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'user';let repositories=arguments.length>2?arguments[2]:undefined;try{const cacheKey=this.getCacheKey(owner,type);const cacheData={repositories,timestamp:Date.now(),owner,type};this.logger.cache('set',cacheKey,{repositoryCount:(repositories===null||repositories===void 0?void 0:repositories.length)||0,owner,type});localStorage.setItem(cacheKey,JSON.stringify(cacheData));return true;}catch(error){const cacheKey=this.getCacheKey(owner,type);this.logger.error('Error caching repositories',{cacheKey,error:error.message});console.warn('Error caching repositories:',error);return false;}}/**\n   * Clear cache for a specific user/organization\n   */clearCache(owner){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'user';try{const cacheKey=this.getCacheKey(owner,type);this.logger.cache('clear',cacheKey,{owner,type});localStorage.removeItem(cacheKey);return true;}catch(error){const cacheKey=this.getCacheKey(owner,type);this.logger.error('Error clearing repository cache',{cacheKey,error:error.message});console.warn('Error clearing repository cache:',error);return false;}}/**\n   * Clear all repository caches\n   */clearAllCaches(){try{const keys=Object.keys(localStorage);keys.forEach(key=>{if(key.startsWith(this.CACHE_KEY_PREFIX)){localStorage.removeItem(key);}});return true;}catch(error){console.warn('Error clearing all repository caches:',error);return false;}}/**\n   * Get cache info for debugging\n   */getCacheInfo(owner){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'user';const cached=this.getCachedRepositories(owner,type);if(!cached){return{exists:false,stale:true};}const age=Date.now()-cached.timestamp;const ageHours=Math.round(age/(60*60*1000));return{exists:true,stale:this.isStale(cached.timestamp),age:age,ageHours:ageHours,repositoryCount:cached.repositories.length,timestamp:new Date(cached.timestamp).toISOString()};}}// Create singleton instance\nconst repositoryCacheService=new RepositoryCacheService();export default repositoryCacheService;","map":{"version":3,"names":["logger","RepositoryCacheService","constructor","CACHE_KEY_PREFIX","CACHE_EXPIRY_HOURS","getLogger","debug","cacheExpiryHours","getCacheKey","owner","type","arguments","length","undefined","isStale","timestamp","now","Date","cacheAge","maxAge","getCachedRepositories","_parsed$repositories","cacheKey","cache","cachedData","localStorage","getItem","parsed","JSON","parse","age","removeItem","repositoryCount","repositories","error","message","console","warn","setCachedRepositories","cacheData","setItem","stringify","clearCache","clearAllCaches","keys","Object","forEach","key","startsWith","getCacheInfo","cached","exists","stale","ageHours","Math","round","toISOString","repositoryCacheService"],"sources":["/home/runner/work/sgex/sgex/src/services/repositoryCacheService.js"],"sourcesContent":["/**\n * Repository Cache Service\n * Manages caching of discovered SMART Guidelines repositories with expiry\n */\n\nimport logger from '../utils/logger';\n\nclass RepositoryCacheService {\n  constructor() {\n    this.CACHE_KEY_PREFIX = 'sgex_repo_cache_';\n    this.CACHE_EXPIRY_HOURS = 24; // Cache expires after 24 hours\n    this.logger = logger.getLogger('RepositoryCacheService');\n    this.logger.debug('RepositoryCacheService initialized', { \n      cacheExpiryHours: this.CACHE_EXPIRY_HOURS \n    });\n  }\n\n  /**\n   * Generate cache key for a user/organization\n   */\n  getCacheKey(owner, type = 'user') {\n    return `${this.CACHE_KEY_PREFIX}${type}_${owner}`;\n  }\n\n  /**\n   * Check if cached data is stale (older than 24 hours)\n   */\n  isStale(timestamp) {\n    const now = Date.now();\n    const cacheAge = now - timestamp;\n    const maxAge = this.CACHE_EXPIRY_HOURS * 60 * 60 * 1000; // 24 hours in milliseconds\n    return cacheAge > maxAge;\n  }\n\n  /**\n   * Get cached repositories for a user/organization\n   * Returns null if cache doesn't exist or is stale\n   */\n  getCachedRepositories(owner, type = 'user') {\n    try {\n      const cacheKey = this.getCacheKey(owner, type);\n      this.logger.cache('get', cacheKey);\n      \n      const cachedData = localStorage.getItem(cacheKey);\n      \n      if (!cachedData) {\n        this.logger.cache('miss', cacheKey, 'No cached data found');\n        return null;\n      }\n\n      const parsed = JSON.parse(cachedData);\n      \n      // Check if cache is stale\n      if (this.isStale(parsed.timestamp)) {\n        // Remove stale cache\n        this.logger.cache('expired', cacheKey, { age: Date.now() - parsed.timestamp });\n        localStorage.removeItem(cacheKey);\n        return null;\n      }\n\n      this.logger.cache('hit', cacheKey, { \n        repositoryCount: parsed.repositories?.length || 0,\n        age: Date.now() - parsed.timestamp\n      });\n\n      return {\n        repositories: parsed.repositories,\n        timestamp: parsed.timestamp,\n        owner: parsed.owner,\n        type: parsed.type\n      };\n    } catch (error) {\n      const cacheKey = this.getCacheKey(owner, type);\n      this.logger.error('Error reading repository cache', { cacheKey, error: error.message });\n      console.warn('Error reading repository cache:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Cache repositories for a user/organization\n   */\n  setCachedRepositories(owner, type = 'user', repositories) {\n    try {\n      const cacheKey = this.getCacheKey(owner, type);\n      const cacheData = {\n        repositories,\n        timestamp: Date.now(),\n        owner,\n        type\n      };\n\n      this.logger.cache('set', cacheKey, { \n        repositoryCount: repositories?.length || 0,\n        owner, \n        type \n      });\n\n      localStorage.setItem(cacheKey, JSON.stringify(cacheData));\n      return true;\n    } catch (error) {\n      const cacheKey = this.getCacheKey(owner, type);\n      this.logger.error('Error caching repositories', { cacheKey, error: error.message });\n      console.warn('Error caching repositories:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear cache for a specific user/organization\n   */\n  clearCache(owner, type = 'user') {\n    try {\n      const cacheKey = this.getCacheKey(owner, type);\n      this.logger.cache('clear', cacheKey, { owner, type });\n      localStorage.removeItem(cacheKey);\n      return true;\n    } catch (error) {\n      const cacheKey = this.getCacheKey(owner, type);\n      this.logger.error('Error clearing repository cache', { cacheKey, error: error.message });\n      console.warn('Error clearing repository cache:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all repository caches\n   */\n  clearAllCaches() {\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith(this.CACHE_KEY_PREFIX)) {\n          localStorage.removeItem(key);\n        }\n      });\n      return true;\n    } catch (error) {\n      console.warn('Error clearing all repository caches:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get cache info for debugging\n   */\n  getCacheInfo(owner, type = 'user') {\n    const cached = this.getCachedRepositories(owner, type);\n    if (!cached) {\n      return { exists: false, stale: true };\n    }\n\n    const age = Date.now() - cached.timestamp;\n    const ageHours = Math.round(age / (60 * 60 * 1000));\n    \n    return {\n      exists: true,\n      stale: this.isStale(cached.timestamp),\n      age: age,\n      ageHours: ageHours,\n      repositoryCount: cached.repositories.length,\n      timestamp: new Date(cached.timestamp).toISOString()\n    };\n  }\n}\n\n// Create singleton instance\nconst repositoryCacheService = new RepositoryCacheService();\n\nexport default repositoryCacheService;"],"mappings":"AAAA;AACA;AACA;AACA,GAEA,MAAO,CAAAA,MAAM,KAAM,iBAAiB,CAEpC,KAAM,CAAAC,sBAAuB,CAC3BC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,gBAAgB,CAAG,kBAAkB,CAC1C,IAAI,CAACC,kBAAkB,CAAG,EAAE,CAAE;AAC9B,IAAI,CAACJ,MAAM,CAAGA,MAAM,CAACK,SAAS,CAAC,wBAAwB,CAAC,CACxD,IAAI,CAACL,MAAM,CAACM,KAAK,CAAC,oCAAoC,CAAE,CACtDC,gBAAgB,CAAE,IAAI,CAACH,kBACzB,CAAC,CAAC,CACJ,CAEA;AACF;AACA,KACEI,WAAWA,CAACC,KAAK,CAAiB,IAAf,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,MAAM,CAC9B,MAAO,GAAG,IAAI,CAACR,gBAAgB,GAAGO,IAAI,IAAID,KAAK,EAAE,CACnD,CAEA;AACF;AACA,KACEK,OAAOA,CAACC,SAAS,CAAE,CACjB,KAAM,CAAAC,GAAG,CAAGC,IAAI,CAACD,GAAG,CAAC,CAAC,CACtB,KAAM,CAAAE,QAAQ,CAAGF,GAAG,CAAGD,SAAS,CAChC,KAAM,CAAAI,MAAM,CAAG,IAAI,CAACf,kBAAkB,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAE;AACzD,MAAO,CAAAc,QAAQ,CAAGC,MAAM,CAC1B,CAEA;AACF;AACA;AACA,KACEC,qBAAqBA,CAACX,KAAK,CAAiB,IAAf,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,MAAM,CACxC,GAAI,KAAAU,oBAAA,CACF,KAAM,CAAAC,QAAQ,CAAG,IAAI,CAACd,WAAW,CAACC,KAAK,CAAEC,IAAI,CAAC,CAC9C,IAAI,CAACV,MAAM,CAACuB,KAAK,CAAC,KAAK,CAAED,QAAQ,CAAC,CAElC,KAAM,CAAAE,UAAU,CAAGC,YAAY,CAACC,OAAO,CAACJ,QAAQ,CAAC,CAEjD,GAAI,CAACE,UAAU,CAAE,CACf,IAAI,CAACxB,MAAM,CAACuB,KAAK,CAAC,MAAM,CAAED,QAAQ,CAAE,sBAAsB,CAAC,CAC3D,MAAO,KAAI,CACb,CAEA,KAAM,CAAAK,MAAM,CAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,CAErC;AACA,GAAI,IAAI,CAACV,OAAO,CAACa,MAAM,CAACZ,SAAS,CAAC,CAAE,CAClC;AACA,IAAI,CAACf,MAAM,CAACuB,KAAK,CAAC,SAAS,CAAED,QAAQ,CAAE,CAAEQ,GAAG,CAAEb,IAAI,CAACD,GAAG,CAAC,CAAC,CAAGW,MAAM,CAACZ,SAAU,CAAC,CAAC,CAC9EU,YAAY,CAACM,UAAU,CAACT,QAAQ,CAAC,CACjC,MAAO,KAAI,CACb,CAEA,IAAI,CAACtB,MAAM,CAACuB,KAAK,CAAC,KAAK,CAAED,QAAQ,CAAE,CACjCU,eAAe,CAAE,EAAAX,oBAAA,CAAAM,MAAM,CAACM,YAAY,UAAAZ,oBAAA,iBAAnBA,oBAAA,CAAqBT,MAAM,GAAI,CAAC,CACjDkB,GAAG,CAAEb,IAAI,CAACD,GAAG,CAAC,CAAC,CAAGW,MAAM,CAACZ,SAC3B,CAAC,CAAC,CAEF,MAAO,CACLkB,YAAY,CAAEN,MAAM,CAACM,YAAY,CACjClB,SAAS,CAAEY,MAAM,CAACZ,SAAS,CAC3BN,KAAK,CAAEkB,MAAM,CAAClB,KAAK,CACnBC,IAAI,CAAEiB,MAAM,CAACjB,IACf,CAAC,CACH,CAAE,MAAOwB,KAAK,CAAE,CACd,KAAM,CAAAZ,QAAQ,CAAG,IAAI,CAACd,WAAW,CAACC,KAAK,CAAEC,IAAI,CAAC,CAC9C,IAAI,CAACV,MAAM,CAACkC,KAAK,CAAC,gCAAgC,CAAE,CAAEZ,QAAQ,CAAEY,KAAK,CAAEA,KAAK,CAACC,OAAQ,CAAC,CAAC,CACvFC,OAAO,CAACC,IAAI,CAAC,iCAAiC,CAAEH,KAAK,CAAC,CACtD,MAAO,KAAI,CACb,CACF,CAEA;AACF;AACA,KACEI,qBAAqBA,CAAC7B,KAAK,CAA+B,IAA7B,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,MAAM,IAAE,CAAAsB,YAAY,CAAAtB,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,CACtD,GAAI,CACF,KAAM,CAAAS,QAAQ,CAAG,IAAI,CAACd,WAAW,CAACC,KAAK,CAAEC,IAAI,CAAC,CAC9C,KAAM,CAAA6B,SAAS,CAAG,CAChBN,YAAY,CACZlB,SAAS,CAAEE,IAAI,CAACD,GAAG,CAAC,CAAC,CACrBP,KAAK,CACLC,IACF,CAAC,CAED,IAAI,CAACV,MAAM,CAACuB,KAAK,CAAC,KAAK,CAAED,QAAQ,CAAE,CACjCU,eAAe,CAAE,CAAAC,YAAY,SAAZA,YAAY,iBAAZA,YAAY,CAAErB,MAAM,GAAI,CAAC,CAC1CH,KAAK,CACLC,IACF,CAAC,CAAC,CAEFe,YAAY,CAACe,OAAO,CAAClB,QAAQ,CAAEM,IAAI,CAACa,SAAS,CAACF,SAAS,CAAC,CAAC,CACzD,MAAO,KAAI,CACb,CAAE,MAAOL,KAAK,CAAE,CACd,KAAM,CAAAZ,QAAQ,CAAG,IAAI,CAACd,WAAW,CAACC,KAAK,CAAEC,IAAI,CAAC,CAC9C,IAAI,CAACV,MAAM,CAACkC,KAAK,CAAC,4BAA4B,CAAE,CAAEZ,QAAQ,CAAEY,KAAK,CAAEA,KAAK,CAACC,OAAQ,CAAC,CAAC,CACnFC,OAAO,CAACC,IAAI,CAAC,6BAA6B,CAAEH,KAAK,CAAC,CAClD,MAAO,MAAK,CACd,CACF,CAEA;AACF;AACA,KACEQ,UAAUA,CAACjC,KAAK,CAAiB,IAAf,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,MAAM,CAC7B,GAAI,CACF,KAAM,CAAAW,QAAQ,CAAG,IAAI,CAACd,WAAW,CAACC,KAAK,CAAEC,IAAI,CAAC,CAC9C,IAAI,CAACV,MAAM,CAACuB,KAAK,CAAC,OAAO,CAAED,QAAQ,CAAE,CAAEb,KAAK,CAAEC,IAAK,CAAC,CAAC,CACrDe,YAAY,CAACM,UAAU,CAACT,QAAQ,CAAC,CACjC,MAAO,KAAI,CACb,CAAE,MAAOY,KAAK,CAAE,CACd,KAAM,CAAAZ,QAAQ,CAAG,IAAI,CAACd,WAAW,CAACC,KAAK,CAAEC,IAAI,CAAC,CAC9C,IAAI,CAACV,MAAM,CAACkC,KAAK,CAAC,iCAAiC,CAAE,CAAEZ,QAAQ,CAAEY,KAAK,CAAEA,KAAK,CAACC,OAAQ,CAAC,CAAC,CACxFC,OAAO,CAACC,IAAI,CAAC,kCAAkC,CAAEH,KAAK,CAAC,CACvD,MAAO,MAAK,CACd,CACF,CAEA;AACF;AACA,KACES,cAAcA,CAAA,CAAG,CACf,GAAI,CACF,KAAM,CAAAC,IAAI,CAAGC,MAAM,CAACD,IAAI,CAACnB,YAAY,CAAC,CACtCmB,IAAI,CAACE,OAAO,CAACC,GAAG,EAAI,CAClB,GAAIA,GAAG,CAACC,UAAU,CAAC,IAAI,CAAC7C,gBAAgB,CAAC,CAAE,CACzCsB,YAAY,CAACM,UAAU,CAACgB,GAAG,CAAC,CAC9B,CACF,CAAC,CAAC,CACF,MAAO,KAAI,CACb,CAAE,MAAOb,KAAK,CAAE,CACdE,OAAO,CAACC,IAAI,CAAC,uCAAuC,CAAEH,KAAK,CAAC,CAC5D,MAAO,MAAK,CACd,CACF,CAEA;AACF;AACA,KACEe,YAAYA,CAACxC,KAAK,CAAiB,IAAf,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,MAAM,CAC/B,KAAM,CAAAuC,MAAM,CAAG,IAAI,CAAC9B,qBAAqB,CAACX,KAAK,CAAEC,IAAI,CAAC,CACtD,GAAI,CAACwC,MAAM,CAAE,CACX,MAAO,CAAEC,MAAM,CAAE,KAAK,CAAEC,KAAK,CAAE,IAAK,CAAC,CACvC,CAEA,KAAM,CAAAtB,GAAG,CAAGb,IAAI,CAACD,GAAG,CAAC,CAAC,CAAGkC,MAAM,CAACnC,SAAS,CACzC,KAAM,CAAAsC,QAAQ,CAAGC,IAAI,CAACC,KAAK,CAACzB,GAAG,EAAI,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAAC,CAEnD,MAAO,CACLqB,MAAM,CAAE,IAAI,CACZC,KAAK,CAAE,IAAI,CAACtC,OAAO,CAACoC,MAAM,CAACnC,SAAS,CAAC,CACrCe,GAAG,CAAEA,GAAG,CACRuB,QAAQ,CAAEA,QAAQ,CAClBrB,eAAe,CAAEkB,MAAM,CAACjB,YAAY,CAACrB,MAAM,CAC3CG,SAAS,CAAE,GAAI,CAAAE,IAAI,CAACiC,MAAM,CAACnC,SAAS,CAAC,CAACyC,WAAW,CAAC,CACpD,CAAC,CACH,CACF,CAEA;AACA,KAAM,CAAAC,sBAAsB,CAAG,GAAI,CAAAxD,sBAAsB,CAAC,CAAC,CAE3D,cAAe,CAAAwD,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}