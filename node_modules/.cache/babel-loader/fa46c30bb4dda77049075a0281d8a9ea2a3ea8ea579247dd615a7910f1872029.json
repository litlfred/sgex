{"ast":null,"code":"import{useState,useCallback,useEffect}from'react';import githubService from'../../services/githubService';import localStorageService from'../../services/localStorageService';/**\n * Hook for managing asset editor save state and operations\n * Provides consistent save functionality for asset editors\n */export const useAssetSave=_ref=>{let{file,repository,branch,content,originalContent,isDemo=false,onSave}=_ref;// Save states\nconst[isSavingLocal,setIsSavingLocal]=useState(false);const[isSavingGitHub,setIsSavingGitHub]=useState(false);const[saveError,setSaveError]=useState(null);const[savedLocally,setSavedLocally]=useState(false);const[localSaveSuccess,setLocalSaveSuccess]=useState(false);const[githubSaveSuccess,setGithubSaveSuccess]=useState(false);// Derived states\nconst hasChanges=content!==originalContent;const canSaveToGitHub=githubService.isAuth()&&!isDemo;// Check if there's a local version of this file\nuseEffect(()=>{if(file!==null&&file!==void 0&&file.path){const localContent=localStorageService.getLocalContent(file.path);if(localContent&&localContent!==originalContent){setSavedLocally(true);}else{setSavedLocally(false);}}},[file===null||file===void 0?void 0:file.path,originalContent]);// Reset success states when content changes\nuseEffect(()=>{if(hasChanges){setLocalSaveSuccess(false);setGithubSaveSuccess(false);setSaveError(null);}},[hasChanges]);// Handle local save\nconst saveLocal=useCallback(async()=>{if(!hasChanges||!(file!==null&&file!==void 0&&file.path))return false;try{var _repository$owner;setIsSavingLocal(true);setSaveError(null);setLocalSaveSuccess(false);// Save to local storage\nconst metadata={repository:(repository===null||repository===void 0?void 0:repository.full_name)||\"\".concat(repository===null||repository===void 0?void 0:(_repository$owner=repository.owner)===null||_repository$owner===void 0?void 0:_repository$owner.login,\"/\").concat(repository===null||repository===void 0?void 0:repository.name),branch:branch||(repository===null||repository===void 0?void 0:repository.default_branch)||'main',fileName:file.name,timestamp:new Date().toISOString()};const saved=localStorageService.saveLocal(file.path,content,metadata);if(saved){setSavedLocally(true);setLocalSaveSuccess(true);onSave&&onSave(content,'local');// Auto-hide success message after 3 seconds\nsetTimeout(()=>{setLocalSaveSuccess(false);},3000);return true;}else{throw new Error('Failed to save to local storage');}}catch(error){console.error('Error saving file locally:',error);setSaveError(\"Failed to save locally: \".concat(error.message));return false;}finally{setIsSavingLocal(false);}},[hasChanges,file,content,repository,branch,onSave]);// Handle GitHub save with commit message\nconst saveToGitHub=useCallback(async commitMessage=>{if(!(commitMessage!==null&&commitMessage!==void 0&&commitMessage.trim())||!(file!==null&&file!==void 0&&file.path)||!canSaveToGitHub)return false;try{var _repository$owner2;setIsSavingGitHub(true);setSaveError(null);setGithubSaveSuccess(false);let owner,repoName;if(repository!==null&&repository!==void 0&&(_repository$owner2=repository.owner)!==null&&_repository$owner2!==void 0&&_repository$owner2.login){owner=repository.owner.login;repoName=repository.name;}else if(repository!==null&&repository!==void 0&&repository.full_name){[owner,repoName]=repository.full_name.split('/');}else{throw new Error('Repository information not available');}await githubService.updateFile(owner,repoName,file.path,content,commitMessage.trim(),branch||(repository===null||repository===void 0?void 0:repository.default_branch)||'main');setGithubSaveSuccess(true);onSave&&onSave(content,'github');// Auto-hide success message after 3 seconds\nsetTimeout(()=>{setGithubSaveSuccess(false);},3000);return true;}catch(error){console.error('Error saving file to GitHub:',error);setSaveError(\"Failed to save to GitHub: \".concat(error.message));return false;}finally{setIsSavingGitHub(false);}},[file,content,repository,branch,canSaveToGitHub,onSave]);// Load local version of file\nconst loadLocalVersion=useCallback(()=>{if(file!==null&&file!==void 0&&file.path){const localContent=localStorageService.getLocalContent(file.path);return localContent;}return null;},[file===null||file===void 0?void 0:file.path]);// Discard local version\nconst discardLocalVersion=useCallback(()=>{if(file!==null&&file!==void 0&&file.path){localStorageService.removeLocal(file.path);setSavedLocally(false);return true;}return false;},[file===null||file===void 0?void 0:file.path]);// Clear save error\nconst clearError=useCallback(()=>{setSaveError(null);},[]);// Export local changes\nconst exportLocalChanges=useCallback(()=>{try{const exportData=localStorageService.exportLocalChanges('json');const url=URL.createObjectURL(exportData);const link=document.createElement('a');link.href=url;link.download=\"sgex-local-changes-\".concat(new Date().toISOString().split('T')[0],\".json\");document.body.appendChild(link);link.click();document.body.removeChild(link);URL.revokeObjectURL(url);return true;}catch(error){console.error('Error exporting local changes:',error);setSaveError(\"Failed to export: \".concat(error.message));return false;}},[]);return{// States\nhasChanges,isSavingLocal,isSavingGitHub,saveError,savedLocally,localSaveSuccess,githubSaveSuccess,canSaveToGitHub,// Actions\nsaveLocal,saveToGitHub,loadLocalVersion,discardLocalVersion,clearError,exportLocalChanges,// Utilities\nisLoading:isSavingLocal||isSavingGitHub};};","map":{"version":3,"names":["useState","useCallback","useEffect","githubService","localStorageService","useAssetSave","_ref","file","repository","branch","content","originalContent","isDemo","onSave","isSavingLocal","setIsSavingLocal","isSavingGitHub","setIsSavingGitHub","saveError","setSaveError","savedLocally","setSavedLocally","localSaveSuccess","setLocalSaveSuccess","githubSaveSuccess","setGithubSaveSuccess","hasChanges","canSaveToGitHub","isAuth","path","localContent","getLocalContent","saveLocal","_repository$owner","metadata","full_name","concat","owner","login","name","default_branch","fileName","timestamp","Date","toISOString","saved","setTimeout","Error","error","console","message","saveToGitHub","commitMessage","trim","_repository$owner2","repoName","split","updateFile","loadLocalVersion","discardLocalVersion","removeLocal","clearError","exportLocalChanges","exportData","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","isLoading"],"sources":["/home/runner/work/sgex/sgex/src/components/framework/useAssetSave.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport githubService from '../../services/githubService';\nimport localStorageService from '../../services/localStorageService';\n\n/**\n * Hook for managing asset editor save state and operations\n * Provides consistent save functionality for asset editors\n */\nexport const useAssetSave = ({\n  file,\n  repository,\n  branch,\n  content,\n  originalContent,\n  isDemo = false,\n  onSave\n}) => {\n  // Save states\n  const [isSavingLocal, setIsSavingLocal] = useState(false);\n  const [isSavingGitHub, setIsSavingGitHub] = useState(false);\n  const [saveError, setSaveError] = useState(null);\n  const [savedLocally, setSavedLocally] = useState(false);\n  const [localSaveSuccess, setLocalSaveSuccess] = useState(false);\n  const [githubSaveSuccess, setGithubSaveSuccess] = useState(false);\n\n  // Derived states\n  const hasChanges = content !== originalContent;\n  const canSaveToGitHub = githubService.isAuth() && !isDemo;\n\n  // Check if there's a local version of this file\n  useEffect(() => {\n    if (file?.path) {\n      const localContent = localStorageService.getLocalContent(file.path);\n      if (localContent && localContent !== originalContent) {\n        setSavedLocally(true);\n      } else {\n        setSavedLocally(false);\n      }\n    }\n  }, [file?.path, originalContent]);\n\n  // Reset success states when content changes\n  useEffect(() => {\n    if (hasChanges) {\n      setLocalSaveSuccess(false);\n      setGithubSaveSuccess(false);\n      setSaveError(null);\n    }\n  }, [hasChanges]);\n\n  // Handle local save\n  const saveLocal = useCallback(async () => {\n    if (!hasChanges || !file?.path) return false;\n\n    try {\n      setIsSavingLocal(true);\n      setSaveError(null);\n      setLocalSaveSuccess(false);\n\n      // Save to local storage\n      const metadata = {\n        repository: repository?.full_name || `${repository?.owner?.login}/${repository?.name}`,\n        branch: branch || repository?.default_branch || 'main',\n        fileName: file.name,\n        timestamp: new Date().toISOString()\n      };\n\n      const saved = localStorageService.saveLocal(file.path, content, metadata);\n      \n      if (saved) {\n        setSavedLocally(true);\n        setLocalSaveSuccess(true);\n        onSave && onSave(content, 'local');\n        \n        // Auto-hide success message after 3 seconds\n        setTimeout(() => {\n          setLocalSaveSuccess(false);\n        }, 3000);\n        \n        return true;\n      } else {\n        throw new Error('Failed to save to local storage');\n      }\n\n    } catch (error) {\n      console.error('Error saving file locally:', error);\n      setSaveError(`Failed to save locally: ${error.message}`);\n      return false;\n    } finally {\n      setIsSavingLocal(false);\n    }\n  }, [hasChanges, file, content, repository, branch, onSave]);\n\n  // Handle GitHub save with commit message\n  const saveToGitHub = useCallback(async (commitMessage) => {\n    if (!commitMessage?.trim() || !file?.path || !canSaveToGitHub) return false;\n\n    try {\n      setIsSavingGitHub(true);\n      setSaveError(null);\n      setGithubSaveSuccess(false);\n\n      let owner, repoName;\n      if (repository?.owner?.login) {\n        owner = repository.owner.login;\n        repoName = repository.name;\n      } else if (repository?.full_name) {\n        [owner, repoName] = repository.full_name.split('/');\n      } else {\n        throw new Error('Repository information not available');\n      }\n\n      await githubService.updateFile(\n        owner,\n        repoName,\n        file.path,\n        content,\n        commitMessage.trim(),\n        branch || repository?.default_branch || 'main'\n      );\n\n      setGithubSaveSuccess(true);\n      onSave && onSave(content, 'github');\n      \n      // Auto-hide success message after 3 seconds\n      setTimeout(() => {\n        setGithubSaveSuccess(false);\n      }, 3000);\n      \n      return true;\n\n    } catch (error) {\n      console.error('Error saving file to GitHub:', error);\n      setSaveError(`Failed to save to GitHub: ${error.message}`);\n      return false;\n    } finally {\n      setIsSavingGitHub(false);\n    }\n  }, [file, content, repository, branch, canSaveToGitHub, onSave]);\n\n  // Load local version of file\n  const loadLocalVersion = useCallback(() => {\n    if (file?.path) {\n      const localContent = localStorageService.getLocalContent(file.path);\n      return localContent;\n    }\n    return null;\n  }, [file?.path]);\n\n  // Discard local version\n  const discardLocalVersion = useCallback(() => {\n    if (file?.path) {\n      localStorageService.removeLocal(file.path);\n      setSavedLocally(false);\n      return true;\n    }\n    return false;\n  }, [file?.path]);\n\n  // Clear save error\n  const clearError = useCallback(() => {\n    setSaveError(null);\n  }, []);\n\n  // Export local changes\n  const exportLocalChanges = useCallback(() => {\n    try {\n      const exportData = localStorageService.exportLocalChanges('json');\n      const url = URL.createObjectURL(exportData);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `sgex-local-changes-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      return true;\n    } catch (error) {\n      console.error('Error exporting local changes:', error);\n      setSaveError(`Failed to export: ${error.message}`);\n      return false;\n    }\n  }, []);\n\n  return {\n    // States\n    hasChanges,\n    isSavingLocal,\n    isSavingGitHub,\n    saveError,\n    savedLocally,\n    localSaveSuccess,\n    githubSaveSuccess,\n    canSaveToGitHub,\n    \n    // Actions\n    saveLocal,\n    saveToGitHub,\n    loadLocalVersion,\n    discardLocalVersion,\n    clearError,\n    exportLocalChanges,\n    \n    // Utilities\n    isLoading: isSavingLocal || isSavingGitHub\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}