{"ast":null,"code":"import { getNewShapePosition } from '../../auto-place/BpmnAutoPlaceUtil';\nimport { getMid } from 'diagram-js/lib/layout/LayoutUtil';\nimport { is } from '../../../util/ModelUtil';\n\n/**\r\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\r\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\r\n * @typedef {import('diagram-js/lib/features/grid-snapping/GridSnapping').default} GridSnapping\r\n *\r\n * @typedef {import('diagram-js/lib/util/Types').Axis} Axis\r\n */\n\nvar HIGH_PRIORITY = 2000;\n\n/**\r\n * @param {EventBus} eventBus\r\n * @param {GridSnapping} gridSnapping\r\n * @param {ElementRegistry} elementRegistry\r\n */\nexport default function GridSnappingAutoPlaceBehavior(eventBus, gridSnapping, elementRegistry) {\n  eventBus.on('autoPlace', HIGH_PRIORITY, function (context) {\n    var source = context.source,\n      sourceMid = getMid(source),\n      shape = context.shape;\n    var position = getNewShapePosition(source, shape, elementRegistry);\n    ['x', 'y'].forEach(function (axis) {\n      var options = {};\n\n      // do not snap if x/y equal\n      if (position[axis] === sourceMid[axis]) {\n        return;\n      }\n      if (position[axis] > sourceMid[axis]) {\n        options.min = position[axis];\n      } else {\n        options.max = position[axis];\n      }\n      if (is(shape, 'bpmn:TextAnnotation')) {\n        if (isHorizontal(axis)) {\n          options.offset = -shape.width / 2;\n        } else {\n          options.offset = -shape.height / 2;\n        }\n      }\n      position[axis] = gridSnapping.snapValue(position[axis], options);\n    });\n\n    // must be returned to be considered by auto place\n    return position;\n  });\n}\nGridSnappingAutoPlaceBehavior.$inject = ['eventBus', 'gridSnapping', 'elementRegistry'];\n\n// helpers //////////\n\n/**\r\n * @param {Axis} axis\r\n *\r\n * @return {boolean}\r\n */\nfunction isHorizontal(axis) {\n  return axis === 'x';\n}","map":{"version":3,"names":["getNewShapePosition","getMid","is","HIGH_PRIORITY","GridSnappingAutoPlaceBehavior","eventBus","gridSnapping","elementRegistry","on","context","source","sourceMid","shape","position","forEach","axis","options","min","max","isHorizontal","offset","width","height","snapValue","$inject"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/grid-snapping/behavior/GridSnappingAutoPlaceBehavior.js"],"sourcesContent":["import { getNewShapePosition } from '../../auto-place/BpmnAutoPlaceUtil';\r\n\r\nimport { getMid } from 'diagram-js/lib/layout/LayoutUtil';\r\nimport { is } from '../../../util/ModelUtil';\r\n\r\n/**\r\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\r\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\r\n * @typedef {import('diagram-js/lib/features/grid-snapping/GridSnapping').default} GridSnapping\r\n *\r\n * @typedef {import('diagram-js/lib/util/Types').Axis} Axis\r\n */\r\n\r\nvar HIGH_PRIORITY = 2000;\r\n\r\n/**\r\n * @param {EventBus} eventBus\r\n * @param {GridSnapping} gridSnapping\r\n * @param {ElementRegistry} elementRegistry\r\n */\r\nexport default function GridSnappingAutoPlaceBehavior(eventBus, gridSnapping, elementRegistry) {\r\n  eventBus.on('autoPlace', HIGH_PRIORITY, function(context) {\r\n    var source = context.source,\r\n        sourceMid = getMid(source),\r\n        shape = context.shape;\r\n\r\n    var position = getNewShapePosition(source, shape, elementRegistry);\r\n\r\n    [ 'x', 'y' ].forEach(function(axis) {\r\n      var options = {};\r\n\r\n      // do not snap if x/y equal\r\n      if (position[ axis ] === sourceMid[ axis ]) {\r\n        return;\r\n      }\r\n\r\n      if (position[ axis ] > sourceMid[ axis ]) {\r\n        options.min = position[ axis ];\r\n      } else {\r\n        options.max = position[ axis ];\r\n      }\r\n\r\n      if (is(shape, 'bpmn:TextAnnotation')) {\r\n\r\n        if (isHorizontal(axis)) {\r\n          options.offset = -shape.width / 2;\r\n        } else {\r\n          options.offset = -shape.height / 2;\r\n        }\r\n\r\n      }\r\n\r\n      position[ axis ] = gridSnapping.snapValue(position[ axis ], options);\r\n\r\n    });\r\n\r\n    // must be returned to be considered by auto place\r\n    return position;\r\n  });\r\n}\r\n\r\nGridSnappingAutoPlaceBehavior.$inject = [\r\n  'eventBus',\r\n  'gridSnapping',\r\n  'elementRegistry'\r\n];\r\n\r\n// helpers //////////\r\n\r\n/**\r\n * @param {Axis} axis\r\n *\r\n * @return {boolean}\r\n */\r\nfunction isHorizontal(axis) {\r\n  return axis === 'x';\r\n}"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,oCAAoC;AAExE,SAASC,MAAM,QAAQ,kCAAkC;AACzD,SAASC,EAAE,QAAQ,yBAAyB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,aAAa,GAAG,IAAI;;AAExB;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,6BAA6BA,CAACC,QAAQ,EAAEC,YAAY,EAAEC,eAAe,EAAE;EAC7FF,QAAQ,CAACG,EAAE,CAAC,WAAW,EAAEL,aAAa,EAAE,UAASM,OAAO,EAAE;IACxD,IAAIC,MAAM,GAAGD,OAAO,CAACC,MAAM;MACvBC,SAAS,GAAGV,MAAM,CAACS,MAAM,CAAC;MAC1BE,KAAK,GAAGH,OAAO,CAACG,KAAK;IAEzB,IAAIC,QAAQ,GAAGb,mBAAmB,CAACU,MAAM,EAAEE,KAAK,EAAEL,eAAe,CAAC;IAElE,CAAE,GAAG,EAAE,GAAG,CAAE,CAACO,OAAO,CAAC,UAASC,IAAI,EAAE;MAClC,IAAIC,OAAO,GAAG,CAAC,CAAC;;MAEhB;MACA,IAAIH,QAAQ,CAAEE,IAAI,CAAE,KAAKJ,SAAS,CAAEI,IAAI,CAAE,EAAE;QAC1C;MACF;MAEA,IAAIF,QAAQ,CAAEE,IAAI,CAAE,GAAGJ,SAAS,CAAEI,IAAI,CAAE,EAAE;QACxCC,OAAO,CAACC,GAAG,GAAGJ,QAAQ,CAAEE,IAAI,CAAE;MAChC,CAAC,MAAM;QACLC,OAAO,CAACE,GAAG,GAAGL,QAAQ,CAAEE,IAAI,CAAE;MAChC;MAEA,IAAIb,EAAE,CAACU,KAAK,EAAE,qBAAqB,CAAC,EAAE;QAEpC,IAAIO,YAAY,CAACJ,IAAI,CAAC,EAAE;UACtBC,OAAO,CAACI,MAAM,GAAG,CAACR,KAAK,CAACS,KAAK,GAAG,CAAC;QACnC,CAAC,MAAM;UACLL,OAAO,CAACI,MAAM,GAAG,CAACR,KAAK,CAACU,MAAM,GAAG,CAAC;QACpC;MAEF;MAEAT,QAAQ,CAAEE,IAAI,CAAE,GAAGT,YAAY,CAACiB,SAAS,CAACV,QAAQ,CAAEE,IAAI,CAAE,EAAEC,OAAO,CAAC;IAEtE,CAAC,CAAC;;IAEF;IACA,OAAOH,QAAQ;EACjB,CAAC,CAAC;AACJ;AAEAT,6BAA6B,CAACoB,OAAO,GAAG,CACtC,UAAU,EACV,cAAc,EACd,iBAAiB,CAClB;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASL,YAAYA,CAACJ,IAAI,EAAE;EAC1B,OAAOA,IAAI,KAAK,GAAG;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}