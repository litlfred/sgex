{"ast":null,"code":"import { getBBox } from '../../util/Elements';\nvar LOW_PRIORITY = 500;\nimport { append as svgAppend, attr as svgAttr, create as svgCreate } from 'tiny-svg';\nimport { query as domQuery } from 'min-dom';\nimport { assign, forEach, isFunction } from 'min-dash';\nvar DEFAULT_PRIORITY = 1000;\n\n/**\n * @typedef {import('../../model/Types').Element} Element\n *\n * @typedef {import('./OutlineProvider').default} OutlineProvider\n * @typedef {import('../../core/EventBus').default} EventBus\n * @typedef {import('../../draw/Styles').default} Styles\n */\n\n/**\n * @class\n *\n * A plugin that adds an outline to shapes and connections that may be activated and styled\n * via CSS classes.\n *\n * @param {EventBus} eventBus\n * @param {Styles} styles\n */\nexport default function Outline(eventBus, styles) {\n  this._eventBus = eventBus;\n  this.offset = 5;\n  var OUTLINE_STYLE = styles.cls('djs-outline', ['no-fill']);\n  var self = this;\n\n  /**\n   * @param {SVGElement} gfx\n   *\n   * @return {SVGElement} outline\n   */\n  function createOutline(gfx) {\n    var outline = svgCreate('rect');\n    svgAttr(outline, assign({\n      x: 0,\n      y: 0,\n      rx: 4,\n      width: 100,\n      height: 100\n    }, OUTLINE_STYLE));\n    return outline;\n  }\n\n  // A low priortity is necessary, because outlines of labels have to be updated\n  // after the label bounds have been updated in the renderer.\n  eventBus.on(['shape.added', 'shape.changed'], LOW_PRIORITY, function (event) {\n    var element = event.element,\n      gfx = event.gfx;\n    var outline = domQuery('.djs-outline', gfx);\n    if (!outline) {\n      outline = self.getOutline(element) || createOutline(gfx);\n      svgAppend(gfx, outline);\n    }\n    self.updateShapeOutline(outline, element);\n  });\n  eventBus.on(['connection.added', 'connection.changed'], function (event) {\n    var element = event.element,\n      gfx = event.gfx;\n    var outline = domQuery('.djs-outline', gfx);\n    if (!outline) {\n      outline = createOutline(gfx);\n      svgAppend(gfx, outline);\n    }\n    self.updateConnectionOutline(outline, element);\n  });\n}\n\n/**\n * Updates the outline of a shape respecting the dimension of the\n * element and an outline offset.\n *\n * @param {SVGElement} outline\n * @param {Element} element\n */\nOutline.prototype.updateShapeOutline = function (outline, element) {\n  var updated = false;\n  var providers = this._getProviders();\n  if (providers.length) {\n    forEach(providers, function (provider) {\n      updated = updated || provider.updateOutline(element, outline);\n    });\n  }\n  if (!updated) {\n    svgAttr(outline, {\n      x: -this.offset,\n      y: -this.offset,\n      width: element.width + this.offset * 2,\n      height: element.height + this.offset * 2\n    });\n  }\n};\n\n/**\n * Updates the outline of a connection respecting the bounding box of\n * the connection and an outline offset.\n * Register an outline provider with the given priority.\n *\n * @param {SVGElement} outline\n * @param {Element} connection\n */\nOutline.prototype.updateConnectionOutline = function (outline, connection) {\n  var bbox = getBBox(connection);\n  svgAttr(outline, {\n    x: bbox.x - this.offset,\n    y: bbox.y - this.offset,\n    width: bbox.width + this.offset * 2,\n    height: bbox.height + this.offset * 2\n  });\n};\n\n/**\n * Register an outline provider with the given priority.\n *\n * @param {number} priority\n * @param {OutlineProvider} provider\n */\nOutline.prototype.registerProvider = function (priority, provider) {\n  if (!provider) {\n    provider = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n  this._eventBus.on('outline.getProviders', priority, function (event) {\n    event.providers.push(provider);\n  });\n};\n\n/**\n * Returns the registered outline providers.\n *\n * @returns {OutlineProvider[]}\n */\nOutline.prototype._getProviders = function () {\n  var event = this._eventBus.createEvent({\n    type: 'outline.getProviders',\n    providers: []\n  });\n  this._eventBus.fire(event);\n  return event.providers;\n};\n\n/**\n * Returns the outline for an element.\n *\n * @param {Element} element\n */\nOutline.prototype.getOutline = function (element) {\n  var outline;\n  var providers = this._getProviders();\n  forEach(providers, function (provider) {\n    if (!isFunction(provider.getOutline)) {\n      return;\n    }\n    outline = outline || provider.getOutline(element);\n  });\n  return outline;\n};\nOutline.$inject = ['eventBus', 'styles', 'elementRegistry'];","map":{"version":3,"names":["getBBox","LOW_PRIORITY","append","svgAppend","attr","svgAttr","create","svgCreate","query","domQuery","assign","forEach","isFunction","DEFAULT_PRIORITY","Outline","eventBus","styles","_eventBus","offset","OUTLINE_STYLE","cls","self","createOutline","gfx","outline","x","y","rx","width","height","on","event","element","getOutline","updateShapeOutline","updateConnectionOutline","prototype","updated","providers","_getProviders","length","provider","updateOutline","connection","bbox","registerProvider","priority","push","createEvent","type","fire","$inject"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/outline/Outline.js"],"sourcesContent":["import { getBBox } from '../../util/Elements';\n\nvar LOW_PRIORITY = 500;\n\nimport {\n  append as svgAppend,\n  attr as svgAttr,\n  create as svgCreate\n} from 'tiny-svg';\n\nimport {\n  query as domQuery\n} from 'min-dom';\n\nimport {\n  assign,\n  forEach,\n  isFunction\n} from 'min-dash';\n\nvar DEFAULT_PRIORITY = 1000;\n\n/**\n * @typedef {import('../../model/Types').Element} Element\n *\n * @typedef {import('./OutlineProvider').default} OutlineProvider\n * @typedef {import('../../core/EventBus').default} EventBus\n * @typedef {import('../../draw/Styles').default} Styles\n */\n\n/**\n * @class\n *\n * A plugin that adds an outline to shapes and connections that may be activated and styled\n * via CSS classes.\n *\n * @param {EventBus} eventBus\n * @param {Styles} styles\n */\nexport default function Outline(eventBus, styles) {\n\n  this._eventBus = eventBus;\n\n  this.offset = 5;\n\n  var OUTLINE_STYLE = styles.cls('djs-outline', [ 'no-fill' ]);\n\n  var self = this;\n\n  /**\n   * @param {SVGElement} gfx\n   *\n   * @return {SVGElement} outline\n   */\n  function createOutline(gfx) {\n    var outline = svgCreate('rect');\n\n    svgAttr(outline, assign({\n      x: 0,\n      y: 0,\n      rx: 4,\n      width: 100,\n      height: 100\n    }, OUTLINE_STYLE));\n\n    return outline;\n  }\n\n  // A low priortity is necessary, because outlines of labels have to be updated\n  // after the label bounds have been updated in the renderer.\n  eventBus.on([ 'shape.added', 'shape.changed' ], LOW_PRIORITY, function(event) {\n    var element = event.element,\n        gfx = event.gfx;\n\n    var outline = domQuery('.djs-outline', gfx);\n\n    if (!outline) {\n      outline = self.getOutline(element) || createOutline(gfx);\n      svgAppend(gfx, outline);\n    }\n\n    self.updateShapeOutline(outline, element);\n  });\n\n  eventBus.on([ 'connection.added', 'connection.changed' ], function(event) {\n    var element = event.element,\n        gfx = event.gfx;\n\n    var outline = domQuery('.djs-outline', gfx);\n\n    if (!outline) {\n      outline = createOutline(gfx);\n      svgAppend(gfx, outline);\n    }\n\n    self.updateConnectionOutline(outline, element);\n  });\n}\n\n\n/**\n * Updates the outline of a shape respecting the dimension of the\n * element and an outline offset.\n *\n * @param {SVGElement} outline\n * @param {Element} element\n */\nOutline.prototype.updateShapeOutline = function(outline, element) {\n\n  var updated = false;\n  var providers = this._getProviders();\n\n  if (providers.length) {\n    forEach(providers, function(provider) {\n      updated = updated || provider.updateOutline(element, outline);\n    });\n  }\n\n  if (!updated) {\n    svgAttr(outline, {\n      x: -this.offset,\n      y: -this.offset,\n      width: element.width + this.offset * 2,\n      height: element.height + this.offset * 2\n    });\n  }\n};\n\n/**\n * Updates the outline of a connection respecting the bounding box of\n * the connection and an outline offset.\n * Register an outline provider with the given priority.\n *\n * @param {SVGElement} outline\n * @param {Element} connection\n */\nOutline.prototype.updateConnectionOutline = function(outline, connection) {\n  var bbox = getBBox(connection);\n\n  svgAttr(outline, {\n    x: bbox.x - this.offset,\n    y: bbox.y - this.offset,\n    width: bbox.width + this.offset * 2,\n    height: bbox.height + this.offset * 2\n  });\n};\n\n/**\n * Register an outline provider with the given priority.\n *\n * @param {number} priority\n * @param {OutlineProvider} provider\n */\nOutline.prototype.registerProvider = function(priority, provider) {\n  if (!provider) {\n    provider = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  this._eventBus.on('outline.getProviders', priority, function(event) {\n    event.providers.push(provider);\n  });\n};\n\n/**\n * Returns the registered outline providers.\n *\n * @returns {OutlineProvider[]}\n */\nOutline.prototype._getProviders = function() {\n  var event = this._eventBus.createEvent({\n    type: 'outline.getProviders',\n    providers: []\n  });\n\n  this._eventBus.fire(event);\n\n  return event.providers;\n};\n\n/**\n * Returns the outline for an element.\n *\n * @param {Element} element\n */\nOutline.prototype.getOutline = function(element) {\n  var outline;\n  var providers = this._getProviders();\n\n  forEach(providers, function(provider) {\n\n    if (!isFunction(provider.getOutline)) {\n      return;\n    }\n\n    outline = outline || provider.getOutline(element);\n  });\n\n  return outline;\n};\n\nOutline.$inject = [ 'eventBus', 'styles', 'elementRegistry' ];"],"mappings":"AAAA,SAASA,OAAO,QAAQ,qBAAqB;AAE7C,IAAIC,YAAY,GAAG,GAAG;AAEtB,SACEC,MAAM,IAAIC,SAAS,EACnBC,IAAI,IAAIC,OAAO,EACfC,MAAM,IAAIC,SAAS,QACd,UAAU;AAEjB,SACEC,KAAK,IAAIC,QAAQ,QACZ,SAAS;AAEhB,SACEC,MAAM,EACNC,OAAO,EACPC,UAAU,QACL,UAAU;AAEjB,IAAIC,gBAAgB,GAAG,IAAI;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,OAAOA,CAACC,QAAQ,EAAEC,MAAM,EAAE;EAEhD,IAAI,CAACC,SAAS,GAAGF,QAAQ;EAEzB,IAAI,CAACG,MAAM,GAAG,CAAC;EAEf,IAAIC,aAAa,GAAGH,MAAM,CAACI,GAAG,CAAC,aAAa,EAAE,CAAE,SAAS,CAAE,CAAC;EAE5D,IAAIC,IAAI,GAAG,IAAI;;EAEf;AACF;AACA;AACA;AACA;EACE,SAASC,aAAaA,CAACC,GAAG,EAAE;IAC1B,IAAIC,OAAO,GAAGjB,SAAS,CAAC,MAAM,CAAC;IAE/BF,OAAO,CAACmB,OAAO,EAAEd,MAAM,CAAC;MACtBe,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE,CAAC;MACJC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE;IACV,CAAC,EAAEV,aAAa,CAAC,CAAC;IAElB,OAAOK,OAAO;EAChB;;EAEA;EACA;EACAT,QAAQ,CAACe,EAAE,CAAC,CAAE,aAAa,EAAE,eAAe,CAAE,EAAE7B,YAAY,EAAE,UAAS8B,KAAK,EAAE;IAC5E,IAAIC,OAAO,GAAGD,KAAK,CAACC,OAAO;MACvBT,GAAG,GAAGQ,KAAK,CAACR,GAAG;IAEnB,IAAIC,OAAO,GAAGf,QAAQ,CAAC,cAAc,EAAEc,GAAG,CAAC;IAE3C,IAAI,CAACC,OAAO,EAAE;MACZA,OAAO,GAAGH,IAAI,CAACY,UAAU,CAACD,OAAO,CAAC,IAAIV,aAAa,CAACC,GAAG,CAAC;MACxDpB,SAAS,CAACoB,GAAG,EAAEC,OAAO,CAAC;IACzB;IAEAH,IAAI,CAACa,kBAAkB,CAACV,OAAO,EAAEQ,OAAO,CAAC;EAC3C,CAAC,CAAC;EAEFjB,QAAQ,CAACe,EAAE,CAAC,CAAE,kBAAkB,EAAE,oBAAoB,CAAE,EAAE,UAASC,KAAK,EAAE;IACxE,IAAIC,OAAO,GAAGD,KAAK,CAACC,OAAO;MACvBT,GAAG,GAAGQ,KAAK,CAACR,GAAG;IAEnB,IAAIC,OAAO,GAAGf,QAAQ,CAAC,cAAc,EAAEc,GAAG,CAAC;IAE3C,IAAI,CAACC,OAAO,EAAE;MACZA,OAAO,GAAGF,aAAa,CAACC,GAAG,CAAC;MAC5BpB,SAAS,CAACoB,GAAG,EAAEC,OAAO,CAAC;IACzB;IAEAH,IAAI,CAACc,uBAAuB,CAACX,OAAO,EAAEQ,OAAO,CAAC;EAChD,CAAC,CAAC;AACJ;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlB,OAAO,CAACsB,SAAS,CAACF,kBAAkB,GAAG,UAASV,OAAO,EAAEQ,OAAO,EAAE;EAEhE,IAAIK,OAAO,GAAG,KAAK;EACnB,IAAIC,SAAS,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;EAEpC,IAAID,SAAS,CAACE,MAAM,EAAE;IACpB7B,OAAO,CAAC2B,SAAS,EAAE,UAASG,QAAQ,EAAE;MACpCJ,OAAO,GAAGA,OAAO,IAAII,QAAQ,CAACC,aAAa,CAACV,OAAO,EAAER,OAAO,CAAC;IAC/D,CAAC,CAAC;EACJ;EAEA,IAAI,CAACa,OAAO,EAAE;IACZhC,OAAO,CAACmB,OAAO,EAAE;MACfC,CAAC,EAAE,CAAC,IAAI,CAACP,MAAM;MACfQ,CAAC,EAAE,CAAC,IAAI,CAACR,MAAM;MACfU,KAAK,EAAEI,OAAO,CAACJ,KAAK,GAAG,IAAI,CAACV,MAAM,GAAG,CAAC;MACtCW,MAAM,EAAEG,OAAO,CAACH,MAAM,GAAG,IAAI,CAACX,MAAM,GAAG;IACzC,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,OAAO,CAACsB,SAAS,CAACD,uBAAuB,GAAG,UAASX,OAAO,EAAEmB,UAAU,EAAE;EACxE,IAAIC,IAAI,GAAG5C,OAAO,CAAC2C,UAAU,CAAC;EAE9BtC,OAAO,CAACmB,OAAO,EAAE;IACfC,CAAC,EAAEmB,IAAI,CAACnB,CAAC,GAAG,IAAI,CAACP,MAAM;IACvBQ,CAAC,EAAEkB,IAAI,CAAClB,CAAC,GAAG,IAAI,CAACR,MAAM;IACvBU,KAAK,EAAEgB,IAAI,CAAChB,KAAK,GAAG,IAAI,CAACV,MAAM,GAAG,CAAC;IACnCW,MAAM,EAAEe,IAAI,CAACf,MAAM,GAAG,IAAI,CAACX,MAAM,GAAG;EACtC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAJ,OAAO,CAACsB,SAAS,CAACS,gBAAgB,GAAG,UAASC,QAAQ,EAAEL,QAAQ,EAAE;EAChE,IAAI,CAACA,QAAQ,EAAE;IACbA,QAAQ,GAAGK,QAAQ;IACnBA,QAAQ,GAAGjC,gBAAgB;EAC7B;EAEA,IAAI,CAACI,SAAS,CAACa,EAAE,CAAC,sBAAsB,EAAEgB,QAAQ,EAAE,UAASf,KAAK,EAAE;IAClEA,KAAK,CAACO,SAAS,CAACS,IAAI,CAACN,QAAQ,CAAC;EAChC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA3B,OAAO,CAACsB,SAAS,CAACG,aAAa,GAAG,YAAW;EAC3C,IAAIR,KAAK,GAAG,IAAI,CAACd,SAAS,CAAC+B,WAAW,CAAC;IACrCC,IAAI,EAAE,sBAAsB;IAC5BX,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,IAAI,CAACrB,SAAS,CAACiC,IAAI,CAACnB,KAAK,CAAC;EAE1B,OAAOA,KAAK,CAACO,SAAS;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAxB,OAAO,CAACsB,SAAS,CAACH,UAAU,GAAG,UAASD,OAAO,EAAE;EAC/C,IAAIR,OAAO;EACX,IAAIc,SAAS,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;EAEpC5B,OAAO,CAAC2B,SAAS,EAAE,UAASG,QAAQ,EAAE;IAEpC,IAAI,CAAC7B,UAAU,CAAC6B,QAAQ,CAACR,UAAU,CAAC,EAAE;MACpC;IACF;IAEAT,OAAO,GAAGA,OAAO,IAAIiB,QAAQ,CAACR,UAAU,CAACD,OAAO,CAAC;EACnD,CAAC,CAAC;EAEF,OAAOR,OAAO;AAChB,CAAC;AAEDV,OAAO,CAACqC,OAAO,GAAG,CAAE,UAAU,EAAE,QAAQ,EAAE,iBAAiB,CAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}