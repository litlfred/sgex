{"ast":null,"code":"import { assign, forEach, isArray } from 'min-dash';\nimport AlignElementsHandler from './cmd/AlignElementsHandler';\nimport AppendShapeHandler from './cmd/AppendShapeHandler';\nimport CreateConnectionHandler from './cmd/CreateConnectionHandler';\nimport CreateElementsHandler from './cmd/CreateElementsHandler';\nimport CreateLabelHandler from './cmd/CreateLabelHandler';\nimport CreateShapeHandler from './cmd/CreateShapeHandler';\nimport DeleteConnectionHandler from './cmd/DeleteConnectionHandler';\nimport DeleteElementsHandler from './cmd/DeleteElementsHandler';\nimport DeleteShapeHandler from './cmd/DeleteShapeHandler';\nimport DistributeElementsHandler from './cmd/DistributeElementsHandler';\nimport LayoutConnectionHandler from './cmd/LayoutConnectionHandler';\nimport MoveConnectionHandler from './cmd/MoveConnectionHandler';\nimport MoveElementsHandler from './cmd/MoveElementsHandler';\nimport MoveShapeHandler from './cmd/MoveShapeHandler';\nimport ReconnectConnectionHandler from './cmd/ReconnectConnectionHandler';\nimport ReplaceShapeHandler from './cmd/ReplaceShapeHandler';\nimport ResizeShapeHandler from './cmd/ResizeShapeHandler';\nimport SpaceToolHandler from './cmd/SpaceToolHandler';\nimport ToggleShapeCollapseHandler from './cmd/ToggleShapeCollapseHandler';\nimport UpdateAttachmentHandler from './cmd/UpdateAttachmentHandler';\nimport UpdateWaypointsHandler from './cmd/UpdateWaypointsHandler';\nimport { isModelElement } from '../../model';\n\n/**\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').Connection} Connection\n * @typedef {import('../../model/Types').Parent} Parent\n * @typedef {import('../../model/Types').Shape} Shape\n * @typedef {import('../../model/Types').Label} Label\n *\n * @typedef {import('../../command/CommandStack').default} CommandStack\n * @typedef {import('../../core/ElementFactory').default} ElementFactory\n * @typedef {import('../../core/EventBus').default} EventBus\n *\n * @typedef {import('../../command/CommandStack').CommandHandlerConstructor} CommandHandlerConstructor\n *\n * @typedef {import('../../util/Types').Dimensions} Dimensions\n * @typedef {import('../../util/Types').Direction} Direction\n * @typedef {import('../../util/Types').Point} Point\n * @typedef {import('../../util/Types').Rect} Rect\n *\n * @typedef { 'x' | 'y' } ModelingDistributeAxis\n *\n * @typedef { 'width' | 'height' } ModelingDistributeDimension\n *\n * @typedef { {\n *   bottom?: number;\n *   center?: number;\n *   left?: number;\n *   middle?: number;\n *   right?: number;\n *   top?: number;\n * } } ModelingAlignAlignment\n *\n * @typedef { {\n *   [key: string]: any;\n * } } ModelingHints\n *\n * @typedef { {\n *   attach?: boolean;\n * } & ModelingHints } ModelingMoveElementsHints\n *\n * @typedef { {\n *   attach?: boolean;\n * } & ModelingHints } ModelingCreateShapeHints\n */\n\n/**\n * @template {Element} U\n *\n * @typedef { {\n *   elements: U[],\n *   range: {\n *     min: number;\n *     max: number;\n *   } }\n * } ModelingDistributeGroup\n */\n\n/**\n * The basic modeling entry point.\n *\n * @template {Connection} [T=Connection]\n * @template {Element} [U=Element]\n * @template {Label} [V=Label]\n * @template {Parent} [W=Parent]\n * @template {Shape} [X=Shape]\n *\n * @param {EventBus} eventBus\n * @param {ElementFactory} elementFactory\n * @param {CommandStack} commandStack\n */\nexport default function Modeling(eventBus, elementFactory, commandStack) {\n  this._eventBus = eventBus;\n  this._elementFactory = elementFactory;\n  this._commandStack = commandStack;\n  var self = this;\n  eventBus.on('diagram.init', function () {\n    // register modeling handlers\n    self.registerHandlers(commandStack);\n  });\n}\nModeling.$inject = ['eventBus', 'elementFactory', 'commandStack'];\n\n/**\n * Get a map of all command handlers.\n *\n * @return {Map<string, CommandHandlerConstructor>}\n */\nModeling.prototype.getHandlers = function () {\n  return {\n    'shape.append': AppendShapeHandler,\n    'shape.create': CreateShapeHandler,\n    'shape.delete': DeleteShapeHandler,\n    'shape.move': MoveShapeHandler,\n    'shape.resize': ResizeShapeHandler,\n    'shape.replace': ReplaceShapeHandler,\n    'shape.toggleCollapse': ToggleShapeCollapseHandler,\n    'spaceTool': SpaceToolHandler,\n    'label.create': CreateLabelHandler,\n    'connection.create': CreateConnectionHandler,\n    'connection.delete': DeleteConnectionHandler,\n    'connection.move': MoveConnectionHandler,\n    'connection.layout': LayoutConnectionHandler,\n    'connection.updateWaypoints': UpdateWaypointsHandler,\n    'connection.reconnect': ReconnectConnectionHandler,\n    'elements.create': CreateElementsHandler,\n    'elements.move': MoveElementsHandler,\n    'elements.delete': DeleteElementsHandler,\n    'elements.distribute': DistributeElementsHandler,\n    'elements.align': AlignElementsHandler,\n    'element.updateAttachment': UpdateAttachmentHandler\n  };\n};\n\n/**\n * Register handlers with the command stack\n *\n * @param {CommandStack} commandStack\n */\nModeling.prototype.registerHandlers = function (commandStack) {\n  forEach(this.getHandlers(), function (handler, id) {\n    commandStack.registerHandler(id, handler);\n  });\n};\n\n/**\n * Move a shape by the given delta and optionally to a new parent.\n *\n * @param {X} shape\n * @param {Point} delta\n * @param {W} [newParent]\n * @param {number} [newParentIndex]\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.moveShape = function (shape, delta, newParent, newParentIndex, hints) {\n  if (typeof newParentIndex === 'object') {\n    hints = newParentIndex;\n    newParentIndex = null;\n  }\n  var context = {\n    shape: shape,\n    delta: delta,\n    newParent: newParent,\n    newParentIndex: newParentIndex,\n    hints: hints || {}\n  };\n  this._commandStack.execute('shape.move', context);\n};\n\n/**\n * Update the attachment of a shape.\n *\n * @param {X} shape\n * @param {X} [newHost=undefined]\n */\nModeling.prototype.updateAttachment = function (shape, newHost) {\n  var context = {\n    shape: shape,\n    newHost: newHost\n  };\n  this._commandStack.execute('element.updateAttachment', context);\n};\n\n/**\n * Move elements by a given delta and optionally to a new parent.\n *\n * @param {U[]} shapes\n * @param {Point} delta\n * @param {W} [target]\n * @param {ModelingMoveElementsHints} [hints]\n */\nModeling.prototype.moveElements = function (shapes, delta, target, hints) {\n  hints = hints || {};\n  var attach = hints.attach;\n  var newParent = target,\n    newHost;\n  if (attach === true) {\n    newHost = target;\n    newParent = target.parent;\n  } else if (attach === false) {\n    newHost = null;\n  }\n  var context = {\n    shapes: shapes,\n    delta: delta,\n    newParent: newParent,\n    newHost: newHost,\n    hints: hints\n  };\n  this._commandStack.execute('elements.move', context);\n};\n\n/**\n * Move a shape by the given delta and optionally to a new parent.\n *\n * @param {T} connection\n * @param {Point} delta\n * @param {W} [newParent]\n * @param {number} [newParentIndex]\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.moveConnection = function (connection, delta, newParent, newParentIndex, hints) {\n  if (typeof newParentIndex === 'object') {\n    hints = newParentIndex;\n    newParentIndex = undefined;\n  }\n  var context = {\n    connection: connection,\n    delta: delta,\n    newParent: newParent,\n    newParentIndex: newParentIndex,\n    hints: hints || {}\n  };\n  this._commandStack.execute('connection.move', context);\n};\n\n/**\n * Layout a connection.\n *\n * @param {T} connection\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.layoutConnection = function (connection, hints) {\n  var context = {\n    connection: connection,\n    hints: hints || {}\n  };\n  this._commandStack.execute('connection.layout', context);\n};\n\n/**\n * Create a connection.\n *\n * @overlord\n *\n * @param {U} source\n * @param {U} target\n * @param {Partial<T>} connection\n * @param {W} parent\n * @param {ModelingHints} [hints]\n *\n * @return {T}\n */\n\n/**\n * Create a connection.\n *\n * @param {U} source\n * @param {U} target\n * @param {number} parentIndex\n * @param {Partial<T>} connection\n * @param {W} parent\n * @param {ModelingHints} [hints]\n *\n * @return {T}\n */\nModeling.prototype.createConnection = function (source, target, parentIndex, connection, parent, hints) {\n  if (typeof parentIndex === 'object') {\n    hints = parent;\n    parent = connection;\n    connection = parentIndex;\n    parentIndex = undefined;\n  }\n  connection = this._create('connection', connection);\n  var context = {\n    source: source,\n    target: target,\n    parent: parent,\n    parentIndex: parentIndex,\n    connection: connection,\n    hints: hints\n  };\n  this._commandStack.execute('connection.create', context);\n  return context.connection;\n};\n\n/**\n * Create a shape.\n *\n * @overlord\n *\n * @param {Partial<X>} shape\n * @param {Point} position\n * @param {W} target\n * @param {ModelingCreateShapeHints} [hints]\n *\n * @return {X}\n */\n\n/**\n * Create a shape.\n *\n * @param {Partial<X>} shape\n * @param {Point} position\n * @param {W} target\n * @param {number} parentIndex\n * @param {ModelingCreateShapeHints} [hints]\n *\n * @return {X}\n */\nModeling.prototype.createShape = function (shape, position, target, parentIndex, hints) {\n  if (typeof parentIndex !== 'number') {\n    hints = parentIndex;\n    parentIndex = undefined;\n  }\n  hints = hints || {};\n  var attach = hints.attach,\n    parent,\n    host;\n  shape = this._create('shape', shape);\n  if (attach) {\n    parent = target.parent;\n    host = target;\n  } else {\n    parent = target;\n  }\n  var context = {\n    position: position,\n    shape: shape,\n    parent: parent,\n    parentIndex: parentIndex,\n    host: host,\n    hints: hints\n  };\n  this._commandStack.execute('shape.create', context);\n  return context.shape;\n};\n\n/**\n * Create elements.\n *\n * @param {Partial<U>[]} elements\n * @param {Point} position\n * @param {W} parent\n * @param {number} [parentIndex]\n * @param {ModelingHints} [hints]\n *\n * @return {U[]}\n */\nModeling.prototype.createElements = function (elements, position, parent, parentIndex, hints) {\n  if (!isArray(elements)) {\n    elements = [elements];\n  }\n  if (typeof parentIndex !== 'number') {\n    hints = parentIndex;\n    parentIndex = undefined;\n  }\n  hints = hints || {};\n  var context = {\n    position: position,\n    elements: elements,\n    parent: parent,\n    parentIndex: parentIndex,\n    hints: hints\n  };\n  this._commandStack.execute('elements.create', context);\n  return context.elements;\n};\n\n/**\n * Create a label.\n *\n * @param {U} labelTarget\n * @param {Point} position\n * @param {Partial<V>} label\n * @param {W} [parent]\n *\n * @return {V}\n */\nModeling.prototype.createLabel = function (labelTarget, position, label, parent) {\n  label = this._create('label', label);\n  var context = {\n    labelTarget: labelTarget,\n    position: position,\n    parent: parent || labelTarget.parent,\n    shape: label\n  };\n  this._commandStack.execute('label.create', context);\n  return context.shape;\n};\n\n/**\n * Create and connect a shape to a source.\n *\n * @param {U} source\n * @param {Partial<X>} shape\n * @param {Point} position\n * @param {W} target\n * @param {ModelingHints} [hints]\n *\n * @return {X}\n */\nModeling.prototype.appendShape = function (source, shape, position, target, hints) {\n  hints = hints || {};\n  shape = this._create('shape', shape);\n  var context = {\n    source: source,\n    position: position,\n    target: target,\n    shape: shape,\n    connection: hints.connection,\n    connectionParent: hints.connectionParent,\n    hints: hints\n  };\n  this._commandStack.execute('shape.append', context);\n  return context.shape;\n};\n\n/**\n * Remove elements.\n *\n * @param {U[]} elements\n */\nModeling.prototype.removeElements = function (elements) {\n  var context = {\n    elements: elements\n  };\n  this._commandStack.execute('elements.delete', context);\n};\n\n/**\n * Distribute elements along a given axis.\n *\n * @param {ModelingDistributeGroup<U>[]} groups\n * @param {ModelingDistributeAxis} axis\n * @param {ModelingDistributeDimension} dimension\n */\nModeling.prototype.distributeElements = function (groups, axis, dimension) {\n  var context = {\n    groups: groups,\n    axis: axis,\n    dimension: dimension\n  };\n  this._commandStack.execute('elements.distribute', context);\n};\n\n/**\n * Remove a shape.\n *\n * @param {X} shape\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.removeShape = function (shape, hints) {\n  var context = {\n    shape: shape,\n    hints: hints || {}\n  };\n  this._commandStack.execute('shape.delete', context);\n};\n\n/**\n * Remove a connection.\n *\n * @param {T} connection\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.removeConnection = function (connection, hints) {\n  var context = {\n    connection: connection,\n    hints: hints || {}\n  };\n  this._commandStack.execute('connection.delete', context);\n};\n\n/**\n * Replace a shape.\n *\n * @param {X} oldShape\n * @param {Partial<X>} newShape\n * @param {ModelingHints} [hints]\n *\n * @return {X}\n */\nModeling.prototype.replaceShape = function (oldShape, newShape, hints) {\n  var context = {\n    oldShape: oldShape,\n    newData: newShape,\n    hints: hints || {}\n  };\n  this._commandStack.execute('shape.replace', context);\n  return context.newShape;\n};\n\n/**\n * Align elements.\n *\n * @param {U[]} elements\n * @param {ModelingAlignAlignment} alignment\n */\nModeling.prototype.alignElements = function (elements, alignment) {\n  var context = {\n    elements: elements,\n    alignment: alignment\n  };\n  this._commandStack.execute('elements.align', context);\n};\n\n/**\n * Resize a shape.\n *\n * @param {X} shape\n * @param {Rect} newBounds\n * @param {Dimensions} [minBounds]\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.resizeShape = function (shape, newBounds, minBounds, hints) {\n  var context = {\n    shape: shape,\n    newBounds: newBounds,\n    minBounds: minBounds,\n    hints: hints\n  };\n  this._commandStack.execute('shape.resize', context);\n};\n\n/**\n * Create space along an horizontally or vertically.\n *\n * @param {X[]} movingShapes\n * @param {X[]} resizingShapes\n * @param {Point} delta\n * @param {Direction} direction\n * @param {number} start\n */\nModeling.prototype.createSpace = function (movingShapes, resizingShapes, delta, direction, start) {\n  var context = {\n    delta: delta,\n    direction: direction,\n    movingShapes: movingShapes,\n    resizingShapes: resizingShapes,\n    start: start\n  };\n  this._commandStack.execute('spaceTool', context);\n};\n\n/**\n * Update a connetions waypoints.\n *\n * @param {T} connection\n * @param {Point[]} newWaypoints\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.updateWaypoints = function (connection, newWaypoints, hints) {\n  var context = {\n    connection: connection,\n    newWaypoints: newWaypoints,\n    hints: hints || {}\n  };\n  this._commandStack.execute('connection.updateWaypoints', context);\n};\n\n/**\n * Reconnect a connections source and/or target.\n *\n * @param {T} connection\n * @param {U} source\n * @param {U} target\n * @param {Point|Point[]} dockingOrPoints\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.reconnect = function (connection, source, target, dockingOrPoints, hints) {\n  var context = {\n    connection: connection,\n    newSource: source,\n    newTarget: target,\n    dockingOrPoints: dockingOrPoints,\n    hints: hints || {}\n  };\n  this._commandStack.execute('connection.reconnect', context);\n};\n\n/**\n * Reconnect a connections source.\n *\n * @param {T} connection\n * @param {U} newSource\n * @param {Point|Point[]} dockingOrPoints\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.reconnectStart = function (connection, newSource, dockingOrPoints, hints) {\n  if (!hints) {\n    hints = {};\n  }\n  this.reconnect(connection, newSource, connection.target, dockingOrPoints, assign(hints, {\n    docking: 'source'\n  }));\n};\n\n/**\n * Reconnect a connections target.\n *\n * @param {T} connection\n * @param {U} newTarget\n * @param {Point|Point[]} dockingOrPoints\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.reconnectEnd = function (connection, newTarget, dockingOrPoints, hints) {\n  if (!hints) {\n    hints = {};\n  }\n  this.reconnect(connection, connection.source, newTarget, dockingOrPoints, assign(hints, {\n    docking: 'target'\n  }));\n};\n\n/**\n * Connect two elements.\n *\n * @param {U} source\n * @param {U} target\n * @param {Partial<T>} [attrs]\n * @param {ModelingHints} [hints]\n *\n * @return {T}\n */\nModeling.prototype.connect = function (source, target, attrs, hints) {\n  return this.createConnection(source, target, attrs || {}, source.parent, hints);\n};\nModeling.prototype._create = function (type, attrs) {\n  if (isModelElement(attrs)) {\n    return attrs;\n  } else {\n    return this._elementFactory.create(type, attrs);\n  }\n};\n\n/**\n * Collapse or expand a shape.\n *\n * @param {X} shape\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.toggleCollapse = function (shape, hints) {\n  var context = {\n    shape: shape,\n    hints: hints || {}\n  };\n  this._commandStack.execute('shape.toggleCollapse', context);\n};","map":{"version":3,"names":["assign","forEach","isArray","AlignElementsHandler","AppendShapeHandler","CreateConnectionHandler","CreateElementsHandler","CreateLabelHandler","CreateShapeHandler","DeleteConnectionHandler","DeleteElementsHandler","DeleteShapeHandler","DistributeElementsHandler","LayoutConnectionHandler","MoveConnectionHandler","MoveElementsHandler","MoveShapeHandler","ReconnectConnectionHandler","ReplaceShapeHandler","ResizeShapeHandler","SpaceToolHandler","ToggleShapeCollapseHandler","UpdateAttachmentHandler","UpdateWaypointsHandler","isModelElement","Modeling","eventBus","elementFactory","commandStack","_eventBus","_elementFactory","_commandStack","self","on","registerHandlers","$inject","prototype","getHandlers","handler","id","registerHandler","moveShape","shape","delta","newParent","newParentIndex","hints","context","execute","updateAttachment","newHost","moveElements","shapes","target","attach","parent","moveConnection","connection","undefined","layoutConnection","createConnection","source","parentIndex","_create","createShape","position","host","createElements","elements","createLabel","labelTarget","label","appendShape","connectionParent","removeElements","distributeElements","groups","axis","dimension","removeShape","removeConnection","replaceShape","oldShape","newShape","newData","alignElements","alignment","resizeShape","newBounds","minBounds","createSpace","movingShapes","resizingShapes","direction","start","updateWaypoints","newWaypoints","reconnect","dockingOrPoints","newSource","newTarget","reconnectStart","docking","reconnectEnd","connect","attrs","type","create","toggleCollapse"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/modeling/Modeling.js"],"sourcesContent":["import {\n  assign,\n  forEach,\n  isArray\n} from 'min-dash';\n\nimport AlignElementsHandler from './cmd/AlignElementsHandler';\nimport AppendShapeHandler from './cmd/AppendShapeHandler';\nimport CreateConnectionHandler from './cmd/CreateConnectionHandler';\nimport CreateElementsHandler from './cmd/CreateElementsHandler';\nimport CreateLabelHandler from './cmd/CreateLabelHandler';\nimport CreateShapeHandler from './cmd/CreateShapeHandler';\nimport DeleteConnectionHandler from './cmd/DeleteConnectionHandler';\nimport DeleteElementsHandler from './cmd/DeleteElementsHandler';\nimport DeleteShapeHandler from './cmd/DeleteShapeHandler';\nimport DistributeElementsHandler from './cmd/DistributeElementsHandler';\nimport LayoutConnectionHandler from './cmd/LayoutConnectionHandler';\nimport MoveConnectionHandler from './cmd/MoveConnectionHandler';\nimport MoveElementsHandler from './cmd/MoveElementsHandler';\nimport MoveShapeHandler from './cmd/MoveShapeHandler';\nimport ReconnectConnectionHandler from './cmd/ReconnectConnectionHandler';\nimport ReplaceShapeHandler from './cmd/ReplaceShapeHandler';\nimport ResizeShapeHandler from './cmd/ResizeShapeHandler';\nimport SpaceToolHandler from './cmd/SpaceToolHandler';\nimport ToggleShapeCollapseHandler from './cmd/ToggleShapeCollapseHandler';\nimport UpdateAttachmentHandler from './cmd/UpdateAttachmentHandler';\nimport UpdateWaypointsHandler from './cmd/UpdateWaypointsHandler';\n\nimport { isModelElement } from '../../model';\n\n/**\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').Connection} Connection\n * @typedef {import('../../model/Types').Parent} Parent\n * @typedef {import('../../model/Types').Shape} Shape\n * @typedef {import('../../model/Types').Label} Label\n *\n * @typedef {import('../../command/CommandStack').default} CommandStack\n * @typedef {import('../../core/ElementFactory').default} ElementFactory\n * @typedef {import('../../core/EventBus').default} EventBus\n *\n * @typedef {import('../../command/CommandStack').CommandHandlerConstructor} CommandHandlerConstructor\n *\n * @typedef {import('../../util/Types').Dimensions} Dimensions\n * @typedef {import('../../util/Types').Direction} Direction\n * @typedef {import('../../util/Types').Point} Point\n * @typedef {import('../../util/Types').Rect} Rect\n *\n * @typedef { 'x' | 'y' } ModelingDistributeAxis\n *\n * @typedef { 'width' | 'height' } ModelingDistributeDimension\n *\n * @typedef { {\n *   bottom?: number;\n *   center?: number;\n *   left?: number;\n *   middle?: number;\n *   right?: number;\n *   top?: number;\n * } } ModelingAlignAlignment\n *\n * @typedef { {\n *   [key: string]: any;\n * } } ModelingHints\n *\n * @typedef { {\n *   attach?: boolean;\n * } & ModelingHints } ModelingMoveElementsHints\n *\n * @typedef { {\n *   attach?: boolean;\n * } & ModelingHints } ModelingCreateShapeHints\n */\n\n/**\n * @template {Element} U\n *\n * @typedef { {\n *   elements: U[],\n *   range: {\n *     min: number;\n *     max: number;\n *   } }\n * } ModelingDistributeGroup\n */\n\n/**\n * The basic modeling entry point.\n *\n * @template {Connection} [T=Connection]\n * @template {Element} [U=Element]\n * @template {Label} [V=Label]\n * @template {Parent} [W=Parent]\n * @template {Shape} [X=Shape]\n *\n * @param {EventBus} eventBus\n * @param {ElementFactory} elementFactory\n * @param {CommandStack} commandStack\n */\nexport default function Modeling(eventBus, elementFactory, commandStack) {\n  this._eventBus = eventBus;\n  this._elementFactory = elementFactory;\n  this._commandStack = commandStack;\n\n  var self = this;\n\n  eventBus.on('diagram.init', function() {\n\n    // register modeling handlers\n    self.registerHandlers(commandStack);\n  });\n}\n\nModeling.$inject = [ 'eventBus', 'elementFactory', 'commandStack' ];\n\n/**\n * Get a map of all command handlers.\n *\n * @return {Map<string, CommandHandlerConstructor>}\n */\nModeling.prototype.getHandlers = function() {\n  return {\n    'shape.append': AppendShapeHandler,\n    'shape.create': CreateShapeHandler,\n    'shape.delete': DeleteShapeHandler,\n    'shape.move': MoveShapeHandler,\n    'shape.resize': ResizeShapeHandler,\n    'shape.replace': ReplaceShapeHandler,\n    'shape.toggleCollapse': ToggleShapeCollapseHandler,\n\n    'spaceTool': SpaceToolHandler,\n\n    'label.create': CreateLabelHandler,\n\n    'connection.create': CreateConnectionHandler,\n    'connection.delete': DeleteConnectionHandler,\n    'connection.move': MoveConnectionHandler,\n    'connection.layout': LayoutConnectionHandler,\n\n    'connection.updateWaypoints': UpdateWaypointsHandler,\n\n    'connection.reconnect': ReconnectConnectionHandler,\n\n    'elements.create': CreateElementsHandler,\n    'elements.move': MoveElementsHandler,\n    'elements.delete': DeleteElementsHandler,\n\n    'elements.distribute': DistributeElementsHandler,\n    'elements.align': AlignElementsHandler,\n\n    'element.updateAttachment': UpdateAttachmentHandler\n  };\n};\n\n/**\n * Register handlers with the command stack\n *\n * @param {CommandStack} commandStack\n */\nModeling.prototype.registerHandlers = function(commandStack) {\n  forEach(this.getHandlers(), function(handler, id) {\n    commandStack.registerHandler(id, handler);\n  });\n};\n\n\n/**\n * Move a shape by the given delta and optionally to a new parent.\n *\n * @param {X} shape\n * @param {Point} delta\n * @param {W} [newParent]\n * @param {number} [newParentIndex]\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.moveShape = function(shape, delta, newParent, newParentIndex, hints) {\n\n  if (typeof newParentIndex === 'object') {\n    hints = newParentIndex;\n    newParentIndex = null;\n  }\n\n  var context = {\n    shape: shape,\n    delta:  delta,\n    newParent: newParent,\n    newParentIndex: newParentIndex,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.move', context);\n};\n\n\n/**\n * Update the attachment of a shape.\n *\n * @param {X} shape\n * @param {X} [newHost=undefined]\n */\nModeling.prototype.updateAttachment = function(shape, newHost) {\n  var context = {\n    shape: shape,\n    newHost: newHost\n  };\n\n  this._commandStack.execute('element.updateAttachment', context);\n};\n\n\n/**\n * Move elements by a given delta and optionally to a new parent.\n *\n * @param {U[]} shapes\n * @param {Point} delta\n * @param {W} [target]\n * @param {ModelingMoveElementsHints} [hints]\n */\nModeling.prototype.moveElements = function(shapes, delta, target, hints) {\n\n  hints = hints || {};\n\n  var attach = hints.attach;\n\n  var newParent = target,\n      newHost;\n\n  if (attach === true) {\n    newHost = target;\n    newParent = target.parent;\n  } else if (attach === false) {\n    newHost = null;\n  }\n\n  var context = {\n    shapes: shapes,\n    delta: delta,\n    newParent: newParent,\n    newHost: newHost,\n    hints: hints\n  };\n\n  this._commandStack.execute('elements.move', context);\n};\n\n/**\n * Move a shape by the given delta and optionally to a new parent.\n *\n * @param {T} connection\n * @param {Point} delta\n * @param {W} [newParent]\n * @param {number} [newParentIndex]\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.moveConnection = function(connection, delta, newParent, newParentIndex, hints) {\n\n  if (typeof newParentIndex === 'object') {\n    hints = newParentIndex;\n    newParentIndex = undefined;\n  }\n\n  var context = {\n    connection: connection,\n    delta: delta,\n    newParent: newParent,\n    newParentIndex: newParentIndex,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.move', context);\n};\n\n/**\n * Layout a connection.\n *\n * @param {T} connection\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.layoutConnection = function(connection, hints) {\n  var context = {\n    connection: connection,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.layout', context);\n};\n\n/**\n * Create a connection.\n *\n * @overlord\n *\n * @param {U} source\n * @param {U} target\n * @param {Partial<T>} connection\n * @param {W} parent\n * @param {ModelingHints} [hints]\n *\n * @return {T}\n */\n\n/**\n * Create a connection.\n *\n * @param {U} source\n * @param {U} target\n * @param {number} parentIndex\n * @param {Partial<T>} connection\n * @param {W} parent\n * @param {ModelingHints} [hints]\n *\n * @return {T}\n */\nModeling.prototype.createConnection = function(source, target, parentIndex, connection, parent, hints) {\n\n  if (typeof parentIndex === 'object') {\n    hints = parent;\n    parent = connection;\n    connection = parentIndex;\n    parentIndex = undefined;\n  }\n\n  connection = this._create('connection', connection);\n\n  var context = {\n    source: source,\n    target: target,\n    parent: parent,\n    parentIndex: parentIndex,\n    connection: connection,\n    hints: hints\n  };\n\n  this._commandStack.execute('connection.create', context);\n\n  return context.connection;\n};\n\n\n/**\n * Create a shape.\n *\n * @overlord\n *\n * @param {Partial<X>} shape\n * @param {Point} position\n * @param {W} target\n * @param {ModelingCreateShapeHints} [hints]\n *\n * @return {X}\n */\n\n/**\n * Create a shape.\n *\n * @param {Partial<X>} shape\n * @param {Point} position\n * @param {W} target\n * @param {number} parentIndex\n * @param {ModelingCreateShapeHints} [hints]\n *\n * @return {X}\n */\nModeling.prototype.createShape = function(shape, position, target, parentIndex, hints) {\n\n  if (typeof parentIndex !== 'number') {\n    hints = parentIndex;\n    parentIndex = undefined;\n  }\n\n  hints = hints || {};\n\n  var attach = hints.attach,\n      parent,\n      host;\n\n  shape = this._create('shape', shape);\n\n  if (attach) {\n    parent = target.parent;\n    host = target;\n  } else {\n    parent = target;\n  }\n\n  var context = {\n    position: position,\n    shape: shape,\n    parent: parent,\n    parentIndex: parentIndex,\n    host: host,\n    hints: hints\n  };\n\n  this._commandStack.execute('shape.create', context);\n\n  return context.shape;\n};\n\n/**\n * Create elements.\n *\n * @param {Partial<U>[]} elements\n * @param {Point} position\n * @param {W} parent\n * @param {number} [parentIndex]\n * @param {ModelingHints} [hints]\n *\n * @return {U[]}\n */\nModeling.prototype.createElements = function(elements, position, parent, parentIndex, hints) {\n  if (!isArray(elements)) {\n    elements = [ elements ];\n  }\n\n  if (typeof parentIndex !== 'number') {\n    hints = parentIndex;\n    parentIndex = undefined;\n  }\n\n  hints = hints || {};\n\n  var context = {\n    position: position,\n    elements: elements,\n    parent: parent,\n    parentIndex: parentIndex,\n    hints: hints\n  };\n\n  this._commandStack.execute('elements.create', context);\n\n  return context.elements;\n};\n\n/**\n * Create a label.\n *\n * @param {U} labelTarget\n * @param {Point} position\n * @param {Partial<V>} label\n * @param {W} [parent]\n *\n * @return {V}\n */\nModeling.prototype.createLabel = function(labelTarget, position, label, parent) {\n\n  label = this._create('label', label);\n\n  var context = {\n    labelTarget: labelTarget,\n    position: position,\n    parent: parent || labelTarget.parent,\n    shape: label\n  };\n\n  this._commandStack.execute('label.create', context);\n\n  return context.shape;\n};\n\n\n/**\n * Create and connect a shape to a source.\n *\n * @param {U} source\n * @param {Partial<X>} shape\n * @param {Point} position\n * @param {W} target\n * @param {ModelingHints} [hints]\n *\n * @return {X}\n */\nModeling.prototype.appendShape = function(source, shape, position, target, hints) {\n\n  hints = hints || {};\n\n  shape = this._create('shape', shape);\n\n  var context = {\n    source: source,\n    position: position,\n    target: target,\n    shape: shape,\n    connection: hints.connection,\n    connectionParent: hints.connectionParent,\n    hints: hints\n  };\n\n  this._commandStack.execute('shape.append', context);\n\n  return context.shape;\n};\n\n/**\n * Remove elements.\n *\n * @param {U[]} elements\n */\nModeling.prototype.removeElements = function(elements) {\n  var context = {\n    elements: elements\n  };\n\n  this._commandStack.execute('elements.delete', context);\n};\n\n/**\n * Distribute elements along a given axis.\n *\n * @param {ModelingDistributeGroup<U>[]} groups\n * @param {ModelingDistributeAxis} axis\n * @param {ModelingDistributeDimension} dimension\n */\nModeling.prototype.distributeElements = function(groups, axis, dimension) {\n  var context = {\n    groups: groups,\n    axis: axis,\n    dimension: dimension\n  };\n\n  this._commandStack.execute('elements.distribute', context);\n};\n\n/**\n * Remove a shape.\n *\n * @param {X} shape\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.removeShape = function(shape, hints) {\n  var context = {\n    shape: shape,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.delete', context);\n};\n\n/**\n * Remove a connection.\n *\n * @param {T} connection\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.removeConnection = function(connection, hints) {\n  var context = {\n    connection: connection,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.delete', context);\n};\n\n/**\n * Replace a shape.\n *\n * @param {X} oldShape\n * @param {Partial<X>} newShape\n * @param {ModelingHints} [hints]\n *\n * @return {X}\n */\nModeling.prototype.replaceShape = function(oldShape, newShape, hints) {\n  var context = {\n    oldShape: oldShape,\n    newData: newShape,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.replace', context);\n\n  return context.newShape;\n};\n\n/**\n * Align elements.\n *\n * @param {U[]} elements\n * @param {ModelingAlignAlignment} alignment\n */\nModeling.prototype.alignElements = function(elements, alignment) {\n  var context = {\n    elements: elements,\n    alignment: alignment\n  };\n\n  this._commandStack.execute('elements.align', context);\n};\n\n/**\n * Resize a shape.\n *\n * @param {X} shape\n * @param {Rect} newBounds\n * @param {Dimensions} [minBounds]\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.resizeShape = function(shape, newBounds, minBounds, hints) {\n  var context = {\n    shape: shape,\n    newBounds: newBounds,\n    minBounds: minBounds,\n    hints: hints\n  };\n\n  this._commandStack.execute('shape.resize', context);\n};\n\n/**\n * Create space along an horizontally or vertically.\n *\n * @param {X[]} movingShapes\n * @param {X[]} resizingShapes\n * @param {Point} delta\n * @param {Direction} direction\n * @param {number} start\n */\nModeling.prototype.createSpace = function(movingShapes, resizingShapes, delta, direction, start) {\n  var context = {\n    delta: delta,\n    direction: direction,\n    movingShapes: movingShapes,\n    resizingShapes: resizingShapes,\n    start: start\n  };\n\n  this._commandStack.execute('spaceTool', context);\n};\n\n/**\n * Update a connetions waypoints.\n *\n * @param {T} connection\n * @param {Point[]} newWaypoints\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.updateWaypoints = function(connection, newWaypoints, hints) {\n  var context = {\n    connection: connection,\n    newWaypoints: newWaypoints,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.updateWaypoints', context);\n};\n\n/**\n * Reconnect a connections source and/or target.\n *\n * @param {T} connection\n * @param {U} source\n * @param {U} target\n * @param {Point|Point[]} dockingOrPoints\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.reconnect = function(connection, source, target, dockingOrPoints, hints) {\n  var context = {\n    connection: connection,\n    newSource: source,\n    newTarget: target,\n    dockingOrPoints: dockingOrPoints,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.reconnect', context);\n};\n\n/**\n * Reconnect a connections source.\n *\n * @param {T} connection\n * @param {U} newSource\n * @param {Point|Point[]} dockingOrPoints\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.reconnectStart = function(connection, newSource, dockingOrPoints, hints) {\n  if (!hints) {\n    hints = {};\n  }\n\n  this.reconnect(connection, newSource, connection.target, dockingOrPoints, assign(hints, {\n    docking: 'source'\n  }));\n};\n\n/**\n * Reconnect a connections target.\n *\n * @param {T} connection\n * @param {U} newTarget\n * @param {Point|Point[]} dockingOrPoints\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.reconnectEnd = function(connection, newTarget, dockingOrPoints, hints) {\n  if (!hints) {\n    hints = {};\n  }\n\n  this.reconnect(connection, connection.source, newTarget, dockingOrPoints, assign(hints, {\n    docking: 'target'\n  }));\n};\n\n/**\n * Connect two elements.\n *\n * @param {U} source\n * @param {U} target\n * @param {Partial<T>} [attrs]\n * @param {ModelingHints} [hints]\n *\n * @return {T}\n */\nModeling.prototype.connect = function(source, target, attrs, hints) {\n  return this.createConnection(source, target, attrs || {}, source.parent, hints);\n};\n\nModeling.prototype._create = function(type, attrs) {\n  if (isModelElement(attrs)) {\n    return attrs;\n  } else {\n    return this._elementFactory.create(type, attrs);\n  }\n};\n\n/**\n * Collapse or expand a shape.\n *\n * @param {X} shape\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.toggleCollapse = function(shape, hints) {\n  var context = {\n    shape: shape,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.toggleCollapse', context);\n};\n"],"mappings":"AAAA,SACEA,MAAM,EACNC,OAAO,EACPC,OAAO,QACF,UAAU;AAEjB,OAAOC,oBAAoB,MAAM,4BAA4B;AAC7D,OAAOC,kBAAkB,MAAM,0BAA0B;AACzD,OAAOC,uBAAuB,MAAM,+BAA+B;AACnE,OAAOC,qBAAqB,MAAM,6BAA6B;AAC/D,OAAOC,kBAAkB,MAAM,0BAA0B;AACzD,OAAOC,kBAAkB,MAAM,0BAA0B;AACzD,OAAOC,uBAAuB,MAAM,+BAA+B;AACnE,OAAOC,qBAAqB,MAAM,6BAA6B;AAC/D,OAAOC,kBAAkB,MAAM,0BAA0B;AACzD,OAAOC,yBAAyB,MAAM,iCAAiC;AACvE,OAAOC,uBAAuB,MAAM,+BAA+B;AACnE,OAAOC,qBAAqB,MAAM,6BAA6B;AAC/D,OAAOC,mBAAmB,MAAM,2BAA2B;AAC3D,OAAOC,gBAAgB,MAAM,wBAAwB;AACrD,OAAOC,0BAA0B,MAAM,kCAAkC;AACzE,OAAOC,mBAAmB,MAAM,2BAA2B;AAC3D,OAAOC,kBAAkB,MAAM,0BAA0B;AACzD,OAAOC,gBAAgB,MAAM,wBAAwB;AACrD,OAAOC,0BAA0B,MAAM,kCAAkC;AACzE,OAAOC,uBAAuB,MAAM,+BAA+B;AACnE,OAAOC,sBAAsB,MAAM,8BAA8B;AAEjE,SAASC,cAAc,QAAQ,aAAa;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,QAAQA,CAACC,QAAQ,EAAEC,cAAc,EAAEC,YAAY,EAAE;EACvE,IAAI,CAACC,SAAS,GAAGH,QAAQ;EACzB,IAAI,CAACI,eAAe,GAAGH,cAAc;EACrC,IAAI,CAACI,aAAa,GAAGH,YAAY;EAEjC,IAAII,IAAI,GAAG,IAAI;EAEfN,QAAQ,CAACO,EAAE,CAAC,cAAc,EAAE,YAAW;IAErC;IACAD,IAAI,CAACE,gBAAgB,CAACN,YAAY,CAAC;EACrC,CAAC,CAAC;AACJ;AAEAH,QAAQ,CAACU,OAAO,GAAG,CAAE,UAAU,EAAE,gBAAgB,EAAE,cAAc,CAAE;;AAEnE;AACA;AACA;AACA;AACA;AACAV,QAAQ,CAACW,SAAS,CAACC,WAAW,GAAG,YAAW;EAC1C,OAAO;IACL,cAAc,EAAEjC,kBAAkB;IAClC,cAAc,EAAEI,kBAAkB;IAClC,cAAc,EAAEG,kBAAkB;IAClC,YAAY,EAAEK,gBAAgB;IAC9B,cAAc,EAAEG,kBAAkB;IAClC,eAAe,EAAED,mBAAmB;IACpC,sBAAsB,EAAEG,0BAA0B;IAElD,WAAW,EAAED,gBAAgB;IAE7B,cAAc,EAAEb,kBAAkB;IAElC,mBAAmB,EAAEF,uBAAuB;IAC5C,mBAAmB,EAAEI,uBAAuB;IAC5C,iBAAiB,EAAEK,qBAAqB;IACxC,mBAAmB,EAAED,uBAAuB;IAE5C,4BAA4B,EAAEU,sBAAsB;IAEpD,sBAAsB,EAAEN,0BAA0B;IAElD,iBAAiB,EAAEX,qBAAqB;IACxC,eAAe,EAAES,mBAAmB;IACpC,iBAAiB,EAAEL,qBAAqB;IAExC,qBAAqB,EAAEE,yBAAyB;IAChD,gBAAgB,EAAET,oBAAoB;IAEtC,0BAA0B,EAAEmB;EAC9B,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAG,QAAQ,CAACW,SAAS,CAACF,gBAAgB,GAAG,UAASN,YAAY,EAAE;EAC3D3B,OAAO,CAAC,IAAI,CAACoC,WAAW,CAAC,CAAC,EAAE,UAASC,OAAO,EAAEC,EAAE,EAAE;IAChDX,YAAY,CAACY,eAAe,CAACD,EAAE,EAAED,OAAO,CAAC;EAC3C,CAAC,CAAC;AACJ,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,QAAQ,CAACW,SAAS,CAACK,SAAS,GAAG,UAASC,KAAK,EAAEC,KAAK,EAAEC,SAAS,EAAEC,cAAc,EAAEC,KAAK,EAAE;EAEtF,IAAI,OAAOD,cAAc,KAAK,QAAQ,EAAE;IACtCC,KAAK,GAAGD,cAAc;IACtBA,cAAc,GAAG,IAAI;EACvB;EAEA,IAAIE,OAAO,GAAG;IACZL,KAAK,EAAEA,KAAK;IACZC,KAAK,EAAGA,KAAK;IACbC,SAAS,EAAEA,SAAS;IACpBC,cAAc,EAAEA,cAAc;IAC9BC,KAAK,EAAEA,KAAK,IAAI,CAAC;EACnB,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,YAAY,EAAED,OAAO,CAAC;AACnD,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACW,SAAS,CAACa,gBAAgB,GAAG,UAASP,KAAK,EAAEQ,OAAO,EAAE;EAC7D,IAAIH,OAAO,GAAG;IACZL,KAAK,EAAEA,KAAK;IACZQ,OAAO,EAAEA;EACX,CAAC;EAED,IAAI,CAACnB,aAAa,CAACiB,OAAO,CAAC,0BAA0B,EAAED,OAAO,CAAC;AACjE,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACW,SAAS,CAACe,YAAY,GAAG,UAASC,MAAM,EAAET,KAAK,EAAEU,MAAM,EAAEP,KAAK,EAAE;EAEvEA,KAAK,GAAGA,KAAK,IAAI,CAAC,CAAC;EAEnB,IAAIQ,MAAM,GAAGR,KAAK,CAACQ,MAAM;EAEzB,IAAIV,SAAS,GAAGS,MAAM;IAClBH,OAAO;EAEX,IAAII,MAAM,KAAK,IAAI,EAAE;IACnBJ,OAAO,GAAGG,MAAM;IAChBT,SAAS,GAAGS,MAAM,CAACE,MAAM;EAC3B,CAAC,MAAM,IAAID,MAAM,KAAK,KAAK,EAAE;IAC3BJ,OAAO,GAAG,IAAI;EAChB;EAEA,IAAIH,OAAO,GAAG;IACZK,MAAM,EAAEA,MAAM;IACdT,KAAK,EAAEA,KAAK;IACZC,SAAS,EAAEA,SAAS;IACpBM,OAAO,EAAEA,OAAO;IAChBJ,KAAK,EAAEA;EACT,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,eAAe,EAAED,OAAO,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACW,SAAS,CAACoB,cAAc,GAAG,UAASC,UAAU,EAAEd,KAAK,EAAEC,SAAS,EAAEC,cAAc,EAAEC,KAAK,EAAE;EAEhG,IAAI,OAAOD,cAAc,KAAK,QAAQ,EAAE;IACtCC,KAAK,GAAGD,cAAc;IACtBA,cAAc,GAAGa,SAAS;EAC5B;EAEA,IAAIX,OAAO,GAAG;IACZU,UAAU,EAAEA,UAAU;IACtBd,KAAK,EAAEA,KAAK;IACZC,SAAS,EAAEA,SAAS;IACpBC,cAAc,EAAEA,cAAc;IAC9BC,KAAK,EAAEA,KAAK,IAAI,CAAC;EACnB,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,iBAAiB,EAAED,OAAO,CAAC;AACxD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACW,SAAS,CAACuB,gBAAgB,GAAG,UAASF,UAAU,EAAEX,KAAK,EAAE;EAChE,IAAIC,OAAO,GAAG;IACZU,UAAU,EAAEA,UAAU;IACtBX,KAAK,EAAEA,KAAK,IAAI,CAAC;EACnB,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,mBAAmB,EAAED,OAAO,CAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACW,SAAS,CAACwB,gBAAgB,GAAG,UAASC,MAAM,EAAER,MAAM,EAAES,WAAW,EAAEL,UAAU,EAAEF,MAAM,EAAET,KAAK,EAAE;EAErG,IAAI,OAAOgB,WAAW,KAAK,QAAQ,EAAE;IACnChB,KAAK,GAAGS,MAAM;IACdA,MAAM,GAAGE,UAAU;IACnBA,UAAU,GAAGK,WAAW;IACxBA,WAAW,GAAGJ,SAAS;EACzB;EAEAD,UAAU,GAAG,IAAI,CAACM,OAAO,CAAC,YAAY,EAAEN,UAAU,CAAC;EAEnD,IAAIV,OAAO,GAAG;IACZc,MAAM,EAAEA,MAAM;IACdR,MAAM,EAAEA,MAAM;IACdE,MAAM,EAAEA,MAAM;IACdO,WAAW,EAAEA,WAAW;IACxBL,UAAU,EAAEA,UAAU;IACtBX,KAAK,EAAEA;EACT,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,mBAAmB,EAAED,OAAO,CAAC;EAExD,OAAOA,OAAO,CAACU,UAAU;AAC3B,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhC,QAAQ,CAACW,SAAS,CAAC4B,WAAW,GAAG,UAAStB,KAAK,EAAEuB,QAAQ,EAAEZ,MAAM,EAAES,WAAW,EAAEhB,KAAK,EAAE;EAErF,IAAI,OAAOgB,WAAW,KAAK,QAAQ,EAAE;IACnChB,KAAK,GAAGgB,WAAW;IACnBA,WAAW,GAAGJ,SAAS;EACzB;EAEAZ,KAAK,GAAGA,KAAK,IAAI,CAAC,CAAC;EAEnB,IAAIQ,MAAM,GAAGR,KAAK,CAACQ,MAAM;IACrBC,MAAM;IACNW,IAAI;EAERxB,KAAK,GAAG,IAAI,CAACqB,OAAO,CAAC,OAAO,EAAErB,KAAK,CAAC;EAEpC,IAAIY,MAAM,EAAE;IACVC,MAAM,GAAGF,MAAM,CAACE,MAAM;IACtBW,IAAI,GAAGb,MAAM;EACf,CAAC,MAAM;IACLE,MAAM,GAAGF,MAAM;EACjB;EAEA,IAAIN,OAAO,GAAG;IACZkB,QAAQ,EAAEA,QAAQ;IAClBvB,KAAK,EAAEA,KAAK;IACZa,MAAM,EAAEA,MAAM;IACdO,WAAW,EAAEA,WAAW;IACxBI,IAAI,EAAEA,IAAI;IACVpB,KAAK,EAAEA;EACT,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,cAAc,EAAED,OAAO,CAAC;EAEnD,OAAOA,OAAO,CAACL,KAAK;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjB,QAAQ,CAACW,SAAS,CAAC+B,cAAc,GAAG,UAASC,QAAQ,EAAEH,QAAQ,EAAEV,MAAM,EAAEO,WAAW,EAAEhB,KAAK,EAAE;EAC3F,IAAI,CAAC5C,OAAO,CAACkE,QAAQ,CAAC,EAAE;IACtBA,QAAQ,GAAG,CAAEA,QAAQ,CAAE;EACzB;EAEA,IAAI,OAAON,WAAW,KAAK,QAAQ,EAAE;IACnChB,KAAK,GAAGgB,WAAW;IACnBA,WAAW,GAAGJ,SAAS;EACzB;EAEAZ,KAAK,GAAGA,KAAK,IAAI,CAAC,CAAC;EAEnB,IAAIC,OAAO,GAAG;IACZkB,QAAQ,EAAEA,QAAQ;IAClBG,QAAQ,EAAEA,QAAQ;IAClBb,MAAM,EAAEA,MAAM;IACdO,WAAW,EAAEA,WAAW;IACxBhB,KAAK,EAAEA;EACT,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,iBAAiB,EAAED,OAAO,CAAC;EAEtD,OAAOA,OAAO,CAACqB,QAAQ;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3C,QAAQ,CAACW,SAAS,CAACiC,WAAW,GAAG,UAASC,WAAW,EAAEL,QAAQ,EAAEM,KAAK,EAAEhB,MAAM,EAAE;EAE9EgB,KAAK,GAAG,IAAI,CAACR,OAAO,CAAC,OAAO,EAAEQ,KAAK,CAAC;EAEpC,IAAIxB,OAAO,GAAG;IACZuB,WAAW,EAAEA,WAAW;IACxBL,QAAQ,EAAEA,QAAQ;IAClBV,MAAM,EAAEA,MAAM,IAAIe,WAAW,CAACf,MAAM;IACpCb,KAAK,EAAE6B;EACT,CAAC;EAED,IAAI,CAACxC,aAAa,CAACiB,OAAO,CAAC,cAAc,EAAED,OAAO,CAAC;EAEnD,OAAOA,OAAO,CAACL,KAAK;AACtB,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjB,QAAQ,CAACW,SAAS,CAACoC,WAAW,GAAG,UAASX,MAAM,EAAEnB,KAAK,EAAEuB,QAAQ,EAAEZ,MAAM,EAAEP,KAAK,EAAE;EAEhFA,KAAK,GAAGA,KAAK,IAAI,CAAC,CAAC;EAEnBJ,KAAK,GAAG,IAAI,CAACqB,OAAO,CAAC,OAAO,EAAErB,KAAK,CAAC;EAEpC,IAAIK,OAAO,GAAG;IACZc,MAAM,EAAEA,MAAM;IACdI,QAAQ,EAAEA,QAAQ;IAClBZ,MAAM,EAAEA,MAAM;IACdX,KAAK,EAAEA,KAAK;IACZe,UAAU,EAAEX,KAAK,CAACW,UAAU;IAC5BgB,gBAAgB,EAAE3B,KAAK,CAAC2B,gBAAgB;IACxC3B,KAAK,EAAEA;EACT,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,cAAc,EAAED,OAAO,CAAC;EAEnD,OAAOA,OAAO,CAACL,KAAK;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAjB,QAAQ,CAACW,SAAS,CAACsC,cAAc,GAAG,UAASN,QAAQ,EAAE;EACrD,IAAIrB,OAAO,GAAG;IACZqB,QAAQ,EAAEA;EACZ,CAAC;EAED,IAAI,CAACrC,aAAa,CAACiB,OAAO,CAAC,iBAAiB,EAAED,OAAO,CAAC;AACxD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACW,SAAS,CAACuC,kBAAkB,GAAG,UAASC,MAAM,EAAEC,IAAI,EAAEC,SAAS,EAAE;EACxE,IAAI/B,OAAO,GAAG;IACZ6B,MAAM,EAAEA,MAAM;IACdC,IAAI,EAAEA,IAAI;IACVC,SAAS,EAAEA;EACb,CAAC;EAED,IAAI,CAAC/C,aAAa,CAACiB,OAAO,CAAC,qBAAqB,EAAED,OAAO,CAAC;AAC5D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACW,SAAS,CAAC2C,WAAW,GAAG,UAASrC,KAAK,EAAEI,KAAK,EAAE;EACtD,IAAIC,OAAO,GAAG;IACZL,KAAK,EAAEA,KAAK;IACZI,KAAK,EAAEA,KAAK,IAAI,CAAC;EACnB,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,cAAc,EAAED,OAAO,CAAC;AACrD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACW,SAAS,CAAC4C,gBAAgB,GAAG,UAASvB,UAAU,EAAEX,KAAK,EAAE;EAChE,IAAIC,OAAO,GAAG;IACZU,UAAU,EAAEA,UAAU;IACtBX,KAAK,EAAEA,KAAK,IAAI,CAAC;EACnB,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,mBAAmB,EAAED,OAAO,CAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACW,SAAS,CAAC6C,YAAY,GAAG,UAASC,QAAQ,EAAEC,QAAQ,EAAErC,KAAK,EAAE;EACpE,IAAIC,OAAO,GAAG;IACZmC,QAAQ,EAAEA,QAAQ;IAClBE,OAAO,EAAED,QAAQ;IACjBrC,KAAK,EAAEA,KAAK,IAAI,CAAC;EACnB,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,eAAe,EAAED,OAAO,CAAC;EAEpD,OAAOA,OAAO,CAACoC,QAAQ;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA1D,QAAQ,CAACW,SAAS,CAACiD,aAAa,GAAG,UAASjB,QAAQ,EAAEkB,SAAS,EAAE;EAC/D,IAAIvC,OAAO,GAAG;IACZqB,QAAQ,EAAEA,QAAQ;IAClBkB,SAAS,EAAEA;EACb,CAAC;EAED,IAAI,CAACvD,aAAa,CAACiB,OAAO,CAAC,gBAAgB,EAAED,OAAO,CAAC;AACvD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACW,SAAS,CAACmD,WAAW,GAAG,UAAS7C,KAAK,EAAE8C,SAAS,EAAEC,SAAS,EAAE3C,KAAK,EAAE;EAC5E,IAAIC,OAAO,GAAG;IACZL,KAAK,EAAEA,KAAK;IACZ8C,SAAS,EAAEA,SAAS;IACpBC,SAAS,EAAEA,SAAS;IACpB3C,KAAK,EAAEA;EACT,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,cAAc,EAAED,OAAO,CAAC;AACrD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACW,SAAS,CAACsD,WAAW,GAAG,UAASC,YAAY,EAAEC,cAAc,EAAEjD,KAAK,EAAEkD,SAAS,EAAEC,KAAK,EAAE;EAC/F,IAAI/C,OAAO,GAAG;IACZJ,KAAK,EAAEA,KAAK;IACZkD,SAAS,EAAEA,SAAS;IACpBF,YAAY,EAAEA,YAAY;IAC1BC,cAAc,EAAEA,cAAc;IAC9BE,KAAK,EAAEA;EACT,CAAC;EAED,IAAI,CAAC/D,aAAa,CAACiB,OAAO,CAAC,WAAW,EAAED,OAAO,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACW,SAAS,CAAC2D,eAAe,GAAG,UAAStC,UAAU,EAAEuC,YAAY,EAAElD,KAAK,EAAE;EAC7E,IAAIC,OAAO,GAAG;IACZU,UAAU,EAAEA,UAAU;IACtBuC,YAAY,EAAEA,YAAY;IAC1BlD,KAAK,EAAEA,KAAK,IAAI,CAAC;EACnB,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,4BAA4B,EAAED,OAAO,CAAC;AACnE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACW,SAAS,CAAC6D,SAAS,GAAG,UAASxC,UAAU,EAAEI,MAAM,EAAER,MAAM,EAAE6C,eAAe,EAAEpD,KAAK,EAAE;EAC1F,IAAIC,OAAO,GAAG;IACZU,UAAU,EAAEA,UAAU;IACtB0C,SAAS,EAAEtC,MAAM;IACjBuC,SAAS,EAAE/C,MAAM;IACjB6C,eAAe,EAAEA,eAAe;IAChCpD,KAAK,EAAEA,KAAK,IAAI,CAAC;EACnB,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,sBAAsB,EAAED,OAAO,CAAC;AAC7D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACW,SAAS,CAACiE,cAAc,GAAG,UAAS5C,UAAU,EAAE0C,SAAS,EAAED,eAAe,EAAEpD,KAAK,EAAE;EAC1F,IAAI,CAACA,KAAK,EAAE;IACVA,KAAK,GAAG,CAAC,CAAC;EACZ;EAEA,IAAI,CAACmD,SAAS,CAACxC,UAAU,EAAE0C,SAAS,EAAE1C,UAAU,CAACJ,MAAM,EAAE6C,eAAe,EAAElG,MAAM,CAAC8C,KAAK,EAAE;IACtFwD,OAAO,EAAE;EACX,CAAC,CAAC,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA7E,QAAQ,CAACW,SAAS,CAACmE,YAAY,GAAG,UAAS9C,UAAU,EAAE2C,SAAS,EAAEF,eAAe,EAAEpD,KAAK,EAAE;EACxF,IAAI,CAACA,KAAK,EAAE;IACVA,KAAK,GAAG,CAAC,CAAC;EACZ;EAEA,IAAI,CAACmD,SAAS,CAACxC,UAAU,EAAEA,UAAU,CAACI,MAAM,EAAEuC,SAAS,EAAEF,eAAe,EAAElG,MAAM,CAAC8C,KAAK,EAAE;IACtFwD,OAAO,EAAE;EACX,CAAC,CAAC,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA7E,QAAQ,CAACW,SAAS,CAACoE,OAAO,GAAG,UAAS3C,MAAM,EAAER,MAAM,EAAEoD,KAAK,EAAE3D,KAAK,EAAE;EAClE,OAAO,IAAI,CAACc,gBAAgB,CAACC,MAAM,EAAER,MAAM,EAAEoD,KAAK,IAAI,CAAC,CAAC,EAAE5C,MAAM,CAACN,MAAM,EAAET,KAAK,CAAC;AACjF,CAAC;AAEDrB,QAAQ,CAACW,SAAS,CAAC2B,OAAO,GAAG,UAAS2C,IAAI,EAAED,KAAK,EAAE;EACjD,IAAIjF,cAAc,CAACiF,KAAK,CAAC,EAAE;IACzB,OAAOA,KAAK;EACd,CAAC,MAAM;IACL,OAAO,IAAI,CAAC3E,eAAe,CAAC6E,MAAM,CAACD,IAAI,EAAED,KAAK,CAAC;EACjD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAhF,QAAQ,CAACW,SAAS,CAACwE,cAAc,GAAG,UAASlE,KAAK,EAAEI,KAAK,EAAE;EACzD,IAAIC,OAAO,GAAG;IACZL,KAAK,EAAEA,KAAK;IACZI,KAAK,EAAEA,KAAK,IAAI,CAAC;EACnB,CAAC;EAED,IAAI,CAACf,aAAa,CAACiB,OAAO,CAAC,sBAAsB,EAAED,OAAO,CAAC;AAC7D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}