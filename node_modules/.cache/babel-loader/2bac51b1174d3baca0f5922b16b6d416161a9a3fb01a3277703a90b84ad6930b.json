{"ast":null,"code":"/**\n * @typedef {import('../../core/Types').ConnectionLike} Connection\n * @typedef {import('../../core/Types').ShapeLike} Shape\n *\n * @typedef {import('../../util/Types').Axis} Axis\n * @typedef {import('../../util/Types').Direction} Direction\n * @typedef {import('../../util/Types').Point} Point\n * @typedef {import('../../util/Types').Rect} Rect\n */\n\nimport { forEach } from 'min-dash';\n\n/**\n * Return direction given axis and delta.\n *\n * @param {Axis} axis\n * @param {number} delta\n *\n * @return {Direction}\n */\nexport function getDirection(axis, delta) {\n  if (axis === 'x') {\n    if (delta > 0) {\n      return 'e';\n    }\n    if (delta < 0) {\n      return 'w';\n    }\n  }\n  if (axis === 'y') {\n    if (delta > 0) {\n      return 's';\n    }\n    if (delta < 0) {\n      return 'n';\n    }\n  }\n  return null;\n}\n\n/**\n * Returns connections whose waypoints are to be updated. Waypoints are to be updated if start\n * or end is to be moved or resized.\n *\n * @param {Array<Shape>} movingShapes\n * @param {Array<Shape>} resizingShapes\n *\n * @return {Array<Connection>}\n */\nexport function getWaypointsUpdatingConnections(movingShapes, resizingShapes) {\n  var waypointsUpdatingConnections = [];\n  forEach(movingShapes.concat(resizingShapes), function (shape) {\n    var incoming = shape.incoming,\n      outgoing = shape.outgoing;\n    forEach(incoming.concat(outgoing), function (connection) {\n      var source = connection.source,\n        target = connection.target;\n      if (includes(movingShapes, source) || includes(movingShapes, target) || includes(resizingShapes, source) || includes(resizingShapes, target)) {\n        if (!includes(waypointsUpdatingConnections, connection)) {\n          waypointsUpdatingConnections.push(connection);\n        }\n      }\n    });\n  });\n  return waypointsUpdatingConnections;\n}\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}\n\n/**\n * Resize bounds.\n *\n * @param {Rect} bounds\n * @param {Direction} direction\n * @param {Point} delta\n *\n * @return {Rect}\n */\nexport function resizeBounds(bounds, direction, delta) {\n  var x = bounds.x,\n    y = bounds.y,\n    width = bounds.width,\n    height = bounds.height,\n    dx = delta.x,\n    dy = delta.y;\n  switch (direction) {\n    case 'n':\n      return {\n        x: x,\n        y: y + dy,\n        width: width,\n        height: height - dy\n      };\n    case 's':\n      return {\n        x: x,\n        y: y,\n        width: width,\n        height: height + dy\n      };\n    case 'w':\n      return {\n        x: x + dx,\n        y: y,\n        width: width - dx,\n        height: height\n      };\n    case 'e':\n      return {\n        x: x,\n        y: y,\n        width: width + dx,\n        height: height\n      };\n    default:\n      throw new Error('unknown direction: ' + direction);\n  }\n}","map":{"version":3,"names":["forEach","getDirection","axis","delta","getWaypointsUpdatingConnections","movingShapes","resizingShapes","waypointsUpdatingConnections","concat","shape","incoming","outgoing","connection","source","target","includes","push","array","item","indexOf","resizeBounds","bounds","direction","x","y","width","height","dx","dy","Error"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/space-tool/SpaceUtil.js"],"sourcesContent":["/**\n * @typedef {import('../../core/Types').ConnectionLike} Connection\n * @typedef {import('../../core/Types').ShapeLike} Shape\n *\n * @typedef {import('../../util/Types').Axis} Axis\n * @typedef {import('../../util/Types').Direction} Direction\n * @typedef {import('../../util/Types').Point} Point\n * @typedef {import('../../util/Types').Rect} Rect\n */\n\nimport { forEach } from 'min-dash';\n\n/**\n * Return direction given axis and delta.\n *\n * @param {Axis} axis\n * @param {number} delta\n *\n * @return {Direction}\n */\nexport function getDirection(axis, delta) {\n\n  if (axis === 'x') {\n    if (delta > 0) {\n      return 'e';\n    }\n\n    if (delta < 0) {\n      return 'w';\n    }\n  }\n\n  if (axis === 'y') {\n    if (delta > 0) {\n      return 's';\n    }\n\n    if (delta < 0) {\n      return 'n';\n    }\n  }\n\n  return null;\n}\n\n/**\n * Returns connections whose waypoints are to be updated. Waypoints are to be updated if start\n * or end is to be moved or resized.\n *\n * @param {Array<Shape>} movingShapes\n * @param {Array<Shape>} resizingShapes\n *\n * @return {Array<Connection>}\n */\nexport function getWaypointsUpdatingConnections(movingShapes, resizingShapes) {\n  var waypointsUpdatingConnections = [];\n\n  forEach(movingShapes.concat(resizingShapes), function(shape) {\n    var incoming = shape.incoming,\n        outgoing = shape.outgoing;\n\n    forEach(incoming.concat(outgoing), function(connection) {\n      var source = connection.source,\n          target = connection.target;\n\n      if (includes(movingShapes, source) ||\n        includes(movingShapes, target) ||\n        includes(resizingShapes, source) ||\n        includes(resizingShapes, target)) {\n\n        if (!includes(waypointsUpdatingConnections, connection)) {\n          waypointsUpdatingConnections.push(connection);\n        }\n      }\n    });\n  });\n\n  return waypointsUpdatingConnections;\n}\n\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}\n\n/**\n * Resize bounds.\n *\n * @param {Rect} bounds\n * @param {Direction} direction\n * @param {Point} delta\n *\n * @return {Rect}\n */\nexport function resizeBounds(bounds, direction, delta) {\n  var x = bounds.x,\n      y = bounds.y,\n      width = bounds.width,\n      height = bounds.height,\n      dx = delta.x,\n      dy = delta.y;\n\n  switch (direction) {\n  case 'n':\n    return {\n      x: x,\n      y: y + dy,\n      width: width,\n      height: height - dy\n    };\n  case 's':\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height + dy\n    };\n  case 'w':\n    return {\n      x: x + dx,\n      y: y,\n      width: width - dx,\n      height: height\n    };\n  case 'e':\n    return {\n      x: x,\n      y: y,\n      width: width + dx,\n      height: height\n    };\n  default:\n    throw new Error('unknown direction: ' + direction);\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,QAAQ,UAAU;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,IAAI,EAAEC,KAAK,EAAE;EAExC,IAAID,IAAI,KAAK,GAAG,EAAE;IAChB,IAAIC,KAAK,GAAG,CAAC,EAAE;MACb,OAAO,GAAG;IACZ;IAEA,IAAIA,KAAK,GAAG,CAAC,EAAE;MACb,OAAO,GAAG;IACZ;EACF;EAEA,IAAID,IAAI,KAAK,GAAG,EAAE;IAChB,IAAIC,KAAK,GAAG,CAAC,EAAE;MACb,OAAO,GAAG;IACZ;IAEA,IAAIA,KAAK,GAAG,CAAC,EAAE;MACb,OAAO,GAAG;IACZ;EACF;EAEA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,+BAA+BA,CAACC,YAAY,EAAEC,cAAc,EAAE;EAC5E,IAAIC,4BAA4B,GAAG,EAAE;EAErCP,OAAO,CAACK,YAAY,CAACG,MAAM,CAACF,cAAc,CAAC,EAAE,UAASG,KAAK,EAAE;IAC3D,IAAIC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;MACzBC,QAAQ,GAAGF,KAAK,CAACE,QAAQ;IAE7BX,OAAO,CAACU,QAAQ,CAACF,MAAM,CAACG,QAAQ,CAAC,EAAE,UAASC,UAAU,EAAE;MACtD,IAAIC,MAAM,GAAGD,UAAU,CAACC,MAAM;QAC1BC,MAAM,GAAGF,UAAU,CAACE,MAAM;MAE9B,IAAIC,QAAQ,CAACV,YAAY,EAAEQ,MAAM,CAAC,IAChCE,QAAQ,CAACV,YAAY,EAAES,MAAM,CAAC,IAC9BC,QAAQ,CAACT,cAAc,EAAEO,MAAM,CAAC,IAChCE,QAAQ,CAACT,cAAc,EAAEQ,MAAM,CAAC,EAAE;QAElC,IAAI,CAACC,QAAQ,CAACR,4BAA4B,EAAEK,UAAU,CAAC,EAAE;UACvDL,4BAA4B,CAACS,IAAI,CAACJ,UAAU,CAAC;QAC/C;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOL,4BAA4B;AACrC;AAEA,SAASQ,QAAQA,CAACE,KAAK,EAAEC,IAAI,EAAE;EAC7B,OAAOD,KAAK,CAACE,OAAO,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,YAAYA,CAACC,MAAM,EAAEC,SAAS,EAAEnB,KAAK,EAAE;EACrD,IAAIoB,CAAC,GAAGF,MAAM,CAACE,CAAC;IACZC,CAAC,GAAGH,MAAM,CAACG,CAAC;IACZC,KAAK,GAAGJ,MAAM,CAACI,KAAK;IACpBC,MAAM,GAAGL,MAAM,CAACK,MAAM;IACtBC,EAAE,GAAGxB,KAAK,CAACoB,CAAC;IACZK,EAAE,GAAGzB,KAAK,CAACqB,CAAC;EAEhB,QAAQF,SAAS;IACjB,KAAK,GAAG;MACN,OAAO;QACLC,CAAC,EAAEA,CAAC;QACJC,CAAC,EAAEA,CAAC,GAAGI,EAAE;QACTH,KAAK,EAAEA,KAAK;QACZC,MAAM,EAAEA,MAAM,GAAGE;MACnB,CAAC;IACH,KAAK,GAAG;MACN,OAAO;QACLL,CAAC,EAAEA,CAAC;QACJC,CAAC,EAAEA,CAAC;QACJC,KAAK,EAAEA,KAAK;QACZC,MAAM,EAAEA,MAAM,GAAGE;MACnB,CAAC;IACH,KAAK,GAAG;MACN,OAAO;QACLL,CAAC,EAAEA,CAAC,GAAGI,EAAE;QACTH,CAAC,EAAEA,CAAC;QACJC,KAAK,EAAEA,KAAK,GAAGE,EAAE;QACjBD,MAAM,EAAEA;MACV,CAAC;IACH,KAAK,GAAG;MACN,OAAO;QACLH,CAAC,EAAEA,CAAC;QACJC,CAAC,EAAEA,CAAC;QACJC,KAAK,EAAEA,KAAK,GAAGE,EAAE;QACjBD,MAAM,EAAEA;MACV,CAAC;IACH;MACE,MAAM,IAAIG,KAAK,CAAC,qBAAqB,GAAGP,SAAS,CAAC;EACpD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}