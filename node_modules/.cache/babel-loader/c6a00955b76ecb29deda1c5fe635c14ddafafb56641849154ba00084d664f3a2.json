{"ast":null,"code":"/**\n * Service for managing DAK branch context in session storage\n * Stores selected branch per repository to maintain context during DAK editing\n */class BranchContextService{constructor(){this.storageKey='sgex_branch_context';}// Get the storage key for a specific repository\ngetRepositoryKey(repository){var _repository$owner,_repository$full_name;if(!repository||!repository.name)return null;const owner=((_repository$owner=repository.owner)===null||_repository$owner===void 0?void 0:_repository$owner.login)||((_repository$full_name=repository.full_name)===null||_repository$full_name===void 0?void 0:_repository$full_name.split('/')[0]);if(!owner)return null;return\"\".concat(owner,\"/\").concat(repository.name);}// Get the selected branch for a repository\ngetSelectedBranch(repository){if(!repository)return null;try{const branchContext=this.getBranchContext();const repoKey=this.getRepositoryKey(repository);return branchContext[repoKey]||null;}catch(error){console.warn('Failed to get branch context:',error);return null;}}// Set the selected branch for a repository\nsetSelectedBranch(repository,branch){if(!repository||!branch)return;try{const branchContext=this.getBranchContext();const repoKey=this.getRepositoryKey(repository);branchContext[repoKey]=branch;this.setBranchContext(branchContext);}catch(error){console.warn('Failed to set branch context:',error);}}// Clear branch context for a specific repository\nclearRepositoryBranch(repository){if(!repository)return;try{const branchContext=this.getBranchContext();const repoKey=this.getRepositoryKey(repository);delete branchContext[repoKey];this.setBranchContext(branchContext);}catch(error){console.warn('Failed to clear repository branch context:',error);}}// Clear all branch context (e.g., on logout)\nclearAllBranchContext(){try{sessionStorage.removeItem(this.storageKey);}catch(error){console.warn('Failed to clear branch context:',error);}}// Get all branch context from storage\ngetBranchContext(){try{const stored=sessionStorage.getItem(this.storageKey);return stored?JSON.parse(stored):{};}catch(error){console.warn('Failed to parse branch context from storage:',error);return{};}}// Set branch context to storage\nsetBranchContext(context){try{sessionStorage.setItem(this.storageKey,JSON.stringify(context));}catch(error){console.warn('Failed to save branch context to storage:',error);}}// Get default branch name (prefer 'main' over 'master')\ngetDefaultBranchName(repository){let availableBranches=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];if(!repository)return'main';// First try 'main'\nif(availableBranches.some(b=>b.name==='main')){return'main';}// Then try the repository's default branch\nif(repository.default_branch&&availableBranches.some(b=>b.name===repository.default_branch)){return repository.default_branch;}// Finally fall back to the first available branch or 'main'\nreturn availableBranches.length>0?availableBranches[0].name:'main';}// Check if a branch context exists for a repository\nhasBranchContext(repository){return this.getSelectedBranch(repository)!==null;}// Get a formatted display string for the current branch context\ngetBranchDisplayInfo(repository){const selectedBranch=this.getSelectedBranch(repository);if(!selectedBranch)return null;const isDefault=selectedBranch===((repository===null||repository===void 0?void 0:repository.default_branch)||'main');return{branch:selectedBranch,isDefault,displayText:isDefault?\"\".concat(selectedBranch,\" (default)\"):selectedBranch};}}// Create a singleton instance\nconst branchContextService=new BranchContextService();export default branchContextService;","map":{"version":3,"names":["BranchContextService","constructor","storageKey","getRepositoryKey","repository","_repository$owner","_repository$full_name","name","owner","login","full_name","split","concat","getSelectedBranch","branchContext","getBranchContext","repoKey","error","console","warn","setSelectedBranch","branch","setBranchContext","clearRepositoryBranch","clearAllBranchContext","sessionStorage","removeItem","stored","getItem","JSON","parse","context","setItem","stringify","getDefaultBranchName","availableBranches","arguments","length","undefined","some","b","default_branch","hasBranchContext","getBranchDisplayInfo","selectedBranch","isDefault","displayText","branchContextService"],"sources":["/home/runner/work/sgex/sgex/src/services/branchContextService.js"],"sourcesContent":["/**\n * Service for managing DAK branch context in session storage\n * Stores selected branch per repository to maintain context during DAK editing\n */\n\nclass BranchContextService {\n  constructor() {\n    this.storageKey = 'sgex_branch_context';\n  }\n\n  // Get the storage key for a specific repository\n  getRepositoryKey(repository) {\n    if (!repository || !repository.name) return null;\n    const owner = repository.owner?.login || repository.full_name?.split('/')[0];\n    if (!owner) return null;\n    return `${owner}/${repository.name}`;\n  }\n\n  // Get the selected branch for a repository\n  getSelectedBranch(repository) {\n    if (!repository) return null;\n    \n    try {\n      const branchContext = this.getBranchContext();\n      const repoKey = this.getRepositoryKey(repository);\n      return branchContext[repoKey] || null;\n    } catch (error) {\n      console.warn('Failed to get branch context:', error);\n      return null;\n    }\n  }\n\n  // Set the selected branch for a repository\n  setSelectedBranch(repository, branch) {\n    if (!repository || !branch) return;\n\n    try {\n      const branchContext = this.getBranchContext();\n      const repoKey = this.getRepositoryKey(repository);\n      branchContext[repoKey] = branch;\n      this.setBranchContext(branchContext);\n    } catch (error) {\n      console.warn('Failed to set branch context:', error);\n    }\n  }\n\n  // Clear branch context for a specific repository\n  clearRepositoryBranch(repository) {\n    if (!repository) return;\n\n    try {\n      const branchContext = this.getBranchContext();\n      const repoKey = this.getRepositoryKey(repository);\n      delete branchContext[repoKey];\n      this.setBranchContext(branchContext);\n    } catch (error) {\n      console.warn('Failed to clear repository branch context:', error);\n    }\n  }\n\n  // Clear all branch context (e.g., on logout)\n  clearAllBranchContext() {\n    try {\n      sessionStorage.removeItem(this.storageKey);\n    } catch (error) {\n      console.warn('Failed to clear branch context:', error);\n    }\n  }\n\n  // Get all branch context from storage\n  getBranchContext() {\n    try {\n      const stored = sessionStorage.getItem(this.storageKey);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.warn('Failed to parse branch context from storage:', error);\n      return {};\n    }\n  }\n\n  // Set branch context to storage\n  setBranchContext(context) {\n    try {\n      sessionStorage.setItem(this.storageKey, JSON.stringify(context));\n    } catch (error) {\n      console.warn('Failed to save branch context to storage:', error);\n    }\n  }\n\n  // Get default branch name (prefer 'main' over 'master')\n  getDefaultBranchName(repository, availableBranches = []) {\n    if (!repository) return 'main';\n\n    // First try 'main'\n    if (availableBranches.some(b => b.name === 'main')) {\n      return 'main';\n    }\n\n    // Then try the repository's default branch\n    if (repository.default_branch && \n        availableBranches.some(b => b.name === repository.default_branch)) {\n      return repository.default_branch;\n    }\n\n    // Finally fall back to the first available branch or 'main'\n    return availableBranches.length > 0 ? availableBranches[0].name : 'main';\n  }\n\n  // Check if a branch context exists for a repository\n  hasBranchContext(repository) {\n    return this.getSelectedBranch(repository) !== null;\n  }\n\n  // Get a formatted display string for the current branch context\n  getBranchDisplayInfo(repository) {\n    const selectedBranch = this.getSelectedBranch(repository);\n    if (!selectedBranch) return null;\n\n    const isDefault = selectedBranch === (repository?.default_branch || 'main');\n    return {\n      branch: selectedBranch,\n      isDefault,\n      displayText: isDefault ? `${selectedBranch} (default)` : selectedBranch\n    };\n  }\n}\n\n// Create a singleton instance\nconst branchContextService = new BranchContextService();\n\nexport default branchContextService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}