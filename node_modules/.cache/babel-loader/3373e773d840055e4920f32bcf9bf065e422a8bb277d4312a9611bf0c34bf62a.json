{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/runner/work/sgex/sgex/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAdditionalItems = void 0;\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n  message: _ref => {\n    let {\n      params: {\n        len\n      }\n    } = _ref;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must NOT have more than \", \" items\"])), len);\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        len\n      }\n    } = _ref2;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{limit: \", \"}\"])), len);\n  }\n};\nconst def = {\n  keyword: \"additionalItems\",\n  type: \"array\",\n  schemaType: [\"boolean\", \"object\"],\n  before: \"uniqueItems\",\n  error,\n  code(cxt) {\n    const {\n      parentSchema,\n      it\n    } = cxt;\n    const {\n      items\n    } = parentSchema;\n    if (!Array.isArray(items)) {\n      (0, util_1.checkStrictMode)(it, '\"additionalItems\" is ignored when \"items\" is not an array of schemas');\n      return;\n    }\n    validateAdditionalItems(cxt, items);\n  }\n};\nfunction validateAdditionalItems(cxt, items) {\n  const {\n    gen,\n    schema,\n    data,\n    keyword,\n    it\n  } = cxt;\n  it.items = true;\n  const len = gen.const(\"len\", (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \".length\"])), data));\n  if (schema === false) {\n    cxt.setParams({\n      len: items.length\n    });\n    cxt.pass((0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \" <= \", \"\"])), len, items.length));\n  } else if (typeof schema == \"object\" && !(0, util_1.alwaysValidSchema)(it, schema)) {\n    const valid = gen.var(\"valid\", (0, codegen_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \" <= \", \"\"])), len, items.length)); // TODO var\n    gen.if((0, codegen_1.not)(valid), () => validateItems(valid));\n    cxt.ok(valid);\n  }\n  function validateItems(valid) {\n    gen.forRange(\"i\", items.length, len, i => {\n      cxt.subschema({\n        keyword,\n        dataProp: i,\n        dataPropType: util_1.Type.Num\n      }, valid);\n      if (!it.allErrors) gen.if((0, codegen_1.not)(valid), () => gen.break());\n    });\n  }\n}\nexports.validateAdditionalItems = validateAdditionalItems;\nexports.default = def;","map":{"version":3,"names":["codegen_1","require","util_1","error","message","_ref","params","len","str","_templateObject","_taggedTemplateLiteral","_ref2","_","_templateObject2","def","keyword","type","schemaType","before","code","cxt","parentSchema","it","items","Array","isArray","checkStrictMode","validateAdditionalItems","gen","schema","data","const","_templateObject3","setParams","length","pass","_templateObject4","alwaysValidSchema","valid","var","_templateObject5","if","not","validateItems","ok","forRange","i","subschema","dataProp","dataPropType","Type","Num","allErrors","break","exports","default"],"sources":["/home/runner/work/sgex/sgex/node_modules/ajv/lib/vocabularies/applicator/additionalItems.ts"],"sourcesContent":["import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, not, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema, checkStrictMode, Type} from \"../../compile/util\"\n\nexport type AdditionalItemsError = ErrorObject<\"additionalItems\", {limit: number}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {len}}) => str`must NOT have more than ${len} items`,\n  params: ({params: {len}}) => _`{limit: ${len}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"additionalItems\" as const,\n  type: \"array\",\n  schemaType: [\"boolean\", \"object\"],\n  before: \"uniqueItems\",\n  error,\n  code(cxt: KeywordCxt) {\n    const {parentSchema, it} = cxt\n    const {items} = parentSchema\n    if (!Array.isArray(items)) {\n      checkStrictMode(it, '\"additionalItems\" is ignored when \"items\" is not an array of schemas')\n      return\n    }\n    validateAdditionalItems(cxt, items)\n  },\n}\n\nexport function validateAdditionalItems(cxt: KeywordCxt, items: AnySchema[]): void {\n  const {gen, schema, data, keyword, it} = cxt\n  it.items = true\n  const len = gen.const(\"len\", _`${data}.length`)\n  if (schema === false) {\n    cxt.setParams({len: items.length})\n    cxt.pass(_`${len} <= ${items.length}`)\n  } else if (typeof schema == \"object\" && !alwaysValidSchema(it, schema)) {\n    const valid = gen.var(\"valid\", _`${len} <= ${items.length}`) // TODO var\n    gen.if(not(valid), () => validateItems(valid))\n    cxt.ok(valid)\n  }\n\n  function validateItems(valid: Name): void {\n    gen.forRange(\"i\", items.length, len, (i) => {\n      cxt.subschema({keyword, dataProp: i, dataPropType: Type.Num}, valid)\n      if (!it.allErrors) gen.if(not(valid), () => gen.break())\n    })\n  }\n}\n\nexport default def\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}