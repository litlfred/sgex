{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import{PageLayout}from'./framework';import HelpModal from'./HelpModal';import PATLogin from'./PATLogin';import WorkflowStatus from'./WorkflowStatus';import githubActionsService from'../services/githubActionsService';import branchListingCacheService from'../services/branchListingCacheService';import useThemeImage from'../hooks/useThemeImage';import'./BranchListing.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BranchListing=()=>{const[pullRequests,setPullRequests]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[prPage,setPrPage]=useState(1);const[prSearchTerm,setPrSearchTerm]=useState('');const[prSortBy,setPrSortBy]=useState('updated');// updated, number, alphabetical\nconst[showContributeModal,setShowContributeModal]=useState(false);const[deploymentStatuses,setDeploymentStatuses]=useState({});const[prFilter,setPrFilter]=useState('open');// 'open', 'closed', 'all'\nconst[isAuthenticated,setIsAuthenticated]=useState(false);const[githubToken,setGithubToken]=useState(null);const[prComments,setPrComments]=useState({});const[commentInputs,setCommentInputs]=useState({});const[submittingComments,setSubmittingComments]=useState({});const[expandedDiscussions,setExpandedDiscussions]=useState({});const[discussionSummaries,setDiscussionSummaries]=useState({});const[loadingSummaries,setLoadingSummaries]=useState(false);const[workflowStatuses,setWorkflowStatuses]=useState({});const[loadingWorkflowStatuses,setLoadingWorkflowStatuses]=useState(false);const[isRefreshing,setIsRefreshing]=useState(false);const[cacheInfo,setCacheInfo]=useState(null);// Theme-aware mascot image\nconst mascotImage=useThemeImage('sgex-mascot.png');const ITEMS_PER_PAGE=10;const GITHUB_OWNER='litlfred';const GITHUB_REPO='sgex';// Function to manually refresh cache and reload data\nconst handleManualRefresh=useCallback(async()=>{setIsRefreshing(true);// Clear the cache to force fresh data\nbranchListingCacheService.forceRefresh(GITHUB_OWNER,GITHUB_REPO);// The fetchData function will be called by the useEffect when isRefreshing changes\n},[]);// GitHub authentication functions\nconst handleAuthSuccess=(token,octokitInstance)=>{setGithubToken(token);setIsAuthenticated(true);// Store token for session\nsessionStorage.setItem('github_token',token);// Set token for GitHub Actions service\ngithubActionsService.setToken(token);};const handleLogout=()=>{setGithubToken(null);setIsAuthenticated(false);sessionStorage.removeItem('github_token');// Clear token from GitHub Actions service\ngithubActionsService.setToken(null);};// Function to fetch PR comments summary\nconst fetchPRCommentsSummary=useCallback(async prNumber=>{// Allow fetching comments even without authentication for read-only access\ntry{const headers={'Accept':'application/vnd.github.v3+json'};// Add authorization header only if token is available\nif(githubToken){headers['Authorization']=`token ${githubToken}`;}const response=await fetch(`https://api.github.com/repos/litlfred/sgex/issues/${prNumber}/comments`,{headers});if(!response.ok){throw new Error(`Failed to fetch comments: ${response.status}`);}const comments=await response.json();if(comments.length===0){return{count:0,lastComment:null};}const lastComment=comments[comments.length-1];return{count:comments.length,lastComment:{author:lastComment.user.login,created_at:new Date(lastComment.created_at),avatar_url:lastComment.user.avatar_url}};}catch(error){console.error(`Error fetching comment summary for PR ${prNumber}:`,error);return null;}},[githubToken]);// Function to fetch all PR comments (for expanded view)\nconst fetchAllPRComments=useCallback(async prNumber=>{// Allow fetching comments even without authentication for read-only access\ntry{const headers={'Accept':'application/vnd.github.v3+json'};// Add authorization header only if token is available\nif(githubToken){headers['Authorization']=`token ${githubToken}`;}const response=await fetch(`https://api.github.com/repos/litlfred/sgex/issues/${prNumber}/comments`,{headers});if(!response.ok){throw new Error(`Failed to fetch comments: ${response.status}`);}const comments=await response.json();return comments.map(comment=>({id:comment.id,author:comment.user.login,body:comment.body,created_at:new Date(comment.created_at).toLocaleDateString(),avatar_url:comment.user.avatar_url}));}catch(error){console.error(`Error fetching all comments for PR ${prNumber}:`,error);return[];}},[githubToken]);// Function to load discussion summaries for visible PRs\nconst loadDiscussionSummaries=useCallback(async prs=>{if(prs.length===0)return;setLoadingSummaries(true);const summaries={};for(const pr of prs){summaries[pr.number]=await fetchPRCommentsSummary(pr.number);}setDiscussionSummaries(summaries);setLoadingSummaries(false);},[fetchPRCommentsSummary]);// Function to toggle discussion expansion\nconst toggleDiscussion=async prNumber=>{const isExpanded=expandedDiscussions[prNumber];if(!isExpanded){// Load all comments when expanding\nconst comments=await fetchAllPRComments(prNumber);setPrComments(prev=>({...prev,[prNumber]:comments}));}setExpandedDiscussions(prev=>({...prev,[prNumber]:!isExpanded}));};// Function to get discussion summary text\nconst getDiscussionSummaryText=prNumber=>{const summary=discussionSummaries[prNumber];if(loadingSummaries){return\"Loading discussion...\";}if(!summary||summary.count===0){return\"No comments yet\";}const{count,lastComment}=summary;const timeAgo=lastComment?getTimeAgo(lastComment.created_at):'';return`${count} comment${count>1?'s':''}, last by ${lastComment.author} ${timeAgo}`;};// Helper function to get relative time\nconst getTimeAgo=date=>{const now=new Date();const diffMs=now-date;const diffDays=Math.floor(diffMs/(1000*60*60*24));if(diffDays===0)return'today';if(diffDays===1)return'1 day ago';if(diffDays<7)return`${diffDays} days ago`;if(diffDays<30)return`${Math.floor(diffDays/7)} week${Math.floor(diffDays/7)>1?'s':''} ago`;return`${Math.floor(diffDays/30)} month${Math.floor(diffDays/30)>1?'s':''} ago`;};// Function to submit a comment\nconst submitComment=async(prNumber,commentText)=>{if(!githubToken||!commentText.trim())return false;setSubmittingComments(prev=>({...prev,[prNumber]:true}));try{const response=await fetch(`https://api.github.com/repos/litlfred/sgex/issues/${prNumber}/comments`,{method:'POST',headers:{'Authorization':`token ${githubToken}`,'Accept':'application/vnd.github.v3+json','Content-Type':'application/json'},body:JSON.stringify({body:commentText})});if(!response.ok){throw new Error(`Failed to submit comment: ${response.status}`);}// Clear the comment input\nsetCommentInputs(prev=>({...prev,[prNumber]:''}));// Refresh both full comments (if expanded) and summary\nif(expandedDiscussions[prNumber]){const updatedComments=await fetchAllPRComments(prNumber);setPrComments(prev=>({...prev,[prNumber]:updatedComments}));}// Refresh the discussion summary\nconst updatedSummary=await fetchPRCommentsSummary(prNumber);setDiscussionSummaries(prev=>({...prev,[prNumber]:updatedSummary}));return true;}catch(error){console.error(`Error submitting comment for PR ${prNumber}:`,error);return false;}finally{setSubmittingComments(prev=>({...prev,[prNumber]:false}));}};// Function to load workflow statuses for PR branches\nconst loadWorkflowStatuses=useCallback(async prData=>{if(!githubToken)return;setLoadingWorkflowStatuses(true);try{// Get all PR branch names\nconst branchNames=prData.map(pr=>pr.branchName);const uniqueBranchNames=[...new Set(branchNames)];const statuses=await githubActionsService.getWorkflowStatusForBranches(uniqueBranchNames);setWorkflowStatuses(statuses);}catch(error){console.error('Error loading workflow statuses:',error);}finally{setLoadingWorkflowStatuses(false);}},[githubToken]);// Function to trigger workflow for a branch\nconst triggerWorkflow=useCallback(async branchName=>{if(!githubToken){alert('Please authenticate to trigger workflows');return;}try{const success=await githubActionsService.triggerWorkflow(branchName);if(success){alert(`Workflow triggered for branch: ${branchName}`);// Refresh workflow statuses after a short delay\nsetTimeout(()=>{const currentPRs=pullRequests.length>0?pullRequests:[];loadWorkflowStatuses(currentPRs);},2000);}else{alert(`Failed to trigger workflow for branch: ${branchName}`);}}catch(error){console.error('Error triggering workflow:',error);alert(`Error triggering workflow: ${error.message}`);}},[githubToken,pullRequests,loadWorkflowStatuses]);// Check for existing authentication on component mount\nuseEffect(()=>{const token=sessionStorage.getItem('github_token');if(token){setGithubToken(token);setIsAuthenticated(true);// Set token for GitHub Actions service\ngithubActionsService.setToken(token);}},[]);// Function to check deployment status\nconst checkDeploymentStatus=async url=>{try{const response=await fetch(url,{method:'HEAD'});if(response.ok){return'active';}else if(response.status===404){return'not-found';}else{return'errored';}}catch(error){return'errored';}};// Function to check deployment statuses for PRs only\nconst checkAllDeploymentStatuses=useCallback(async prData=>{const statuses={};// Check PRs only\nfor(const pr of prData){const status=await checkDeploymentStatus(pr.url);statuses[`pr-${pr.id}`]=status;}setDeploymentStatuses(statuses);},[]);// Function to copy URL to clipboard\nconst copyToClipboard=async(url,type,name)=>{try{await navigator.clipboard.writeText(url);// You could add a toast notification here\nconsole.log(`Copied ${type} URL for ${name} to clipboard`);}catch(error){// Fallback for browsers that don't support clipboard API\nconst textArea=document.createElement('textarea');textArea.value=url;document.body.appendChild(textArea);textArea.select();document.execCommand('copy');document.body.removeChild(textArea);console.log(`Copied ${type} URL for ${name} to clipboard (fallback)`);}};// Sorting function for PRs\nconst sortPRs=(prs,sortBy)=>{return[...prs].sort((a,b)=>{switch(sortBy){case'number':return b.number-a.number;// Highest number first\ncase'alphabetical':return a.title.localeCompare(b.title);case'updated':default:const dateA=new Date(a.updatedAt);const dateB=new Date(b.updatedAt);return dateB-dateA;// Most recent first\n}});};// \"How to contribute\" slideshow content\nconst contributeHelpTopic={id:'how-to-contribute',title:'How to Contribute to SGEX',type:'slideshow',content:[{title:'Welcome to SGEX - A Collaborative Workbench',content:`\n          <div class=\"contribute-slide\">\n            <div class=\"mascot-container\">\n              <img src=\"${mascotImage}\" alt=\"SGEX Mascot\" class=\"contribute-mascot\" />\n            </div>\n            <h3>What is SGEX?</h3>\n            <p>SGEX is an experimental collaborative project developing a workbench of tools to make it easier and faster to develop high fidelity SMART Guidelines Digital Adaptation Kits.</p>\n            <p>Our mission is to empower healthcare organizations worldwide to create and maintain standards-compliant digital health implementations.</p>\n          </div>\n        `},{title:'Step 1: Report a Bug or Make a Feature Request',content:`\n          <div class=\"contribute-slide\">\n            <div class=\"mascot-container\">\n              <img src=\"${mascotImage}\" alt=\"SGEX Mascot examining a bug\" class=\"contribute-mascot bug-report\" />\n            </div>\n            <h3>🐛 Found something that needs fixing?</h3>\n            <p>Every great contribution starts with identifying what can be improved:</p>\n            <ul>\n              <li><strong>Bug reports:</strong> Help us identify and fix issues</li>\n              <li><strong>Feature requests:</strong> Share ideas for new functionality</li>\n              <li><strong>Documentation improvements:</strong> Make our guides clearer</li>\n              <li><strong>User experience feedback:</strong> Tell us what's confusing</li>\n            </ul>\n            <p>Click the mascot's help button on any page to quickly report issues!</p>\n          </div>\n        `},{title:'Step 2: Assignment to a Coding Agent',content:`\n          <div class=\"contribute-slide\">\n            <div class=\"mascot-container\">\n              <img src=\"${mascotImage}\" alt=\"Robotic SGEX Mascot\" class=\"contribute-mascot coding-agent\" />\n            </div>\n            <h3>🤖 AI-Powered Development</h3>\n            <p>Once your issue is triaged, it may be assigned to one of our coding agents:</p>\n            <ul>\n              <li><strong>Automated analysis:</strong> AI agents analyze the requirements</li>\n              <li><strong>Code generation:</strong> Initial implementations are created</li>\n              <li><strong>Testing integration:</strong> Automated tests validate changes</li>\n              <li><strong>Documentation updates:</strong> Keep documentation in sync</li>\n            </ul>\n            <p>This hybrid approach combines human insight with AI efficiency.</p>\n          </div>\n        `},{title:'Step 3: Community Collaboration',content:`\n          <div class=\"contribute-slide\">\n            <div class=\"mascot-container\">\n              <div class=\"mascot-group\">\n                <img src=\"${mascotImage}\" alt=\"SGEX Mascot 1\" class=\"contribute-mascot community\" />\n                <img src=\"${mascotImage}\" alt=\"SGEX Mascot 2\" class=\"contribute-mascot community\" />\n                <img src=\"${mascotImage}\" alt=\"SGEX Mascot 3\" class=\"contribute-mascot community\" />\n              </div>\n              <div class=\"thought-bubble\">💫</div>\n            </div>\n            <h3>🌟 Real-time Evolution</h3>\n            <p>The community drives continuous improvement through collaborative discussion:</p>\n            <ul>\n              <li><strong>Code reviews:</strong> Community members review and suggest improvements</li>\n              <li><strong>Testing feedback:</strong> Real-world testing by healthcare professionals</li>\n              <li><strong>Knowledge sharing:</strong> Best practices emerge from collective experience</li>\n              <li><strong>Iterative refinement:</strong> The workbench evolves based on actual usage</li>\n            </ul>\n            <p>Together, we're building the future of digital health tooling!</p>\n          </div>\n        `},{title:'Get Started Today!',content:`\n          <div class=\"contribute-slide\">\n            <div class=\"mascot-container\">\n              <img src=\"${mascotImage}\" alt=\"SGEX Mascot celebrating\" class=\"contribute-mascot celebrate\" />\n            </div>\n            <h3>🚀 Ready to Contribute?</h3>\n            <div class=\"action-buttons\">\n              <a href=\"https://github.com/litlfred/sgex/issues/new\" target=\"_blank\" class=\"contribute-btn primary\">\n                🐛 Report a Bug\n              </a>\n              <a href=\"https://github.com/litlfred/sgex/issues/new?template=feature_request.md\" target=\"_blank\" class=\"contribute-btn secondary\">\n                ✨ Request a Feature  \n              </a>\n              <a href=\"/sgex/main/docs/\" target=\"_blank\" class=\"contribute-btn tertiary\">\n                📚 Read Documentation\n              </a>\n              <a href=\"https://github.com/litlfred/sgex/tree/main/public/docs\" target=\"_blank\" class=\"contribute-btn tertiary-alt\">\n                📖 Docs on GitHub\n              </a>\n            </div>\n            <p class=\"contribute-footer\">\n              <strong>Every contribution matters!</strong> Whether you're reporting a bug, testing a feature, or sharing feedback, you're helping improve digital health tools for healthcare workers worldwide.\n            </p>\n          </div>\n        `}]};useEffect(()=>{const fetchData=async()=>{try{setLoading(true);// First, try to get cached data\nconst cachedData=branchListingCacheService.getCachedData(GITHUB_OWNER,GITHUB_REPO);if(cachedData&&!isRefreshing){console.log('Using cached data for PR listing');// Filter PRs based on current filter state\nconst filteredCachedPRs=cachedData.pullRequests.filter(pr=>{if(prFilter==='all')return true;return pr.state===prFilter;});setPullRequests(filteredCachedPRs);setCacheInfo(branchListingCacheService.getCacheInfo(GITHUB_OWNER,GITHUB_REPO));// Still need to check deployment statuses as these change frequently\nawait checkAllDeploymentStatuses(filteredCachedPRs);// Load workflow statuses if authenticated\nif(githubToken){await loadWorkflowStatuses(filteredCachedPRs);}// Load discussion summaries for first page\nawait loadDiscussionSummaries(filteredCachedPRs.slice(0,ITEMS_PER_PAGE));return;}// If no cached data or refreshing, fetch fresh data\nconsole.log('Fetching fresh data from GitHub API');// Fetch pull requests based on filter\nconst prState=prFilter==='all'?'all':prFilter;console.log(`Fetching PRs with state: ${prState} from GitHub API`);const prResponse=await fetch(`https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_REPO}/pulls?state=${prState}&sort=updated&per_page=100`);if(!prResponse.ok){const errorText=await prResponse.text();console.error(`GitHub API error: ${prResponse.status} - ${errorText}`);throw new Error(`Failed to fetch pull requests: ${prResponse.status} - ${prResponse.statusText}`);}const prData=await prResponse.json();console.log(`Fetched ${prData.length} PRs from GitHub API`);// Format PR data\nconst formattedPRs=prData.map(pr=>{const safeBranchName=pr.head.ref.replace(/\\//g,'-');return{id:pr.id,number:pr.number,title:pr.title,state:pr.state,author:pr.user.login,branchName:pr.head.ref,safeBranchName:safeBranchName,url:`./${safeBranchName}/index.html`,prUrl:pr.html_url,updatedAt:new Date(pr.updated_at).toLocaleDateString(),createdAt:new Date(pr.created_at).toLocaleDateString()};});// Cache the fresh data (we only cache PRs since branches were removed)\nbranchListingCacheService.setCachedData(GITHUB_OWNER,GITHUB_REPO,[],formattedPRs);setCacheInfo(branchListingCacheService.getCacheInfo(GITHUB_OWNER,GITHUB_REPO));setPullRequests(formattedPRs);// Check deployment statuses for PRs only\nawait checkAllDeploymentStatuses(formattedPRs);// Load workflow statuses if authenticated\nif(githubToken){await loadWorkflowStatuses(formattedPRs);}// Load discussion summaries for PRs - available for all users\nawait loadDiscussionSummaries(formattedPRs.slice(0,ITEMS_PER_PAGE));}catch(err){console.error('Error fetching data:',err);setError(err.message);// Check if this is a network/CORS issue\nif(err.message.includes('Failed to fetch')||err.message.includes('CORS')){console.log('Network/CORS error detected, checking if we can use cache or fallback data...');// Try to use any existing cached data even if stale\nconst cachedDataRaw=localStorage.getItem(branchListingCacheService.getCacheKey(GITHUB_OWNER,GITHUB_REPO));if(cachedDataRaw){try{var _parsed$pullRequests;const parsed=JSON.parse(cachedDataRaw);console.log('Using stale cached data due to network error');setPullRequests(parsed.pullRequests.filter(pr=>{if(prFilter==='all')return true;return pr.state===prFilter;}));setCacheInfo({exists:true,stale:true,ageMinutes:Math.round((Date.now()-parsed.timestamp)/(60*1000)),prCount:((_parsed$pullRequests=parsed.pullRequests)===null||_parsed$pullRequests===void 0?void 0:_parsed$pullRequests.length)||0});setError('Using cached data (network error occurred)');return;}catch(parseError){console.error('Error parsing stale cache:',parseError);}}}// Only use fallback data in development or when GitHub API is blocked\nif(process.env.NODE_ENV==='development'||err.message.includes('Failed to fetch')){console.log('Using fallback mock data for demonstration...');const mockPRs=[{id:1,number:123,title:'Improve multi-page selector landing page for GitHub deployment',state:'open',author:'copilot',branchName:'copilot/fix-459',safeBranchName:'copilot-fix-459',url:'./copilot-fix-459/index.html',prUrl:'https://github.com/litlfred/sgex/pull/123',updatedAt:new Date().toLocaleDateString(),createdAt:new Date(Date.now()-86400000).toLocaleDateString()},{id:2,number:122,title:'Add dark mode support',state:'closed',author:'developer',branchName:'feature/dark-mode',safeBranchName:'feature-dark-mode',url:'./feature-dark-mode/index.html',prUrl:'https://github.com/litlfred/sgex/pull/122',updatedAt:new Date(Date.now()-172800000).toLocaleDateString(),createdAt:new Date(Date.now()-345600000).toLocaleDateString()},{id:3,number:121,title:'Fix authentication flow',state:'open',author:'contributor',branchName:'fix/auth-flow',safeBranchName:'fix-auth-flow',url:'./fix-auth-flow/index.html',prUrl:'https://github.com/litlfred/sgex/pull/121',updatedAt:new Date(Date.now()-259200000).toLocaleDateString(),createdAt:new Date(Date.now()-432000000).toLocaleDateString()}];setPullRequests(mockPRs);setError(null);// Clear error since we have fallback data\n}}finally{setLoading(false);setIsRefreshing(false);// Reset refresh state\n}};fetchData();},[checkAllDeploymentStatuses,prFilter,githubToken,loadWorkflowStatuses,loadDiscussionSummaries,isRefreshing]);// Load summaries for visible PRs when page changes\nuseEffect(()=>{if(pullRequests.length>0){const filtered=pullRequests.filter(pr=>pr.title.toLowerCase().includes(prSearchTerm.toLowerCase())||pr.author.toLowerCase().includes(prSearchTerm.toLowerCase()));const sorted=sortPRs(filtered,prSortBy);const paginated=sorted.slice((prPage-1)*ITEMS_PER_PAGE,prPage*ITEMS_PER_PAGE);loadDiscussionSummaries(paginated);}},[prPage,prSearchTerm,prSortBy,pullRequests,loadDiscussionSummaries]);// Filter and sort PRs based on search and sorting\nconst filteredPRs=pullRequests.filter(pr=>pr.title.toLowerCase().includes(prSearchTerm.toLowerCase())||pr.author.toLowerCase().includes(prSearchTerm.toLowerCase()));const sortedPRs=sortPRs(filteredPRs,prSortBy);const paginatedPRs=sortedPRs.slice((prPage-1)*ITEMS_PER_PAGE,prPage*ITEMS_PER_PAGE);const totalPRPages=Math.ceil(sortedPRs.length/ITEMS_PER_PAGE);if(loading){return/*#__PURE__*/_jsx(PageLayout,{pageName:\"branch-listing\",showMascot:true,showHeader:false,children:/*#__PURE__*/_jsxs(\"div\",{className:\"branch-listing\",children:[/*#__PURE__*/_jsxs(\"h1\",{children:[/*#__PURE__*/_jsx(\"img\",{src:mascotImage,alt:\"SGEX Icon\",className:\"sgex-icon\"}),\" SGEX\"]}),/*#__PURE__*/_jsx(\"p\",{className:\"subtitle\",children:\"a collaborative workbench for WHO SMART Guidelines\"}),/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Loading previews...\"})]})});}if(error){return/*#__PURE__*/_jsx(PageLayout,{pageName:\"branch-listing\",showMascot:true,showHeader:false,children:/*#__PURE__*/_jsxs(\"div\",{className:\"branch-listing\",children:[/*#__PURE__*/_jsxs(\"h1\",{children:[/*#__PURE__*/_jsx(\"img\",{src:mascotImage,alt:\"SGEX Icon\",className:\"sgex-icon\"}),\" SGEX\"]}),/*#__PURE__*/_jsx(\"p\",{className:\"subtitle\",children:\"a collaborative workbench for WHO SMART Guidelines\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"error\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Failed to load previews: \",error]}),/*#__PURE__*/_jsx(\"p\",{children:\"Please try refreshing the page or check back later.\"})]})]})});}return/*#__PURE__*/_jsx(PageLayout,{pageName:\"branch-listing\",showMascot:true,showHeader:false,children:/*#__PURE__*/_jsxs(\"div\",{className:\"branch-listing\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"top-section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"mascot-card\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"mascot-content\",children:[/*#__PURE__*/_jsx(\"img\",{src:mascotImage,alt:\"SGEX Mascot\",className:\"large-mascot\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"explainer-content\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"SGEX Deployment Selection\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Welcome to the SGEX deployment selection page. Here you can browse and access all available pull request previews for the WHO SMART Guidelines Exchange collaborative workbench.\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Each pull request is automatically deployed to its own preview environment for testing and collaboration.\"}),/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/litlfred/sgex\",target:\"_blank\",rel:\"noopener noreferrer\",className:\"source-code-link\",children:\"\\uD83D\\uDCE6 View Source Code\"})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"main-branch-card\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"main-branch-content\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD83D\\uDE80 Main Branch\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Access the stable main branch of the SGEX workbench with the latest published features.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-branch-actions\",children:[/*#__PURE__*/_jsx(\"a\",{href:\"./main/index.html\",className:\"main-branch-link\",rel:\"noopener noreferrer\",children:\"Launch Main Branch\"}),/*#__PURE__*/_jsx(\"a\",{href:\"/sgex/main/docs/\",className:\"docs-link\",target:\"_blank\",rel:\"noopener noreferrer\",children:\"\\uD83D\\uDCDA Documentation\"})]})]})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"auth-section\",children:!isAuthenticated?/*#__PURE__*/_jsxs(\"div\",{className:\"login-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDD10 GitHub Authentication\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Login with your GitHub Personal Access Token to view and add comments to pull requests:\"}),/*#__PURE__*/_jsx(PATLogin,{onAuthSuccess:handleAuthSuccess})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"authenticated-section\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\u2705 Authenticated - You can now view and add comments to pull requests\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleLogout,className:\"logout-btn\",children:\"Logout\"})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"contribute-btn primary\",onClick:()=>setShowContributeModal(true),children:\"\\uD83C\\uDF1F How to Contribute\"}),/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/litlfred/sgex/issues/new\",className:\"contribute-btn tertiary\",target:\"_blank\",rel:\"noopener noreferrer\",children:\"\\uD83D\\uDC1B Report a Bug\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"pr-section-header\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"pr-header-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pr-header-text\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"\\uD83D\\uDD04 Pull Request Previews (\",sortedPRs.length,\")\"]}),/*#__PURE__*/_jsx(\"p\",{children:\"Browse and test pull request changes in isolated preview environments\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pr-header-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"refresh-btn\",onClick:handleManualRefresh,disabled:isRefreshing,title:\"Refresh PR data (clears 5-minute cache)\",children:isRefreshing?'🔄 Refreshing...':'🔄 Refresh'}),cacheInfo&&/*#__PURE__*/_jsx(\"div\",{className:\"cache-info\",children:/*#__PURE__*/_jsx(\"small\",{children:cacheInfo.exists?`📊 Data cached (${cacheInfo.ageMinutes}m old)`:'Fresh data'})})]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"pr-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pr-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pr-filter-section\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"pr-filter\",children:\"Filter PRs:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"pr-filter\",value:prFilter,onChange:e=>{setPrFilter(e.target.value);setPrPage(1);// Reset to first page when filtering\n},className:\"filter-select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"open\",children:\"Open PRs Only\"}),/*#__PURE__*/_jsx(\"option\",{value:\"closed\",children:\"Closed PRs Only\"}),/*#__PURE__*/_jsx(\"option\",{value:\"all\",children:\"All PRs\"})]})]}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search pull requests by title or author...\",value:prSearchTerm,onChange:e=>{setPrSearchTerm(e.target.value);setPrPage(1);// Reset to first page when searching\n},className:\"pr-search\"}),/*#__PURE__*/_jsxs(\"select\",{value:prSortBy,onChange:e=>{setPrSortBy(e.target.value);setPrPage(1);// Reset to first page when sorting\n},className:\"sort-select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"updated\",children:\"Sort by Recent Updates\"}),/*#__PURE__*/_jsx(\"option\",{value:\"number\",children:\"Sort by PR Number\"}),/*#__PURE__*/_jsx(\"option\",{value:\"alphabetical\",children:\"Sort Alphabetically\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"pr-cards\",children:paginatedPRs.length===0?/*#__PURE__*/_jsx(\"div\",{className:\"no-items\",children:prSearchTerm?/*#__PURE__*/_jsxs(\"p\",{children:[\"No pull requests match your search \\\"\",prSearchTerm,\"\\\".\"]}):/*#__PURE__*/_jsx(\"p\",{children:\"No pull request previews available at the moment.\"})}):paginatedPRs.map(pr=>{var _commentInputs$pr$num;const statusKey=`pr-${pr.id}`;const deploymentStatus=deploymentStatuses[statusKey];return/*#__PURE__*/_jsxs(\"div\",{className:\"preview-card pr-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"card-header\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"item-name\",children:[\"#\",pr.number,\": \",pr.title]}),/*#__PURE__*/_jsxs(\"div\",{className:\"card-badges\",children:[/*#__PURE__*/_jsxs(\"span\",{className:`state-badge ${pr.state}`,children:[pr.state==='open'?'🟢':'🔴',\" \",pr.state]}),deploymentStatus&&/*#__PURE__*/_jsxs(\"span\",{className:`status-badge ${deploymentStatus}`,children:[deploymentStatus==='active'&&'🟢 Active',deploymentStatus==='not-found'&&'🟡 Building',deploymentStatus==='errored'&&'🔴 Error']})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"card-body\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"pr-meta\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Branch:\"}),\" \",pr.branchName,\" \\u2022 \",/*#__PURE__*/_jsx(\"strong\",{children:\"Author:\"}),\" \",pr.author]}),/*#__PURE__*/_jsxs(\"p\",{className:\"item-date\",children:[\"Created: \",pr.createdAt,\" \\u2022 Updated: \",pr.updatedAt]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"discussion-summary-bar\",onClick:()=>toggleDiscussion(pr.number),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"discussion-summary-text\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"discussion-summary-icon\",children:\"\\uD83D\\uDCAC\"}),getDiscussionSummaryText(pr.number)]}),/*#__PURE__*/_jsx(\"span\",{className:`discussion-expand-icon ${expandedDiscussions[pr.number]?'expanded':''}`,children:\"\\u25B6\"})]}),expandedDiscussions[pr.number]&&/*#__PURE__*/_jsxs(\"div\",{className:\"discussion-expanded-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"discussion-header\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"discussion-title\",children:\"Discussion\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"discussion-actions\",children:[/*#__PURE__*/_jsx(\"a\",{href:`https://github.com/litlfred/sgex/pull/${pr.number}/files`,target:\"_blank\",rel:\"noopener noreferrer\",className:\"discussion-action-btn\",children:\"\\uD83D\\uDCC1 View Files\"}),/*#__PURE__*/_jsx(\"a\",{href:pr.prUrl,target:\"_blank\",rel:\"noopener noreferrer\",className:\"discussion-action-btn secondary\",children:\"\\uD83D\\uDD17 Full Discussion\"})]})]}),isAuthenticated?/*#__PURE__*/_jsxs(\"div\",{className:\"comment-input-section\",children:[/*#__PURE__*/_jsx(\"textarea\",{value:commentInputs[pr.number]||'',onChange:e=>setCommentInputs(prev=>({...prev,[pr.number]:e.target.value})),placeholder:\"Add a comment...\",className:\"comment-input\",rows:3}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>submitComment(pr.number,commentInputs[pr.number]),disabled:!((_commentInputs$pr$num=commentInputs[pr.number])!==null&&_commentInputs$pr$num!==void 0&&_commentInputs$pr$num.trim())||submittingComments[pr.number],className:\"submit-comment-btn\",children:submittingComments[pr.number]?'Submitting...':'Add Comment'})]}):/*#__PURE__*/_jsx(\"div\",{className:\"comment-auth-message\",children:/*#__PURE__*/_jsxs(\"p\",{children:[\"\\uD83D\\uDD10 \",/*#__PURE__*/_jsx(\"a\",{href:\"#auth-section\",onClick:()=>{var _document$querySelect;return(_document$querySelect=document.querySelector('.auth-section'))===null||_document$querySelect===void 0?void 0:_document$querySelect.scrollIntoView();},children:\"Sign in\"}),\" to add comments to this discussion\"]})}),/*#__PURE__*/_jsx(\"div\",{className:\"discussion-scroll-area\",children:!prComments[pr.number]?/*#__PURE__*/_jsx(\"div\",{className:\"comments-loading\",children:\"Loading full discussion...\"}):prComments[pr.number].length>0?/*#__PURE__*/_jsx(\"div\",{className:\"comments-list\",children:prComments[pr.number].map(comment=>/*#__PURE__*/_jsxs(\"div\",{className:\"comment-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"comment-header\",children:[/*#__PURE__*/_jsx(\"img\",{src:comment.avatar_url,alt:comment.author,className:\"comment-avatar\"}),/*#__PURE__*/_jsx(\"span\",{className:\"comment-author\",children:comment.author}),/*#__PURE__*/_jsx(\"span\",{className:\"comment-date\",children:comment.created_at})]}),/*#__PURE__*/_jsx(\"div\",{className:\"comment-body\",children:comment.body})]},comment.id))}):/*#__PURE__*/_jsxs(\"div\",{className:\"no-comments\",children:[\"No comments yet. \",isAuthenticated?'Be the first to comment!':'Sign in to be the first to comment!']})})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pr-actions\",children:[deploymentStatus==='active'?/*#__PURE__*/_jsx(\"a\",{href:pr.url,className:\"preview-link\",rel:\"noopener noreferrer\",children:/*#__PURE__*/_jsx(\"span\",{children:\"\\uD83D\\uDE80 View Preview\"})}):deploymentStatus==='not-found'?/*#__PURE__*/_jsx(\"div\",{className:\"deployment-message\",children:/*#__PURE__*/_jsx(\"span\",{className:\"building-message\",children:\"\\uD83D\\uDD04 Deployment in progress. Please check back in a few minutes.\"})}):deploymentStatus==='errored'?/*#__PURE__*/_jsxs(\"div\",{className:\"deployment-message\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"error-message\",children:\"\\u274C Deployment failed. Please check the GitHub Actions logs or contact support.\"}),/*#__PURE__*/_jsx(\"a\",{href:`https://github.com/litlfred/sgex/actions`,className:\"actions-link\",target:\"_blank\",rel:\"noopener noreferrer\",children:\"View Actions Log\"})]}):/*#__PURE__*/_jsx(\"a\",{href:pr.url,className:\"preview-link\",rel:\"noopener noreferrer\",children:/*#__PURE__*/_jsx(\"span\",{children:\"\\uD83D\\uDE80 View Preview\"})}),\"}\",/*#__PURE__*/_jsx(\"button\",{className:\"copy-btn\",onClick:()=>copyToClipboard(pr.url,'PR',`#${pr.number}`),title:\"Copy URL to clipboard\",children:\"\\uD83D\\uDCCB Copy URL\"}),/*#__PURE__*/_jsx(\"a\",{href:pr.prUrl,className:\"pr-link\",target:\"_blank\",rel:\"noopener noreferrer\",children:/*#__PURE__*/_jsx(\"span\",{children:\"\\uD83D\\uDCCB View PR\"})})]}),/*#__PURE__*/_jsx(WorkflowStatus,{workflowStatus:workflowStatuses[pr.branchName],branchName:pr.branchName,onTriggerWorkflow:triggerWorkflow,isAuthenticated:isAuthenticated,isLoading:loadingWorkflowStatuses})]}),/*#__PURE__*/_jsx(\"div\",{className:\"card-footer\",children:/*#__PURE__*/_jsxs(\"small\",{className:\"preview-path\",children:[\"Preview URL: \",/*#__PURE__*/_jsx(\"a\",{href:pr.url,className:\"preview-url-link\",rel:\"noopener noreferrer\",children:pr.url})]})})]},pr.id);})}),totalPRPages>1&&/*#__PURE__*/_jsxs(\"div\",{className:\"pagination\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"pagination-btn\",onClick:()=>setPrPage(Math.max(1,prPage-1)),disabled:prPage===1,children:\"\\u2190 Previous\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"pagination-info\",children:[\"Page \",prPage,\" of \",totalPRPages,\" (\",sortedPRs.length,\" total)\"]}),/*#__PURE__*/_jsx(\"button\",{className:\"pagination-btn\",onClick:()=>setPrPage(Math.min(totalPRPages,prPage+1)),disabled:prPage===totalPRPages,children:\"Next \\u2192\"})]})]}),showContributeModal&&/*#__PURE__*/_jsx(HelpModal,{helpTopic:contributeHelpTopic,onClose:()=>setShowContributeModal(false)})]})});};export default BranchListing;","map":{"version":3,"names":["React","useState","useEffect","useCallback","PageLayout","HelpModal","PATLogin","WorkflowStatus","githubActionsService","branchListingCacheService","useThemeImage","jsx","_jsx","jsxs","_jsxs","BranchListing","pullRequests","setPullRequests","loading","setLoading","error","setError","prPage","setPrPage","prSearchTerm","setPrSearchTerm","prSortBy","setPrSortBy","showContributeModal","setShowContributeModal","deploymentStatuses","setDeploymentStatuses","prFilter","setPrFilter","isAuthenticated","setIsAuthenticated","githubToken","setGithubToken","prComments","setPrComments","commentInputs","setCommentInputs","submittingComments","setSubmittingComments","expandedDiscussions","setExpandedDiscussions","discussionSummaries","setDiscussionSummaries","loadingSummaries","setLoadingSummaries","workflowStatuses","setWorkflowStatuses","loadingWorkflowStatuses","setLoadingWorkflowStatuses","isRefreshing","setIsRefreshing","cacheInfo","setCacheInfo","mascotImage","ITEMS_PER_PAGE","GITHUB_OWNER","GITHUB_REPO","handleManualRefresh","forceRefresh","handleAuthSuccess","token","octokitInstance","sessionStorage","setItem","setToken","handleLogout","removeItem","fetchPRCommentsSummary","prNumber","headers","response","fetch","ok","Error","status","comments","json","length","count","lastComment","author","user","login","created_at","Date","avatar_url","console","fetchAllPRComments","map","comment","id","body","toLocaleDateString","loadDiscussionSummaries","prs","summaries","pr","number","toggleDiscussion","isExpanded","prev","getDiscussionSummaryText","summary","timeAgo","getTimeAgo","date","now","diffMs","diffDays","Math","floor","submitComment","commentText","trim","method","JSON","stringify","updatedComments","updatedSummary","loadWorkflowStatuses","prData","branchNames","branchName","uniqueBranchNames","Set","statuses","getWorkflowStatusForBranches","triggerWorkflow","alert","success","setTimeout","currentPRs","message","getItem","checkDeploymentStatus","url","checkAllDeploymentStatuses","copyToClipboard","type","name","navigator","clipboard","writeText","log","textArea","document","createElement","value","appendChild","select","execCommand","removeChild","sortPRs","sortBy","sort","a","b","title","localeCompare","dateA","updatedAt","dateB","contributeHelpTopic","content","fetchData","cachedData","getCachedData","filteredCachedPRs","filter","state","getCacheInfo","slice","prState","prResponse","errorText","text","statusText","formattedPRs","safeBranchName","head","ref","replace","prUrl","html_url","updated_at","createdAt","setCachedData","err","includes","cachedDataRaw","localStorage","getCacheKey","_parsed$pullRequests","parsed","parse","exists","stale","ageMinutes","round","timestamp","prCount","parseError","process","env","NODE_ENV","mockPRs","filtered","toLowerCase","sorted","paginated","filteredPRs","sortedPRs","paginatedPRs","totalPRPages","ceil","pageName","showMascot","showHeader","children","className","src","alt","href","target","rel","onAuthSuccess","onClick","disabled","htmlFor","onChange","e","placeholder","_commentInputs$pr$num","statusKey","deploymentStatus","rows","_document$querySelect","querySelector","scrollIntoView","workflowStatus","onTriggerWorkflow","isLoading","max","min","helpTopic","onClose"],"sources":["/home/runner/work/sgex/sgex/src/components/BranchListing.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { PageLayout } from './framework';\nimport HelpModal from './HelpModal';\nimport PATLogin from './PATLogin';\nimport WorkflowStatus from './WorkflowStatus';\nimport githubActionsService from '../services/githubActionsService';\nimport branchListingCacheService from '../services/branchListingCacheService';\nimport useThemeImage from '../hooks/useThemeImage';\nimport './BranchListing.css';\n\nconst BranchListing = () => {\n  const [pullRequests, setPullRequests] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [prPage, setPrPage] = useState(1);\n  const [prSearchTerm, setPrSearchTerm] = useState('');\n\n  const [prSortBy, setPrSortBy] = useState('updated'); // updated, number, alphabetical\n  const [showContributeModal, setShowContributeModal] = useState(false);\n  const [deploymentStatuses, setDeploymentStatuses] = useState({});\n  const [prFilter, setPrFilter] = useState('open'); // 'open', 'closed', 'all'\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [githubToken, setGithubToken] = useState(null);\n  const [prComments, setPrComments] = useState({});\n  const [commentInputs, setCommentInputs] = useState({});\n  const [submittingComments, setSubmittingComments] = useState({});\n  const [expandedDiscussions, setExpandedDiscussions] = useState({});\n  const [discussionSummaries, setDiscussionSummaries] = useState({});\n  const [loadingSummaries, setLoadingSummaries] = useState(false);\n  const [workflowStatuses, setWorkflowStatuses] = useState({});\n  const [loadingWorkflowStatuses, setLoadingWorkflowStatuses] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [cacheInfo, setCacheInfo] = useState(null);\n\n  // Theme-aware mascot image\n  const mascotImage = useThemeImage('sgex-mascot.png');\n\n  const ITEMS_PER_PAGE = 10;\n  const GITHUB_OWNER = 'litlfred';\n  const GITHUB_REPO = 'sgex';\n\n  // Function to manually refresh cache and reload data\n  const handleManualRefresh = useCallback(async () => {\n    setIsRefreshing(true);\n    \n    // Clear the cache to force fresh data\n    branchListingCacheService.forceRefresh(GITHUB_OWNER, GITHUB_REPO);\n    \n    // The fetchData function will be called by the useEffect when isRefreshing changes\n  }, []);\n\n  // GitHub authentication functions\n  const handleAuthSuccess = (token, octokitInstance) => {\n    setGithubToken(token);\n    setIsAuthenticated(true);\n    // Store token for session\n    sessionStorage.setItem('github_token', token);\n    // Set token for GitHub Actions service\n    githubActionsService.setToken(token);\n  };\n\n  const handleLogout = () => {\n    setGithubToken(null);\n    setIsAuthenticated(false);\n    sessionStorage.removeItem('github_token');\n    // Clear token from GitHub Actions service\n    githubActionsService.setToken(null);\n  };\n\n  // Function to fetch PR comments summary\n  const fetchPRCommentsSummary = useCallback(async (prNumber) => {\n    // Allow fetching comments even without authentication for read-only access\n    \n    try {\n      const headers = {\n        'Accept': 'application/vnd.github.v3+json'\n      };\n      \n      // Add authorization header only if token is available\n      if (githubToken) {\n        headers['Authorization'] = `token ${githubToken}`;\n      }\n      \n      const response = await fetch(\n        `https://api.github.com/repos/litlfred/sgex/issues/${prNumber}/comments`,\n        { headers }\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch comments: ${response.status}`);\n      }\n      \n      const comments = await response.json();\n      if (comments.length === 0) {\n        return { count: 0, lastComment: null };\n      }\n      \n      const lastComment = comments[comments.length - 1];\n      return {\n        count: comments.length,\n        lastComment: {\n          author: lastComment.user.login,\n          created_at: new Date(lastComment.created_at),\n          avatar_url: lastComment.user.avatar_url\n        }\n      };\n    } catch (error) {\n      console.error(`Error fetching comment summary for PR ${prNumber}:`, error);\n      return null;\n    }\n  }, [githubToken]);\n\n  // Function to fetch all PR comments (for expanded view)\n  const fetchAllPRComments = useCallback(async (prNumber) => {\n    // Allow fetching comments even without authentication for read-only access\n    \n    try {\n      const headers = {\n        'Accept': 'application/vnd.github.v3+json'\n      };\n      \n      // Add authorization header only if token is available\n      if (githubToken) {\n        headers['Authorization'] = `token ${githubToken}`;\n      }\n      \n      const response = await fetch(\n        `https://api.github.com/repos/litlfred/sgex/issues/${prNumber}/comments`,\n        { headers }\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch comments: ${response.status}`);\n      }\n      \n      const comments = await response.json();\n      return comments.map(comment => ({\n        id: comment.id,\n        author: comment.user.login,\n        body: comment.body,\n        created_at: new Date(comment.created_at).toLocaleDateString(),\n        avatar_url: comment.user.avatar_url\n      }));\n    } catch (error) {\n      console.error(`Error fetching all comments for PR ${prNumber}:`, error);\n      return [];\n    }\n  }, [githubToken]);\n\n  // Function to load discussion summaries for visible PRs\n  const loadDiscussionSummaries = useCallback(async (prs) => {\n    if (prs.length === 0) return;\n    \n    setLoadingSummaries(true);\n    const summaries = {};\n    \n    for (const pr of prs) {\n      summaries[pr.number] = await fetchPRCommentsSummary(pr.number);\n    }\n    \n    setDiscussionSummaries(summaries);\n    setLoadingSummaries(false);\n  }, [fetchPRCommentsSummary]);\n\n  // Function to toggle discussion expansion\n  const toggleDiscussion = async (prNumber) => {\n    const isExpanded = expandedDiscussions[prNumber];\n    \n    if (!isExpanded) {\n      // Load all comments when expanding\n      const comments = await fetchAllPRComments(prNumber);\n      setPrComments(prev => ({ ...prev, [prNumber]: comments }));\n    }\n    \n    setExpandedDiscussions(prev => ({\n      ...prev,\n      [prNumber]: !isExpanded\n    }));\n  };\n\n  // Function to get discussion summary text\n  const getDiscussionSummaryText = (prNumber) => {\n    const summary = discussionSummaries[prNumber];\n    \n    if (loadingSummaries) {\n      return \"Loading discussion...\";\n    }\n    \n    if (!summary || summary.count === 0) {\n      return \"No comments yet\";\n    }\n    \n    const { count, lastComment } = summary;\n    const timeAgo = lastComment ? getTimeAgo(lastComment.created_at) : '';\n    \n    return `${count} comment${count > 1 ? 's' : ''}, last by ${lastComment.author} ${timeAgo}`;\n  };\n\n  // Helper function to get relative time\n  const getTimeAgo = (date) => {\n    const now = new Date();\n    const diffMs = now - date;\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 0) return 'today';\n    if (diffDays === 1) return '1 day ago';\n    if (diffDays < 7) return `${diffDays} days ago`;\n    if (diffDays < 30) return `${Math.floor(diffDays / 7)} week${Math.floor(diffDays / 7) > 1 ? 's' : ''} ago`;\n    return `${Math.floor(diffDays / 30)} month${Math.floor(diffDays / 30) > 1 ? 's' : ''} ago`;\n  };\n\n  // Function to submit a comment\n  const submitComment = async (prNumber, commentText) => {\n    if (!githubToken || !commentText.trim()) return false;\n    \n    setSubmittingComments(prev => ({ ...prev, [prNumber]: true }));\n    \n    try {\n      const response = await fetch(\n        `https://api.github.com/repos/litlfred/sgex/issues/${prNumber}/comments`,\n        {\n          method: 'POST',\n          headers: {\n            'Authorization': `token ${githubToken}`,\n            'Accept': 'application/vnd.github.v3+json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            body: commentText\n          })\n        }\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Failed to submit comment: ${response.status}`);\n      }\n      \n      // Clear the comment input\n      setCommentInputs(prev => ({ ...prev, [prNumber]: '' }));\n      \n      // Refresh both full comments (if expanded) and summary\n      if (expandedDiscussions[prNumber]) {\n        const updatedComments = await fetchAllPRComments(prNumber);\n        setPrComments(prev => ({ ...prev, [prNumber]: updatedComments }));\n      }\n      \n      // Refresh the discussion summary\n      const updatedSummary = await fetchPRCommentsSummary(prNumber);\n      setDiscussionSummaries(prev => ({ ...prev, [prNumber]: updatedSummary }));\n      \n      return true;\n    } catch (error) {\n      console.error(`Error submitting comment for PR ${prNumber}:`, error);\n      return false;\n    } finally {\n      setSubmittingComments(prev => ({ ...prev, [prNumber]: false }));\n    }\n  };\n\n  // Function to load workflow statuses for PR branches\n  const loadWorkflowStatuses = useCallback(async (prData) => {\n    if (!githubToken) return;\n    \n    setLoadingWorkflowStatuses(true);\n    \n    try {\n      // Get all PR branch names\n      const branchNames = prData.map(pr => pr.branchName);\n      \n      const uniqueBranchNames = [...new Set(branchNames)];\n      const statuses = await githubActionsService.getWorkflowStatusForBranches(uniqueBranchNames);\n      \n      setWorkflowStatuses(statuses);\n    } catch (error) {\n      console.error('Error loading workflow statuses:', error);\n    } finally {\n      setLoadingWorkflowStatuses(false);\n    }\n  }, [githubToken]);\n\n  // Function to trigger workflow for a branch\n  const triggerWorkflow = useCallback(async (branchName) => {\n    if (!githubToken) {\n      alert('Please authenticate to trigger workflows');\n      return;\n    }\n    \n    try {\n      const success = await githubActionsService.triggerWorkflow(branchName);\n      if (success) {\n        alert(`Workflow triggered for branch: ${branchName}`);\n        // Refresh workflow statuses after a short delay\n        setTimeout(() => {\n          const currentPRs = pullRequests.length > 0 ? pullRequests : [];\n          loadWorkflowStatuses(currentPRs);\n        }, 2000);\n      } else {\n        alert(`Failed to trigger workflow for branch: ${branchName}`);\n      }\n    } catch (error) {\n      console.error('Error triggering workflow:', error);\n      alert(`Error triggering workflow: ${error.message}`);\n    }\n  }, [githubToken, pullRequests, loadWorkflowStatuses]);\n\n  // Check for existing authentication on component mount\n  useEffect(() => {\n    const token = sessionStorage.getItem('github_token');\n    if (token) {\n      setGithubToken(token);\n      setIsAuthenticated(true);\n      // Set token for GitHub Actions service\n      githubActionsService.setToken(token);\n    }\n  }, []);\n\n  // Function to check deployment status\n  const checkDeploymentStatus = async (url) => {\n    try {\n      const response = await fetch(url, { method: 'HEAD' });\n      if (response.ok) {\n        return 'active';\n      } else if (response.status === 404) {\n        return 'not-found';\n      } else {\n        return 'errored';\n      }\n    } catch (error) {\n      return 'errored';\n    }\n  };\n\n  // Function to check deployment statuses for PRs only\n  const checkAllDeploymentStatuses = useCallback(async (prData) => {\n    const statuses = {};\n    \n    // Check PRs only\n    for (const pr of prData) {\n      const status = await checkDeploymentStatus(pr.url);\n      statuses[`pr-${pr.id}`] = status;\n    }\n    \n    setDeploymentStatuses(statuses);\n  }, []);\n\n  // Function to copy URL to clipboard\n  const copyToClipboard = async (url, type, name) => {\n    try {\n      await navigator.clipboard.writeText(url);\n      // You could add a toast notification here\n      console.log(`Copied ${type} URL for ${name} to clipboard`);\n    } catch (error) {\n      // Fallback for browsers that don't support clipboard API\n      const textArea = document.createElement('textarea');\n      textArea.value = url;\n      document.body.appendChild(textArea);\n      textArea.select();\n      document.execCommand('copy');\n      document.body.removeChild(textArea);\n      console.log(`Copied ${type} URL for ${name} to clipboard (fallback)`);\n    }\n  };\n\n  // Sorting function for PRs\n  const sortPRs = (prs, sortBy) => {\n    return [...prs].sort((a, b) => {\n      switch (sortBy) {\n        case 'number':\n          return b.number - a.number; // Highest number first\n        case 'alphabetical':\n          return a.title.localeCompare(b.title);\n        case 'updated':\n        default:\n          const dateA = new Date(a.updatedAt);\n          const dateB = new Date(b.updatedAt);\n          return dateB - dateA; // Most recent first\n      }\n    });\n  };\n\n  // \"How to contribute\" slideshow content\n  const contributeHelpTopic = {\n    id: 'how-to-contribute',\n    title: 'How to Contribute to SGEX',\n    type: 'slideshow',\n    content: [\n      {\n        title: 'Welcome to SGEX - A Collaborative Workbench',\n        content: `\n          <div class=\"contribute-slide\">\n            <div class=\"mascot-container\">\n              <img src=\"${mascotImage}\" alt=\"SGEX Mascot\" class=\"contribute-mascot\" />\n            </div>\n            <h3>What is SGEX?</h3>\n            <p>SGEX is an experimental collaborative project developing a workbench of tools to make it easier and faster to develop high fidelity SMART Guidelines Digital Adaptation Kits.</p>\n            <p>Our mission is to empower healthcare organizations worldwide to create and maintain standards-compliant digital health implementations.</p>\n          </div>\n        `\n      },\n      {\n        title: 'Step 1: Report a Bug or Make a Feature Request',\n        content: `\n          <div class=\"contribute-slide\">\n            <div class=\"mascot-container\">\n              <img src=\"${mascotImage}\" alt=\"SGEX Mascot examining a bug\" class=\"contribute-mascot bug-report\" />\n            </div>\n            <h3>🐛 Found something that needs fixing?</h3>\n            <p>Every great contribution starts with identifying what can be improved:</p>\n            <ul>\n              <li><strong>Bug reports:</strong> Help us identify and fix issues</li>\n              <li><strong>Feature requests:</strong> Share ideas for new functionality</li>\n              <li><strong>Documentation improvements:</strong> Make our guides clearer</li>\n              <li><strong>User experience feedback:</strong> Tell us what's confusing</li>\n            </ul>\n            <p>Click the mascot's help button on any page to quickly report issues!</p>\n          </div>\n        `\n      },\n      {\n        title: 'Step 2: Assignment to a Coding Agent',\n        content: `\n          <div class=\"contribute-slide\">\n            <div class=\"mascot-container\">\n              <img src=\"${mascotImage}\" alt=\"Robotic SGEX Mascot\" class=\"contribute-mascot coding-agent\" />\n            </div>\n            <h3>🤖 AI-Powered Development</h3>\n            <p>Once your issue is triaged, it may be assigned to one of our coding agents:</p>\n            <ul>\n              <li><strong>Automated analysis:</strong> AI agents analyze the requirements</li>\n              <li><strong>Code generation:</strong> Initial implementations are created</li>\n              <li><strong>Testing integration:</strong> Automated tests validate changes</li>\n              <li><strong>Documentation updates:</strong> Keep documentation in sync</li>\n            </ul>\n            <p>This hybrid approach combines human insight with AI efficiency.</p>\n          </div>\n        `\n      },\n      {\n        title: 'Step 3: Community Collaboration',\n        content: `\n          <div class=\"contribute-slide\">\n            <div class=\"mascot-container\">\n              <div class=\"mascot-group\">\n                <img src=\"${mascotImage}\" alt=\"SGEX Mascot 1\" class=\"contribute-mascot community\" />\n                <img src=\"${mascotImage}\" alt=\"SGEX Mascot 2\" class=\"contribute-mascot community\" />\n                <img src=\"${mascotImage}\" alt=\"SGEX Mascot 3\" class=\"contribute-mascot community\" />\n              </div>\n              <div class=\"thought-bubble\">💫</div>\n            </div>\n            <h3>🌟 Real-time Evolution</h3>\n            <p>The community drives continuous improvement through collaborative discussion:</p>\n            <ul>\n              <li><strong>Code reviews:</strong> Community members review and suggest improvements</li>\n              <li><strong>Testing feedback:</strong> Real-world testing by healthcare professionals</li>\n              <li><strong>Knowledge sharing:</strong> Best practices emerge from collective experience</li>\n              <li><strong>Iterative refinement:</strong> The workbench evolves based on actual usage</li>\n            </ul>\n            <p>Together, we're building the future of digital health tooling!</p>\n          </div>\n        `\n      },\n      {\n        title: 'Get Started Today!',\n        content: `\n          <div class=\"contribute-slide\">\n            <div class=\"mascot-container\">\n              <img src=\"${mascotImage}\" alt=\"SGEX Mascot celebrating\" class=\"contribute-mascot celebrate\" />\n            </div>\n            <h3>🚀 Ready to Contribute?</h3>\n            <div class=\"action-buttons\">\n              <a href=\"https://github.com/litlfred/sgex/issues/new\" target=\"_blank\" class=\"contribute-btn primary\">\n                🐛 Report a Bug\n              </a>\n              <a href=\"https://github.com/litlfred/sgex/issues/new?template=feature_request.md\" target=\"_blank\" class=\"contribute-btn secondary\">\n                ✨ Request a Feature  \n              </a>\n              <a href=\"/sgex/main/docs/\" target=\"_blank\" class=\"contribute-btn tertiary\">\n                📚 Read Documentation\n              </a>\n              <a href=\"https://github.com/litlfred/sgex/tree/main/public/docs\" target=\"_blank\" class=\"contribute-btn tertiary-alt\">\n                📖 Docs on GitHub\n              </a>\n            </div>\n            <p class=\"contribute-footer\">\n              <strong>Every contribution matters!</strong> Whether you're reporting a bug, testing a feature, or sharing feedback, you're helping improve digital health tools for healthcare workers worldwide.\n            </p>\n          </div>\n        `\n      }\n    ]\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        \n        // First, try to get cached data\n        const cachedData = branchListingCacheService.getCachedData(GITHUB_OWNER, GITHUB_REPO);\n        \n        if (cachedData && !isRefreshing) {\n          console.log('Using cached data for PR listing');\n          \n          // Filter PRs based on current filter state\n          const filteredCachedPRs = cachedData.pullRequests.filter(pr => {\n            if (prFilter === 'all') return true;\n            return pr.state === prFilter;\n          });\n          \n          setPullRequests(filteredCachedPRs);\n          setCacheInfo(branchListingCacheService.getCacheInfo(GITHUB_OWNER, GITHUB_REPO));\n          \n          // Still need to check deployment statuses as these change frequently\n          await checkAllDeploymentStatuses(filteredCachedPRs);\n          \n          // Load workflow statuses if authenticated\n          if (githubToken) {\n            await loadWorkflowStatuses(filteredCachedPRs);\n          }\n          \n          // Load discussion summaries for first page\n          await loadDiscussionSummaries(filteredCachedPRs.slice(0, ITEMS_PER_PAGE));\n          return;\n        }\n\n        // If no cached data or refreshing, fetch fresh data\n        console.log('Fetching fresh data from GitHub API');\n        \n        // Fetch pull requests based on filter\n        const prState = prFilter === 'all' ? 'all' : prFilter;\n        console.log(`Fetching PRs with state: ${prState} from GitHub API`);\n        \n        const prResponse = await fetch(`https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_REPO}/pulls?state=${prState}&sort=updated&per_page=100`);\n        if (!prResponse.ok) {\n          const errorText = await prResponse.text();\n          console.error(`GitHub API error: ${prResponse.status} - ${errorText}`);\n          throw new Error(`Failed to fetch pull requests: ${prResponse.status} - ${prResponse.statusText}`);\n        }\n        const prData = await prResponse.json();\n        console.log(`Fetched ${prData.length} PRs from GitHub API`);\n        \n        // Format PR data\n        const formattedPRs = prData.map(pr => {\n          const safeBranchName = pr.head.ref.replace(/\\//g, '-');\n          return {\n            id: pr.id,\n            number: pr.number,\n            title: pr.title,\n            state: pr.state,\n            author: pr.user.login,\n            branchName: pr.head.ref,\n            safeBranchName: safeBranchName,\n            url: `./${safeBranchName}/index.html`,\n            prUrl: pr.html_url,\n            updatedAt: new Date(pr.updated_at).toLocaleDateString(),\n            createdAt: new Date(pr.created_at).toLocaleDateString()\n          };\n        });\n        \n        // Cache the fresh data (we only cache PRs since branches were removed)\n        branchListingCacheService.setCachedData(GITHUB_OWNER, GITHUB_REPO, [], formattedPRs);\n        setCacheInfo(branchListingCacheService.getCacheInfo(GITHUB_OWNER, GITHUB_REPO));\n        \n        setPullRequests(formattedPRs);\n        \n        // Check deployment statuses for PRs only\n        await checkAllDeploymentStatuses(formattedPRs);\n        \n        // Load workflow statuses if authenticated\n        if (githubToken) {\n          await loadWorkflowStatuses(formattedPRs);\n        }\n        \n        // Load discussion summaries for PRs - available for all users\n        await loadDiscussionSummaries(formattedPRs.slice(0, ITEMS_PER_PAGE));\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError(err.message);\n        \n        // Check if this is a network/CORS issue\n        if (err.message.includes('Failed to fetch') || err.message.includes('CORS')) {\n          console.log('Network/CORS error detected, checking if we can use cache or fallback data...');\n          \n          // Try to use any existing cached data even if stale\n          const cachedDataRaw = localStorage.getItem(branchListingCacheService.getCacheKey(GITHUB_OWNER, GITHUB_REPO));\n          if (cachedDataRaw) {\n            try {\n              const parsed = JSON.parse(cachedDataRaw);\n              console.log('Using stale cached data due to network error');\n              setPullRequests(parsed.pullRequests.filter(pr => {\n                if (prFilter === 'all') return true;\n                return pr.state === prFilter;\n              }));\n              setCacheInfo({\n                exists: true,\n                stale: true,\n                ageMinutes: Math.round((Date.now() - parsed.timestamp) / (60 * 1000)),\n                prCount: parsed.pullRequests?.length || 0\n              });\n              setError('Using cached data (network error occurred)');\n              return;\n            } catch (parseError) {\n              console.error('Error parsing stale cache:', parseError);\n            }\n          }\n        }\n        \n        // Only use fallback data in development or when GitHub API is blocked\n        if (process.env.NODE_ENV === 'development' || err.message.includes('Failed to fetch')) {\n          console.log('Using fallback mock data for demonstration...');\n          const mockPRs = [\n            {\n              id: 1,\n              number: 123,\n              title: 'Improve multi-page selector landing page for GitHub deployment',\n              state: 'open',\n              author: 'copilot',\n              branchName: 'copilot/fix-459',\n              safeBranchName: 'copilot-fix-459',\n              url: './copilot-fix-459/index.html',\n              prUrl: 'https://github.com/litlfred/sgex/pull/123',\n              updatedAt: new Date().toLocaleDateString(),\n              createdAt: new Date(Date.now() - 86400000).toLocaleDateString()\n            },\n            {\n              id: 2,\n              number: 122,\n              title: 'Add dark mode support',\n              state: 'closed',\n              author: 'developer',\n              branchName: 'feature/dark-mode',\n              safeBranchName: 'feature-dark-mode',\n              url: './feature-dark-mode/index.html',\n              prUrl: 'https://github.com/litlfred/sgex/pull/122',\n              updatedAt: new Date(Date.now() - 172800000).toLocaleDateString(),\n              createdAt: new Date(Date.now() - 345600000).toLocaleDateString()\n            },\n            {\n              id: 3,\n              number: 121,\n              title: 'Fix authentication flow',\n              state: 'open',\n              author: 'contributor',\n              branchName: 'fix/auth-flow',\n              safeBranchName: 'fix-auth-flow',\n              url: './fix-auth-flow/index.html',\n              prUrl: 'https://github.com/litlfred/sgex/pull/121',\n              updatedAt: new Date(Date.now() - 259200000).toLocaleDateString(),\n              createdAt: new Date(Date.now() - 432000000).toLocaleDateString()\n            }\n          ];\n\n          setPullRequests(mockPRs);\n          setError(null); // Clear error since we have fallback data\n        }\n      } finally {\n        setLoading(false);\n        setIsRefreshing(false); // Reset refresh state\n      }\n    };\n\n    fetchData();\n  }, [checkAllDeploymentStatuses, prFilter, githubToken, loadWorkflowStatuses, loadDiscussionSummaries, isRefreshing]);\n\n  // Load summaries for visible PRs when page changes\n  useEffect(() => {\n    if (pullRequests.length > 0) {\n      const filtered = pullRequests.filter(pr => \n        pr.title.toLowerCase().includes(prSearchTerm.toLowerCase()) ||\n        pr.author.toLowerCase().includes(prSearchTerm.toLowerCase())\n      );\n      const sorted = sortPRs(filtered, prSortBy);\n      const paginated = sorted.slice((prPage - 1) * ITEMS_PER_PAGE, prPage * ITEMS_PER_PAGE);\n      loadDiscussionSummaries(paginated);\n    }\n  }, [prPage, prSearchTerm, prSortBy, pullRequests, loadDiscussionSummaries]);\n\n  // Filter and sort PRs based on search and sorting\n  const filteredPRs = pullRequests.filter(pr => \n    pr.title.toLowerCase().includes(prSearchTerm.toLowerCase()) ||\n    pr.author.toLowerCase().includes(prSearchTerm.toLowerCase())\n  );\n  const sortedPRs = sortPRs(filteredPRs, prSortBy);\n  const paginatedPRs = sortedPRs.slice((prPage - 1) * ITEMS_PER_PAGE, prPage * ITEMS_PER_PAGE);\n  const totalPRPages = Math.ceil(sortedPRs.length / ITEMS_PER_PAGE);\n\n  if (loading) {\n    return (\n      <PageLayout pageName=\"branch-listing\" showMascot={true} showHeader={false}>\n        <div className=\"branch-listing\">\n          <h1><img src={mascotImage} alt=\"SGEX Icon\" className=\"sgex-icon\" /> SGEX</h1>\n          <p className=\"subtitle\">a collaborative workbench for WHO SMART Guidelines</p>\n          <div className=\"loading\">Loading previews...</div>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  if (error) {\n    return (\n      <PageLayout pageName=\"branch-listing\" showMascot={true} showHeader={false}>\n        <div className=\"branch-listing\">\n          <h1><img src={mascotImage} alt=\"SGEX Icon\" className=\"sgex-icon\" /> SGEX</h1>\n          <p className=\"subtitle\">a collaborative workbench for WHO SMART Guidelines</p>\n          <div className=\"error\">\n            <p>Failed to load previews: {error}</p>\n            <p>Please try refreshing the page or check back later.</p>\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  return (\n    <PageLayout pageName=\"branch-listing\" showMascot={true} showHeader={false}>\n      <div className=\"branch-listing\">\n        {/* Top Section: Two cards side by side */}\n        <div className=\"top-section\">\n          {/* Mascot and Explainer Card */}\n          <div className=\"mascot-card\">\n            <div className=\"mascot-content\">\n              <img src={mascotImage} alt=\"SGEX Mascot\" className=\"large-mascot\" />\n              <div className=\"explainer-content\">\n                <h2>SGEX Deployment Selection</h2>\n                <p>Welcome to the SGEX deployment selection page. Here you can browse and access all available pull request previews for the WHO SMART Guidelines Exchange collaborative workbench.</p>\n                <p>Each pull request is automatically deployed to its own preview environment for testing and collaboration.</p>\n                <a \n                  href=\"https://github.com/litlfred/sgex\" \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"source-code-link\"\n                >\n                  📦 View Source Code\n                </a>\n              </div>\n            </div>\n          </div>\n\n          {/* Main Branch Access Card */}\n          <div className=\"main-branch-card\">\n            <div className=\"main-branch-content\">\n              <h2>🚀 Main Branch</h2>\n              <p>Access the stable main branch of the SGEX workbench with the latest published features.</p>\n              <div className=\"main-branch-actions\">\n                <a \n                  href=\"./main/index.html\" \n                  className=\"main-branch-link\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Launch Main Branch\n                </a>\n                <a \n                  href=\"/sgex/main/docs/\" \n                  className=\"docs-link\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  📚 Documentation\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Authentication Section */}\n        <div className=\"auth-section\">\n          {!isAuthenticated ? (\n            <div className=\"login-section\">\n              <h3>🔐 GitHub Authentication</h3>\n              <p>Login with your GitHub Personal Access Token to view and add comments to pull requests:</p>\n              <PATLogin onAuthSuccess={handleAuthSuccess} />\n            </div>\n          ) : (\n            <div className=\"authenticated-section\">\n              <p>✅ Authenticated - You can now view and add comments to pull requests</p>\n              <button onClick={handleLogout} className=\"logout-btn\">\n                Logout\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* Main Actions */}\n        <div className=\"main-actions\">\n          <button \n            className=\"contribute-btn primary\"\n            onClick={() => setShowContributeModal(true)}\n          >\n            🌟 How to Contribute\n          </button>\n          <a \n            href=\"https://github.com/litlfred/sgex/issues/new\" \n            className=\"contribute-btn tertiary\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            🐛 Report a Bug\n          </a>\n        </div>\n\n        {/* PR Section Header */}\n        <div className=\"pr-section-header\">\n          <div className=\"pr-header-content\">\n            <div className=\"pr-header-text\">\n              <h2>🔄 Pull Request Previews ({sortedPRs.length})</h2>\n              <p>Browse and test pull request changes in isolated preview environments</p>\n            </div>\n            <div className=\"pr-header-actions\">\n              <button \n                className=\"refresh-btn\"\n                onClick={handleManualRefresh}\n                disabled={isRefreshing}\n                title=\"Refresh PR data (clears 5-minute cache)\"\n              >\n                {isRefreshing ? '🔄 Refreshing...' : '🔄 Refresh'}\n              </button>\n              {cacheInfo && (\n                <div className=\"cache-info\">\n                  <small>\n                    {cacheInfo.exists \n                      ? `📊 Data cached (${cacheInfo.ageMinutes}m old)` \n                      : 'Fresh data'\n                    }\n                  </small>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* PR Section */}\n        <div className=\"pr-section\">\n          <div className=\"pr-controls\">\n            <div className=\"pr-filter-section\">\n              <label htmlFor=\"pr-filter\">Filter PRs:</label>\n              <select\n                id=\"pr-filter\"\n                value={prFilter}\n                onChange={(e) => {\n                  setPrFilter(e.target.value);\n                  setPrPage(1); // Reset to first page when filtering\n                }}\n                className=\"filter-select\"\n              >\n                <option value=\"open\">Open PRs Only</option>\n                <option value=\"closed\">Closed PRs Only</option>\n                <option value=\"all\">All PRs</option>\n              </select>\n            </div>\n            <input\n              type=\"text\"\n              placeholder=\"Search pull requests by title or author...\"\n              value={prSearchTerm}\n              onChange={(e) => {\n                setPrSearchTerm(e.target.value);\n                setPrPage(1); // Reset to first page when searching\n              }}\n              className=\"pr-search\"\n            />\n            <select\n              value={prSortBy}\n              onChange={(e) => {\n                setPrSortBy(e.target.value);\n                setPrPage(1); // Reset to first page when sorting\n              }}\n              className=\"sort-select\"\n            >\n              <option value=\"updated\">Sort by Recent Updates</option>\n              <option value=\"number\">Sort by PR Number</option>\n              <option value=\"alphabetical\">Sort Alphabetically</option>\n            </select>\n          </div>\n\n          <div className=\"pr-cards\">\n            {paginatedPRs.length === 0 ? (\n              <div className=\"no-items\">\n                {prSearchTerm ? (\n                  <p>No pull requests match your search \"{prSearchTerm}\".</p>\n                ) : (\n                  <p>No pull request previews available at the moment.</p>\n                )}\n              </div>\n            ) : (\n              paginatedPRs.map((pr) => {\n                const statusKey = `pr-${pr.id}`;\n                const deploymentStatus = deploymentStatuses[statusKey];\n                \n                return (\n                  <div key={pr.id} className=\"preview-card pr-card\">\n                    <div className=\"card-header\">\n                      <h3 className=\"item-name\">#{pr.number}: {pr.title}</h3>\n                      <div className=\"card-badges\">\n                        <span className={`state-badge ${pr.state}`}>\n                          {pr.state === 'open' ? '🟢' : '🔴'} {pr.state}\n                        </span>\n                        {deploymentStatus && (\n                          <span className={`status-badge ${deploymentStatus}`}>\n                            {deploymentStatus === 'active' && '🟢 Active'}\n                            {deploymentStatus === 'not-found' && '🟡 Building'}\n                            {deploymentStatus === 'errored' && '🔴 Error'}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"card-body\">\n                      <p className=\"pr-meta\">\n                        <strong>Branch:</strong> {pr.branchName} • <strong>Author:</strong> {pr.author}\n                      </p>\n                      <p className=\"item-date\">\n                        Created: {pr.createdAt} • Updated: {pr.updatedAt}\n                      </p>\n                      \n                      {/* Discussion Summary Section - Show for all users */}\n                      <div>\n                        {/* Discussion Summary Status Bar */}\n                        <div \n                          className=\"discussion-summary-bar\"\n                          onClick={() => toggleDiscussion(pr.number)}\n                        >\n                          <div className=\"discussion-summary-text\">\n                            <span className=\"discussion-summary-icon\">💬</span>\n                            {getDiscussionSummaryText(pr.number)}\n                          </div>\n                          <span className={`discussion-expand-icon ${expandedDiscussions[pr.number] ? 'expanded' : ''}`}>\n                            ▶\n                          </span>\n                        </div>\n\n                        {/* Expanded Discussion Section */}\n                        {expandedDiscussions[pr.number] && (\n                          <div className=\"discussion-expanded-section\">\n                            <div className=\"discussion-header\">\n                              <h4 className=\"discussion-title\">Discussion</h4>\n                              <div className=\"discussion-actions\">\n                                <a \n                                  href={`https://github.com/litlfred/sgex/pull/${pr.number}/files`}\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  className=\"discussion-action-btn\"\n                                >\n                                  📁 View Files\n                                </a>\n                                <a \n                                  href={pr.prUrl}\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  className=\"discussion-action-btn secondary\"\n                                >\n                                  🔗 Full Discussion\n                                </a>\n                              </div>\n                            </div>\n                            \n                            {/* Comment Input at Top - Only show for authenticated users */}\n                            {isAuthenticated ? (\n                              <div className=\"comment-input-section\">\n                                <textarea\n                                  value={commentInputs[pr.number] || ''}\n                                  onChange={(e) => setCommentInputs(prev => ({\n                                    ...prev,\n                                    [pr.number]: e.target.value\n                                  }))}\n                                  placeholder=\"Add a comment...\"\n                                  className=\"comment-input\"\n                                  rows={3}\n                                />\n                                <button\n                                  onClick={() => submitComment(pr.number, commentInputs[pr.number])}\n                                  disabled={!commentInputs[pr.number]?.trim() || submittingComments[pr.number]}\n                                  className=\"submit-comment-btn\"\n                                >\n                                  {submittingComments[pr.number] ? 'Submitting...' : 'Add Comment'}\n                                </button>\n                              </div>\n                            ) : (\n                              <div className=\"comment-auth-message\">\n                                <p>\n                                  🔐 <a href=\"#auth-section\" onClick={() => document.querySelector('.auth-section')?.scrollIntoView()}>Sign in</a> to add comments to this discussion\n                                </p>\n                              </div>\n                            )}\n                            \n                            {/* Scrollable Comments Area */}\n                            <div className=\"discussion-scroll-area\">\n                              {!prComments[pr.number] ? (\n                                <div className=\"comments-loading\">Loading full discussion...</div>\n                              ) : prComments[pr.number].length > 0 ? (\n                                <div className=\"comments-list\">\n                                  {prComments[pr.number].map((comment) => (\n                                    <div key={comment.id} className=\"comment-item\">\n                                      <div className=\"comment-header\">\n                                        <img \n                                          src={comment.avatar_url} \n                                          alt={comment.author} \n                                          className=\"comment-avatar\"\n                                        />\n                                        <span className=\"comment-author\">{comment.author}</span>\n                                        <span className=\"comment-date\">{comment.created_at}</span>\n                                      </div>\n                                      <div className=\"comment-body\">{comment.body}</div>\n                                    </div>\n                                  ))}\n                                </div>\n                              ) : (\n                                <div className=\"no-comments\">\n                                  No comments yet. {isAuthenticated ? 'Be the first to comment!' : 'Sign in to be the first to comment!'}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div className=\"pr-actions\">\n                        {deploymentStatus === 'active' ? (\n                          <a \n                            href={pr.url} \n                            className=\"preview-link\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            <span>🚀 View Preview</span>\n                          </a>\n                        ) : deploymentStatus === 'not-found' ? (\n                          <div className=\"deployment-message\">\n                            <span className=\"building-message\">\n                              🔄 Deployment in progress. Please check back in a few minutes.\n                            </span>\n                          </div>\n                        ) : deploymentStatus === 'errored' ? (\n                          <div className=\"deployment-message\">\n                            <span className=\"error-message\">\n                              ❌ Deployment failed. Please check the GitHub Actions logs or contact support.\n                            </span>\n                            <a \n                              href={`https://github.com/litlfred/sgex/actions`}\n                              className=\"actions-link\"\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              View Actions Log\n                            </a>\n                          </div>\n                        ) : (\n                          <a \n                            href={pr.url} \n                            className=\"preview-link\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            <span>🚀 View Preview</span>\n                          </a>\n                        )}\n                      }\n                        \n                        <button \n                          className=\"copy-btn\"\n                          onClick={() => copyToClipboard(pr.url, 'PR', `#${pr.number}`)}\n                          title=\"Copy URL to clipboard\"\n                        >\n                          📋 Copy URL\n                        </button>\n                        \n                        <a \n                          href={pr.prUrl} \n                          className=\"pr-link\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          <span>📋 View PR</span>\n                        </a>\n                      </div>\n\n                      {/* Workflow Status */}\n                      <WorkflowStatus\n                        workflowStatus={workflowStatuses[pr.branchName]}\n                        branchName={pr.branchName}\n                        onTriggerWorkflow={triggerWorkflow}\n                        isAuthenticated={isAuthenticated}\n                        isLoading={loadingWorkflowStatuses}\n                      />\n                    </div>\n\n                    <div className=\"card-footer\">\n                      <small className=\"preview-path\">\n                        Preview URL: <a \n                          href={pr.url} \n                          className=\"preview-url-link\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          {pr.url}\n                        </a>\n                      </small>\n                    </div>\n                  </div>\n                );\n              })\n            )}\n          </div>\n\n          {totalPRPages > 1 && (\n            <div className=\"pagination\">\n              <button \n                className=\"pagination-btn\"\n                onClick={() => setPrPage(Math.max(1, prPage - 1))}\n                disabled={prPage === 1}\n              >\n                ← Previous\n              </button>\n              <span className=\"pagination-info\">\n                Page {prPage} of {totalPRPages} ({sortedPRs.length} total)\n              </span>\n              <button \n                className=\"pagination-btn\"\n                onClick={() => setPrPage(Math.min(totalPRPages, prPage + 1))}\n                disabled={prPage === totalPRPages}\n              >\n                Next →\n              </button>\n            </div>\n          )}\n        </div>\n\n        {showContributeModal && (\n          <HelpModal\n            helpTopic={contributeHelpTopic}\n            onClose={() => setShowContributeModal(false)}\n          />\n        )}\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default BranchListing;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}