{"ast":null,"code":"import { html, useMemo, useLayoutEffect, useRef } from '../../ui';\nimport PopupMenuItem from './PopupMenuItem';\n\n/**\n * @typedef {import('./PopupMenuProvider').PopupMenuEntry} PopupMenuEntry\n */\n\n/**\n * Component that renders a popup menu entry list.\n *\n * @param {Object} props\n * @param {PopupMenuEntry[]} props.entries\n * @param {PopupMenuEntry} props.selectedEntry\n * @param {(entry: PopupMenuEntry | null) => void} props.setSelectedEntry\n */\nexport default function PopupMenuList(props) {\n  const {\n    selectedEntry,\n    setSelectedEntry,\n    entries,\n    ...restProps\n  } = props;\n  const resultsRef = useRef();\n  const groups = useMemo(() => groupEntries(entries), [entries]);\n\n  // scroll to selected result\n  useLayoutEffect(() => {\n    const containerEl = resultsRef.current;\n    if (!containerEl) return;\n    const selectedEl = containerEl.querySelector('.selected');\n    if (selectedEl) {\n      scrollIntoView(selectedEl);\n    }\n  }, [selectedEntry]);\n  return html`\n    <div class=\"djs-popup-results\" ref=${resultsRef}>\n      ${groups.map(group => html`\n        ${group.name && html`\n          <div key=${group.id} class=\"entry-header\" title=${group.name}>\n            ${group.name}\n          </div>\n        `}\n        <ul class=\"djs-popup-group\" data-group=${group.id}>\n          ${group.entries.map(entry => html`\n            <${PopupMenuItem}\n              key=${entry.id}\n              entry=${entry}\n              selected=${entry === selectedEntry}\n              onMouseEnter=${() => setSelectedEntry(entry)}\n              onMouseLeave=${() => setSelectedEntry(null)}\n              ...${restProps}\n            />\n          `)}\n        </ul>\n      `)}\n    </div>\n  `;\n}\n\n// helpers\nfunction groupEntries(entries) {\n  const groups = [];\n  const getGroup = group => groups.find(elem => group.id === elem.id);\n  const containsGroup = group => !!getGroup(group);\n\n  // legacy support for provider built for the old popUp menu\n  const formatGroup = group => typeof group === 'string' ? {\n    id: group\n  } : group;\n  entries.forEach(entry => {\n    // assume a default group when none is provided\n    const group = entry.group ? formatGroup(entry.group) : {\n      id: 'default'\n    };\n    if (!containsGroup(group)) {\n      groups.push({\n        ...group,\n        entries: [entry]\n      });\n    } else {\n      getGroup(group).entries.push(entry);\n    }\n  });\n  return groups;\n}\n\n// helpers ////////////////\n\nfunction scrollIntoView(el) {\n  if (typeof el.scrollIntoViewIfNeeded === 'function') {\n    el.scrollIntoViewIfNeeded();\n  } else {\n    el.scrollIntoView({\n      scrollMode: 'if-needed',\n      block: 'nearest'\n    });\n  }\n}","map":{"version":3,"names":["html","useMemo","useLayoutEffect","useRef","PopupMenuItem","PopupMenuList","props","selectedEntry","setSelectedEntry","entries","restProps","resultsRef","groups","groupEntries","containerEl","current","selectedEl","querySelector","scrollIntoView","map","group","name","id","entry","getGroup","find","elem","containsGroup","formatGroup","forEach","push","el","scrollIntoViewIfNeeded","scrollMode","block"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/popup-menu/PopupMenuList.js"],"sourcesContent":["import {\n  html,\n  useMemo,\n  useLayoutEffect,\n  useRef\n} from '../../ui';\n\nimport PopupMenuItem from './PopupMenuItem';\n\n/**\n * @typedef {import('./PopupMenuProvider').PopupMenuEntry} PopupMenuEntry\n */\n\n/**\n * Component that renders a popup menu entry list.\n *\n * @param {Object} props\n * @param {PopupMenuEntry[]} props.entries\n * @param {PopupMenuEntry} props.selectedEntry\n * @param {(entry: PopupMenuEntry | null) => void} props.setSelectedEntry\n */\nexport default function PopupMenuList(props) {\n  const {\n    selectedEntry,\n    setSelectedEntry,\n    entries,\n    ...restProps\n  } = props;\n\n  const resultsRef = useRef();\n\n  const groups = useMemo(() => groupEntries(entries), [ entries ]);\n\n  // scroll to selected result\n  useLayoutEffect(() => {\n    const containerEl = resultsRef.current;\n\n    if (!containerEl)\n      return;\n\n    const selectedEl = containerEl.querySelector('.selected');\n\n    if (selectedEl) {\n      scrollIntoView(selectedEl);\n    }\n  }, [ selectedEntry ]);\n\n  return html`\n    <div class=\"djs-popup-results\" ref=${ resultsRef }>\n      ${ groups.map(group => html`\n        ${ group.name && html`\n          <div key=${ group.id } class=\"entry-header\" title=${ group.name }>\n            ${ group.name }\n          </div>\n        ` }\n        <ul class=\"djs-popup-group\" data-group=${ group.id }>\n          ${ group.entries.map(entry => html`\n            <${PopupMenuItem}\n              key=${ entry.id }\n              entry=${ entry }\n              selected=${ entry === selectedEntry }\n              onMouseEnter=${ () => setSelectedEntry(entry) }\n              onMouseLeave=${ () => setSelectedEntry(null) }\n              ...${ restProps }\n            />\n          `) }\n        </ul>\n      `) }\n    </div>\n  `;\n}\n\n\n// helpers\nfunction groupEntries(entries) {\n  const groups = [];\n\n  const getGroup = group => groups.find(elem => group.id === elem.id);\n\n  const containsGroup = group => !!getGroup(group);\n\n  // legacy support for provider built for the old popUp menu\n  const formatGroup = group =>\n    typeof group === 'string' ? { id: group } : group;\n\n  entries.forEach(entry => {\n\n    // assume a default group when none is provided\n    const group = entry.group ? formatGroup(entry.group) : { id: 'default' };\n\n    if (!containsGroup(group)) {\n      groups.push({ ...group, entries: [ entry ] });\n    } else {\n      getGroup(group).entries.push(entry);\n    }\n  });\n\n  return groups;\n}\n\n// helpers ////////////////\n\nfunction scrollIntoView(el) {\n  if (typeof el.scrollIntoViewIfNeeded === 'function') {\n    el.scrollIntoViewIfNeeded();\n  } else {\n    el.scrollIntoView({\n      scrollMode: 'if-needed',\n      block: 'nearest'\n    });\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}