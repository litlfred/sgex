{"ast":null,"code":"import { isArray, forEach } from 'min-dash';\n\n/**\n * @typedef {import('../../core/Canvas').default} Canvas\n * @typedef {import('../../core/EventBus').default} EventBus\n */\n\n/**\n * A service that offers the current selection in a diagram.\n * Offers the api to control the selection, too.\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n */\nexport default function Selection(eventBus, canvas) {\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n\n  /**\n   * @type {Object[]}\n   */\n  this._selectedElements = [];\n  var self = this;\n  eventBus.on(['shape.remove', 'connection.remove'], function (e) {\n    var element = e.element;\n    self.deselect(element);\n  });\n  eventBus.on(['diagram.clear', 'root.set'], function (e) {\n    self.select(null);\n  });\n}\nSelection.$inject = ['eventBus', 'canvas'];\n\n/**\n * Deselect an element.\n *\n * @param {Object} element The element to deselect.\n */\nSelection.prototype.deselect = function (element) {\n  var selectedElements = this._selectedElements;\n  var idx = selectedElements.indexOf(element);\n  if (idx !== -1) {\n    var oldSelection = selectedElements.slice();\n    selectedElements.splice(idx, 1);\n    this._eventBus.fire('selection.changed', {\n      oldSelection: oldSelection,\n      newSelection: selectedElements\n    });\n  }\n};\n\n/**\n * Get the selected elements.\n *\n * @return {Object[]} The selected elements.\n */\nSelection.prototype.get = function () {\n  return this._selectedElements;\n};\n\n/**\n * Check whether an element is selected.\n *\n * @param {Object} element The element.\n *\n * @return {boolean} Whether the element is selected.\n */\nSelection.prototype.isSelected = function (element) {\n  return this._selectedElements.indexOf(element) !== -1;\n};\n\n/**\n * Select one or many elements.\n *\n * @param {Object|Object[]} elements The element(s) to select.\n * @param {boolean} [add] Whether to add the element(s) to the selected elements.\n * Defaults to `false`.\n */\nSelection.prototype.select = function (elements, add) {\n  var selectedElements = this._selectedElements,\n    oldSelection = selectedElements.slice();\n  if (!isArray(elements)) {\n    elements = elements ? [elements] : [];\n  }\n  var canvas = this._canvas;\n  var rootElement = canvas.getRootElement();\n  elements = elements.filter(function (element) {\n    var elementRoot = canvas.findRoot(element);\n    return rootElement === elementRoot;\n  });\n\n  // selection may be cleared by passing an empty array or null\n  // to the method\n  if (add) {\n    forEach(elements, function (element) {\n      if (selectedElements.indexOf(element) !== -1) {\n        // already selected\n        return;\n      } else {\n        selectedElements.push(element);\n      }\n    });\n  } else {\n    this._selectedElements = selectedElements = elements.slice();\n  }\n  this._eventBus.fire('selection.changed', {\n    oldSelection: oldSelection,\n    newSelection: selectedElements\n  });\n};","map":{"version":3,"names":["isArray","forEach","Selection","eventBus","canvas","_eventBus","_canvas","_selectedElements","self","on","e","element","deselect","select","$inject","prototype","selectedElements","idx","indexOf","oldSelection","slice","splice","fire","newSelection","get","isSelected","elements","add","rootElement","getRootElement","filter","elementRoot","findRoot","push"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/selection/Selection.js"],"sourcesContent":["import {\n  isArray,\n  forEach\n} from 'min-dash';\n\n/**\n * @typedef {import('../../core/Canvas').default} Canvas\n * @typedef {import('../../core/EventBus').default} EventBus\n */\n\n/**\n * A service that offers the current selection in a diagram.\n * Offers the api to control the selection, too.\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n */\nexport default function Selection(eventBus, canvas) {\n\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n\n  /**\n   * @type {Object[]}\n   */\n  this._selectedElements = [];\n\n  var self = this;\n\n  eventBus.on([ 'shape.remove', 'connection.remove' ], function(e) {\n    var element = e.element;\n    self.deselect(element);\n  });\n\n  eventBus.on([ 'diagram.clear', 'root.set' ], function(e) {\n    self.select(null);\n  });\n}\n\nSelection.$inject = [ 'eventBus', 'canvas' ];\n\n/**\n * Deselect an element.\n *\n * @param {Object} element The element to deselect.\n */\nSelection.prototype.deselect = function(element) {\n  var selectedElements = this._selectedElements;\n\n  var idx = selectedElements.indexOf(element);\n\n  if (idx !== -1) {\n    var oldSelection = selectedElements.slice();\n\n    selectedElements.splice(idx, 1);\n\n    this._eventBus.fire('selection.changed', { oldSelection: oldSelection, newSelection: selectedElements });\n  }\n};\n\n/**\n * Get the selected elements.\n *\n * @return {Object[]} The selected elements.\n */\nSelection.prototype.get = function() {\n  return this._selectedElements;\n};\n\n/**\n * Check whether an element is selected.\n *\n * @param {Object} element The element.\n *\n * @return {boolean} Whether the element is selected.\n */\nSelection.prototype.isSelected = function(element) {\n  return this._selectedElements.indexOf(element) !== -1;\n};\n\n\n/**\n * Select one or many elements.\n *\n * @param {Object|Object[]} elements The element(s) to select.\n * @param {boolean} [add] Whether to add the element(s) to the selected elements.\n * Defaults to `false`.\n */\nSelection.prototype.select = function(elements, add) {\n  var selectedElements = this._selectedElements,\n      oldSelection = selectedElements.slice();\n\n  if (!isArray(elements)) {\n    elements = elements ? [ elements ] : [];\n  }\n\n  var canvas = this._canvas;\n\n  var rootElement = canvas.getRootElement();\n\n  elements = elements.filter(function(element) {\n    var elementRoot = canvas.findRoot(element);\n\n    return rootElement === elementRoot;\n  });\n\n  // selection may be cleared by passing an empty array or null\n  // to the method\n  if (add) {\n    forEach(elements, function(element) {\n      if (selectedElements.indexOf(element) !== -1) {\n\n        // already selected\n        return;\n      } else {\n        selectedElements.push(element);\n      }\n    });\n  } else {\n    this._selectedElements = selectedElements = elements.slice();\n  }\n\n  this._eventBus.fire('selection.changed', { oldSelection: oldSelection, newSelection: selectedElements });\n};\n"],"mappings":"AAAA,SACEA,OAAO,EACPC,OAAO,QACF,UAAU;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,SAASA,CAACC,QAAQ,EAAEC,MAAM,EAAE;EAElD,IAAI,CAACC,SAAS,GAAGF,QAAQ;EACzB,IAAI,CAACG,OAAO,GAAGF,MAAM;;EAErB;AACF;AACA;EACE,IAAI,CAACG,iBAAiB,GAAG,EAAE;EAE3B,IAAIC,IAAI,GAAG,IAAI;EAEfL,QAAQ,CAACM,EAAE,CAAC,CAAE,cAAc,EAAE,mBAAmB,CAAE,EAAE,UAASC,CAAC,EAAE;IAC/D,IAAIC,OAAO,GAAGD,CAAC,CAACC,OAAO;IACvBH,IAAI,CAACI,QAAQ,CAACD,OAAO,CAAC;EACxB,CAAC,CAAC;EAEFR,QAAQ,CAACM,EAAE,CAAC,CAAE,eAAe,EAAE,UAAU,CAAE,EAAE,UAASC,CAAC,EAAE;IACvDF,IAAI,CAACK,MAAM,CAAC,IAAI,CAAC;EACnB,CAAC,CAAC;AACJ;AAEAX,SAAS,CAACY,OAAO,GAAG,CAAE,UAAU,EAAE,QAAQ,CAAE;;AAE5C;AACA;AACA;AACA;AACA;AACAZ,SAAS,CAACa,SAAS,CAACH,QAAQ,GAAG,UAASD,OAAO,EAAE;EAC/C,IAAIK,gBAAgB,GAAG,IAAI,CAACT,iBAAiB;EAE7C,IAAIU,GAAG,GAAGD,gBAAgB,CAACE,OAAO,CAACP,OAAO,CAAC;EAE3C,IAAIM,GAAG,KAAK,CAAC,CAAC,EAAE;IACd,IAAIE,YAAY,GAAGH,gBAAgB,CAACI,KAAK,CAAC,CAAC;IAE3CJ,gBAAgB,CAACK,MAAM,CAACJ,GAAG,EAAE,CAAC,CAAC;IAE/B,IAAI,CAACZ,SAAS,CAACiB,IAAI,CAAC,mBAAmB,EAAE;MAAEH,YAAY,EAAEA,YAAY;MAAEI,YAAY,EAAEP;IAAiB,CAAC,CAAC;EAC1G;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAd,SAAS,CAACa,SAAS,CAACS,GAAG,GAAG,YAAW;EACnC,OAAO,IAAI,CAACjB,iBAAiB;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,SAAS,CAACa,SAAS,CAACU,UAAU,GAAG,UAASd,OAAO,EAAE;EACjD,OAAO,IAAI,CAACJ,iBAAiB,CAACW,OAAO,CAACP,OAAO,CAAC,KAAK,CAAC,CAAC;AACvD,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,SAAS,CAACa,SAAS,CAACF,MAAM,GAAG,UAASa,QAAQ,EAAEC,GAAG,EAAE;EACnD,IAAIX,gBAAgB,GAAG,IAAI,CAACT,iBAAiB;IACzCY,YAAY,GAAGH,gBAAgB,CAACI,KAAK,CAAC,CAAC;EAE3C,IAAI,CAACpB,OAAO,CAAC0B,QAAQ,CAAC,EAAE;IACtBA,QAAQ,GAAGA,QAAQ,GAAG,CAAEA,QAAQ,CAAE,GAAG,EAAE;EACzC;EAEA,IAAItB,MAAM,GAAG,IAAI,CAACE,OAAO;EAEzB,IAAIsB,WAAW,GAAGxB,MAAM,CAACyB,cAAc,CAAC,CAAC;EAEzCH,QAAQ,GAAGA,QAAQ,CAACI,MAAM,CAAC,UAASnB,OAAO,EAAE;IAC3C,IAAIoB,WAAW,GAAG3B,MAAM,CAAC4B,QAAQ,CAACrB,OAAO,CAAC;IAE1C,OAAOiB,WAAW,KAAKG,WAAW;EACpC,CAAC,CAAC;;EAEF;EACA;EACA,IAAIJ,GAAG,EAAE;IACP1B,OAAO,CAACyB,QAAQ,EAAE,UAASf,OAAO,EAAE;MAClC,IAAIK,gBAAgB,CAACE,OAAO,CAACP,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;QAE5C;QACA;MACF,CAAC,MAAM;QACLK,gBAAgB,CAACiB,IAAI,CAACtB,OAAO,CAAC;MAChC;IACF,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,IAAI,CAACJ,iBAAiB,GAAGS,gBAAgB,GAAGU,QAAQ,CAACN,KAAK,CAAC,CAAC;EAC9D;EAEA,IAAI,CAACf,SAAS,CAACiB,IAAI,CAAC,mBAAmB,EAAE;IAAEH,YAAY,EAAEA,YAAY;IAAEI,YAAY,EAAEP;EAAiB,CAAC,CAAC;AAC1G,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}