{"ast":null,"code":"import { setLabel, getLabel } from '../../../util/LabelUtil';\nimport { getExternalLabelMid, isLabelExternal, hasExternalLabel, isLabel } from '../../../util/LabelUtil';\nimport { is } from '../../../util/ModelUtil';\nvar NULL_DIMENSIONS = {\n  width: 0,\n  height: 0\n};\n\n/**\n * @typedef {import('../../modeling/Modeling').default} Modeling\n * @typedef {import('../../../draw/TextRenderer').default} TextRenderer\n * @typedef {import('../../modeling/BpmnFactory').default} BpmnFactory\n *\n * @typedef {import('../../../model/Types').Element} Element\n */\n\n/**\n * A handler that updates the text of a BPMN element.\n *\n * @param {Modeling} modeling\n * @param {TextRenderer} textRenderer\n * @param {BpmnFactory} bpmnFactory\n */\nexport default function UpdateLabelHandler(modeling, textRenderer, bpmnFactory) {\n  /**\n   * Set the label and return the changed elements.\n   *\n   * Element parameter can be label itself or connection (i.e. sequence flow).\n   *\n   * @param {Element} element\n   * @param {string} text\n   */\n  function setText(element, text) {\n    // external label if present\n    var label = element.label || element;\n    var labelTarget = element.labelTarget || element;\n    setLabel(label, text, labelTarget !== label);\n    return [label, labelTarget];\n  }\n  function preExecute(ctx) {\n    var element = ctx.element,\n      businessObject = element.businessObject,\n      newLabel = ctx.newLabel;\n    if (!isLabel(element) && isLabelExternal(element) && !hasExternalLabel(element) && !isEmptyText(newLabel)) {\n      // create label\n      var paddingTop = 7;\n      var labelCenter = getExternalLabelMid(element);\n      labelCenter = {\n        x: labelCenter.x,\n        y: labelCenter.y + paddingTop\n      };\n      modeling.createLabel(element, labelCenter, {\n        id: businessObject.id + '_label',\n        businessObject: businessObject,\n        di: element.di\n      });\n    }\n  }\n  function execute(ctx) {\n    ctx.oldLabel = getLabel(ctx.element);\n    return setText(ctx.element, ctx.newLabel);\n  }\n  function revert(ctx) {\n    return setText(ctx.element, ctx.oldLabel);\n  }\n  function postExecute(ctx) {\n    var element = ctx.element,\n      label = element.label || element,\n      newLabel = ctx.newLabel,\n      newBounds = ctx.newBounds,\n      hints = ctx.hints || {};\n\n    // ignore internal labels for elements except text annotations\n    if (!isLabel(label) && !is(label, 'bpmn:TextAnnotation')) {\n      return;\n    }\n    if (isLabel(label) && isEmptyText(newLabel)) {\n      if (hints.removeShape !== false) {\n        modeling.removeShape(label, {\n          unsetLabel: false\n        });\n      }\n      return;\n    }\n    var text = getLabel(element);\n\n    // resize element based on label _or_ pre-defined bounds\n    if (typeof newBounds === 'undefined') {\n      newBounds = textRenderer.getExternalLabelBounds(label, text);\n    }\n\n    // setting newBounds to false or _null_ will\n    // disable the postExecute resize operation\n    if (newBounds) {\n      modeling.resizeShape(label, newBounds, NULL_DIMENSIONS);\n    }\n  }\n\n  // API\n\n  this.preExecute = preExecute;\n  this.execute = execute;\n  this.revert = revert;\n  this.postExecute = postExecute;\n}\nUpdateLabelHandler.$inject = ['modeling', 'textRenderer', 'bpmnFactory'];\n\n// helpers //////////\n\nfunction isEmptyText(label) {\n  return !label || !label.trim();\n}","map":{"version":3,"names":["setLabel","getLabel","getExternalLabelMid","isLabelExternal","hasExternalLabel","isLabel","is","NULL_DIMENSIONS","width","height","UpdateLabelHandler","modeling","textRenderer","bpmnFactory","setText","element","text","label","labelTarget","preExecute","ctx","businessObject","newLabel","isEmptyText","paddingTop","labelCenter","x","y","createLabel","id","di","execute","oldLabel","revert","postExecute","newBounds","hints","removeShape","unsetLabel","getExternalLabelBounds","resizeShape","$inject","trim"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/label-editing/cmd/UpdateLabelHandler.js"],"sourcesContent":["import {\n  setLabel,\n  getLabel\n} from '../../../util/LabelUtil';\n\nimport {\n  getExternalLabelMid,\n  isLabelExternal,\n  hasExternalLabel,\n  isLabel\n} from '../../../util/LabelUtil';\n\nimport {\n  is\n} from '../../../util/ModelUtil';\n\nvar NULL_DIMENSIONS = {\n  width: 0,\n  height: 0\n};\n\n/**\n * @typedef {import('../../modeling/Modeling').default} Modeling\n * @typedef {import('../../../draw/TextRenderer').default} TextRenderer\n * @typedef {import('../../modeling/BpmnFactory').default} BpmnFactory\n *\n * @typedef {import('../../../model/Types').Element} Element\n */\n\n/**\n * A handler that updates the text of a BPMN element.\n *\n * @param {Modeling} modeling\n * @param {TextRenderer} textRenderer\n * @param {BpmnFactory} bpmnFactory\n */\nexport default function UpdateLabelHandler(modeling, textRenderer, bpmnFactory) {\n\n  /**\n   * Set the label and return the changed elements.\n   *\n   * Element parameter can be label itself or connection (i.e. sequence flow).\n   *\n   * @param {Element} element\n   * @param {string} text\n   */\n  function setText(element, text) {\n\n    // external label if present\n    var label = element.label || element;\n\n    var labelTarget = element.labelTarget || element;\n\n    setLabel(label, text, labelTarget !== label);\n\n    return [ label, labelTarget ];\n  }\n\n  function preExecute(ctx) {\n    var element = ctx.element,\n        businessObject = element.businessObject,\n        newLabel = ctx.newLabel;\n\n    if (!isLabel(element)\n        && isLabelExternal(element)\n        && !hasExternalLabel(element)\n        && !isEmptyText(newLabel)) {\n\n      // create label\n      var paddingTop = 7;\n\n      var labelCenter = getExternalLabelMid(element);\n\n      labelCenter = {\n        x: labelCenter.x,\n        y: labelCenter.y + paddingTop\n      };\n\n      modeling.createLabel(element, labelCenter, {\n        id: businessObject.id + '_label',\n        businessObject: businessObject,\n        di: element.di\n      });\n    }\n  }\n\n  function execute(ctx) {\n    ctx.oldLabel = getLabel(ctx.element);\n    return setText(ctx.element, ctx.newLabel);\n  }\n\n  function revert(ctx) {\n    return setText(ctx.element, ctx.oldLabel);\n  }\n\n  function postExecute(ctx) {\n    var element = ctx.element,\n        label = element.label || element,\n        newLabel = ctx.newLabel,\n        newBounds = ctx.newBounds,\n        hints = ctx.hints || {};\n\n    // ignore internal labels for elements except text annotations\n    if (!isLabel(label) && !is(label, 'bpmn:TextAnnotation')) {\n      return;\n    }\n\n    if (isLabel(label) && isEmptyText(newLabel)) {\n\n      if (hints.removeShape !== false) {\n        modeling.removeShape(label, { unsetLabel: false });\n      }\n\n      return;\n    }\n\n    var text = getLabel(element);\n\n    // resize element based on label _or_ pre-defined bounds\n    if (typeof newBounds === 'undefined') {\n      newBounds = textRenderer.getExternalLabelBounds(label, text);\n    }\n\n    // setting newBounds to false or _null_ will\n    // disable the postExecute resize operation\n    if (newBounds) {\n      modeling.resizeShape(label, newBounds, NULL_DIMENSIONS);\n    }\n  }\n\n  // API\n\n  this.preExecute = preExecute;\n  this.execute = execute;\n  this.revert = revert;\n  this.postExecute = postExecute;\n}\n\nUpdateLabelHandler.$inject = [\n  'modeling',\n  'textRenderer',\n  'bpmnFactory'\n];\n\n\n// helpers //////////\n\nfunction isEmptyText(label) {\n  return !label || !label.trim();\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}