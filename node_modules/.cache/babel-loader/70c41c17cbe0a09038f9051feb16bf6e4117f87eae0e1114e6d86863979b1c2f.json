{"ast":null,"code":"import { isNumber, assign, forEach, every, debounce, bind, reduce, find } from 'min-dash';\nimport { assignStyle, attr as domAttr } from 'min-dom';\nimport { add as collectionAdd, remove as collectionRemove } from '../util/Collections';\nimport { getType, getBBox as getBoundingBox } from '../util/Elements';\nimport { asTRBL } from '../layout/LayoutUtil';\nimport { append as svgAppend, attr as svgAttr, classes as svgClasses, create as svgCreate, transform as svgTransform, remove as svgRemove } from 'tiny-svg';\nimport { createMatrix } from 'tiny-svg';\n\n/**\n * @typedef {import('./Types').ConnectionLike} ConnectionLike\n * @typedef {import('./Types').RootLike} RootLike\n * @typedef {import('./Types').ParentLike } ParentLike\n * @typedef {import('./Types').ShapeLike} ShapeLike\n *\n * @typedef { {\n *   container?: HTMLElement;\n *   deferUpdate?: boolean;\n *   width?: number;\n *   height?: number;\n *   autoFocus?: boolean;\n * } } CanvasConfig\n * @typedef { {\n *   group: SVGElement;\n *   index: number;\n *   visible: boolean;\n * } } CanvasLayer\n * @typedef { {\n *   [key: string]: CanvasLayer;\n * } } CanvasLayers\n * @typedef { {\n *   rootElement: ShapeLike;\n *   layer: CanvasLayer;\n * } } CanvasPlane\n * @typedef { {\n *   scale: number;\n *   inner: Rect;\n *   outer: Dimensions;\n * } & Rect } CanvasViewbox\n *\n * @typedef {import('./ElementRegistry').default} ElementRegistry\n * @typedef {import('./EventBus').default} EventBus\n * @typedef {import('./GraphicsFactory').default} GraphicsFactory\n *\n * @typedef {import('../util/Types').Dimensions} Dimensions\n * @typedef {import('../util/Types').Point} Point\n * @typedef {import('../util/Types').Rect} Rect\n * @typedef {import('../util/Types').RectTRBL} RectTRBL\n * @typedef {import('../util/Types').ScrollDelta} ScrollDelta\n */\n\nfunction round(number, resolution) {\n  return Math.round(number * resolution) / resolution;\n}\nfunction ensurePx(number) {\n  return isNumber(number) ? number + 'px' : number;\n}\nfunction findRoot(element) {\n  while (element.parent) {\n    element = element.parent;\n  }\n  return element;\n}\n\n/**\n * Creates a HTML container element for a SVG element with\n * the given configuration\n *\n * @param {CanvasConfig} options\n *\n * @return {HTMLElement} the container element\n */\nfunction createContainer(options) {\n  options = assign({}, {\n    width: '100%',\n    height: '100%'\n  }, options);\n  const container = options.container || document.body;\n\n  // create a <div> around the svg element with the respective size\n  // this way we can always get the correct container size\n  // (this is impossible for <svg> elements at the moment)\n  const parent = document.createElement('div');\n  parent.setAttribute('class', 'djs-container djs-parent');\n  assignStyle(parent, {\n    position: 'relative',\n    overflow: 'hidden',\n    width: ensurePx(options.width),\n    height: ensurePx(options.height)\n  });\n  container.appendChild(parent);\n  return parent;\n}\nfunction createGroup(parent, cls, childIndex) {\n  const group = svgCreate('g');\n  svgClasses(group).add(cls);\n  const index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1;\n\n  // must ensure second argument is node or _null_\n  // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n  parent.insertBefore(group, parent.childNodes[index] || null);\n  return group;\n}\nconst BASE_LAYER = 'base';\n\n// render plane contents behind utility layers\nconst PLANE_LAYER_INDEX = 0;\nconst UTILITY_LAYER_INDEX = 1;\nconst REQUIRED_MODEL_ATTRS = {\n  shape: ['x', 'y', 'width', 'height'],\n  connection: ['waypoints']\n};\n\n/**\n * The main drawing canvas.\n *\n * @class\n * @constructor\n *\n * @emits Canvas#canvas.init\n *\n * @param {CanvasConfig|null} config\n * @param {EventBus} eventBus\n * @param {GraphicsFactory} graphicsFactory\n * @param {ElementRegistry} elementRegistry\n */\nexport default function Canvas(config, eventBus, graphicsFactory, elementRegistry) {\n  this._eventBus = eventBus;\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n\n  /**\n   * @type {number}\n   */\n  this._rootsIdx = 0;\n\n  /**\n   * @type {CanvasLayers}\n   */\n  this._layers = {};\n\n  /**\n   * @type {CanvasPlane[]}\n   */\n  this._planes = [];\n\n  /**\n   * @type {RootLike|null}\n   */\n  this._rootElement = null;\n\n  /**\n   * @type {boolean}\n   */\n  this._focused = false;\n  this._init(config || {});\n}\nCanvas.$inject = ['config.canvas', 'eventBus', 'graphicsFactory', 'elementRegistry'];\n\n/**\n * Creates a <svg> element that is wrapped into a <div>.\n * This way we are always able to correctly figure out the size of the svg element\n * by querying the parent node.\n\n * (It is not possible to get the size of a svg element cross browser @ 2014-04-01)\n\n * <div class=\"djs-container\" style=\"width: {desired-width}, height: {desired-height}\">\n *   <svg width=\"100%\" height=\"100%\">\n *    ...\n *   </svg>\n * </div>\n *\n * @param {CanvasConfig} config\n */\nCanvas.prototype._init = function (config) {\n  const eventBus = this._eventBus;\n\n  // html container\n  const container = this._container = createContainer(config);\n  const svg = this._svg = svgCreate('svg');\n  svgAttr(svg, {\n    width: '100%',\n    height: '100%'\n  });\n  domAttr(svg, 'tabindex', 0);\n  config.autoFocus && eventBus.on('element.hover', () => {\n    this.restoreFocus();\n  });\n  eventBus.on('element.mousedown', 500, event => {\n    this.focus();\n  });\n  svg.addEventListener('focusin', () => {\n    this._setFocused(true);\n  });\n  svg.addEventListener('focusout', () => {\n    this._setFocused(false);\n  });\n  svgAppend(container, svg);\n  const viewport = this._viewport = createGroup(svg, 'viewport');\n\n  // debounce canvas.viewbox.changed events when deferUpdate is set\n  // to help with potential performance issues\n  if (config.deferUpdate) {\n    this._viewboxChanged = debounce(bind(this._viewboxChanged, this), 300);\n  }\n  eventBus.on('diagram.init', () => {\n    /**\n     * An event indicating that the canvas is ready to be drawn on.\n     *\n     * @memberOf Canvas\n     *\n     * @event canvas.init\n     *\n     * @type {Object}\n     * @property {SVGElement} svg the created svg element\n     * @property {SVGElement} viewport the direct parent of diagram elements and shapes\n     */\n    eventBus.fire('canvas.init', {\n      svg: svg,\n      viewport: viewport\n    });\n  });\n\n  // reset viewbox on shape changes to\n  // recompute the viewbox\n  eventBus.on(['shape.added', 'connection.added', 'shape.removed', 'connection.removed', 'elements.changed', 'root.set'], () => {\n    delete this._cachedViewbox;\n  });\n  eventBus.on('diagram.destroy', 500, this._destroy, this);\n  eventBus.on('diagram.clear', 500, this._clear, this);\n};\nCanvas.prototype._destroy = function () {\n  this._eventBus.fire('canvas.destroy', {\n    svg: this._svg,\n    viewport: this._viewport\n  });\n  const parent = this._container.parentNode;\n  if (parent) {\n    parent.removeChild(this._container);\n  }\n  delete this._svg;\n  delete this._container;\n  delete this._layers;\n  delete this._planes;\n  delete this._rootElement;\n  delete this._viewport;\n};\nCanvas.prototype._setFocused = function (focused) {\n  if (focused == this._focused) {\n    return;\n  }\n  this._focused = focused;\n  this._eventBus.fire('canvas.focus.changed', {\n    focused\n  });\n};\nCanvas.prototype._clear = function () {\n  const allElements = this._elementRegistry.getAll();\n\n  // remove all elements\n  allElements.forEach(element => {\n    const type = getType(element);\n    if (type === 'root') {\n      this.removeRootElement(element);\n    } else {\n      this._removeElement(element, type);\n    }\n  });\n\n  // remove all planes\n  this._planes = [];\n  this._rootElement = null;\n\n  // force recomputation of view box\n  delete this._cachedViewbox;\n};\n\n/**\n * Sets focus on the canvas SVG element.\n */\nCanvas.prototype.focus = function () {\n  this._svg.focus({\n    preventScroll: true\n  });\n  this._setFocused(true);\n};\n\n/**\n* Sets focus on the canvas SVG element if `document.body` is currently focused.\n*/\nCanvas.prototype.restoreFocus = function () {\n  if (document.activeElement === document.body) {\n    this.focus();\n  }\n};\n\n/**\n* Returns true if the canvas is focused.\n*\n* @return {boolean}\n*/\nCanvas.prototype.isFocused = function () {\n  return this._focused;\n};\n\n/**\n * Returns the default layer on which\n * all elements are drawn.\n *\n * @return {SVGElement}  The SVG element of the layer.\n */\nCanvas.prototype.getDefaultLayer = function () {\n  return this.getLayer(BASE_LAYER, PLANE_LAYER_INDEX);\n};\n\n/**\n * Returns a layer that is used to draw elements\n * or annotations on it.\n *\n * Non-existing layers retrieved through this method\n * will be created. During creation, the optional index\n * may be used to create layers below or above existing layers.\n * A layer with a certain index is always created above all\n * existing layers with the same index.\n *\n * @param {string} name The name of the layer.\n * @param {number} [index] The index of the layer.\n *\n * @return {SVGElement} The SVG element of the layer.\n */\nCanvas.prototype.getLayer = function (name, index) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n  let layer = this._layers[name];\n  if (!layer) {\n    layer = this._layers[name] = this._createLayer(name, index);\n  }\n\n  // throw an error if layer creation / retrival is\n  // requested on different index\n  if (typeof index !== 'undefined' && layer.index !== index) {\n    throw new Error('layer <' + name + '> already created at index <' + index + '>');\n  }\n  return layer.group;\n};\n\n/**\n * For a given index, return the number of layers that have a higher index and\n * are visible.\n *\n * This is used to determine the node a layer should be inserted at.\n *\n * @param {number} index\n *\n * @return {number}\n */\nCanvas.prototype._getChildIndex = function (index) {\n  return reduce(this._layers, function (childIndex, layer) {\n    if (layer.visible && index >= layer.index) {\n      childIndex++;\n    }\n    return childIndex;\n  }, 0);\n};\n\n/**\n * Creates a given layer and returns it.\n *\n * @param {string} name\n * @param {number} [index=0]\n *\n * @return {CanvasLayer}\n */\nCanvas.prototype._createLayer = function (name, index) {\n  if (typeof index === 'undefined') {\n    index = UTILITY_LAYER_INDEX;\n  }\n  const childIndex = this._getChildIndex(index);\n  return {\n    group: createGroup(this._viewport, 'layer-' + name, childIndex),\n    index: index,\n    visible: true\n  };\n};\n\n/**\n * Shows a given layer.\n *\n * @param {string} name The name of the layer.\n *\n * @return {SVGElement} The SVG element of the layer.\n */\nCanvas.prototype.showLayer = function (name) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n  const layer = this._layers[name];\n  if (!layer) {\n    throw new Error('layer <' + name + '> does not exist');\n  }\n  const viewport = this._viewport;\n  const group = layer.group;\n  const index = layer.index;\n  if (layer.visible) {\n    return group;\n  }\n  const childIndex = this._getChildIndex(index);\n  viewport.insertBefore(group, viewport.childNodes[childIndex] || null);\n  layer.visible = true;\n  return group;\n};\n\n/**\n * Hides a given layer.\n *\n * @param {string} name The name of the layer.\n *\n * @return {SVGElement} The SVG element of the layer.\n */\nCanvas.prototype.hideLayer = function (name) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n  const layer = this._layers[name];\n  if (!layer) {\n    throw new Error('layer <' + name + '> does not exist');\n  }\n  const group = layer.group;\n  if (!layer.visible) {\n    return group;\n  }\n  svgRemove(group);\n  layer.visible = false;\n  return group;\n};\nCanvas.prototype._removeLayer = function (name) {\n  const layer = this._layers[name];\n  if (layer) {\n    delete this._layers[name];\n    svgRemove(layer.group);\n  }\n};\n\n/**\n * Returns the currently active layer. Can be null.\n *\n * @return {CanvasLayer|null} The active layer of `null`.\n */\nCanvas.prototype.getActiveLayer = function () {\n  const plane = this._findPlaneForRoot(this.getRootElement());\n  if (!plane) {\n    return null;\n  }\n  return plane.layer;\n};\n\n/**\n * Returns the plane which contains the given element.\n *\n * @param {ShapeLike|ConnectionLike|string} element The element or its ID.\n *\n * @return {RootLike|undefined} The root of the element.\n */\nCanvas.prototype.findRoot = function (element) {\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  }\n  if (!element) {\n    return;\n  }\n  const plane = this._findPlaneForRoot(findRoot(element)) || {};\n  return plane.rootElement;\n};\n\n/**\n * Return a list of all root elements on the diagram.\n *\n * @return {(RootLike)[]} The list of root elements.\n */\nCanvas.prototype.getRootElements = function () {\n  return this._planes.map(function (plane) {\n    return plane.rootElement;\n  });\n};\nCanvas.prototype._findPlaneForRoot = function (rootElement) {\n  return find(this._planes, function (plane) {\n    return plane.rootElement === rootElement;\n  });\n};\n\n/**\n * Returns the html element that encloses the\n * drawing canvas.\n *\n * @return {HTMLElement} The HTML element of the container.\n */\nCanvas.prototype.getContainer = function () {\n  return this._container;\n};\n\n// markers //////////////////////\n\nCanvas.prototype._updateMarker = function (element, marker, add) {\n  let container;\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n  element.markers = element.markers || new Set();\n\n  // we need to access all\n  container = this._elementRegistry._elements[element.id];\n  if (!container) {\n    return;\n  }\n  forEach([container.gfx, container.secondaryGfx], function (gfx) {\n    if (gfx) {\n      // invoke either addClass or removeClass based on mode\n      if (add) {\n        element.markers.add(marker);\n        svgClasses(gfx).add(marker);\n      } else {\n        element.markers.delete(marker);\n        svgClasses(gfx).remove(marker);\n      }\n    }\n  });\n\n  /**\n   * An event indicating that a marker has been updated for an element\n   *\n   * @event element.marker.update\n   * @type {Object}\n   * @property {Element} element the shape\n   * @property {SVGElement} gfx the graphical representation of the shape\n   * @property {string} marker\n   * @property {boolean} add true if the marker was added, false if it got removed\n   */\n  this._eventBus.fire('element.marker.update', {\n    element: element,\n    gfx: container.gfx,\n    marker: marker,\n    add: !!add\n  });\n};\n\n/**\n * Adds a marker to an element (basically a css class).\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @example\n *\n * ```javascript\n * canvas.addMarker('foo', 'some-marker');\n *\n * const fooGfx = canvas.getGraphics('foo');\n *\n * fooGfx; // <g class=\"... some-marker\"> ... </g>\n * ```\n *\n * @param {ShapeLike|ConnectionLike|string} element The element or its ID.\n * @param {string} marker The marker.\n */\nCanvas.prototype.addMarker = function (element, marker) {\n  this._updateMarker(element, marker, true);\n};\n\n/**\n * Remove a marker from an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param {ShapeLike|ConnectionLike|string} element The element or its ID.\n * @param {string} marker The marker.\n */\nCanvas.prototype.removeMarker = function (element, marker) {\n  this._updateMarker(element, marker, false);\n};\n\n/**\n * Check whether an element has a given marker.\n *\n * @param {ShapeLike|ConnectionLike|string} element The element or its ID.\n * @param {string} marker The marker.\n */\nCanvas.prototype.hasMarker = function (element, marker) {\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n  if (!element.markers) {\n    return false;\n  }\n  return element.markers.has(marker);\n};\n\n/**\n * Toggles a marker on an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param {ShapeLike|ConnectionLike|string} element The element or its ID.\n * @param {string} marker The marker.\n */\nCanvas.prototype.toggleMarker = function (element, marker) {\n  if (this.hasMarker(element, marker)) {\n    this.removeMarker(element, marker);\n  } else {\n    this.addMarker(element, marker);\n  }\n};\n\n/**\n * Returns the current root element.\n *\n * Supports two different modes for handling root elements:\n *\n * 1. if no root element has been added before, an implicit root will be added\n * and returned. This is used in applications that don't require explicit\n * root elements.\n *\n * 2. when root elements have been added before calling `getRootElement`,\n * root elements can be null. This is used for applications that want to manage\n * root elements themselves.\n *\n * @return {RootLike} The current root element.\n */\nCanvas.prototype.getRootElement = function () {\n  const rootElement = this._rootElement;\n\n  // can return null if root elements are present but none was set yet\n  if (rootElement || this._planes.length) {\n    return rootElement;\n  }\n  return this.setRootElement(this.addRootElement(null));\n};\n\n/**\n * Adds a given root element and returns it.\n *\n * @param {RootLike} [rootElement] The root element to be added.\n *\n * @return {RootLike} The added root element or an implicit root element.\n */\nCanvas.prototype.addRootElement = function (rootElement) {\n  const idx = this._rootsIdx++;\n  if (!rootElement) {\n    rootElement = {\n      id: '__implicitroot_' + idx,\n      children: [],\n      isImplicit: true\n    };\n  }\n  const layerName = rootElement.layer = 'root-' + idx;\n  this._ensureValid('root', rootElement);\n  const layer = this.getLayer(layerName, PLANE_LAYER_INDEX);\n  this.hideLayer(layerName);\n  this._addRoot(rootElement, layer);\n  this._planes.push({\n    rootElement: rootElement,\n    layer: layer\n  });\n  return rootElement;\n};\n\n/**\n * Removes a given root element and returns it.\n *\n * @param {RootLike|string} rootElement element or element ID\n *\n * @return {RootLike|undefined} removed element\n */\nCanvas.prototype.removeRootElement = function (rootElement) {\n  if (typeof rootElement === 'string') {\n    rootElement = this._elementRegistry.get(rootElement);\n  }\n  const plane = this._findPlaneForRoot(rootElement);\n  if (!plane) {\n    return;\n  }\n\n  // hook up life-cycle events\n  this._removeRoot(rootElement);\n\n  // clean up layer\n  this._removeLayer(rootElement.layer);\n\n  // clean up plane\n  this._planes = this._planes.filter(function (plane) {\n    return plane.rootElement !== rootElement;\n  });\n\n  // clean up active root\n  if (this._rootElement === rootElement) {\n    this._rootElement = null;\n  }\n  return rootElement;\n};\n\n/**\n * Sets a given element as the new root element for the canvas\n * and returns the new root element.\n *\n * @param {RootLike} rootElement The root element to be set.\n *\n * @return {RootLike} The set root element.\n */\nCanvas.prototype.setRootElement = function (rootElement) {\n  if (rootElement === this._rootElement) {\n    return rootElement;\n  }\n  let plane;\n  if (!rootElement) {\n    throw new Error('rootElement required');\n  }\n  plane = this._findPlaneForRoot(rootElement);\n\n  // give set add semantics for backwards compatibility\n  if (!plane) {\n    rootElement = this.addRootElement(rootElement);\n  }\n  this._setRoot(rootElement);\n  return rootElement;\n};\nCanvas.prototype._removeRoot = function (element) {\n  const elementRegistry = this._elementRegistry,\n    eventBus = this._eventBus;\n\n  // simulate element remove event sequence\n  eventBus.fire('root.remove', {\n    element: element\n  });\n  eventBus.fire('root.removed', {\n    element: element\n  });\n  elementRegistry.remove(element);\n};\nCanvas.prototype._addRoot = function (element, gfx) {\n  const elementRegistry = this._elementRegistry,\n    eventBus = this._eventBus;\n\n  // resemble element add event sequence\n  eventBus.fire('root.add', {\n    element: element\n  });\n  elementRegistry.add(element, gfx);\n  eventBus.fire('root.added', {\n    element: element,\n    gfx: gfx\n  });\n};\nCanvas.prototype._setRoot = function (rootElement, layer) {\n  const currentRoot = this._rootElement;\n  if (currentRoot) {\n    // un-associate previous root element <svg>\n    this._elementRegistry.updateGraphics(currentRoot, null, true);\n\n    // hide previous layer\n    this.hideLayer(currentRoot.layer);\n  }\n  if (rootElement) {\n    if (!layer) {\n      layer = this._findPlaneForRoot(rootElement).layer;\n    }\n\n    // associate element with <svg>\n    this._elementRegistry.updateGraphics(rootElement, this._svg, true);\n\n    // show root layer\n    this.showLayer(rootElement.layer);\n  }\n  this._rootElement = rootElement;\n  this._eventBus.fire('root.set', {\n    element: rootElement\n  });\n};\nCanvas.prototype._ensureValid = function (type, element) {\n  if (!element.id) {\n    throw new Error('element must have an id');\n  }\n  if (this._elementRegistry.get(element.id)) {\n    throw new Error('element <' + element.id + '> already exists');\n  }\n  const requiredAttrs = REQUIRED_MODEL_ATTRS[type];\n  const valid = every(requiredAttrs, function (attr) {\n    return typeof element[attr] !== 'undefined';\n  });\n  if (!valid) {\n    throw new Error('must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);\n  }\n};\nCanvas.prototype._setParent = function (element, parent, parentIndex) {\n  collectionAdd(parent.children, element, parentIndex);\n  element.parent = parent;\n};\n\n/**\n * Adds an element to the canvas.\n *\n * This wires the parent <-> child relationship between the element and\n * a explicitly specified parent or an implicit root element.\n *\n * During add it emits the events\n *\n *  * <{type}.add> (element, parent)\n *  * <{type}.added> (element, gfx)\n *\n * Extensions may hook into these events to perform their magic.\n *\n * @param {string} type\n * @param {ConnectionLike|ShapeLike} element\n * @param {ShapeLike} [parent]\n * @param {number} [parentIndex]\n *\n * @return {ConnectionLike|ShapeLike} The added element.\n */\nCanvas.prototype._addElement = function (type, element, parent, parentIndex) {\n  parent = parent || this.getRootElement();\n  const eventBus = this._eventBus,\n    graphicsFactory = this._graphicsFactory;\n  this._ensureValid(type, element);\n  eventBus.fire(type + '.add', {\n    element: element,\n    parent: parent\n  });\n  this._setParent(element, parent, parentIndex);\n\n  // create graphics\n  const gfx = graphicsFactory.create(type, element, parentIndex);\n  this._elementRegistry.add(element, gfx);\n\n  // update its visual\n  graphicsFactory.update(type, element, gfx);\n  eventBus.fire(type + '.added', {\n    element: element,\n    gfx: gfx\n  });\n  return element;\n};\n\n/**\n * Adds a shape to the canvas.\n *\n * @param {ShapeLike} shape The shape to be added\n * @param {ParentLike} [parent] The shape's parent.\n * @param {number} [parentIndex] The index at which to add the shape to the parent's children.\n *\n * @return {ShapeLike} The added shape.\n */\nCanvas.prototype.addShape = function (shape, parent, parentIndex) {\n  return this._addElement('shape', shape, parent, parentIndex);\n};\n\n/**\n * Adds a connection to the canvas.\n *\n * @param {ConnectionLike} connection The connection to be added.\n * @param {ParentLike} [parent] The connection's parent.\n * @param {number} [parentIndex] The index at which to add the connection to the parent's children.\n *\n * @return {ConnectionLike} The added connection.\n */\nCanvas.prototype.addConnection = function (connection, parent, parentIndex) {\n  return this._addElement('connection', connection, parent, parentIndex);\n};\n\n/**\n * Internal remove element\n */\nCanvas.prototype._removeElement = function (element, type) {\n  const elementRegistry = this._elementRegistry,\n    graphicsFactory = this._graphicsFactory,\n    eventBus = this._eventBus;\n  element = elementRegistry.get(element.id || element);\n  if (!element) {\n    // element was removed already\n    return;\n  }\n  eventBus.fire(type + '.remove', {\n    element: element\n  });\n  graphicsFactory.remove(element);\n\n  // unset parent <-> child relationship\n  collectionRemove(element.parent && element.parent.children, element);\n  element.parent = null;\n  eventBus.fire(type + '.removed', {\n    element: element\n  });\n  elementRegistry.remove(element);\n  return element;\n};\n\n/**\n * Removes a shape from the canvas.\n *\n * @fires ShapeRemoveEvent\n * @fires ShapeRemovedEvent\n *\n * @param {ShapeLike|string} shape The shape or its ID.\n *\n * @return {ShapeLike} The removed shape.\n */\nCanvas.prototype.removeShape = function (shape) {\n  /**\n   * An event indicating that a shape is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event ShapeRemoveEvent\n   * @type {Object}\n   * @property {ShapeLike} element The shape.\n   * @property {SVGElement} gfx The graphical element.\n   */\n\n  /**\n   * An event indicating that a shape has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event ShapeRemovedEvent\n   * @type {Object}\n   * @property {ShapeLike} element The shape.\n   * @property {SVGElement} gfx The graphical element.\n   */\n  return this._removeElement(shape, 'shape');\n};\n\n/**\n * Removes a connection from the canvas.\n *\n * @fires ConnectionRemoveEvent\n * @fires ConnectionRemovedEvent\n *\n * @param {ConnectionLike|string} connection The connection or its ID.\n *\n * @return {ConnectionLike} The removed connection.\n */\nCanvas.prototype.removeConnection = function (connection) {\n  /**\n   * An event indicating that a connection is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event ConnectionRemoveEvent\n   * @type {Object}\n   * @property {ConnectionLike} element The connection.\n   * @property {SVGElement} gfx The graphical element.\n   */\n\n  /**\n   * An event indicating that a connection has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event ConnectionRemovedEvent\n   * @type {Object}\n   * @property {ConnectionLike} element The connection.\n   * @property {SVGElement} gfx The graphical element.\n   */\n  return this._removeElement(connection, 'connection');\n};\n\n/**\n * Returns the graphical element of an element.\n *\n * @param {ShapeLike|ConnectionLike|string} element The element or its ID.\n * @param {boolean} [secondary=false] Whether to return the secondary graphical element.\n *\n * @return {SVGElement} The graphical element.\n */\nCanvas.prototype.getGraphics = function (element, secondary) {\n  return this._elementRegistry.getGraphics(element, secondary);\n};\n\n/**\n * Perform a viewbox update via a given change function.\n *\n * @param {Function} changeFn\n */\nCanvas.prototype._changeViewbox = function (changeFn) {\n  // notify others of the upcoming viewbox change\n  this._eventBus.fire('canvas.viewbox.changing');\n\n  // perform actual change\n  changeFn.apply(this);\n\n  // reset the cached viewbox so that\n  // a new get operation on viewbox or zoom\n  // triggers a viewbox re-computation\n  this._cachedViewbox = null;\n\n  // notify others of the change; this step\n  // may or may not be debounced\n  this._viewboxChanged();\n};\nCanvas.prototype._viewboxChanged = function () {\n  this._eventBus.fire('canvas.viewbox.changed', {\n    viewbox: this.viewbox()\n  });\n};\n\n/**\n * Gets or sets the view box of the canvas, i.e. the\n * area that is currently displayed.\n *\n * The getter may return a cached viewbox (if it is currently\n * changing). To force a recomputation, pass `false` as the first argument.\n *\n * @example\n *\n * ```javascript\n * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })\n *\n * // sets the visible area of the diagram to (100|100) -> (600|100)\n * // and and scales it according to the diagram width\n *\n * const viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.\n *\n * console.log(viewbox);\n * // {\n * //   inner: Dimensions,\n * //   outer: Dimensions,\n * //   scale,\n * //   x, y,\n * //   width, height\n * // }\n *\n * // if the current diagram is zoomed and scrolled, you may reset it to the\n * // default zoom via this method, too:\n *\n * const zoomedAndScrolledViewbox = canvas.viewbox();\n *\n * canvas.viewbox({\n *   x: 0,\n *   y: 0,\n *   width: zoomedAndScrolledViewbox.outer.width,\n *   height: zoomedAndScrolledViewbox.outer.height\n * });\n * ```\n *\n * @param {Rect} [box] The viewbox to be set.\n *\n * @return {CanvasViewbox} The set viewbox.\n */\nCanvas.prototype.viewbox = function (box) {\n  if (box === undefined && this._cachedViewbox) {\n    return structuredClone(this._cachedViewbox);\n  }\n  const viewport = this._viewport,\n    outerBox = this.getSize();\n  let innerBox, matrix, activeLayer, transform, scale, x, y;\n  if (!box) {\n    // compute the inner box based on the\n    // diagrams active layer. This allows us to exclude\n    // external components, such as overlays\n\n    activeLayer = this._rootElement ? this.getActiveLayer() : null;\n    innerBox = activeLayer && activeLayer.getBBox() || {};\n    transform = svgTransform(viewport);\n    matrix = transform ? transform.matrix : createMatrix();\n    scale = round(matrix.a, 1000);\n    x = round(-matrix.e || 0, 1000);\n    y = round(-matrix.f || 0, 1000);\n    box = this._cachedViewbox = {\n      x: x ? x / scale : 0,\n      y: y ? y / scale : 0,\n      width: outerBox.width / scale,\n      height: outerBox.height / scale,\n      scale: scale,\n      inner: {\n        width: innerBox.width || 0,\n        height: innerBox.height || 0,\n        x: innerBox.x || 0,\n        y: innerBox.y || 0\n      },\n      outer: outerBox\n    };\n    return box;\n  } else {\n    this._changeViewbox(function () {\n      scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);\n      const matrix = this._svg.createSVGMatrix().scale(scale).translate(-box.x, -box.y);\n      svgTransform(viewport, matrix);\n    });\n  }\n  return box;\n};\n\n/**\n * Gets or sets the scroll of the canvas.\n *\n * @param {ScrollDelta} [delta] The scroll to be set.\n *\n * @return {Point}\n */\nCanvas.prototype.scroll = function (delta) {\n  const node = this._viewport;\n  let matrix = node.getCTM();\n  if (delta) {\n    this._changeViewbox(function () {\n      delta = assign({\n        dx: 0,\n        dy: 0\n      }, delta || {});\n      matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);\n      setCTM(node, matrix);\n    });\n  }\n  return {\n    x: matrix.e,\n    y: matrix.f\n  };\n};\n\n/**\n * Scrolls the viewbox to contain the given element.\n * Optionally specify a padding to be applied to the edges.\n *\n * @param {ShapeLike|ConnectionLike|string} element The element to scroll to or its ID.\n * @param {RectTRBL|number} [padding=100] The padding to be applied. Can also specify top, bottom, left and right.\n */\nCanvas.prototype.scrollToElement = function (element, padding) {\n  let defaultPadding = 100;\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  }\n\n  // set to correct rootElement\n  const rootElement = this.findRoot(element);\n  if (rootElement !== this.getRootElement()) {\n    this.setRootElement(rootElement);\n  }\n\n  // element is rootElement, do not change viewport\n  if (rootElement === element) {\n    return;\n  }\n  if (!padding) {\n    padding = {};\n  }\n  if (typeof padding === 'number') {\n    defaultPadding = padding;\n  }\n  padding = {\n    top: padding.top || defaultPadding,\n    right: padding.right || defaultPadding,\n    bottom: padding.bottom || defaultPadding,\n    left: padding.left || defaultPadding\n  };\n  const elementBounds = getBoundingBox(element),\n    elementTrbl = asTRBL(elementBounds),\n    viewboxBounds = this.viewbox(),\n    zoom = this.zoom();\n  let dx, dy;\n\n  // shrink viewboxBounds with padding\n  viewboxBounds.y += padding.top / zoom;\n  viewboxBounds.x += padding.left / zoom;\n  viewboxBounds.width -= (padding.right + padding.left) / zoom;\n  viewboxBounds.height -= (padding.bottom + padding.top) / zoom;\n  const viewboxTrbl = asTRBL(viewboxBounds);\n  const canFit = elementBounds.width < viewboxBounds.width && elementBounds.height < viewboxBounds.height;\n  if (!canFit) {\n    // top-left when element can't fit\n    dx = elementBounds.x - viewboxBounds.x;\n    dy = elementBounds.y - viewboxBounds.y;\n  } else {\n    const dRight = Math.max(0, elementTrbl.right - viewboxTrbl.right),\n      dLeft = Math.min(0, elementTrbl.left - viewboxTrbl.left),\n      dBottom = Math.max(0, elementTrbl.bottom - viewboxTrbl.bottom),\n      dTop = Math.min(0, elementTrbl.top - viewboxTrbl.top);\n    dx = dRight || dLeft;\n    dy = dBottom || dTop;\n  }\n  this.scroll({\n    dx: -dx * zoom,\n    dy: -dy * zoom\n  });\n};\n\n/**\n * Gets or sets the current zoom of the canvas, optionally zooming to the\n * specified position.\n *\n * The getter may return a cached zoom level. Call it with `false` as the first\n * argument to force recomputation of the current level.\n *\n * @param {number|'fit-viewport'} [newScale] The new zoom level, either a number,\n * i.e. 0.9, or `fit-viewport` to adjust the size to fit the current viewport.\n * @param {Point} [center] The reference point { x: ..., y: ...} to zoom to.\n *\n * @return {number} The set zoom level.\n */\nCanvas.prototype.zoom = function (newScale, center) {\n  if (!newScale) {\n    return this.viewbox(newScale).scale;\n  }\n  if (newScale === 'fit-viewport') {\n    return this._fitViewport(center);\n  }\n  let outer, matrix;\n  this._changeViewbox(function () {\n    if (typeof center !== 'object') {\n      outer = this.viewbox().outer;\n      center = {\n        x: outer.width / 2,\n        y: outer.height / 2\n      };\n    }\n    matrix = this._setZoom(newScale, center);\n  });\n  return round(matrix.a, 1000);\n};\nfunction setCTM(node, m) {\n  const mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';\n  node.setAttribute('transform', mstr);\n}\nCanvas.prototype._fitViewport = function (center) {\n  const vbox = this.viewbox(),\n    outer = vbox.outer,\n    inner = vbox.inner;\n  let newScale, newViewbox;\n\n  // display the complete diagram without zooming in.\n  // instead of relying on internal zoom, we perform a\n  // hard reset on the canvas viewbox to realize this\n  //\n  // if diagram does not need to be zoomed in, we focus it around\n  // the diagram origin instead\n\n  if (inner.x >= 0 && inner.y >= 0 && inner.x + inner.width <= outer.width && inner.y + inner.height <= outer.height && !center) {\n    newViewbox = {\n      x: 0,\n      y: 0,\n      width: Math.max(inner.width + inner.x, outer.width),\n      height: Math.max(inner.height + inner.y, outer.height)\n    };\n  } else {\n    newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);\n    newViewbox = {\n      x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),\n      y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),\n      width: outer.width / newScale,\n      height: outer.height / newScale\n    };\n  }\n  this.viewbox(newViewbox);\n  return this.viewbox(false).scale;\n};\nCanvas.prototype._setZoom = function (scale, center) {\n  const svg = this._svg,\n    viewport = this._viewport;\n  const matrix = svg.createSVGMatrix();\n  const point = svg.createSVGPoint();\n  let centerPoint, originalPoint, currentMatrix, scaleMatrix, newMatrix;\n  currentMatrix = viewport.getCTM();\n  const currentScale = currentMatrix.a;\n  if (center) {\n    centerPoint = assign(point, center);\n\n    // revert applied viewport transformations\n    originalPoint = centerPoint.matrixTransform(currentMatrix.inverse());\n\n    // create scale matrix\n    scaleMatrix = matrix.translate(originalPoint.x, originalPoint.y).scale(1 / currentScale * scale).translate(-originalPoint.x, -originalPoint.y);\n    newMatrix = currentMatrix.multiply(scaleMatrix);\n  } else {\n    newMatrix = matrix.scale(scale);\n  }\n  setCTM(this._viewport, newMatrix);\n  return newMatrix;\n};\n\n/**\n * Returns the size of the canvas.\n *\n * @return {Dimensions} The size of the canvas.\n */\nCanvas.prototype.getSize = function () {\n  return {\n    width: this._container.clientWidth,\n    height: this._container.clientHeight\n  };\n};\n\n/**\n * Returns the absolute bounding box of an element.\n *\n * The absolute bounding box may be used to display overlays in the callers\n * (browser) coordinate system rather than the zoomed in/out canvas coordinates.\n *\n * @param {ShapeLike|ConnectionLike} element The element.\n *\n * @return {Rect} The element's absolute bounding box.\n */\nCanvas.prototype.getAbsoluteBBox = function (element) {\n  const vbox = this.viewbox();\n  let bbox;\n\n  // connection\n  // use svg bbox\n  if (element.waypoints) {\n    const gfx = this.getGraphics(element);\n    bbox = gfx.getBBox();\n  }\n\n  // shapes\n  // use data\n  else {\n    bbox = element;\n  }\n  const x = bbox.x * vbox.scale - vbox.x * vbox.scale;\n  const y = bbox.y * vbox.scale - vbox.y * vbox.scale;\n  const width = bbox.width * vbox.scale;\n  const height = bbox.height * vbox.scale;\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n};\n\n/**\n * Fires an event so other modules can react to the canvas resizing.\n */\nCanvas.prototype.resized = function () {\n  // force recomputation of view box\n  delete this._cachedViewbox;\n  this._eventBus.fire('canvas.resized');\n};","map":{"version":3,"names":["isNumber","assign","forEach","every","debounce","bind","reduce","find","assignStyle","attr","domAttr","add","collectionAdd","remove","collectionRemove","getType","getBBox","getBoundingBox","asTRBL","append","svgAppend","svgAttr","classes","svgClasses","create","svgCreate","transform","svgTransform","svgRemove","createMatrix","round","number","resolution","Math","ensurePx","findRoot","element","parent","createContainer","options","width","height","container","document","body","createElement","setAttribute","position","overflow","appendChild","createGroup","cls","childIndex","group","index","undefined","childNodes","length","insertBefore","BASE_LAYER","PLANE_LAYER_INDEX","UTILITY_LAYER_INDEX","REQUIRED_MODEL_ATTRS","shape","connection","Canvas","config","eventBus","graphicsFactory","elementRegistry","_eventBus","_elementRegistry","_graphicsFactory","_rootsIdx","_layers","_planes","_rootElement","_focused","_init","$inject","prototype","_container","svg","_svg","autoFocus","on","restoreFocus","event","focus","addEventListener","_setFocused","viewport","_viewport","deferUpdate","_viewboxChanged","fire","_cachedViewbox","_destroy","_clear","parentNode","removeChild","focused","allElements","getAll","type","removeRootElement","_removeElement","preventScroll","activeElement","isFocused","getDefaultLayer","getLayer","name","Error","layer","_createLayer","_getChildIndex","visible","showLayer","hideLayer","_removeLayer","getActiveLayer","plane","_findPlaneForRoot","getRootElement","get","rootElement","getRootElements","map","getContainer","_updateMarker","marker","id","markers","Set","_elements","gfx","secondaryGfx","delete","addMarker","removeMarker","hasMarker","has","toggleMarker","setRootElement","addRootElement","idx","children","isImplicit","layerName","_ensureValid","_addRoot","push","_removeRoot","filter","_setRoot","currentRoot","updateGraphics","requiredAttrs","valid","join","_setParent","parentIndex","_addElement","update","addShape","addConnection","removeShape","removeConnection","getGraphics","secondary","_changeViewbox","changeFn","apply","viewbox","box","structuredClone","outerBox","getSize","innerBox","matrix","activeLayer","scale","x","y","a","e","f","inner","outer","min","createSVGMatrix","translate","scroll","delta","node","getCTM","dx","dy","multiply","setCTM","scrollToElement","padding","defaultPadding","top","right","bottom","left","elementBounds","elementTrbl","viewboxBounds","zoom","viewboxTrbl","canFit","dRight","max","dLeft","dBottom","dTop","newScale","center","_fitViewport","_setZoom","m","mstr","b","c","d","vbox","newViewbox","point","createSVGPoint","centerPoint","originalPoint","currentMatrix","scaleMatrix","newMatrix","currentScale","matrixTransform","inverse","clientWidth","clientHeight","getAbsoluteBBox","bbox","waypoints","resized"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/core/Canvas.js"],"sourcesContent":["import {\n  isNumber,\n  assign,\n  forEach,\n  every,\n  debounce,\n  bind,\n  reduce,\n  find\n} from 'min-dash';\n\nimport {\n  assignStyle,\n  attr as domAttr\n} from 'min-dom';\n\nimport {\n  add as collectionAdd,\n  remove as collectionRemove\n} from '../util/Collections';\n\nimport {\n  getType,\n  getBBox as getBoundingBox\n} from '../util/Elements';\n\nimport { asTRBL } from '../layout/LayoutUtil';\n\nimport {\n  append as svgAppend,\n  attr as svgAttr,\n  classes as svgClasses,\n  create as svgCreate,\n  transform as svgTransform,\n  remove as svgRemove\n} from 'tiny-svg';\n\nimport { createMatrix as createMatrix } from 'tiny-svg';\n\n\n/**\n * @typedef {import('./Types').ConnectionLike} ConnectionLike\n * @typedef {import('./Types').RootLike} RootLike\n * @typedef {import('./Types').ParentLike } ParentLike\n * @typedef {import('./Types').ShapeLike} ShapeLike\n *\n * @typedef { {\n *   container?: HTMLElement;\n *   deferUpdate?: boolean;\n *   width?: number;\n *   height?: number;\n *   autoFocus?: boolean;\n * } } CanvasConfig\n * @typedef { {\n *   group: SVGElement;\n *   index: number;\n *   visible: boolean;\n * } } CanvasLayer\n * @typedef { {\n *   [key: string]: CanvasLayer;\n * } } CanvasLayers\n * @typedef { {\n *   rootElement: ShapeLike;\n *   layer: CanvasLayer;\n * } } CanvasPlane\n * @typedef { {\n *   scale: number;\n *   inner: Rect;\n *   outer: Dimensions;\n * } & Rect } CanvasViewbox\n *\n * @typedef {import('./ElementRegistry').default} ElementRegistry\n * @typedef {import('./EventBus').default} EventBus\n * @typedef {import('./GraphicsFactory').default} GraphicsFactory\n *\n * @typedef {import('../util/Types').Dimensions} Dimensions\n * @typedef {import('../util/Types').Point} Point\n * @typedef {import('../util/Types').Rect} Rect\n * @typedef {import('../util/Types').RectTRBL} RectTRBL\n * @typedef {import('../util/Types').ScrollDelta} ScrollDelta\n */\n\nfunction round(number, resolution) {\n  return Math.round(number * resolution) / resolution;\n}\n\nfunction ensurePx(number) {\n  return isNumber(number) ? number + 'px' : number;\n}\n\nfunction findRoot(element) {\n  while (element.parent) {\n    element = element.parent;\n  }\n\n  return element;\n}\n\n/**\n * Creates a HTML container element for a SVG element with\n * the given configuration\n *\n * @param {CanvasConfig} options\n *\n * @return {HTMLElement} the container element\n */\nfunction createContainer(options) {\n\n  options = assign({}, { width: '100%', height: '100%' }, options);\n\n  const container = options.container || document.body;\n\n  // create a <div> around the svg element with the respective size\n  // this way we can always get the correct container size\n  // (this is impossible for <svg> elements at the moment)\n  const parent = document.createElement('div');\n  parent.setAttribute('class', 'djs-container djs-parent');\n\n  assignStyle(parent, {\n    position: 'relative',\n    overflow: 'hidden',\n    width: ensurePx(options.width),\n    height: ensurePx(options.height)\n  });\n\n  container.appendChild(parent);\n\n  return parent;\n}\n\nfunction createGroup(parent, cls, childIndex) {\n  const group = svgCreate('g');\n  svgClasses(group).add(cls);\n\n  const index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1;\n\n  // must ensure second argument is node or _null_\n  // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n  parent.insertBefore(group, parent.childNodes[index] || null);\n\n  return group;\n}\n\nconst BASE_LAYER = 'base';\n\n// render plane contents behind utility layers\nconst PLANE_LAYER_INDEX = 0;\nconst UTILITY_LAYER_INDEX = 1;\n\n\nconst REQUIRED_MODEL_ATTRS = {\n  shape: [ 'x', 'y', 'width', 'height' ],\n  connection: [ 'waypoints' ]\n};\n\n/**\n * The main drawing canvas.\n *\n * @class\n * @constructor\n *\n * @emits Canvas#canvas.init\n *\n * @param {CanvasConfig|null} config\n * @param {EventBus} eventBus\n * @param {GraphicsFactory} graphicsFactory\n * @param {ElementRegistry} elementRegistry\n */\nexport default function Canvas(config, eventBus, graphicsFactory, elementRegistry) {\n  this._eventBus = eventBus;\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n\n  /**\n   * @type {number}\n   */\n  this._rootsIdx = 0;\n\n  /**\n   * @type {CanvasLayers}\n   */\n  this._layers = {};\n\n  /**\n   * @type {CanvasPlane[]}\n   */\n  this._planes = [];\n\n  /**\n   * @type {RootLike|null}\n   */\n  this._rootElement = null;\n\n  /**\n   * @type {boolean}\n   */\n  this._focused = false;\n\n  this._init(config || {});\n}\n\nCanvas.$inject = [\n  'config.canvas',\n  'eventBus',\n  'graphicsFactory',\n  'elementRegistry'\n];\n\n/**\n * Creates a <svg> element that is wrapped into a <div>.\n * This way we are always able to correctly figure out the size of the svg element\n * by querying the parent node.\n\n * (It is not possible to get the size of a svg element cross browser @ 2014-04-01)\n\n * <div class=\"djs-container\" style=\"width: {desired-width}, height: {desired-height}\">\n *   <svg width=\"100%\" height=\"100%\">\n *    ...\n *   </svg>\n * </div>\n *\n * @param {CanvasConfig} config\n */\nCanvas.prototype._init = function(config) {\n  const eventBus = this._eventBus;\n\n  // html container\n  const container = this._container = createContainer(config);\n\n  const svg = this._svg = svgCreate('svg');\n\n  svgAttr(svg, {\n    width: '100%',\n    height: '100%'\n  });\n\n  domAttr(svg, 'tabindex', 0);\n\n  config.autoFocus && eventBus.on('element.hover', () => {\n    this.restoreFocus();\n  });\n\n  eventBus.on('element.mousedown', 500, (event) => {\n    this.focus();\n  });\n\n  svg.addEventListener('focusin', () => {\n    this._setFocused(true);\n  });\n\n  svg.addEventListener('focusout', () => {\n    this._setFocused(false);\n  });\n\n  svgAppend(container, svg);\n\n  const viewport = this._viewport = createGroup(svg, 'viewport');\n\n  // debounce canvas.viewbox.changed events when deferUpdate is set\n  // to help with potential performance issues\n  if (config.deferUpdate) {\n    this._viewboxChanged = debounce(bind(this._viewboxChanged, this), 300);\n  }\n\n  eventBus.on('diagram.init', () => {\n\n    /**\n     * An event indicating that the canvas is ready to be drawn on.\n     *\n     * @memberOf Canvas\n     *\n     * @event canvas.init\n     *\n     * @type {Object}\n     * @property {SVGElement} svg the created svg element\n     * @property {SVGElement} viewport the direct parent of diagram elements and shapes\n     */\n    eventBus.fire('canvas.init', {\n      svg: svg,\n      viewport: viewport\n    });\n\n  });\n\n  // reset viewbox on shape changes to\n  // recompute the viewbox\n  eventBus.on([\n    'shape.added',\n    'connection.added',\n    'shape.removed',\n    'connection.removed',\n    'elements.changed',\n    'root.set'\n  ], () => {\n    delete this._cachedViewbox;\n  });\n\n  eventBus.on('diagram.destroy', 500, this._destroy, this);\n  eventBus.on('diagram.clear', 500, this._clear, this);\n};\n\nCanvas.prototype._destroy = function() {\n  this._eventBus.fire('canvas.destroy', {\n    svg: this._svg,\n    viewport: this._viewport\n  });\n\n  const parent = this._container.parentNode;\n\n  if (parent) {\n    parent.removeChild(this._container);\n  }\n\n  delete this._svg;\n  delete this._container;\n  delete this._layers;\n  delete this._planes;\n  delete this._rootElement;\n  delete this._viewport;\n};\n\nCanvas.prototype._setFocused = function(focused) {\n\n  if (focused == this._focused) {\n    return;\n  }\n\n  this._focused = focused;\n\n  this._eventBus.fire('canvas.focus.changed', { focused });\n};\n\nCanvas.prototype._clear = function() {\n\n  const allElements = this._elementRegistry.getAll();\n\n  // remove all elements\n  allElements.forEach(element => {\n    const type = getType(element);\n\n    if (type === 'root') {\n      this.removeRootElement(element);\n    } else {\n      this._removeElement(element, type);\n    }\n  });\n\n  // remove all planes\n  this._planes = [];\n  this._rootElement = null;\n\n  // force recomputation of view box\n  delete this._cachedViewbox;\n};\n\n/**\n * Sets focus on the canvas SVG element.\n */\nCanvas.prototype.focus = function() {\n  this._svg.focus({ preventScroll: true });\n\n  this._setFocused(true);\n};\n\n/**\n* Sets focus on the canvas SVG element if `document.body` is currently focused.\n*/\nCanvas.prototype.restoreFocus = function() {\n  if (document.activeElement === document.body) {\n    this.focus();\n  }\n};\n\n/**\n* Returns true if the canvas is focused.\n*\n* @return {boolean}\n*/\nCanvas.prototype.isFocused = function() {\n  return this._focused;\n};\n\n/**\n * Returns the default layer on which\n * all elements are drawn.\n *\n * @return {SVGElement}  The SVG element of the layer.\n */\nCanvas.prototype.getDefaultLayer = function() {\n  return this.getLayer(BASE_LAYER, PLANE_LAYER_INDEX);\n};\n\n/**\n * Returns a layer that is used to draw elements\n * or annotations on it.\n *\n * Non-existing layers retrieved through this method\n * will be created. During creation, the optional index\n * may be used to create layers below or above existing layers.\n * A layer with a certain index is always created above all\n * existing layers with the same index.\n *\n * @param {string} name The name of the layer.\n * @param {number} [index] The index of the layer.\n *\n * @return {SVGElement} The SVG element of the layer.\n */\nCanvas.prototype.getLayer = function(name, index) {\n\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  let layer = this._layers[name];\n\n  if (!layer) {\n    layer = this._layers[name] = this._createLayer(name, index);\n  }\n\n  // throw an error if layer creation / retrival is\n  // requested on different index\n  if (typeof index !== 'undefined' && layer.index !== index) {\n    throw new Error('layer <' + name + '> already created at index <' + index + '>');\n  }\n\n  return layer.group;\n};\n\n/**\n * For a given index, return the number of layers that have a higher index and\n * are visible.\n *\n * This is used to determine the node a layer should be inserted at.\n *\n * @param {number} index\n *\n * @return {number}\n */\nCanvas.prototype._getChildIndex = function(index) {\n  return reduce(this._layers, function(childIndex, layer) {\n    if (layer.visible && index >= layer.index) {\n      childIndex++;\n    }\n\n    return childIndex;\n  }, 0);\n};\n\n/**\n * Creates a given layer and returns it.\n *\n * @param {string} name\n * @param {number} [index=0]\n *\n * @return {CanvasLayer}\n */\nCanvas.prototype._createLayer = function(name, index) {\n\n  if (typeof index === 'undefined') {\n    index = UTILITY_LAYER_INDEX;\n  }\n\n  const childIndex = this._getChildIndex(index);\n\n  return {\n    group: createGroup(this._viewport, 'layer-' + name, childIndex),\n    index: index,\n    visible: true\n  };\n};\n\n\n/**\n * Shows a given layer.\n *\n * @param {string} name The name of the layer.\n *\n * @return {SVGElement} The SVG element of the layer.\n */\nCanvas.prototype.showLayer = function(name) {\n\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  const layer = this._layers[name];\n\n  if (!layer) {\n    throw new Error('layer <' + name + '> does not exist');\n  }\n\n  const viewport = this._viewport;\n  const group = layer.group;\n  const index = layer.index;\n\n  if (layer.visible) {\n    return group;\n  }\n\n  const childIndex = this._getChildIndex(index);\n\n  viewport.insertBefore(group, viewport.childNodes[childIndex] || null);\n\n  layer.visible = true;\n\n  return group;\n};\n\n/**\n * Hides a given layer.\n *\n * @param {string} name The name of the layer.\n *\n * @return {SVGElement} The SVG element of the layer.\n */\nCanvas.prototype.hideLayer = function(name) {\n\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  const layer = this._layers[name];\n\n  if (!layer) {\n    throw new Error('layer <' + name + '> does not exist');\n  }\n\n  const group = layer.group;\n\n  if (!layer.visible) {\n    return group;\n  }\n\n  svgRemove(group);\n\n  layer.visible = false;\n\n  return group;\n};\n\n\nCanvas.prototype._removeLayer = function(name) {\n\n  const layer = this._layers[name];\n\n  if (layer) {\n    delete this._layers[name];\n\n    svgRemove(layer.group);\n  }\n};\n\n/**\n * Returns the currently active layer. Can be null.\n *\n * @return {CanvasLayer|null} The active layer of `null`.\n */\nCanvas.prototype.getActiveLayer = function() {\n  const plane = this._findPlaneForRoot(this.getRootElement());\n\n  if (!plane) {\n    return null;\n  }\n\n  return plane.layer;\n};\n\n\n/**\n * Returns the plane which contains the given element.\n *\n * @param {ShapeLike|ConnectionLike|string} element The element or its ID.\n *\n * @return {RootLike|undefined} The root of the element.\n */\nCanvas.prototype.findRoot = function(element) {\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  }\n\n  if (!element) {\n    return;\n  }\n\n  const plane = this._findPlaneForRoot(\n    findRoot(element)\n  ) || {};\n\n  return plane.rootElement;\n};\n\n/**\n * Return a list of all root elements on the diagram.\n *\n * @return {(RootLike)[]} The list of root elements.\n */\nCanvas.prototype.getRootElements = function() {\n  return this._planes.map(function(plane) {\n    return plane.rootElement;\n  });\n};\n\nCanvas.prototype._findPlaneForRoot = function(rootElement) {\n  return find(this._planes, function(plane) {\n    return plane.rootElement === rootElement;\n  });\n};\n\n\n/**\n * Returns the html element that encloses the\n * drawing canvas.\n *\n * @return {HTMLElement} The HTML element of the container.\n */\nCanvas.prototype.getContainer = function() {\n  return this._container;\n};\n\n\n// markers //////////////////////\n\nCanvas.prototype._updateMarker = function(element, marker, add) {\n  let container;\n\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  element.markers = element.markers || new Set();\n\n  // we need to access all\n  container = this._elementRegistry._elements[element.id];\n\n  if (!container) {\n    return;\n  }\n\n  forEach([ container.gfx, container.secondaryGfx ], function(gfx) {\n    if (gfx) {\n\n      // invoke either addClass or removeClass based on mode\n      if (add) {\n        element.markers.add(marker);\n        svgClasses(gfx).add(marker);\n      } else {\n        element.markers.delete(marker);\n        svgClasses(gfx).remove(marker);\n      }\n    }\n  });\n\n  /**\n   * An event indicating that a marker has been updated for an element\n   *\n   * @event element.marker.update\n   * @type {Object}\n   * @property {Element} element the shape\n   * @property {SVGElement} gfx the graphical representation of the shape\n   * @property {string} marker\n   * @property {boolean} add true if the marker was added, false if it got removed\n   */\n  this._eventBus.fire('element.marker.update', { element: element, gfx: container.gfx, marker: marker, add: !!add });\n};\n\n\n/**\n * Adds a marker to an element (basically a css class).\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @example\n *\n * ```javascript\n * canvas.addMarker('foo', 'some-marker');\n *\n * const fooGfx = canvas.getGraphics('foo');\n *\n * fooGfx; // <g class=\"... some-marker\"> ... </g>\n * ```\n *\n * @param {ShapeLike|ConnectionLike|string} element The element or its ID.\n * @param {string} marker The marker.\n */\nCanvas.prototype.addMarker = function(element, marker) {\n  this._updateMarker(element, marker, true);\n};\n\n\n/**\n * Remove a marker from an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param {ShapeLike|ConnectionLike|string} element The element or its ID.\n * @param {string} marker The marker.\n */\nCanvas.prototype.removeMarker = function(element, marker) {\n  this._updateMarker(element, marker, false);\n};\n\n/**\n * Check whether an element has a given marker.\n *\n * @param {ShapeLike|ConnectionLike|string} element The element or its ID.\n * @param {string} marker The marker.\n */\nCanvas.prototype.hasMarker = function(element, marker) {\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  if (!element.markers) {\n    return false;\n  }\n\n  return element.markers.has(marker);\n};\n\n/**\n * Toggles a marker on an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param {ShapeLike|ConnectionLike|string} element The element or its ID.\n * @param {string} marker The marker.\n */\nCanvas.prototype.toggleMarker = function(element, marker) {\n  if (this.hasMarker(element, marker)) {\n    this.removeMarker(element, marker);\n  } else {\n    this.addMarker(element, marker);\n  }\n};\n\n/**\n * Returns the current root element.\n *\n * Supports two different modes for handling root elements:\n *\n * 1. if no root element has been added before, an implicit root will be added\n * and returned. This is used in applications that don't require explicit\n * root elements.\n *\n * 2. when root elements have been added before calling `getRootElement`,\n * root elements can be null. This is used for applications that want to manage\n * root elements themselves.\n *\n * @return {RootLike} The current root element.\n */\nCanvas.prototype.getRootElement = function() {\n  const rootElement = this._rootElement;\n\n  // can return null if root elements are present but none was set yet\n  if (rootElement || this._planes.length) {\n    return rootElement;\n  }\n\n  return this.setRootElement(this.addRootElement(null));\n};\n\n/**\n * Adds a given root element and returns it.\n *\n * @param {RootLike} [rootElement] The root element to be added.\n *\n * @return {RootLike} The added root element or an implicit root element.\n */\nCanvas.prototype.addRootElement = function(rootElement) {\n  const idx = this._rootsIdx++;\n\n  if (!rootElement) {\n    rootElement = {\n      id: '__implicitroot_' + idx,\n      children: [],\n      isImplicit: true\n    };\n  }\n\n  const layerName = rootElement.layer = 'root-' + idx;\n\n  this._ensureValid('root', rootElement);\n\n  const layer = this.getLayer(layerName, PLANE_LAYER_INDEX);\n\n  this.hideLayer(layerName);\n\n  this._addRoot(rootElement, layer);\n\n  this._planes.push({\n    rootElement: rootElement,\n    layer: layer\n  });\n\n  return rootElement;\n};\n\n/**\n * Removes a given root element and returns it.\n *\n * @param {RootLike|string} rootElement element or element ID\n *\n * @return {RootLike|undefined} removed element\n */\nCanvas.prototype.removeRootElement = function(rootElement) {\n\n  if (typeof rootElement === 'string') {\n    rootElement = this._elementRegistry.get(rootElement);\n  }\n\n  const plane = this._findPlaneForRoot(rootElement);\n\n  if (!plane) {\n    return;\n  }\n\n  // hook up life-cycle events\n  this._removeRoot(rootElement);\n\n  // clean up layer\n  this._removeLayer(rootElement.layer);\n\n  // clean up plane\n  this._planes = this._planes.filter(function(plane) {\n    return plane.rootElement !== rootElement;\n  });\n\n  // clean up active root\n  if (this._rootElement === rootElement) {\n    this._rootElement = null;\n  }\n\n  return rootElement;\n};\n\n\n/**\n * Sets a given element as the new root element for the canvas\n * and returns the new root element.\n *\n * @param {RootLike} rootElement The root element to be set.\n *\n * @return {RootLike} The set root element.\n */\nCanvas.prototype.setRootElement = function(rootElement) {\n\n  if (rootElement === this._rootElement) {\n    return rootElement;\n  }\n\n  let plane;\n\n  if (!rootElement) {\n    throw new Error('rootElement required');\n  }\n\n  plane = this._findPlaneForRoot(rootElement);\n\n  // give set add semantics for backwards compatibility\n  if (!plane) {\n    rootElement = this.addRootElement(rootElement);\n  }\n\n  this._setRoot(rootElement);\n\n  return rootElement;\n};\n\n\nCanvas.prototype._removeRoot = function(element) {\n  const elementRegistry = this._elementRegistry,\n        eventBus = this._eventBus;\n\n  // simulate element remove event sequence\n  eventBus.fire('root.remove', { element: element });\n  eventBus.fire('root.removed', { element: element });\n\n  elementRegistry.remove(element);\n};\n\n\nCanvas.prototype._addRoot = function(element, gfx) {\n  const elementRegistry = this._elementRegistry,\n        eventBus = this._eventBus;\n\n  // resemble element add event sequence\n  eventBus.fire('root.add', { element: element });\n\n  elementRegistry.add(element, gfx);\n\n  eventBus.fire('root.added', { element: element, gfx: gfx });\n};\n\n\nCanvas.prototype._setRoot = function(rootElement, layer) {\n\n  const currentRoot = this._rootElement;\n\n  if (currentRoot) {\n\n    // un-associate previous root element <svg>\n    this._elementRegistry.updateGraphics(currentRoot, null, true);\n\n    // hide previous layer\n    this.hideLayer(currentRoot.layer);\n  }\n\n  if (rootElement) {\n\n    if (!layer) {\n      layer = this._findPlaneForRoot(rootElement).layer;\n    }\n\n    // associate element with <svg>\n    this._elementRegistry.updateGraphics(rootElement, this._svg, true);\n\n    // show root layer\n    this.showLayer(rootElement.layer);\n  }\n\n  this._rootElement = rootElement;\n\n  this._eventBus.fire('root.set', { element: rootElement });\n};\n\nCanvas.prototype._ensureValid = function(type, element) {\n  if (!element.id) {\n    throw new Error('element must have an id');\n  }\n\n  if (this._elementRegistry.get(element.id)) {\n    throw new Error('element <' + element.id + '> already exists');\n  }\n\n  const requiredAttrs = REQUIRED_MODEL_ATTRS[type];\n\n  const valid = every(requiredAttrs, function(attr) {\n    return typeof element[attr] !== 'undefined';\n  });\n\n  if (!valid) {\n    throw new Error(\n      'must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);\n  }\n};\n\nCanvas.prototype._setParent = function(element, parent, parentIndex) {\n  collectionAdd(parent.children, element, parentIndex);\n  element.parent = parent;\n};\n\n/**\n * Adds an element to the canvas.\n *\n * This wires the parent <-> child relationship between the element and\n * a explicitly specified parent or an implicit root element.\n *\n * During add it emits the events\n *\n *  * <{type}.add> (element, parent)\n *  * <{type}.added> (element, gfx)\n *\n * Extensions may hook into these events to perform their magic.\n *\n * @param {string} type\n * @param {ConnectionLike|ShapeLike} element\n * @param {ShapeLike} [parent]\n * @param {number} [parentIndex]\n *\n * @return {ConnectionLike|ShapeLike} The added element.\n */\nCanvas.prototype._addElement = function(type, element, parent, parentIndex) {\n\n  parent = parent || this.getRootElement();\n\n  const eventBus = this._eventBus,\n        graphicsFactory = this._graphicsFactory;\n\n  this._ensureValid(type, element);\n\n  eventBus.fire(type + '.add', { element: element, parent: parent });\n\n  this._setParent(element, parent, parentIndex);\n\n  // create graphics\n  const gfx = graphicsFactory.create(type, element, parentIndex);\n\n  this._elementRegistry.add(element, gfx);\n\n  // update its visual\n  graphicsFactory.update(type, element, gfx);\n\n  eventBus.fire(type + '.added', { element: element, gfx: gfx });\n\n  return element;\n};\n\n/**\n * Adds a shape to the canvas.\n *\n * @param {ShapeLike} shape The shape to be added\n * @param {ParentLike} [parent] The shape's parent.\n * @param {number} [parentIndex] The index at which to add the shape to the parent's children.\n *\n * @return {ShapeLike} The added shape.\n */\nCanvas.prototype.addShape = function(shape, parent, parentIndex) {\n  return this._addElement('shape', shape, parent, parentIndex);\n};\n\n/**\n * Adds a connection to the canvas.\n *\n * @param {ConnectionLike} connection The connection to be added.\n * @param {ParentLike} [parent] The connection's parent.\n * @param {number} [parentIndex] The index at which to add the connection to the parent's children.\n *\n * @return {ConnectionLike} The added connection.\n */\nCanvas.prototype.addConnection = function(connection, parent, parentIndex) {\n  return this._addElement('connection', connection, parent, parentIndex);\n};\n\n\n/**\n * Internal remove element\n */\nCanvas.prototype._removeElement = function(element, type) {\n\n  const elementRegistry = this._elementRegistry,\n        graphicsFactory = this._graphicsFactory,\n        eventBus = this._eventBus;\n\n  element = elementRegistry.get(element.id || element);\n\n  if (!element) {\n\n    // element was removed already\n    return;\n  }\n\n  eventBus.fire(type + '.remove', { element: element });\n\n  graphicsFactory.remove(element);\n\n  // unset parent <-> child relationship\n  collectionRemove(element.parent && element.parent.children, element);\n  element.parent = null;\n\n  eventBus.fire(type + '.removed', { element: element });\n\n  elementRegistry.remove(element);\n\n  return element;\n};\n\n\n/**\n * Removes a shape from the canvas.\n *\n * @fires ShapeRemoveEvent\n * @fires ShapeRemovedEvent\n *\n * @param {ShapeLike|string} shape The shape or its ID.\n *\n * @return {ShapeLike} The removed shape.\n */\nCanvas.prototype.removeShape = function(shape) {\n\n  /**\n   * An event indicating that a shape is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event ShapeRemoveEvent\n   * @type {Object}\n   * @property {ShapeLike} element The shape.\n   * @property {SVGElement} gfx The graphical element.\n   */\n\n  /**\n   * An event indicating that a shape has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event ShapeRemovedEvent\n   * @type {Object}\n   * @property {ShapeLike} element The shape.\n   * @property {SVGElement} gfx The graphical element.\n   */\n  return this._removeElement(shape, 'shape');\n};\n\n\n/**\n * Removes a connection from the canvas.\n *\n * @fires ConnectionRemoveEvent\n * @fires ConnectionRemovedEvent\n *\n * @param {ConnectionLike|string} connection The connection or its ID.\n *\n * @return {ConnectionLike} The removed connection.\n */\nCanvas.prototype.removeConnection = function(connection) {\n\n  /**\n   * An event indicating that a connection is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event ConnectionRemoveEvent\n   * @type {Object}\n   * @property {ConnectionLike} element The connection.\n   * @property {SVGElement} gfx The graphical element.\n   */\n\n  /**\n   * An event indicating that a connection has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event ConnectionRemovedEvent\n   * @type {Object}\n   * @property {ConnectionLike} element The connection.\n   * @property {SVGElement} gfx The graphical element.\n   */\n  return this._removeElement(connection, 'connection');\n};\n\n\n/**\n * Returns the graphical element of an element.\n *\n * @param {ShapeLike|ConnectionLike|string} element The element or its ID.\n * @param {boolean} [secondary=false] Whether to return the secondary graphical element.\n *\n * @return {SVGElement} The graphical element.\n */\nCanvas.prototype.getGraphics = function(element, secondary) {\n  return this._elementRegistry.getGraphics(element, secondary);\n};\n\n\n/**\n * Perform a viewbox update via a given change function.\n *\n * @param {Function} changeFn\n */\nCanvas.prototype._changeViewbox = function(changeFn) {\n\n  // notify others of the upcoming viewbox change\n  this._eventBus.fire('canvas.viewbox.changing');\n\n  // perform actual change\n  changeFn.apply(this);\n\n  // reset the cached viewbox so that\n  // a new get operation on viewbox or zoom\n  // triggers a viewbox re-computation\n  this._cachedViewbox = null;\n\n  // notify others of the change; this step\n  // may or may not be debounced\n  this._viewboxChanged();\n};\n\nCanvas.prototype._viewboxChanged = function() {\n  this._eventBus.fire('canvas.viewbox.changed', { viewbox: this.viewbox() });\n};\n\n\n/**\n * Gets or sets the view box of the canvas, i.e. the\n * area that is currently displayed.\n *\n * The getter may return a cached viewbox (if it is currently\n * changing). To force a recomputation, pass `false` as the first argument.\n *\n * @example\n *\n * ```javascript\n * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })\n *\n * // sets the visible area of the diagram to (100|100) -> (600|100)\n * // and and scales it according to the diagram width\n *\n * const viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.\n *\n * console.log(viewbox);\n * // {\n * //   inner: Dimensions,\n * //   outer: Dimensions,\n * //   scale,\n * //   x, y,\n * //   width, height\n * // }\n *\n * // if the current diagram is zoomed and scrolled, you may reset it to the\n * // default zoom via this method, too:\n *\n * const zoomedAndScrolledViewbox = canvas.viewbox();\n *\n * canvas.viewbox({\n *   x: 0,\n *   y: 0,\n *   width: zoomedAndScrolledViewbox.outer.width,\n *   height: zoomedAndScrolledViewbox.outer.height\n * });\n * ```\n *\n * @param {Rect} [box] The viewbox to be set.\n *\n * @return {CanvasViewbox} The set viewbox.\n */\nCanvas.prototype.viewbox = function(box) {\n\n  if (box === undefined && this._cachedViewbox) {\n    return structuredClone(this._cachedViewbox);\n  }\n\n  const viewport = this._viewport,\n        outerBox = this.getSize();\n  let innerBox,\n      matrix,\n      activeLayer,\n      transform,\n      scale,\n      x, y;\n\n  if (!box) {\n\n    // compute the inner box based on the\n    // diagrams active layer. This allows us to exclude\n    // external components, such as overlays\n\n    activeLayer = this._rootElement ? this.getActiveLayer() : null;\n    innerBox = activeLayer && activeLayer.getBBox() || {};\n\n    transform = svgTransform(viewport);\n    matrix = transform ? transform.matrix : createMatrix();\n    scale = round(matrix.a, 1000);\n\n    x = round(-matrix.e || 0, 1000);\n    y = round(-matrix.f || 0, 1000);\n\n    box = this._cachedViewbox = {\n      x: x ? x / scale : 0,\n      y: y ? y / scale : 0,\n      width: outerBox.width / scale,\n      height: outerBox.height / scale,\n      scale: scale,\n      inner: {\n        width: innerBox.width || 0,\n        height: innerBox.height || 0,\n        x: innerBox.x || 0,\n        y: innerBox.y || 0\n      },\n      outer: outerBox\n    };\n\n    return box;\n  } else {\n\n    this._changeViewbox(function() {\n      scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);\n\n      const matrix = this._svg.createSVGMatrix()\n        .scale(scale)\n        .translate(-box.x, -box.y);\n\n      svgTransform(viewport, matrix);\n    });\n  }\n\n  return box;\n};\n\n\n/**\n * Gets or sets the scroll of the canvas.\n *\n * @param {ScrollDelta} [delta] The scroll to be set.\n *\n * @return {Point}\n */\nCanvas.prototype.scroll = function(delta) {\n\n  const node = this._viewport;\n  let matrix = node.getCTM();\n\n  if (delta) {\n    this._changeViewbox(function() {\n      delta = assign({ dx: 0, dy: 0 }, delta || {});\n\n      matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);\n\n      setCTM(node, matrix);\n    });\n  }\n\n  return { x: matrix.e, y: matrix.f };\n};\n\n/**\n * Scrolls the viewbox to contain the given element.\n * Optionally specify a padding to be applied to the edges.\n *\n * @param {ShapeLike|ConnectionLike|string} element The element to scroll to or its ID.\n * @param {RectTRBL|number} [padding=100] The padding to be applied. Can also specify top, bottom, left and right.\n */\nCanvas.prototype.scrollToElement = function(element, padding) {\n  let defaultPadding = 100;\n\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  }\n\n  // set to correct rootElement\n  const rootElement = this.findRoot(element);\n\n  if (rootElement !== this.getRootElement()) {\n    this.setRootElement(rootElement);\n  }\n\n  // element is rootElement, do not change viewport\n  if (rootElement === element) {\n    return;\n  }\n\n  if (!padding) {\n    padding = {};\n  }\n  if (typeof padding === 'number') {\n    defaultPadding = padding;\n  }\n\n  padding = {\n    top: padding.top || defaultPadding,\n    right: padding.right || defaultPadding,\n    bottom: padding.bottom || defaultPadding,\n    left: padding.left || defaultPadding\n  };\n\n  const elementBounds = getBoundingBox(element),\n        elementTrbl = asTRBL(elementBounds),\n        viewboxBounds = this.viewbox(),\n        zoom = this.zoom();\n  let dx, dy;\n\n  // shrink viewboxBounds with padding\n  viewboxBounds.y += padding.top / zoom;\n  viewboxBounds.x += padding.left / zoom;\n  viewboxBounds.width -= (padding.right + padding.left) / zoom;\n  viewboxBounds.height -= (padding.bottom + padding.top) / zoom;\n\n  const viewboxTrbl = asTRBL(viewboxBounds);\n\n  const canFit = elementBounds.width < viewboxBounds.width && elementBounds.height < viewboxBounds.height;\n\n  if (!canFit) {\n\n    // top-left when element can't fit\n    dx = elementBounds.x - viewboxBounds.x;\n    dy = elementBounds.y - viewboxBounds.y;\n\n  } else {\n\n    const dRight = Math.max(0, elementTrbl.right - viewboxTrbl.right),\n          dLeft = Math.min(0, elementTrbl.left - viewboxTrbl.left),\n          dBottom = Math.max(0, elementTrbl.bottom - viewboxTrbl.bottom),\n          dTop = Math.min(0, elementTrbl.top - viewboxTrbl.top);\n\n    dx = dRight || dLeft;\n    dy = dBottom || dTop;\n\n  }\n\n  this.scroll({ dx: -dx * zoom, dy: -dy * zoom });\n};\n\n/**\n * Gets or sets the current zoom of the canvas, optionally zooming to the\n * specified position.\n *\n * The getter may return a cached zoom level. Call it with `false` as the first\n * argument to force recomputation of the current level.\n *\n * @param {number|'fit-viewport'} [newScale] The new zoom level, either a number,\n * i.e. 0.9, or `fit-viewport` to adjust the size to fit the current viewport.\n * @param {Point} [center] The reference point { x: ..., y: ...} to zoom to.\n *\n * @return {number} The set zoom level.\n */\nCanvas.prototype.zoom = function(newScale, center) {\n\n  if (!newScale) {\n    return this.viewbox(newScale).scale;\n  }\n\n  if (newScale === 'fit-viewport') {\n    return this._fitViewport(center);\n  }\n\n  let outer,\n      matrix;\n\n  this._changeViewbox(function() {\n\n    if (typeof center !== 'object') {\n      outer = this.viewbox().outer;\n\n      center = {\n        x: outer.width / 2,\n        y: outer.height / 2\n      };\n    }\n\n    matrix = this._setZoom(newScale, center);\n  });\n\n  return round(matrix.a, 1000);\n};\n\nfunction setCTM(node, m) {\n  const mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';\n  node.setAttribute('transform', mstr);\n}\n\nCanvas.prototype._fitViewport = function(center) {\n\n  const vbox = this.viewbox(),\n        outer = vbox.outer,\n        inner = vbox.inner;\n  let newScale,\n      newViewbox;\n\n  // display the complete diagram without zooming in.\n  // instead of relying on internal zoom, we perform a\n  // hard reset on the canvas viewbox to realize this\n  //\n  // if diagram does not need to be zoomed in, we focus it around\n  // the diagram origin instead\n\n  if (inner.x >= 0 &&\n      inner.y >= 0 &&\n      inner.x + inner.width <= outer.width &&\n      inner.y + inner.height <= outer.height &&\n      !center) {\n\n    newViewbox = {\n      x: 0,\n      y: 0,\n      width: Math.max(inner.width + inner.x, outer.width),\n      height: Math.max(inner.height + inner.y, outer.height)\n    };\n  } else {\n\n    newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);\n    newViewbox = {\n      x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),\n      y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),\n      width: outer.width / newScale,\n      height: outer.height / newScale\n    };\n  }\n\n  this.viewbox(newViewbox);\n\n  return this.viewbox(false).scale;\n};\n\n\nCanvas.prototype._setZoom = function(scale, center) {\n\n  const svg = this._svg,\n        viewport = this._viewport;\n\n  const matrix = svg.createSVGMatrix();\n  const point = svg.createSVGPoint();\n\n  let centerPoint,\n      originalPoint,\n      currentMatrix,\n      scaleMatrix,\n      newMatrix;\n\n  currentMatrix = viewport.getCTM();\n\n  const currentScale = currentMatrix.a;\n\n  if (center) {\n    centerPoint = assign(point, center);\n\n    // revert applied viewport transformations\n    originalPoint = centerPoint.matrixTransform(currentMatrix.inverse());\n\n    // create scale matrix\n    scaleMatrix = matrix\n      .translate(originalPoint.x, originalPoint.y)\n      .scale(1 / currentScale * scale)\n      .translate(-originalPoint.x, -originalPoint.y);\n\n    newMatrix = currentMatrix.multiply(scaleMatrix);\n  } else {\n    newMatrix = matrix.scale(scale);\n  }\n\n  setCTM(this._viewport, newMatrix);\n\n  return newMatrix;\n};\n\n\n/**\n * Returns the size of the canvas.\n *\n * @return {Dimensions} The size of the canvas.\n */\nCanvas.prototype.getSize = function() {\n  return {\n    width: this._container.clientWidth,\n    height: this._container.clientHeight\n  };\n};\n\n\n/**\n * Returns the absolute bounding box of an element.\n *\n * The absolute bounding box may be used to display overlays in the callers\n * (browser) coordinate system rather than the zoomed in/out canvas coordinates.\n *\n * @param {ShapeLike|ConnectionLike} element The element.\n *\n * @return {Rect} The element's absolute bounding box.\n */\nCanvas.prototype.getAbsoluteBBox = function(element) {\n  const vbox = this.viewbox();\n  let bbox;\n\n  // connection\n  // use svg bbox\n  if (element.waypoints) {\n    const gfx = this.getGraphics(element);\n\n    bbox = gfx.getBBox();\n  }\n\n  // shapes\n  // use data\n  else {\n    bbox = element;\n  }\n\n  const x = bbox.x * vbox.scale - vbox.x * vbox.scale;\n  const y = bbox.y * vbox.scale - vbox.y * vbox.scale;\n\n  const width = bbox.width * vbox.scale;\n  const height = bbox.height * vbox.scale;\n\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n};\n\n/**\n * Fires an event so other modules can react to the canvas resizing.\n */\nCanvas.prototype.resized = function() {\n\n  // force recomputation of view box\n  delete this._cachedViewbox;\n\n  this._eventBus.fire('canvas.resized');\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}