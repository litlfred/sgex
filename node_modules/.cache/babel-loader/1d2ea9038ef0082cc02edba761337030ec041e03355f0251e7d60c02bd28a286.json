{"ast":null,"code":"import _objectSpread from\"/home/runner/work/sgex/sgex/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * Profile Subscription Service - Manages profile subscriptions in localStorage\n * \n * Provides functionality to manage profile subscriptions:\n * - Always includes WorldHealthOrganization\n * - Includes logged-in user when authenticated\n * - Auto-adds users when browsing their profiles\n * - Allows removal of profiles (except WHO and current user)\n */class ProfileSubscriptionService{constructor(){this.storageKey='sgex-profile-subscriptions';this.whoProfile='WorldHealthOrganization';}/**\n   * Get profile subscriptions from localStorage\n   * @returns {Array} Array of profile objects\n   */getSubscriptions(){try{const stored=localStorage.getItem(this.storageKey);const subscriptions=stored?JSON.parse(stored):[];// Always ensure WHO is included\nif(!subscriptions.find(profile=>profile.login===this.whoProfile)){subscriptions.unshift({login:this.whoProfile,name:'World Health Organization',avatar_url:\"https://github.com/\".concat(this.whoProfile,\".png\"),type:'Organization',isPermanent:true,addedAt:new Date().toISOString()});this.saveSubscriptions(subscriptions);}return subscriptions;}catch(error){console.warn('Error reading profile subscriptions from localStorage:',error);// Return minimal default with WHO\nreturn[{login:this.whoProfile,name:'World Health Organization',avatar_url:\"https://github.com/\".concat(this.whoProfile,\".png\"),type:'Organization',isPermanent:true,addedAt:new Date().toISOString()}];}}/**\n   * Save profile subscriptions to localStorage\n   * @param {Array} subscriptions - Array of profile objects\n   */saveSubscriptions(subscriptions){try{localStorage.setItem(this.storageKey,JSON.stringify(subscriptions));}catch(error){console.error('Error saving profile subscriptions to localStorage:',error);throw error;}}/**\n   * Add a profile to subscriptions\n   * @param {Object} profile - Profile object with login, name, avatar_url, type\n   * @param {boolean} isPermanent - Whether the profile cannot be removed\n   * @returns {Object} The added profile\n   */addSubscription(profile){let isPermanent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!profile||!profile.login){throw new Error('Profile must have a login property');}const subscriptions=this.getSubscriptions();// Check if already subscribed\nconst existingIndex=subscriptions.findIndex(p=>p.login===profile.login);if(existingIndex!==-1){// Update existing subscription\nsubscriptions[existingIndex]=_objectSpread(_objectSpread(_objectSpread({},subscriptions[existingIndex]),profile),{},{isPermanent:subscriptions[existingIndex].isPermanent||isPermanent,lastUpdated:new Date().toISOString()});this.saveSubscriptions(subscriptions);return subscriptions[existingIndex];}// Add new subscription\nconst newSubscription={login:profile.login,name:profile.name||profile.login,avatar_url:profile.avatar_url||\"https://github.com/\".concat(profile.login,\".png\"),type:profile.type||'User',isPermanent,addedAt:new Date().toISOString(),lastUpdated:new Date().toISOString()};subscriptions.push(newSubscription);this.saveSubscriptions(subscriptions);return newSubscription;}/**\n   * Remove a profile from subscriptions\n   * @param {string} login - Login/username to remove\n   * @returns {boolean} Success status\n   */removeSubscription(login){if(!login){return false;}try{const subscriptions=this.getSubscriptions();const profileIndex=subscriptions.findIndex(p=>p.login===login);if(profileIndex===-1){return false;// Profile not found\n}const profile=subscriptions[profileIndex];// Cannot remove permanent profiles (WHO, current user)\nif(profile.isPermanent){console.warn(\"Cannot remove permanent profile: \".concat(login));return false;}subscriptions.splice(profileIndex,1);this.saveSubscriptions(subscriptions);return true;}catch(error){console.error('Error removing profile subscription:',error);return false;}}/**\n   * Check if a profile is subscribed\n   * @param {string} login - Login/username to check\n   * @returns {boolean} Whether the profile is subscribed\n   */isSubscribed(login){if(!login)return false;const subscriptions=this.getSubscriptions();return subscriptions.some(p=>p.login===login);}/**\n   * Get a specific subscription by login\n   * @param {string} login - Login/username to find\n   * @returns {Object|null} Profile object or null if not found\n   */getSubscription(login){if(!login)return null;const subscriptions=this.getSubscriptions();return subscriptions.find(p=>p.login===login)||null;}/**\n   * Auto-add current user to subscriptions (when logged in)\n   * @param {Object} userProfile - Current user's profile\n   */ensureCurrentUserSubscribed(userProfile){if(!userProfile||!userProfile.login){return;}const existing=this.getSubscription(userProfile.login);if(!existing){this.addSubscription(_objectSpread(_objectSpread({},userProfile),{},{isPermanent:true// Current user cannot be removed\n}),true);}else if(!existing.isPermanent){// Update existing to be permanent\nthis.addSubscription(_objectSpread(_objectSpread(_objectSpread({},existing),userProfile),{},{isPermanent:true}),true);}}/**\n   * Auto-add a visited user profile (from browsing)\n   * @param {Object} visitedProfile - Profile that user is browsing\n   */autoAddVisitedProfile(visitedProfile){if(!visitedProfile||!visitedProfile.login){return;}// Don't auto-add if already subscribed\nif(this.isSubscribed(visitedProfile.login)){return;}// Don't auto-add demo profiles\nif(visitedProfile.isDemo){return;}this.addSubscription(visitedProfile,false);}/**\n   * Get subscriptions sorted alphabetically by name\n   * @returns {Array} Sorted array of profile objects\n   */getSubscriptionsSorted(){const subscriptions=this.getSubscriptions();return subscriptions.sort((a,b)=>{// WHO always first\nif(a.login===this.whoProfile)return-1;if(b.login===this.whoProfile)return 1;// Then sort by name/login\nconst nameA=a.name||a.login;const nameB=b.name||b.login;return nameA.localeCompare(nameB);});}/**\n   * Get subscriptions for profile selection (formatted for UI)\n   * @returns {Array} Array of profile objects formatted for selection UI\n   */getSubscriptionsForSelection(){return this.getSubscriptionsSorted().map(profile=>_objectSpread(_objectSpread({},profile),{},{displayName:profile.name||profile.login,isRemovable:!profile.isPermanent}));}/**\n   * Update subscription with latest profile information\n   * @param {string} login - Login/username to update\n   * @param {Object} updatedProfile - Updated profile information\n   * @returns {boolean} Success status\n   */updateSubscription(login,updatedProfile){if(!login||!updatedProfile){return false;}try{const subscriptions=this.getSubscriptions();const index=subscriptions.findIndex(p=>p.login===login);if(index===-1){return false;}subscriptions[index]=_objectSpread(_objectSpread(_objectSpread({},subscriptions[index]),updatedProfile),{},{login,// Preserve original login\nlastUpdated:new Date().toISOString()});this.saveSubscriptions(subscriptions);return true;}catch(error){console.error('Error updating subscription:',error);return false;}}/**\n   * Clear all subscriptions (except WHO)\n   */clearSubscriptions(){try{const whoProfile={login:this.whoProfile,name:'World Health Organization',avatar_url:\"https://github.com/\".concat(this.whoProfile,\".png\"),type:'Organization',isPermanent:true,addedAt:new Date().toISOString()};this.saveSubscriptions([whoProfile]);}catch(error){console.error('Error clearing subscriptions:',error);}}/**\n   * Export subscriptions as JSON\n   * @returns {string} JSON string of subscriptions\n   */exportSubscriptions(){const subscriptions=this.getSubscriptions();return JSON.stringify(subscriptions,null,2);}/**\n   * Import subscriptions from JSON\n   * @param {string} jsonString - JSON string of subscriptions\n   * @param {boolean} merge - Whether to merge with existing subscriptions\n   * @returns {boolean} Success status\n   */importSubscriptions(jsonString){let merge=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;try{const importedSubscriptions=JSON.parse(jsonString);if(!Array.isArray(importedSubscriptions)){throw new Error('Invalid subscription format');}let finalSubscriptions;if(merge){const existingSubscriptions=this.getSubscriptions();const mergedSubscriptions=[...existingSubscriptions];importedSubscriptions.forEach(imported=>{const existingIndex=mergedSubscriptions.findIndex(p=>p.login===imported.login);if(existingIndex!==-1){// Preserve permanence of existing subscriptions\nmergedSubscriptions[existingIndex]=_objectSpread(_objectSpread({},imported),{},{isPermanent:mergedSubscriptions[existingIndex].isPermanent||imported.isPermanent});}else{mergedSubscriptions.push(imported);}});finalSubscriptions=mergedSubscriptions;}else{finalSubscriptions=importedSubscriptions;}// Ensure WHO is always included\nif(!finalSubscriptions.find(p=>p.login===this.whoProfile)){finalSubscriptions.unshift({login:this.whoProfile,name:'World Health Organization',avatar_url:\"https://github.com/\".concat(this.whoProfile,\".png\"),type:'Organization',isPermanent:true,addedAt:new Date().toISOString()});}this.saveSubscriptions(finalSubscriptions);return true;}catch(error){console.error('Error importing subscriptions:',error);return false;}}}// Create and export singleton instance\nconst profileSubscriptionService=new ProfileSubscriptionService();export default profileSubscriptionService;","map":{"version":3,"names":["ProfileSubscriptionService","constructor","storageKey","whoProfile","getSubscriptions","stored","localStorage","getItem","subscriptions","JSON","parse","find","profile","login","unshift","name","avatar_url","concat","type","isPermanent","addedAt","Date","toISOString","saveSubscriptions","error","console","warn","setItem","stringify","addSubscription","arguments","length","undefined","Error","existingIndex","findIndex","p","_objectSpread","lastUpdated","newSubscription","push","removeSubscription","profileIndex","splice","isSubscribed","some","getSubscription","ensureCurrentUserSubscribed","userProfile","existing","autoAddVisitedProfile","visitedProfile","isDemo","getSubscriptionsSorted","sort","a","b","nameA","nameB","localeCompare","getSubscriptionsForSelection","map","displayName","isRemovable","updateSubscription","updatedProfile","index","clearSubscriptions","exportSubscriptions","importSubscriptions","jsonString","merge","importedSubscriptions","Array","isArray","finalSubscriptions","existingSubscriptions","mergedSubscriptions","forEach","imported","profileSubscriptionService"],"sources":["/home/runner/work/sgex/sgex/src/services/profileSubscriptionService.js"],"sourcesContent":["/**\n * Profile Subscription Service - Manages profile subscriptions in localStorage\n * \n * Provides functionality to manage profile subscriptions:\n * - Always includes WorldHealthOrganization\n * - Includes logged-in user when authenticated\n * - Auto-adds users when browsing their profiles\n * - Allows removal of profiles (except WHO and current user)\n */\nclass ProfileSubscriptionService {\n  constructor() {\n    this.storageKey = 'sgex-profile-subscriptions';\n    this.whoProfile = 'WorldHealthOrganization';\n  }\n\n  /**\n   * Get profile subscriptions from localStorage\n   * @returns {Array} Array of profile objects\n   */\n  getSubscriptions() {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      const subscriptions = stored ? JSON.parse(stored) : [];\n      \n      // Always ensure WHO is included\n      if (!subscriptions.find(profile => profile.login === this.whoProfile)) {\n        subscriptions.unshift({\n          login: this.whoProfile,\n          name: 'World Health Organization',\n          avatar_url: `https://github.com/${this.whoProfile}.png`,\n          type: 'Organization',\n          isPermanent: true,\n          addedAt: new Date().toISOString()\n        });\n        this.saveSubscriptions(subscriptions);\n      }\n      \n      return subscriptions;\n    } catch (error) {\n      console.warn('Error reading profile subscriptions from localStorage:', error);\n      // Return minimal default with WHO\n      return [{\n        login: this.whoProfile,\n        name: 'World Health Organization',\n        avatar_url: `https://github.com/${this.whoProfile}.png`,\n        type: 'Organization',\n        isPermanent: true,\n        addedAt: new Date().toISOString()\n      }];\n    }\n  }\n\n  /**\n   * Save profile subscriptions to localStorage\n   * @param {Array} subscriptions - Array of profile objects\n   */\n  saveSubscriptions(subscriptions) {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(subscriptions));\n    } catch (error) {\n      console.error('Error saving profile subscriptions to localStorage:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add a profile to subscriptions\n   * @param {Object} profile - Profile object with login, name, avatar_url, type\n   * @param {boolean} isPermanent - Whether the profile cannot be removed\n   * @returns {Object} The added profile\n   */\n  addSubscription(profile, isPermanent = false) {\n    if (!profile || !profile.login) {\n      throw new Error('Profile must have a login property');\n    }\n\n    const subscriptions = this.getSubscriptions();\n    \n    // Check if already subscribed\n    const existingIndex = subscriptions.findIndex(p => p.login === profile.login);\n    if (existingIndex !== -1) {\n      // Update existing subscription\n      subscriptions[existingIndex] = {\n        ...subscriptions[existingIndex],\n        ...profile,\n        isPermanent: subscriptions[existingIndex].isPermanent || isPermanent,\n        lastUpdated: new Date().toISOString()\n      };\n      this.saveSubscriptions(subscriptions);\n      return subscriptions[existingIndex];\n    }\n\n    // Add new subscription\n    const newSubscription = {\n      login: profile.login,\n      name: profile.name || profile.login,\n      avatar_url: profile.avatar_url || `https://github.com/${profile.login}.png`,\n      type: profile.type || 'User',\n      isPermanent,\n      addedAt: new Date().toISOString(),\n      lastUpdated: new Date().toISOString()\n    };\n\n    subscriptions.push(newSubscription);\n    this.saveSubscriptions(subscriptions);\n    return newSubscription;\n  }\n\n  /**\n   * Remove a profile from subscriptions\n   * @param {string} login - Login/username to remove\n   * @returns {boolean} Success status\n   */\n  removeSubscription(login) {\n    if (!login) {\n      return false;\n    }\n\n    try {\n      const subscriptions = this.getSubscriptions();\n      const profileIndex = subscriptions.findIndex(p => p.login === login);\n      \n      if (profileIndex === -1) {\n        return false; // Profile not found\n      }\n\n      const profile = subscriptions[profileIndex];\n      \n      // Cannot remove permanent profiles (WHO, current user)\n      if (profile.isPermanent) {\n        console.warn(`Cannot remove permanent profile: ${login}`);\n        return false;\n      }\n\n      subscriptions.splice(profileIndex, 1);\n      this.saveSubscriptions(subscriptions);\n      return true;\n    } catch (error) {\n      console.error('Error removing profile subscription:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if a profile is subscribed\n   * @param {string} login - Login/username to check\n   * @returns {boolean} Whether the profile is subscribed\n   */\n  isSubscribed(login) {\n    if (!login) return false;\n    const subscriptions = this.getSubscriptions();\n    return subscriptions.some(p => p.login === login);\n  }\n\n  /**\n   * Get a specific subscription by login\n   * @param {string} login - Login/username to find\n   * @returns {Object|null} Profile object or null if not found\n   */\n  getSubscription(login) {\n    if (!login) return null;\n    const subscriptions = this.getSubscriptions();\n    return subscriptions.find(p => p.login === login) || null;\n  }\n\n  /**\n   * Auto-add current user to subscriptions (when logged in)\n   * @param {Object} userProfile - Current user's profile\n   */\n  ensureCurrentUserSubscribed(userProfile) {\n    if (!userProfile || !userProfile.login) {\n      return;\n    }\n\n    const existing = this.getSubscription(userProfile.login);\n    if (!existing) {\n      this.addSubscription({\n        ...userProfile,\n        isPermanent: true // Current user cannot be removed\n      }, true);\n    } else if (!existing.isPermanent) {\n      // Update existing to be permanent\n      this.addSubscription({\n        ...existing,\n        ...userProfile,\n        isPermanent: true\n      }, true);\n    }\n  }\n\n  /**\n   * Auto-add a visited user profile (from browsing)\n   * @param {Object} visitedProfile - Profile that user is browsing\n   */\n  autoAddVisitedProfile(visitedProfile) {\n    if (!visitedProfile || !visitedProfile.login) {\n      return;\n    }\n\n    // Don't auto-add if already subscribed\n    if (this.isSubscribed(visitedProfile.login)) {\n      return;\n    }\n\n    // Don't auto-add demo profiles\n    if (visitedProfile.isDemo) {\n      return;\n    }\n\n    this.addSubscription(visitedProfile, false);\n  }\n\n  /**\n   * Get subscriptions sorted alphabetically by name\n   * @returns {Array} Sorted array of profile objects\n   */\n  getSubscriptionsSorted() {\n    const subscriptions = this.getSubscriptions();\n    return subscriptions.sort((a, b) => {\n      // WHO always first\n      if (a.login === this.whoProfile) return -1;\n      if (b.login === this.whoProfile) return 1;\n      \n      // Then sort by name/login\n      const nameA = a.name || a.login;\n      const nameB = b.name || b.login;\n      return nameA.localeCompare(nameB);\n    });\n  }\n\n  /**\n   * Get subscriptions for profile selection (formatted for UI)\n   * @returns {Array} Array of profile objects formatted for selection UI\n   */\n  getSubscriptionsForSelection() {\n    return this.getSubscriptionsSorted().map(profile => ({\n      ...profile,\n      displayName: profile.name || profile.login,\n      isRemovable: !profile.isPermanent\n    }));\n  }\n\n  /**\n   * Update subscription with latest profile information\n   * @param {string} login - Login/username to update\n   * @param {Object} updatedProfile - Updated profile information\n   * @returns {boolean} Success status\n   */\n  updateSubscription(login, updatedProfile) {\n    if (!login || !updatedProfile) {\n      return false;\n    }\n\n    try {\n      const subscriptions = this.getSubscriptions();\n      const index = subscriptions.findIndex(p => p.login === login);\n      \n      if (index === -1) {\n        return false;\n      }\n\n      subscriptions[index] = {\n        ...subscriptions[index],\n        ...updatedProfile,\n        login, // Preserve original login\n        lastUpdated: new Date().toISOString()\n      };\n\n      this.saveSubscriptions(subscriptions);\n      return true;\n    } catch (error) {\n      console.error('Error updating subscription:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all subscriptions (except WHO)\n   */\n  clearSubscriptions() {\n    try {\n      const whoProfile = {\n        login: this.whoProfile,\n        name: 'World Health Organization',\n        avatar_url: `https://github.com/${this.whoProfile}.png`,\n        type: 'Organization',\n        isPermanent: true,\n        addedAt: new Date().toISOString()\n      };\n      this.saveSubscriptions([whoProfile]);\n    } catch (error) {\n      console.error('Error clearing subscriptions:', error);\n    }\n  }\n\n  /**\n   * Export subscriptions as JSON\n   * @returns {string} JSON string of subscriptions\n   */\n  exportSubscriptions() {\n    const subscriptions = this.getSubscriptions();\n    return JSON.stringify(subscriptions, null, 2);\n  }\n\n  /**\n   * Import subscriptions from JSON\n   * @param {string} jsonString - JSON string of subscriptions\n   * @param {boolean} merge - Whether to merge with existing subscriptions\n   * @returns {boolean} Success status\n   */\n  importSubscriptions(jsonString, merge = false) {\n    try {\n      const importedSubscriptions = JSON.parse(jsonString);\n      \n      if (!Array.isArray(importedSubscriptions)) {\n        throw new Error('Invalid subscription format');\n      }\n\n      let finalSubscriptions;\n      \n      if (merge) {\n        const existingSubscriptions = this.getSubscriptions();\n        const mergedSubscriptions = [...existingSubscriptions];\n        \n        importedSubscriptions.forEach(imported => {\n          const existingIndex = mergedSubscriptions.findIndex(p => p.login === imported.login);\n          if (existingIndex !== -1) {\n            // Preserve permanence of existing subscriptions\n            mergedSubscriptions[existingIndex] = {\n              ...imported,\n              isPermanent: mergedSubscriptions[existingIndex].isPermanent || imported.isPermanent\n            };\n          } else {\n            mergedSubscriptions.push(imported);\n          }\n        });\n        \n        finalSubscriptions = mergedSubscriptions;\n      } else {\n        finalSubscriptions = importedSubscriptions;\n      }\n\n      // Ensure WHO is always included\n      if (!finalSubscriptions.find(p => p.login === this.whoProfile)) {\n        finalSubscriptions.unshift({\n          login: this.whoProfile,\n          name: 'World Health Organization',\n          avatar_url: `https://github.com/${this.whoProfile}.png`,\n          type: 'Organization',\n          isPermanent: true,\n          addedAt: new Date().toISOString()\n        });\n      }\n      \n      this.saveSubscriptions(finalSubscriptions);\n      return true;\n    } catch (error) {\n      console.error('Error importing subscriptions:', error);\n      return false;\n    }\n  }\n}\n\n// Create and export singleton instance\nconst profileSubscriptionService = new ProfileSubscriptionService();\nexport default profileSubscriptionService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}