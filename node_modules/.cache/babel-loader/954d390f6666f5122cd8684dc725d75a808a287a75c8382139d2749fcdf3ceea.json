{"ast":null,"code":"/**\n * The code in the <project-logo></project-logo> area\n * must not be changed.\n *\n * @see http://bpmn.io/license for more information.\n */\nimport { assign, find, isNumber, omit } from 'min-dash';\nimport { domify, assignStyle, query as domQuery, remove as domRemove } from 'min-dom';\nimport { innerSVG } from 'tiny-svg';\nimport Diagram from 'diagram-js';\nimport BpmnModdle from 'bpmn-moddle';\nimport inherits from 'inherits-browser';\nimport { importBpmnDiagram } from './import/Importer';\n\n/**\n * @template T\n *\n * @typedef { import('diagram-js/lib/core/EventBus').default<T> } EventBus\n */\n\n/**\n * @template T\n *\n * @typedef {import('diagram-js/lib/core/EventBus').EventBusEventCallback<T>} EventBusEventCallback\n */\n\n/**\n * @typedef {import('didi').ModuleDeclaration} ModuleDeclaration\n *\n * @typedef {import('./model/Types').Moddle} Moddle\n * @typedef {import('./model/Types').ModdleElement} ModdleElement\n * @typedef {import('./model/Types').ModdleExtension} ModdleExtension\n *\n * @typedef { {\n *   width?: number|string;\n *   height?: number|string;\n *   position?: string;\n *   container?: string|HTMLElement;\n *   moddleExtensions?: ModdleExtensions;\n *   additionalModules?: ModuleDeclaration[];\n * } & Record<string, any> } BaseViewerOptions\n *\n * @typedef {Record<string, ModdleElement>} ModdleElementsById\n *\n * @typedef { {\n *   [key: string]: ModdleExtension;\n * } } ModdleExtensions\n *\n * @typedef { {\n *   warnings: string[];\n * } } ImportXMLResult\n *\n * @typedef {ImportXMLResult & Error} ImportXMLError\n *\n * @typedef {ImportXMLResult} ImportDefinitionsResult\n *\n * @typedef {ImportXMLError} ImportDefinitionsError\n *\n * @typedef {ImportXMLResult} OpenResult\n *\n * @typedef {ImportXMLError} OpenError\n *\n * @typedef { {\n *   format?: boolean;\n *   preamble?: boolean;\n * } } SaveXMLOptions\n *\n * @typedef { {\n *   xml?: string;\n *   error?: Error;\n * } } SaveXMLResult\n *\n * @typedef { {\n *   svg: string;\n * } } SaveSVGResult\n *\n * @typedef { {\n *   xml: string;\n * } } ImportParseStartEvent\n *\n * @typedef { {\n *   error?: ImportXMLError;\n *   definitions?: ModdleElement;\n *   elementsById?: ModdleElementsById;\n *   references?: ModdleElement[];\n *   warnings: string[];\n * } } ImportParseCompleteEvent\n *\n * @typedef { {\n *   error?: ImportXMLError;\n *   warnings: string[];\n * } } ImportDoneEvent\n *\n * @typedef { {\n *   definitions: ModdleElement;\n * } } SaveXMLStartEvent\n *\n * @typedef {SaveXMLResult} SaveXMLDoneEvent\n *\n * @typedef { {\n *   error?: Error;\n *   svg: string;\n * } } SaveSVGDoneEvent\n */\n\n/**\n * @template Type\n *\n * @typedef { Type extends { eventBus: EventBus<infer X> } ? X : never } EventMap\n */\n\n/**\n * A base viewer for BPMN 2.0 diagrams.\n *\n * Have a look at {@link bpmn-js/lib/Viewer}, {@link bpmn-js/lib/NavigatedViewer} or {@link bpmn-js/lib/Modeler} for\n * bundles that include actual features.\n *\n * @template [ServiceMap=null]\n *\n * @extends Diagram<ServiceMap>\n *\n * @param {BaseViewerOptions} [options] The options to configure the viewer.\n */\nexport default function BaseViewer(options) {\n  /**\n   * @type {BaseViewerOptions}\n   */\n  options = assign({}, DEFAULT_OPTIONS, options);\n\n  /**\n   * @type {Moddle}\n   */\n  this._moddle = this._createModdle(options);\n\n  /**\n   * @type {HTMLElement}\n   */\n  this._container = this._createContainer(options);\n  this._init(this._container, this._moddle, options);\n\n  /* <project-logo> */\n\n  addProjectLogo(this._container);\n\n  /* </project-logo> */\n}\ninherits(BaseViewer, Diagram);\n\n/**\n * Parse and render a BPMN 2.0 diagram.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During import the viewer will fire life-cycle events:\n *\n *   * import.parse.start (about to read model from XML)\n *   * import.parse.complete (model read; may have worked or not)\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *   * import.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @throws {ImportXMLError} An error thrown during the import of the XML.\n *\n * @fires BaseViewer#ImportParseStartEvent\n * @fires BaseViewer#ImportParseCompleteEvent\n * @fires Importer#ImportRenderStartEvent\n * @fires Importer#ImportRenderCompleteEvent\n * @fires BaseViewer#ImportDoneEvent\n *\n * @param {string} xml The BPMN 2.0 XML to be imported.\n * @param {ModdleElement|string} [bpmnDiagram] The optional diagram or Id of the BPMN diagram to open.\n *\n * @return {Promise<ImportXMLResult>} A promise resolving with warnings that were produced during the import.\n */\nBaseViewer.prototype.importXML = async function importXML(xml, bpmnDiagram) {\n  const self = this;\n  function ParseCompleteEvent(data) {\n    return self.get('eventBus').createEvent(data);\n  }\n  let aggregatedWarnings = [];\n  try {\n    // hook in pre-parse listeners +\n    // allow xml manipulation\n\n    /**\n     * A `import.parse.start` event.\n     *\n     * @event BaseViewer#ImportParseStartEvent\n     * @type {ImportParseStartEvent}\n     */\n    xml = this._emit('import.parse.start', {\n      xml: xml\n    }) || xml;\n    let parseResult;\n    try {\n      parseResult = await this._moddle.fromXML(xml, 'bpmn:Definitions');\n    } catch (error) {\n      this._emit('import.parse.complete', {\n        error\n      });\n      throw error;\n    }\n    let definitions = parseResult.rootElement;\n    const references = parseResult.references;\n    const parseWarnings = parseResult.warnings;\n    const elementsById = parseResult.elementsById;\n    aggregatedWarnings = aggregatedWarnings.concat(parseWarnings);\n\n    // hook in post parse listeners +\n    // allow definitions manipulation\n\n    /**\n     * A `import.parse.complete` event.\n     *\n     * @event BaseViewer#ImportParseCompleteEvent\n     * @type {ImportParseCompleteEvent}\n     */\n    definitions = this._emit('import.parse.complete', ParseCompleteEvent({\n      error: null,\n      definitions: definitions,\n      elementsById: elementsById,\n      references: references,\n      warnings: aggregatedWarnings\n    })) || definitions;\n    const importResult = await this.importDefinitions(definitions, bpmnDiagram);\n    aggregatedWarnings = aggregatedWarnings.concat(importResult.warnings);\n\n    /**\n     * A `import.parse.complete` event.\n     *\n     * @event BaseViewer#ImportDoneEvent\n     * @type {ImportDoneEvent}\n     */\n    this._emit('import.done', {\n      error: null,\n      warnings: aggregatedWarnings\n    });\n    return {\n      warnings: aggregatedWarnings\n    };\n  } catch (err) {\n    let error = err;\n    aggregatedWarnings = aggregatedWarnings.concat(error.warnings || []);\n    addWarningsToError(error, aggregatedWarnings);\n    error = checkValidationError(error);\n    this._emit('import.done', {\n      error,\n      warnings: error.warnings\n    });\n    throw error;\n  }\n};\n\n/**\n * Import parsed definitions and render a BPMN 2.0 diagram.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During import the viewer will fire life-cycle events:\n *\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @throws {ImportDefinitionsError} An error thrown during the import of the definitions.\n *\n * @param {ModdleElement} definitions The definitions.\n * @param {ModdleElement|string} [bpmnDiagram] The optional diagram or ID of the BPMN diagram to open.\n *\n * @return {Promise<ImportDefinitionsResult>} A promise resolving with warnings that were produced during the import.\n */\nBaseViewer.prototype.importDefinitions = async function importDefinitions(definitions, bpmnDiagram) {\n  this._setDefinitions(definitions);\n  const result = await this.open(bpmnDiagram);\n  return {\n    warnings: result.warnings\n  };\n};\n\n/**\n * Open diagram of previously imported XML.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During switch the viewer will fire life-cycle events:\n *\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @throws {OpenError} An error thrown during opening.\n *\n * @param {ModdleElement|string} bpmnDiagramOrId The diagram or Id of the BPMN diagram to open.\n *\n * @return {Promise<OpenResult>} A promise resolving with warnings that were produced during opening.\n */\nBaseViewer.prototype.open = async function open(bpmnDiagramOrId) {\n  const definitions = this._definitions;\n  let bpmnDiagram = bpmnDiagramOrId;\n  if (!definitions) {\n    const error = new Error('no XML imported');\n    addWarningsToError(error, []);\n    throw error;\n  }\n  if (typeof bpmnDiagramOrId === 'string') {\n    bpmnDiagram = findBPMNDiagram(definitions, bpmnDiagramOrId);\n    if (!bpmnDiagram) {\n      const error = new Error('BPMNDiagram <' + bpmnDiagramOrId + '> not found');\n      addWarningsToError(error, []);\n      throw error;\n    }\n  }\n\n  // clear existing rendered diagram\n  // catch synchronous exceptions during #clear()\n  try {\n    this.clear();\n  } catch (error) {\n    addWarningsToError(error, []);\n    throw error;\n  }\n\n  // perform graphical import\n  const {\n    warnings\n  } = await importBpmnDiagram(this, definitions, bpmnDiagram);\n  return {\n    warnings\n  };\n};\n\n/**\n * Export the currently displayed BPMN 2.0 diagram as\n * a BPMN 2.0 XML document.\n *\n * ## Life-Cycle Events\n *\n * During XML saving the viewer will fire life-cycle events:\n *\n *   * saveXML.start (before serialization)\n *   * saveXML.serialized (after xml generation)\n *   * saveXML.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @throws {Error} An error thrown during export.\n *\n * @fires BaseViewer#SaveXMLStart\n * @fires BaseViewer#SaveXMLDone\n *\n * @param {SaveXMLOptions} [options] The options.\n *\n * @return {Promise<SaveXMLResult>} A promise resolving with the XML.\n */\nBaseViewer.prototype.saveXML = async function saveXML(options) {\n  options = options || {};\n  let definitions = this._definitions,\n    error,\n    xml;\n  try {\n    if (!definitions) {\n      throw new Error('no definitions loaded');\n    }\n\n    // allow to fiddle around with definitions\n\n    /**\n     * A `saveXML.start` event.\n     *\n     * @event BaseViewer#SaveXMLStartEvent\n     * @type {SaveXMLStartEvent}\n     */\n    definitions = this._emit('saveXML.start', {\n      definitions\n    }) || definitions;\n    const result = await this._moddle.toXML(definitions, options);\n    xml = result.xml;\n    xml = this._emit('saveXML.serialized', {\n      xml\n    }) || xml;\n  } catch (err) {\n    error = err;\n  }\n  const result = error ? {\n    error\n  } : {\n    xml\n  };\n\n  /**\n   * A `saveXML.done` event.\n   *\n   * @event BaseViewer#SaveXMLDoneEvent\n   * @type {SaveXMLDoneEvent}\n   */\n  this._emit('saveXML.done', result);\n  if (error) {\n    throw error;\n  }\n  return result;\n};\n\n/**\n * Export the currently displayed BPMN 2.0 diagram as\n * an SVG image.\n *\n * ## Life-Cycle Events\n *\n * During SVG saving the viewer will fire life-cycle events:\n *\n *   * saveSVG.start (before serialization)\n *   * saveSVG.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @throws {Error} An error thrown during export.\n *\n * @fires BaseViewer#SaveSVGDone\n *\n * @return {Promise<SaveSVGResult>} A promise resolving with the SVG.\n */\nBaseViewer.prototype.saveSVG = async function saveSVG() {\n  this._emit('saveSVG.start');\n  let svg, err;\n  try {\n    const canvas = this.get('canvas');\n    const contentNode = canvas.getActiveLayer(),\n      defsNode = domQuery(':scope > defs', canvas._svg);\n    const contents = innerSVG(contentNode),\n      defs = defsNode ? '<defs>' + innerSVG(defsNode) + '</defs>' : '';\n    const bbox = contentNode.getBBox();\n    svg = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' + '<!-- created with bpmn-js / http://bpmn.io -->\\n' + '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n' + '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'width=\"' + bbox.width + '\" height=\"' + bbox.height + '\" ' + 'viewBox=\"' + bbox.x + ' ' + bbox.y + ' ' + bbox.width + ' ' + bbox.height + '\" version=\"1.1\">' + defs + contents + '</svg>';\n  } catch (e) {\n    err = e;\n  }\n\n  /**\n   * A `saveSVG.done` event.\n   *\n   * @event BaseViewer#SaveSVGDoneEvent\n   * @type {SaveSVGDoneEvent}\n   */\n  this._emit('saveSVG.done', {\n    error: err,\n    svg: svg\n  });\n  if (err) {\n    throw err;\n  }\n  return {\n    svg\n  };\n};\nBaseViewer.prototype._setDefinitions = function (definitions) {\n  this._definitions = definitions;\n};\n\n/**\n * Return modules to instantiate with.\n *\n * @return {ModuleDeclaration[]} The modules.\n */\nBaseViewer.prototype.getModules = function () {\n  return this._modules;\n};\n\n/**\n * Remove all drawn elements from the viewer.\n *\n * After calling this method the viewer can still be reused for opening another\n * diagram.\n */\nBaseViewer.prototype.clear = function () {\n  if (!this.getDefinitions()) {\n    // no diagram to clear\n    return;\n  }\n\n  // remove drawn elements\n  Diagram.prototype.clear.call(this);\n};\n\n/**\n * Destroy the viewer instance and remove all its remainders from the document\n * tree.\n */\nBaseViewer.prototype.destroy = function () {\n  // diagram destroy\n  Diagram.prototype.destroy.call(this);\n\n  // dom detach\n  domRemove(this._container);\n};\n\n/**\n * @overlord\n *\n * Register an event listener for events with the given name.\n *\n * The callback will be invoked with `event, ...additionalArguments`\n * that have been passed to {@link EventBus#fire}.\n *\n * Returning false from a listener will prevent the events default action\n * (if any is specified). To stop an event from being processed further in\n * other listeners execute {@link Event#stopPropagation}.\n *\n * Returning anything but `undefined` from a listener will stop the listener propagation.\n *\n * @template T\n *\n * @param {string|string[]} events The event(s) to listen to.\n * @param {number} [priority] The priority with which to listen.\n * @param {EventBusEventCallback<T>} callback The callback.\n * @param {any} [that] Value of `this` the callback will be called with.\n */\n/**\n * Register an event listener for events with the given name.\n *\n * The callback will be invoked with `event, ...additionalArguments`\n * that have been passed to {@link EventBus#fire}.\n *\n * Returning false from a listener will prevent the events default action\n * (if any is specified). To stop an event from being processed further in\n * other listeners execute {@link Event#stopPropagation}.\n *\n * Returning anything but `undefined` from a listener will stop the listener propagation.\n *\n * @template {keyof EventMap<ServiceMap>} EventName\n *\n * @param {EventName} events to subscribe to\n * @param {number} [priority=1000] listen priority\n * @param {EventBusEventCallback<(EventMap<ServiceMap>)[EventName]>} callback\n * @param {any} [that] callback context\n */\nBaseViewer.prototype.on = function (events, priority, callback, that) {\n  return this.get('eventBus').on(events, priority, callback, that);\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string|string[]} events The event(s).\n * @param {Function} [callback] The callback.\n */\nBaseViewer.prototype.off = function (events, callback) {\n  this.get('eventBus').off(events, callback);\n};\n\n/**\n * Attach the viewer to an HTML element.\n *\n * @param {HTMLElement} parentNode The parent node to attach to.\n */\nBaseViewer.prototype.attachTo = function (parentNode) {\n  if (!parentNode) {\n    throw new Error('parentNode required');\n  }\n\n  // ensure we detach from the\n  // previous, old parent\n  this.detach();\n\n  // unwrap jQuery if provided\n  if (parentNode.get && parentNode.constructor.prototype.jquery) {\n    parentNode = parentNode.get(0);\n  }\n  if (typeof parentNode === 'string') {\n    parentNode = domQuery(parentNode);\n  }\n  parentNode.appendChild(this._container);\n  this._emit('attach', {});\n  this.get('canvas').resized();\n};\n\n/**\n * Get the definitions model element.\n *\n * @return {ModdleElement} The definitions model element.\n */\nBaseViewer.prototype.getDefinitions = function () {\n  return this._definitions;\n};\n\n/**\n * Detach the viewer.\n *\n * @fires BaseViewer#DetachEvent\n */\nBaseViewer.prototype.detach = function () {\n  const container = this._container,\n    parentNode = container.parentNode;\n  if (!parentNode) {\n    return;\n  }\n\n  /**\n   * A `detach` event.\n   *\n   * @event BaseViewer#DetachEvent\n   * @type {Object}\n   */\n  this._emit('detach', {});\n  parentNode.removeChild(container);\n};\nBaseViewer.prototype._init = function (container, moddle, options) {\n  const baseModules = options.modules || this.getModules(options),\n    additionalModules = options.additionalModules || [],\n    staticModules = [{\n      bpmnjs: ['value', this],\n      moddle: ['value', moddle]\n    }];\n  const diagramModules = [].concat(staticModules, baseModules, additionalModules);\n  const diagramOptions = assign(omit(options, ['additionalModules']), {\n    canvas: assign({}, options.canvas, {\n      container: container\n    }),\n    modules: diagramModules\n  });\n\n  // invoke diagram constructor\n  Diagram.call(this, diagramOptions);\n  if (options && options.container) {\n    this.attachTo(options.container);\n  }\n};\n\n/**\n * Emit an event on the underlying {@link EventBus}\n *\n * @param  {string} type\n * @param  {Object} event\n *\n * @return {Object} The return value after calling all event listeners.\n */\nBaseViewer.prototype._emit = function (type, event) {\n  return this.get('eventBus').fire(type, event);\n};\n\n/**\n * @param {BaseViewerOptions} options\n *\n * @return {HTMLElement}\n */\nBaseViewer.prototype._createContainer = function (options) {\n  const container = domify('<div class=\"bjs-container\"></div>');\n  assignStyle(container, {\n    width: ensureUnit(options.width),\n    height: ensureUnit(options.height),\n    position: options.position\n  });\n  return container;\n};\n\n/**\n * @param {BaseViewerOptions} options\n *\n * @return {Moddle}\n */\nBaseViewer.prototype._createModdle = function (options) {\n  const moddleOptions = assign({}, this._moddleExtensions, options.moddleExtensions);\n  return new BpmnModdle(moddleOptions);\n};\nBaseViewer.prototype._modules = [];\n\n// helpers ///////////////\n\nfunction addWarningsToError(err, warningsAry) {\n  err.warnings = warningsAry;\n  return err;\n}\nfunction checkValidationError(err) {\n  // check if we can help the user by indicating wrong BPMN 2.0 xml\n  // (in case he or the exporting tool did not get that right)\n\n  const pattern = /unparsable content <([^>]+)> detected([\\s\\S]*)$/;\n  const match = pattern.exec(err.message);\n  if (match) {\n    err.message = 'unparsable content <' + match[1] + '> detected; ' + 'this may indicate an invalid BPMN 2.0 diagram file' + match[2];\n  }\n  return err;\n}\nconst DEFAULT_OPTIONS = {\n  width: '100%',\n  height: '100%',\n  position: 'relative'\n};\n\n/**\n * Ensure the passed argument is a proper unit (defaulting to px)\n */\nfunction ensureUnit(val) {\n  return val + (isNumber(val) ? 'px' : '');\n}\n\n/**\n * Find BPMNDiagram in definitions by ID\n *\n * @param {ModdleElement<Definitions>} definitions\n * @param {string} diagramId\n *\n * @return {ModdleElement<BPMNDiagram>|null}\n */\nfunction findBPMNDiagram(definitions, diagramId) {\n  if (!diagramId) {\n    return null;\n  }\n  return find(definitions.diagrams, function (element) {\n    return element.id === diagramId;\n  }) || null;\n}\n\n/* <project-logo> */\n\nimport { open as openPoweredBy, BPMNIO_IMG, LOGO_STYLES, LINK_STYLES } from './util/PoweredByUtil';\nimport { event as domEvent } from 'min-dom';\n\n/**\n * Adds the project logo to the diagram container as\n * required by the bpmn.io license.\n *\n * @see http://bpmn.io/license\n *\n * @param {Element} container\n */\nfunction addProjectLogo(container) {\n  const img = BPMNIO_IMG;\n  const linkMarkup = '<a href=\"http://bpmn.io\" ' + 'target=\"_blank\" ' + 'class=\"bjs-powered-by\" ' + 'title=\"Powered by bpmn.io\" ' + '>' + img + '</a>';\n  const linkElement = domify(linkMarkup);\n  assignStyle(domQuery('svg', linkElement), LOGO_STYLES);\n  assignStyle(linkElement, LINK_STYLES, {\n    position: 'absolute',\n    bottom: '15px',\n    right: '15px',\n    zIndex: '100'\n  });\n  container.appendChild(linkElement);\n  domEvent.bind(linkElement, 'click', function (event) {\n    openPoweredBy();\n    event.preventDefault();\n  });\n}\n\n/* </project-logo> */","map":{"version":3,"names":["assign","find","isNumber","omit","domify","assignStyle","query","domQuery","remove","domRemove","innerSVG","Diagram","BpmnModdle","inherits","importBpmnDiagram","BaseViewer","options","DEFAULT_OPTIONS","_moddle","_createModdle","_container","_createContainer","_init","addProjectLogo","prototype","importXML","xml","bpmnDiagram","self","ParseCompleteEvent","data","get","createEvent","aggregatedWarnings","_emit","parseResult","fromXML","error","definitions","rootElement","references","parseWarnings","warnings","elementsById","concat","importResult","importDefinitions","err","addWarningsToError","checkValidationError","_setDefinitions","result","open","bpmnDiagramOrId","_definitions","Error","findBPMNDiagram","clear","saveXML","toXML","saveSVG","svg","canvas","contentNode","getActiveLayer","defsNode","_svg","contents","defs","bbox","getBBox","width","height","x","y","e","getModules","_modules","getDefinitions","call","destroy","on","events","priority","callback","that","off","attachTo","parentNode","detach","constructor","jquery","appendChild","resized","container","removeChild","moddle","baseModules","modules","additionalModules","staticModules","bpmnjs","diagramModules","diagramOptions","type","event","fire","ensureUnit","position","moddleOptions","_moddleExtensions","moddleExtensions","warningsAry","pattern","match","exec","message","val","diagramId","diagrams","element","id","openPoweredBy","BPMNIO_IMG","LOGO_STYLES","LINK_STYLES","domEvent","img","linkMarkup","linkElement","bottom","right","zIndex","bind","preventDefault"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/BaseViewer.js"],"sourcesContent":["/**\n * The code in the <project-logo></project-logo> area\n * must not be changed.\n *\n * @see http://bpmn.io/license for more information.\n */\nimport {\n  assign,\n  find,\n  isNumber,\n  omit\n} from 'min-dash';\n\nimport {\n  domify,\n  assignStyle,\n  query as domQuery,\n  remove as domRemove\n} from 'min-dom';\n\nimport {\n  innerSVG\n} from 'tiny-svg';\n\nimport Diagram from 'diagram-js';\nimport BpmnModdle from 'bpmn-moddle';\n\nimport inherits from 'inherits-browser';\n\nimport {\n  importBpmnDiagram\n} from './import/Importer';\n\n/**\n * @template T\n *\n * @typedef { import('diagram-js/lib/core/EventBus').default<T> } EventBus\n */\n\n/**\n * @template T\n *\n * @typedef {import('diagram-js/lib/core/EventBus').EventBusEventCallback<T>} EventBusEventCallback\n */\n\n/**\n * @typedef {import('didi').ModuleDeclaration} ModuleDeclaration\n *\n * @typedef {import('./model/Types').Moddle} Moddle\n * @typedef {import('./model/Types').ModdleElement} ModdleElement\n * @typedef {import('./model/Types').ModdleExtension} ModdleExtension\n *\n * @typedef { {\n *   width?: number|string;\n *   height?: number|string;\n *   position?: string;\n *   container?: string|HTMLElement;\n *   moddleExtensions?: ModdleExtensions;\n *   additionalModules?: ModuleDeclaration[];\n * } & Record<string, any> } BaseViewerOptions\n *\n * @typedef {Record<string, ModdleElement>} ModdleElementsById\n *\n * @typedef { {\n *   [key: string]: ModdleExtension;\n * } } ModdleExtensions\n *\n * @typedef { {\n *   warnings: string[];\n * } } ImportXMLResult\n *\n * @typedef {ImportXMLResult & Error} ImportXMLError\n *\n * @typedef {ImportXMLResult} ImportDefinitionsResult\n *\n * @typedef {ImportXMLError} ImportDefinitionsError\n *\n * @typedef {ImportXMLResult} OpenResult\n *\n * @typedef {ImportXMLError} OpenError\n *\n * @typedef { {\n *   format?: boolean;\n *   preamble?: boolean;\n * } } SaveXMLOptions\n *\n * @typedef { {\n *   xml?: string;\n *   error?: Error;\n * } } SaveXMLResult\n *\n * @typedef { {\n *   svg: string;\n * } } SaveSVGResult\n *\n * @typedef { {\n *   xml: string;\n * } } ImportParseStartEvent\n *\n * @typedef { {\n *   error?: ImportXMLError;\n *   definitions?: ModdleElement;\n *   elementsById?: ModdleElementsById;\n *   references?: ModdleElement[];\n *   warnings: string[];\n * } } ImportParseCompleteEvent\n *\n * @typedef { {\n *   error?: ImportXMLError;\n *   warnings: string[];\n * } } ImportDoneEvent\n *\n * @typedef { {\n *   definitions: ModdleElement;\n * } } SaveXMLStartEvent\n *\n * @typedef {SaveXMLResult} SaveXMLDoneEvent\n *\n * @typedef { {\n *   error?: Error;\n *   svg: string;\n * } } SaveSVGDoneEvent\n */\n\n/**\n * @template Type\n *\n * @typedef { Type extends { eventBus: EventBus<infer X> } ? X : never } EventMap\n */\n\n/**\n * A base viewer for BPMN 2.0 diagrams.\n *\n * Have a look at {@link bpmn-js/lib/Viewer}, {@link bpmn-js/lib/NavigatedViewer} or {@link bpmn-js/lib/Modeler} for\n * bundles that include actual features.\n *\n * @template [ServiceMap=null]\n *\n * @extends Diagram<ServiceMap>\n *\n * @param {BaseViewerOptions} [options] The options to configure the viewer.\n */\nexport default function BaseViewer(options) {\n\n  /**\n   * @type {BaseViewerOptions}\n   */\n  options = assign({}, DEFAULT_OPTIONS, options);\n\n  /**\n   * @type {Moddle}\n   */\n  this._moddle = this._createModdle(options);\n\n  /**\n   * @type {HTMLElement}\n   */\n  this._container = this._createContainer(options);\n\n  this._init(this._container, this._moddle, options);\n\n  /* <project-logo> */\n\n  addProjectLogo(this._container);\n\n  /* </project-logo> */\n}\n\ninherits(BaseViewer, Diagram);\n\n/**\n * Parse and render a BPMN 2.0 diagram.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During import the viewer will fire life-cycle events:\n *\n *   * import.parse.start (about to read model from XML)\n *   * import.parse.complete (model read; may have worked or not)\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *   * import.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @throws {ImportXMLError} An error thrown during the import of the XML.\n *\n * @fires BaseViewer#ImportParseStartEvent\n * @fires BaseViewer#ImportParseCompleteEvent\n * @fires Importer#ImportRenderStartEvent\n * @fires Importer#ImportRenderCompleteEvent\n * @fires BaseViewer#ImportDoneEvent\n *\n * @param {string} xml The BPMN 2.0 XML to be imported.\n * @param {ModdleElement|string} [bpmnDiagram] The optional diagram or Id of the BPMN diagram to open.\n *\n * @return {Promise<ImportXMLResult>} A promise resolving with warnings that were produced during the import.\n */\nBaseViewer.prototype.importXML = async function importXML(xml, bpmnDiagram) {\n\n  const self = this;\n\n  function ParseCompleteEvent(data) {\n    return self.get('eventBus').createEvent(data);\n  }\n\n  let aggregatedWarnings = [];\n  try {\n\n    // hook in pre-parse listeners +\n    // allow xml manipulation\n\n    /**\n     * A `import.parse.start` event.\n     *\n     * @event BaseViewer#ImportParseStartEvent\n     * @type {ImportParseStartEvent}\n     */\n    xml = this._emit('import.parse.start', { xml: xml }) || xml;\n\n    let parseResult;\n    try {\n      parseResult = await this._moddle.fromXML(xml, 'bpmn:Definitions');\n    } catch (error) {\n      this._emit('import.parse.complete', {\n        error\n      });\n\n      throw error;\n    }\n\n    let definitions = parseResult.rootElement;\n    const references = parseResult.references;\n    const parseWarnings = parseResult.warnings;\n    const elementsById = parseResult.elementsById;\n\n    aggregatedWarnings = aggregatedWarnings.concat(parseWarnings);\n\n    // hook in post parse listeners +\n    // allow definitions manipulation\n\n    /**\n     * A `import.parse.complete` event.\n     *\n     * @event BaseViewer#ImportParseCompleteEvent\n     * @type {ImportParseCompleteEvent}\n     */\n    definitions = this._emit('import.parse.complete', ParseCompleteEvent({\n      error: null,\n      definitions: definitions,\n      elementsById: elementsById,\n      references: references,\n      warnings: aggregatedWarnings\n    })) || definitions;\n\n    const importResult = await this.importDefinitions(definitions, bpmnDiagram);\n\n    aggregatedWarnings = aggregatedWarnings.concat(importResult.warnings);\n\n    /**\n     * A `import.parse.complete` event.\n     *\n     * @event BaseViewer#ImportDoneEvent\n     * @type {ImportDoneEvent}\n     */\n    this._emit('import.done', { error: null, warnings: aggregatedWarnings });\n\n    return { warnings: aggregatedWarnings };\n  } catch (err) {\n    let error = err;\n    aggregatedWarnings = aggregatedWarnings.concat(error.warnings || []);\n    addWarningsToError(error, aggregatedWarnings);\n\n    error = checkValidationError(error);\n\n    this._emit('import.done', { error, warnings: error.warnings });\n\n    throw error;\n  }\n};\n\n\n/**\n * Import parsed definitions and render a BPMN 2.0 diagram.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During import the viewer will fire life-cycle events:\n *\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @throws {ImportDefinitionsError} An error thrown during the import of the definitions.\n *\n * @param {ModdleElement} definitions The definitions.\n * @param {ModdleElement|string} [bpmnDiagram] The optional diagram or ID of the BPMN diagram to open.\n *\n * @return {Promise<ImportDefinitionsResult>} A promise resolving with warnings that were produced during the import.\n */\nBaseViewer.prototype.importDefinitions = async function importDefinitions(definitions, bpmnDiagram) {\n  this._setDefinitions(definitions);\n  const result = await this.open(bpmnDiagram);\n\n  return { warnings: result.warnings };\n};\n\n\n/**\n * Open diagram of previously imported XML.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During switch the viewer will fire life-cycle events:\n *\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @throws {OpenError} An error thrown during opening.\n *\n * @param {ModdleElement|string} bpmnDiagramOrId The diagram or Id of the BPMN diagram to open.\n *\n * @return {Promise<OpenResult>} A promise resolving with warnings that were produced during opening.\n */\nBaseViewer.prototype.open = async function open(bpmnDiagramOrId) {\n\n  const definitions = this._definitions;\n  let bpmnDiagram = bpmnDiagramOrId;\n\n  if (!definitions) {\n    const error = new Error('no XML imported');\n    addWarningsToError(error, []);\n\n    throw error;\n  }\n\n  if (typeof bpmnDiagramOrId === 'string') {\n    bpmnDiagram = findBPMNDiagram(definitions, bpmnDiagramOrId);\n\n    if (!bpmnDiagram) {\n      const error = new Error('BPMNDiagram <' + bpmnDiagramOrId + '> not found');\n      addWarningsToError(error, []);\n\n      throw error;\n    }\n  }\n\n  // clear existing rendered diagram\n  // catch synchronous exceptions during #clear()\n  try {\n    this.clear();\n  } catch (error) {\n    addWarningsToError(error, []);\n\n    throw error;\n  }\n\n  // perform graphical import\n  const { warnings } = await importBpmnDiagram(this, definitions, bpmnDiagram);\n\n  return { warnings };\n};\n\n/**\n * Export the currently displayed BPMN 2.0 diagram as\n * a BPMN 2.0 XML document.\n *\n * ## Life-Cycle Events\n *\n * During XML saving the viewer will fire life-cycle events:\n *\n *   * saveXML.start (before serialization)\n *   * saveXML.serialized (after xml generation)\n *   * saveXML.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @throws {Error} An error thrown during export.\n *\n * @fires BaseViewer#SaveXMLStart\n * @fires BaseViewer#SaveXMLDone\n *\n * @param {SaveXMLOptions} [options] The options.\n *\n * @return {Promise<SaveXMLResult>} A promise resolving with the XML.\n */\nBaseViewer.prototype.saveXML = async function saveXML(options) {\n\n  options = options || {};\n\n  let definitions = this._definitions,\n      error, xml;\n\n  try {\n    if (!definitions) {\n      throw new Error('no definitions loaded');\n    }\n\n    // allow to fiddle around with definitions\n\n    /**\n     * A `saveXML.start` event.\n     *\n     * @event BaseViewer#SaveXMLStartEvent\n     * @type {SaveXMLStartEvent}\n     */\n    definitions = this._emit('saveXML.start', {\n      definitions\n    }) || definitions;\n\n    const result = await this._moddle.toXML(definitions, options);\n    xml = result.xml;\n\n    xml = this._emit('saveXML.serialized', {\n      xml\n    }) || xml;\n  } catch (err) {\n    error = err;\n  }\n\n  const result = error ? { error } : { xml };\n\n  /**\n   * A `saveXML.done` event.\n   *\n   * @event BaseViewer#SaveXMLDoneEvent\n   * @type {SaveXMLDoneEvent}\n   */\n  this._emit('saveXML.done', result);\n\n  if (error) {\n    throw error;\n  }\n\n  return result;\n};\n\n\n/**\n * Export the currently displayed BPMN 2.0 diagram as\n * an SVG image.\n *\n * ## Life-Cycle Events\n *\n * During SVG saving the viewer will fire life-cycle events:\n *\n *   * saveSVG.start (before serialization)\n *   * saveSVG.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @throws {Error} An error thrown during export.\n *\n * @fires BaseViewer#SaveSVGDone\n *\n * @return {Promise<SaveSVGResult>} A promise resolving with the SVG.\n */\nBaseViewer.prototype.saveSVG = async function saveSVG() {\n  this._emit('saveSVG.start');\n\n  let svg, err;\n\n  try {\n    const canvas = this.get('canvas');\n\n    const contentNode = canvas.getActiveLayer(),\n          defsNode = domQuery(':scope > defs', canvas._svg);\n\n    const contents = innerSVG(contentNode),\n          defs = defsNode ? '<defs>' + innerSVG(defsNode) + '</defs>' : '';\n\n    const bbox = contentNode.getBBox();\n\n    svg =\n      '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n      '<!-- created with bpmn-js / http://bpmn.io -->\\n' +\n      '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n' +\n      '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' +\n      'width=\"' + bbox.width + '\" height=\"' + bbox.height + '\" ' +\n      'viewBox=\"' + bbox.x + ' ' + bbox.y + ' ' + bbox.width + ' ' + bbox.height + '\" version=\"1.1\">' +\n      defs + contents +\n      '</svg>';\n  } catch (e) {\n    err = e;\n  }\n\n  /**\n   * A `saveSVG.done` event.\n   *\n   * @event BaseViewer#SaveSVGDoneEvent\n   * @type {SaveSVGDoneEvent}\n   */\n  this._emit('saveSVG.done', {\n    error: err,\n    svg: svg\n  });\n\n  if (err) {\n    throw err;\n  }\n\n  return { svg };\n};\n\nBaseViewer.prototype._setDefinitions = function(definitions) {\n  this._definitions = definitions;\n};\n\n/**\n * Return modules to instantiate with.\n *\n * @return {ModuleDeclaration[]} The modules.\n */\nBaseViewer.prototype.getModules = function() {\n  return this._modules;\n};\n\n/**\n * Remove all drawn elements from the viewer.\n *\n * After calling this method the viewer can still be reused for opening another\n * diagram.\n */\nBaseViewer.prototype.clear = function() {\n  if (!this.getDefinitions()) {\n\n    // no diagram to clear\n    return;\n  }\n\n  // remove drawn elements\n  Diagram.prototype.clear.call(this);\n};\n\n/**\n * Destroy the viewer instance and remove all its remainders from the document\n * tree.\n */\nBaseViewer.prototype.destroy = function() {\n\n  // diagram destroy\n  Diagram.prototype.destroy.call(this);\n\n  // dom detach\n  domRemove(this._container);\n};\n\n/**\n * @overlord\n *\n * Register an event listener for events with the given name.\n *\n * The callback will be invoked with `event, ...additionalArguments`\n * that have been passed to {@link EventBus#fire}.\n *\n * Returning false from a listener will prevent the events default action\n * (if any is specified). To stop an event from being processed further in\n * other listeners execute {@link Event#stopPropagation}.\n *\n * Returning anything but `undefined` from a listener will stop the listener propagation.\n *\n * @template T\n *\n * @param {string|string[]} events The event(s) to listen to.\n * @param {number} [priority] The priority with which to listen.\n * @param {EventBusEventCallback<T>} callback The callback.\n * @param {any} [that] Value of `this` the callback will be called with.\n */\n/**\n * Register an event listener for events with the given name.\n *\n * The callback will be invoked with `event, ...additionalArguments`\n * that have been passed to {@link EventBus#fire}.\n *\n * Returning false from a listener will prevent the events default action\n * (if any is specified). To stop an event from being processed further in\n * other listeners execute {@link Event#stopPropagation}.\n *\n * Returning anything but `undefined` from a listener will stop the listener propagation.\n *\n * @template {keyof EventMap<ServiceMap>} EventName\n *\n * @param {EventName} events to subscribe to\n * @param {number} [priority=1000] listen priority\n * @param {EventBusEventCallback<(EventMap<ServiceMap>)[EventName]>} callback\n * @param {any} [that] callback context\n */\nBaseViewer.prototype.on = function(events, priority, callback, that) {\n  return this.get('eventBus').on(events, priority, callback, that);\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string|string[]} events The event(s).\n * @param {Function} [callback] The callback.\n */\nBaseViewer.prototype.off = function(events, callback) {\n  this.get('eventBus').off(events, callback);\n};\n\n/**\n * Attach the viewer to an HTML element.\n *\n * @param {HTMLElement} parentNode The parent node to attach to.\n */\nBaseViewer.prototype.attachTo = function(parentNode) {\n\n  if (!parentNode) {\n    throw new Error('parentNode required');\n  }\n\n  // ensure we detach from the\n  // previous, old parent\n  this.detach();\n\n  // unwrap jQuery if provided\n  if (parentNode.get && parentNode.constructor.prototype.jquery) {\n    parentNode = parentNode.get(0);\n  }\n\n  if (typeof parentNode === 'string') {\n    parentNode = domQuery(parentNode);\n  }\n\n  parentNode.appendChild(this._container);\n\n  this._emit('attach', {});\n\n  this.get('canvas').resized();\n};\n\n/**\n * Get the definitions model element.\n *\n * @return {ModdleElement} The definitions model element.\n */\nBaseViewer.prototype.getDefinitions = function() {\n  return this._definitions;\n};\n\n/**\n * Detach the viewer.\n *\n * @fires BaseViewer#DetachEvent\n */\nBaseViewer.prototype.detach = function() {\n\n  const container = this._container,\n        parentNode = container.parentNode;\n\n  if (!parentNode) {\n    return;\n  }\n\n  /**\n   * A `detach` event.\n   *\n   * @event BaseViewer#DetachEvent\n   * @type {Object}\n   */\n  this._emit('detach', {});\n\n  parentNode.removeChild(container);\n};\n\nBaseViewer.prototype._init = function(container, moddle, options) {\n\n  const baseModules = options.modules || this.getModules(options),\n        additionalModules = options.additionalModules || [],\n        staticModules = [\n          {\n            bpmnjs: [ 'value', this ],\n            moddle: [ 'value', moddle ]\n          }\n        ];\n\n  const diagramModules = [].concat(staticModules, baseModules, additionalModules);\n\n  const diagramOptions = assign(omit(options, [ 'additionalModules' ]), {\n    canvas: assign({}, options.canvas, { container: container }),\n    modules: diagramModules\n  });\n\n  // invoke diagram constructor\n  Diagram.call(this, diagramOptions);\n\n  if (options && options.container) {\n    this.attachTo(options.container);\n  }\n};\n\n/**\n * Emit an event on the underlying {@link EventBus}\n *\n * @param  {string} type\n * @param  {Object} event\n *\n * @return {Object} The return value after calling all event listeners.\n */\nBaseViewer.prototype._emit = function(type, event) {\n  return this.get('eventBus').fire(type, event);\n};\n\n/**\n * @param {BaseViewerOptions} options\n *\n * @return {HTMLElement}\n */\nBaseViewer.prototype._createContainer = function(options) {\n\n  const container = domify('<div class=\"bjs-container\"></div>');\n\n  assignStyle(container, {\n    width: ensureUnit(options.width),\n    height: ensureUnit(options.height),\n    position: options.position\n  });\n\n  return container;\n};\n\n/**\n * @param {BaseViewerOptions} options\n *\n * @return {Moddle}\n */\nBaseViewer.prototype._createModdle = function(options) {\n  const moddleOptions = assign({}, this._moddleExtensions, options.moddleExtensions);\n\n  return new BpmnModdle(moddleOptions);\n};\n\nBaseViewer.prototype._modules = [];\n\n// helpers ///////////////\n\nfunction addWarningsToError(err, warningsAry) {\n  err.warnings = warningsAry;\n  return err;\n}\n\nfunction checkValidationError(err) {\n\n  // check if we can help the user by indicating wrong BPMN 2.0 xml\n  // (in case he or the exporting tool did not get that right)\n\n  const pattern = /unparsable content <([^>]+)> detected([\\s\\S]*)$/;\n  const match = pattern.exec(err.message);\n\n  if (match) {\n    err.message =\n      'unparsable content <' + match[1] + '> detected; ' +\n      'this may indicate an invalid BPMN 2.0 diagram file' + match[2];\n  }\n\n  return err;\n}\n\nconst DEFAULT_OPTIONS = {\n  width: '100%',\n  height: '100%',\n  position: 'relative'\n};\n\n\n/**\n * Ensure the passed argument is a proper unit (defaulting to px)\n */\nfunction ensureUnit(val) {\n  return val + (isNumber(val) ? 'px' : '');\n}\n\n\n/**\n * Find BPMNDiagram in definitions by ID\n *\n * @param {ModdleElement<Definitions>} definitions\n * @param {string} diagramId\n *\n * @return {ModdleElement<BPMNDiagram>|null}\n */\nfunction findBPMNDiagram(definitions, diagramId) {\n  if (!diagramId) {\n    return null;\n  }\n\n  return find(definitions.diagrams, function(element) {\n    return element.id === diagramId;\n  }) || null;\n}\n\n\n/* <project-logo> */\n\nimport {\n  open as openPoweredBy,\n  BPMNIO_IMG,\n  LOGO_STYLES,\n  LINK_STYLES\n} from './util/PoweredByUtil';\n\nimport {\n  event as domEvent\n} from 'min-dom';\n\n/**\n * Adds the project logo to the diagram container as\n * required by the bpmn.io license.\n *\n * @see http://bpmn.io/license\n *\n * @param {Element} container\n */\nfunction addProjectLogo(container) {\n  const img = BPMNIO_IMG;\n\n  const linkMarkup =\n    '<a href=\"http://bpmn.io\" ' +\n    'target=\"_blank\" ' +\n    'class=\"bjs-powered-by\" ' +\n    'title=\"Powered by bpmn.io\" ' +\n    '>' +\n    img +\n    '</a>';\n\n  const linkElement = domify(linkMarkup);\n\n  assignStyle(domQuery('svg', linkElement), LOGO_STYLES);\n  assignStyle(linkElement, LINK_STYLES, {\n    position: 'absolute',\n    bottom: '15px',\n    right: '15px',\n    zIndex: '100'\n  });\n\n  container.appendChild(linkElement);\n\n  domEvent.bind(linkElement, 'click', function(event) {\n    openPoweredBy();\n\n    event.preventDefault();\n  });\n}\n\n/* </project-logo> */\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SACEA,MAAM,EACNC,IAAI,EACJC,QAAQ,EACRC,IAAI,QACC,UAAU;AAEjB,SACEC,MAAM,EACNC,WAAW,EACXC,KAAK,IAAIC,QAAQ,EACjBC,MAAM,IAAIC,SAAS,QACd,SAAS;AAEhB,SACEC,QAAQ,QACH,UAAU;AAEjB,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,UAAU,MAAM,aAAa;AAEpC,OAAOC,QAAQ,MAAM,kBAAkB;AAEvC,SACEC,iBAAiB,QACZ,mBAAmeAAe,SAASC,UAAUA,CAACC,OAAO,EAAE;EAE1C;AACF;AACA;EACEA,OAAO,GAAGhB,MAAM,CAAC,CAAC,CAAC,EAAEiB,eAAe,EAAED,OAAO,CAAC;;EAE9C;AACF;AACA;EACE,IAAI,CAACE,OAAO,GAAG,IAAI,CAACC,aAAa,CAACH,OAAO,CAAC;;EAE1C;AACF;AACA;EACE,IAAI,CAACI,UAAU,GAAG,IAAI,CAACC,gBAAgB,CAACL,OAAO,CAAC;EAEhD,IAAI,CAACM,KAAK,CAAC,IAAI,CAACF,UAAU,EAAE,IAAI,CAACF,OAAO,EAAEF,OAAO,CAAC;;EAElD;;EAEAO,cAAc,CAAC,IAAI,CAACH,UAAU,CAAC;;EAE/B;AACF;AAEAP,QAAQ,CAACE,UAAU,EAAEJ,OAAO,CAAC;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAI,UAAU,CAACS,SAAS,CAACC,SAAS,GAAG,eAAeA,SAASA,CAACC,GAAG,EAAEC,WAAW,EAAE;EAE1E,MAAMC,IAAI,GAAG,IAAI;EAEjB,SAASC,kBAAkBA,CAACC,IAAI,EAAE;IAChC,OAAOF,IAAI,CAACG,GAAG,CAAC,UAAU,CAAC,CAACC,WAAW,CAACF,IAAI,CAAC;EAC/C;EAEA,IAAIG,kBAAkB,GAAG,EAAE;EAC3B,IAAI;IAEF;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACIP,GAAG,GAAG,IAAI,CAACQ,KAAK,CAAC,oBAAoB,EAAE;MAAER,GAAG,EAAEA;IAAI,CAAC,CAAC,IAAIA,GAAG;IAE3D,IAAIS,WAAW;IACf,IAAI;MACFA,WAAW,GAAG,MAAM,IAAI,CAACjB,OAAO,CAACkB,OAAO,CAACV,GAAG,EAAE,kBAAkB,CAAC;IACnE,CAAC,CAAC,OAAOW,KAAK,EAAE;MACd,IAAI,CAACH,KAAK,CAAC,uBAAuB,EAAE;QAClCG;MACF,CAAC,CAAC;MAEF,MAAMA,KAAK;IACb;IAEA,IAAIC,WAAW,GAAGH,WAAW,CAACI,WAAW;IACzC,MAAMC,UAAU,GAAGL,WAAW,CAACK,UAAU;IACzC,MAAMC,aAAa,GAAGN,WAAW,CAACO,QAAQ;IAC1C,MAAMC,YAAY,GAAGR,WAAW,CAACQ,YAAY;IAE7CV,kBAAkB,GAAGA,kBAAkB,CAACW,MAAM,CAACH,aAAa,CAAC;;IAE7D;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACIH,WAAW,GAAG,IAAI,CAACJ,KAAK,CAAC,uBAAuB,EAAEL,kBAAkB,CAAC;MACnEQ,KAAK,EAAE,IAAI;MACXC,WAAW,EAAEA,WAAW;MACxBK,YAAY,EAAEA,YAAY;MAC1BH,UAAU,EAAEA,UAAU;MACtBE,QAAQ,EAAET;IACZ,CAAC,CAAC,CAAC,IAAIK,WAAW;IAElB,MAAMO,YAAY,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAACR,WAAW,EAAEX,WAAW,CAAC;IAE3EM,kBAAkB,GAAGA,kBAAkB,CAACW,MAAM,CAACC,YAAY,CAACH,QAAQ,CAAC;;IAErE;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAACR,KAAK,CAAC,aAAa,EAAE;MAAEG,KAAK,EAAE,IAAI;MAAEK,QAAQ,EAAET;IAAmB,CAAC,CAAC;IAExE,OAAO;MAAES,QAAQ,EAAET;IAAmB,CAAC;EACzC,CAAC,CAAC,OAAOc,GAAG,EAAE;IACZ,IAAIV,KAAK,GAAGU,GAAG;IACfd,kBAAkB,GAAGA,kBAAkB,CAACW,MAAM,CAACP,KAAK,CAACK,QAAQ,IAAI,EAAE,CAAC;IACpEM,kBAAkB,CAACX,KAAK,EAAEJ,kBAAkB,CAAC;IAE7CI,KAAK,GAAGY,oBAAoB,CAACZ,KAAK,CAAC;IAEnC,IAAI,CAACH,KAAK,CAAC,aAAa,EAAE;MAAEG,KAAK;MAAEK,QAAQ,EAAEL,KAAK,CAACK;IAAS,CAAC,CAAC;IAE9D,MAAML,KAAK;EACb;AACF,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,UAAU,CAACS,SAAS,CAACsB,iBAAiB,GAAG,eAAeA,iBAAiBA,CAACR,WAAW,EAAEX,WAAW,EAAE;EAClG,IAAI,CAACuB,eAAe,CAACZ,WAAW,CAAC;EACjC,MAAMa,MAAM,GAAG,MAAM,IAAI,CAACC,IAAI,CAACzB,WAAW,CAAC;EAE3C,OAAO;IAAEe,QAAQ,EAAES,MAAM,CAACT;EAAS,CAAC;AACtC,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3B,UAAU,CAACS,SAAS,CAAC4B,IAAI,GAAG,eAAeA,IAAIA,CAACC,eAAe,EAAE;EAE/D,MAAMf,WAAW,GAAG,IAAI,CAACgB,YAAY;EACrC,IAAI3B,WAAW,GAAG0B,eAAe;EAEjC,IAAI,CAACf,WAAW,EAAE;IAChB,MAAMD,KAAK,GAAG,IAAIkB,KAAK,CAAC,iBAAiB,CAAC;IAC1CP,kBAAkB,CAACX,KAAK,EAAE,EAAE,CAAC;IAE7B,MAAMA,KAAK;EACb;EAEA,IAAI,OAAOgB,eAAe,KAAK,QAAQ,EAAE;IACvC1B,WAAW,GAAG6B,eAAe,CAAClB,WAAW,EAAEe,eAAe,CAAC;IAE3D,IAAI,CAAC1B,WAAW,EAAE;MAChB,MAAMU,KAAK,GAAG,IAAIkB,KAAK,CAAC,eAAe,GAAGF,eAAe,GAAG,aAAa,CAAC;MAC1EL,kBAAkB,CAACX,KAAK,EAAE,EAAE,CAAC;MAE7B,MAAMA,KAAK;IACb;EACF;;EAEA;EACA;EACA,IAAI;IACF,IAAI,CAACoB,KAAK,CAAC,CAAC;EACd,CAAC,CAAC,OAAOpB,KAAK,EAAE;IACdW,kBAAkB,CAACX,KAAK,EAAE,EAAE,CAAC;IAE7B,MAAMA,KAAK;EACb;;EAEA;EACA,MAAM;IAAEK;EAAS,CAAC,GAAG,MAAM5B,iBAAiB,CAAC,IAAI,EAAEwB,WAAW,EAAEX,WAAW,CAAC;EAE5E,OAAO;IAAEe;EAAS,CAAC;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3B,UAAU,CAACS,SAAS,CAACkC,OAAO,GAAG,eAAeA,OAAOA,CAAC1C,OAAO,EAAE;EAE7DA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvB,IAAIsB,WAAW,GAAG,IAAI,CAACgB,YAAY;IAC/BjB,KAAK;IAAEX,GAAG;EAEd,IAAI;IACF,IAAI,CAACY,WAAW,EAAE;MAChB,MAAM,IAAIiB,KAAK,CAAC,uBAAuB,CAAC;IAC1C;;IAEA;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACIjB,WAAW,GAAG,IAAI,CAACJ,KAAK,CAAC,eAAe,EAAE;MACxCI;IACF,CAAC,CAAC,IAAIA,WAAW;IAEjB,MAAMa,MAAM,GAAG,MAAM,IAAI,CAACjC,OAAO,CAACyC,KAAK,CAACrB,WAAW,EAAEtB,OAAO,CAAC;IAC7DU,GAAG,GAAGyB,MAAM,CAACzB,GAAG;IAEhBA,GAAG,GAAG,IAAI,CAACQ,KAAK,CAAC,oBAAoB,EAAE;MACrCR;IACF,CAAC,CAAC,IAAIA,GAAG;EACX,CAAC,CAAC,OAAOqB,GAAG,EAAE;IACZV,KAAK,GAAGU,GAAG;EACb;EAEA,MAAMI,MAAM,GAAGd,KAAK,GAAG;IAAEA;EAAM,CAAC,GAAG;IAAEX;EAAI,CAAC;;EAE1C;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACQ,KAAK,CAAC,cAAc,EAAEiB,MAAM,CAAC;EAElC,IAAId,KAAK,EAAE;IACT,MAAMA,KAAK;EACb;EAEA,OAAOc,MAAM;AACf,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApC,UAAU,CAACS,SAAS,CAACoC,OAAO,GAAG,eAAeA,OAAOA,CAAA,EAAG;EACtD,IAAI,CAAC1B,KAAK,CAAC,eAAe,CAAC;EAE3B,IAAI2B,GAAG,EAAEd,GAAG;EAEZ,IAAI;IACF,MAAMe,MAAM,GAAG,IAAI,CAAC/B,GAAG,CAAC,QAAQ,CAAC;IAEjC,MAAMgC,WAAW,GAAGD,MAAM,CAACE,cAAc,CAAC,CAAC;MACrCC,QAAQ,GAAG1D,QAAQ,CAAC,eAAe,EAAEuD,MAAM,CAACI,IAAI,CAAC;IAEvD,MAAMC,QAAQ,GAAGzD,QAAQ,CAACqD,WAAW,CAAC;MAChCK,IAAI,GAAGH,QAAQ,GAAG,QAAQ,GAAGvD,QAAQ,CAACuD,QAAQ,CAAC,GAAG,SAAS,GAAG,EAAE;IAEtE,MAAMI,IAAI,GAAGN,WAAW,CAACO,OAAO,CAAC,CAAC;IAElCT,GAAG,GACD,0CAA0C,GAC1C,kDAAkD,GAClD,sGAAsG,GACtG,qFAAqF,GACrF,SAAS,GAAGQ,IAAI,CAACE,KAAK,GAAG,YAAY,GAAGF,IAAI,CAACG,MAAM,GAAG,IAAI,GAC1D,WAAW,GAAGH,IAAI,CAACI,CAAC,GAAG,GAAG,GAAGJ,IAAI,CAACK,CAAC,GAAG,GAAG,GAAGL,IAAI,CAACE,KAAK,GAAG,GAAG,GAAGF,IAAI,CAACG,MAAM,GAAG,kBAAkB,GAC/FJ,IAAI,GAAGD,QAAQ,GACf,QAAQ;EACZ,CAAC,CAAC,OAAOQ,CAAC,EAAE;IACV5B,GAAG,GAAG4B,CAAC;EACT;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACzC,KAAK,CAAC,cAAc,EAAE;IACzBG,KAAK,EAAEU,GAAG;IACVc,GAAG,EAAEA;EACP,CAAC,CAAC;EAEF,IAAId,GAAG,EAAE;IACP,MAAMA,GAAG;EACX;EAEA,OAAO;IAAEc;EAAI,CAAC;AAChB,CAAC;AAED9C,UAAU,CAACS,SAAS,CAAC0B,eAAe,GAAG,UAASZ,WAAW,EAAE;EAC3D,IAAI,CAACgB,YAAY,GAAGhB,WAAW;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAvB,UAAU,CAACS,SAAS,CAACoD,UAAU,GAAG,YAAW;EAC3C,OAAO,IAAI,CAACC,QAAQ;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA9D,UAAU,CAACS,SAAS,CAACiC,KAAK,GAAG,YAAW;EACtC,IAAI,CAAC,IAAI,CAACqB,cAAc,CAAC,CAAC,EAAE;IAE1B;IACA;EACF;;EAEA;EACAnE,OAAO,CAACa,SAAS,CAACiC,KAAK,CAACsB,IAAI,CAAC,IAAI,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACAhE,UAAU,CAACS,SAAS,CAACwD,OAAO,GAAG,YAAW;EAExC;EACArE,OAAO,CAACa,SAAS,CAACwD,OAAO,CAACD,IAAI,CAAC,IAAI,CAAC;;EAEpC;EACAtE,SAAS,CAAC,IAAI,CAACW,UAAU,CAAC;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,UAAU,CAACS,SAAS,CAACyD,EAAE,GAAG,UAASC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EACnE,OAAO,IAAI,CAACtD,GAAG,CAAC,UAAU,CAAC,CAACkD,EAAE,CAACC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,CAAC;AAClE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAtE,UAAU,CAACS,SAAS,CAAC8D,GAAG,GAAG,UAASJ,MAAM,EAAEE,QAAQ,EAAE;EACpD,IAAI,CAACrD,GAAG,CAAC,UAAU,CAAC,CAACuD,GAAG,CAACJ,MAAM,EAAEE,QAAQ,CAAC;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACArE,UAAU,CAACS,SAAS,CAAC+D,QAAQ,GAAG,UAASC,UAAU,EAAE;EAEnD,IAAI,CAACA,UAAU,EAAE;IACf,MAAM,IAAIjC,KAAK,CAAC,qBAAqB,CAAC;EACxC;;EAEA;EACA;EACA,IAAI,CAACkC,MAAM,CAAC,CAAC;;EAEb;EACA,IAAID,UAAU,CAACzD,GAAG,IAAIyD,UAAU,CAACE,WAAW,CAAClE,SAAS,CAACmE,MAAM,EAAE;IAC7DH,UAAU,GAAGA,UAAU,CAACzD,GAAG,CAAC,CAAC,CAAC;EAChC;EAEA,IAAI,OAAOyD,UAAU,KAAK,QAAQ,EAAE;IAClCA,UAAU,GAAGjF,QAAQ,CAACiF,UAAU,CAAC;EACnC;EAEAA,UAAU,CAACI,WAAW,CAAC,IAAI,CAACxE,UAAU,CAAC;EAEvC,IAAI,CAACc,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;EAExB,IAAI,CAACH,GAAG,CAAC,QAAQ,CAAC,CAAC8D,OAAO,CAAC,CAAC;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA9E,UAAU,CAACS,SAAS,CAACsD,cAAc,GAAG,YAAW;EAC/C,OAAO,IAAI,CAACxB,YAAY;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAvC,UAAU,CAACS,SAAS,CAACiE,MAAM,GAAG,YAAW;EAEvC,MAAMK,SAAS,GAAG,IAAI,CAAC1E,UAAU;IAC3BoE,UAAU,GAAGM,SAAS,CAACN,UAAU;EAEvC,IAAI,CAACA,UAAU,EAAE;IACf;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACtD,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;EAExBsD,UAAU,CAACO,WAAW,CAACD,SAAS,CAAC;AACnC,CAAC;AAED/E,UAAU,CAACS,SAAS,CAACF,KAAK,GAAG,UAASwE,SAAS,EAAEE,MAAM,EAAEhF,OAAO,EAAE;EAEhE,MAAMiF,WAAW,GAAGjF,OAAO,CAACkF,OAAO,IAAI,IAAI,CAACtB,UAAU,CAAC5D,OAAO,CAAC;IACzDmF,iBAAiB,GAAGnF,OAAO,CAACmF,iBAAiB,IAAI,EAAE;IACnDC,aAAa,GAAG,CACd;MACEC,MAAM,EAAE,CAAE,OAAO,EAAE,IAAI,CAAE;MACzBL,MAAM,EAAE,CAAE,OAAO,EAAEA,MAAM;IAC3B,CAAC,CACF;EAEP,MAAMM,cAAc,GAAG,EAAE,CAAC1D,MAAM,CAACwD,aAAa,EAAEH,WAAW,EAAEE,iBAAiB,CAAC;EAE/E,MAAMI,cAAc,GAAGvG,MAAM,CAACG,IAAI,CAACa,OAAO,EAAE,CAAE,mBAAmB,CAAE,CAAC,EAAE;IACpE8C,MAAM,EAAE9D,MAAM,CAAC,CAAC,CAAC,EAAEgB,OAAO,CAAC8C,MAAM,EAAE;MAAEgC,SAAS,EAAEA;IAAU,CAAC,CAAC;IAC5DI,OAAO,EAAEI;EACX,CAAC,CAAC;;EAEF;EACA3F,OAAO,CAACoE,IAAI,CAAC,IAAI,EAAEwB,cAAc,CAAC;EAElC,IAAIvF,OAAO,IAAIA,OAAO,CAAC8E,SAAS,EAAE;IAChC,IAAI,CAACP,QAAQ,CAACvE,OAAO,CAAC8E,SAAS,CAAC;EAClC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/E,UAAU,CAACS,SAAS,CAACU,KAAK,GAAG,UAASsE,IAAI,EAAEC,KAAK,EAAE;EACjD,OAAO,IAAI,CAAC1E,GAAG,CAAC,UAAU,CAAC,CAAC2E,IAAI,CAACF,IAAI,EAAEC,KAAK,CAAC;AAC/C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA1F,UAAU,CAACS,SAAS,CAACH,gBAAgB,GAAG,UAASL,OAAO,EAAE;EAExD,MAAM8E,SAAS,GAAG1F,MAAM,CAAC,mCAAmC,CAAC;EAE7DC,WAAW,CAACyF,SAAS,EAAE;IACrBvB,KAAK,EAAEoC,UAAU,CAAC3F,OAAO,CAACuD,KAAK,CAAC;IAChCC,MAAM,EAAEmC,UAAU,CAAC3F,OAAO,CAACwD,MAAM,CAAC;IAClCoC,QAAQ,EAAE5F,OAAO,CAAC4F;EACpB,CAAC,CAAC;EAEF,OAAOd,SAAS;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA/E,UAAU,CAACS,SAAS,CAACL,aAAa,GAAG,UAASH,OAAO,EAAE;EACrD,MAAM6F,aAAa,GAAG7G,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC8G,iBAAiB,EAAE9F,OAAO,CAAC+F,gBAAgB,CAAC;EAElF,OAAO,IAAInG,UAAU,CAACiG,aAAa,CAAC;AACtC,CAAC;AAED9F,UAAU,CAACS,SAAS,CAACqD,QAAQ,GAAG,EAAE;;AAElC;;AAEA,SAAS7B,kBAAkBA,CAACD,GAAG,EAAEiE,WAAW,EAAE;EAC5CjE,GAAG,CAACL,QAAQ,GAAGsE,WAAW;EAC1B,OAAOjE,GAAG;AACZ;AAEA,SAASE,oBAAoBA,CAACF,GAAG,EAAE;EAEjC;EACA;;EAEA,MAAMkE,OAAO,GAAG,iDAAiD;EACjE,MAAMC,KAAK,GAAGD,OAAO,CAACE,IAAI,CAACpE,GAAG,CAACqE,OAAO,CAAC;EAEvC,IAAIF,KAAK,EAAE;IACTnE,GAAG,CAACqE,OAAO,GACT,sBAAsB,GAAGF,KAAK,CAAC,CAAC,CAAC,GAAG,cAAc,GAClD,oDAAoD,GAAGA,KAAK,CAAC,CAAC,CAAC;EACnE;EAEA,OAAOnE,GAAG;AACZ;AAEA,MAAM9B,eAAe,GAAG;EACtBsD,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE,MAAM;EACdoC,QAAQ,EAAE;AACZ,CAAC;;AAGD;AACA;AACA;AACA,SAASD,UAAUA,CAACU,GAAG,EAAE;EACvB,OAAOA,GAAG,IAAInH,QAAQ,CAACmH,GAAG,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;AAC1C;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS7D,eAAeA,CAAClB,WAAW,EAAEgF,SAAS,EAAE;EAC/C,IAAI,CAACA,SAAS,EAAE;IACd,OAAO,IAAI;EACb;EAEA,OAAOrH,IAAI,CAACqC,WAAW,CAACiF,QAAQ,EAAE,UAASC,OAAO,EAAE;IAClD,OAAOA,OAAO,CAACC,EAAE,KAAKH,SAAS;EACjC,CAAC,CAAC,IAAI,IAAI;AACZ;;AAGA;;AAEA,SACElE,IAAI,IAAIsE,aAAa,EACrBC,UAAU,EACVC,WAAW,EACXC,WAAW,QACN,sBAAsB;AAE7B,SACEpB,KAAK,IAAIqB,QAAQ,QACZ,SAAS;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASvG,cAAcA,CAACuE,SAAS,EAAE;EACjC,MAAMiC,GAAG,GAAGJ,UAAU;EAEtB,MAAMK,UAAU,GACd,2BAA2B,GAC3B,kBAAkB,GAClB,yBAAyB,GACzB,6BAA6B,GAC7B,GAAG,GACHD,GAAG,GACH,MAAM;EAER,MAAME,WAAW,GAAG7H,MAAM,CAAC4H,UAAU,CAAC;EAEtC3H,WAAW,CAACE,QAAQ,CAAC,KAAK,EAAE0H,WAAW,CAAC,EAAEL,WAAW,CAAC;EACtDvH,WAAW,CAAC4H,WAAW,EAAEJ,WAAW,EAAE;IACpCjB,QAAQ,EAAE,UAAU;IACpBsB,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE;EACV,CAAC,CAAC;EAEFtC,SAAS,CAACF,WAAW,CAACqC,WAAW,CAAC;EAElCH,QAAQ,CAACO,IAAI,CAACJ,WAAW,EAAE,OAAO,EAAE,UAASxB,KAAK,EAAE;IAClDiB,aAAa,CAAC,CAAC;IAEfjB,KAAK,CAAC6B,cAAc,CAAC,CAAC;EACxB,CAAC,CAAC;AACJ;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}