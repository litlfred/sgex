{"ast":null,"code":"/**\n * WHO Digital Library Service\n * \n * Service for interacting with the WHO digital library (iris.who.int)\n * which uses DSpace software with Dublin Core metadata standards.\n */class WHODigitalLibraryService{constructor(){// Use proxy in development, direct API in production\nthis.isDevelopment=process.env.NODE_ENV==='development';this.baseUrl=this.isDevelopment?'/api/who':'https://iris.who.int';this.restApi=\"\".concat(this.baseUrl,\"/rest\");this.searchEndpoint=\"\".concat(this.restApi,\"/discover/search/objects\");this.originalBaseUrl='https://iris.who.int';// For constructing public URLs\n}/**\n   * Search the WHO digital library\n   * @param {string} query - Search query string\n   * @param {number} page - Page number (default: 0)\n   * @param {number} size - Number of results per page (default: 20)\n   * @param {string} sort - Sort field (default: 'dc.title')\n   * @param {string} order - Sort order 'asc' or 'desc' (default: 'asc')\n   * @returns {Promise<Object>} Search results with metadata\n   */async search(query){let page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;let size=arguments.length>2&&arguments[2]!==undefined?arguments[2]:20;let sort=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'dc.title';let order=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'asc';try{const params=new URLSearchParams({query:query,page:page.toString(),size:size.toString(),sort:\"\".concat(sort,\",\").concat(order)});const url=\"\".concat(this.searchEndpoint,\"?\").concat(params);const response=await fetch(url,{method:'GET',headers:{'Accept':'application/json','Content-Type':'application/json','User-Agent':'SGEX-Workbench/1.0 (WHO Digital Library Integration)','Cache-Control':'no-cache'}});if(!response.ok){// Handle specific HTTP status codes\nif(response.status===403){// WHO Digital Library API access is restricted - provide fallback with clear explanation\nconsole.warn('WHO Digital Library API returned 403 - using demonstration data');return this.getMockSearchResults(query,page,size);}else if(response.status===500){// WHO Digital Library API server error - provide fallback with clear explanation\nconsole.warn('WHO Digital Library API returned 500 - using demonstration data');return this.getMockSearchResults(query,page,size);}else if(response.status===429){throw new Error(\"Rate limit exceeded (HTTP 429): Too many requests to the WHO Digital Library API. Please wait a moment before searching again.\");}else if(response.status===404){throw new Error(\"Service not found (HTTP 404): The WHO Digital Library API endpoint may have changed. Please check for updates.\");}else{throw new Error(\"HTTP error! status: \".concat(response.status,\" - Unable to access WHO Digital Library API\"));}}const data=await response.json();return this.processSearchResults(data);}catch(error){console.error('Error searching WHO digital library:',error);// Check if this is a CORS-related error\nif(error.message==='Failed to fetch'||error.name==='TypeError'){if(this.isDevelopment){// In development, provide mock data with explanation\nconsole.warn('Network error accessing WHO API, providing demonstration data');return this.getMockSearchResults(query,page,size);}else{throw new Error('Unable to access WHO Digital Library. This may be due to network restrictions or the service being temporarily unavailable.');}}// If we caught a 403 or 500 error and returned mock data, don't throw here\nif(error.message.includes('Access denied (HTTP 403)')||error.message.includes('Server error (HTTP 500)')||error.message.includes('demonstration data')){return this.getMockSearchResults(query,page,size);}throw new Error(\"Failed to search WHO digital library: \".concat(error.message));}}/**\n   * Get detailed metadata for a specific item\n   * @param {string} uuid - Item UUID\n   * @returns {Promise<Object>} Item metadata\n   */async getItemMetadata(uuid){try{const url=\"\".concat(this.restApi,\"/core/items/\").concat(uuid);const response=await fetch(url,{method:'GET',headers:{'Accept':'application/json','User-Agent':'SGEX-Workbench/1.0 (WHO Digital Library Integration)','Cache-Control':'no-cache'}});if(!response.ok){// Handle specific HTTP status codes  \nif(response.status===403){throw new Error(\"Access denied (HTTP 403): Unable to fetch item metadata due to API access restrictions.\");}else if(response.status===404){throw new Error(\"Item not found (HTTP 404): The requested item may have been removed or the identifier is invalid.\");}else{throw new Error(\"HTTP error! status: \".concat(response.status));}}const data=await response.json();return this.processDublinCoreMetadata(data);}catch(error){console.error('Error fetching item metadata:',error);throw new Error(\"Failed to fetch item metadata: \".concat(error.message));}}/**\n   * Process search results and extract relevant information\n   * @param {Object} rawData - Raw API response\n   * @returns {Object} Processed search results\n   */processSearchResults(rawData){var _searchResult$_embedd,_searchResult$page,_searchResult$page2,_searchResult$page3,_searchResult$page4;if(!rawData||!rawData._embedded||!rawData._embedded.searchResult){return{items:[],totalElements:0,totalPages:0,currentPage:0,size:0};}const searchResult=rawData._embedded.searchResult;const items=(((_searchResult$_embedd=searchResult._embedded)===null||_searchResult$_embedd===void 0?void 0:_searchResult$_embedd.objects)||[]).map(item=>{var _item$_embedded;return this.processDublinCoreMetadata(((_item$_embedded=item._embedded)===null||_item$_embedded===void 0?void 0:_item$_embedded.indexableObject)||item);});return{items,totalElements:((_searchResult$page=searchResult.page)===null||_searchResult$page===void 0?void 0:_searchResult$page.totalElements)||0,totalPages:((_searchResult$page2=searchResult.page)===null||_searchResult$page2===void 0?void 0:_searchResult$page2.totalPages)||0,currentPage:((_searchResult$page3=searchResult.page)===null||_searchResult$page3===void 0?void 0:_searchResult$page3.number)||0,size:((_searchResult$page4=searchResult.page)===null||_searchResult$page4===void 0?void 0:_searchResult$page4.size)||0};}/**\n   * Process Dublin Core metadata into a standardized format\n   * @param {Object} item - Raw item data\n   * @returns {Object} Processed item with Dublin Core metadata\n   */processDublinCoreMetadata(item){if(!item||!item.metadata){return null;}const metadata=item.metadata;// Helper function to extract metadata values\nconst getMetadataValue=field=>{const fieldData=metadata[field];if(!fieldData||!Array.isArray(fieldData))return null;if(fieldData.length===0)return null;if(fieldData.length===1)return fieldData[0].value;return fieldData.map(item=>item.value);};// Extract Dublin Core fields\nconst processed={id:item.uuid||item.id,handle:item.handle,// Dublin Core Title\ntitle:getMetadataValue('dc.title')||'Untitled',// Dublin Core Creator (Author)\ncreator:getMetadataValue('dc.creator'),author:getMetadataValue('dc.contributor.author'),// Dublin Core Subject\nsubject:getMetadataValue('dc.subject'),keywords:getMetadataValue('dc.subject.keyword'),// Dublin Core Description\ndescription:getMetadataValue('dc.description'),abstract:getMetadataValue('dc.description.abstract'),// Dublin Core Publisher\npublisher:getMetadataValue('dc.publisher')||'World Health Organization',// Dublin Core Date\ndate:getMetadataValue('dc.date'),dateIssued:getMetadataValue('dc.date.issued'),dateCreated:getMetadataValue('dc.date.created'),// Dublin Core Type\ntype:getMetadataValue('dc.type'),// Dublin Core Format\nformat:getMetadataValue('dc.format'),// Dublin Core Identifier\nidentifier:getMetadataValue('dc.identifier'),doi:getMetadataValue('dc.identifier.doi'),isbn:getMetadataValue('dc.identifier.isbn'),uri:getMetadataValue('dc.identifier.uri'),// Dublin Core Source\nsource:getMetadataValue('dc.source'),// Dublin Core Language\nlanguage:getMetadataValue('dc.language')||getMetadataValue('dc.language.iso'),// Dublin Core Relation\nrelation:getMetadataValue('dc.relation'),// Dublin Core Coverage\ncoverage:getMetadataValue('dc.coverage'),// Dublin Core Rights\nrights:getMetadataValue('dc.rights'),// Additional WHO-specific fields\nwhoRegion:getMetadataValue('who.region'),whoTopic:getMetadataValue('who.topic'),whoDocumentType:getMetadataValue('who.document.type'),// URLs\nurl:this.constructItemUrl(item.handle),downloadUrl:this.constructDownloadUrl(item.uuid),// Raw metadata for advanced use cases\nrawMetadata:metadata};return processed;}/**\n   * Construct URL for viewing item in WHO digital library\n   * @param {string} handle - Item handle\n   * @returns {string} Item URL\n   */constructItemUrl(handle){if(!handle)return null;// Always use the original WHO URL for public links, not the proxy\nreturn\"\".concat(this.originalBaseUrl,\"/handle/\").concat(handle);}/**\n   * Construct download URL for item\n   * @param {string} uuid - Item UUID\n   * @returns {string} Download URL\n   */constructDownloadUrl(uuid){if(!uuid)return null;return\"\".concat(this.restApi,\"/core/bitstreams/search/findByItem?uuid=\").concat(uuid);}/**\n   * Search suggestions for autocomplete\n   * @param {string} query - Partial query string\n   * @returns {Promise<Array>} Array of suggestion strings\n   */async getSuggestions(query){if(!query||query.length<2){return[];}try{// Use a smaller search to get suggestions\nconst results=await this.search(query,0,10);// Extract unique titles and subjects for suggestions\nconst suggestions=new Set();results.items.forEach(item=>{if(item.title){suggestions.add(item.title);}if(item.subject){if(Array.isArray(item.subject)){item.subject.forEach(s=>suggestions.add(s));}else{suggestions.add(item.subject);}}});return Array.from(suggestions).slice(0,10);}catch(error){console.error('Error getting suggestions:',error);return[];}}/**\n   * Get popular/featured items from WHO digital library\n   * @param {number} limit - Number of items to return\n   * @returns {Promise<Array>} Array of popular items\n   */async getFeaturedItems(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;try{// Search for recent or popular items\n// This could be enhanced based on WHO's specific API capabilities\nconst results=await this.search('*',0,limit,'dc.date.issued','desc');return results.items;}catch(error){console.error('Error fetching featured items:',error);// Return sample/mock data for API errors that prevent access\nif(error.message.includes('CORS policy')||error.message.includes('Failed to fetch')||error.message.includes('Server error (HTTP 500)')||error.message.includes('Access denied (HTTP 403)')){console.warn('Using mock featured items due to API access issues');return this.getMockFeaturedItems();}return[];}}/**\n   * Get mock featured items as fallback when API is not accessible\n   * @returns {Array} Array of mock items with proper structure\n   */getMockFeaturedItems(){return[{id:'featured-demo-1',title:'World Health Report 2023: Building Health Systems for Equity',creator:'World Health Organization',dateIssued:'2023',type:'Annual Report',abstract:'The World Health Report 2023 examines health equity and sustainable development, with a focus on strengthening health systems to achieve universal health coverage.',subject:['Health Systems','Equity','Universal Health Coverage'],url:'https://iris.who.int/browse',rawMetadata:{}},{id:'featured-demo-2',title:'Global Health Observatory: Health SDG Monitor 2023',creator:'World Health Organization',dateIssued:'2023',type:'Statistical Report',abstract:'Comprehensive monitoring of health-related Sustainable Development Goals (SDGs) with global, regional, and country-level data and analysis.',subject:['SDGs','Global Health','Statistics','Monitoring'],url:'https://iris.who.int/browse',rawMetadata:{}},{id:'featured-demo-3',title:'WHO Guidelines for Indoor Air Quality: Selected Pollutants',creator:'World Health Organization',dateIssued:'2023',type:'Health Guidelines',abstract:'Evidence-based guidelines for indoor air quality standards, covering key pollutants and their health impacts, with recommendations for policy makers.',subject:['Air Quality','Environmental Health','Guidelines'],url:'https://iris.who.int/browse',rawMetadata:{}},{id:'featured-demo-4',title:'Mental Health Atlas 2023',creator:'World Health Organization',dateIssued:'2023',type:'Atlas',abstract:'Global overview of mental health resources, services, and policies across WHO Member States, highlighting progress and gaps in mental health systems.',subject:['Mental Health','Health Systems','Global Atlas'],url:'https://iris.who.int/browse',rawMetadata:{}},{id:'featured-demo-5',title:'Immunization Agenda 2030: A Global Strategy',creator:'World Health Organization',dateIssued:'2023',type:'Strategy Document',abstract:'Comprehensive strategy for achieving immunization goals by 2030, including approaches for reaching zero-dose children and strengthening immunization systems.',subject:['Immunization','Vaccination','Global Strategy'],url:'https://iris.who.int/browse',rawMetadata:{}}];}/**\n   * Get mock search results as fallback when API returns 403 or other errors\n   * @param {string} query - Search query\n   * @param {number} page - Page number  \n   * @param {number} size - Page size\n   * @returns {Object} Mock search results structure\n   */getMockSearchResults(query){let page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;let size=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10;// Generate more realistic mock results based on the search query\nconst baseResults=this.generateRelevantMockResults(query);return{items:baseResults.slice(page*size,(page+1)*size),totalElements:baseResults.length,totalPages:Math.ceil(baseResults.length/size),currentPage:page,size:size,isDemo:true// Flag to indicate this is demonstration data\n};}/**\n   * Generate relevant mock results based on search query\n   * @param {string} query - Search query\n   * @returns {Array} Array of mock items\n   */generateRelevantMockResults(query){const lowerQuery=query.toLowerCase();// Health-related mock results database\nconst healthTopics={'hiv':[{id:'demo-hiv-1',title:'Consolidated Guidelines on HIV Prevention, Testing and Treatment, Service Delivery and Monitoring',creator:'World Health Organization',dateIssued:'2023',type:'Guidelines',abstract:'These consolidated guidelines provide updated recommendations on HIV prevention, testing, treatment, service delivery and monitoring for a public health approach.',subject:['HIV','Prevention','Treatment','Guidelines'],url:'https://iris.who.int/bitstream/handle/10665/375121/9789240073097-eng.pdf',rawMetadata:{}},{id:'demo-hiv-2',title:'HIV Strategic Information for Impact: Cascade Data Use Manual',creator:'World Health Organization',dateIssued:'2022',type:'Technical Manual',abstract:'This manual provides guidance on using HIV cascade data to inform program planning, implementation, and monitoring.',subject:['HIV','Data Analysis','Program Management'],url:'https://iris.who.int/handle/10665/354462',rawMetadata:{}}],'covid':[{id:'demo-covid-1',title:'COVID-19 Clinical Management: Living Guidance',creator:'World Health Organization',dateIssued:'2023',type:'Clinical Guidelines',abstract:'This living guidance provides evidence-based recommendations for the clinical management of COVID-19 in adults, children and adolescents.',subject:['COVID-19','Clinical Management','Treatment'],url:'https://iris.who.int/handle/10665/368745',rawMetadata:{}},{id:'demo-covid-2',title:'WHO Coronavirus (COVID-19) Dashboard',creator:'World Health Organization',dateIssued:'2023',type:'Data Resource',abstract:'Real-time data and insights on the COVID-19 pandemic, including case numbers, vaccination rates, and epidemiological trends.',subject:['COVID-19','Epidemiology','Surveillance'],url:'https://iris.who.int/handle/10665/361234',rawMetadata:{}}],'malaria':[{id:'demo-malaria-1',title:'World Malaria Report 2023',creator:'World Health Organization',dateIssued:'2023',type:'Annual Report',abstract:'The World Malaria Report 2023 provides a comprehensive update on global progress towards malaria elimination goals.',subject:['Malaria','Global Health','Elimination'],url:'https://iris.who.int/handle/10665/374472',rawMetadata:{}}],'tuberculosis':[{id:'demo-tb-1',title:'WHO Consolidated Guidelines on Tuberculosis: Module 4: Treatment',creator:'World Health Organization',dateIssued:'2022',type:'Treatment Guidelines',abstract:'Updated recommendations for the treatment of drug-susceptible and drug-resistant tuberculosis in adults and children.',subject:['Tuberculosis','Treatment','Drug Resistance'],url:'https://iris.who.int/handle/10665/352984',rawMetadata:{}}],'mental':[{id:'demo-mental-1',title:'Mental Health and Climate Change: Policy Brief',creator:'World Health Organization',dateIssued:'2023',type:'Policy Brief',abstract:'This policy brief outlines the mental health impacts of climate change and provides recommendations for health systems.',subject:['Mental Health','Climate Change','Health Policy'],url:'https://iris.who.int/handle/10665/366756',rawMetadata:{}}],'nutrition':[{id:'demo-nutrition-1',title:'Guideline: Sugars Intake for Adults and Children',creator:'World Health Organization',dateIssued:'2023',type:'Nutrition Guideline',abstract:'WHO recommendations on free sugars intake for adults and children to reduce risk of noncommunicable diseases.',subject:['Nutrition','Sugar','NCDs','Prevention'],url:'https://iris.who.int/handle/10665/149782',rawMetadata:{}}]};// Find relevant results based on query\nlet results=[];// Check for specific health topics\nfor(const[topic,items]of Object.entries(healthTopics)){if(lowerQuery.includes(topic)||lowerQuery.includes(topic.slice(0,-1))){results.push(...items);}}// If no specific matches, provide general WHO publications\nif(results.length===0){results=[{id:'demo-general-1',title:\"Global Health Observatory Data on \".concat(query),creator:'World Health Organization',dateIssued:'2023',type:'Data Repository',abstract:\"Global health statistics and data related to \".concat(query,\". This demonstration result shows how WHO publications would appear in search results.\"),subject:[query,'Global Health','Statistics'],url:'https://iris.who.int/browse',rawMetadata:{}},{id:'demo-general-2',title:\"WHO Technical Report: \".concat(query,\" Analysis\"),creator:'World Health Organization',dateIssued:'2022',type:'Technical Report',abstract:\"Technical analysis and recommendations related to \".concat(query,\". This is demonstration content showing the WHO Digital Library integration.\"),subject:[query,'Technical Analysis','WHO Publications'],url:'https://iris.who.int/browse',rawMetadata:{}},{id:'demo-general-3',title:\"Policy Brief: \".concat(query,\" and Global Health\"),creator:'World Health Organization',dateIssued:'2023',type:'Policy Brief',abstract:\"Policy recommendations and guidance on \".concat(query,\" for health systems and policymakers.\"),subject:[query,'Policy','Health Systems'],url:'https://iris.who.int/browse',rawMetadata:{}}];}return results;}/**\n   * Format citation for a reference item\n   * @param {Object} item - Processed item metadata\n   * @param {string} style - Citation style ('apa', 'chicago', 'vancouver')\n   * @returns {string} Formatted citation\n   */formatCitation(item){let style=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'apa';if(!item)return'';const title=item.title||'Untitled';const author=item.creator||item.author||'World Health Organization';const date=item.dateIssued||item.date||'n.d.';const publisher=item.publisher||'World Health Organization';const url=item.url;switch(style.toLowerCase()){case'apa':return\"\".concat(author,\". (\").concat(date,\"). \").concat(title,\". \").concat(publisher,\". \").concat(url);case'chicago':return\"\".concat(author,\". \\\"\").concat(title,\".\\\" \").concat(publisher,\", \").concat(date,\". \").concat(url,\".\");case'vancouver':return\"\".concat(author,\". \").concat(title,\". \").concat(publisher,\"; \").concat(date,\". Available from: \").concat(url);default:return\"\".concat(author,\". \").concat(title,\". \").concat(publisher,\", \").concat(date,\". Available from: \").concat(url);}}}// Create singleton instance\nconst whoDigitalLibraryService=new WHODigitalLibraryService();export default whoDigitalLibraryService;","map":{"version":3,"names":["WHODigitalLibraryService","constructor","isDevelopment","process","env","NODE_ENV","baseUrl","restApi","concat","searchEndpoint","originalBaseUrl","search","query","page","arguments","length","undefined","size","sort","order","params","URLSearchParams","toString","url","response","fetch","method","headers","ok","status","console","warn","getMockSearchResults","Error","data","json","processSearchResults","error","message","name","includes","getItemMetadata","uuid","processDublinCoreMetadata","rawData","_searchResult$_embedd","_searchResult$page","_searchResult$page2","_searchResult$page3","_searchResult$page4","_embedded","searchResult","items","totalElements","totalPages","currentPage","objects","map","item","_item$_embedded","indexableObject","number","metadata","getMetadataValue","field","fieldData","Array","isArray","value","processed","id","handle","title","creator","author","subject","keywords","description","abstract","publisher","date","dateIssued","dateCreated","type","format","identifier","doi","isbn","uri","source","language","relation","coverage","rights","whoRegion","whoTopic","whoDocumentType","constructItemUrl","downloadUrl","constructDownloadUrl","rawMetadata","getSuggestions","results","suggestions","Set","forEach","add","s","from","slice","getFeaturedItems","limit","getMockFeaturedItems","baseResults","generateRelevantMockResults","Math","ceil","isDemo","lowerQuery","toLowerCase","healthTopics","topic","Object","entries","push","formatCitation","style","whoDigitalLibraryService"],"sources":["/home/runner/work/sgex/sgex/src/services/whoDigitalLibraryService.js"],"sourcesContent":["/**\n * WHO Digital Library Service\n * \n * Service for interacting with the WHO digital library (iris.who.int)\n * which uses DSpace software with Dublin Core metadata standards.\n */\n\nclass WHODigitalLibraryService {\n  constructor() {\n    // Use proxy in development, direct API in production\n    this.isDevelopment = process.env.NODE_ENV === 'development';\n    this.baseUrl = this.isDevelopment ? '/api/who' : 'https://iris.who.int';\n    this.restApi = `${this.baseUrl}/rest`;\n    this.searchEndpoint = `${this.restApi}/discover/search/objects`;\n    this.originalBaseUrl = 'https://iris.who.int'; // For constructing public URLs\n  }\n\n  /**\n   * Search the WHO digital library\n   * @param {string} query - Search query string\n   * @param {number} page - Page number (default: 0)\n   * @param {number} size - Number of results per page (default: 20)\n   * @param {string} sort - Sort field (default: 'dc.title')\n   * @param {string} order - Sort order 'asc' or 'desc' (default: 'asc')\n   * @returns {Promise<Object>} Search results with metadata\n   */\n  async search(query, page = 0, size = 20, sort = 'dc.title', order = 'asc') {\n    try {\n      const params = new URLSearchParams({\n        query: query,\n        page: page.toString(),\n        size: size.toString(),\n        sort: `${sort},${order}`\n      });\n\n      const url = `${this.searchEndpoint}?${params}`;\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'User-Agent': 'SGEX-Workbench/1.0 (WHO Digital Library Integration)',\n          'Cache-Control': 'no-cache'\n        }\n      });\n\n      if (!response.ok) {\n        // Handle specific HTTP status codes\n        if (response.status === 403) {\n          // WHO Digital Library API access is restricted - provide fallback with clear explanation\n          console.warn('WHO Digital Library API returned 403 - using demonstration data');\n          return this.getMockSearchResults(query, page, size);\n        } else if (response.status === 500) {\n          // WHO Digital Library API server error - provide fallback with clear explanation\n          console.warn('WHO Digital Library API returned 500 - using demonstration data');\n          return this.getMockSearchResults(query, page, size);\n        } else if (response.status === 429) {\n          throw new Error(`Rate limit exceeded (HTTP 429): Too many requests to the WHO Digital Library API. Please wait a moment before searching again.`);\n        } else if (response.status === 404) {\n          throw new Error(`Service not found (HTTP 404): The WHO Digital Library API endpoint may have changed. Please check for updates.`);\n        } else {\n          throw new Error(`HTTP error! status: ${response.status} - Unable to access WHO Digital Library API`);\n        }\n      }\n\n      const data = await response.json();\n      return this.processSearchResults(data);\n    } catch (error) {\n      console.error('Error searching WHO digital library:', error);\n      \n      // Check if this is a CORS-related error\n      if (error.message === 'Failed to fetch' || error.name === 'TypeError') {\n        if (this.isDevelopment) {\n          // In development, provide mock data with explanation\n          console.warn('Network error accessing WHO API, providing demonstration data');\n          return this.getMockSearchResults(query, page, size);\n        } else {\n          throw new Error('Unable to access WHO Digital Library. This may be due to network restrictions or the service being temporarily unavailable.');\n        }\n      }\n      \n      // If we caught a 403 or 500 error and returned mock data, don't throw here\n      if (error.message.includes('Access denied (HTTP 403)') || \n          error.message.includes('Server error (HTTP 500)') ||\n          error.message.includes('demonstration data')) {\n        return this.getMockSearchResults(query, page, size);\n      }\n      \n      throw new Error(`Failed to search WHO digital library: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get detailed metadata for a specific item\n   * @param {string} uuid - Item UUID\n   * @returns {Promise<Object>} Item metadata\n   */\n  async getItemMetadata(uuid) {\n    try {\n      const url = `${this.restApi}/core/items/${uuid}`;\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'SGEX-Workbench/1.0 (WHO Digital Library Integration)',\n          'Cache-Control': 'no-cache'\n        }\n      });\n\n      if (!response.ok) {\n        // Handle specific HTTP status codes  \n        if (response.status === 403) {\n          throw new Error(`Access denied (HTTP 403): Unable to fetch item metadata due to API access restrictions.`);\n        } else if (response.status === 404) {\n          throw new Error(`Item not found (HTTP 404): The requested item may have been removed or the identifier is invalid.`);\n        } else {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n      }\n\n      const data = await response.json();\n      return this.processDublinCoreMetadata(data);\n    } catch (error) {\n      console.error('Error fetching item metadata:', error);\n      throw new Error(`Failed to fetch item metadata: ${error.message}`);\n    }\n  }\n\n  /**\n   * Process search results and extract relevant information\n   * @param {Object} rawData - Raw API response\n   * @returns {Object} Processed search results\n   */\n  processSearchResults(rawData) {\n    if (!rawData || !rawData._embedded || !rawData._embedded.searchResult) {\n      return {\n        items: [],\n        totalElements: 0,\n        totalPages: 0,\n        currentPage: 0,\n        size: 0\n      };\n    }\n\n    const searchResult = rawData._embedded.searchResult;\n    const items = (searchResult._embedded?.objects || []).map(item => {\n      return this.processDublinCoreMetadata(item._embedded?.indexableObject || item);\n    });\n\n    return {\n      items,\n      totalElements: searchResult.page?.totalElements || 0,\n      totalPages: searchResult.page?.totalPages || 0,\n      currentPage: searchResult.page?.number || 0,\n      size: searchResult.page?.size || 0\n    };\n  }\n\n  /**\n   * Process Dublin Core metadata into a standardized format\n   * @param {Object} item - Raw item data\n   * @returns {Object} Processed item with Dublin Core metadata\n   */\n  processDublinCoreMetadata(item) {\n    if (!item || !item.metadata) {\n      return null;\n    }\n\n    const metadata = item.metadata;\n    \n    // Helper function to extract metadata values\n    const getMetadataValue = (field) => {\n      const fieldData = metadata[field];\n      if (!fieldData || !Array.isArray(fieldData)) return null;\n      if (fieldData.length === 0) return null;\n      if (fieldData.length === 1) return fieldData[0].value;\n      return fieldData.map(item => item.value);\n    };\n\n    // Extract Dublin Core fields\n    const processed = {\n      id: item.uuid || item.id,\n      handle: item.handle,\n      \n      // Dublin Core Title\n      title: getMetadataValue('dc.title') || 'Untitled',\n      \n      // Dublin Core Creator (Author)\n      creator: getMetadataValue('dc.creator'),\n      author: getMetadataValue('dc.contributor.author'),\n      \n      // Dublin Core Subject\n      subject: getMetadataValue('dc.subject'),\n      keywords: getMetadataValue('dc.subject.keyword'),\n      \n      // Dublin Core Description\n      description: getMetadataValue('dc.description'),\n      abstract: getMetadataValue('dc.description.abstract'),\n      \n      // Dublin Core Publisher\n      publisher: getMetadataValue('dc.publisher') || 'World Health Organization',\n      \n      // Dublin Core Date\n      date: getMetadataValue('dc.date'),\n      dateIssued: getMetadataValue('dc.date.issued'),\n      dateCreated: getMetadataValue('dc.date.created'),\n      \n      // Dublin Core Type\n      type: getMetadataValue('dc.type'),\n      \n      // Dublin Core Format\n      format: getMetadataValue('dc.format'),\n      \n      // Dublin Core Identifier\n      identifier: getMetadataValue('dc.identifier'),\n      doi: getMetadataValue('dc.identifier.doi'),\n      isbn: getMetadataValue('dc.identifier.isbn'),\n      uri: getMetadataValue('dc.identifier.uri'),\n      \n      // Dublin Core Source\n      source: getMetadataValue('dc.source'),\n      \n      // Dublin Core Language\n      language: getMetadataValue('dc.language') || getMetadataValue('dc.language.iso'),\n      \n      // Dublin Core Relation\n      relation: getMetadataValue('dc.relation'),\n      \n      // Dublin Core Coverage\n      coverage: getMetadataValue('dc.coverage'),\n      \n      // Dublin Core Rights\n      rights: getMetadataValue('dc.rights'),\n      \n      // Additional WHO-specific fields\n      whoRegion: getMetadataValue('who.region'),\n      whoTopic: getMetadataValue('who.topic'),\n      whoDocumentType: getMetadataValue('who.document.type'),\n      \n      // URLs\n      url: this.constructItemUrl(item.handle),\n      downloadUrl: this.constructDownloadUrl(item.uuid),\n      \n      // Raw metadata for advanced use cases\n      rawMetadata: metadata\n    };\n\n    return processed;\n  }\n\n  /**\n   * Construct URL for viewing item in WHO digital library\n   * @param {string} handle - Item handle\n   * @returns {string} Item URL\n   */\n  constructItemUrl(handle) {\n    if (!handle) return null;\n    // Always use the original WHO URL for public links, not the proxy\n    return `${this.originalBaseUrl}/handle/${handle}`;\n  }\n\n  /**\n   * Construct download URL for item\n   * @param {string} uuid - Item UUID\n   * @returns {string} Download URL\n   */\n  constructDownloadUrl(uuid) {\n    if (!uuid) return null;\n    return `${this.restApi}/core/bitstreams/search/findByItem?uuid=${uuid}`;\n  }\n\n  /**\n   * Search suggestions for autocomplete\n   * @param {string} query - Partial query string\n   * @returns {Promise<Array>} Array of suggestion strings\n   */\n  async getSuggestions(query) {\n    if (!query || query.length < 2) {\n      return [];\n    }\n\n    try {\n      // Use a smaller search to get suggestions\n      const results = await this.search(query, 0, 10);\n      \n      // Extract unique titles and subjects for suggestions\n      const suggestions = new Set();\n      \n      results.items.forEach(item => {\n        if (item.title) {\n          suggestions.add(item.title);\n        }\n        if (item.subject) {\n          if (Array.isArray(item.subject)) {\n            item.subject.forEach(s => suggestions.add(s));\n          } else {\n            suggestions.add(item.subject);\n          }\n        }\n      });\n\n      return Array.from(suggestions).slice(0, 10);\n    } catch (error) {\n      console.error('Error getting suggestions:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get popular/featured items from WHO digital library\n   * @param {number} limit - Number of items to return\n   * @returns {Promise<Array>} Array of popular items\n   */\n  async getFeaturedItems(limit = 10) {\n    try {\n      // Search for recent or popular items\n      // This could be enhanced based on WHO's specific API capabilities\n      const results = await this.search('*', 0, limit, 'dc.date.issued', 'desc');\n      return results.items;\n    } catch (error) {\n      console.error('Error fetching featured items:', error);\n      \n      // Return sample/mock data for API errors that prevent access\n      if (error.message.includes('CORS policy') || \n          error.message.includes('Failed to fetch') ||\n          error.message.includes('Server error (HTTP 500)') ||\n          error.message.includes('Access denied (HTTP 403)')) {\n        console.warn('Using mock featured items due to API access issues');\n        return this.getMockFeaturedItems();\n      }\n      \n      return [];\n    }\n  }\n\n  /**\n   * Get mock featured items as fallback when API is not accessible\n   * @returns {Array} Array of mock items with proper structure\n   */\n  getMockFeaturedItems() {\n    return [\n      {\n        id: 'featured-demo-1',\n        title: 'World Health Report 2023: Building Health Systems for Equity',\n        creator: 'World Health Organization',\n        dateIssued: '2023',\n        type: 'Annual Report',\n        abstract: 'The World Health Report 2023 examines health equity and sustainable development, with a focus on strengthening health systems to achieve universal health coverage.',\n        subject: ['Health Systems', 'Equity', 'Universal Health Coverage'],\n        url: 'https://iris.who.int/browse',\n        rawMetadata: {}\n      },\n      {\n        id: 'featured-demo-2', \n        title: 'Global Health Observatory: Health SDG Monitor 2023',\n        creator: 'World Health Organization',\n        dateIssued: '2023',\n        type: 'Statistical Report',\n        abstract: 'Comprehensive monitoring of health-related Sustainable Development Goals (SDGs) with global, regional, and country-level data and analysis.',\n        subject: ['SDGs', 'Global Health', 'Statistics', 'Monitoring'],\n        url: 'https://iris.who.int/browse',\n        rawMetadata: {}\n      },\n      {\n        id: 'featured-demo-3',\n        title: 'WHO Guidelines for Indoor Air Quality: Selected Pollutants',\n        creator: 'World Health Organization',\n        dateIssued: '2023',\n        type: 'Health Guidelines',\n        abstract: 'Evidence-based guidelines for indoor air quality standards, covering key pollutants and their health impacts, with recommendations for policy makers.',\n        subject: ['Air Quality', 'Environmental Health', 'Guidelines'],\n        url: 'https://iris.who.int/browse',\n        rawMetadata: {}\n      },\n      {\n        id: 'featured-demo-4',\n        title: 'Mental Health Atlas 2023',\n        creator: 'World Health Organization',\n        dateIssued: '2023',\n        type: 'Atlas',\n        abstract: 'Global overview of mental health resources, services, and policies across WHO Member States, highlighting progress and gaps in mental health systems.',\n        subject: ['Mental Health', 'Health Systems', 'Global Atlas'],\n        url: 'https://iris.who.int/browse',\n        rawMetadata: {}\n      },\n      {\n        id: 'featured-demo-5',\n        title: 'Immunization Agenda 2030: A Global Strategy',\n        creator: 'World Health Organization',\n        dateIssued: '2023',\n        type: 'Strategy Document',\n        abstract: 'Comprehensive strategy for achieving immunization goals by 2030, including approaches for reaching zero-dose children and strengthening immunization systems.',\n        subject: ['Immunization', 'Vaccination', 'Global Strategy'],\n        url: 'https://iris.who.int/browse',\n        rawMetadata: {}\n      }\n    ];\n  }\n\n  /**\n   * Get mock search results as fallback when API returns 403 or other errors\n   * @param {string} query - Search query\n   * @param {number} page - Page number  \n   * @param {number} size - Page size\n   * @returns {Object} Mock search results structure\n   */\n  getMockSearchResults(query, page = 0, size = 10) {\n    // Generate more realistic mock results based on the search query\n    const baseResults = this.generateRelevantMockResults(query);\n    \n    return {\n      items: baseResults.slice(page * size, (page + 1) * size),\n      totalElements: baseResults.length,\n      totalPages: Math.ceil(baseResults.length / size),\n      currentPage: page,\n      size: size,\n      isDemo: true // Flag to indicate this is demonstration data\n    };\n  }\n\n  /**\n   * Generate relevant mock results based on search query\n   * @param {string} query - Search query\n   * @returns {Array} Array of mock items\n   */\n  generateRelevantMockResults(query) {\n    const lowerQuery = query.toLowerCase();\n    \n    // Health-related mock results database\n    const healthTopics = {\n      'hiv': [\n        {\n          id: 'demo-hiv-1',\n          title: 'Consolidated Guidelines on HIV Prevention, Testing and Treatment, Service Delivery and Monitoring',\n          creator: 'World Health Organization',\n          dateIssued: '2023',\n          type: 'Guidelines',\n          abstract: 'These consolidated guidelines provide updated recommendations on HIV prevention, testing, treatment, service delivery and monitoring for a public health approach.',\n          subject: ['HIV', 'Prevention', 'Treatment', 'Guidelines'],\n          url: 'https://iris.who.int/bitstream/handle/10665/375121/9789240073097-eng.pdf',\n          rawMetadata: {}\n        },\n        {\n          id: 'demo-hiv-2', \n          title: 'HIV Strategic Information for Impact: Cascade Data Use Manual',\n          creator: 'World Health Organization',\n          dateIssued: '2022',\n          type: 'Technical Manual',\n          abstract: 'This manual provides guidance on using HIV cascade data to inform program planning, implementation, and monitoring.',\n          subject: ['HIV', 'Data Analysis', 'Program Management'],\n          url: 'https://iris.who.int/handle/10665/354462',\n          rawMetadata: {}\n        }\n      ],\n      'covid': [\n        {\n          id: 'demo-covid-1',\n          title: 'COVID-19 Clinical Management: Living Guidance',\n          creator: 'World Health Organization',\n          dateIssued: '2023',\n          type: 'Clinical Guidelines',\n          abstract: 'This living guidance provides evidence-based recommendations for the clinical management of COVID-19 in adults, children and adolescents.',\n          subject: ['COVID-19', 'Clinical Management', 'Treatment'],\n          url: 'https://iris.who.int/handle/10665/368745',\n          rawMetadata: {}\n        },\n        {\n          id: 'demo-covid-2',\n          title: 'WHO Coronavirus (COVID-19) Dashboard',\n          creator: 'World Health Organization',\n          dateIssued: '2023',\n          type: 'Data Resource',\n          abstract: 'Real-time data and insights on the COVID-19 pandemic, including case numbers, vaccination rates, and epidemiological trends.',\n          subject: ['COVID-19', 'Epidemiology', 'Surveillance'],\n          url: 'https://iris.who.int/handle/10665/361234',\n          rawMetadata: {}\n        }\n      ],\n      'malaria': [\n        {\n          id: 'demo-malaria-1',\n          title: 'World Malaria Report 2023',\n          creator: 'World Health Organization',\n          dateIssued: '2023',\n          type: 'Annual Report',\n          abstract: 'The World Malaria Report 2023 provides a comprehensive update on global progress towards malaria elimination goals.',\n          subject: ['Malaria', 'Global Health', 'Elimination'],\n          url: 'https://iris.who.int/handle/10665/374472',\n          rawMetadata: {}\n        }\n      ],\n      'tuberculosis': [\n        {\n          id: 'demo-tb-1',\n          title: 'WHO Consolidated Guidelines on Tuberculosis: Module 4: Treatment',\n          creator: 'World Health Organization',\n          dateIssued: '2022',\n          type: 'Treatment Guidelines',\n          abstract: 'Updated recommendations for the treatment of drug-susceptible and drug-resistant tuberculosis in adults and children.',\n          subject: ['Tuberculosis', 'Treatment', 'Drug Resistance'],\n          url: 'https://iris.who.int/handle/10665/352984',\n          rawMetadata: {}\n        }\n      ],\n      'mental': [\n        {\n          id: 'demo-mental-1',\n          title: 'Mental Health and Climate Change: Policy Brief',\n          creator: 'World Health Organization',\n          dateIssued: '2023',\n          type: 'Policy Brief',\n          abstract: 'This policy brief outlines the mental health impacts of climate change and provides recommendations for health systems.',\n          subject: ['Mental Health', 'Climate Change', 'Health Policy'],\n          url: 'https://iris.who.int/handle/10665/366756',\n          rawMetadata: {}\n        }\n      ],\n      'nutrition': [\n        {\n          id: 'demo-nutrition-1',\n          title: 'Guideline: Sugars Intake for Adults and Children',\n          creator: 'World Health Organization',\n          dateIssued: '2023',\n          type: 'Nutrition Guideline',\n          abstract: 'WHO recommendations on free sugars intake for adults and children to reduce risk of noncommunicable diseases.',\n          subject: ['Nutrition', 'Sugar', 'NCDs', 'Prevention'],\n          url: 'https://iris.who.int/handle/10665/149782',\n          rawMetadata: {}\n        }\n      ]\n    };\n\n    // Find relevant results based on query\n    let results = [];\n    \n    // Check for specific health topics\n    for (const [topic, items] of Object.entries(healthTopics)) {\n      if (lowerQuery.includes(topic) || lowerQuery.includes(topic.slice(0, -1))) {\n        results.push(...items);\n      }\n    }\n    \n    // If no specific matches, provide general WHO publications\n    if (results.length === 0) {\n      results = [\n        {\n          id: 'demo-general-1',\n          title: `Global Health Observatory Data on ${query}`,\n          creator: 'World Health Organization',\n          dateIssued: '2023',\n          type: 'Data Repository',\n          abstract: `Global health statistics and data related to ${query}. This demonstration result shows how WHO publications would appear in search results.`,\n          subject: [query, 'Global Health', 'Statistics'],\n          url: 'https://iris.who.int/browse',\n          rawMetadata: {}\n        },\n        {\n          id: 'demo-general-2',\n          title: `WHO Technical Report: ${query} Analysis`,\n          creator: 'World Health Organization',\n          dateIssued: '2022',\n          type: 'Technical Report',\n          abstract: `Technical analysis and recommendations related to ${query}. This is demonstration content showing the WHO Digital Library integration.`,\n          subject: [query, 'Technical Analysis', 'WHO Publications'],\n          url: 'https://iris.who.int/browse',\n          rawMetadata: {}\n        },\n        {\n          id: 'demo-general-3',\n          title: `Policy Brief: ${query} and Global Health`,\n          creator: 'World Health Organization',\n          dateIssued: '2023',\n          type: 'Policy Brief',\n          abstract: `Policy recommendations and guidance on ${query} for health systems and policymakers.`,\n          subject: [query, 'Policy', 'Health Systems'],\n          url: 'https://iris.who.int/browse',\n          rawMetadata: {}\n        }\n      ];\n    }\n    \n    return results;\n  }\n\n  /**\n   * Format citation for a reference item\n   * @param {Object} item - Processed item metadata\n   * @param {string} style - Citation style ('apa', 'chicago', 'vancouver')\n   * @returns {string} Formatted citation\n   */\n  formatCitation(item, style = 'apa') {\n    if (!item) return '';\n\n    const title = item.title || 'Untitled';\n    const author = item.creator || item.author || 'World Health Organization';\n    const date = item.dateIssued || item.date || 'n.d.';\n    const publisher = item.publisher || 'World Health Organization';\n    const url = item.url;\n\n    switch (style.toLowerCase()) {\n      case 'apa':\n        return `${author}. (${date}). ${title}. ${publisher}. ${url}`;\n      \n      case 'chicago':\n        return `${author}. \"${title}.\" ${publisher}, ${date}. ${url}.`;\n      \n      case 'vancouver':\n        return `${author}. ${title}. ${publisher}; ${date}. Available from: ${url}`;\n      \n      default:\n        return `${author}. ${title}. ${publisher}, ${date}. Available from: ${url}`;\n    }\n  }\n}\n\n// Create singleton instance\nconst whoDigitalLibraryService = new WHODigitalLibraryService();\n\nexport default whoDigitalLibraryService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}