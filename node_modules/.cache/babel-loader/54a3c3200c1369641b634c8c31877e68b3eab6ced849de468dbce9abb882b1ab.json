{"ast":null,"code":"import { assign } from 'min-dash';\n\n/**\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('../../../util/Types').Point} Point\n *\n * @typedef {import('../../../core/Canvas').default} Canvas\n */\n\nvar round = Math.round;\n\n/**\n * A handler that implements reversible addition of shapes.\n *\n * @param {Canvas} canvas\n */\nexport default function CreateShapeHandler(canvas) {\n  this._canvas = canvas;\n}\nCreateShapeHandler.$inject = ['canvas'];\n\n// api //////////////////////\n\n/**\n * Appends a shape to a target shape\n *\n * @param {Object} context\n * @param {Element} context.parent The parent.\n * @param {Point} context.position The position at which to create the new shape.\n * @param {number} [context.parentIndex] The optional index at which to add the\n * shape to the parent's children.\n */\nCreateShapeHandler.prototype.execute = function (context) {\n  var shape = context.shape,\n    positionOrBounds = context.position,\n    parent = context.parent,\n    parentIndex = context.parentIndex;\n  if (!parent) {\n    throw new Error('parent required');\n  }\n  if (!positionOrBounds) {\n    throw new Error('position required');\n  }\n\n  // (1) add at event center position _or_ at given bounds\n  if (positionOrBounds.width !== undefined) {\n    assign(shape, positionOrBounds);\n  } else {\n    assign(shape, {\n      x: positionOrBounds.x - round(shape.width / 2),\n      y: positionOrBounds.y - round(shape.height / 2)\n    });\n  }\n\n  // (2) add to canvas\n  this._canvas.addShape(shape, parent, parentIndex);\n  return shape;\n};\n\n/**\n * Undo append by removing the shape\n */\nCreateShapeHandler.prototype.revert = function (context) {\n  var shape = context.shape;\n\n  // (3) remove form canvas\n  this._canvas.removeShape(shape);\n  return shape;\n};","map":{"version":3,"names":["assign","round","Math","CreateShapeHandler","canvas","_canvas","$inject","prototype","execute","context","shape","positionOrBounds","position","parent","parentIndex","Error","width","undefined","x","y","height","addShape","revert","removeShape"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/modeling/cmd/CreateShapeHandler.js"],"sourcesContent":["import { assign } from 'min-dash';\n\n/**\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('../../../util/Types').Point} Point\n *\n * @typedef {import('../../../core/Canvas').default} Canvas\n */\n\nvar round = Math.round;\n\n\n/**\n * A handler that implements reversible addition of shapes.\n *\n * @param {Canvas} canvas\n */\nexport default function CreateShapeHandler(canvas) {\n  this._canvas = canvas;\n}\n\nCreateShapeHandler.$inject = [ 'canvas' ];\n\n\n// api //////////////////////\n\n\n/**\n * Appends a shape to a target shape\n *\n * @param {Object} context\n * @param {Element} context.parent The parent.\n * @param {Point} context.position The position at which to create the new shape.\n * @param {number} [context.parentIndex] The optional index at which to add the\n * shape to the parent's children.\n */\nCreateShapeHandler.prototype.execute = function(context) {\n\n  var shape = context.shape,\n      positionOrBounds = context.position,\n      parent = context.parent,\n      parentIndex = context.parentIndex;\n\n  if (!parent) {\n    throw new Error('parent required');\n  }\n\n  if (!positionOrBounds) {\n    throw new Error('position required');\n  }\n\n  // (1) add at event center position _or_ at given bounds\n  if (positionOrBounds.width !== undefined) {\n    assign(shape, positionOrBounds);\n  } else {\n    assign(shape, {\n      x: positionOrBounds.x - round(shape.width / 2),\n      y: positionOrBounds.y - round(shape.height / 2)\n    });\n  }\n\n  // (2) add to canvas\n  this._canvas.addShape(shape, parent, parentIndex);\n\n  return shape;\n};\n\n\n/**\n * Undo append by removing the shape\n */\nCreateShapeHandler.prototype.revert = function(context) {\n\n  var shape = context.shape;\n\n  // (3) remove form canvas\n  this._canvas.removeShape(shape);\n\n  return shape;\n};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,UAAU;;AAEjC;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,KAAK,GAAGC,IAAI,CAACD,KAAK;;AAGtB;AACA;AACA;AACA;AACA;AACA,eAAe,SAASE,kBAAkBA,CAACC,MAAM,EAAE;EACjD,IAAI,CAACC,OAAO,GAAGD,MAAM;AACvB;AAEAD,kBAAkB,CAACG,OAAO,GAAG,CAAE,QAAQ,CAAE;;AAGzC;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,kBAAkB,CAACI,SAAS,CAACC,OAAO,GAAG,UAASC,OAAO,EAAE;EAEvD,IAAIC,KAAK,GAAGD,OAAO,CAACC,KAAK;IACrBC,gBAAgB,GAAGF,OAAO,CAACG,QAAQ;IACnCC,MAAM,GAAGJ,OAAO,CAACI,MAAM;IACvBC,WAAW,GAAGL,OAAO,CAACK,WAAW;EAErC,IAAI,CAACD,MAAM,EAAE;IACX,MAAM,IAAIE,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA,IAAI,CAACJ,gBAAgB,EAAE;IACrB,MAAM,IAAII,KAAK,CAAC,mBAAmB,CAAC;EACtC;;EAEA;EACA,IAAIJ,gBAAgB,CAACK,KAAK,KAAKC,SAAS,EAAE;IACxCjB,MAAM,CAACU,KAAK,EAAEC,gBAAgB,CAAC;EACjC,CAAC,MAAM;IACLX,MAAM,CAACU,KAAK,EAAE;MACZQ,CAAC,EAAEP,gBAAgB,CAACO,CAAC,GAAGjB,KAAK,CAACS,KAAK,CAACM,KAAK,GAAG,CAAC,CAAC;MAC9CG,CAAC,EAAER,gBAAgB,CAACQ,CAAC,GAAGlB,KAAK,CAACS,KAAK,CAACU,MAAM,GAAG,CAAC;IAChD,CAAC,CAAC;EACJ;;EAEA;EACA,IAAI,CAACf,OAAO,CAACgB,QAAQ,CAACX,KAAK,EAAEG,MAAM,EAAEC,WAAW,CAAC;EAEjD,OAAOJ,KAAK;AACd,CAAC;;AAGD;AACA;AACA;AACAP,kBAAkB,CAACI,SAAS,CAACe,MAAM,GAAG,UAASb,OAAO,EAAE;EAEtD,IAAIC,KAAK,GAAGD,OAAO,CAACC,KAAK;;EAEzB;EACA,IAAI,CAACL,OAAO,CAACkB,WAAW,CAACb,KAAK,CAAC;EAE/B,OAAOA,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}