{"ast":null,"code":"import { domify, classes } from 'min-dom';\nimport { find } from 'min-dash';\nimport { escapeHTML } from 'diagram-js/lib/util/EscapeUtil';\nimport { getBusinessObject, is } from '../../util/ModelUtil';\nimport { getPlaneIdFromShape } from '../../util/DrilldownUtil';\n\n/**\n * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n *\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').Shape} Shape\n */\n\nvar OPEN_CLASS = 'bjs-breadcrumbs-shown';\n\n/**\n * Adds overlays that allow switching planes on collapsed subprocesses.\n *\n * @param {EventBus} eventBus\n * @param {ElementRegistry} elementRegistry\n * @param {Canvas} canvas\n */\nexport default function DrilldownBreadcrumbs(eventBus, elementRegistry, canvas) {\n  var breadcrumbs = domify('<ul class=\"bjs-breadcrumbs\"></ul>');\n  var container = canvas.getContainer();\n  var containerClasses = classes(container);\n  container.appendChild(breadcrumbs);\n  var businessObjectParents = [];\n\n  // update breadcrumbs if name or ID of the primary shape changes\n  eventBus.on('element.changed', function (event) {\n    var shape = event.element,\n      businessObject = getBusinessObject(shape);\n    var isPresent = find(businessObjectParents, function (element) {\n      return element === businessObject;\n    });\n    if (!isPresent) {\n      return;\n    }\n    updateBreadcrumbs();\n  });\n\n  /**\n   * Updates the displayed breadcrumbs. If no element is provided, only the\n   * labels are updated.\n   *\n   * @param {Element} [element]\n   */\n  function updateBreadcrumbs(element) {\n    if (element) {\n      businessObjectParents = getBusinessObjectParentChain(element);\n    }\n    var path = businessObjectParents.flatMap(function (parent) {\n      var parentPlane = canvas.findRoot(getPlaneIdFromShape(parent)) || canvas.findRoot(parent.id);\n\n      // when the root is a collaboration, the process does not have a\n      // corresponding element in the elementRegisty. Instead, we search\n      // for the corresponding participant\n      if (!parentPlane && is(parent, 'bpmn:Process')) {\n        var participant = elementRegistry.find(function (element) {\n          var businessObject = getBusinessObject(element);\n          return businessObject && businessObject.get('processRef') === parent;\n        });\n        parentPlane = participant && canvas.findRoot(participant.id);\n      }\n      if (!parentPlane) {\n        return [];\n      }\n      var title = escapeHTML(parent.name || parent.id);\n      var link = domify('<li><span class=\"bjs-crumb\"><a title=\"' + title + '\">' + title + '</a></span></li>');\n      link.addEventListener('click', function () {\n        canvas.setRootElement(parentPlane);\n      });\n      return link;\n    });\n    breadcrumbs.innerHTML = '';\n\n    // show breadcrumbs and expose state to .djs-container\n    var visible = path.length > 1;\n    containerClasses.toggle(OPEN_CLASS, visible);\n    path.forEach(function (element) {\n      breadcrumbs.appendChild(element);\n    });\n  }\n  eventBus.on('root.set', function (event) {\n    updateBreadcrumbs(event.element);\n  });\n}\nDrilldownBreadcrumbs.$inject = ['eventBus', 'elementRegistry', 'canvas'];\n\n// helpers //////////\n\n/**\n * Returns the parents for the element using the business object chain,\n * starting with the root element.\n *\n * @param {Shape} child\n *\n * @return {Shape}\n */\nfunction getBusinessObjectParentChain(child) {\n  var businessObject = getBusinessObject(child);\n  var parents = [];\n  for (var element = businessObject; element; element = element.$parent) {\n    if (is(element, 'bpmn:SubProcess') || is(element, 'bpmn:Process')) {\n      parents.push(element);\n    }\n  }\n  return parents.reverse();\n}","map":{"version":3,"names":["domify","classes","find","escapeHTML","getBusinessObject","is","getPlaneIdFromShape","OPEN_CLASS","DrilldownBreadcrumbs","eventBus","elementRegistry","canvas","breadcrumbs","container","getContainer","containerClasses","appendChild","businessObjectParents","on","event","shape","element","businessObject","isPresent","updateBreadcrumbs","getBusinessObjectParentChain","path","flatMap","parent","parentPlane","findRoot","id","participant","get","title","name","link","addEventListener","setRootElement","innerHTML","visible","length","toggle","forEach","$inject","child","parents","$parent","push","reverse"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/drilldown/DrilldownBreadcrumbs.js"],"sourcesContent":["import { domify, classes } from 'min-dom';\nimport { find } from 'min-dash';\n\nimport { escapeHTML } from 'diagram-js/lib/util/EscapeUtil';\nimport { getBusinessObject, is } from '../../util/ModelUtil';\nimport {\n  getPlaneIdFromShape\n} from '../../util/DrilldownUtil';\n\n/**\n * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n *\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').Shape} Shape\n */\n\nvar OPEN_CLASS = 'bjs-breadcrumbs-shown';\n\n\n/**\n * Adds overlays that allow switching planes on collapsed subprocesses.\n *\n * @param {EventBus} eventBus\n * @param {ElementRegistry} elementRegistry\n * @param {Canvas} canvas\n */\nexport default function DrilldownBreadcrumbs(eventBus, elementRegistry, canvas) {\n  var breadcrumbs = domify('<ul class=\"bjs-breadcrumbs\"></ul>');\n  var container = canvas.getContainer();\n  var containerClasses = classes(container);\n  container.appendChild(breadcrumbs);\n\n  var businessObjectParents = [];\n\n  // update breadcrumbs if name or ID of the primary shape changes\n  eventBus.on('element.changed', function(event) {\n    var shape = event.element,\n        businessObject = getBusinessObject(shape);\n\n    var isPresent = find(businessObjectParents, function(element) {\n      return element === businessObject;\n    });\n\n    if (!isPresent) {\n      return;\n    }\n\n    updateBreadcrumbs();\n  });\n\n  /**\n   * Updates the displayed breadcrumbs. If no element is provided, only the\n   * labels are updated.\n   *\n   * @param {Element} [element]\n   */\n  function updateBreadcrumbs(element) {\n    if (element) {\n      businessObjectParents = getBusinessObjectParentChain(element);\n    }\n\n    var path = businessObjectParents.flatMap(function(parent) {\n      var parentPlane =\n        canvas.findRoot(getPlaneIdFromShape(parent)) ||\n        canvas.findRoot(parent.id);\n\n      // when the root is a collaboration, the process does not have a\n      // corresponding element in the elementRegisty. Instead, we search\n      // for the corresponding participant\n      if (!parentPlane && is(parent, 'bpmn:Process')) {\n        var participant = elementRegistry.find(function(element) {\n          var businessObject = getBusinessObject(element);\n\n          return businessObject && businessObject.get('processRef') === parent;\n        });\n\n        parentPlane = participant && canvas.findRoot(participant.id);\n      }\n\n      if (!parentPlane) {\n        return [];\n      }\n\n      var title = escapeHTML(parent.name || parent.id);\n      var link = domify('<li><span class=\"bjs-crumb\"><a title=\"' + title + '\">' + title + '</a></span></li>');\n\n      link.addEventListener('click', function() {\n        canvas.setRootElement(parentPlane);\n      });\n\n      return link;\n    });\n\n    breadcrumbs.innerHTML = '';\n\n    // show breadcrumbs and expose state to .djs-container\n    var visible = path.length > 1;\n\n    containerClasses.toggle(OPEN_CLASS, visible);\n\n    path.forEach(function(element) {\n      breadcrumbs.appendChild(element);\n    });\n  }\n\n  eventBus.on('root.set', function(event) {\n    updateBreadcrumbs(event.element);\n  });\n\n}\n\nDrilldownBreadcrumbs.$inject = [ 'eventBus', 'elementRegistry', 'canvas' ];\n\n\n// helpers //////////\n\n/**\n * Returns the parents for the element using the business object chain,\n * starting with the root element.\n *\n * @param {Shape} child\n *\n * @return {Shape}\n */\nfunction getBusinessObjectParentChain(child) {\n  var businessObject = getBusinessObject(child);\n\n  var parents = [];\n\n  for (var element = businessObject; element; element = element.$parent) {\n    if (is(element, 'bpmn:SubProcess') || is(element, 'bpmn:Process')) {\n      parents.push(element);\n    }\n  }\n\n  return parents.reverse();\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}