{"ast":null,"code":"import { reduce, keys, forEach } from 'min-dash';\nimport { is, getBusinessObject } from '../../../util/ModelUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n *\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n *\n * @typedef {import('../../../model/Types').Shape} Shape\n * @typedef {import('../../../model/Types').ModdleElement} ModdleElement\n */\n\n/**\n * @implements {CommandHandler}\n *\n * @param {ElementRegistry} elementRegistry\n */\nexport default function UpdateModdlePropertiesHandler(elementRegistry) {\n  this._elementRegistry = elementRegistry;\n}\nUpdateModdlePropertiesHandler.$inject = ['elementRegistry'];\nUpdateModdlePropertiesHandler.prototype.execute = function (context) {\n  var element = context.element,\n    moddleElement = context.moddleElement,\n    properties = context.properties;\n  if (!moddleElement) {\n    throw new Error('<moddleElement> required');\n  }\n\n  // TODO(nikku): we need to ensure that ID properties\n  // are properly registered / unregistered via\n  // this._moddle.ids.assigned(id)\n  var changed = context.changed || this._getVisualReferences(moddleElement).concat(element);\n  var oldProperties = context.oldProperties || getModdleProperties(moddleElement, keys(properties));\n  setModdleProperties(moddleElement, properties);\n  context.oldProperties = oldProperties;\n  context.changed = changed;\n  return changed;\n};\nUpdateModdlePropertiesHandler.prototype.revert = function (context) {\n  var oldProperties = context.oldProperties,\n    moddleElement = context.moddleElement,\n    changed = context.changed;\n  setModdleProperties(moddleElement, oldProperties);\n  return changed;\n};\n\n/**\n * Return visual references of given moddle element within the diagram.\n *\n * @param {ModdleElement} moddleElement\n *\n * @return {Shape[]}\n */\nUpdateModdlePropertiesHandler.prototype._getVisualReferences = function (moddleElement) {\n  var elementRegistry = this._elementRegistry;\n  if (is(moddleElement, 'bpmn:DataObject')) {\n    return getAllDataObjectReferences(moddleElement, elementRegistry);\n  }\n  return [];\n};\n\n// helpers /////////////////\n\nfunction getModdleProperties(moddleElement, propertyNames) {\n  return reduce(propertyNames, function (result, key) {\n    result[key] = moddleElement.get(key);\n    return result;\n  }, {});\n}\nfunction setModdleProperties(moddleElement, properties) {\n  forEach(properties, function (value, key) {\n    moddleElement.set(key, value);\n  });\n}\nfunction getAllDataObjectReferences(dataObject, elementRegistry) {\n  return elementRegistry.filter(function (element) {\n    return is(element, 'bpmn:DataObjectReference') && getBusinessObject(element).dataObjectRef === dataObject;\n  });\n}","map":{"version":3,"names":["reduce","keys","forEach","is","getBusinessObject","UpdateModdlePropertiesHandler","elementRegistry","_elementRegistry","$inject","prototype","execute","context","element","moddleElement","properties","Error","changed","_getVisualReferences","concat","oldProperties","getModdleProperties","setModdleProperties","revert","getAllDataObjectReferences","propertyNames","result","key","get","value","set","dataObject","filter","dataObjectRef"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/modeling/cmd/UpdateModdlePropertiesHandler.js"],"sourcesContent":["import {\n  reduce,\n  keys,\n  forEach\n} from 'min-dash';\n\nimport {\n  is,\n  getBusinessObject\n} from '../../../util/ModelUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n *\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n *\n * @typedef {import('../../../model/Types').Shape} Shape\n * @typedef {import('../../../model/Types').ModdleElement} ModdleElement\n */\n\n/**\n * @implements {CommandHandler}\n *\n * @param {ElementRegistry} elementRegistry\n */\nexport default function UpdateModdlePropertiesHandler(elementRegistry) {\n  this._elementRegistry = elementRegistry;\n}\n\nUpdateModdlePropertiesHandler.$inject = [ 'elementRegistry' ];\n\nUpdateModdlePropertiesHandler.prototype.execute = function(context) {\n\n  var element = context.element,\n      moddleElement = context.moddleElement,\n      properties = context.properties;\n\n  if (!moddleElement) {\n    throw new Error('<moddleElement> required');\n  }\n\n  // TODO(nikku): we need to ensure that ID properties\n  // are properly registered / unregistered via\n  // this._moddle.ids.assigned(id)\n  var changed = context.changed || this._getVisualReferences(moddleElement).concat(element);\n  var oldProperties = context.oldProperties || getModdleProperties(moddleElement, keys(properties));\n\n  setModdleProperties(moddleElement, properties);\n\n  context.oldProperties = oldProperties;\n  context.changed = changed;\n\n  return changed;\n};\n\nUpdateModdlePropertiesHandler.prototype.revert = function(context) {\n  var oldProperties = context.oldProperties,\n      moddleElement = context.moddleElement,\n      changed = context.changed;\n\n  setModdleProperties(moddleElement, oldProperties);\n\n  return changed;\n};\n\n/**\n * Return visual references of given moddle element within the diagram.\n *\n * @param {ModdleElement} moddleElement\n *\n * @return {Shape[]}\n */\nUpdateModdlePropertiesHandler.prototype._getVisualReferences = function(moddleElement) {\n\n  var elementRegistry = this._elementRegistry;\n\n  if (is(moddleElement, 'bpmn:DataObject')) {\n    return getAllDataObjectReferences(moddleElement, elementRegistry);\n  }\n\n  return [];\n};\n\n\n// helpers /////////////////\n\nfunction getModdleProperties(moddleElement, propertyNames) {\n  return reduce(propertyNames, function(result, key) {\n    result[key] = moddleElement.get(key);\n    return result;\n  }, {});\n}\n\nfunction setModdleProperties(moddleElement, properties) {\n  forEach(properties, function(value, key) {\n    moddleElement.set(key, value);\n  });\n}\n\nfunction getAllDataObjectReferences(dataObject, elementRegistry) {\n  return elementRegistry.filter(function(element) {\n    return (\n      is(element, 'bpmn:DataObjectReference') &&\n          getBusinessObject(element).dataObjectRef === dataObject\n    );\n  });\n}\n"],"mappings":"AAAA,SACEA,MAAM,EACNC,IAAI,EACJC,OAAO,QACF,UAAU;AAEjB,SACEC,EAAE,EACFC,iBAAiB,QACZ,yBAAyB;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,6BAA6BA,CAACC,eAAe,EAAE;EACrE,IAAI,CAACC,gBAAgB,GAAGD,eAAe;AACzC;AAEAD,6BAA6B,CAACG,OAAO,GAAG,CAAE,iBAAiB,CAAE;AAE7DH,6BAA6B,CAACI,SAAS,CAACC,OAAO,GAAG,UAASC,OAAO,EAAE;EAElE,IAAIC,OAAO,GAAGD,OAAO,CAACC,OAAO;IACzBC,aAAa,GAAGF,OAAO,CAACE,aAAa;IACrCC,UAAU,GAAGH,OAAO,CAACG,UAAU;EAEnC,IAAI,CAACD,aAAa,EAAE;IAClB,MAAM,IAAIE,KAAK,CAAC,0BAA0B,CAAC;EAC7C;;EAEA;EACA;EACA;EACA,IAAIC,OAAO,GAAGL,OAAO,CAACK,OAAO,IAAI,IAAI,CAACC,oBAAoB,CAACJ,aAAa,CAAC,CAACK,MAAM,CAACN,OAAO,CAAC;EACzF,IAAIO,aAAa,GAAGR,OAAO,CAACQ,aAAa,IAAIC,mBAAmB,CAACP,aAAa,EAAEZ,IAAI,CAACa,UAAU,CAAC,CAAC;EAEjGO,mBAAmB,CAACR,aAAa,EAAEC,UAAU,CAAC;EAE9CH,OAAO,CAACQ,aAAa,GAAGA,aAAa;EACrCR,OAAO,CAACK,OAAO,GAAGA,OAAO;EAEzB,OAAOA,OAAO;AAChB,CAAC;AAEDX,6BAA6B,CAACI,SAAS,CAACa,MAAM,GAAG,UAASX,OAAO,EAAE;EACjE,IAAIQ,aAAa,GAAGR,OAAO,CAACQ,aAAa;IACrCN,aAAa,GAAGF,OAAO,CAACE,aAAa;IACrCG,OAAO,GAAGL,OAAO,CAACK,OAAO;EAE7BK,mBAAmB,CAACR,aAAa,EAAEM,aAAa,CAAC;EAEjD,OAAOH,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,6BAA6B,CAACI,SAAS,CAACQ,oBAAoB,GAAG,UAASJ,aAAa,EAAE;EAErF,IAAIP,eAAe,GAAG,IAAI,CAACC,gBAAgB;EAE3C,IAAIJ,EAAE,CAACU,aAAa,EAAE,iBAAiB,CAAC,EAAE;IACxC,OAAOU,0BAA0B,CAACV,aAAa,EAAEP,eAAe,CAAC;EACnE;EAEA,OAAO,EAAE;AACX,CAAC;;AAGD;;AAEA,SAASc,mBAAmBA,CAACP,aAAa,EAAEW,aAAa,EAAE;EACzD,OAAOxB,MAAM,CAACwB,aAAa,EAAE,UAASC,MAAM,EAAEC,GAAG,EAAE;IACjDD,MAAM,CAACC,GAAG,CAAC,GAAGb,aAAa,CAACc,GAAG,CAACD,GAAG,CAAC;IACpC,OAAOD,MAAM;EACf,CAAC,EAAE,CAAC,CAAC,CAAC;AACR;AAEA,SAASJ,mBAAmBA,CAACR,aAAa,EAAEC,UAAU,EAAE;EACtDZ,OAAO,CAACY,UAAU,EAAE,UAASc,KAAK,EAAEF,GAAG,EAAE;IACvCb,aAAa,CAACgB,GAAG,CAACH,GAAG,EAAEE,KAAK,CAAC;EAC/B,CAAC,CAAC;AACJ;AAEA,SAASL,0BAA0BA,CAACO,UAAU,EAAExB,eAAe,EAAE;EAC/D,OAAOA,eAAe,CAACyB,MAAM,CAAC,UAASnB,OAAO,EAAE;IAC9C,OACET,EAAE,CAACS,OAAO,EAAE,0BAA0B,CAAC,IACnCR,iBAAiB,CAACQ,OAAO,CAAC,CAACoB,aAAa,KAAKF,UAAU;EAE/D,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}