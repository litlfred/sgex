{"ast":null,"code":"import React,{useState,useEffect}from'react';import githubService from'../services/githubService';import StagingGround from'./StagingGround';import SushiRunner from'./SushiRunner';import'./Publications.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Publications=_ref=>{var _repository$owner;let{profile,repository,selectedBranch,hasWriteAccess}=_ref;const[branches,setBranches]=useState([]);const[workflows,setWorkflows]=useState([]);const[workflowRuns,setWorkflowRuns]=useState({});const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[stagingFiles,setStagingFiles]=useState([]);const owner=((_repository$owner=repository.owner)===null||_repository$owner===void 0?void 0:_repository$owner.login)||repository.full_name.split('/')[0];const repoName=repository.name;useEffect(()=>{const fetchPublicationData=async()=>{try{setLoading(true);setError(null);// Handle demo mode - provide mock data\nif(profile!==null&&profile!==void 0&&profile.isDemo){const mockBranches=[{name:'main',commit:{sha:'abc123'}},{name:'feature/updates',commit:{sha:'def456'}},{name:'dev',commit:{sha:'ghi789'}}];setBranches(mockBranches);const mockWorkflows=[{id:'pages-build',name:'Deploy to GitHub Pages',triggers:['push','manual']}];setWorkflows(mockWorkflows);// Mock workflow runs\nconst mockWorkflowRuns={'main':{status:'completed',conclusion:'success',html_url:`https://github.com/${owner}/${repoName}/actions/runs/123456`,updated_at:new Date().toISOString()},'feature/updates':{status:'completed',conclusion:'action_required',html_url:`https://github.com/${owner}/${repoName}/actions/runs/123457`,updated_at:new Date().toISOString()},'dev':{status:'completed',conclusion:'failure',html_url:`https://github.com/${owner}/${repoName}/actions/runs/123458`,updated_at:new Date().toISOString()}};setWorkflowRuns(mockWorkflowRuns);setLoading(false);return;}// Fetch branches (excluding gh-pages)\nconst branchesData=await githubService.getBranches(owner,repoName);const filteredBranches=branchesData.filter(branch=>branch.name!=='gh-pages');setBranches(filteredBranches);// Fetch workflows to find ghbuild workflow\nconst workflowsData=await githubService.getWorkflows(owner,repoName);setWorkflows(workflowsData);// Find the ghbuild workflow (look for workflow with 'build' or 'publish' in name)\nconst ghbuildWorkflow=workflowsData.find(workflow=>workflow.name.toLowerCase().includes('build')||workflow.name.toLowerCase().includes('publish')||workflow.name.toLowerCase().includes('pages'));// Fetch recent workflow runs for each branch if ghbuild workflow exists and has valid ID\nif(ghbuildWorkflow&&ghbuildWorkflow.id){const runsByBranch={};for(const branch of filteredBranches){try{const runs=await githubService.getWorkflowRunsForWorkflow(owner,repoName,ghbuildWorkflow.id,{branch:branch.name,per_page:1});if(runs.length>0){runsByBranch[branch.name]=runs[0];}}catch(err){console.warn(`Could not fetch workflow runs for branch ${branch.name}:`,err);}}setWorkflowRuns(runsByBranch);}else if(ghbuildWorkflow&&!ghbuildWorkflow.id){console.warn('Found workflow but missing ID:',ghbuildWorkflow);}setLoading(false);}catch(err){console.error('Error fetching publication data:',err);setError('Failed to load publication data');setLoading(false);}};fetchPublicationData();},[owner,repoName,profile===null||profile===void 0?void 0:profile.isDemo]);const getPublicationUrl=branchName=>{if(branchName===repository.default_branch||branchName==='main'){return`https://${owner}.github.io/${repoName}/`;}else{return`https://${owner}.github.io/${repoName}/branches/${branchName}/`;}};const getWorkflowStatusIcon=branchName=>{const run=workflowRuns[branchName];if(!run)return{icon:'⚪',title:'No recent workflow runs',link:null};const status=run.status;const conclusion=run.conclusion;if(status==='in_progress'||status==='queued'){return{icon:'🔄',title:'Workflow running',link:run.html_url,className:'running'};}else if(conclusion==='success'){return{icon:'✅',title:'Last build successful',link:run.html_url,className:'success'};}else if(conclusion==='failure'){return{icon:'❌',title:'Last build failed',link:run.html_url,className:'failure'};}else if(conclusion==='action_required'){return{icon:'⏳',title:'Workflow requires approval',link:run.html_url,className:'approval-required'};}else{return{icon:'⚠️',title:`Build ${conclusion||status}`,link:run.html_url,className:'warning'};}};const handleRestartWorkflow=async branchName=>{// Handle demo mode\nif(profile!==null&&profile!==void 0&&profile.isDemo){alert(`Demo Mode: Workflow restart simulated for branch: ${branchName}`);return;}const ghbuildWorkflow=workflows.find(workflow=>workflow.name.toLowerCase().includes('build')||workflow.name.toLowerCase().includes('publish')||workflow.name.toLowerCase().includes('pages'));if(!ghbuildWorkflow){alert('No suitable workflow found to restart');return;}if(!ghbuildWorkflow.id){alert('Workflow found but missing ID - cannot restart');console.warn('Workflow missing ID:',ghbuildWorkflow);return;}try{await githubService.triggerWorkflow(owner,repoName,ghbuildWorkflow.id,branchName);alert(`Workflow restarted for branch: ${branchName}`);// Refresh workflow runs after a delay\nsetTimeout(()=>{window.location.reload();},2000);}catch(err){console.error('Error restarting workflow:',err);alert('Failed to restart workflow. Please check your permissions.');}};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"publications-loading\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"loading-content\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Loading Publications...\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Fetching branch and workflow information...\"})]})});}if(error){return/*#__PURE__*/_jsx(\"div\",{className:\"publications-error\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"error-content\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Error Loading Publications\"}),/*#__PURE__*/_jsx(\"p\",{children:error})]})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"publications-section\",children:[/*#__PURE__*/_jsx(SushiRunner,{repository:repository,selectedBranch:selectedBranch,profile:profile,stagingFiles:stagingFiles}),/*#__PURE__*/_jsx(StagingGround,{repository:repository,selectedBranch:selectedBranch,hasWriteAccess:hasWriteAccess,profile:profile,onStagingFilesChange:setStagingFiles}),/*#__PURE__*/_jsxs(\"div\",{className:\"section-header\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"section-title\",children:\"Published DAK Content\"}),/*#__PURE__*/_jsx(\"p\",{className:\"section-description\",children:\"Access published Implementation Guide content for this DAK repository. Each branch is published automatically via GitHub Actions to GitHub Pages.\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"publications-grid\",children:branches.map(branch=>{const isMainBranch=branch.name===repository.default_branch||branch.name==='main';const publicationUrl=getPublicationUrl(branch.name);const workflowStatus=getWorkflowStatusIcon(branch.name);return/*#__PURE__*/_jsxs(\"div\",{className:`publication-card ${isMainBranch?'main-branch':''}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"publication-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"branch-info\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"branch-icon\",children:\"\\uD83C\\uDF3F\"}),/*#__PURE__*/_jsx(\"span\",{className:\"branch-name\",children:branch.name}),isMainBranch&&/*#__PURE__*/_jsx(\"span\",{className:\"main-badge\",children:\"MAIN\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"workflow-status\",children:workflowStatus.link?/*#__PURE__*/_jsx(\"a\",{href:workflowStatus.link,target:\"_blank\",rel:\"noopener noreferrer\",className:`status-icon ${workflowStatus.className||''}`,title:workflowStatus.title,children:workflowStatus.icon}):/*#__PURE__*/_jsx(\"span\",{className:`status-icon ${workflowStatus.className||''}`,title:workflowStatus.title,children:workflowStatus.icon})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"publication-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"publication-url\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Published at:\"}),/*#__PURE__*/_jsxs(\"a\",{href:publicationUrl,target:\"_blank\",rel:\"noopener noreferrer\",className:\"publication-link\",children:[publicationUrl,/*#__PURE__*/_jsx(\"span\",{className:\"external-link\",children:\"\\u2197\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"publication-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"restart-workflow-btn\",onClick:()=>handleRestartWorkflow(branch.name),disabled:!hasWriteAccess,title:hasWriteAccess?'Restart build workflow for this branch':'Write permissions required',children:\"\\uD83D\\uDD04 Rebuild\"}),/*#__PURE__*/_jsx(\"a\",{href:`https://github.com/${owner}/${repoName}/tree/${branch.name}`,target:\"_blank\",rel:\"noopener noreferrer\",className:\"view-source-btn\",title:\"View source code for this branch\",children:\"\\uD83D\\uDC41\\uFE0F View Source\"})]})]})]},branch.name);})}),branches.length===0&&/*#__PURE__*/_jsx(\"div\",{className:\"no-branches\",children:/*#__PURE__*/_jsx(\"p\",{children:\"No publishable branches found (excluding gh-pages).\"})})]});};export default Publications;","map":{"version":3,"names":["React","useState","useEffect","githubService","StagingGround","SushiRunner","jsx","_jsx","jsxs","_jsxs","Publications","_ref","_repository$owner","profile","repository","selectedBranch","hasWriteAccess","branches","setBranches","workflows","setWorkflows","workflowRuns","setWorkflowRuns","loading","setLoading","error","setError","stagingFiles","setStagingFiles","owner","login","full_name","split","repoName","name","fetchPublicationData","isDemo","mockBranches","commit","sha","mockWorkflows","id","triggers","mockWorkflowRuns","status","conclusion","html_url","updated_at","Date","toISOString","branchesData","getBranches","filteredBranches","filter","branch","workflowsData","getWorkflows","ghbuildWorkflow","find","workflow","toLowerCase","includes","runsByBranch","runs","getWorkflowRunsForWorkflow","per_page","length","err","console","warn","getPublicationUrl","branchName","default_branch","getWorkflowStatusIcon","run","icon","title","link","className","handleRestartWorkflow","alert","triggerWorkflow","setTimeout","window","location","reload","children","onStagingFilesChange","map","isMainBranch","publicationUrl","workflowStatus","href","target","rel","onClick","disabled"],"sources":["/home/runner/work/sgex/sgex/src/components/Publications.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport githubService from '../services/githubService';\nimport StagingGround from './StagingGround';\nimport SushiRunner from './SushiRunner';\nimport './Publications.css';\n\nconst Publications = ({ profile, repository, selectedBranch, hasWriteAccess }) => {\n  const [branches, setBranches] = useState([]);\n  const [workflows, setWorkflows] = useState([]);\n  const [workflowRuns, setWorkflowRuns] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [stagingFiles, setStagingFiles] = useState([]);\n\n  const owner = repository.owner?.login || repository.full_name.split('/')[0];\n  const repoName = repository.name;\n\n  useEffect(() => {\n    const fetchPublicationData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Handle demo mode - provide mock data\n        if (profile?.isDemo) {\n          const mockBranches = [\n            { name: 'main', commit: { sha: 'abc123' } },\n            { name: 'feature/updates', commit: { sha: 'def456' } },\n            { name: 'dev', commit: { sha: 'ghi789' } }\n          ];\n          setBranches(mockBranches);\n\n          const mockWorkflows = [\n            { id: 'pages-build', name: 'Deploy to GitHub Pages', triggers: ['push', 'manual'] }\n          ];\n          setWorkflows(mockWorkflows);\n\n          // Mock workflow runs\n          const mockWorkflowRuns = {\n            'main': { \n              status: 'completed', \n              conclusion: 'success', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123456`,\n              updated_at: new Date().toISOString()\n            },\n            'feature/updates': { \n              status: 'completed', \n              conclusion: 'action_required', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123457`,\n              updated_at: new Date().toISOString()\n            },\n            'dev': { \n              status: 'completed', \n              conclusion: 'failure', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123458`,\n              updated_at: new Date().toISOString()\n            }\n          };\n          setWorkflowRuns(mockWorkflowRuns);\n          setLoading(false);\n          return;\n        }\n\n        // Fetch branches (excluding gh-pages)\n        const branchesData = await githubService.getBranches(owner, repoName);\n        const filteredBranches = branchesData.filter(branch => branch.name !== 'gh-pages');\n        setBranches(filteredBranches);\n\n        // Fetch workflows to find ghbuild workflow\n        const workflowsData = await githubService.getWorkflows(owner, repoName);\n        setWorkflows(workflowsData);\n\n        // Find the ghbuild workflow (look for workflow with 'build' or 'publish' in name)\n        const ghbuildWorkflow = workflowsData.find(workflow => \n          workflow.name.toLowerCase().includes('build') || \n          workflow.name.toLowerCase().includes('publish') ||\n          workflow.name.toLowerCase().includes('pages')\n        );\n\n        // Fetch recent workflow runs for each branch if ghbuild workflow exists and has valid ID\n        if (ghbuildWorkflow && ghbuildWorkflow.id) {\n          const runsByBranch = {};\n          for (const branch of filteredBranches) {\n            try {\n              const runs = await githubService.getWorkflowRunsForWorkflow(\n                owner, \n                repoName, \n                ghbuildWorkflow.id,\n                { branch: branch.name, per_page: 1 }\n              );\n              if (runs.length > 0) {\n                runsByBranch[branch.name] = runs[0];\n              }\n            } catch (err) {\n              console.warn(`Could not fetch workflow runs for branch ${branch.name}:`, err);\n            }\n          }\n          setWorkflowRuns(runsByBranch);\n        } else if (ghbuildWorkflow && !ghbuildWorkflow.id) {\n          console.warn('Found workflow but missing ID:', ghbuildWorkflow);\n        }\n\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching publication data:', err);\n        setError('Failed to load publication data');\n        setLoading(false);\n      }\n    };\n\n    fetchPublicationData();\n  }, [owner, repoName, profile?.isDemo]);\n\n  const getPublicationUrl = (branchName) => {\n    if (branchName === repository.default_branch || branchName === 'main') {\n      return `https://${owner}.github.io/${repoName}/`;\n    } else {\n      return `https://${owner}.github.io/${repoName}/branches/${branchName}/`;\n    }\n  };\n\n  const getWorkflowStatusIcon = (branchName) => {\n    const run = workflowRuns[branchName];\n    if (!run) return { icon: '⚪', title: 'No recent workflow runs', link: null };\n\n    const status = run.status;\n    const conclusion = run.conclusion;\n\n    if (status === 'in_progress' || status === 'queued') {\n      return { \n        icon: '🔄', \n        title: 'Workflow running', \n        link: run.html_url,\n        className: 'running' \n      };\n    } else if (conclusion === 'success') {\n      return { \n        icon: '✅', \n        title: 'Last build successful', \n        link: run.html_url,\n        className: 'success' \n      };\n    } else if (conclusion === 'failure') {\n      return { \n        icon: '❌', \n        title: 'Last build failed', \n        link: run.html_url,\n        className: 'failure' \n      };\n    } else if (conclusion === 'action_required') {\n      return { \n        icon: '⏳', \n        title: 'Workflow requires approval', \n        link: run.html_url,\n        className: 'approval-required' \n      };\n    } else {\n      return { \n        icon: '⚠️', \n        title: `Build ${conclusion || status}`, \n        link: run.html_url,\n        className: 'warning' \n      };\n    }\n  };\n\n  const handleRestartWorkflow = async (branchName) => {\n    // Handle demo mode\n    if (profile?.isDemo) {\n      alert(`Demo Mode: Workflow restart simulated for branch: ${branchName}`);\n      return;\n    }\n\n    const ghbuildWorkflow = workflows.find(workflow => \n      workflow.name.toLowerCase().includes('build') || \n      workflow.name.toLowerCase().includes('publish') ||\n      workflow.name.toLowerCase().includes('pages')\n    );\n\n    if (!ghbuildWorkflow) {\n      alert('No suitable workflow found to restart');\n      return;\n    }\n\n    if (!ghbuildWorkflow.id) {\n      alert('Workflow found but missing ID - cannot restart');\n      console.warn('Workflow missing ID:', ghbuildWorkflow);\n      return;\n    }\n\n    try {\n      await githubService.triggerWorkflow(owner, repoName, ghbuildWorkflow.id, branchName);\n      alert(`Workflow restarted for branch: ${branchName}`);\n      \n      // Refresh workflow runs after a delay\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    } catch (err) {\n      console.error('Error restarting workflow:', err);\n      alert('Failed to restart workflow. Please check your permissions.');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"publications-loading\">\n        <div className=\"loading-content\">\n          <h3>Loading Publications...</h3>\n          <p>Fetching branch and workflow information...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"publications-error\">\n        <div className=\"error-content\">\n          <h3>Error Loading Publications</h3>\n          <p>{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"publications-section\">\n      {/* SUSHI Runner Section */}\n      <SushiRunner\n        repository={repository}\n        selectedBranch={selectedBranch}\n        profile={profile}\n        stagingFiles={stagingFiles}\n      />\n      \n      {/* Staging Ground Section */}\n      <StagingGround\n        repository={repository}\n        selectedBranch={selectedBranch}\n        hasWriteAccess={hasWriteAccess}\n        profile={profile}\n        onStagingFilesChange={setStagingFiles}\n      />\n      \n      <div className=\"section-header\">\n        <h3 className=\"section-title\">Published DAK Content</h3>\n        <p className=\"section-description\">\n          Access published Implementation Guide content for this DAK repository. Each branch is published \n          automatically via GitHub Actions to GitHub Pages.\n        </p>\n      </div>\n\n      <div className=\"publications-grid\">\n        {branches.map((branch) => {\n          const isMainBranch = branch.name === repository.default_branch || branch.name === 'main';\n          const publicationUrl = getPublicationUrl(branch.name);\n          const workflowStatus = getWorkflowStatusIcon(branch.name);\n\n          return (\n            <div key={branch.name} className={`publication-card ${isMainBranch ? 'main-branch' : ''}`}>\n              <div className=\"publication-header\">\n                <div className=\"branch-info\">\n                  <span className=\"branch-icon\">🌿</span>\n                  <span className=\"branch-name\">{branch.name}</span>\n                  {isMainBranch && <span className=\"main-badge\">MAIN</span>}\n                </div>\n                <div className=\"workflow-status\">\n                  {workflowStatus.link ? (\n                    <a \n                      href={workflowStatus.link} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className={`status-icon ${workflowStatus.className || ''}`}\n                      title={workflowStatus.title}\n                    >\n                      {workflowStatus.icon}\n                    </a>\n                  ) : (\n                    <span \n                      className={`status-icon ${workflowStatus.className || ''}`}\n                      title={workflowStatus.title}\n                    >\n                      {workflowStatus.icon}\n                    </span>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"publication-content\">\n                <div className=\"publication-url\">\n                  <label>Published at:</label>\n                  <a \n                    href={publicationUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"publication-link\"\n                  >\n                    {publicationUrl}\n                    <span className=\"external-link\">↗</span>\n                  </a>\n                </div>\n\n                <div className=\"publication-actions\">\n                  <button\n                    className=\"restart-workflow-btn\"\n                    onClick={() => handleRestartWorkflow(branch.name)}\n                    disabled={!hasWriteAccess}\n                    title={hasWriteAccess ? 'Restart build workflow for this branch' : 'Write permissions required'}\n                  >\n                    🔄 Rebuild\n                  </button>\n                  \n                  <a \n                    href={`https://github.com/${owner}/${repoName}/tree/${branch.name}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"view-source-btn\"\n                    title=\"View source code for this branch\"\n                  >\n                    👁️ View Source\n                  </a>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {branches.length === 0 && (\n        <div className=\"no-branches\">\n          <p>No publishable branches found (excluding gh-pages).</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Publications;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}