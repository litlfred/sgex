{"ast":null,"code":"import { pointDistance } from './Geometry';\nimport intersectPaths from 'path-intersection';\n\n/**\n * @typedef {import('../util/Types').Point} Point\n *\n * @typedef { {\n *   bendpoint?: boolean;\n *   index: number;\n *   point: Point;\n * } } Intersection\n */\n\nvar round = Math.round,\n  max = Math.max;\nfunction circlePath(center, r) {\n  var x = center.x,\n    y = center.y;\n  return [['M', x, y], ['m', 0, -r], ['a', r, r, 0, 1, 1, 0, 2 * r], ['a', r, r, 0, 1, 1, 0, -2 * r], ['z']];\n}\nfunction linePath(points) {\n  var segments = [];\n  points.forEach(function (p, idx) {\n    segments.push([idx === 0 ? 'M' : 'L', p.x, p.y]);\n  });\n  return segments;\n}\nvar INTERSECTION_THRESHOLD = 10;\n\n/**\n * @param {Point[]} waypoints\n * @param {Point} reference\n *\n * @return {Intersection|null}\n */\nfunction getBendpointIntersection(waypoints, reference) {\n  var i, w;\n  for (i = 0; w = waypoints[i]; i++) {\n    if (pointDistance(w, reference) <= INTERSECTION_THRESHOLD) {\n      return {\n        point: waypoints[i],\n        bendpoint: true,\n        index: i\n      };\n    }\n  }\n  return null;\n}\n\n/**\n * @param {Point[]} waypoints\n * @param {Point} reference\n *\n * @return {Intersection|null}\n */\nfunction getPathIntersection(waypoints, reference) {\n  var intersections = intersectPaths(circlePath(reference, INTERSECTION_THRESHOLD), linePath(waypoints));\n  var a = intersections[0],\n    b = intersections[intersections.length - 1],\n    idx;\n  if (!a) {\n    // no intersection\n    return null;\n  }\n  if (a !== b) {\n    if (a.segment2 !== b.segment2) {\n      // we use the bendpoint in between both segments\n      // as the intersection point\n\n      idx = max(a.segment2, b.segment2) - 1;\n      return {\n        point: waypoints[idx],\n        bendpoint: true,\n        index: idx\n      };\n    }\n    return {\n      point: {\n        x: round(a.x + b.x) / 2,\n        y: round(a.y + b.y) / 2\n      },\n      index: a.segment2\n    };\n  }\n  return {\n    point: {\n      x: round(a.x),\n      y: round(a.y)\n    },\n    index: a.segment2\n  };\n}\n\n/**\n * Returns the closest point on the connection towards a given reference point.\n *\n * @param {Point[]} waypoints\n * @param {Point} reference\n *\n * @return {Intersection|null}\n */\nexport function getApproxIntersection(waypoints, reference) {\n  return getBendpointIntersection(waypoints, reference) || getPathIntersection(waypoints, reference);\n}","map":{"version":3,"names":["pointDistance","intersectPaths","round","Math","max","circlePath","center","r","x","y","linePath","points","segments","forEach","p","idx","push","INTERSECTION_THRESHOLD","getBendpointIntersection","waypoints","reference","i","w","point","bendpoint","index","getPathIntersection","intersections","a","b","length","segment2","getApproxIntersection"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/util/LineIntersection.js"],"sourcesContent":["import {\n  pointDistance\n} from './Geometry';\n\nimport intersectPaths from 'path-intersection';\n\n/**\n * @typedef {import('../util/Types').Point} Point\n *\n * @typedef { {\n *   bendpoint?: boolean;\n *   index: number;\n *   point: Point;\n * } } Intersection\n */\n\nvar round = Math.round,\n    max = Math.max;\n\n\nfunction circlePath(center, r) {\n  var x = center.x,\n      y = center.y;\n\n  return [\n    [ 'M', x, y ],\n    [ 'm', 0, -r ],\n    [ 'a', r, r, 0, 1, 1, 0, 2 * r ],\n    [ 'a', r, r, 0, 1, 1, 0, -2 * r ],\n    [ 'z' ]\n  ];\n}\n\nfunction linePath(points) {\n  var segments = [];\n\n  points.forEach(function(p, idx) {\n    segments.push([ idx === 0 ? 'M' : 'L', p.x, p.y ]);\n  });\n\n  return segments;\n}\n\n\nvar INTERSECTION_THRESHOLD = 10;\n\n/**\n * @param {Point[]} waypoints\n * @param {Point} reference\n *\n * @return {Intersection|null}\n */\nfunction getBendpointIntersection(waypoints, reference) {\n\n  var i, w;\n\n  for (i = 0; (w = waypoints[i]); i++) {\n\n    if (pointDistance(w, reference) <= INTERSECTION_THRESHOLD) {\n      return {\n        point: waypoints[i],\n        bendpoint: true,\n        index: i\n      };\n    }\n  }\n\n  return null;\n}\n\n/**\n * @param {Point[]} waypoints\n * @param {Point} reference\n *\n * @return {Intersection|null}\n */\nfunction getPathIntersection(waypoints, reference) {\n\n  var intersections = intersectPaths(circlePath(reference, INTERSECTION_THRESHOLD), linePath(waypoints));\n\n  var a = intersections[0],\n      b = intersections[intersections.length - 1],\n      idx;\n\n  if (!a) {\n\n    // no intersection\n    return null;\n  }\n\n  if (a !== b) {\n\n    if (a.segment2 !== b.segment2) {\n\n      // we use the bendpoint in between both segments\n      // as the intersection point\n\n      idx = max(a.segment2, b.segment2) - 1;\n\n      return {\n        point: waypoints[idx],\n        bendpoint: true,\n        index: idx\n      };\n    }\n\n    return {\n      point: {\n        x: (round(a.x + b.x) / 2),\n        y: (round(a.y + b.y) / 2)\n      },\n      index: a.segment2\n    };\n  }\n\n  return {\n    point: {\n      x: round(a.x),\n      y: round(a.y)\n    },\n    index: a.segment2\n  };\n}\n\n/**\n * Returns the closest point on the connection towards a given reference point.\n *\n * @param {Point[]} waypoints\n * @param {Point} reference\n *\n * @return {Intersection|null}\n */\nexport function getApproxIntersection(waypoints, reference) {\n  return getBendpointIntersection(waypoints, reference) || getPathIntersection(waypoints, reference);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}