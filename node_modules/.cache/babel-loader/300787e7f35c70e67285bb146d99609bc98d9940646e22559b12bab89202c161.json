{"ast":null,"code":"import React,{useState,useEffect,useMemo}from'react';import{useParams,useLocation,useNavigate}from'react-router-dom';import{AssetEditorLayout}from'./framework';import ContextualHelpMascot from'./ContextualHelpMascot';import githubService from'../services/githubService';import'./QuestionnaireEditor.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const QuestionnaireEditor=()=>{var _location$state,_location$state3,_location$state4,_questionnaireContent;const{user,repo,branch}=useParams();const location=useLocation();const navigate=useNavigate();// Get context from location state or URL params - memoized to prevent re-renders\nconst profile=(_location$state=location.state)===null||_location$state===void 0?void 0:_location$state.profile;const repository=useMemo(()=>{var _location$state2;return((_location$state2=location.state)===null||_location$state2===void 0?void 0:_location$state2.repository)||{name:repo,owner:{login:user},full_name:`${user}/${repo}`};},[(_location$state3=location.state)===null||_location$state3===void 0?void 0:_location$state3.repository,repo,user]);const selectedBranch=((_location$state4=location.state)===null||_location$state4===void 0?void 0:_location$state4.selectedBranch)||branch||'main';// Component state\nconst[questionnaires,setQuestionnaires]=useState([]);const[selectedQuestionnaire,setSelectedQuestionnaire]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[editing,setEditing]=useState(false);const[questionnaireContent,setQuestionnaireContent]=useState(null);const[originalContent,setOriginalContent]=useState(null);const[hasChanges,setHasChanges]=useState(false);// LForms integration\nconst[lformsLoaded,setLformsLoaded]=useState(false);// Load LForms library\nuseEffect(()=>{const loadLForms=async()=>{try{// For now, mark as loaded to enable the interface\n// TODO: Integrate LForms properly once we can test the import\nconsole.log('LForms integration pending - using basic JSON editor for now');setLformsLoaded(true);}catch(error){console.error('Failed to load LForms:',error);setError('Failed to load questionnaire editor. Please refresh the page.');}};loadLForms();},[]);// Load questionnaires from repository\nuseEffect(()=>{const loadQuestionnaires=async()=>{if(!repository||!selectedBranch)return;try{setLoading(true);setError(null);// Get all files from input/questionnaires directory\nconst files=await githubService.getDirectoryContents(repository.owner.login,repository.name,'input/questionnaires',selectedBranch);// Filter for JSON files\nconst questionnaireFiles=files.filter(file=>file.type==='file'&&file.name.endsWith('.json')).map(file=>({...file,displayName:file.name.replace('.json',''),fullPath:`input/questionnaires/${file.name}`}));setQuestionnaires(questionnaireFiles);}catch(error){console.error('Error loading questionnaires:',error);if(error.status===404){// Directory doesn't exist, start with empty array\nsetQuestionnaires([]);}else{setError(`Failed to load questionnaires: ${error.message}`);}}finally{setLoading(false);}};loadQuestionnaires();},[repository,selectedBranch]);// Load questionnaire content\nconst loadQuestionnaireContent=async questionnaire=>{try{setLoading(true);const content=await githubService.getFileContent(repository.owner.login,repository.name,questionnaire.fullPath,selectedBranch);const questionnaireData=JSON.parse(content);setQuestionnaireContent(questionnaireData);setOriginalContent(content);setSelectedQuestionnaire(questionnaire);setEditing(true);setHasChanges(false);// TODO: Render in LForms when integration is complete\n// For now, we'll use a basic JSON preview\nconsole.log('Questionnaire loaded:',questionnaireData);}catch(error){console.error('Error loading questionnaire content:',error);setError(`Failed to load questionnaire: ${error.message}`);}finally{setLoading(false);}};// Create new questionnaire\nconst createNewQuestionnaire=()=>{const newQuestionnaire={resourceType:'Questionnaire',id:`questionnaire-${Date.now()}`,meta:{versionId:'1',lastUpdated:new Date().toISOString()},url:`http://example.org/Questionnaire/${Date.now()}`,name:'NewQuestionnaire',title:'New Questionnaire',status:'draft',date:new Date().toISOString().split('T')[0],publisher:'WHO SMART Guidelines',description:'A new FHIR Questionnaire',item:[{linkId:'1',text:'Sample Question',type:'string',required:false}]};setQuestionnaireContent(newQuestionnaire);setOriginalContent(JSON.stringify(newQuestionnaire,null,2));setSelectedQuestionnaire({name:`${newQuestionnaire.name}.json`,displayName:newQuestionnaire.name,fullPath:`input/questionnaires/${newQuestionnaire.name}.json`,isNew:true});setEditing(true);setHasChanges(true);// TODO: Render in LForms when integration is complete\nconsole.log('New questionnaire created:',newQuestionnaire);};// Save questionnaire\nconst handleSave=async function(commitMessage){let saveToGitHub=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;try{const content=JSON.stringify(questionnaireContent,null,2);if(saveToGitHub){await githubService.updateFile(repository.owner.login,repository.name,selectedQuestionnaire.fullPath,content,commitMessage,selectedQuestionnaire.sha,selectedBranch);setHasChanges(false);setOriginalContent(content);// Refresh questionnaires list\nconst files=await githubService.getDirectoryContents(repository.owner.login,repository.name,'input/questionnaires',selectedBranch);const questionnaireFiles=files.filter(file=>file.type==='file'&&file.name.endsWith('.json')).map(file=>({...file,displayName:file.name.replace('.json',''),fullPath:`input/questionnaires/${file.name}`}));setQuestionnaires(questionnaireFiles);}return true;}catch(error){console.error('Error saving questionnaire:',error);throw error;}};// Navigate back to dashboard\nconst handleBackToDashboard=()=>{const navigationState={profile,repository,selectedBranch};navigate(`/dashboard/${repository.owner.login}/${repository.name}/${selectedBranch}`,{state:navigationState});};if(loading&&!editing){return/*#__PURE__*/_jsx(AssetEditorLayout,{pageName:\"questionnaire-editor\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"questionnaire-editor-loading\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Loading Questionnaires...\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Fetching questionnaire files from repository...\"})]})});}return/*#__PURE__*/_jsx(AssetEditorLayout,{pageName:\"questionnaire-editor\",file:selectedQuestionnaire,repository:repository,branch:selectedBranch,content:questionnaireContent?JSON.stringify(questionnaireContent,null,2):null,originalContent:originalContent,hasChanges:hasChanges,onSave:handleSave,showSaveButtons:editing,children:/*#__PURE__*/_jsxs(\"div\",{className:\"questionnaire-editor\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"questionnaire-header\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"header-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"breadcrumb\",children:[/*#__PURE__*/_jsxs(\"button\",{onClick:handleBackToDashboard,className:\"back-link\",children:[\"\\u2190 \",repository.name]}),/*#__PURE__*/_jsx(\"span\",{className:\"separator\",children:\"/\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Questionnaire Editor\"}),selectedBranch&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"separator\",children:\"/\"}),/*#__PURE__*/_jsx(\"span\",{className:\"branch\",children:selectedBranch})]})]}),/*#__PURE__*/_jsx(\"h1\",{children:\"FHIR Questionnaire Editor\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Manage and edit FHIR Questionnaire assets for your DAK\"})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"questionnaire-content\",children:[error&&/*#__PURE__*/_jsxs(\"div\",{className:\"error-message\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Error:\"}),\" \",error]}),!editing?/*#__PURE__*/_jsxs(\"div\",{className:\"questionnaire-list\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"list-header\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Questionnaires (\",questionnaires.length,\")\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:createNewQuestionnaire,className:\"btn-primary\",disabled:!lformsLoaded,children:\"+ Create New Questionnaire\"})]}),questionnaires.length===0?/*#__PURE__*/_jsxs(\"div\",{className:\"empty-state\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"empty-icon\",children:\"\\uD83D\\uDCCB\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"No Questionnaires Found\"}),/*#__PURE__*/_jsx(\"p\",{children:\"This repository doesn't have any FHIR Questionnaire files yet.\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Questionnaires should be stored in \",/*#__PURE__*/_jsx(\"code\",{children:\"input/questionnaires/*.json\"})]}),/*#__PURE__*/_jsx(\"button\",{onClick:createNewQuestionnaire,className:\"btn-primary\",disabled:!lformsLoaded,children:\"Create Your First Questionnaire\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"questionnaire-grid\",children:questionnaires.map(questionnaire=>/*#__PURE__*/_jsxs(\"div\",{className:\"questionnaire-card\",onClick:()=>loadQuestionnaireContent(questionnaire),children:[/*#__PURE__*/_jsx(\"div\",{className:\"card-icon\",children:\"\\uD83D\\uDCCB\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"card-content\",children:[/*#__PURE__*/_jsx(\"h3\",{children:questionnaire.displayName}),/*#__PURE__*/_jsx(\"p\",{className:\"card-path\",children:questionnaire.fullPath}),/*#__PURE__*/_jsxs(\"p\",{className:\"card-size\",children:[(questionnaire.size/1024).toFixed(1),\" KB\"]})]})]},questionnaire.name))})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"questionnaire-editor-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"editor-header\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>setEditing(false),className:\"back-to-list\",children:\"\\u2190 Back to List\"}),/*#__PURE__*/_jsx(\"h2\",{children:(selectedQuestionnaire===null||selectedQuestionnaire===void 0?void 0:selectedQuestionnaire.displayName)||'New Questionnaire'}),hasChanges&&/*#__PURE__*/_jsx(\"span\",{className:\"changes-indicator\",children:\"\\u2022 Unsaved changes\"})]}),!lformsLoaded?/*#__PURE__*/_jsx(\"div\",{className:\"lforms-loading\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Loading questionnaire editor...\"})}):/*#__PURE__*/_jsxs(\"div\",{className:\"lforms-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"questionnaire-preview\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Questionnaire Preview\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"questionnaire-metadata\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Title:\"}),\" \",(questionnaireContent===null||questionnaireContent===void 0?void 0:questionnaireContent.title)||'Untitled']}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Status:\"}),\" \",(questionnaireContent===null||questionnaireContent===void 0?void 0:questionnaireContent.status)||'draft']}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Date:\"}),\" \",(questionnaireContent===null||questionnaireContent===void 0?void 0:questionnaireContent.date)||'Not specified']}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Items:\"}),\" \",(questionnaireContent===null||questionnaireContent===void 0?void 0:(_questionnaireContent=questionnaireContent.item)===null||_questionnaireContent===void 0?void 0:_questionnaireContent.length)||0,\" questions\"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"questionnaire-json-editor\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Raw JSON Content\"}),/*#__PURE__*/_jsx(\"textarea\",{value:JSON.stringify(questionnaireContent,null,2),onChange:e=>{try{const newContent=JSON.parse(e.target.value);setQuestionnaireContent(newContent);setHasChanges(e.target.value!==originalContent);}catch(error){// Invalid JSON, don't update\nconsole.warn('Invalid JSON in editor');}},className:\"json-editor\",rows:20})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"editor-instructions\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Editing Instructions:\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Edit the JSON structure above to modify the questionnaire\"}),/*#__PURE__*/_jsx(\"li\",{children:\"The preview shows key questionnaire metadata\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Changes are automatically detected for saving\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Click \\\"Save to Staging\\\" to save changes locally\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Click \\\"Commit to GitHub\\\" to publish changes to the repository\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"help-tip\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\uD83D\\uDEA7 Note:\"}),\" LHC-Forms visual editor integration is coming soon for enhanced editing experience\"]})]})]})]})]}),/*#__PURE__*/_jsx(ContextualHelpMascot,{pageId:\"questionnaire-editor\",contextData:{repository:repository.name,branch:selectedBranch,hasQuestionnaires:questionnaires.length>0,isEditing:editing}})]})});};export default QuestionnaireEditor;","map":{"version":3,"names":["React","useState","useEffect","useMemo","useParams","useLocation","useNavigate","AssetEditorLayout","ContextualHelpMascot","githubService","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","QuestionnaireEditor","_location$state","_location$state3","_location$state4","_questionnaireContent","user","repo","branch","location","navigate","profile","state","repository","_location$state2","name","owner","login","full_name","selectedBranch","questionnaires","setQuestionnaires","selectedQuestionnaire","setSelectedQuestionnaire","loading","setLoading","error","setError","editing","setEditing","questionnaireContent","setQuestionnaireContent","originalContent","setOriginalContent","hasChanges","setHasChanges","lformsLoaded","setLformsLoaded","loadLForms","console","log","loadQuestionnaires","files","getDirectoryContents","questionnaireFiles","filter","file","type","endsWith","map","displayName","replace","fullPath","status","message","loadQuestionnaireContent","questionnaire","content","getFileContent","questionnaireData","JSON","parse","createNewQuestionnaire","newQuestionnaire","resourceType","id","Date","now","meta","versionId","lastUpdated","toISOString","url","title","date","split","publisher","description","item","linkId","text","required","stringify","isNew","handleSave","commitMessage","saveToGitHub","arguments","length","undefined","updateFile","sha","handleBackToDashboard","navigationState","pageName","children","className","onSave","showSaveButtons","onClick","disabled","size","toFixed","value","onChange","e","newContent","target","warn","rows","pageId","contextData","hasQuestionnaires","isEditing"],"sources":["/home/runner/work/sgex/sgex/src/components/QuestionnaireEditor.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\nimport { AssetEditorLayout } from './framework';\nimport ContextualHelpMascot from './ContextualHelpMascot';\nimport githubService from '../services/githubService';\nimport './QuestionnaireEditor.css';\n\nconst QuestionnaireEditor = () => {\n  const { user, repo, branch } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  \n  // Get context from location state or URL params - memoized to prevent re-renders\n  const profile = location.state?.profile;\n  const repository = useMemo(() => \n    location.state?.repository || {\n      name: repo,\n      owner: { login: user },\n      full_name: `${user}/${repo}`\n    }, [location.state?.repository, repo, user]\n  );\n  const selectedBranch = location.state?.selectedBranch || branch || 'main';\n  \n  // Component state\n  const [questionnaires, setQuestionnaires] = useState([]);\n  const [selectedQuestionnaire, setSelectedQuestionnaire] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [editing, setEditing] = useState(false);\n  const [questionnaireContent, setQuestionnaireContent] = useState(null);\n  const [originalContent, setOriginalContent] = useState(null);\n  const [hasChanges, setHasChanges] = useState(false);\n  \n  // LForms integration\n  const [lformsLoaded, setLformsLoaded] = useState(false);\n\n  // Load LForms library\n  useEffect(() => {\n    const loadLForms = async () => {\n      try {\n        // For now, mark as loaded to enable the interface\n        // TODO: Integrate LForms properly once we can test the import\n        console.log('LForms integration pending - using basic JSON editor for now');\n        setLformsLoaded(true);\n      } catch (error) {\n        console.error('Failed to load LForms:', error);\n        setError('Failed to load questionnaire editor. Please refresh the page.');\n      }\n    };\n\n    loadLForms();\n  }, []);\n\n  // Load questionnaires from repository\n  useEffect(() => {\n    const loadQuestionnaires = async () => {\n      if (!repository || !selectedBranch) return;\n      \n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Get all files from input/questionnaires directory\n        const files = await githubService.getDirectoryContents(\n          repository.owner.login,\n          repository.name,\n          'input/questionnaires',\n          selectedBranch\n        );\n        \n        // Filter for JSON files\n        const questionnaireFiles = files\n          .filter(file => file.type === 'file' && file.name.endsWith('.json'))\n          .map(file => ({\n            ...file,\n            displayName: file.name.replace('.json', ''),\n            fullPath: `input/questionnaires/${file.name}`\n          }));\n        \n        setQuestionnaires(questionnaireFiles);\n      } catch (error) {\n        console.error('Error loading questionnaires:', error);\n        if (error.status === 404) {\n          // Directory doesn't exist, start with empty array\n          setQuestionnaires([]);\n        } else {\n          setError(`Failed to load questionnaires: ${error.message}`);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadQuestionnaires();\n  }, [repository, selectedBranch]);\n\n  // Load questionnaire content\n  const loadQuestionnaireContent = async (questionnaire) => {\n    try {\n      setLoading(true);\n      const content = await githubService.getFileContent(\n        repository.owner.login,\n        repository.name,\n        questionnaire.fullPath,\n        selectedBranch\n      );\n      \n      const questionnaireData = JSON.parse(content);\n      setQuestionnaireContent(questionnaireData);\n      setOriginalContent(content);\n      setSelectedQuestionnaire(questionnaire);\n      setEditing(true);\n      setHasChanges(false);\n      \n      // TODO: Render in LForms when integration is complete\n      // For now, we'll use a basic JSON preview\n      console.log('Questionnaire loaded:', questionnaireData);\n    } catch (error) {\n      console.error('Error loading questionnaire content:', error);\n      setError(`Failed to load questionnaire: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create new questionnaire\n  const createNewQuestionnaire = () => {\n    const newQuestionnaire = {\n      resourceType: 'Questionnaire',\n      id: `questionnaire-${Date.now()}`,\n      meta: {\n        versionId: '1',\n        lastUpdated: new Date().toISOString()\n      },\n      url: `http://example.org/Questionnaire/${Date.now()}`,\n      name: 'NewQuestionnaire',\n      title: 'New Questionnaire',\n      status: 'draft',\n      date: new Date().toISOString().split('T')[0],\n      publisher: 'WHO SMART Guidelines',\n      description: 'A new FHIR Questionnaire',\n      item: [\n        {\n          linkId: '1',\n          text: 'Sample Question',\n          type: 'string',\n          required: false\n        }\n      ]\n    };\n\n    setQuestionnaireContent(newQuestionnaire);\n    setOriginalContent(JSON.stringify(newQuestionnaire, null, 2));\n    setSelectedQuestionnaire({\n      name: `${newQuestionnaire.name}.json`,\n      displayName: newQuestionnaire.name,\n      fullPath: `input/questionnaires/${newQuestionnaire.name}.json`,\n      isNew: true\n    });\n    setEditing(true);\n    setHasChanges(true);\n\n    // TODO: Render in LForms when integration is complete\n    console.log('New questionnaire created:', newQuestionnaire);\n  };\n\n  // Save questionnaire\n  const handleSave = async (commitMessage, saveToGitHub = false) => {\n    try {\n      const content = JSON.stringify(questionnaireContent, null, 2);\n      \n      if (saveToGitHub) {\n        await githubService.updateFile(\n          repository.owner.login,\n          repository.name,\n          selectedQuestionnaire.fullPath,\n          content,\n          commitMessage,\n          selectedQuestionnaire.sha,\n          selectedBranch\n        );\n        setHasChanges(false);\n        setOriginalContent(content);\n        \n        // Refresh questionnaires list\n        const files = await githubService.getDirectoryContents(\n          repository.owner.login,\n          repository.name,\n          'input/questionnaires',\n          selectedBranch\n        );\n        \n        const questionnaireFiles = files\n          .filter(file => file.type === 'file' && file.name.endsWith('.json'))\n          .map(file => ({\n            ...file,\n            displayName: file.name.replace('.json', ''),\n            fullPath: `input/questionnaires/${file.name}`\n          }));\n        \n        setQuestionnaires(questionnaireFiles);\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Error saving questionnaire:', error);\n      throw error;\n    }\n  };\n\n  // Navigate back to dashboard\n  const handleBackToDashboard = () => {\n    const navigationState = {\n      profile,\n      repository,\n      selectedBranch\n    };\n    navigate(`/dashboard/${repository.owner.login}/${repository.name}/${selectedBranch}`, {\n      state: navigationState\n    });\n  };\n\n  if (loading && !editing) {\n    return (\n      <AssetEditorLayout pageName=\"questionnaire-editor\">\n        <div className=\"questionnaire-editor-loading\">\n          <h2>Loading Questionnaires...</h2>\n          <p>Fetching questionnaire files from repository...</p>\n        </div>\n      </AssetEditorLayout>\n    );\n  }\n\n  return (\n    <AssetEditorLayout\n      pageName=\"questionnaire-editor\"\n      file={selectedQuestionnaire}\n      repository={repository}\n      branch={selectedBranch}\n      content={questionnaireContent ? JSON.stringify(questionnaireContent, null, 2) : null}\n      originalContent={originalContent}\n      hasChanges={hasChanges}\n      onSave={handleSave}\n      showSaveButtons={editing}\n    >\n      <div className=\"questionnaire-editor\">\n        <div className=\"questionnaire-header\">\n          <div className=\"header-content\">\n            <div className=\"breadcrumb\">\n              <button onClick={handleBackToDashboard} className=\"back-link\">\n                ← {repository.name}\n              </button>\n              <span className=\"separator\">/</span>\n              <span>Questionnaire Editor</span>\n              {selectedBranch && (\n                <>\n                  <span className=\"separator\">/</span>\n                  <span className=\"branch\">{selectedBranch}</span>\n                </>\n              )}\n            </div>\n            <h1>FHIR Questionnaire Editor</h1>\n            <p>Manage and edit FHIR Questionnaire assets for your DAK</p>\n          </div>\n        </div>\n\n        <div className=\"questionnaire-content\">\n          {error && (\n            <div className=\"error-message\">\n              <strong>Error:</strong> {error}\n            </div>\n          )}\n\n          {!editing ? (\n            <div className=\"questionnaire-list\">\n              <div className=\"list-header\">\n                <h2>Questionnaires ({questionnaires.length})</h2>\n                <button \n                  onClick={createNewQuestionnaire}\n                  className=\"btn-primary\"\n                  disabled={!lformsLoaded}\n                >\n                  + Create New Questionnaire\n                </button>\n              </div>\n\n              {questionnaires.length === 0 ? (\n                <div className=\"empty-state\">\n                  <div className=\"empty-icon\">📋</div>\n                  <h3>No Questionnaires Found</h3>\n                  <p>This repository doesn't have any FHIR Questionnaire files yet.</p>\n                  <p>Questionnaires should be stored in <code>input/questionnaires/*.json</code></p>\n                  <button \n                    onClick={createNewQuestionnaire}\n                    className=\"btn-primary\"\n                    disabled={!lformsLoaded}\n                  >\n                    Create Your First Questionnaire\n                  </button>\n                </div>\n              ) : (\n                <div className=\"questionnaire-grid\">\n                  {questionnaires.map((questionnaire) => (\n                    <div \n                      key={questionnaire.name}\n                      className=\"questionnaire-card\"\n                      onClick={() => loadQuestionnaireContent(questionnaire)}\n                    >\n                      <div className=\"card-icon\">📋</div>\n                      <div className=\"card-content\">\n                        <h3>{questionnaire.displayName}</h3>\n                        <p className=\"card-path\">{questionnaire.fullPath}</p>\n                        <p className=\"card-size\">{(questionnaire.size / 1024).toFixed(1)} KB</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"questionnaire-editor-container\">\n              <div className=\"editor-header\">\n                <button \n                  onClick={() => setEditing(false)}\n                  className=\"back-to-list\"\n                >\n                  ← Back to List\n                </button>\n                <h2>{selectedQuestionnaire?.displayName || 'New Questionnaire'}</h2>\n                {hasChanges && <span className=\"changes-indicator\">• Unsaved changes</span>}\n              </div>\n\n              {!lformsLoaded ? (\n                <div className=\"lforms-loading\">\n                  <p>Loading questionnaire editor...</p>\n                </div>\n              ) : (\n                <div className=\"lforms-container\">\n                  <div className=\"questionnaire-preview\">\n                    <h4>Questionnaire Preview</h4>\n                    <div className=\"questionnaire-metadata\">\n                      <p><strong>Title:</strong> {questionnaireContent?.title || 'Untitled'}</p>\n                      <p><strong>Status:</strong> {questionnaireContent?.status || 'draft'}</p>\n                      <p><strong>Date:</strong> {questionnaireContent?.date || 'Not specified'}</p>\n                      <p><strong>Items:</strong> {questionnaireContent?.item?.length || 0} questions</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"questionnaire-json-editor\">\n                    <h4>Raw JSON Content</h4>\n                    <textarea\n                      value={JSON.stringify(questionnaireContent, null, 2)}\n                      onChange={(e) => {\n                        try {\n                          const newContent = JSON.parse(e.target.value);\n                          setQuestionnaireContent(newContent);\n                          setHasChanges(e.target.value !== originalContent);\n                        } catch (error) {\n                          // Invalid JSON, don't update\n                          console.warn('Invalid JSON in editor');\n                        }\n                      }}\n                      className=\"json-editor\"\n                      rows={20}\n                    />\n                  </div>\n                  \n                  <div className=\"editor-instructions\">\n                    <h4>Editing Instructions:</h4>\n                    <ul>\n                      <li>Edit the JSON structure above to modify the questionnaire</li>\n                      <li>The preview shows key questionnaire metadata</li>\n                      <li>Changes are automatically detected for saving</li>\n                      <li>Click \"Save to Staging\" to save changes locally</li>\n                      <li>Click \"Commit to GitHub\" to publish changes to the repository</li>\n                    </ul>\n                    <div className=\"help-tip\">\n                      <strong>🚧 Note:</strong> LHC-Forms visual editor integration is coming soon for enhanced editing experience\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        <ContextualHelpMascot \n          pageId=\"questionnaire-editor\"\n          contextData={{\n            repository: repository.name,\n            branch: selectedBranch,\n            hasQuestionnaires: questionnaires.length > 0,\n            isEditing: editing\n          }}\n        />\n      </div>\n    </AssetEditorLayout>\n  );\n};\n\nexport default QuestionnaireEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}