{"ast":null,"code":"/**\n * Security utilities for XSS protection and input validation\n * Provides comprehensive sanitization and validation functions for user inputs\n *//**\n * HTML entity mapping for escaping dangerous characters\n */const HTML_ENTITIES={'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#x27;','/':'&#x2F;','`':'&#x60;','=':'&#x3D;'};/**\n * Escapes HTML entities to prevent XSS attacks\n * @param {string} input - The input string to escape\n * @returns {string} - The escaped string safe for HTML insertion\n */export const sanitizeHtml=input=>{if(typeof input!=='string'){return'';}return input.replace(/[&<>\"'`=/]/g,match=>HTML_ENTITIES[match]||match);};/**\n * Validates URL schemes to prevent dangerous redirects\n * Only allows http, https, and mailto schemes\n * @param {string} url - The URL to validate\n * @returns {boolean} - True if the URL is safe\n */export const validateUrlScheme=url=>{if(typeof url!=='string'){return false;}// Empty string or relative URLs are safe\nif(!url||url.startsWith('/')||url.startsWith('#')||url.startsWith('?')){return true;}try{const urlObj=new URL(url);const allowedSchemes=['http:','https:','mailto:'];return allowedSchemes.includes(urlObj.protocol.toLowerCase());}catch{// If URL constructor fails, treat as relative URL (safe)\nreturn!url.includes(':');}};/**\n * Validates repository, username, or branch names for GitHub\n * Prevents injection attacks via repository identifiers\n * @param {string} name - The name to validate\n * @param {string} type - The type of name ('user', 'repo', 'branch')\n * @returns {boolean} - True if the name is valid\n */export const validateRepositoryIdentifier=function(name){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'repo';if(typeof name!=='string'||!name){return false;}// Common restrictions for all types\nif(name.length>100||name.includes('..')){return false;}switch(type){case'user':// GitHub username rules: alphanumeric and hyphens, no consecutive hyphens\nreturn /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,37}[a-zA-Z0-9])?$/.test(name)&&!name.includes('--');case'repo':// GitHub repository name rules: alphanumeric, hyphens, underscores, dots\nreturn /^[a-zA-Z0-9._-]+$/.test(name)&&!name.startsWith('.')&&!name.endsWith('.')&&!name.startsWith('-')&&!name.endsWith('-');case'branch':// Git branch name rules: more permissive but prevent dangerous characters\nreturn /^[^\\s~^:?*[\\]\\\\@{}<>|\"';`$()]+$/.test(name)&&// eslint-disable-line no-useless-escape\n!name.startsWith('.')&&!name.endsWith('.')&&!name.includes('//')&&!name.includes('@{')&&name!=='HEAD';default:return false;}};/**\n * Validates and sanitizes file paths to prevent path traversal attacks\n * @param {string} path - The file path to validate\n * @param {string[]} allowedExtensions - Optional array of allowed file extensions\n * @returns {string|null} - Sanitized path or null if invalid\n */export const validateAndSanitizePath=function(path){let allowedExtensions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];if(typeof path!=='string'||!path){return null;}// Check for null bytes and control characters first\nif(/[\\u0000-\\u001f\\u007f-\\u009f]/.test(path)){// eslint-disable-line no-control-regex\nreturn null;}// Remove null bytes and normalize\nconst cleanPath=path.replace(/\\0/g,'').trim();// Prevent path traversal attacks\nif(cleanPath.includes('..')||cleanPath.includes('//')||cleanPath.startsWith('/')){return null;}// Check for dangerous file patterns\nconst dangerousPatterns=[/\\.(exe|bat|cmd|com|pif|scr|vbs|jar|dll)$/i,/^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\\.|$)/i,// Windows reserved names\n/\\.(htaccess|htpasswd|php|asp|jsp|cgi)$/i];if(dangerousPatterns.some(pattern=>pattern.test(cleanPath))){return null;}// Check allowed extensions if specified\nif(allowedExtensions.length>0){const hasAllowedExtension=allowedExtensions.some(ext=>cleanPath.toLowerCase().endsWith(ext.toLowerCase()));if(!hasAllowedExtension){return null;}}return cleanPath;};/**\n * Comprehensive input sanitization function\n * Applies appropriate sanitization based on the input type\n * @param {any} input - The input to sanitize\n * @param {string} type - The type of input ('html', 'url', 'user', 'repo', 'branch', 'path')\n * @param {Object} options - Additional options for specific types\n * @returns {string|null} - Sanitized input or null if invalid\n */export const sanitizeInput=function(input){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'html';let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(input===null||input===undefined){return null;}const inputStr=String(input);switch(type){case'html':return sanitizeHtml(inputStr);case'url':return validateUrlScheme(inputStr)?inputStr:null;case'user':return validateRepositoryIdentifier(inputStr,'user')?inputStr:null;case'repo':return validateRepositoryIdentifier(inputStr,'repo')?inputStr:null;case'branch':return validateRepositoryIdentifier(inputStr,'branch')?inputStr:null;case'path':return validateAndSanitizePath(inputStr,options.allowedExtensions);default:// Default to HTML sanitization for unknown types\nreturn sanitizeHtml(inputStr);}};/**\n * Safe HTML creator that prevents XSS while allowing basic formatting\n * Creates HTML elements with sanitized content\n * @param {string} tag - The HTML tag to create\n * @param {string} content - The content to sanitize and insert\n * @param {Object} attributes - Safe attributes to add to the element\n * @returns {string} - Safe HTML string\n */export const createSafeHtml=function(tag,content){let attributes=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(typeof tag!=='string'||typeof content!=='string'){return'';}// Only allow safe HTML tags\nconst allowedTags=['div','span','p','br','strong','em','code','pre','h1','h2','h3','h4','h5','h6'];if(!allowedTags.includes(tag.toLowerCase())){tag='div';}const sanitizedContent=sanitizeHtml(content);// Sanitize attributes\nconst safeAttributes=Object.entries(attributes).filter(_ref=>{let[key]=_ref;return /^[a-zA-Z-]+$/.test(key)&&!key.startsWith('on');})// No event handlers\n.map(_ref2=>{let[key,value]=_ref2;return`${key}=\"${sanitizeHtml(String(value))}\"`;}).join(' ');const attributeStr=safeAttributes?` ${safeAttributes}`:'';return`<${tag}${attributeStr}>${sanitizedContent}</${tag}>`;};/**\n * Validates GitHub API parameters to prevent injection attacks\n * @param {Object} params - Object containing GitHub API parameters\n * @returns {Object|null} - Validated parameters or null if invalid\n */export const validateGitHubApiParams=params=>{if(!params||typeof params!=='object'){return null;}const validatedParams={};// Validate common GitHub API parameters\nif(params.owner){const sanitizedOwner=sanitizeInput(params.owner,'user');if(!sanitizedOwner)return null;validatedParams.owner=sanitizedOwner;}if(params.repo){const sanitizedRepo=sanitizeInput(params.repo,'repo');if(!sanitizedRepo)return null;validatedParams.repo=sanitizedRepo;}if(params.branch){const sanitizedBranch=sanitizeInput(params.branch,'branch');if(!sanitizedBranch)return null;validatedParams.branch=sanitizedBranch;}if(params.path){const sanitizedPath=sanitizeInput(params.path,'path');if(sanitizedPath===null)return null;validatedParams.path=sanitizedPath;}// Copy other string parameters with HTML sanitization\nObject.entries(params).forEach(_ref3=>{let[key,value]=_ref3;if(!validatedParams[key]&&typeof value==='string'){validatedParams[key]=sanitizeHtml(value);}else if(!validatedParams[key]){validatedParams[key]=value;}});return validatedParams;};const securityUtils={sanitizeHtml,validateUrlScheme,validateRepositoryIdentifier,validateAndSanitizePath,sanitizeInput,createSafeHtml,validateGitHubApiParams};export default securityUtils;","map":{"version":3,"names":["HTML_ENTITIES","sanitizeHtml","input","replace","match","validateUrlScheme","url","startsWith","urlObj","URL","allowedSchemes","includes","protocol","toLowerCase","validateRepositoryIdentifier","name","type","arguments","length","undefined","test","endsWith","validateAndSanitizePath","path","allowedExtensions","cleanPath","trim","dangerousPatterns","some","pattern","hasAllowedExtension","ext","sanitizeInput","options","inputStr","String","createSafeHtml","tag","content","attributes","allowedTags","sanitizedContent","safeAttributes","Object","entries","filter","_ref","key","map","_ref2","value","join","attributeStr","validateGitHubApiParams","params","validatedParams","owner","sanitizedOwner","repo","sanitizedRepo","branch","sanitizedBranch","sanitizedPath","forEach","_ref3","securityUtils"],"sources":["/home/runner/work/sgex/sgex/src/utils/securityUtils.js"],"sourcesContent":["/**\n * Security utilities for XSS protection and input validation\n * Provides comprehensive sanitization and validation functions for user inputs\n */\n\n/**\n * HTML entity mapping for escaping dangerous characters\n */\nconst HTML_ENTITIES = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\n/**\n * Escapes HTML entities to prevent XSS attacks\n * @param {string} input - The input string to escape\n * @returns {string} - The escaped string safe for HTML insertion\n */\nexport const sanitizeHtml = (input) => {\n  if (typeof input !== 'string') {\n    return '';\n  }\n  \n  return input.replace(/[&<>\"'`=/]/g, (match) => HTML_ENTITIES[match] || match);\n};\n\n/**\n * Validates URL schemes to prevent dangerous redirects\n * Only allows http, https, and mailto schemes\n * @param {string} url - The URL to validate\n * @returns {boolean} - True if the URL is safe\n */\nexport const validateUrlScheme = (url) => {\n  if (typeof url !== 'string') {\n    return false;\n  }\n  \n  // Empty string or relative URLs are safe\n  if (!url || url.startsWith('/') || url.startsWith('#') || url.startsWith('?')) {\n    return true;\n  }\n  \n  try {\n    const urlObj = new URL(url);\n    const allowedSchemes = ['http:', 'https:', 'mailto:'];\n    return allowedSchemes.includes(urlObj.protocol.toLowerCase());\n  } catch {\n    // If URL constructor fails, treat as relative URL (safe)\n    return !url.includes(':');\n  }\n};\n\n/**\n * Validates repository, username, or branch names for GitHub\n * Prevents injection attacks via repository identifiers\n * @param {string} name - The name to validate\n * @param {string} type - The type of name ('user', 'repo', 'branch')\n * @returns {boolean} - True if the name is valid\n */\nexport const validateRepositoryIdentifier = (name, type = 'repo') => {\n  if (typeof name !== 'string' || !name) {\n    return false;\n  }\n  \n  // Common restrictions for all types\n  if (name.length > 100 || name.includes('..')) {\n    return false;\n  }\n  \n  switch (type) {\n    case 'user':\n      // GitHub username rules: alphanumeric and hyphens, no consecutive hyphens\n      return /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,37}[a-zA-Z0-9])?$/.test(name) && !name.includes('--');\n      \n    case 'repo':\n      // GitHub repository name rules: alphanumeric, hyphens, underscores, dots\n      return /^[a-zA-Z0-9._-]+$/.test(name) && \n             !name.startsWith('.') && \n             !name.endsWith('.') &&\n             !name.startsWith('-') &&\n             !name.endsWith('-');\n      \n    case 'branch':\n      // Git branch name rules: more permissive but prevent dangerous characters\n      return /^[^\\s~^:?*[\\]\\\\@{}<>|\"';`$()]+$/.test(name) && // eslint-disable-line no-useless-escape\n             !name.startsWith('.') &&\n             !name.endsWith('.') &&\n             !name.includes('//') &&\n             !name.includes('@{') &&\n             name !== 'HEAD';\n      \n    default:\n      return false;\n  }\n};\n\n/**\n * Validates and sanitizes file paths to prevent path traversal attacks\n * @param {string} path - The file path to validate\n * @param {string[]} allowedExtensions - Optional array of allowed file extensions\n * @returns {string|null} - Sanitized path or null if invalid\n */\nexport const validateAndSanitizePath = (path, allowedExtensions = []) => {\n  if (typeof path !== 'string' || !path) {\n    return null;\n  }\n  \n  // Check for null bytes and control characters first\n  if (/[\\u0000-\\u001f\\u007f-\\u009f]/.test(path)) { // eslint-disable-line no-control-regex\n    return null;\n  }\n  \n  // Remove null bytes and normalize\n  const cleanPath = path.replace(/\\0/g, '').trim();\n  \n  // Prevent path traversal attacks\n  if (cleanPath.includes('..') || \n      cleanPath.includes('//') ||\n      cleanPath.startsWith('/')) {\n    return null;\n  }\n  \n  // Check for dangerous file patterns\n  const dangerousPatterns = [\n    /\\.(exe|bat|cmd|com|pif|scr|vbs|jar|dll)$/i,\n    /^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\\.|$)/i, // Windows reserved names\n    /\\.(htaccess|htpasswd|php|asp|jsp|cgi)$/i\n  ];\n  \n  if (dangerousPatterns.some(pattern => pattern.test(cleanPath))) {\n    return null;\n  }\n  \n  // Check allowed extensions if specified\n  if (allowedExtensions.length > 0) {\n    const hasAllowedExtension = allowedExtensions.some(ext => \n      cleanPath.toLowerCase().endsWith(ext.toLowerCase())\n    );\n    if (!hasAllowedExtension) {\n      return null;\n    }\n  }\n  \n  return cleanPath;\n};\n\n/**\n * Comprehensive input sanitization function\n * Applies appropriate sanitization based on the input type\n * @param {any} input - The input to sanitize\n * @param {string} type - The type of input ('html', 'url', 'user', 'repo', 'branch', 'path')\n * @param {Object} options - Additional options for specific types\n * @returns {string|null} - Sanitized input or null if invalid\n */\nexport const sanitizeInput = (input, type = 'html', options = {}) => {\n  if (input === null || input === undefined) {\n    return null;\n  }\n  \n  const inputStr = String(input);\n  \n  switch (type) {\n    case 'html':\n      return sanitizeHtml(inputStr);\n      \n    case 'url':\n      return validateUrlScheme(inputStr) ? inputStr : null;\n      \n    case 'user':\n      return validateRepositoryIdentifier(inputStr, 'user') ? inputStr : null;\n      \n    case 'repo':\n      return validateRepositoryIdentifier(inputStr, 'repo') ? inputStr : null;\n      \n    case 'branch':\n      return validateRepositoryIdentifier(inputStr, 'branch') ? inputStr : null;\n      \n    case 'path':\n      return validateAndSanitizePath(inputStr, options.allowedExtensions);\n      \n    default:\n      // Default to HTML sanitization for unknown types\n      return sanitizeHtml(inputStr);\n  }\n};\n\n/**\n * Safe HTML creator that prevents XSS while allowing basic formatting\n * Creates HTML elements with sanitized content\n * @param {string} tag - The HTML tag to create\n * @param {string} content - The content to sanitize and insert\n * @param {Object} attributes - Safe attributes to add to the element\n * @returns {string} - Safe HTML string\n */\nexport const createSafeHtml = (tag, content, attributes = {}) => {\n  if (typeof tag !== 'string' || typeof content !== 'string') {\n    return '';\n  }\n  \n  // Only allow safe HTML tags\n  const allowedTags = ['div', 'span', 'p', 'br', 'strong', 'em', 'code', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n  if (!allowedTags.includes(tag.toLowerCase())) {\n    tag = 'div';\n  }\n  \n  const sanitizedContent = sanitizeHtml(content);\n  \n  // Sanitize attributes\n  const safeAttributes = Object.entries(attributes)\n    .filter(([key]) => /^[a-zA-Z-]+$/.test(key) && !key.startsWith('on')) // No event handlers\n    .map(([key, value]) => `${key}=\"${sanitizeHtml(String(value))}\"`)\n    .join(' ');\n  \n  const attributeStr = safeAttributes ? ` ${safeAttributes}` : '';\n  \n  return `<${tag}${attributeStr}>${sanitizedContent}</${tag}>`;\n};\n\n/**\n * Validates GitHub API parameters to prevent injection attacks\n * @param {Object} params - Object containing GitHub API parameters\n * @returns {Object|null} - Validated parameters or null if invalid\n */\nexport const validateGitHubApiParams = (params) => {\n  if (!params || typeof params !== 'object') {\n    return null;\n  }\n  \n  const validatedParams = {};\n  \n  // Validate common GitHub API parameters\n  if (params.owner) {\n    const sanitizedOwner = sanitizeInput(params.owner, 'user');\n    if (!sanitizedOwner) return null;\n    validatedParams.owner = sanitizedOwner;\n  }\n  \n  if (params.repo) {\n    const sanitizedRepo = sanitizeInput(params.repo, 'repo');\n    if (!sanitizedRepo) return null;\n    validatedParams.repo = sanitizedRepo;\n  }\n  \n  if (params.branch) {\n    const sanitizedBranch = sanitizeInput(params.branch, 'branch');\n    if (!sanitizedBranch) return null;\n    validatedParams.branch = sanitizedBranch;\n  }\n  \n  if (params.path) {\n    const sanitizedPath = sanitizeInput(params.path, 'path');\n    if (sanitizedPath === null) return null;\n    validatedParams.path = sanitizedPath;\n  }\n  \n  // Copy other string parameters with HTML sanitization\n  Object.entries(params).forEach(([key, value]) => {\n    if (!validatedParams[key] && typeof value === 'string') {\n      validatedParams[key] = sanitizeHtml(value);\n    } else if (!validatedParams[key]) {\n      validatedParams[key] = value;\n    }\n  });\n  \n  return validatedParams;\n};\n\nconst securityUtils = {\n  sanitizeHtml,\n  validateUrlScheme,\n  validateRepositoryIdentifier,\n  validateAndSanitizePath,\n  sanitizeInput,\n  createSafeHtml,\n  validateGitHubApiParams\n};\n\nexport default securityUtils;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}