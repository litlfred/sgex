{"ast":null,"code":"import { forEach, isArray } from 'min-dash';\n\n/**\n * @typedef {import('didi').Injector} Injector\n *\n * @typedef {import('../../core/EventBus').default} EventBus\n */\n\nvar NOT_REGISTERED_ERROR = 'is not a registered action',\n  IS_REGISTERED_ERROR = 'is already registered';\n\n/**\n * An interface that provides access to modeling actions by decoupling\n * the one who requests the action to be triggered and the trigger itself.\n *\n * It's possible to add new actions by registering them with ´registerAction´\n * and likewise unregister existing ones with ´unregisterAction´.\n *\n *\n * ## Life-Cycle and configuration\n *\n * The editor actions will wait for diagram initialization before\n * registering default actions _and_ firing an `editorActions.init` event.\n *\n * Interested parties may listen to the `editorActions.init` event with\n * low priority to check, which actions got registered. Other components\n * may use the event to register their own actions via `registerAction`.\n *\n * @param {EventBus} eventBus\n * @param {Injector} injector\n */\nexport default function EditorActions(eventBus, injector) {\n  // initialize actions\n  this._actions = {};\n  var self = this;\n  eventBus.on('diagram.init', function () {\n    // all diagram modules got loaded; check which ones\n    // are available and register the respective default actions\n    self._registerDefaultActions(injector);\n\n    // ask interested parties to register available editor\n    // actions on diagram initialization\n    eventBus.fire('editorActions.init', {\n      editorActions: self\n    });\n  });\n}\nEditorActions.$inject = ['eventBus', 'injector'];\n\n/**\n * Register default actions.\n *\n * @param {Injector} injector\n */\nEditorActions.prototype._registerDefaultActions = function (injector) {\n  // (1) retrieve optional components to integrate with\n\n  var commandStack = injector.get('commandStack', false);\n  var modeling = injector.get('modeling', false);\n  var selection = injector.get('selection', false);\n  var zoomScroll = injector.get('zoomScroll', false);\n  var copyPaste = injector.get('copyPaste', false);\n  var canvas = injector.get('canvas', false);\n  var rules = injector.get('rules', false);\n  var keyboardMove = injector.get('keyboardMove', false);\n  var keyboardMoveSelection = injector.get('keyboardMoveSelection', false);\n\n  // (2) check components and register actions\n\n  if (commandStack) {\n    this.register('undo', function () {\n      commandStack.undo();\n    });\n    this.register('redo', function () {\n      commandStack.redo();\n    });\n  }\n  if (copyPaste && selection) {\n    this.register('copy', function () {\n      var selectedElements = selection.get();\n      if (selectedElements.length) {\n        return copyPaste.copy(selectedElements);\n      }\n    });\n  }\n  if (copyPaste) {\n    this.register('paste', function () {\n      copyPaste.paste();\n    });\n  }\n  if (zoomScroll) {\n    this.register('stepZoom', function (opts) {\n      zoomScroll.stepZoom(opts.value);\n    });\n  }\n  if (canvas) {\n    this.register('zoom', function (opts) {\n      canvas.zoom(opts.value);\n    });\n  }\n  if (modeling && selection && rules) {\n    this.register('removeSelection', function () {\n      var selectedElements = selection.get();\n      if (!selectedElements.length) {\n        return;\n      }\n      var allowed = rules.allowed('elements.delete', {\n          elements: selectedElements\n        }),\n        removableElements;\n      if (allowed === false) {\n        return;\n      } else if (isArray(allowed)) {\n        removableElements = allowed;\n      } else {\n        removableElements = selectedElements;\n      }\n      if (removableElements.length) {\n        modeling.removeElements(removableElements.slice());\n      }\n    });\n  }\n  if (keyboardMove) {\n    this.register('moveCanvas', function (opts) {\n      keyboardMove.moveCanvas(opts);\n    });\n  }\n  if (keyboardMoveSelection) {\n    this.register('moveSelection', function (opts) {\n      keyboardMoveSelection.moveSelection(opts.direction, opts.accelerated);\n    });\n  }\n};\n\n/**\n * Triggers a registered action\n *\n * @param {string} action\n * @param {Object} opts\n *\n * @return {unknown} Returns what the registered listener returns\n */\nEditorActions.prototype.trigger = function (action, opts) {\n  if (!this._actions[action]) {\n    throw error(action, NOT_REGISTERED_ERROR);\n  }\n  return this._actions[action](opts);\n};\n\n/**\n * Registers a collections of actions.\n * The key of the object will be the name of the action.\n *\n * @example\n *\n * ```javascript\n * var actions = {\n *   spaceTool: function() {\n *     spaceTool.activateSelection();\n *   },\n *   lassoTool: function() {\n *     lassoTool.activateSelection();\n *   }\n * ];\n *\n * editorActions.register(actions);\n *\n * editorActions.isRegistered('spaceTool'); // true\n * ```\n *\n * @param {Object} actions\n */\nEditorActions.prototype.register = function (actions, listener) {\n  var self = this;\n  if (typeof actions === 'string') {\n    return this._registerAction(actions, listener);\n  }\n  forEach(actions, function (listener, action) {\n    self._registerAction(action, listener);\n  });\n};\n\n/**\n * Registers a listener to an action key\n *\n * @param {string} action\n * @param {Function} listener\n */\nEditorActions.prototype._registerAction = function (action, listener) {\n  if (this.isRegistered(action)) {\n    throw error(action, IS_REGISTERED_ERROR);\n  }\n  this._actions[action] = listener;\n};\n\n/**\n * Unregister an existing action\n *\n * @param {string} action\n */\nEditorActions.prototype.unregister = function (action) {\n  if (!this.isRegistered(action)) {\n    throw error(action, NOT_REGISTERED_ERROR);\n  }\n  this._actions[action] = undefined;\n};\n\n/**\n * Returns the identifiers of all currently registered editor actions\n *\n * @return {string[]}\n */\nEditorActions.prototype.getActions = function () {\n  return Object.keys(this._actions);\n};\n\n/**\n * Checks wether the given action is registered\n *\n * @param {string} action\n *\n * @return {boolean}\n */\nEditorActions.prototype.isRegistered = function (action) {\n  return !!this._actions[action];\n};\nfunction error(action, message) {\n  return new Error(action + ' ' + message);\n}","map":{"version":3,"names":["forEach","isArray","NOT_REGISTERED_ERROR","IS_REGISTERED_ERROR","EditorActions","eventBus","injector","_actions","self","on","_registerDefaultActions","fire","editorActions","$inject","prototype","commandStack","get","modeling","selection","zoomScroll","copyPaste","canvas","rules","keyboardMove","keyboardMoveSelection","register","undo","redo","selectedElements","length","copy","paste","opts","stepZoom","value","zoom","allowed","elements","removableElements","removeElements","slice","moveCanvas","moveSelection","direction","accelerated","trigger","action","error","actions","listener","_registerAction","isRegistered","unregister","undefined","getActions","Object","keys","message","Error"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/editor-actions/EditorActions.js"],"sourcesContent":["import {\n  forEach,\n  isArray\n} from 'min-dash';\n\n/**\n * @typedef {import('didi').Injector} Injector\n *\n * @typedef {import('../../core/EventBus').default} EventBus\n */\n\nvar NOT_REGISTERED_ERROR = 'is not a registered action',\n    IS_REGISTERED_ERROR = 'is already registered';\n\n\n/**\n * An interface that provides access to modeling actions by decoupling\n * the one who requests the action to be triggered and the trigger itself.\n *\n * It's possible to add new actions by registering them with ´registerAction´\n * and likewise unregister existing ones with ´unregisterAction´.\n *\n *\n * ## Life-Cycle and configuration\n *\n * The editor actions will wait for diagram initialization before\n * registering default actions _and_ firing an `editorActions.init` event.\n *\n * Interested parties may listen to the `editorActions.init` event with\n * low priority to check, which actions got registered. Other components\n * may use the event to register their own actions via `registerAction`.\n *\n * @param {EventBus} eventBus\n * @param {Injector} injector\n */\nexport default function EditorActions(eventBus, injector) {\n\n  // initialize actions\n  this._actions = {};\n\n  var self = this;\n\n  eventBus.on('diagram.init', function() {\n\n    // all diagram modules got loaded; check which ones\n    // are available and register the respective default actions\n    self._registerDefaultActions(injector);\n\n    // ask interested parties to register available editor\n    // actions on diagram initialization\n    eventBus.fire('editorActions.init', {\n      editorActions: self\n    });\n  });\n\n}\n\nEditorActions.$inject = [\n  'eventBus',\n  'injector'\n];\n\n/**\n * Register default actions.\n *\n * @param {Injector} injector\n */\nEditorActions.prototype._registerDefaultActions = function(injector) {\n\n  // (1) retrieve optional components to integrate with\n\n  var commandStack = injector.get('commandStack', false);\n  var modeling = injector.get('modeling', false);\n  var selection = injector.get('selection', false);\n  var zoomScroll = injector.get('zoomScroll', false);\n  var copyPaste = injector.get('copyPaste', false);\n  var canvas = injector.get('canvas', false);\n  var rules = injector.get('rules', false);\n  var keyboardMove = injector.get('keyboardMove', false);\n  var keyboardMoveSelection = injector.get('keyboardMoveSelection', false);\n\n  // (2) check components and register actions\n\n  if (commandStack) {\n    this.register('undo', function() {\n      commandStack.undo();\n    });\n\n    this.register('redo', function() {\n      commandStack.redo();\n    });\n  }\n\n  if (copyPaste && selection) {\n    this.register('copy', function() {\n      var selectedElements = selection.get();\n\n      if (selectedElements.length) {\n        return copyPaste.copy(selectedElements);\n      }\n    });\n  }\n\n  if (copyPaste) {\n    this.register('paste', function() {\n      copyPaste.paste();\n    });\n  }\n\n  if (zoomScroll) {\n    this.register('stepZoom', function(opts) {\n      zoomScroll.stepZoom(opts.value);\n    });\n  }\n\n  if (canvas) {\n    this.register('zoom', function(opts) {\n      canvas.zoom(opts.value);\n    });\n  }\n\n  if (modeling && selection && rules) {\n    this.register('removeSelection', function() {\n\n      var selectedElements = selection.get();\n\n      if (!selectedElements.length) {\n        return;\n      }\n\n      var allowed = rules.allowed('elements.delete', { elements: selectedElements }),\n          removableElements;\n\n      if (allowed === false) {\n        return;\n      }\n      else if (isArray(allowed)) {\n        removableElements = allowed;\n      }\n      else {\n        removableElements = selectedElements;\n      }\n\n      if (removableElements.length) {\n        modeling.removeElements(removableElements.slice());\n      }\n    });\n  }\n\n  if (keyboardMove) {\n    this.register('moveCanvas', function(opts) {\n      keyboardMove.moveCanvas(opts);\n    });\n  }\n\n  if (keyboardMoveSelection) {\n    this.register('moveSelection', function(opts) {\n      keyboardMoveSelection.moveSelection(opts.direction, opts.accelerated);\n    });\n  }\n\n};\n\n\n/**\n * Triggers a registered action\n *\n * @param {string} action\n * @param {Object} opts\n *\n * @return {unknown} Returns what the registered listener returns\n */\nEditorActions.prototype.trigger = function(action, opts) {\n  if (!this._actions[action]) {\n    throw error(action, NOT_REGISTERED_ERROR);\n  }\n\n  return this._actions[action](opts);\n};\n\n\n/**\n * Registers a collections of actions.\n * The key of the object will be the name of the action.\n *\n * @example\n *\n * ```javascript\n * var actions = {\n *   spaceTool: function() {\n *     spaceTool.activateSelection();\n *   },\n *   lassoTool: function() {\n *     lassoTool.activateSelection();\n *   }\n * ];\n *\n * editorActions.register(actions);\n *\n * editorActions.isRegistered('spaceTool'); // true\n * ```\n *\n * @param {Object} actions\n */\nEditorActions.prototype.register = function(actions, listener) {\n  var self = this;\n\n  if (typeof actions === 'string') {\n    return this._registerAction(actions, listener);\n  }\n\n  forEach(actions, function(listener, action) {\n    self._registerAction(action, listener);\n  });\n};\n\n/**\n * Registers a listener to an action key\n *\n * @param {string} action\n * @param {Function} listener\n */\nEditorActions.prototype._registerAction = function(action, listener) {\n  if (this.isRegistered(action)) {\n    throw error(action, IS_REGISTERED_ERROR);\n  }\n\n  this._actions[action] = listener;\n};\n\n/**\n * Unregister an existing action\n *\n * @param {string} action\n */\nEditorActions.prototype.unregister = function(action) {\n  if (!this.isRegistered(action)) {\n    throw error(action, NOT_REGISTERED_ERROR);\n  }\n\n  this._actions[action] = undefined;\n};\n\n/**\n * Returns the identifiers of all currently registered editor actions\n *\n * @return {string[]}\n */\nEditorActions.prototype.getActions = function() {\n  return Object.keys(this._actions);\n};\n\n/**\n * Checks wether the given action is registered\n *\n * @param {string} action\n *\n * @return {boolean}\n */\nEditorActions.prototype.isRegistered = function(action) {\n  return !!this._actions[action];\n};\n\n\nfunction error(action, message) {\n  return new Error(action + ' ' + message);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}