{"ast":null,"code":"import React,{useState,useEffect,useRef,useCallback,useMemo}from'react';import{useLocation,useNavigate}from'react-router-dom';import BpmnViewer from'bpmn-js/lib/NavigatedViewer';import githubService from'../services/githubService';import{PageLayout,useDAKParams}from'./framework';import'./BPMNViewer.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BPMNViewerComponent=()=>{const location=useLocation();const navigate=useNavigate();const viewerRef=useRef(null);const containerRef=useRef(null);// Try to get data from framework params first, then fall back to location state\nconst frameworkData=useDAKParams();console.log('BPMNViewer: Framework data received:',frameworkData);console.log('BPMNViewer: Location state:',location.state);const{profile,repository,component,selectedFile,selectedBranch}=location.state||{};// Use framework data if available, otherwise use location state\nconst currentProfile=(frameworkData===null||frameworkData===void 0?void 0:frameworkData.profile)||profile;const currentRepository=(frameworkData===null||frameworkData===void 0?void 0:frameworkData.repository)||repository;const currentBranch=(frameworkData===null||frameworkData===void 0?void 0:frameworkData.branch)||selectedBranch;const assetPath=frameworkData===null||frameworkData===void 0?void 0:frameworkData.asset;console.log('BPMNViewer: Final computed values:',{currentProfile:!!currentProfile,currentRepository:!!currentRepository,currentBranch,assetPath});// If we have asset path from URL, create a selectedFile object\nconst currentSelectedFile=useMemo(()=>{return assetPath?{name:assetPath.split('/').pop(),path:assetPath}:selectedFile;},[assetPath,selectedFile]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[hasWriteAccess,setHasWriteAccess]=useState(false);const[enhancedFullwidth,setEnhancedFullwidth]=useState(false);const[autoHide,setAutoHide]=useState(false);// Check write permissions\nuseEffect(()=>{const checkPermissions=async()=>{if(currentRepository&&currentProfile){try{var _currentRepository$pe;// Simple permission check - in real app, this would use githubService\nconst writeAccess=currentProfile.token&&((_currentRepository$pe=currentRepository.permissions)===null||_currentRepository$pe===void 0?void 0:_currentRepository$pe.push);setHasWriteAccess(writeAccess||false);}catch(error){console.warn('Could not check write permissions:',error);setHasWriteAccess(false);}}};checkPermissions();},[currentRepository,currentProfile]);// Load BPMN file content\nconst loadBpmnContent=useCallback(async()=>{var _currentRepository$ow;console.log('🚀 BPMNViewer: loadBpmnContent called with:',{hasViewer:!!viewerRef.current,selectedFile:currentSelectedFile,repository:currentRepository?{name:currentRepository.name,owner:currentRepository.owner}:null});if(!viewerRef.current||!currentSelectedFile||!currentRepository){console.warn('❌ BPMNViewer: Missing required parameters for loadBpmnContent:',{hasViewer:!!viewerRef.current,hasSelectedFile:!!currentSelectedFile,hasRepository:!!currentRepository});return;}// Declare variables outside try block so they're accessible in catch block\nconst owner=((_currentRepository$ow=currentRepository.owner)===null||_currentRepository$ow===void 0?void 0:_currentRepository$ow.login)||currentRepository.full_name.split('/')[0];const repoName=currentRepository.name;const ref=currentBranch||'main';try{console.log('📡 BPMNViewer: Setting loading state to true');setLoading(true);setError(null);console.log('🔍 BPMNViewer: Repository and file analysis:',{repository:{name:currentRepository.name,full_name:currentRepository.full_name,owner:currentRepository.owner,isDemo:currentRepository.isDemo,default_branch:currentRepository.default_branch},selectedFile:{name:currentSelectedFile.name,path:currentSelectedFile.path,size:currentSelectedFile.size},derivedOwner:owner,repoName:repoName,ref:ref,githubServiceAuthenticated:githubService.isAuth()});console.log(`📂 BPMNViewer: Preparing to load BPMN content from ${owner}/${repoName}:${currentSelectedFile.path} (ref: ${ref})`);console.log('📋 BPMNViewer: Full selected file object:',JSON.stringify(currentSelectedFile,null,2));// Add a timeout for the entire loading process\nconsole.log('⏰ BPMNViewer: Setting up 30-second timeout for loading process');const loadingTimeout=setTimeout(()=>{console.error('⏰ BPMNViewer: Loading process timed out after 30 seconds');setError('Loading timed out. Please try again or check your internet connection.');setLoading(false);},30000);// 30 second timeout\ntry{// Use githubService to fetch file content (works for both public and private repos)\nconsole.log(`🌐 BPMNViewer: About to call githubService.getFileContent with params:`,{owner,repoName,path:currentSelectedFile.path,ref});console.log('🌐 BPMNViewer: Making GitHub API call...');const startTime=Date.now();const bpmnXml=await githubService.getFileContent(owner,repoName,currentSelectedFile.path,ref);const endTime=Date.now();console.log(`✅ BPMNViewer: Successfully loaded BPMN content from repository in ${endTime-startTime}ms`);console.log('📏 BPMNViewer: Content length:',bpmnXml.length);console.log('👀 BPMNViewer: Content preview (first 200 chars):',bpmnXml.substring(0,200));console.log('🔍 BPMNViewer: Content type check - contains bpmn:definitions:',bpmnXml.includes('bpmn:definitions'));console.log('🔍 BPMNViewer: Content type check - contains <definitions:',bpmnXml.includes('<definitions'));// Validate that we got valid BPMN XML content\nif(!bpmnXml||!bpmnXml.trim()){console.error('❌ BPMNViewer: Empty or invalid BPMN file content received');throw new Error('Empty or invalid BPMN file content');}if(!bpmnXml.includes('bpmn:definitions')&&!bpmnXml.includes('<definitions')){console.error('❌ BPMNViewer: File does not contain valid BPMN XML content');console.error('🔍 BPMNViewer: Content preview for debugging:',bpmnXml.substring(0,500));throw new Error('File does not appear to contain valid BPMN XML content');}// Load the BPMN diagram\nconsole.log('🎨 BPMNViewer: Attempting to import XML into BPMN viewer...');await viewerRef.current.importXML(bpmnXml);console.log('✅ BPMNViewer: Successfully imported BPMN XML into viewer');// Center the diagram in the viewer\ntry{console.log('🎯 BPMNViewer: Attempting to center diagram in viewport...');const canvas=viewerRef.current.get('canvas');canvas.zoom('fit-viewport');console.log('✅ BPMNViewer: Successfully centered BPMN diagram in viewport');}catch(centerError){console.warn('⚠️ BPMNViewer: Could not center diagram:',centerError);// This is not a critical error, continue\n}clearTimeout(loadingTimeout);console.log('🎉 BPMNViewer: BPMN loading completed successfully, setting loading to false');setLoading(false);}catch(contentError){clearTimeout(loadingTimeout);console.error('❌ BPMNViewer: Error during file content processing:',contentError);throw contentError;}}catch(err){console.error('💥 BPMNViewer: Error loading BPMN file:',err);console.error('🔍 BPMNViewer: Full error details:',{message:err.message,status:err.status,stack:err.stack,repository:{owner:owner,name:repoName,ref:ref},file:{name:currentSelectedFile.name,path:currentSelectedFile.path}});// Provide specific error messages based on the error type\nif(err.message.includes('timeout')||err.message.includes('timed out')){console.error('⏰ BPMNViewer: Timeout error detected');setError('Loading timed out. Please check your internet connection and try again.');}else if(err.status===404){console.error('🔍 BPMNViewer: 404 error detected - file not found');setError('BPMN file not found in the repository. The file may have been moved or deleted.');}else if(err.status===403){console.error('🔒 BPMNViewer: 403 error detected - access denied');setError('Access denied. This repository may be private and require authentication.');}else if(err.message.includes('rate limit')){console.error('🚦 BPMNViewer: Rate limit error detected');setError('GitHub API rate limit exceeded. Please try again later or authenticate for higher limits.');}else if(err.message.includes('Network')||err.message.includes('Failed to fetch')){console.error('🌐 BPMNViewer: Network error detected');setError('Network error occurred. Please check your internet connection and try again.');}else if(err.message.includes('Empty or invalid BPMN')){console.error('📄 BPMNViewer: Empty file error detected');setError('The selected file appears to be empty or corrupted.');}else if(err.message.includes('does not appear to contain valid BPMN')){console.error('📋 BPMNViewer: Invalid BPMN content error detected');setError('The selected file does not appear to contain valid BPMN XML content.');}else if(err.message.includes('failed to parse XML')||err.message.includes('XML')){console.error('🔧 BPMNViewer: XML parsing error detected');setError('The BPMN file contains invalid XML and cannot be displayed.');}else{console.error('❓ BPMNViewer: Unknown error type');setError(`Failed to load BPMN diagram: ${err.message}`);}console.log('🔄 BPMNViewer: Setting loading state to false due to error');setLoading(false);}},[currentSelectedFile,currentRepository,currentBranch]);// Initialize BPMN viewer with improved container readiness check\nuseEffect(()=>{const cleanupContainer=()=>{if(containerRef.current){// Clear any existing BPMN.js content from the container\ncontainerRef.current.innerHTML='';console.log('🧹 BPMNViewer: Container cleaned up');}};const initializeViewer=()=>{console.log('🛠️ BPMNViewer: initializeViewer called with:',{hasContainer:!!containerRef.current,hasViewer:!!viewerRef.current,selectedFile:currentSelectedFile?currentSelectedFile.name:'none',containerRefCurrent:containerRef.current,viewerRefCurrent:viewerRef.current});if(containerRef.current&&!viewerRef.current&&currentSelectedFile){try{// Clean the container before creating a new viewer\ncleanupContainer();console.log('🔧 BPMNViewer: Creating new BPMN viewer...');console.log('🔧 BPMNViewer: Container element details:',{tagName:containerRef.current.tagName,className:containerRef.current.className,clientWidth:containerRef.current.clientWidth,clientHeight:containerRef.current.clientHeight,innerHTML:containerRef.current.innerHTML.length});viewerRef.current=new BpmnViewer({container:containerRef.current});console.log('✅ BPMNViewer: BPMN viewer initialized successfully');console.log('📞 BPMNViewer: About to call loadBpmnContent()...');loadBpmnContent();}catch(error){console.error('❌ BPMNViewer: Failed to initialize BPMN viewer:',error);console.error('🔍 BPMNViewer: Initialization error details:',{message:error.message,stack:error.stack,containerExists:!!containerRef.current,containerContent:containerRef.current?containerRef.current.innerHTML:'N/A'});// If it's an \"element already exists\" error, try to clean up and retry once\nif(error.message.includes('already exists')){console.log('🔄 BPMNViewer: Detected \"element already exists\" error, attempting cleanup and retry...');cleanupContainer();// Wait a bit and try again\nsetTimeout(()=>{if(containerRef.current&&!viewerRef.current){try{console.log('🔄 BPMNViewer: Retrying viewer creation after cleanup...');viewerRef.current=new BpmnViewer({container:containerRef.current});console.log('✅ BPMNViewer: BPMN viewer initialized successfully on retry');loadBpmnContent();}catch(retryError){console.error('❌ BPMNViewer: Failed to initialize BPMN viewer on retry:',retryError);setError(`Failed to initialize BPMN viewer: ${retryError.message}`);setLoading(false);}}},100);}else{setError(`Failed to initialize BPMN viewer: ${error.message}`);setLoading(false);}}}else{console.log('⚠️ BPMNViewer: Skipping viewer initialization:',{hasContainer:!!containerRef.current,hasViewer:!!viewerRef.current,hasSelectedFile:!!currentSelectedFile,reason:!containerRef.current?'No container':viewerRef.current?'Viewer already exists':!currentSelectedFile?'No selected file':'Unknown'});}};const waitForContainer=function(){let attempt=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;const maxAttempts=50;// Try for up to 5 seconds (50 * 100ms)\nif(containerRef.current){console.log(`✅ BPMNViewer: Container found on attempt ${attempt+1}`);initializeViewer();}else if(attempt<maxAttempts){console.log(`⏳ BPMNViewer: Container not ready, attempt ${attempt+1}/${maxAttempts}, retrying in 100ms...`);setTimeout(()=>waitForContainer(attempt+1),100);}else{console.error('❌ BPMNViewer: Container never became available after maximum attempts');setError('Failed to initialize BPMN viewer: container not available');setLoading(false);}};if(currentSelectedFile){console.log('⏰ BPMNViewer: Starting container readiness check for selectedFile:',currentSelectedFile.name);waitForContainer();}else{console.log('❌ BPMNViewer: No currentSelectedFile, skipping viewer initialization');}return()=>{if(viewerRef.current){try{console.log('🧹 BPMNViewer: Destroying BPMN viewer...');viewerRef.current.destroy();console.log('✅ BPMNViewer: BPMN viewer destroyed successfully');}catch(error){console.error('❌ BPMNViewer: Error destroying BPMN viewer:',error);}viewerRef.current=null;}// Also clean up the container on unmount\ncleanupContainer();};},[currentSelectedFile,loadBpmnContent]);const handleEditMode=()=>{var _currentRepository$ow2;if(!hasWriteAccess){alert('You need write permissions to edit BPMN files. Please check your GitHub token permissions.');return;}const owner=((_currentRepository$ow2=currentRepository.owner)===null||_currentRepository$ow2===void 0?void 0:_currentRepository$ow2.login)||currentRepository.full_name.split('/')[0];const repoName=currentRepository.name;const path=currentBranch?`/bpmn-editor/${owner}/${repoName}/${currentBranch}`:`/bpmn-editor/${owner}/${repoName}`;navigate(path,{state:{profile:currentProfile,repository:currentRepository,component,selectedFile:currentSelectedFile,selectedBranch:currentBranch,mode:'edit'}});};const handleBackToSelection=()=>{navigate('/business-process-selection',{state:{profile:currentProfile,repository:currentRepository,component,selectedBranch:currentBranch}});};const handleToggleEnhancedFullwidth=()=>{const newState=!enhancedFullwidth;setEnhancedFullwidth(newState);// Add/remove class on body for enhanced fullwidth mode\nif(newState){document.body.classList.add('enhanced-fullwidth-active');}else{document.body.classList.remove('enhanced-fullwidth-active');}};const handleToggleAutoHide=()=>{setAutoHide(!autoHide);};// Cleanup effect for enhanced fullwidth\nuseEffect(()=>{return()=>{// Clean up body class on unmount\ndocument.body.classList.remove('enhanced-fullwidth-active');};},[]);// Update body class when enhanced fullwidth changes\nuseEffect(()=>{if(enhancedFullwidth){document.body.classList.add('enhanced-fullwidth-active');}else{document.body.classList.remove('enhanced-fullwidth-active');}return()=>{document.body.classList.remove('enhanced-fullwidth-active');};},[enhancedFullwidth]);// Handle redirect when data is missing\nuseEffect(()=>{// Check if we're on an asset URL pattern (has more than 5 path segments after /sgex)\nconst pathSegments=location.pathname.split('/').filter(segment=>segment);const isAssetURL=pathSegments.length>5;// /sgex/bpmn-viewer/user/repo/branch/asset...\n// If we're on an asset URL, wait for framework to load before deciding to redirect\nif(isAssetURL){// Only redirect if we have both no framework data AND no location state\nif(!(frameworkData!==null&&frameworkData!==void 0&&frameworkData.profile)&&!(frameworkData!==null&&frameworkData!==void 0&&frameworkData.repository)&&!(frameworkData!==null&&frameworkData!==void 0&&frameworkData.asset)&&!currentProfile&&!currentRepository&&!currentSelectedFile){console.log('BPMNViewer: On asset URL but no data available from framework or location state, redirecting to home');navigate('/');}}else{// For non-asset URLs, use the original logic\nif(!currentProfile||!currentRepository||!currentSelectedFile){console.log('BPMNViewer: Missing required data, redirecting to home:',{hasProfile:!!currentProfile,hasRepository:!!currentRepository,hasSelectedFile:!!currentSelectedFile});navigate('/');}}},[currentProfile,currentRepository,currentSelectedFile,frameworkData,location.pathname,navigate]);// Don't render the component if we're missing required data, unless we're on asset URL and framework is loading\nconst pathSegments=location.pathname.split('/').filter(segment=>segment);const isAssetURL=pathSegments.length>5;if(!currentProfile||!currentRepository||!currentSelectedFile){if(isAssetURL&&(!(frameworkData!==null&&frameworkData!==void 0&&frameworkData.profile)||!(frameworkData!==null&&frameworkData!==void 0&&frameworkData.repository)||!(frameworkData!==null&&frameworkData!==void 0&&frameworkData.asset))){// Framework might still be loading for asset URL\nreturn/*#__PURE__*/_jsx(\"div\",{children:\"Loading framework data...\"});}return/*#__PURE__*/_jsx(\"div\",{children:\"Loading or redirecting...\"});}return/*#__PURE__*/_jsx(PageLayout,{pageName:\"bpmn-viewer\",children:/*#__PURE__*/_jsx(\"div\",{className:`bpmn-viewer ${enhancedFullwidth?'enhanced-fullwidth':''} ${autoHide?'auto-hide':''}`,children:/*#__PURE__*/_jsx(\"div\",{className:\"viewer-content\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"viewer-main\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"viewer-toolbar\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"toolbar-left\",children:[/*#__PURE__*/_jsx(\"h3\",{children:currentSelectedFile.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"artifact-badges\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"artifact-badge bpmn\",children:\"\\uD83D\\uDCCA BPMN\"}),/*#__PURE__*/_jsx(\"span\",{className:\"dak-component-badge\",children:\"\\uD83D\\uDD04 Business Process\"})]}),/*#__PURE__*/_jsx(\"span\",{className:\"view-mode-badge\",children:\"\\uD83D\\uDC41\\uFE0F Read-Only View\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"toolbar-right\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"action-btn secondary\",onClick:handleToggleAutoHide,title:\"Toggle auto-hide headers/footers\",children:[autoHide?'📌':'👁️',\" Auto-Hide\"]}),/*#__PURE__*/_jsxs(\"button\",{className:\"action-btn secondary\",onClick:handleToggleEnhancedFullwidth,title:\"Toggle enhanced fullwidth mode\",children:[enhancedFullwidth?'🔳':'⛶',\" Full Container\"]}),/*#__PURE__*/_jsx(\"button\",{className:\"action-btn secondary\",onClick:handleBackToSelection,children:\"\\u2190 Back to List\"}),hasWriteAccess&&/*#__PURE__*/_jsx(\"button\",{className:\"action-btn primary\",onClick:handleEditMode,children:\"\\u270F\\uFE0F Edit\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"diagram-container\",children:[loading?/*#__PURE__*/_jsxs(\"div\",{className:\"loading-overlay\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"loading-info\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"Loading BPMN diagram...\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"loading-details\",children:[\"Fetching \",currentSelectedFile.name,\" from \",currentRepository.name]}),/*#__PURE__*/_jsx(\"p\",{className:\"loading-hint\",children:\"This may take a few moments for large files or slow connections.\"})]})]}):error?/*#__PURE__*/_jsxs(\"div\",{className:\"error-overlay\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u274C \",error]}),/*#__PURE__*/_jsxs(\"div\",{className:\"error-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"action-btn secondary\",onClick:()=>loadBpmnContent(),children:\"\\uD83D\\uDD04 Retry\"}),/*#__PURE__*/_jsx(\"button\",{className:\"action-btn secondary\",onClick:()=>navigate('/business-process-selection',{state:{profile:currentProfile,repository:currentRepository,component,selectedBranch:currentBranch}}),children:\"\\u2190 Back to List\"})]})]}):null,/*#__PURE__*/_jsx(\"div\",{className:\"bpmn-container\",ref:containerRef,style:{display:loading||error?'none':'block',width:'100%',height:'100%'}})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"diagram-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"condensed-file-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"condensed-info-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"label\",children:\"\\uD83D\\uDCC1\"}),/*#__PURE__*/_jsx(\"span\",{className:\"value\",children:(currentSelectedFile===null||currentSelectedFile===void 0?void 0:currentSelectedFile.name)||'No file'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"condensed-info-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"label\",children:\"\\uD83D\\uDCCF\"}),/*#__PURE__*/_jsx(\"span\",{className:\"value\",children:currentSelectedFile!==null&&currentSelectedFile!==void 0&&currentSelectedFile.size?`${(currentSelectedFile.size/1024).toFixed(1)} KB`:'N/A'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"condensed-info-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"label\",children:\"\\uD83C\\uDF3F\"}),/*#__PURE__*/_jsx(\"span\",{className:\"value\",children:currentBranch||'main'})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"condensed-view-mode\",children:[/*#__PURE__*/_jsx(\"span\",{className:`condensed-access-badge ${hasWriteAccess?'write':'read'}`,children:hasWriteAccess?'✏️ Edit':'👁️ Read'}),/*#__PURE__*/_jsx(\"span\",{className:\"condensed-info-item\",children:/*#__PURE__*/_jsx(\"span\",{className:\"value\",children:enhancedFullwidth?'⛶ Full Container':autoHide?'👁️ Auto-Hide':'📺 Fullwidth'})})]})]})]})})})});};export default BPMNViewerComponent;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","useLocation","useNavigate","BpmnViewer","githubService","PageLayout","useDAKParams","jsx","_jsx","jsxs","_jsxs","BPMNViewerComponent","location","navigate","viewerRef","containerRef","frameworkData","console","log","state","profile","repository","component","selectedFile","selectedBranch","currentProfile","currentRepository","currentBranch","branch","assetPath","asset","currentSelectedFile","name","split","pop","path","loading","setLoading","error","setError","hasWriteAccess","setHasWriteAccess","enhancedFullwidth","setEnhancedFullwidth","autoHide","setAutoHide","checkPermissions","_currentRepository$pe","writeAccess","token","permissions","push","warn","loadBpmnContent","_currentRepository$ow","hasViewer","current","owner","hasSelectedFile","hasRepository","login","full_name","repoName","ref","isDemo","default_branch","size","derivedOwner","githubServiceAuthenticated","isAuth","JSON","stringify","loadingTimeout","setTimeout","startTime","Date","now","bpmnXml","getFileContent","endTime","length","substring","includes","trim","Error","importXML","canvas","get","zoom","centerError","clearTimeout","contentError","err","message","status","stack","file","cleanupContainer","innerHTML","initializeViewer","hasContainer","containerRefCurrent","viewerRefCurrent","tagName","className","clientWidth","clientHeight","container","containerExists","containerContent","retryError","reason","waitForContainer","attempt","arguments","undefined","maxAttempts","destroy","handleEditMode","_currentRepository$ow2","alert","mode","handleBackToSelection","handleToggleEnhancedFullwidth","newState","document","body","classList","add","remove","handleToggleAutoHide","pathSegments","pathname","filter","segment","isAssetURL","hasProfile","children","pageName","onClick","title","style","display","width","height","toFixed"],"sources":["/home/runner/work/sgex/sgex/src/components/BPMNViewer.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport BpmnViewer from 'bpmn-js/lib/NavigatedViewer';\nimport githubService from '../services/githubService';\nimport { PageLayout, useDAKParams } from './framework';\nimport './BPMNViewer.css';\n\nconst BPMNViewerComponent = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const viewerRef = useRef(null);\n  const containerRef = useRef(null);\n  \n  // Try to get data from framework params first, then fall back to location state\n  const frameworkData = useDAKParams();\n  \n  console.log('BPMNViewer: Framework data received:', frameworkData);\n  console.log('BPMNViewer: Location state:', location.state);\n  \n  const { profile, repository, component, selectedFile, selectedBranch } = location.state || {};\n  \n  // Use framework data if available, otherwise use location state\n  const currentProfile = frameworkData?.profile || profile;\n  const currentRepository = frameworkData?.repository || repository;\n  const currentBranch = frameworkData?.branch || selectedBranch;\n  const assetPath = frameworkData?.asset;\n  \n  console.log('BPMNViewer: Final computed values:', {\n    currentProfile: !!currentProfile,\n    currentRepository: !!currentRepository,\n    currentBranch,\n    assetPath\n  });\n  \n  // If we have asset path from URL, create a selectedFile object\n  const currentSelectedFile = useMemo(() => {\n    return assetPath ? {\n      name: assetPath.split('/').pop(),\n      path: assetPath\n    } : selectedFile;\n  }, [assetPath, selectedFile]);\n  \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n  const [enhancedFullwidth, setEnhancedFullwidth] = useState(false);\n  const [autoHide, setAutoHide] = useState(false);\n\n  // Check write permissions\n  useEffect(() => {\n    const checkPermissions = async () => {\n      if (currentRepository && currentProfile) {\n        try {\n          // Simple permission check - in real app, this would use githubService\n          const writeAccess = currentProfile.token && currentRepository.permissions?.push;\n          setHasWriteAccess(writeAccess || false);\n        } catch (error) {\n          console.warn('Could not check write permissions:', error);\n          setHasWriteAccess(false);\n        }\n      }\n    };\n\n    checkPermissions();\n  }, [currentRepository, currentProfile]);\n\n  // Load BPMN file content\n  const loadBpmnContent = useCallback(async () => {\n    console.log('🚀 BPMNViewer: loadBpmnContent called with:', {\n      hasViewer: !!viewerRef.current,\n      selectedFile: currentSelectedFile,\n      repository: currentRepository ? {\n        name: currentRepository.name,\n        owner: currentRepository.owner\n      } : null\n    });\n\n    if (!viewerRef.current || !currentSelectedFile || !currentRepository) {\n      console.warn('❌ BPMNViewer: Missing required parameters for loadBpmnContent:', {\n        hasViewer: !!viewerRef.current,\n        hasSelectedFile: !!currentSelectedFile,\n        hasRepository: !!currentRepository\n      });\n      return;\n    }\n\n    // Declare variables outside try block so they're accessible in catch block\n    const owner = currentRepository.owner?.login || currentRepository.full_name.split('/')[0];\n    const repoName = currentRepository.name;\n    const ref = currentBranch || 'main';\n\n    try {\n      console.log('📡 BPMNViewer: Setting loading state to true');\n      setLoading(true);\n      setError(null);\n\n      console.log('🔍 BPMNViewer: Repository and file analysis:', {\n        repository: {\n          name: currentRepository.name,\n          full_name: currentRepository.full_name,\n          owner: currentRepository.owner,\n          isDemo: currentRepository.isDemo,\n          default_branch: currentRepository.default_branch\n        },\n        selectedFile: {\n          name: currentSelectedFile.name,\n          path: currentSelectedFile.path,\n          size: currentSelectedFile.size\n        },\n        derivedOwner: owner,\n        repoName: repoName,\n        ref: ref,\n        githubServiceAuthenticated: githubService.isAuth()\n      });\n\n      console.log(`📂 BPMNViewer: Preparing to load BPMN content from ${owner}/${repoName}:${currentSelectedFile.path} (ref: ${ref})`);\n      console.log('📋 BPMNViewer: Full selected file object:', JSON.stringify(currentSelectedFile, null, 2));\n      \n      // Add a timeout for the entire loading process\n      console.log('⏰ BPMNViewer: Setting up 30-second timeout for loading process');\n      const loadingTimeout = setTimeout(() => {\n        console.error('⏰ BPMNViewer: Loading process timed out after 30 seconds');\n        setError('Loading timed out. Please try again or check your internet connection.');\n        setLoading(false);\n      }, 30000); // 30 second timeout\n      \n      try {\n        // Use githubService to fetch file content (works for both public and private repos)\n        console.log(`🌐 BPMNViewer: About to call githubService.getFileContent with params:`, {\n          owner,\n          repoName,\n          path: currentSelectedFile.path,\n          ref\n        });\n        \n        console.log('🌐 BPMNViewer: Making GitHub API call...');\n        const startTime = Date.now();\n        const bpmnXml = await githubService.getFileContent(owner, repoName, currentSelectedFile.path, ref);\n        const endTime = Date.now();\n        \n        console.log(`✅ BPMNViewer: Successfully loaded BPMN content from repository in ${endTime - startTime}ms`);\n        console.log('📏 BPMNViewer: Content length:', bpmnXml.length);\n        console.log('👀 BPMNViewer: Content preview (first 200 chars):', bpmnXml.substring(0, 200));\n        console.log('🔍 BPMNViewer: Content type check - contains bpmn:definitions:', bpmnXml.includes('bpmn:definitions'));\n        console.log('🔍 BPMNViewer: Content type check - contains <definitions:', bpmnXml.includes('<definitions'));\n\n        // Validate that we got valid BPMN XML content\n        if (!bpmnXml || !bpmnXml.trim()) {\n          console.error('❌ BPMNViewer: Empty or invalid BPMN file content received');\n          throw new Error('Empty or invalid BPMN file content');\n        }\n        \n        if (!bpmnXml.includes('bpmn:definitions') && !bpmnXml.includes('<definitions')) {\n          console.error('❌ BPMNViewer: File does not contain valid BPMN XML content');\n          console.error('🔍 BPMNViewer: Content preview for debugging:', bpmnXml.substring(0, 500));\n          throw new Error('File does not appear to contain valid BPMN XML content');\n        }\n\n        // Load the BPMN diagram\n        console.log('🎨 BPMNViewer: Attempting to import XML into BPMN viewer...');\n        await viewerRef.current.importXML(bpmnXml);\n        console.log('✅ BPMNViewer: Successfully imported BPMN XML into viewer');\n        \n        // Center the diagram in the viewer\n        try {\n          console.log('🎯 BPMNViewer: Attempting to center diagram in viewport...');\n          const canvas = viewerRef.current.get('canvas');\n          canvas.zoom('fit-viewport');\n          console.log('✅ BPMNViewer: Successfully centered BPMN diagram in viewport');\n        } catch (centerError) {\n          console.warn('⚠️ BPMNViewer: Could not center diagram:', centerError);\n          // This is not a critical error, continue\n        }\n        \n        clearTimeout(loadingTimeout);\n        console.log('🎉 BPMNViewer: BPMN loading completed successfully, setting loading to false');\n        setLoading(false);\n      } catch (contentError) {\n        clearTimeout(loadingTimeout);\n        console.error('❌ BPMNViewer: Error during file content processing:', contentError);\n        throw contentError;      }\n    } catch (err) {\n      console.error('💥 BPMNViewer: Error loading BPMN file:', err);\n      console.error('🔍 BPMNViewer: Full error details:', {\n        message: err.message,\n        status: err.status,\n        stack: err.stack,\n        repository: {\n          owner: owner,\n          name: repoName,\n          ref: ref\n        },\n        file: {\n          name: currentSelectedFile.name,\n          path: currentSelectedFile.path\n        }\n      });\n      \n      // Provide specific error messages based on the error type\n      if (err.message.includes('timeout') || err.message.includes('timed out')) {\n        console.error('⏰ BPMNViewer: Timeout error detected');\n        setError('Loading timed out. Please check your internet connection and try again.');\n      } else if (err.status === 404) {\n        console.error('🔍 BPMNViewer: 404 error detected - file not found');\n        setError('BPMN file not found in the repository. The file may have been moved or deleted.');\n      } else if (err.status === 403) {\n        console.error('🔒 BPMNViewer: 403 error detected - access denied');\n        setError('Access denied. This repository may be private and require authentication.');\n      } else if (err.message.includes('rate limit')) {\n        console.error('🚦 BPMNViewer: Rate limit error detected');\n        setError('GitHub API rate limit exceeded. Please try again later or authenticate for higher limits.');\n      } else if (err.message.includes('Network') || err.message.includes('Failed to fetch')) {\n        console.error('🌐 BPMNViewer: Network error detected');\n        setError('Network error occurred. Please check your internet connection and try again.');\n      } else if (err.message.includes('Empty or invalid BPMN')) {\n        console.error('📄 BPMNViewer: Empty file error detected');\n        setError('The selected file appears to be empty or corrupted.');\n      } else if (err.message.includes('does not appear to contain valid BPMN')) {\n        console.error('📋 BPMNViewer: Invalid BPMN content error detected');\n        setError('The selected file does not appear to contain valid BPMN XML content.');\n      } else if (err.message.includes('failed to parse XML') || err.message.includes('XML')) {\n        console.error('🔧 BPMNViewer: XML parsing error detected');\n        setError('The BPMN file contains invalid XML and cannot be displayed.');\n      } else {\n        console.error('❓ BPMNViewer: Unknown error type');\n        setError(`Failed to load BPMN diagram: ${err.message}`);\n      }\n      \n      console.log('🔄 BPMNViewer: Setting loading state to false due to error');\n      setLoading(false);\n    }\n  }, [currentSelectedFile, currentRepository, currentBranch]);\n\n  // Initialize BPMN viewer with improved container readiness check\n  useEffect(() => {\n    const cleanupContainer = () => {\n      if (containerRef.current) {\n        // Clear any existing BPMN.js content from the container\n        containerRef.current.innerHTML = '';\n        console.log('🧹 BPMNViewer: Container cleaned up');\n      }\n    };\n\n    const initializeViewer = () => {\n      console.log('🛠️ BPMNViewer: initializeViewer called with:', {\n        hasContainer: !!containerRef.current,\n        hasViewer: !!viewerRef.current,\n        selectedFile: currentSelectedFile ? currentSelectedFile.name : 'none',\n        containerRefCurrent: containerRef.current,\n        viewerRefCurrent: viewerRef.current\n      });\n\n      if (containerRef.current && !viewerRef.current && currentSelectedFile) {\n        try {\n          // Clean the container before creating a new viewer\n          cleanupContainer();\n          \n          console.log('🔧 BPMNViewer: Creating new BPMN viewer...');\n          console.log('🔧 BPMNViewer: Container element details:', {\n            tagName: containerRef.current.tagName,\n            className: containerRef.current.className,\n            clientWidth: containerRef.current.clientWidth,\n            clientHeight: containerRef.current.clientHeight,\n            innerHTML: containerRef.current.innerHTML.length\n          });\n          \n          viewerRef.current = new BpmnViewer({\n            container: containerRef.current\n          });\n          console.log('✅ BPMNViewer: BPMN viewer initialized successfully');\n          console.log('📞 BPMNViewer: About to call loadBpmnContent()...');\n          \n          loadBpmnContent();\n        } catch (error) {\n          console.error('❌ BPMNViewer: Failed to initialize BPMN viewer:', error);\n          console.error('🔍 BPMNViewer: Initialization error details:', {\n            message: error.message,\n            stack: error.stack,\n            containerExists: !!containerRef.current,\n            containerContent: containerRef.current ? containerRef.current.innerHTML : 'N/A'\n          });\n          \n          // If it's an \"element already exists\" error, try to clean up and retry once\n          if (error.message.includes('already exists')) {\n            console.log('🔄 BPMNViewer: Detected \"element already exists\" error, attempting cleanup and retry...');\n            cleanupContainer();\n            \n            // Wait a bit and try again\n            setTimeout(() => {\n              if (containerRef.current && !viewerRef.current) {\n                try {\n                  console.log('🔄 BPMNViewer: Retrying viewer creation after cleanup...');\n                  viewerRef.current = new BpmnViewer({\n                    container: containerRef.current\n                  });\n                  console.log('✅ BPMNViewer: BPMN viewer initialized successfully on retry');\n                  loadBpmnContent();\n                } catch (retryError) {\n                  console.error('❌ BPMNViewer: Failed to initialize BPMN viewer on retry:', retryError);\n                  setError(`Failed to initialize BPMN viewer: ${retryError.message}`);\n                  setLoading(false);\n                }\n              }\n            }, 100);\n          } else {\n            setError(`Failed to initialize BPMN viewer: ${error.message}`);\n            setLoading(false);\n          }\n        }\n      } else {\n        console.log('⚠️ BPMNViewer: Skipping viewer initialization:', {\n          hasContainer: !!containerRef.current,\n          hasViewer: !!viewerRef.current,\n          hasSelectedFile: !!currentSelectedFile,\n          reason: !containerRef.current ? 'No container' : \n                  viewerRef.current ? 'Viewer already exists' : \n                  !currentSelectedFile ? 'No selected file' : 'Unknown'\n        });\n      }\n    };\n\n    const waitForContainer = (attempt = 0) => {\n      const maxAttempts = 50; // Try for up to 5 seconds (50 * 100ms)\n      \n      if (containerRef.current) {\n        console.log(`✅ BPMNViewer: Container found on attempt ${attempt + 1}`);\n        initializeViewer();\n      } else if (attempt < maxAttempts) {\n        console.log(`⏳ BPMNViewer: Container not ready, attempt ${attempt + 1}/${maxAttempts}, retrying in 100ms...`);\n        setTimeout(() => waitForContainer(attempt + 1), 100);\n      } else {\n        console.error('❌ BPMNViewer: Container never became available after maximum attempts');\n        setError('Failed to initialize BPMN viewer: container not available');\n        setLoading(false);\n      }\n    };\n\n    if (currentSelectedFile) {\n      console.log('⏰ BPMNViewer: Starting container readiness check for selectedFile:', currentSelectedFile.name);\n      waitForContainer();\n    } else {\n      console.log('❌ BPMNViewer: No currentSelectedFile, skipping viewer initialization');\n    }\n\n    return () => {\n      if (viewerRef.current) {\n        try {\n          console.log('🧹 BPMNViewer: Destroying BPMN viewer...');\n          viewerRef.current.destroy();\n          console.log('✅ BPMNViewer: BPMN viewer destroyed successfully');\n        } catch (error) {\n          console.error('❌ BPMNViewer: Error destroying BPMN viewer:', error);\n        }\n        viewerRef.current = null;\n      }\n      // Also clean up the container on unmount\n      cleanupContainer();\n    };\n  }, [currentSelectedFile, loadBpmnContent]);\n\n  const handleEditMode = () => {\n    if (!hasWriteAccess) {\n      alert('You need write permissions to edit BPMN files. Please check your GitHub token permissions.');\n      return;\n    }\n\n    const owner = currentRepository.owner?.login || currentRepository.full_name.split('/')[0];\n    const repoName = currentRepository.name;\n    const path = currentBranch \n      ? `/bpmn-editor/${owner}/${repoName}/${currentBranch}`\n      : `/bpmn-editor/${owner}/${repoName}`;\n\n    navigate(path, {\n      state: {\n        profile: currentProfile,\n        repository: currentRepository,\n        component,\n        selectedFile: currentSelectedFile,\n        selectedBranch: currentBranch,\n        mode: 'edit'\n      }\n    });\n  };\n\n  const handleBackToSelection = () => {\n    navigate('/business-process-selection', {\n      state: {\n        profile: currentProfile,\n        repository: currentRepository,\n        component,\n        selectedBranch: currentBranch\n      }\n    });\n  };\n\n  const handleToggleEnhancedFullwidth = () => {\n    const newState = !enhancedFullwidth;\n    setEnhancedFullwidth(newState);\n    \n    // Add/remove class on body for enhanced fullwidth mode\n    if (newState) {\n      document.body.classList.add('enhanced-fullwidth-active');\n    } else {\n      document.body.classList.remove('enhanced-fullwidth-active');\n    }\n  };\n\n  const handleToggleAutoHide = () => {\n    setAutoHide(!autoHide);\n  };\n\n  // Cleanup effect for enhanced fullwidth\n  useEffect(() => {\n    return () => {\n      // Clean up body class on unmount\n      document.body.classList.remove('enhanced-fullwidth-active');\n    };\n  }, []);\n\n  // Update body class when enhanced fullwidth changes\n  useEffect(() => {\n    if (enhancedFullwidth) {\n      document.body.classList.add('enhanced-fullwidth-active');\n    } else {\n      document.body.classList.remove('enhanced-fullwidth-active');\n    }\n    \n    return () => {\n      document.body.classList.remove('enhanced-fullwidth-active');\n    };\n  }, [enhancedFullwidth]);\n\n  // Handle redirect when data is missing\n  useEffect(() => {\n    // Check if we're on an asset URL pattern (has more than 5 path segments after /sgex)\n    const pathSegments = location.pathname.split('/').filter(segment => segment);\n    const isAssetURL = pathSegments.length > 5; // /sgex/bpmn-viewer/user/repo/branch/asset...\n    \n    // If we're on an asset URL, wait for framework to load before deciding to redirect\n    if (isAssetURL) {\n      // Only redirect if we have both no framework data AND no location state\n      if (!frameworkData?.profile && !frameworkData?.repository && !frameworkData?.asset && \n          !currentProfile && !currentRepository && !currentSelectedFile) {\n        console.log('BPMNViewer: On asset URL but no data available from framework or location state, redirecting to home');\n        navigate('/');\n      }\n    } else {\n      // For non-asset URLs, use the original logic\n      if (!currentProfile || !currentRepository || !currentSelectedFile) {\n        console.log('BPMNViewer: Missing required data, redirecting to home:', {\n          hasProfile: !!currentProfile,\n          hasRepository: !!currentRepository,\n          hasSelectedFile: !!currentSelectedFile\n        });\n        navigate('/');\n      }\n    }\n  }, [currentProfile, currentRepository, currentSelectedFile, frameworkData, location.pathname, navigate]);\n\n  // Don't render the component if we're missing required data, unless we're on asset URL and framework is loading\n  const pathSegments = location.pathname.split('/').filter(segment => segment);\n  const isAssetURL = pathSegments.length > 5;\n  \n  if (!currentProfile || !currentRepository || !currentSelectedFile) {\n    if (isAssetURL && (!frameworkData?.profile || !frameworkData?.repository || !frameworkData?.asset)) {\n      // Framework might still be loading for asset URL\n      return <div>Loading framework data...</div>;\n    }\n    return <div>Loading or redirecting...</div>;\n  }\n\n  return (\n    <PageLayout pageName=\"bpmn-viewer\">\n      <div className={`bpmn-viewer ${enhancedFullwidth ? 'enhanced-fullwidth' : ''} ${autoHide ? 'auto-hide' : ''}`}>\n      <div className=\"viewer-content\">\n\n        <div className=\"viewer-main\">\n          <div className=\"viewer-toolbar\">\n            <div className=\"toolbar-left\">\n              <h3>{currentSelectedFile.name}</h3>\n              <div className=\"artifact-badges\">\n                <span className=\"artifact-badge bpmn\">📊 BPMN</span>\n                <span className=\"dak-component-badge\">🔄 Business Process</span>\n              </div>\n              <span className=\"view-mode-badge\">👁️ Read-Only View</span>\n            </div>\n            <div className=\"toolbar-right\">\n              <button \n                className=\"action-btn secondary\"\n                onClick={handleToggleAutoHide}\n                title=\"Toggle auto-hide headers/footers\"\n              >\n                {autoHide ? '📌' : '👁️'} Auto-Hide\n              </button>\n              <button \n                className=\"action-btn secondary\"\n                onClick={handleToggleEnhancedFullwidth}\n                title=\"Toggle enhanced fullwidth mode\"\n              >\n                {enhancedFullwidth ? '🔳' : '⛶'} Full Container\n              </button>\n              <button \n                className=\"action-btn secondary\"\n                onClick={handleBackToSelection}\n              >\n                ← Back to List\n              </button>\n              {hasWriteAccess && (\n                <button \n                  className=\"action-btn primary\"\n                  onClick={handleEditMode}\n                >\n                  ✏️ Edit\n                </button>\n              )}\n            </div>\n          </div>\n\n          <div className=\"diagram-container\">\n            {loading ? (\n              <div className=\"loading-overlay\">\n                <div className=\"spinner\"></div>\n                <div className=\"loading-info\">\n                  <p>Loading BPMN diagram...</p>\n                  <p className=\"loading-details\">\n                    Fetching {currentSelectedFile.name} from {currentRepository.name}\n                  </p>\n                  <p className=\"loading-hint\">\n                    This may take a few moments for large files or slow connections.\n                  </p>\n                </div>\n              </div>\n            ) : error ? (\n              <div className=\"error-overlay\">\n                <p>❌ {error}</p>\n                <div className=\"error-actions\">\n                  <button \n                    className=\"action-btn secondary\"\n                    onClick={() => loadBpmnContent()}\n                  >\n                    🔄 Retry\n                  </button>\n                  <button \n                    className=\"action-btn secondary\"\n                    onClick={() => navigate('/business-process-selection', {\n                      state: { profile: currentProfile, repository: currentRepository, component, selectedBranch: currentBranch }\n                    })}\n                  >\n                    ← Back to List\n                  </button>\n                </div>\n              </div>\n            ) : null}\n            \n            {/* Always render the BPMN container so the ref can be set */}\n            <div \n              className=\"bpmn-container\" \n              ref={containerRef}\n              style={{ \n                display: loading || error ? 'none' : 'block',\n                width: '100%',\n                height: '100%'\n              }}\n            ></div>\n          </div>\n\n          <div className=\"diagram-info\">\n            <div className=\"condensed-file-info\">\n              <div className=\"condensed-info-item\">\n                <span className=\"label\">📁</span>\n                <span className=\"value\">{currentSelectedFile?.name || 'No file'}</span>\n              </div>\n              <div className=\"condensed-info-item\">\n                <span className=\"label\">📏</span>\n                <span className=\"value\">{currentSelectedFile?.size ? `${(currentSelectedFile.size / 1024).toFixed(1)} KB` : 'N/A'}</span>\n              </div>\n              <div className=\"condensed-info-item\">\n                <span className=\"label\">🌿</span>\n                <span className=\"value\">{currentBranch || 'main'}</span>\n              </div>\n            </div>\n            <div className=\"condensed-view-mode\">\n              <span className={`condensed-access-badge ${hasWriteAccess ? 'write' : 'read'}`}>\n                {hasWriteAccess ? '✏️ Edit' : '👁️ Read'}\n              </span>\n              <span className=\"condensed-info-item\">\n                <span className=\"value\">\n                  {enhancedFullwidth ? '⛶ Full Container' : autoHide ? '👁️ Auto-Hide' : '📺 Fullwidth'}\n                </span>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default BPMNViewerComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}