{"ast":null,"code":"import { assign, forEach, map } from 'min-dash';\nimport { getWaypointsUpdatingConnections, resizeBounds } from '../../space-tool/SpaceUtil';\nimport { getMovedSourceAnchor, getMovedTargetAnchor, getResizedSourceAnchor, getResizedTargetAnchor } from './helper/AnchorsHelper';\n\n/**\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * Add or remove space by moving and resizing shapes and updating connection waypoints.\n *\n * @param {Modeling} modeling\n */\nexport default function SpaceToolHandler(modeling) {\n  this._modeling = modeling;\n}\nSpaceToolHandler.$inject = ['modeling'];\nSpaceToolHandler.prototype.preExecute = function (context) {\n  var delta = context.delta,\n    direction = context.direction,\n    movingShapes = context.movingShapes,\n    resizingShapes = context.resizingShapes,\n    start = context.start,\n    oldBounds = {};\n\n  // (1) move shapes\n  this.moveShapes(movingShapes, delta);\n\n  // (2a) save old bounds of resized shapes\n  forEach(resizingShapes, function (shape) {\n    oldBounds[shape.id] = getBounds(shape);\n  });\n\n  // (2b) resize shapes\n  this.resizeShapes(resizingShapes, delta, direction);\n\n  // (3) update connection waypoints\n  this.updateConnectionWaypoints(getWaypointsUpdatingConnections(movingShapes, resizingShapes), delta, direction, start, movingShapes, resizingShapes, oldBounds);\n};\nSpaceToolHandler.prototype.execute = function () {};\nSpaceToolHandler.prototype.revert = function () {};\nSpaceToolHandler.prototype.moveShapes = function (shapes, delta) {\n  var self = this;\n  forEach(shapes, function (element) {\n    self._modeling.moveShape(element, delta, null, {\n      autoResize: false,\n      layout: false,\n      recurse: false\n    });\n  });\n};\nSpaceToolHandler.prototype.resizeShapes = function (shapes, delta, direction) {\n  var self = this;\n  forEach(shapes, function (shape) {\n    var newBounds = resizeBounds(shape, direction, delta);\n    self._modeling.resizeShape(shape, newBounds, null, {\n      attachSupport: false,\n      autoResize: false,\n      layout: false\n    });\n  });\n};\n\n/**\n * Update connections waypoints according to the rules:\n *   1. Both source and target are moved/resized => move waypoints by the delta\n *   2. Only one of source and target is moved/resized => re-layout connection with moved start/end\n */\nSpaceToolHandler.prototype.updateConnectionWaypoints = function (connections, delta, direction, start, movingShapes, resizingShapes, oldBounds) {\n  var self = this,\n    affectedShapes = movingShapes.concat(resizingShapes);\n  forEach(connections, function (connection) {\n    var source = connection.source,\n      target = connection.target,\n      waypoints = copyWaypoints(connection),\n      axis = getAxisFromDirection(direction),\n      layoutHints = {};\n    if (includes(affectedShapes, source) && includes(affectedShapes, target)) {\n      // move waypoints\n      waypoints = map(waypoints, function (waypoint) {\n        if (shouldMoveWaypoint(waypoint, start, direction)) {\n          // move waypoint\n          waypoint[axis] = waypoint[axis] + delta[axis];\n        }\n        if (waypoint.original && shouldMoveWaypoint(waypoint.original, start, direction)) {\n          // move waypoint original\n          waypoint.original[axis] = waypoint.original[axis] + delta[axis];\n        }\n        return waypoint;\n      });\n      self._modeling.updateWaypoints(connection, waypoints, {\n        labelBehavior: false\n      });\n    } else if (includes(affectedShapes, source) || includes(affectedShapes, target)) {\n      // re-layout connection with moved start/end\n      if (includes(movingShapes, source)) {\n        layoutHints.connectionStart = getMovedSourceAnchor(connection, source, delta);\n      } else if (includes(movingShapes, target)) {\n        layoutHints.connectionEnd = getMovedTargetAnchor(connection, target, delta);\n      } else if (includes(resizingShapes, source)) {\n        layoutHints.connectionStart = getResizedSourceAnchor(connection, source, oldBounds[source.id]);\n      } else if (includes(resizingShapes, target)) {\n        layoutHints.connectionEnd = getResizedTargetAnchor(connection, target, oldBounds[target.id]);\n      }\n      self._modeling.layoutConnection(connection, layoutHints);\n    }\n  });\n};\n\n// helpers //////////\n\nfunction copyWaypoint(waypoint) {\n  return assign({}, waypoint);\n}\nfunction copyWaypoints(connection) {\n  return map(connection.waypoints, function (waypoint) {\n    waypoint = copyWaypoint(waypoint);\n    if (waypoint.original) {\n      waypoint.original = copyWaypoint(waypoint.original);\n    }\n    return waypoint;\n  });\n}\nfunction getAxisFromDirection(direction) {\n  switch (direction) {\n    case 'n':\n      return 'y';\n    case 'w':\n      return 'x';\n    case 's':\n      return 'y';\n    case 'e':\n      return 'x';\n  }\n}\nfunction shouldMoveWaypoint(waypoint, start, direction) {\n  var relevantAxis = getAxisFromDirection(direction);\n  if (/e|s/.test(direction)) {\n    return waypoint[relevantAxis] > start;\n  } else if (/n|w/.test(direction)) {\n    return waypoint[relevantAxis] < start;\n  }\n}\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}\nfunction getBounds(shape) {\n  return {\n    x: shape.x,\n    y: shape.y,\n    height: shape.height,\n    width: shape.width\n  };\n}","map":{"version":3,"names":["assign","forEach","map","getWaypointsUpdatingConnections","resizeBounds","getMovedSourceAnchor","getMovedTargetAnchor","getResizedSourceAnchor","getResizedTargetAnchor","SpaceToolHandler","modeling","_modeling","$inject","prototype","preExecute","context","delta","direction","movingShapes","resizingShapes","start","oldBounds","moveShapes","shape","id","getBounds","resizeShapes","updateConnectionWaypoints","execute","revert","shapes","self","element","moveShape","autoResize","layout","recurse","newBounds","resizeShape","attachSupport","connections","affectedShapes","concat","connection","source","target","waypoints","copyWaypoints","axis","getAxisFromDirection","layoutHints","includes","waypoint","shouldMoveWaypoint","original","updateWaypoints","labelBehavior","connectionStart","connectionEnd","layoutConnection","copyWaypoint","relevantAxis","test","array","item","indexOf","x","y","height","width"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/modeling/cmd/SpaceToolHandler.js"],"sourcesContent":["import {\n  assign,\n  forEach,\n  map\n} from 'min-dash';\n\nimport {\n  getWaypointsUpdatingConnections,\n  resizeBounds\n} from '../../space-tool/SpaceUtil';\n\nimport {\n  getMovedSourceAnchor,\n  getMovedTargetAnchor,\n  getResizedSourceAnchor,\n  getResizedTargetAnchor\n} from './helper/AnchorsHelper';\n\n/**\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * Add or remove space by moving and resizing shapes and updating connection waypoints.\n *\n * @param {Modeling} modeling\n */\nexport default function SpaceToolHandler(modeling) {\n  this._modeling = modeling;\n}\n\nSpaceToolHandler.$inject = [ 'modeling' ];\n\nSpaceToolHandler.prototype.preExecute = function(context) {\n  var delta = context.delta,\n      direction = context.direction,\n      movingShapes = context.movingShapes,\n      resizingShapes = context.resizingShapes,\n      start = context.start,\n      oldBounds = {};\n\n  // (1) move shapes\n  this.moveShapes(movingShapes, delta);\n\n  // (2a) save old bounds of resized shapes\n  forEach(resizingShapes, function(shape) {\n    oldBounds[shape.id] = getBounds(shape);\n  });\n\n  // (2b) resize shapes\n  this.resizeShapes(resizingShapes, delta, direction);\n\n  // (3) update connection waypoints\n  this.updateConnectionWaypoints(\n    getWaypointsUpdatingConnections(movingShapes, resizingShapes),\n    delta,\n    direction,\n    start,\n    movingShapes,\n    resizingShapes,\n    oldBounds\n  );\n};\n\nSpaceToolHandler.prototype.execute = function() {};\nSpaceToolHandler.prototype.revert = function() {};\n\nSpaceToolHandler.prototype.moveShapes = function(shapes, delta) {\n  var self = this;\n\n  forEach(shapes, function(element) {\n    self._modeling.moveShape(element, delta, null, {\n      autoResize: false,\n      layout: false,\n      recurse: false\n    });\n  });\n};\n\nSpaceToolHandler.prototype.resizeShapes = function(shapes, delta, direction) {\n  var self = this;\n\n  forEach(shapes, function(shape) {\n    var newBounds = resizeBounds(shape, direction, delta);\n\n    self._modeling.resizeShape(shape, newBounds, null, {\n      attachSupport: false,\n      autoResize: false,\n      layout: false\n    });\n  });\n};\n\n/**\n * Update connections waypoints according to the rules:\n *   1. Both source and target are moved/resized => move waypoints by the delta\n *   2. Only one of source and target is moved/resized => re-layout connection with moved start/end\n */\nSpaceToolHandler.prototype.updateConnectionWaypoints = function(\n    connections,\n    delta,\n    direction,\n    start,\n    movingShapes,\n    resizingShapes,\n    oldBounds\n) {\n  var self = this,\n      affectedShapes = movingShapes.concat(resizingShapes);\n\n  forEach(connections, function(connection) {\n    var source = connection.source,\n        target = connection.target,\n        waypoints = copyWaypoints(connection),\n        axis = getAxisFromDirection(direction),\n        layoutHints = {};\n\n    if (includes(affectedShapes, source) && includes(affectedShapes, target)) {\n\n      // move waypoints\n      waypoints = map(waypoints, function(waypoint) {\n        if (shouldMoveWaypoint(waypoint, start, direction)) {\n\n          // move waypoint\n          waypoint[ axis ] = waypoint[ axis ] + delta[ axis ];\n        }\n\n        if (waypoint.original && shouldMoveWaypoint(waypoint.original, start, direction)) {\n\n          // move waypoint original\n          waypoint.original[ axis ] = waypoint.original[ axis ] + delta[ axis ];\n        }\n\n        return waypoint;\n      });\n\n      self._modeling.updateWaypoints(connection, waypoints, {\n        labelBehavior: false\n      });\n    } else if (includes(affectedShapes, source) || includes(affectedShapes, target)) {\n\n      // re-layout connection with moved start/end\n      if (includes(movingShapes, source)) {\n        layoutHints.connectionStart = getMovedSourceAnchor(connection, source, delta);\n      } else if (includes(movingShapes, target)) {\n        layoutHints.connectionEnd = getMovedTargetAnchor(connection, target, delta);\n      } else if (includes(resizingShapes, source)) {\n        layoutHints.connectionStart = getResizedSourceAnchor(\n          connection, source, oldBounds[source.id]\n        );\n      } else if (includes(resizingShapes, target)) {\n        layoutHints.connectionEnd = getResizedTargetAnchor(\n          connection, target, oldBounds[target.id]\n        );\n      }\n\n      self._modeling.layoutConnection(connection, layoutHints);\n    }\n  });\n};\n\n\n// helpers //////////\n\nfunction copyWaypoint(waypoint) {\n  return assign({}, waypoint);\n}\n\nfunction copyWaypoints(connection) {\n  return map(connection.waypoints, function(waypoint) {\n\n    waypoint = copyWaypoint(waypoint);\n\n    if (waypoint.original) {\n      waypoint.original = copyWaypoint(waypoint.original);\n    }\n\n    return waypoint;\n  });\n}\n\nfunction getAxisFromDirection(direction) {\n  switch (direction) {\n  case 'n':\n    return 'y';\n  case 'w':\n    return 'x';\n  case 's':\n    return 'y';\n  case 'e':\n    return 'x';\n  }\n}\n\nfunction shouldMoveWaypoint(waypoint, start, direction) {\n  var relevantAxis = getAxisFromDirection(direction);\n\n  if (/e|s/.test(direction)) {\n    return waypoint[ relevantAxis ] > start;\n  } else if (/n|w/.test(direction)) {\n    return waypoint[ relevantAxis ] < start;\n  }\n}\n\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}\n\nfunction getBounds(shape) {\n  return {\n    x: shape.x,\n    y: shape.y,\n    height: shape.height,\n    width: shape.width\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}