{"ast":null,"code":"import{Octokit}from'@octokit/rest';import{processConcurrently}from'../utils/concurrency';import repositoryCompatibilityCache from'../utils/repositoryCompatibilityCache';import logger from'../utils/logger';class GitHubService{constructor(){this.octokit=null;this.isAuthenticated=false;this.permissions=null;this.tokenType=null;// 'classic', 'fine-grained', or 'oauth'\nthis.logger=logger.getLogger('GitHubService');this.logger.debug('GitHubService instance created');}// Initialize with a GitHub token (supports both OAuth and PAT tokens)\nauthenticate(token){const startTime=Date.now();this.logger.auth('Starting authentication',{tokenProvided:!!token,tokenLength:token?token.length:0});try{this.octokit=new Octokit({auth:token});this.isAuthenticated=true;const duration=Date.now()-startTime;this.logger.auth('Authentication successful',{duration});this.logger.performance('GitHub authentication',duration);return true;}catch(error){const duration=Date.now()-startTime;this.logger.auth('Authentication failed',{error:error.message,duration});console.error('Failed to authenticate with GitHub:',error);this.isAuthenticated=false;return false;}}// Initialize with an existing Octokit instance (for OAuth flow)\nauthenticateWithOctokit(octokitInstance){this.logger.auth('Starting OAuth authentication with Octokit instance');try{this.octokit=octokitInstance;this.isAuthenticated=true;this.tokenType='oauth';this.logger.auth('OAuth authentication successful',{tokenType:this.tokenType});return true;}catch(error){this.logger.auth('OAuth authentication failed',{error:error.message});console.error('Failed to authenticate with Octokit instance:',error);this.isAuthenticated=false;return false;}}// Check token permissions and type\nasync checkTokenPermissions(){if(!this.isAuth()){const error=new Error('Not authenticated with GitHub');this.logger.error('Token permission check failed - not authenticated');throw error;}const startTime=Date.now();this.logger.apiCall('GET','/user',null);try{// Try to get token info to determine type and permissions\nconst response=await this.octokit.request('GET /user');this.logger.apiResponse('GET','/user',response.status,Date.now()-startTime);// Check if this is a fine-grained token by trying to access rate limit info\ntry{const rateLimitStart=Date.now();this.logger.apiCall('GET','/rate_limit',null);const rateLimit=await this.octokit.rest.rateLimit.get();this.logger.apiResponse('GET','/rate_limit',rateLimit.status,Date.now()-rateLimitStart);// Fine-grained tokens have different rate limit structure\nthis.tokenType=rateLimit.data.resources.core?'classic':'fine-grained';this.logger.debug('Token type determined',{tokenType:this.tokenType,hasCore:!!rateLimit.data.resources.core});}catch(rateLimitError){this.tokenType='unknown';this.logger.warn('Could not determine token type from rate limit',{error:rateLimitError.message});}const permissions={type:this.tokenType,user:response.data};this.permissions=permissions;this.logger.debug('Token permissions checked successfully',{tokenType:this.tokenType,username:response.data.login});return permissions;}catch(error){const duration=Date.now()-startTime;this.logger.apiError('GET','/user',error);this.logger.performance('Token permission check (failed)',duration);console.error('Failed to check token permissions:',error);throw error;}}// Check if we have write permissions for a specific repository\nasync checkRepositoryWritePermissions(owner,repo){if(!this.isAuth()){this.logger.warn('Cannot check repository write permissions - not authenticated',{owner,repo});return false;}const startTime=Date.now();this.logger.debug('Checking write permissions for repository',{owner,repo});try{// Get current user first\nconst currentUser=await this.getCurrentUser();const username=currentUser.login;this.logger.apiCall('GET',`/repos/${owner}/${repo}/collaborators/${username}/permission`,null);// Try to get repository collaborator permissions\nconst{data}=await this.octokit.rest.repos.getCollaboratorPermissionLevel({owner,repo,username});const duration=Date.now()-startTime;this.logger.apiResponse('GET',`/repos/${owner}/${repo}/collaborators/${username}/permission`,200,duration);const hasWriteAccess=['write','admin'].includes(data.permission);this.logger.debug('Repository write permissions checked',{owner,repo,permission:data.permission,hasWriteAccess});return hasWriteAccess;}catch(error){const duration=Date.now()-startTime;this.logger.apiError('GET',`/repos/${owner}/${repo}/collaborators/*/permission`,error);this.logger.performance('Repository write permission check (failed)',duration);// If we can't check permissions, assume we don't have write access\nconsole.warn('Could not check repository write permissions:',error);this.logger.warn('Assuming no write access due to permission check failure',{owner,repo,error:error.message});return false;}}// Alias method for backward compatibility - delegates to checkRepositoryWritePermissions\nasync checkRepositoryPermissions(owner,repo){return this.checkRepositoryWritePermissions(owner,repo);}// Check if authenticated\nisAuth(){return this.isAuthenticated&&this.octokit!==null;}// Get current user data\nasync getCurrentUser(){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.users.getAuthenticated();return data;}catch(error){console.error('Failed to fetch user data:',error);throw error;}}// Get user's organizations\nasync getUserOrganizations(){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.orgs.listForAuthenticatedUser();return data;}catch(error){console.error('Failed to fetch organizations:',error);throw error;}}// Get specific organization data (public data, no auth required)\nasync getOrganization(orgLogin){try{// Create a temporary Octokit instance for public API calls if we don't have one\nconst octokit=this.octokit||new Octokit();const{data}=await octokit.rest.orgs.get({org:orgLogin});return data;}catch(error){console.error(`Failed to fetch organization ${orgLogin}:`,error);throw error;}}// Get specific user data (public data, no auth required)\nasync getUser(username){try{// Create a temporary Octokit instance for public API calls if we don't have one\nconst octokit=this.octokit||new Octokit();const{data}=await octokit.rest.users.getByUsername({username});return data;}catch(error){console.error(`Failed to fetch user ${username}:`,error);throw error;}}// Get WHO organization data with fresh avatar\nasync getWHOOrganization(){try{const whoData=await this.getOrganization('WorldHealthOrganization');return{id:whoData.id,login:whoData.login,display_name:whoData.name||'World Health Organization',description:whoData.description||'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',avatar_url:whoData.avatar_url,html_url:whoData.html_url,type:'Organization',permissions:{can_create_repositories:true,can_create_private_repositories:true},plan:{name:'Organization',private_repos:'unlimited'},isWHO:true};}catch(error){console.warn('Could not fetch WHO organization data from API, using fallback:',error);// Return hardcoded fallback data\nreturn{id:'who-organization',login:'WorldHealthOrganization',display_name:'World Health Organization',description:'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',avatar_url:'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',html_url:'https://github.com/WorldHealthOrganization',type:'Organization',permissions:{can_create_repositories:true,can_create_private_repositories:true},plan:{name:'Organization',private_repos:'unlimited'},isWHO:true};}}// Get repositories for a user or organization (now filters by SMART Guidelines compatibility)\nasync getRepositories(owner){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'user';let isDemo=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;// Handle demo mode - return demo repositories without requiring authentication\nif(isDemo||owner==='demo-user'){return this.getDemoRepositories(owner);}// Use the new SMART guidelines filtering method\nreturn this.getSmartGuidelinesRepositories(owner,type);}// Get demo repositories for demo mode (no authentication required)\ngetDemoRepositories(owner){const demoRepos=[{id:'demo-smart-anc',name:'smart-anc',full_name:`${owner}/smart-anc`,description:'Demo SMART Guidelines Digital Adaptation Kit for Antenatal Care',private:false,owner:{login:owner,id:'demo-owner',avatar_url:`https://github.com/${owner}.png`,type:'User'},html_url:`https://github.com/${owner}/smart-anc`,clone_url:`https://github.com/${owner}/smart-anc.git`,language:'FSH',stargazers_count:15,forks_count:3,open_issues_count:2,topics:['who','smart-guidelines','dak','antenatal-care','health'],created_at:'2023-01-15T10:00:00Z',updated_at:'2024-12-15T14:30:00Z',pushed_at:'2024-12-15T14:30:00Z',default_branch:'main',smart_guidelines_compatible:true,isDemo:true},{id:'demo-smart-tb',name:'smart-tb',full_name:`${owner}/smart-tb`,description:'Demo SMART Guidelines Digital Adaptation Kit for Tuberculosis Care',private:false,owner:{login:owner,id:'demo-owner',avatar_url:`https://github.com/${owner}.png`,type:'User'},html_url:`https://github.com/${owner}/smart-tb`,clone_url:`https://github.com/${owner}/smart-tb.git`,language:'FSH',stargazers_count:8,forks_count:1,open_issues_count:0,topics:['who','smart-guidelines','dak','tuberculosis','health'],created_at:'2023-03-20T15:00:00Z',updated_at:'2024-11-30T09:15:00Z',pushed_at:'2024-11-30T09:15:00Z',default_branch:'main',smart_guidelines_compatible:true,isDemo:true},{id:'demo-smart-ips-pilgrimage',name:'smart-ips-pilgrimage',full_name:`${owner}/smart-ips-pilgrimage`,description:'Demo SMART Guidelines International Patient Summary for Pilgrimage',private:false,owner:{login:owner,id:'demo-owner',avatar_url:`https://github.com/${owner}.png`,type:'User'},html_url:`https://github.com/${owner}/smart-ips-pilgrimage`,clone_url:`https://github.com/${owner}/smart-ips-pilgrimage.git`,language:'FSH',stargazers_count:12,forks_count:2,open_issues_count:1,topics:['who','smart-guidelines','dak','ips','pilgrimage','health'],created_at:'2023-06-10T12:00:00Z',updated_at:'2024-12-01T16:45:00Z',pushed_at:'2024-12-01T16:45:00Z',default_branch:'main',smart_guidelines_compatible:true,isDemo:true}];return Promise.resolve(demoRepos);}// Check if a repository has sushi-config.yaml with smart.who.int.base dependency\nasync checkSmartGuidelinesCompatibility(owner,repo){let retryCount=arguments.length>2&&arguments[2]!==undefined?arguments[2]:2;if(!this.isAuth()){return false;}// Check cache first to prevent redundant downloads\nconst cachedResult=repositoryCompatibilityCache.get(owner,repo);if(cachedResult!==null){return cachedResult;}try{// Try to get sushi-config.yaml from the repository root\nconst{data}=await this.octokit.rest.repos.getContent({owner,repo,path:'sushi-config.yaml'});if(data.type==='file'&&data.content){// Decode base64 content (browser-compatible)\nconst content=decodeURIComponent(escape(atob(data.content)));// Check if the content contains smart.who.int.base in dependencies\nconst isCompatible=content.includes('smart.who.int.base');// Cache the result\nrepositoryCompatibilityCache.set(owner,repo,isCompatible);return isCompatible;}// Cache negative result\nrepositoryCompatibilityCache.set(owner,repo,false);return false;}catch(error){// If it's a 404 (file not found), retry once more in case of temporary issues\nif(error.status===404&&retryCount>0){console.warn(`File not found for ${owner}/${repo}, retrying... (${retryCount} attempts left)`);// Use shorter delay in test environment\nconst delay=process.env.NODE_ENV==='test'?10:1000;await new Promise(resolve=>setTimeout(resolve,delay));return this.checkSmartGuidelinesCompatibility(owner,repo,retryCount-1);}// For any error (including rate limiting, network errors, or file not found after retries),\n// strictly return false - no fallback logic\nconsole.warn(`Failed to check ${owner}/${repo} for sushi-config.yaml with smart.who.int.base dependency:`,error.message);// Cache negative result\nrepositoryCompatibilityCache.set(owner,repo,false);return false;}}// Get repositories that are SMART guidelines compatible\nasync getSmartGuidelinesRepositories(owner){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'user';if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{let repositories=[];let page=1;let hasMorePages=true;// Fetch all repositories using pagination\nwhile(hasMorePages){let response;if(type==='user'){response=await this.octokit.rest.repos.listForUser({username:owner,sort:'updated',per_page:100,page:page});}else{response=await this.octokit.rest.repos.listForOrg({org:owner,sort:'updated',per_page:100,page:page});}repositories=repositories.concat(response.data);// Check if there are more pages\nhasMorePages=response.data.length===100;page++;}// Check each repository for SMART guidelines compatibility\nconst smartGuidelinesRepos=[];for(const repo of repositories){const isCompatible=await this.checkSmartGuidelinesCompatibility(repo.owner.login,repo.name);if(isCompatible){smartGuidelinesRepos.push({...repo,smart_guidelines_compatible:true});}}return smartGuidelinesRepos;}catch(error){console.error('Failed to fetch SMART guidelines repositories:',error);throw error;}}// Get repositories with progressive scanning (for real-time updates)\nasync getSmartGuidelinesRepositoriesProgressive(owner){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'user';let onRepositoryFound=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let onProgress=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{let repositories=[];let page=1;let hasMorePages=true;// Fetch all repositories using pagination\nwhile(hasMorePages){let response;if(type==='user'){response=await this.octokit.rest.repos.listForUser({username:owner,sort:'updated',per_page:100,page:page});}else{response=await this.octokit.rest.repos.listForOrg({org:owner,sort:'updated',per_page:100,page:page});}repositories=repositories.concat(response.data);// Check if there are more pages\nhasMorePages=response.data.length===100;page++;}// Handle case where user has no repositories\nif(repositories.length===0){console.log('📊 No repositories found for user, completing scan immediately');// Call progress callback to indicate completion\nif(onProgress){onProgress({current:0,total:0,currentRepo:'none',progress:100,completed:true});}return[];}// Process repositories concurrently with rate limiting and enhanced display\nconst processor=async(repo,index)=>{// Add a small delay to make scanning progress visible (similar to demo mode)\nawait new Promise(resolve=>setTimeout(resolve,100+Math.random()*200));const isCompatible=await this.checkSmartGuidelinesCompatibility(repo.owner.login,repo.name);if(isCompatible){const smartRepo={...repo,smart_guidelines_compatible:true};// Notify that a repository was found\nif(onRepositoryFound){onRepositoryFound(smartRepo);}return smartRepo;}return null;};// Use concurrent processing with max 5 parallel requests\nconst results=await processConcurrently(repositories,processor,{concurrency:5,onProgress:(completed,total,repo,result)=>{// Progress callback for completed items\nif(onProgress){onProgress({current:completed,total:total,currentRepo:repo.name,progress:Math.round(completed/total*100),completed:true});}},onItemStart:(repo,index)=>{// Progress callback for started items\nif(onProgress){onProgress({current:index+1,total:repositories.length,currentRepo:repo.name,progress:Math.round((index+1)/repositories.length*100),completed:false,started:true});}}});// Filter out null results and collect smart repositories\nconst validResults=results.filter(result=>result!==null&&!result.error);return validResults;}catch(error){console.error('Failed to fetch SMART guidelines repositories:',error);throw error;}}// Get a specific repository\nasync getRepository(owner,repo){try{// Use authenticated octokit if available, otherwise create a public instance for public repos\nconst octokit=this.isAuth()?this.octokit:new Octokit();const{data}=await octokit.rest.repos.get({owner,repo});return data;}catch(error){console.error('Failed to fetch repository:',error);throw error;}}// Get repository branches\nasync getBranches(owner,repo){try{console.log(`githubService.getBranches: Fetching branches for ${owner}/${repo}`);console.log('githubService.getBranches: Authentication status:',this.isAuth());// Use authenticated octokit if available, otherwise create a public instance for public repos\nconst octokit=this.isAuth()?this.octokit:new Octokit();console.log('githubService.getBranches: Using',this.isAuth()?'authenticated':'public','octokit instance');const{data}=await octokit.rest.repos.listBranches({owner,repo,per_page:100});console.log(`githubService.getBranches: Successfully fetched ${data.length} branches`);return data;}catch(error){console.error('githubService.getBranches: Failed to fetch branches:',error);console.error('githubService.getBranches: Error details:',{status:error.status,message:error.message,owner,repo});throw error;}}// Create a new branch\nasync createBranch(owner,repo,branchName){let fromBranch=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'main';if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{// First get the SHA of the source branch\nconst{data:refData}=await this.octokit.rest.git.getRef({owner,repo,ref:`heads/${fromBranch}`});// Create the new branch\nconst{data}=await this.octokit.rest.git.createRef({owner,repo,ref:`refs/heads/${branchName}`,sha:refData.object.sha});return data;}catch(error){console.error('Failed to create branch:',error);throw error;}}// Get a specific branch\nasync getBranch(owner,repo,branch){try{// Use authenticated octokit if available, otherwise create a public instance for public repos\nconst octokit=this.isAuth()?this.octokit:new Octokit();const{data}=await octokit.rest.repos.getBranch({owner,repo,branch});return data;}catch(error){console.error('Failed to fetch branch:',error);throw error;}}// GitHub Actions API methods\n// Get workflows for a repository (using GitHub API to include workflow IDs)\nasync getWorkflows(owner,repo){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{// Use GitHub Actions API to get workflows with their IDs\nconst{data}=await this.octokit.rest.actions.listRepoWorkflows({owner,repo});return data.workflows.map(workflow=>({id:workflow.id,// This is the crucial missing piece!\nname:workflow.name,filename:workflow.path.split('/').pop(),// Extract filename from path\npath:workflow.path,state:workflow.state,created_at:workflow.created_at,updated_at:workflow.updated_at,url:workflow.html_url,triggers:['unknown'],// GitHub API doesn't provide trigger info directly\nlastModified:workflow.updated_at}));}catch(error){if(error.status===404){// No workflows or repository not found\nreturn[];}console.error('Failed to fetch workflows:',error);throw error;}}// Get workflow runs for a repository\nasync getWorkflowRuns(owner,repo){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const params={owner,repo,per_page:options.per_page||10,page:options.page||1};if(options.branch){params.branch=options.branch;}if(options.workflow_id){params.workflow_id=options.workflow_id;}const{data}=await this.octokit.rest.actions.listWorkflowRunsForRepo(params);return data;}catch(error){console.error('Failed to fetch workflow runs:',error);throw error;}}// Get workflow runs for a specific workflow\nasync getWorkflowRunsForWorkflow(owner,repo,workflow_id){let options=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const params={owner,repo,workflow_id,per_page:options.per_page||10,page:options.page||1};if(options.branch){params.branch=options.branch;}const{data}=await this.octokit.rest.actions.listWorkflowRuns(params);return data;}catch(error){console.error('Failed to fetch workflow runs for workflow:',error);throw error;}}// Trigger a workflow run\nasync triggerWorkflow(owner,repo,workflow_id){let ref=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'main';let inputs=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.actions.createWorkflowDispatch({owner,repo,workflow_id,ref,inputs});return data;}catch(error){console.error('Failed to trigger workflow:',error);throw error;}}// Re-run a workflow\nasync rerunWorkflow(owner,repo,run_id){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.actions.reRunWorkflow({owner,repo,run_id});return data;}catch(error){console.error('Failed to re-run workflow:',error);throw error;}}// Get workflow run logs\nasync getWorkflowRunLogs(owner,repo,run_id){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.actions.downloadWorkflowRunLogs({owner,repo,run_id});return data;}catch(error){console.error('Failed to get workflow run logs:',error);throw error;}}// Approve a workflow run\nasync approveWorkflowRun(owner,repo,run_id){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.actions.approveWorkflowRun({owner,repo,run_id});return data;}catch(error){console.error('Failed to approve workflow run:',error);throw error;}}// Get commit comparison (diff)\nasync getCommitDiff(owner,repo,base,head){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.repos.compareCommits({owner,repo,base,head});return data;}catch(error){console.error('Failed to get commit diff:',error);throw error;}}// Get commit details\nasync getCommit(owner,repo,sha){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.repos.getCommit({owner,repo,ref:sha});return data;}catch(error){console.error('Failed to get commit details:',error);throw error;}}// Releases API methods\n// Get releases for a repository\nasync getReleases(owner,repo){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.repos.listReleases({owner,repo,per_page:options.per_page||10,page:options.page||1});return data;}catch(error){console.error('Failed to fetch releases:',error);throw error;}}// Get latest release\nasync getLatestRelease(owner,repo){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.repos.getLatestRelease({owner,repo});return data;}catch(error){console.error('Failed to fetch latest release:',error);throw error;}}// Recursively fetch BPMN files from a directory and its subdirectories\nasync getBpmnFilesRecursive(owner,repo,path){let ref=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'main';let allFiles=arguments.length>4&&arguments[4]!==undefined?arguments[4]:[];try{// Use authenticated octokit if available, otherwise create a public instance\nconst octokit=this.isAuth()?this.octokit:new Octokit();const{data}=await octokit.rest.repos.getContent({owner,repo,path,ref});// Handle single file response\nif(!Array.isArray(data)){if(data.name.endsWith('.bpmn')){allFiles.push(data);}return allFiles;}// Handle directory response\nfor(const item of data){if(item.type==='file'&&item.name.endsWith('.bpmn')){allFiles.push(item);}else if(item.type==='dir'){// Recursively search subdirectories\nawait this.getBpmnFilesRecursive(owner,repo,item.path,ref,allFiles);}}return allFiles;}catch(error){// If directory doesn't exist, return empty array (not an error)\nif(error.status===404){return allFiles;}throw error;}}// Get all BPMN files from a repository's business process directories\nasync getBpmnFiles(owner,repo){let ref=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'main';const allBpmnFiles=[];// Try multiple possible directory names where BPMN files might be stored\nconst possiblePaths=['input/business-processes','input/business-process','public/docs/workflows','docs/workflows','workflows','bpmn','processes'];for(const path of possiblePaths){try{const files=await this.getBpmnFilesRecursive(owner,repo,path,ref);allBpmnFiles.push(...files);}catch(error){console.warn(`Could not fetch BPMN files from ${path}:`,error.message);// Continue trying other paths\n}}// Remove duplicates based on path (in case both directories exist and have overlapping files)\nconst uniqueFiles=allBpmnFiles.filter((file,index,self)=>index===self.findIndex(f=>f.path===file.path));return uniqueFiles;}// Get file content from GitHub repository with timeout handling\nasync getFileContent(owner,repo,path){let ref=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'main';const timeoutMs=15000;// 15 second timeout\ntry{console.log(`🚀 githubService.getFileContent: Starting request for ${owner}/${repo}/${path} (ref: ${ref})`);console.log('🔐 githubService.getFileContent: Authentication status:',this.isAuth());console.log('📋 githubService.getFileContent: Request parameters:',{owner,repo,path,ref});// Use authenticated octokit if available, otherwise create a public instance for public repos\nconst octokit=this.isAuth()?this.octokit:new Octokit();console.log('🔧 githubService.getFileContent: Using',this.isAuth()?'authenticated':'public','octokit instance');// Create a promise that rejects after timeout\nconst timeoutPromise=new Promise((_,reject)=>{console.log(`⏰ githubService.getFileContent: Setting up ${timeoutMs}ms timeout`);setTimeout(()=>{console.error(`⏰ githubService.getFileContent: Request timed out after ${timeoutMs}ms`);reject(new Error(`Request timeout after ${timeoutMs}ms`));},timeoutMs);});// Race the GitHub API call against the timeout\nconsole.log('🌐 githubService.getFileContent: Creating GitHub API promise...');const apiPromise=octokit.rest.repos.getContent({owner,repo,path,ref});console.log('📡 githubService.getFileContent: API request initiated, waiting for response...');const startTime=Date.now();const{data}=await Promise.race([apiPromise,timeoutPromise]);const responseTime=Date.now()-startTime;console.log(`✅ githubService.getFileContent: API response received in ${responseTime}ms`);console.log('📂 githubService.getFileContent: Response data type:',data.type);console.log('📊 githubService.getFileContent: Response details:',{type:data.type,name:data.name,size:data.size,encoding:data.encoding,hasContent:!!data.content});// Handle file content\nif(data.type==='file'&&data.content){// Decode base64 content\nconsole.log('🔧 githubService.getFileContent: Decoding base64 content...');console.log('📊 githubService.getFileContent: Base64 content length:',data.content.length);const content=decodeURIComponent(escape(atob(data.content)));console.log(`✅ githubService.getFileContent: Successfully fetched and decoded file content`);console.log('📏 githubService.getFileContent: Final content length:',content.length,'characters');console.log('👀 githubService.getFileContent: Content preview (first 200 chars):',content.substring(0,200));return content;}else{console.error('❌ githubService.getFileContent: Invalid response - not a file or no content');console.error('🔍 githubService.getFileContent: Full response data:',JSON.stringify(data,null,2));throw new Error('File not found or is not a file');}}catch(error){var _error$stack;console.error(`💥 githubService.getFileContent: Failed to fetch file content from ${owner}/${repo}/${path}:`,error);console.error('🔍 githubService.getFileContent: Error analysis:',{type:typeof error,status:error.status,message:error.message,name:error.name,stack:((_error$stack=error.stack)===null||_error$stack===void 0?void 0:_error$stack.substring(0,500))+'...'});// Provide more specific error messages\nif(error.message.includes('timeout')){console.error('⏰ githubService.getFileContent: Timeout error detected');throw new Error(`GitHub API request timed out after ${timeoutMs/1000} seconds. Please try again.`);}else if(error.status===403){console.error('🔒 githubService.getFileContent: 403 Forbidden error detected');throw new Error('Access denied. This repository may be private or you may have hit rate limits.');}else if(error.status===404){console.error('🔍 githubService.getFileContent: 404 Not Found error detected');throw new Error('File not found in the repository.');}else if(error.message.includes('rate limit')){console.error('🚦 githubService.getFileContent: Rate limit error detected');throw new Error('GitHub API rate limit exceeded. Please try again later.');}else if(error.message.includes('Network Error')||error.message.includes('Failed to fetch')){console.error('🌐 githubService.getFileContent: Network error detected');throw new Error('Network error occurred. Please check your internet connection and try again.');}console.error('❓ githubService.getFileContent: Unknown error type, re-throwing original error');throw error;}}// Create a commit with multiple files\nasync createCommit(owner,repo,branch,message,files){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{// Get the latest commit SHA\nconst{data:refData}=await this.octokit.rest.git.getRef({owner,repo,ref:`heads/${branch}`});const latestCommitSha=refData.object.sha;// Get the tree SHA from the latest commit\nconst{data:commitData}=await this.octokit.rest.git.getCommit({owner,repo,commit_sha:latestCommitSha});const baseTreeSha=commitData.tree.sha;// Create blobs for all files\nconst blobs=await Promise.all(files.map(async file=>{const{data:blobData}=await this.octokit.rest.git.createBlob({owner,repo,content:file.content,encoding:'utf-8'});return{path:file.path,mode:'100644',type:'blob',sha:blobData.sha};}));// Create a new tree with the blobs\nconst{data:treeData}=await this.octokit.rest.git.createTree({owner,repo,base_tree:baseTreeSha,tree:blobs});// Create the commit\nconst{data:newCommitData}=await this.octokit.rest.git.createCommit({owner,repo,message,tree:treeData.sha,parents:[latestCommitSha]});// Update the branch reference\nawait this.octokit.rest.git.updateRef({owner,repo,ref:`heads/${branch}`,sha:newCommitData.sha});return{sha:newCommitData.sha,html_url:`https://github.com/${owner}/${repo}/commit/${newCommitData.sha}`,message:newCommitData.message,author:newCommitData.author,committer:newCommitData.committer};}catch(error){console.error('Failed to create commit:',error);throw error;}}// Get recent commits for a repository branch\nasync getRecentCommits(owner,repo){let branch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'main';let per_page=arguments.length>3&&arguments[3]!==undefined?arguments[3]:5;if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}const startTime=Date.now();this.logger.apiCall('GET',`/repos/${owner}/${repo}/commits`,{sha:branch,per_page});try{const response=await this.octokit.rest.repos.listCommits({owner,repo,sha:branch,per_page});this.logger.apiResponse('GET',`/repos/${owner}/${repo}/commits`,response.status,Date.now()-startTime);return response.data.map(commit=>({sha:commit.sha,message:commit.commit.message,author:{name:commit.commit.author.name,email:commit.commit.author.email,date:commit.commit.author.date},committer:{name:commit.commit.committer.name,email:commit.commit.committer.email,date:commit.commit.committer.date},html_url:commit.html_url,stats:commit.stats}));}catch(error){this.logger.apiResponse('GET',`/repos/${owner}/${repo}/commits`,error.status||'error',Date.now()-startTime);console.error('Failed to fetch recent commits:',error);throw error;}}// Get open pull requests count\nasync getOpenPullRequestsCount(owner,repo){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}const startTime=Date.now();this.logger.apiCall('GET',`/repos/${owner}/${repo}/pulls`,{state:'open',per_page:1});try{const response=await this.octokit.rest.pulls.list({owner,repo,state:'open',per_page:1});this.logger.apiResponse('GET',`/repos/${owner}/${repo}/pulls`,response.status,Date.now()-startTime);// GitHub includes the total count in the response headers\nconst linkHeader=response.headers.link;if(linkHeader&&linkHeader.includes('rel=\"last\"')){const lastPageMatch=linkHeader.match(/page=(\\d+)>; rel=\"last\"/);if(lastPageMatch){return parseInt(lastPageMatch[1],10);}}// Fallback: use the length of returned items (may not be accurate for large counts)\nreturn response.data.length;}catch(error){this.logger.apiResponse('GET',`/repos/${owner}/${repo}/pulls`,error.status||'error',Date.now()-startTime);console.error('Failed to fetch pull requests count:',error);throw error;}}// Get pull request for a specific branch (returns first PR only for backward compatibility)\nasync getPullRequestForBranch(owner,repo,branchName){const prs=await this.getPullRequestsForBranch(owner,repo,branchName);return prs&&prs.length>0?prs[0]:null;}// Get all pull requests for a specific branch\nasync getPullRequestsForBranch(owner,repo,branchName){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}const startTime=Date.now();this.logger.apiCall('GET',`/repos/${owner}/${repo}/pulls`,{state:'open',head:`${owner}:${branchName}`});try{const response=await this.octokit.rest.pulls.list({owner,repo,state:'open',head:`${owner}:${branchName}`,per_page:100// Get up to 100 PRs for a branch\n});this.logger.apiResponse('GET',`/repos/${owner}/${repo}/pulls`,response.status,Date.now()-startTime);// Return all matching PRs or empty array if none found\nreturn response.data||[];}catch(error){this.logger.apiResponse('GET',`/repos/${owner}/${repo}/pulls`,error.status||'error',Date.now()-startTime);console.error('Failed to fetch pull requests for branch:',error);return[];// Return empty array instead of throwing to allow graceful fallback\n}}// Get pull request comments\nasync getPullRequestComments(owner,repo,pullNumber){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}const startTime=Date.now();this.logger.apiCall('GET',`/repos/${owner}/${repo}/pulls/${pullNumber}/comments`,{});try{const response=await this.octokit.rest.pulls.listReviewComments({owner,repo,pull_number:pullNumber,per_page:100});this.logger.apiResponse('GET',`/repos/${owner}/${repo}/pulls/${pullNumber}/comments`,response.status,Date.now()-startTime);return response.data;}catch(error){this.logger.apiResponse('GET',`/repos/${owner}/${repo}/pulls/${pullNumber}/comments`,error.status||'error',Date.now()-startTime);console.error('Failed to fetch pull request comments:',error);throw error;}}// Get pull request issue comments (general comments on the PR conversation)\nasync getPullRequestIssueComments(owner,repo,pullNumber){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}const startTime=Date.now();this.logger.apiCall('GET',`/repos/${owner}/${repo}/issues/${pullNumber}/comments`,{});try{const response=await this.octokit.rest.issues.listComments({owner,repo,issue_number:pullNumber,per_page:100});this.logger.apiResponse('GET',`/repos/${owner}/${repo}/issues/${pullNumber}/comments`,response.status,Date.now()-startTime);return response.data;}catch(error){this.logger.apiResponse('GET',`/repos/${owner}/${repo}/issues/${pullNumber}/comments`,error.status||'error',Date.now()-startTime);console.error('Failed to fetch pull request issue comments:',error);throw error;}}// Create a comment on a pull request\nasync createPullRequestComment(owner,repo,pullNumber,body){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}const startTime=Date.now();this.logger.apiCall('POST',`/repos/${owner}/${repo}/issues/${pullNumber}/comments`,{body});try{const response=await this.octokit.rest.issues.createComment({owner,repo,issue_number:pullNumber,body});this.logger.apiResponse('POST',`/repos/${owner}/${repo}/issues/${pullNumber}/comments`,response.status,Date.now()-startTime);return response.data;}catch(error){this.logger.apiResponse('POST',`/repos/${owner}/${repo}/issues/${pullNumber}/comments`,error.status||'error',Date.now()-startTime);console.error('Failed to create pull request comment:',error);throw error;}}// Get open issues count\nasync getOpenIssuesCount(owner,repo){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}const startTime=Date.now();this.logger.apiCall('GET',`/repos/${owner}/${repo}/issues`,{state:'open',per_page:1});try{const response=await this.octokit.rest.issues.listForRepo({owner,repo,state:'open',per_page:1});this.logger.apiResponse('GET',`/repos/${owner}/${repo}/issues`,response.status,Date.now()-startTime);// GitHub includes the total count in the response headers\nconst linkHeader=response.headers.link;if(linkHeader&&linkHeader.includes('rel=\"last\"')){const lastPageMatch=linkHeader.match(/page=(\\d+)>; rel=\"last\"/);if(lastPageMatch){return parseInt(lastPageMatch[1],10);}}// Fallback: use the length of returned items (may not be accurate for large counts)\nreturn response.data.length;}catch(error){this.logger.apiResponse('GET',`/repos/${owner}/${repo}/issues`,error.status||'error',Date.now()-startTime);console.error('Failed to fetch issues count:',error);throw error;}}// Get repository statistics (combined method for efficiency)\nasync getRepositoryStats(owner,repo){let branch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'main';if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const[recentCommits,openPRsCount,openIssuesCount]=await Promise.allSettled([this.getRecentCommits(owner,repo,branch,1),this.getOpenPullRequestsCount(owner,repo),this.getOpenIssuesCount(owner,repo)]);return{recentCommits:recentCommits.status==='fulfilled'?recentCommits.value:[],openPullRequestsCount:openPRsCount.status==='fulfilled'?openPRsCount.value:0,openIssuesCount:openIssuesCount.status==='fulfilled'?openIssuesCount.value:0,errors:{recentCommits:recentCommits.status==='rejected'?recentCommits.reason:null,openPullRequestsCount:openPRsCount.status==='rejected'?openPRsCount.reason:null,openIssuesCount:openIssuesCount.status==='rejected'?openIssuesCount.reason:null}};}catch(error){console.error('Failed to fetch repository stats:',error);throw error;}}// Get directory contents (supports both authenticated and unauthenticated access)\nasync getDirectoryContents(owner,repo){let path=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';let ref=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'main';try{// Create temporary Octokit instance for unauthenticated access if needed\nconst octokit=this.isAuth()?this.octokit:new Octokit();const{data}=await octokit.rest.repos.getContent({owner,repo,path,ref});if(Array.isArray(data)){return data;}else{throw new Error('Not a directory');}}catch(error){console.error(`Failed to get directory contents for ${path}:`,error);throw error;}}// Update file content (requires authentication)\nasync updateFile(owner,repo,path,content,message){let branch=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'main';if(!this.isAuth()){throw new Error('Authentication required to update files');}try{// First, get the current file to get its SHA\nconst{data:currentFile}=await this.octokit.rest.repos.getContent({owner,repo,path,ref:branch});if(Array.isArray(currentFile)){throw new Error('Path is a directory, not a file');}// Update the file\nconst{data}=await this.octokit.rest.repos.createOrUpdateFileContents({owner,repo,path,message,content:btoa(unescape(encodeURIComponent(content))),sha:currentFile.sha,branch});return data;}catch(error){console.error(`Failed to update file ${path}:`,error);throw error;}}// Get commits for a repository (supports unauthenticated access)\nasync getCommits(owner,repo){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};try{// Create temporary Octokit instance for unauthenticated access if needed\nconst octokit=this.isAuth()?this.octokit:new Octokit();const params={owner,repo,per_page:options.per_page||10,page:options.page||1};if(options.sha){params.sha=options.sha;}if(options.since){params.since=options.since;}if(options.until){params.until=options.until;}const{data}=await octokit.rest.repos.listCommits(params);return data;}catch(error){console.error('Failed to fetch commits:',error);throw error;}}// Get issues for a repository (supports unauthenticated access)\nasync getIssues(owner,repo){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};try{// Create temporary Octokit instance for unauthenticated access if needed\nconst octokit=this.isAuth()?this.octokit:new Octokit();const params={owner,repo,state:options.state||'all',per_page:options.per_page||30,page:options.page||1};if(options.labels){params.labels=options.labels;}if(options.milestone){params.milestone=options.milestone;}const{data}=await octokit.rest.issues.listForRepo(params);return data;}catch(error){console.error('Failed to fetch issues:',error);throw error;}}// Alias method for backward compatibility - delegates to getIssues\nasync getRepositoryIssues(owner,repo){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return this.getIssues(owner,repo,options);}// Logout\nlogout(){this.octokit=null;this.isAuthenticated=false;this.tokenType=null;this.permissions=null;localStorage.removeItem('github_token');sessionStorage.removeItem('github_token');// Clear branch context on logout\ntry{const{default:branchContextService}=require('../services/branchContextService');branchContextService.clearAllBranchContext();}catch(error){// Service might not be available during testing\nsessionStorage.removeItem('sgex_branch_context');}}// Get repository forks\nasync getRepositoryForks(owner,repo){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const startTime=Date.now();this.logger.debug('Fetching repository forks',{owner,repo,options});try{// Create temporary Octokit instance for unauthenticated access if needed\nconst octokit=this.isAuth()?this.octokit:new Octokit();this.logger.apiCall('GET',`/repos/${owner}/${repo}/forks`,options);const{data}=await octokit.rest.repos.listForks({owner,repo,sort:'newest',// Sort by newest first\nper_page:options.per_page||100,page:options.page||1});const duration=Date.now()-startTime;this.logger.apiResponse('GET',`/repos/${owner}/${repo}/forks`,200,duration,{forkCount:data.length});this.logger.performance('Repository forks fetch',duration);return data;}catch(error){const duration=Date.now()-startTime;this.logger.apiError('GET',`/repos/${owner}/${repo}/forks`,error);this.logger.performance('Repository forks fetch (failed)',duration);console.error(`Failed to fetch forks for ${owner}/${repo}:`,error);throw error;}}}// Create a singleton instance\nconst githubService=new GitHubService();export default githubService;","map":{"version":3,"names":["Octokit","processConcurrently","repositoryCompatibilityCache","logger","GitHubService","constructor","octokit","isAuthenticated","permissions","tokenType","getLogger","debug","authenticate","token","startTime","Date","now","auth","tokenProvided","tokenLength","length","duration","performance","error","message","console","authenticateWithOctokit","octokitInstance","checkTokenPermissions","isAuth","Error","apiCall","response","request","apiResponse","status","rateLimitStart","rateLimit","rest","get","data","resources","core","hasCore","rateLimitError","warn","type","user","username","login","apiError","checkRepositoryWritePermissions","owner","repo","currentUser","getCurrentUser","repos","getCollaboratorPermissionLevel","hasWriteAccess","includes","permission","checkRepositoryPermissions","users","getAuthenticated","getUserOrganizations","orgs","listForAuthenticatedUser","getOrganization","orgLogin","org","getUser","getByUsername","getWHOOrganization","whoData","id","display_name","name","description","avatar_url","html_url","can_create_repositories","can_create_private_repositories","plan","private_repos","isWHO","getRepositories","arguments","undefined","isDemo","getDemoRepositories","getSmartGuidelinesRepositories","demoRepos","full_name","private","clone_url","language","stargazers_count","forks_count","open_issues_count","topics","created_at","updated_at","pushed_at","default_branch","smart_guidelines_compatible","Promise","resolve","checkSmartGuidelinesCompatibility","retryCount","cachedResult","getContent","path","content","decodeURIComponent","escape","atob","isCompatible","set","delay","process","env","NODE_ENV","setTimeout","repositories","page","hasMorePages","listForUser","sort","per_page","listForOrg","concat","smartGuidelinesRepos","push","getSmartGuidelinesRepositoriesProgressive","onRepositoryFound","onProgress","log","current","total","currentRepo","progress","completed","processor","index","Math","random","smartRepo","results","concurrency","result","round","onItemStart","started","validResults","filter","getRepository","getBranches","listBranches","createBranch","branchName","fromBranch","refData","git","getRef","ref","createRef","sha","object","getBranch","branch","getWorkflows","actions","listRepoWorkflows","workflows","map","workflow","filename","split","pop","state","url","triggers","lastModified","getWorkflowRuns","options","params","workflow_id","listWorkflowRunsForRepo","getWorkflowRunsForWorkflow","listWorkflowRuns","triggerWorkflow","inputs","createWorkflowDispatch","rerunWorkflow","run_id","reRunWorkflow","getWorkflowRunLogs","downloadWorkflowRunLogs","approveWorkflowRun","getCommitDiff","base","head","compareCommits","getCommit","getReleases","listReleases","getLatestRelease","getBpmnFilesRecursive","allFiles","Array","isArray","endsWith","item","getBpmnFiles","allBpmnFiles","possiblePaths","files","uniqueFiles","file","self","findIndex","f","getFileContent","timeoutMs","timeoutPromise","_","reject","apiPromise","race","responseTime","size","encoding","hasContent","substring","JSON","stringify","_error$stack","stack","createCommit","latestCommitSha","commitData","commit_sha","baseTreeSha","tree","blobs","all","blobData","createBlob","mode","treeData","createTree","base_tree","newCommitData","parents","updateRef","author","committer","getRecentCommits","listCommits","commit","email","date","stats","getOpenPullRequestsCount","pulls","list","linkHeader","headers","link","lastPageMatch","match","parseInt","getPullRequestForBranch","prs","getPullRequestsForBranch","getPullRequestComments","pullNumber","listReviewComments","pull_number","getPullRequestIssueComments","issues","listComments","issue_number","createPullRequestComment","body","createComment","getOpenIssuesCount","listForRepo","getRepositoryStats","recentCommits","openPRsCount","openIssuesCount","allSettled","value","openPullRequestsCount","errors","reason","getDirectoryContents","updateFile","currentFile","createOrUpdateFileContents","btoa","unescape","encodeURIComponent","getCommits","since","until","getIssues","labels","milestone","getRepositoryIssues","logout","localStorage","removeItem","sessionStorage","default","branchContextService","require","clearAllBranchContext","getRepositoryForks","listForks","forkCount","githubService"],"sources":["/home/runner/work/sgex/sgex/src/services/githubService.js"],"sourcesContent":["import { Octokit } from '@octokit/rest';\nimport { processConcurrently } from '../utils/concurrency';\nimport repositoryCompatibilityCache from '../utils/repositoryCompatibilityCache';\nimport logger from '../utils/logger';\n\nclass GitHubService {\n  constructor() {\n    this.octokit = null;\n    this.isAuthenticated = false;\n    this.permissions = null;\n    this.tokenType = null; // 'classic', 'fine-grained', or 'oauth'\n    this.logger = logger.getLogger('GitHubService');\n    this.logger.debug('GitHubService instance created');\n  }\n\n  // Initialize with a GitHub token (supports both OAuth and PAT tokens)\n  authenticate(token) {\n    const startTime = Date.now();\n    this.logger.auth('Starting authentication', { tokenProvided: !!token, tokenLength: token ? token.length : 0 });\n    \n    try {\n      this.octokit = new Octokit({\n        auth: token,\n      });\n      this.isAuthenticated = true;\n      \n      const duration = Date.now() - startTime;\n      this.logger.auth('Authentication successful', { duration });\n      this.logger.performance('GitHub authentication', duration);\n      \n      return true;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      this.logger.auth('Authentication failed', { error: error.message, duration });\n      console.error('Failed to authenticate with GitHub:', error);\n      this.isAuthenticated = false;\n      return false;\n    }\n  }\n\n  // Initialize with an existing Octokit instance (for OAuth flow)\n  authenticateWithOctokit(octokitInstance) {\n    this.logger.auth('Starting OAuth authentication with Octokit instance');\n    \n    try {\n      this.octokit = octokitInstance;\n      this.isAuthenticated = true;\n      this.tokenType = 'oauth';\n      \n      this.logger.auth('OAuth authentication successful', { tokenType: this.tokenType });\n      return true;\n    } catch (error) {\n      this.logger.auth('OAuth authentication failed', { error: error.message });\n      console.error('Failed to authenticate with Octokit instance:', error);\n      this.isAuthenticated = false;\n      return false;\n    }\n  }\n\n  // Check token permissions and type\n  async checkTokenPermissions() {\n    if (!this.isAuth()) {\n      const error = new Error('Not authenticated with GitHub');\n      this.logger.error('Token permission check failed - not authenticated');\n      throw error;\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', '/user', null);\n\n    try {\n      // Try to get token info to determine type and permissions\n      const response = await this.octokit.request('GET /user');\n      this.logger.apiResponse('GET', '/user', response.status, Date.now() - startTime);\n      \n      // Check if this is a fine-grained token by trying to access rate limit info\n      try {\n        const rateLimitStart = Date.now();\n        this.logger.apiCall('GET', '/rate_limit', null);\n        const rateLimit = await this.octokit.rest.rateLimit.get();\n        this.logger.apiResponse('GET', '/rate_limit', rateLimit.status, Date.now() - rateLimitStart);\n        \n        // Fine-grained tokens have different rate limit structure\n        this.tokenType = rateLimit.data.resources.core ? 'classic' : 'fine-grained';\n        this.logger.debug('Token type determined', { tokenType: this.tokenType, hasCore: !!rateLimit.data.resources.core });\n      } catch (rateLimitError) {\n        this.tokenType = 'unknown';\n        this.logger.warn('Could not determine token type from rate limit', { error: rateLimitError.message });\n      }\n\n      const permissions = {\n        type: this.tokenType,\n        user: response.data\n      };\n      \n      this.permissions = permissions;\n      this.logger.debug('Token permissions checked successfully', { \n        tokenType: this.tokenType, \n        username: response.data.login \n      });\n      \n      return permissions;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      this.logger.apiError('GET', '/user', error);\n      this.logger.performance('Token permission check (failed)', duration);\n      console.error('Failed to check token permissions:', error);\n      throw error;\n    }\n  }\n\n  // Check if we have write permissions for a specific repository\n  async checkRepositoryWritePermissions(owner, repo) {\n    if (!this.isAuth()) {\n      this.logger.warn('Cannot check repository write permissions - not authenticated', { owner, repo });\n      return false;\n    }\n\n    const startTime = Date.now();\n    this.logger.debug('Checking write permissions for repository', { owner, repo });\n\n    try {\n      // Get current user first\n      const currentUser = await this.getCurrentUser();\n      const username = currentUser.login;\n      \n      this.logger.apiCall('GET', `/repos/${owner}/${repo}/collaborators/${username}/permission`, null);\n      \n      // Try to get repository collaborator permissions\n      const { data } = await this.octokit.rest.repos.getCollaboratorPermissionLevel({\n        owner,\n        repo,\n        username\n      });\n      \n      const duration = Date.now() - startTime;\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/collaborators/${username}/permission`, 200, duration);\n      \n      const hasWriteAccess = ['write', 'admin'].includes(data.permission);\n      this.logger.debug('Repository write permissions checked', { \n        owner, \n        repo, \n        permission: data.permission, \n        hasWriteAccess \n      });\n      \n      return hasWriteAccess;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      this.logger.apiError('GET', `/repos/${owner}/${repo}/collaborators/*/permission`, error);\n      this.logger.performance('Repository write permission check (failed)', duration);\n      \n      // If we can't check permissions, assume we don't have write access\n      console.warn('Could not check repository write permissions:', error);\n      this.logger.warn('Assuming no write access due to permission check failure', { owner, repo, error: error.message });\n      return false;\n    }\n  }\n\n  // Alias method for backward compatibility - delegates to checkRepositoryWritePermissions\n  async checkRepositoryPermissions(owner, repo) {\n    return this.checkRepositoryWritePermissions(owner, repo);\n  }\n\n  // Check if authenticated\n  isAuth() {\n    return this.isAuthenticated && this.octokit !== null;\n  }\n\n  // Get current user data\n  async getCurrentUser() {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.users.getAuthenticated();\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch user data:', error);\n      throw error;\n    }\n  }\n\n  // Get user's organizations\n  async getUserOrganizations() {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.orgs.listForAuthenticatedUser();\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch organizations:', error);\n      throw error;\n    }\n  }\n\n  // Get specific organization data (public data, no auth required)\n  async getOrganization(orgLogin) {\n    try {\n      // Create a temporary Octokit instance for public API calls if we don't have one\n      const octokit = this.octokit || new Octokit();\n      \n      const { data } = await octokit.rest.orgs.get({\n        org: orgLogin\n      });\n      return data;\n    } catch (error) {\n      console.error(`Failed to fetch organization ${orgLogin}:`, error);\n      throw error;\n    }\n  }\n\n  // Get specific user data (public data, no auth required)\n  async getUser(username) {\n    try {\n      // Create a temporary Octokit instance for public API calls if we don't have one\n      const octokit = this.octokit || new Octokit();\n      \n      const { data } = await octokit.rest.users.getByUsername({\n        username\n      });\n      return data;\n    } catch (error) {\n      console.error(`Failed to fetch user ${username}:`, error);\n      throw error;\n    }\n  }\n\n  // Get WHO organization data with fresh avatar\n  async getWHOOrganization() {\n    try {\n      const whoData = await this.getOrganization('WorldHealthOrganization');\n      return {\n        id: whoData.id,\n        login: whoData.login,\n        display_name: whoData.name || 'World Health Organization',\n        description: whoData.description || 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n        avatar_url: whoData.avatar_url,\n        html_url: whoData.html_url,\n        type: 'Organization',\n        permissions: {\n          can_create_repositories: true,\n          can_create_private_repositories: true\n        },\n        plan: {\n          name: 'Organization',\n          private_repos: 'unlimited'\n        },\n        isWHO: true\n      };\n    } catch (error) {\n      console.warn('Could not fetch WHO organization data from API, using fallback:', error);\n      // Return hardcoded fallback data\n      return {\n        id: 'who-organization',\n        login: 'WorldHealthOrganization',\n        display_name: 'World Health Organization',\n        description: 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n        avatar_url: 'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',\n        html_url: 'https://github.com/WorldHealthOrganization',\n        type: 'Organization',\n        permissions: {\n          can_create_repositories: true,\n          can_create_private_repositories: true\n        },\n        plan: {\n          name: 'Organization',\n          private_repos: 'unlimited'\n        },\n        isWHO: true\n      };\n    }\n  }\n\n  // Get repositories for a user or organization (now filters by SMART Guidelines compatibility)\n  async getRepositories(owner, type = 'user', isDemo = false) {\n    // Handle demo mode - return demo repositories without requiring authentication\n    if (isDemo || owner === 'demo-user') {\n      return this.getDemoRepositories(owner);\n    }\n    \n    // Use the new SMART guidelines filtering method\n    return this.getSmartGuidelinesRepositories(owner, type);\n  }\n\n  // Get demo repositories for demo mode (no authentication required)\n  getDemoRepositories(owner) {\n    const demoRepos = [\n      {\n        id: 'demo-smart-anc',\n        name: 'smart-anc',\n        full_name: `${owner}/smart-anc`,\n        description: 'Demo SMART Guidelines Digital Adaptation Kit for Antenatal Care',\n        private: false,\n        owner: {\n          login: owner,\n          id: 'demo-owner',\n          avatar_url: `https://github.com/${owner}.png`,\n          type: 'User'\n        },\n        html_url: `https://github.com/${owner}/smart-anc`,\n        clone_url: `https://github.com/${owner}/smart-anc.git`,\n        language: 'FSH',\n        stargazers_count: 15,\n        forks_count: 3,\n        open_issues_count: 2,\n        topics: ['who', 'smart-guidelines', 'dak', 'antenatal-care', 'health'],\n        created_at: '2023-01-15T10:00:00Z',\n        updated_at: '2024-12-15T14:30:00Z',\n        pushed_at: '2024-12-15T14:30:00Z',\n        default_branch: 'main',\n        smart_guidelines_compatible: true,\n        isDemo: true\n      },\n      {\n        id: 'demo-smart-tb',\n        name: 'smart-tb',\n        full_name: `${owner}/smart-tb`,\n        description: 'Demo SMART Guidelines Digital Adaptation Kit for Tuberculosis Care',\n        private: false,\n        owner: {\n          login: owner,\n          id: 'demo-owner',\n          avatar_url: `https://github.com/${owner}.png`,\n          type: 'User'\n        },\n        html_url: `https://github.com/${owner}/smart-tb`,\n        clone_url: `https://github.com/${owner}/smart-tb.git`,\n        language: 'FSH',\n        stargazers_count: 8,\n        forks_count: 1,\n        open_issues_count: 0,\n        topics: ['who', 'smart-guidelines', 'dak', 'tuberculosis', 'health'],\n        created_at: '2023-03-20T15:00:00Z',\n        updated_at: '2024-11-30T09:15:00Z',\n        pushed_at: '2024-11-30T09:15:00Z',\n        default_branch: 'main',\n        smart_guidelines_compatible: true,\n        isDemo: true\n      },\n      {\n        id: 'demo-smart-ips-pilgrimage',\n        name: 'smart-ips-pilgrimage',\n        full_name: `${owner}/smart-ips-pilgrimage`,\n        description: 'Demo SMART Guidelines International Patient Summary for Pilgrimage',\n        private: false,\n        owner: {\n          login: owner,\n          id: 'demo-owner',\n          avatar_url: `https://github.com/${owner}.png`,\n          type: 'User'\n        },\n        html_url: `https://github.com/${owner}/smart-ips-pilgrimage`,\n        clone_url: `https://github.com/${owner}/smart-ips-pilgrimage.git`,\n        language: 'FSH',\n        stargazers_count: 12,\n        forks_count: 2,\n        open_issues_count: 1,\n        topics: ['who', 'smart-guidelines', 'dak', 'ips', 'pilgrimage', 'health'],\n        created_at: '2023-06-10T12:00:00Z',\n        updated_at: '2024-12-01T16:45:00Z',\n        pushed_at: '2024-12-01T16:45:00Z',\n        default_branch: 'main',\n        smart_guidelines_compatible: true,\n        isDemo: true\n      }\n    ];\n\n    return Promise.resolve(demoRepos);\n  }\n\n  // Check if a repository has sushi-config.yaml with smart.who.int.base dependency\n  async checkSmartGuidelinesCompatibility(owner, repo, retryCount = 2) {\n    if (!this.isAuth()) {\n      return false;\n    }\n\n    // Check cache first to prevent redundant downloads\n    const cachedResult = repositoryCompatibilityCache.get(owner, repo);\n    if (cachedResult !== null) {\n      return cachedResult;\n    }\n\n    try {\n      // Try to get sushi-config.yaml from the repository root\n      const { data } = await this.octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path: 'sushi-config.yaml',\n      });\n\n      if (data.type === 'file' && data.content) {\n        // Decode base64 content (browser-compatible)\n        const content = decodeURIComponent(escape(atob(data.content)));\n        \n        // Check if the content contains smart.who.int.base in dependencies\n        const isCompatible = content.includes('smart.who.int.base');\n        \n        // Cache the result\n        repositoryCompatibilityCache.set(owner, repo, isCompatible);\n        return isCompatible;\n      }\n      \n      // Cache negative result\n      repositoryCompatibilityCache.set(owner, repo, false);\n      return false;\n    } catch (error) {\n      // If it's a 404 (file not found), retry once more in case of temporary issues\n      if (error.status === 404 && retryCount > 0) {\n        console.warn(`File not found for ${owner}/${repo}, retrying... (${retryCount} attempts left)`);\n        // Use shorter delay in test environment\n        const delay = process.env.NODE_ENV === 'test' ? 10 : 1000;\n        await new Promise(resolve => setTimeout(resolve, delay));\n        return this.checkSmartGuidelinesCompatibility(owner, repo, retryCount - 1);\n      }\n      \n      // For any error (including rate limiting, network errors, or file not found after retries),\n      // strictly return false - no fallback logic\n      console.warn(`Failed to check ${owner}/${repo} for sushi-config.yaml with smart.who.int.base dependency:`, error.message);\n      \n      // Cache negative result\n      repositoryCompatibilityCache.set(owner, repo, false);\n      return false;\n    }\n  }\n\n\n\n  // Get repositories that are SMART guidelines compatible\n  async getSmartGuidelinesRepositories(owner, type = 'user') {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      let repositories = [];\n      let page = 1;\n      let hasMorePages = true;\n\n      // Fetch all repositories using pagination\n      while (hasMorePages) {\n        let response;\n        if (type === 'user') {\n          response = await this.octokit.rest.repos.listForUser({\n            username: owner,\n            sort: 'updated',\n            per_page: 100,\n            page: page,\n          });\n        } else {\n          response = await this.octokit.rest.repos.listForOrg({\n            org: owner,\n            sort: 'updated',\n            per_page: 100,\n            page: page,\n          });\n        }\n\n        repositories = repositories.concat(response.data);\n        \n        // Check if there are more pages\n        hasMorePages = response.data.length === 100;\n        page++;\n      }\n\n      // Check each repository for SMART guidelines compatibility\n      const smartGuidelinesRepos = [];\n      for (const repo of repositories) {\n        const isCompatible = await this.checkSmartGuidelinesCompatibility(repo.owner.login, repo.name);\n        if (isCompatible) {\n          smartGuidelinesRepos.push({\n            ...repo,\n            smart_guidelines_compatible: true\n          });\n        }\n      }\n\n      return smartGuidelinesRepos;\n    } catch (error) {\n      console.error('Failed to fetch SMART guidelines repositories:', error);\n      throw error;\n    }\n  }\n\n  // Get repositories with progressive scanning (for real-time updates)\n  async getSmartGuidelinesRepositoriesProgressive(owner, type = 'user', onRepositoryFound = null, onProgress = null) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      let repositories = [];\n      let page = 1;\n      let hasMorePages = true;\n\n      // Fetch all repositories using pagination\n      while (hasMorePages) {\n        let response;\n        if (type === 'user') {\n          response = await this.octokit.rest.repos.listForUser({\n            username: owner,\n            sort: 'updated',\n            per_page: 100,\n            page: page,\n          });\n        } else {\n          response = await this.octokit.rest.repos.listForOrg({\n            org: owner,\n            sort: 'updated',\n            per_page: 100,\n            page: page,\n          });\n        }\n\n        repositories = repositories.concat(response.data);\n        \n        // Check if there are more pages\n        hasMorePages = response.data.length === 100;\n        page++;\n      }\n\n      // Handle case where user has no repositories\n      if (repositories.length === 0) {\n        console.log('📊 No repositories found for user, completing scan immediately');\n        // Call progress callback to indicate completion\n        if (onProgress) {\n          onProgress({\n            current: 0,\n            total: 0,\n            currentRepo: 'none',\n            progress: 100,\n            completed: true\n          });\n        }\n        return [];\n      }\n\n      // Process repositories concurrently with rate limiting and enhanced display\n      const processor = async (repo, index) => {\n        // Add a small delay to make scanning progress visible (similar to demo mode)\n        await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));\n        \n        const isCompatible = await this.checkSmartGuidelinesCompatibility(repo.owner.login, repo.name);\n        \n        if (isCompatible) {\n          const smartRepo = {\n            ...repo,\n            smart_guidelines_compatible: true\n          };\n          \n          // Notify that a repository was found\n          if (onRepositoryFound) {\n            onRepositoryFound(smartRepo);\n          }\n          \n          return smartRepo;\n        }\n        \n        return null;\n      };\n\n      // Use concurrent processing with max 5 parallel requests\n      const results = await processConcurrently(repositories, processor, {\n        concurrency: 5,\n        onProgress: (completed, total, repo, result) => {\n          // Progress callback for completed items\n          if (onProgress) {\n            onProgress({\n              current: completed,\n              total: total,\n              currentRepo: repo.name,\n              progress: Math.round((completed / total) * 100),\n              completed: true\n            });\n          }\n        },\n        onItemStart: (repo, index) => {\n          // Progress callback for started items\n          if (onProgress) {\n            onProgress({\n              current: index + 1,\n              total: repositories.length,\n              currentRepo: repo.name,\n              progress: Math.round(((index + 1) / repositories.length) * 100),\n              completed: false,\n              started: true\n            });\n          }\n        }\n      });\n\n      // Filter out null results and collect smart repositories\n      const validResults = results.filter(result => result !== null && !result.error);\n      \n      return validResults;\n    } catch (error) {\n      console.error('Failed to fetch SMART guidelines repositories:', error);\n      throw error;\n    }\n  }\n\n  // Get a specific repository\n  async getRepository(owner, repo) {\n    try {\n      // Use authenticated octokit if available, otherwise create a public instance for public repos\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const { data } = await octokit.rest.repos.get({\n        owner,\n        repo,\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch repository:', error);\n      throw error;\n    }  \n  }\n\n  // Get repository branches\n  async getBranches(owner, repo) {\n    try {\n      console.log(`githubService.getBranches: Fetching branches for ${owner}/${repo}`);\n      console.log('githubService.getBranches: Authentication status:', this.isAuth());\n      \n      // Use authenticated octokit if available, otherwise create a public instance for public repos\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      console.log('githubService.getBranches: Using', this.isAuth() ? 'authenticated' : 'public', 'octokit instance');\n      \n      const { data } = await octokit.rest.repos.listBranches({\n        owner,\n        repo,\n        per_page: 100\n      });\n      \n      console.log(`githubService.getBranches: Successfully fetched ${data.length} branches`);\n      return data;\n    } catch (error) {\n      console.error('githubService.getBranches: Failed to fetch branches:', error);\n      console.error('githubService.getBranches: Error details:', {\n        status: error.status,\n        message: error.message,\n        owner,\n        repo\n      });\n      throw error;\n    }\n  }\n\n  // Create a new branch\n  async createBranch(owner, repo, branchName, fromBranch = 'main') {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      // First get the SHA of the source branch\n      const { data: refData } = await this.octokit.rest.git.getRef({\n        owner,\n        repo,\n        ref: `heads/${fromBranch}`\n      });\n\n      // Create the new branch\n      const { data } = await this.octokit.rest.git.createRef({\n        owner,\n        repo,\n        ref: `refs/heads/${branchName}`,\n        sha: refData.object.sha\n      });\n\n      return data;\n    } catch (error) {\n      console.error('Failed to create branch:', error);\n      throw error;\n    }\n  }\n\n  // Get a specific branch\n  async getBranch(owner, repo, branch) {\n    try {\n      // Use authenticated octokit if available, otherwise create a public instance for public repos\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const { data } = await octokit.rest.repos.getBranch({\n        owner,\n        repo,\n        branch\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch branch:', error);\n      throw error;\n    }\n  }\n\n  // GitHub Actions API methods\n  \n  // Get workflows for a repository (using GitHub API to include workflow IDs)\n  async getWorkflows(owner, repo) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      // Use GitHub Actions API to get workflows with their IDs\n      const { data } = await this.octokit.rest.actions.listRepoWorkflows({\n        owner,\n        repo\n      });\n\n      return data.workflows.map(workflow => ({\n        id: workflow.id, // This is the crucial missing piece!\n        name: workflow.name,\n        filename: workflow.path.split('/').pop(), // Extract filename from path\n        path: workflow.path,\n        state: workflow.state,\n        created_at: workflow.created_at,\n        updated_at: workflow.updated_at,\n        url: workflow.html_url,\n        triggers: ['unknown'], // GitHub API doesn't provide trigger info directly\n        lastModified: workflow.updated_at\n      }));\n    } catch (error) {\n      if (error.status === 404) {\n        // No workflows or repository not found\n        return [];\n      }\n      console.error('Failed to fetch workflows:', error);\n      throw error;\n    }\n  }\n\n  // Get workflow runs for a repository\n  async getWorkflowRuns(owner, repo, options = {}) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const params = {\n        owner,\n        repo,\n        per_page: options.per_page || 10,\n        page: options.page || 1\n      };\n\n      if (options.branch) {\n        params.branch = options.branch;\n      }\n\n      if (options.workflow_id) {\n        params.workflow_id = options.workflow_id;\n      }\n\n      const { data } = await this.octokit.rest.actions.listWorkflowRunsForRepo(params);\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch workflow runs:', error);\n      throw error;\n    }\n  }\n\n  // Get workflow runs for a specific workflow\n  async getWorkflowRunsForWorkflow(owner, repo, workflow_id, options = {}) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const params = {\n        owner,\n        repo,\n        workflow_id,\n        per_page: options.per_page || 10,\n        page: options.page || 1\n      };\n\n      if (options.branch) {\n        params.branch = options.branch;\n      }\n\n      const { data } = await this.octokit.rest.actions.listWorkflowRuns(params);\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch workflow runs for workflow:', error);\n      throw error;\n    }\n  }\n\n  // Trigger a workflow run\n  async triggerWorkflow(owner, repo, workflow_id, ref = 'main', inputs = {}) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.actions.createWorkflowDispatch({\n        owner,\n        repo,\n        workflow_id,\n        ref,\n        inputs\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to trigger workflow:', error);\n      throw error;\n    }\n  }\n\n  // Re-run a workflow\n  async rerunWorkflow(owner, repo, run_id) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.actions.reRunWorkflow({\n        owner,\n        repo,\n        run_id\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to re-run workflow:', error);\n      throw error;\n    }\n  }\n\n  // Get workflow run logs\n  async getWorkflowRunLogs(owner, repo, run_id) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.actions.downloadWorkflowRunLogs({\n        owner,\n        repo,\n        run_id\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to get workflow run logs:', error);\n      throw error;\n    }\n  }\n\n  // Approve a workflow run\n  async approveWorkflowRun(owner, repo, run_id) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.actions.approveWorkflowRun({\n        owner,\n        repo,\n        run_id\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to approve workflow run:', error);\n      throw error;\n    }\n  }\n\n  // Get commit comparison (diff)\n  async getCommitDiff(owner, repo, base, head) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.repos.compareCommits({\n        owner,\n        repo,\n        base,\n        head\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to get commit diff:', error);\n      throw error;\n    }\n  }\n\n  // Get commit details\n  async getCommit(owner, repo, sha) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.repos.getCommit({\n        owner,\n        repo,\n        ref: sha\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to get commit details:', error);\n      throw error;\n    }\n  }\n\n  // Releases API methods\n\n  // Get releases for a repository\n  async getReleases(owner, repo, options = {}) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.repos.listReleases({\n        owner,\n        repo,\n        per_page: options.per_page || 10,\n        page: options.page || 1\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch releases:', error);\n      throw error;\n    }\n  }\n\n  // Get latest release\n  async getLatestRelease(owner, repo) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.repos.getLatestRelease({\n        owner,\n        repo\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch latest release:', error);\n      throw error;\n    }\n  }\n\n  // Recursively fetch BPMN files from a directory and its subdirectories\n  async getBpmnFilesRecursive(owner, repo, path, ref = 'main', allFiles = []) {\n    try {\n      // Use authenticated octokit if available, otherwise create a public instance\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const { data } = await octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path,\n        ref\n      });\n\n      // Handle single file response\n      if (!Array.isArray(data)) {\n        if (data.name.endsWith('.bpmn')) {\n          allFiles.push(data);\n        }\n        return allFiles;\n      }\n\n      // Handle directory response\n      for (const item of data) {\n        if (item.type === 'file' && item.name.endsWith('.bpmn')) {\n          allFiles.push(item);\n        } else if (item.type === 'dir') {\n          // Recursively search subdirectories\n          await this.getBpmnFilesRecursive(owner, repo, item.path, ref, allFiles);\n        }\n      }\n\n      return allFiles;\n    } catch (error) {\n      // If directory doesn't exist, return empty array (not an error)\n      if (error.status === 404) {\n        return allFiles;\n      }\n      throw error;\n    }\n  }\n\n  // Get all BPMN files from a repository's business process directories\n  async getBpmnFiles(owner, repo, ref = 'main') {\n    const allBpmnFiles = [];\n    \n    // Try multiple possible directory names where BPMN files might be stored\n    const possiblePaths = [\n      'input/business-processes',\n      'input/business-process',\n      'public/docs/workflows',\n      'docs/workflows',\n      'workflows',\n      'bpmn',\n      'processes'\n    ];\n\n    for (const path of possiblePaths) {\n      try {\n        const files = await this.getBpmnFilesRecursive(owner, repo, path, ref);\n        allBpmnFiles.push(...files);\n      } catch (error) {\n        console.warn(`Could not fetch BPMN files from ${path}:`, error.message);\n        // Continue trying other paths\n      }\n    }\n\n    // Remove duplicates based on path (in case both directories exist and have overlapping files)\n    const uniqueFiles = allBpmnFiles.filter((file, index, self) => \n      index === self.findIndex(f => f.path === file.path)\n    );\n\n    return uniqueFiles;\n  }\n\n  // Get file content from GitHub repository with timeout handling\n  async getFileContent(owner, repo, path, ref = 'main') {\n    const timeoutMs = 15000; // 15 second timeout\n    \n    try {\n      console.log(`🚀 githubService.getFileContent: Starting request for ${owner}/${repo}/${path} (ref: ${ref})`);\n      console.log('🔐 githubService.getFileContent: Authentication status:', this.isAuth());\n      console.log('📋 githubService.getFileContent: Request parameters:', { owner, repo, path, ref });\n      \n      // Use authenticated octokit if available, otherwise create a public instance for public repos\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      console.log('🔧 githubService.getFileContent: Using', this.isAuth() ? 'authenticated' : 'public', 'octokit instance');\n      \n      // Create a promise that rejects after timeout\n      const timeoutPromise = new Promise((_, reject) => {\n        console.log(`⏰ githubService.getFileContent: Setting up ${timeoutMs}ms timeout`);\n        setTimeout(() => {\n          console.error(`⏰ githubService.getFileContent: Request timed out after ${timeoutMs}ms`);\n          reject(new Error(`Request timeout after ${timeoutMs}ms`));\n        }, timeoutMs);\n      });\n      \n      // Race the GitHub API call against the timeout\n      console.log('🌐 githubService.getFileContent: Creating GitHub API promise...');\n      const apiPromise = octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path,\n        ref\n      });\n      \n      console.log('📡 githubService.getFileContent: API request initiated, waiting for response...');\n      const startTime = Date.now();\n      \n      const { data } = await Promise.race([apiPromise, timeoutPromise]);\n      const responseTime = Date.now() - startTime;\n      \n      console.log(`✅ githubService.getFileContent: API response received in ${responseTime}ms`);\n      console.log('📂 githubService.getFileContent: Response data type:', data.type);\n      console.log('📊 githubService.getFileContent: Response details:', {\n        type: data.type,\n        name: data.name,\n        size: data.size,\n        encoding: data.encoding,\n        hasContent: !!data.content\n      });\n\n      // Handle file content\n      if (data.type === 'file' && data.content) {\n        // Decode base64 content\n        console.log('🔧 githubService.getFileContent: Decoding base64 content...');\n        console.log('📊 githubService.getFileContent: Base64 content length:', data.content.length);\n        \n        const content = decodeURIComponent(escape(atob(data.content)));\n        console.log(`✅ githubService.getFileContent: Successfully fetched and decoded file content`);\n        console.log('📏 githubService.getFileContent: Final content length:', content.length, 'characters');\n        console.log('👀 githubService.getFileContent: Content preview (first 200 chars):', content.substring(0, 200));\n        \n        return content;\n      } else {\n        console.error('❌ githubService.getFileContent: Invalid response - not a file or no content');\n        console.error('🔍 githubService.getFileContent: Full response data:', JSON.stringify(data, null, 2));\n        throw new Error('File not found or is not a file');\n      }\n    } catch (error) {\n      console.error(`💥 githubService.getFileContent: Failed to fetch file content from ${owner}/${repo}/${path}:`, error);\n      console.error('🔍 githubService.getFileContent: Error analysis:', {\n        type: typeof error,\n        status: error.status,\n        message: error.message,\n        name: error.name,\n        stack: error.stack?.substring(0, 500) + '...'\n      });\n      \n      // Provide more specific error messages\n      if (error.message.includes('timeout')) {\n        console.error('⏰ githubService.getFileContent: Timeout error detected');\n        throw new Error(`GitHub API request timed out after ${timeoutMs / 1000} seconds. Please try again.`);\n      } else if (error.status === 403) {\n        console.error('🔒 githubService.getFileContent: 403 Forbidden error detected');\n        throw new Error('Access denied. This repository may be private or you may have hit rate limits.');\n      } else if (error.status === 404) {\n        console.error('🔍 githubService.getFileContent: 404 Not Found error detected');\n        throw new Error('File not found in the repository.');\n      } else if (error.message.includes('rate limit')) {\n        console.error('🚦 githubService.getFileContent: Rate limit error detected');\n        throw new Error('GitHub API rate limit exceeded. Please try again later.');\n      } else if (error.message.includes('Network Error') || error.message.includes('Failed to fetch')) {\n        console.error('🌐 githubService.getFileContent: Network error detected');\n        throw new Error('Network error occurred. Please check your internet connection and try again.');\n      }\n      \n      console.error('❓ githubService.getFileContent: Unknown error type, re-throwing original error');\n      throw error;\n    }\n  }\n\n  // Create a commit with multiple files\n  async createCommit(owner, repo, branch, message, files) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      // Get the latest commit SHA\n      const { data: refData } = await this.octokit.rest.git.getRef({\n        owner,\n        repo,\n        ref: `heads/${branch}`\n      });\n      const latestCommitSha = refData.object.sha;\n\n      // Get the tree SHA from the latest commit\n      const { data: commitData } = await this.octokit.rest.git.getCommit({\n        owner,\n        repo,\n        commit_sha: latestCommitSha\n      });\n      const baseTreeSha = commitData.tree.sha;\n\n      // Create blobs for all files\n      const blobs = await Promise.all(\n        files.map(async (file) => {\n          const { data: blobData } = await this.octokit.rest.git.createBlob({\n            owner,\n            repo,\n            content: file.content,\n            encoding: 'utf-8'\n          });\n          return {\n            path: file.path,\n            mode: '100644',\n            type: 'blob',\n            sha: blobData.sha\n          };\n        })\n      );\n\n      // Create a new tree with the blobs\n      const { data: treeData } = await this.octokit.rest.git.createTree({\n        owner,\n        repo,\n        base_tree: baseTreeSha,\n        tree: blobs\n      });\n\n      // Create the commit\n      const { data: newCommitData } = await this.octokit.rest.git.createCommit({\n        owner,\n        repo,\n        message,\n        tree: treeData.sha,\n        parents: [latestCommitSha]\n      });\n\n      // Update the branch reference\n      await this.octokit.rest.git.updateRef({\n        owner,\n        repo,\n        ref: `heads/${branch}`,\n        sha: newCommitData.sha\n      });\n\n      return {\n        sha: newCommitData.sha,\n        html_url: `https://github.com/${owner}/${repo}/commit/${newCommitData.sha}`,\n        message: newCommitData.message,\n        author: newCommitData.author,\n        committer: newCommitData.committer\n      };\n    } catch (error) {\n      console.error('Failed to create commit:', error);\n      throw error;\n    }\n  }\n\n  // Get recent commits for a repository branch\n  async getRecentCommits(owner, repo, branch = 'main', per_page = 5) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', `/repos/${owner}/${repo}/commits`, { sha: branch, per_page });\n\n    try {\n      const response = await this.octokit.rest.repos.listCommits({\n        owner,\n        repo,\n        sha: branch,\n        per_page\n      });\n\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/commits`, response.status, Date.now() - startTime);\n      \n      return response.data.map(commit => ({\n        sha: commit.sha,\n        message: commit.commit.message,\n        author: {\n          name: commit.commit.author.name,\n          email: commit.commit.author.email,\n          date: commit.commit.author.date\n        },\n        committer: {\n          name: commit.commit.committer.name,\n          email: commit.commit.committer.email,\n          date: commit.commit.committer.date\n        },\n        html_url: commit.html_url,\n        stats: commit.stats\n      }));\n    } catch (error) {\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/commits`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to fetch recent commits:', error);\n      throw error;\n    }\n  }\n\n  // Get open pull requests count\n  async getOpenPullRequestsCount(owner, repo) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', `/repos/${owner}/${repo}/pulls`, { state: 'open', per_page: 1 });\n\n    try {\n      const response = await this.octokit.rest.pulls.list({\n        owner,\n        repo,\n        state: 'open',\n        per_page: 1\n      });\n\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/pulls`, response.status, Date.now() - startTime);\n      \n      // GitHub includes the total count in the response headers\n      const linkHeader = response.headers.link;\n      if (linkHeader && linkHeader.includes('rel=\"last\"')) {\n        const lastPageMatch = linkHeader.match(/page=(\\d+)>; rel=\"last\"/);\n        if (lastPageMatch) {\n          return parseInt(lastPageMatch[1], 10);\n        }\n      }\n      \n      // Fallback: use the length of returned items (may not be accurate for large counts)\n      return response.data.length;\n    } catch (error) {\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/pulls`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to fetch pull requests count:', error);\n      throw error;\n    }\n  }\n\n  // Get pull request for a specific branch (returns first PR only for backward compatibility)\n  async getPullRequestForBranch(owner, repo, branchName) {\n    const prs = await this.getPullRequestsForBranch(owner, repo, branchName);\n    return prs && prs.length > 0 ? prs[0] : null;\n  }\n\n  // Get all pull requests for a specific branch\n  async getPullRequestsForBranch(owner, repo, branchName) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', `/repos/${owner}/${repo}/pulls`, { state: 'open', head: `${owner}:${branchName}` });\n\n    try {\n      const response = await this.octokit.rest.pulls.list({\n        owner,\n        repo,\n        state: 'open',\n        head: `${owner}:${branchName}`,\n        per_page: 100 // Get up to 100 PRs for a branch\n      });\n\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/pulls`, response.status, Date.now() - startTime);\n      \n      // Return all matching PRs or empty array if none found\n      return response.data || [];\n    } catch (error) {\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/pulls`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to fetch pull requests for branch:', error);\n      return []; // Return empty array instead of throwing to allow graceful fallback\n    }\n  }\n\n  // Get pull request comments\n  async getPullRequestComments(owner, repo, pullNumber) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', `/repos/${owner}/${repo}/pulls/${pullNumber}/comments`, {});\n\n    try {\n      const response = await this.octokit.rest.pulls.listReviewComments({\n        owner,\n        repo,\n        pull_number: pullNumber,\n        per_page: 100\n      });\n\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/pulls/${pullNumber}/comments`, response.status, Date.now() - startTime);\n      return response.data;\n    } catch (error) {\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/pulls/${pullNumber}/comments`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to fetch pull request comments:', error);\n      throw error;\n    }\n  }\n\n  // Get pull request issue comments (general comments on the PR conversation)\n  async getPullRequestIssueComments(owner, repo, pullNumber) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', `/repos/${owner}/${repo}/issues/${pullNumber}/comments`, {});\n\n    try {\n      const response = await this.octokit.rest.issues.listComments({\n        owner,\n        repo,\n        issue_number: pullNumber,\n        per_page: 100\n      });\n\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/issues/${pullNumber}/comments`, response.status, Date.now() - startTime);\n      return response.data;\n    } catch (error) {\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/issues/${pullNumber}/comments`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to fetch pull request issue comments:', error);\n      throw error;\n    }\n  }\n\n  // Create a comment on a pull request\n  async createPullRequestComment(owner, repo, pullNumber, body) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('POST', `/repos/${owner}/${repo}/issues/${pullNumber}/comments`, { body });\n\n    try {\n      const response = await this.octokit.rest.issues.createComment({\n        owner,\n        repo,\n        issue_number: pullNumber,\n        body\n      });\n\n      this.logger.apiResponse('POST', `/repos/${owner}/${repo}/issues/${pullNumber}/comments`, response.status, Date.now() - startTime);\n      return response.data;\n    } catch (error) {\n      this.logger.apiResponse('POST', `/repos/${owner}/${repo}/issues/${pullNumber}/comments`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to create pull request comment:', error);\n      throw error;\n    }\n  }\n\n  // Get open issues count\n  async getOpenIssuesCount(owner, repo) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', `/repos/${owner}/${repo}/issues`, { state: 'open', per_page: 1 });\n\n    try {\n      const response = await this.octokit.rest.issues.listForRepo({\n        owner,\n        repo,\n        state: 'open',\n        per_page: 1\n      });\n\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/issues`, response.status, Date.now() - startTime);\n      \n      // GitHub includes the total count in the response headers\n      const linkHeader = response.headers.link;\n      if (linkHeader && linkHeader.includes('rel=\"last\"')) {\n        const lastPageMatch = linkHeader.match(/page=(\\d+)>; rel=\"last\"/);\n        if (lastPageMatch) {\n          return parseInt(lastPageMatch[1], 10);\n        }\n      }\n      \n      // Fallback: use the length of returned items (may not be accurate for large counts)\n      return response.data.length;\n    } catch (error) {\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/issues`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to fetch issues count:', error);\n      throw error;\n    }\n  }\n\n  // Get repository statistics (combined method for efficiency)\n  async getRepositoryStats(owner, repo, branch = 'main') {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const [recentCommits, openPRsCount, openIssuesCount] = await Promise.allSettled([\n        this.getRecentCommits(owner, repo, branch, 1),\n        this.getOpenPullRequestsCount(owner, repo),\n        this.getOpenIssuesCount(owner, repo)\n      ]);\n\n      return {\n        recentCommits: recentCommits.status === 'fulfilled' ? recentCommits.value : [],\n        openPullRequestsCount: openPRsCount.status === 'fulfilled' ? openPRsCount.value : 0,\n        openIssuesCount: openIssuesCount.status === 'fulfilled' ? openIssuesCount.value : 0,\n        errors: {\n          recentCommits: recentCommits.status === 'rejected' ? recentCommits.reason : null,\n          openPullRequestsCount: openPRsCount.status === 'rejected' ? openPRsCount.reason : null,\n          openIssuesCount: openIssuesCount.status === 'rejected' ? openIssuesCount.reason : null\n        }\n      };\n    } catch (error) {\n      console.error('Failed to fetch repository stats:', error);\n      throw error;\n    }\n  }\n\n  // Get directory contents (supports both authenticated and unauthenticated access)\n  async getDirectoryContents(owner, repo, path = '', ref = 'main') {\n    try {\n      // Create temporary Octokit instance for unauthenticated access if needed\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const { data } = await octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path,\n        ref\n      });\n\n      if (Array.isArray(data)) {\n        return data;\n      } else {\n        throw new Error('Not a directory');\n      }\n    } catch (error) {\n      console.error(`Failed to get directory contents for ${path}:`, error);\n      throw error;\n    }\n  }\n\n  // Update file content (requires authentication)\n  async updateFile(owner, repo, path, content, message, branch = 'main') {\n    if (!this.isAuth()) {\n      throw new Error('Authentication required to update files');\n    }\n\n    try {\n      // First, get the current file to get its SHA\n      const { data: currentFile } = await this.octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path,\n        ref: branch\n      });\n\n      if (Array.isArray(currentFile)) {\n        throw new Error('Path is a directory, not a file');\n      }\n\n      // Update the file\n      const { data } = await this.octokit.rest.repos.createOrUpdateFileContents({\n        owner,\n        repo,\n        path,\n        message,\n        content: btoa(unescape(encodeURIComponent(content))),\n        sha: currentFile.sha,\n        branch\n      });\n\n      return data;\n    } catch (error) {\n      console.error(`Failed to update file ${path}:`, error);\n      throw error;\n    }\n  }\n\n  // Get commits for a repository (supports unauthenticated access)\n  async getCommits(owner, repo, options = {}) {\n    try {\n      // Create temporary Octokit instance for unauthenticated access if needed\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const params = {\n        owner,\n        repo,\n        per_page: options.per_page || 10,\n        page: options.page || 1\n      };\n\n      if (options.sha) {\n        params.sha = options.sha;\n      }\n\n      if (options.since) {\n        params.since = options.since;\n      }\n\n      if (options.until) {\n        params.until = options.until;\n      }\n\n      const { data } = await octokit.rest.repos.listCommits(params);\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch commits:', error);\n      throw error;\n    }\n  }\n\n  // Get issues for a repository (supports unauthenticated access)\n  async getIssues(owner, repo, options = {}) {\n    try {\n      // Create temporary Octokit instance for unauthenticated access if needed\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const params = {\n        owner,\n        repo,\n        state: options.state || 'all',\n        per_page: options.per_page || 30,\n        page: options.page || 1\n      };\n\n      if (options.labels) {\n        params.labels = options.labels;\n      }\n\n      if (options.milestone) {\n        params.milestone = options.milestone;\n      }\n\n      const { data } = await octokit.rest.issues.listForRepo(params);\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch issues:', error);\n      throw error;\n    }\n  }\n\n  // Alias method for backward compatibility - delegates to getIssues\n  async getRepositoryIssues(owner, repo, options = {}) {\n    return this.getIssues(owner, repo, options);\n  }\n\n  // Logout\n  logout() {\n    this.octokit = null;\n    this.isAuthenticated = false;\n    this.tokenType = null;\n    this.permissions = null;\n    localStorage.removeItem('github_token');\n    sessionStorage.removeItem('github_token');\n    \n    // Clear branch context on logout\n    try {\n      const { default: branchContextService } = require('../services/branchContextService');\n      branchContextService.clearAllBranchContext();\n    } catch (error) {\n      // Service might not be available during testing\n      sessionStorage.removeItem('sgex_branch_context');\n    }\n  }\n\n  // Get repository forks\n  async getRepositoryForks(owner, repo, options = {}) {\n    const startTime = Date.now();\n    this.logger.debug('Fetching repository forks', { owner, repo, options });\n\n    try {\n      // Create temporary Octokit instance for unauthenticated access if needed\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      this.logger.apiCall('GET', `/repos/${owner}/${repo}/forks`, options);\n      \n      const { data } = await octokit.rest.repos.listForks({\n        owner,\n        repo,\n        sort: 'newest', // Sort by newest first\n        per_page: options.per_page || 100,\n        page: options.page || 1\n      });\n\n      const duration = Date.now() - startTime;\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/forks`, 200, duration, { forkCount: data.length });\n      this.logger.performance('Repository forks fetch', duration);\n\n      return data;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      this.logger.apiError('GET', `/repos/${owner}/${repo}/forks`, error);\n      this.logger.performance('Repository forks fetch (failed)', duration);\n      console.error(`Failed to fetch forks for ${owner}/${repo}:`, error);\n      throw error;\n    }\n  }\n}\n\n// Create a singleton instance\nconst githubService = new GitHubService();\n\nexport default githubService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}