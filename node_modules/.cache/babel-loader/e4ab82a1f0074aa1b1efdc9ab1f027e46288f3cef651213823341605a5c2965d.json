{"ast":null,"code":"import inherits from 'inherits-browser';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { getBusinessObject, is } from '../../../util/ModelUtil';\nimport { hasEventDefinition } from '../../../util/DiUtil';\n\n/**\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('../../rules/BpmnRules').default} BpmnRules\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * A behavior that sets the property of Compensation Activity after paste operation\n *\n * @param {EventBus} eventBus\n * @param {Modeling} modeling\n */\nexport default function SetCompensationActivityAfterPasteBehavior(eventBus, modeling) {\n  CommandInterceptor.call(this, eventBus);\n  this.postExecuted('elements.create', function (event) {\n    const context = event.context,\n      elements = context.elements;\n\n    // check if compensation activity is connected to compensation boundary event\n    for (const element of elements) {\n      if (isForCompensation(element) && !isConnectedToCompensationBoundaryEvent(element)) {\n        modeling.updateProperties(element, {\n          isForCompensation: undefined\n        });\n      }\n    }\n  });\n}\ninherits(SetCompensationActivityAfterPasteBehavior, CommandInterceptor);\nSetCompensationActivityAfterPasteBehavior.$inject = ['eventBus', 'modeling'];\n\n// helpers //////////////////////\n\nfunction isForCompensation(element) {\n  const bo = getBusinessObject(element);\n  return bo && bo.isForCompensation;\n}\nfunction isCompensationBoundaryEvent(element) {\n  return element && is(element, 'bpmn:BoundaryEvent') && hasEventDefinition(element, 'bpmn:CompensateEventDefinition');\n}\nfunction isConnectedToCompensationBoundaryEvent(element) {\n  const compensationAssociations = element.incoming.filter(connection => isCompensationBoundaryEvent(connection.source));\n  if (compensationAssociations.length > 0) {\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["inherits","CommandInterceptor","getBusinessObject","is","hasEventDefinition","SetCompensationActivityAfterPasteBehavior","eventBus","modeling","call","postExecuted","event","context","elements","element","isForCompensation","isConnectedToCompensationBoundaryEvent","updateProperties","undefined","$inject","bo","isCompensationBoundaryEvent","compensationAssociations","incoming","filter","connection","source","length"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/modeling/behavior/SetCompensationActivityAfterPasteBehavior.js"],"sourcesContent":["import inherits from 'inherits-browser';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport { getBusinessObject, is } from '../../../util/ModelUtil';\n\nimport { hasEventDefinition } from '../../../util/DiUtil';\n\n/**\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('../../rules/BpmnRules').default} BpmnRules\n * @typedef {import('../Modeling').default} Modeling\n */\n\n\n/**\n * A behavior that sets the property of Compensation Activity after paste operation\n *\n * @param {EventBus} eventBus\n * @param {Modeling} modeling\n */\nexport default function SetCompensationActivityAfterPasteBehavior(eventBus, modeling) {\n\n  CommandInterceptor.call(this, eventBus);\n\n  this.postExecuted('elements.create', function(event) {\n    const context = event.context,\n          elements = context.elements;\n\n    // check if compensation activity is connected to compensation boundary event\n    for (const element of elements) {\n      if (isForCompensation(element) && !isConnectedToCompensationBoundaryEvent(element)) {\n        modeling.updateProperties(element, { isForCompensation: undefined });\n      }\n    }\n  });\n}\n\ninherits(SetCompensationActivityAfterPasteBehavior, CommandInterceptor);\n\nSetCompensationActivityAfterPasteBehavior.$inject = [\n  'eventBus',\n  'modeling'\n];\n\n\n// helpers //////////////////////\n\nfunction isForCompensation(element) {\n  const bo = getBusinessObject(element);\n  return bo && bo.isForCompensation;\n}\n\nfunction isCompensationBoundaryEvent(element) {\n  return element && is(element, 'bpmn:BoundaryEvent') &&\n      hasEventDefinition(element, 'bpmn:CompensateEventDefinition');\n}\n\nfunction isConnectedToCompensationBoundaryEvent(element) {\n  const compensationAssociations = element.incoming.filter(\n    connection => isCompensationBoundaryEvent(connection.source)\n  );\n  if (compensationAssociations.length > 0) {\n    return true;\n  }\n  return false;\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,kBAAkB;AAEvC,OAAOC,kBAAkB,MAAM,2CAA2C;AAE1E,SAASC,iBAAiB,EAAEC,EAAE,QAAQ,yBAAyB;AAE/D,SAASC,kBAAkB,QAAQ,sBAAsB;;AAEzD;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,yCAAyCA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAEpFN,kBAAkB,CAACO,IAAI,CAAC,IAAI,EAAEF,QAAQ,CAAC;EAEvC,IAAI,CAACG,YAAY,CAAC,iBAAiB,EAAE,UAASC,KAAK,EAAE;IACnD,MAAMC,OAAO,GAAGD,KAAK,CAACC,OAAO;MACvBC,QAAQ,GAAGD,OAAO,CAACC,QAAQ;;IAEjC;IACA,KAAK,MAAMC,OAAO,IAAID,QAAQ,EAAE;MAC9B,IAAIE,iBAAiB,CAACD,OAAO,CAAC,IAAI,CAACE,sCAAsC,CAACF,OAAO,CAAC,EAAE;QAClFN,QAAQ,CAACS,gBAAgB,CAACH,OAAO,EAAE;UAAEC,iBAAiB,EAAEG;QAAU,CAAC,CAAC;MACtE;IACF;EACF,CAAC,CAAC;AACJ;AAEAjB,QAAQ,CAACK,yCAAyC,EAAEJ,kBAAkB,CAAC;AAEvEI,yCAAyC,CAACa,OAAO,GAAG,CAClD,UAAU,EACV,UAAU,CACX;;AAGD;;AAEA,SAASJ,iBAAiBA,CAACD,OAAO,EAAE;EAClC,MAAMM,EAAE,GAAGjB,iBAAiB,CAACW,OAAO,CAAC;EACrC,OAAOM,EAAE,IAAIA,EAAE,CAACL,iBAAiB;AACnC;AAEA,SAASM,2BAA2BA,CAACP,OAAO,EAAE;EAC5C,OAAOA,OAAO,IAAIV,EAAE,CAACU,OAAO,EAAE,oBAAoB,CAAC,IAC/CT,kBAAkB,CAACS,OAAO,EAAE,gCAAgC,CAAC;AACnE;AAEA,SAASE,sCAAsCA,CAACF,OAAO,EAAE;EACvD,MAAMQ,wBAAwB,GAAGR,OAAO,CAACS,QAAQ,CAACC,MAAM,CACtDC,UAAU,IAAIJ,2BAA2B,CAACI,UAAU,CAACC,MAAM,CAC7D,CAAC;EACD,IAAIJ,wBAAwB,CAACK,MAAM,GAAG,CAAC,EAAE;IACvC,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}