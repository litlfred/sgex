{"ast":null,"code":"import { asBounds, asTRBL } from 'diagram-js/lib/layout/LayoutUtil';\nimport { is, isAny } from '../../util/ModelUtil';\n\n/**\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('../../model/Types').Moddle} Moddle\n *\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').Shape} Shape\n *\n * @typedef {import('diagram-js/lib/core/Canvas').CanvasPlane} CanvasPlane\n *\n * @typedef {import('diagram-js/lib/util/Types').Rect} Rect\n */\n\nvar DEFAULT_POSITION = {\n  x: 180,\n  y: 160\n};\n\n/**\n * Hook into `import.render.start` and create new planes for diagrams with\n * collapsed subprocesses and all DI elements on the same plane.\n *\n * @param {EventBus} eventBus\n * @param {Moddle} moddle\n */\nexport default function SubprocessCompatibility(eventBus, moddle) {\n  this._eventBus = eventBus;\n  this._moddle = moddle;\n  var self = this;\n  eventBus.on('import.render.start', 1500, function (e, context) {\n    self._handleImport(context.definitions);\n  });\n}\n\n/**\n * @param {ModdleElement} definitions\n */\nSubprocessCompatibility.prototype._handleImport = function (definitions) {\n  if (!definitions.diagrams) {\n    return;\n  }\n  var self = this;\n  this._definitions = definitions;\n  this._processToDiagramMap = {};\n  definitions.diagrams.forEach(function (diagram) {\n    if (!diagram.plane || !diagram.plane.bpmnElement) {\n      return;\n    }\n    self._processToDiagramMap[diagram.plane.bpmnElement.id] = diagram;\n  });\n  var newDiagrams = definitions.diagrams.filter(diagram => diagram.plane).flatMap(diagram => self._createNewDiagrams(diagram.plane));\n  newDiagrams.forEach(function (diagram) {\n    self._movePlaneElementsToOrigin(diagram.plane);\n  });\n};\n\n/**\n * Moves all DI elements from collapsed subprocesses to a new plane.\n *\n * @param {CanvasPlane} plane\n *\n * @return {ModdleElement[]} new diagrams created for the collapsed subprocesses\n */\nSubprocessCompatibility.prototype._createNewDiagrams = function (plane) {\n  var self = this;\n  var collapsedElements = [];\n  var elementsToMove = [];\n  plane.get('planeElement').forEach(function (diElement) {\n    var businessObject = diElement.bpmnElement;\n    if (!businessObject) {\n      return;\n    }\n    var parent = businessObject.$parent;\n    if (is(businessObject, 'bpmn:SubProcess') && !diElement.isExpanded) {\n      collapsedElements.push(businessObject);\n    }\n    if (shouldMoveToPlane(businessObject, plane)) {\n      // don't change the array while we iterate over it\n      elementsToMove.push({\n        diElement: diElement,\n        parent: parent\n      });\n    }\n  });\n  var newDiagrams = [];\n\n  // create new planes for all collapsed subprocesses, even when they are empty\n  collapsedElements.forEach(function (element) {\n    if (!self._processToDiagramMap[element.id]) {\n      var diagram = self._createDiagram(element);\n      self._processToDiagramMap[element.id] = diagram;\n      newDiagrams.push(diagram);\n    }\n  });\n  elementsToMove.forEach(function (element) {\n    var diElement = element.diElement;\n    var parent = element.parent;\n\n    // parent is expanded, get nearest collapsed parent\n    while (parent && collapsedElements.indexOf(parent) === -1) {\n      parent = parent.$parent;\n    }\n\n    // false positive, all parents are expanded\n    if (!parent) {\n      return;\n    }\n    var diagram = self._processToDiagramMap[parent.id];\n    self._moveToDiPlane(diElement, diagram.plane);\n  });\n  return newDiagrams;\n};\n\n/**\n * @param {CanvasPlane} plane\n */\nSubprocessCompatibility.prototype._movePlaneElementsToOrigin = function (plane) {\n  var elements = plane.get('planeElement');\n\n  // get bounding box of all elements\n  var planeBounds = getPlaneBounds(plane);\n  var offset = {\n    x: planeBounds.x - DEFAULT_POSITION.x,\n    y: planeBounds.y - DEFAULT_POSITION.y\n  };\n  elements.forEach(function (diElement) {\n    if (diElement.waypoint) {\n      diElement.waypoint.forEach(function (waypoint) {\n        waypoint.x = waypoint.x - offset.x;\n        waypoint.y = waypoint.y - offset.y;\n      });\n    } else if (diElement.bounds) {\n      diElement.bounds.x = diElement.bounds.x - offset.x;\n      diElement.bounds.y = diElement.bounds.y - offset.y;\n    }\n  });\n};\n\n/**\n * @param {ModdleElement} diElement\n * @param {CanvasPlane} newPlane\n */\nSubprocessCompatibility.prototype._moveToDiPlane = function (diElement, newPlane) {\n  var containingDiagram = findRootDiagram(diElement);\n\n  // remove DI from old Plane and add it to the new one\n  var parentPlaneElement = containingDiagram.plane.get('planeElement');\n  parentPlaneElement.splice(parentPlaneElement.indexOf(diElement), 1);\n  newPlane.get('planeElement').push(diElement);\n};\n\n/**\n * @param {ModdleElement} businessObject\n *\n * @return {ModdleElement}\n */\nSubprocessCompatibility.prototype._createDiagram = function (businessObject) {\n  var plane = this._moddle.create('bpmndi:BPMNPlane', {\n    bpmnElement: businessObject\n  });\n  var diagram = this._moddle.create('bpmndi:BPMNDiagram', {\n    plane: plane\n  });\n  plane.$parent = diagram;\n  plane.bpmnElement = businessObject;\n  diagram.$parent = this._definitions;\n  this._definitions.diagrams.push(diagram);\n  return diagram;\n};\nSubprocessCompatibility.$inject = ['eventBus', 'moddle'];\n\n// helpers //////////\n\nfunction findRootDiagram(element) {\n  if (is(element, 'bpmndi:BPMNDiagram')) {\n    return element;\n  } else {\n    return findRootDiagram(element.$parent);\n  }\n}\n\n/**\n * @param {CanvasPlane} plane\n *\n * @return {Rect}\n */\nfunction getPlaneBounds(plane) {\n  var planeTrbl = {\n    top: Infinity,\n    right: -Infinity,\n    bottom: -Infinity,\n    left: Infinity\n  };\n  plane.planeElement.forEach(function (element) {\n    if (!element.bounds) {\n      return;\n    }\n    var trbl = asTRBL(element.bounds);\n    planeTrbl.top = Math.min(trbl.top, planeTrbl.top);\n    planeTrbl.left = Math.min(trbl.left, planeTrbl.left);\n  });\n  return asBounds(planeTrbl);\n}\n\n/**\n * @param {ModdleElement} businessObject\n * @param {CanvasPlane} plane\n *\n * @return {boolean}\n */\nfunction shouldMoveToPlane(businessObject, plane) {\n  var parent = businessObject.$parent;\n\n  // don't move elements that are already on the plane\n  if (!is(parent, 'bpmn:SubProcess') || parent === plane.bpmnElement) {\n    return false;\n  }\n\n  // dataAssociations are children of the subprocess but rendered on process level\n  // cf. https://github.com/bpmn-io/bpmn-js/issues/1619\n  if (isAny(businessObject, ['bpmn:DataInputAssociation', 'bpmn:DataOutputAssociation'])) {\n    return false;\n  }\n  return true;\n}","map":{"version":3,"names":["asBounds","asTRBL","is","isAny","DEFAULT_POSITION","x","y","SubprocessCompatibility","eventBus","moddle","_eventBus","_moddle","self","on","e","context","_handleImport","definitions","prototype","diagrams","_definitions","_processToDiagramMap","forEach","diagram","plane","bpmnElement","id","newDiagrams","filter","flatMap","_createNewDiagrams","_movePlaneElementsToOrigin","collapsedElements","elementsToMove","get","diElement","businessObject","parent","$parent","isExpanded","push","shouldMoveToPlane","element","_createDiagram","indexOf","_moveToDiPlane","elements","planeBounds","getPlaneBounds","offset","waypoint","bounds","newPlane","containingDiagram","findRootDiagram","parentPlaneElement","splice","create","$inject","planeTrbl","top","Infinity","right","bottom","left","planeElement","trbl","Math","min"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/drilldown/SubprocessCompatibility.js"],"sourcesContent":["\nimport { asBounds, asTRBL } from 'diagram-js/lib/layout/LayoutUtil';\nimport { is, isAny } from '../../util/ModelUtil';\n\n/**\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('../../model/Types').Moddle} Moddle\n *\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').Shape} Shape\n *\n * @typedef {import('diagram-js/lib/core/Canvas').CanvasPlane} CanvasPlane\n *\n * @typedef {import('diagram-js/lib/util/Types').Rect} Rect\n */\n\nvar DEFAULT_POSITION = {\n  x: 180,\n  y: 160\n};\n\n/**\n * Hook into `import.render.start` and create new planes for diagrams with\n * collapsed subprocesses and all DI elements on the same plane.\n *\n * @param {EventBus} eventBus\n * @param {Moddle} moddle\n */\nexport default function SubprocessCompatibility(eventBus, moddle) {\n  this._eventBus = eventBus;\n  this._moddle = moddle;\n\n  var self = this;\n\n  eventBus.on('import.render.start', 1500, function(e, context) {\n    self._handleImport(context.definitions);\n  });\n}\n\n/**\n * @param {ModdleElement} definitions\n */\nSubprocessCompatibility.prototype._handleImport = function(definitions) {\n  if (!definitions.diagrams) {\n    return;\n  }\n\n  var self = this;\n  this._definitions = definitions;\n  this._processToDiagramMap = {};\n\n  definitions.diagrams.forEach(function(diagram) {\n    if (!diagram.plane || !diagram.plane.bpmnElement) {\n      return;\n    }\n\n    self._processToDiagramMap[diagram.plane.bpmnElement.id] = diagram;\n  });\n\n  var newDiagrams = definitions.diagrams\n    .filter(diagram => diagram.plane)\n    .flatMap(diagram => self._createNewDiagrams(diagram.plane));\n\n  newDiagrams.forEach(function(diagram) {\n    self._movePlaneElementsToOrigin(diagram.plane);\n  });\n};\n\n\n/**\n * Moves all DI elements from collapsed subprocesses to a new plane.\n *\n * @param {CanvasPlane} plane\n *\n * @return {ModdleElement[]} new diagrams created for the collapsed subprocesses\n */\nSubprocessCompatibility.prototype._createNewDiagrams = function(plane) {\n  var self = this;\n\n  var collapsedElements = [];\n  var elementsToMove = [];\n\n  plane.get('planeElement').forEach(function(diElement) {\n    var businessObject = diElement.bpmnElement;\n\n    if (!businessObject) {\n      return;\n    }\n\n    var parent = businessObject.$parent;\n\n    if (is(businessObject, 'bpmn:SubProcess') && !diElement.isExpanded) {\n      collapsedElements.push(businessObject);\n    }\n\n    if (shouldMoveToPlane(businessObject, plane)) {\n\n      // don't change the array while we iterate over it\n      elementsToMove.push({ diElement: diElement, parent: parent });\n    }\n  });\n\n  var newDiagrams = [];\n\n  // create new planes for all collapsed subprocesses, even when they are empty\n  collapsedElements.forEach(function(element) {\n    if (!self._processToDiagramMap[ element.id ]) {\n      var diagram = self._createDiagram(element);\n\n      self._processToDiagramMap[element.id] = diagram;\n\n      newDiagrams.push(diagram);\n    }\n  });\n\n  elementsToMove.forEach(function(element) {\n    var diElement = element.diElement;\n    var parent = element.parent;\n\n    // parent is expanded, get nearest collapsed parent\n    while (parent && collapsedElements.indexOf(parent) === -1) {\n      parent = parent.$parent;\n    }\n\n    // false positive, all parents are expanded\n    if (!parent) {\n      return;\n    }\n\n    var diagram = self._processToDiagramMap[ parent.id ];\n\n    self._moveToDiPlane(diElement, diagram.plane);\n  });\n\n  return newDiagrams;\n};\n\n/**\n * @param {CanvasPlane} plane\n */\nSubprocessCompatibility.prototype._movePlaneElementsToOrigin = function(plane) {\n  var elements = plane.get('planeElement');\n\n  // get bounding box of all elements\n  var planeBounds = getPlaneBounds(plane);\n\n  var offset = {\n    x: planeBounds.x - DEFAULT_POSITION.x,\n    y: planeBounds.y - DEFAULT_POSITION.y\n  };\n\n  elements.forEach(function(diElement) {\n    if (diElement.waypoint) {\n      diElement.waypoint.forEach(function(waypoint) {\n        waypoint.x = waypoint.x - offset.x;\n        waypoint.y = waypoint.y - offset.y;\n      });\n    } else if (diElement.bounds) {\n      diElement.bounds.x = diElement.bounds.x - offset.x;\n      diElement.bounds.y = diElement.bounds.y - offset.y;\n    }\n  });\n};\n\n/**\n * @param {ModdleElement} diElement\n * @param {CanvasPlane} newPlane\n */\nSubprocessCompatibility.prototype._moveToDiPlane = function(diElement, newPlane) {\n  var containingDiagram = findRootDiagram(diElement);\n\n  // remove DI from old Plane and add it to the new one\n  var parentPlaneElement = containingDiagram.plane.get('planeElement');\n\n  parentPlaneElement.splice(parentPlaneElement.indexOf(diElement), 1);\n\n  newPlane.get('planeElement').push(diElement);\n};\n\n/**\n * @param {ModdleElement} businessObject\n *\n * @return {ModdleElement}\n */\nSubprocessCompatibility.prototype._createDiagram = function(businessObject) {\n  var plane = this._moddle.create('bpmndi:BPMNPlane', {\n    bpmnElement: businessObject\n  });\n\n  var diagram = this._moddle.create('bpmndi:BPMNDiagram', {\n    plane: plane\n  });\n\n  plane.$parent = diagram;\n\n  plane.bpmnElement = businessObject;\n\n  diagram.$parent = this._definitions;\n\n  this._definitions.diagrams.push(diagram);\n\n  return diagram;\n};\n\nSubprocessCompatibility.$inject = [ 'eventBus', 'moddle' ];\n\n\n// helpers //////////\n\nfunction findRootDiagram(element) {\n  if (is(element, 'bpmndi:BPMNDiagram')) {\n    return element;\n  } else {\n    return findRootDiagram(element.$parent);\n  }\n}\n\n/**\n * @param {CanvasPlane} plane\n *\n * @return {Rect}\n */\nfunction getPlaneBounds(plane) {\n  var planeTrbl = {\n    top: Infinity,\n    right: -Infinity,\n    bottom: -Infinity,\n    left: Infinity\n  };\n\n  plane.planeElement.forEach(function(element) {\n    if (!element.bounds) {\n      return;\n    }\n\n    var trbl = asTRBL(element.bounds);\n\n    planeTrbl.top = Math.min(trbl.top, planeTrbl.top);\n    planeTrbl.left = Math.min(trbl.left, planeTrbl.left);\n  });\n\n  return asBounds(planeTrbl);\n}\n\n/**\n * @param {ModdleElement} businessObject\n * @param {CanvasPlane} plane\n *\n * @return {boolean}\n */\nfunction shouldMoveToPlane(businessObject, plane) {\n  var parent = businessObject.$parent;\n\n  // don't move elements that are already on the plane\n  if (!is(parent, 'bpmn:SubProcess') || parent === plane.bpmnElement) {\n    return false;\n  }\n\n  // dataAssociations are children of the subprocess but rendered on process level\n  // cf. https://github.com/bpmn-io/bpmn-js/issues/1619\n  if (isAny(businessObject, [ 'bpmn:DataInputAssociation', 'bpmn:DataOutputAssociation' ])) {\n    return false;\n  }\n\n  return true;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}