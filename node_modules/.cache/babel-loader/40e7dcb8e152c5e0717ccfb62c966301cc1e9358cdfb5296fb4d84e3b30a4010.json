{"ast":null,"code":"import inherits from 'inherits-browser';\nimport { is } from '../../../util/ModelUtil';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { filter, forEach } from 'min-dash';\n\n/**\r\n * @typedef {import('didi').Injector} Injector\r\n * @typedef {import('../Modeling').default} Modeling\r\n */\n\n/**\r\n * @param {Injector} injector\r\n * @param {Modeling} modeling\r\n */\nexport default function AssociationBehavior(injector, modeling) {\n  injector.invoke(CommandInterceptor, this);\n  this.postExecute('shape.move', function (context) {\n    var newParent = context.newParent,\n      shape = context.shape;\n    var associations = filter(shape.incoming.concat(shape.outgoing), function (connection) {\n      return is(connection, 'bpmn:Association');\n    });\n    forEach(associations, function (association) {\n      modeling.moveConnection(association, {\n        x: 0,\n        y: 0\n      }, newParent);\n    });\n  }, true);\n}\ninherits(AssociationBehavior, CommandInterceptor);\nAssociationBehavior.$inject = ['injector', 'modeling'];","map":{"version":3,"names":["inherits","is","CommandInterceptor","filter","forEach","AssociationBehavior","injector","modeling","invoke","postExecute","context","newParent","shape","associations","incoming","concat","outgoing","connection","association","moveConnection","x","y","$inject"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/modeling/behavior/AssociationBehavior.js"],"sourcesContent":["import inherits from 'inherits-browser';\r\n\r\nimport { is } from '../../../util/ModelUtil';\r\n\r\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\r\n\r\nimport {\r\n  filter,\r\n  forEach\r\n} from 'min-dash';\r\n\r\n/**\r\n * @typedef {import('didi').Injector} Injector\r\n * @typedef {import('../Modeling').default} Modeling\r\n */\r\n\r\n/**\r\n * @param {Injector} injector\r\n * @param {Modeling} modeling\r\n */\r\nexport default function AssociationBehavior(injector, modeling) {\r\n  injector.invoke(CommandInterceptor, this);\r\n\r\n  this.postExecute('shape.move', function(context) {\r\n    var newParent = context.newParent,\r\n        shape = context.shape;\r\n\r\n    var associations = filter(shape.incoming.concat(shape.outgoing), function(connection) {\r\n      return is(connection, 'bpmn:Association');\r\n    });\r\n\r\n    forEach(associations, function(association) {\r\n      modeling.moveConnection(association, { x: 0, y: 0 }, newParent);\r\n    });\r\n  }, true);\r\n}\r\n\r\ninherits(AssociationBehavior, CommandInterceptor);\r\n\r\nAssociationBehavior.$inject = [\r\n  'injector',\r\n  'modeling'\r\n];"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,kBAAkB;AAEvC,SAASC,EAAE,QAAQ,yBAAyB;AAE5C,OAAOC,kBAAkB,MAAM,2CAA2C;AAE1E,SACEC,MAAM,EACNC,OAAO,QACF,UAAU;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAASC,mBAAmBA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAC9DD,QAAQ,CAACE,MAAM,CAACN,kBAAkB,EAAE,IAAI,CAAC;EAEzC,IAAI,CAACO,WAAW,CAAC,YAAY,EAAE,UAASC,OAAO,EAAE;IAC/C,IAAIC,SAAS,GAAGD,OAAO,CAACC,SAAS;MAC7BC,KAAK,GAAGF,OAAO,CAACE,KAAK;IAEzB,IAAIC,YAAY,GAAGV,MAAM,CAACS,KAAK,CAACE,QAAQ,CAACC,MAAM,CAACH,KAAK,CAACI,QAAQ,CAAC,EAAE,UAASC,UAAU,EAAE;MACpF,OAAOhB,EAAE,CAACgB,UAAU,EAAE,kBAAkB,CAAC;IAC3C,CAAC,CAAC;IAEFb,OAAO,CAACS,YAAY,EAAE,UAASK,WAAW,EAAE;MAC1CX,QAAQ,CAACY,cAAc,CAACD,WAAW,EAAE;QAAEE,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAE,CAAC,EAAEV,SAAS,CAAC;IACjE,CAAC,CAAC;EACJ,CAAC,EAAE,IAAI,CAAC;AACV;AAEAX,QAAQ,CAACK,mBAAmB,EAAEH,kBAAkB,CAAC;AAEjDG,mBAAmB,CAACiB,OAAO,GAAG,CAC5B,UAAU,EACV,UAAU,CACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}