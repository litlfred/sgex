{"ast":null,"code":"import { collectLanes, getLanesRoot } from '../util/LaneUtil';\nimport { is } from '../../../util/ModelUtil';\nimport { add as collectionAdd, remove as collectionRemove } from 'diagram-js/lib/util/Collections';\nimport { asTRBL } from 'diagram-js/lib/layout/LayoutUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n *\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n *\n * @typedef {import('../../../model/Types').Shape} Shape\n */\n\nvar FLOW_NODE_REFS_ATTR = 'flowNodeRef',\n  LANES_ATTR = 'lanes';\n\n/**\n * A handler that updates lane refs on changed elements.\n *\n * @implements {CommandHandler}\n *\n * @param {ElementRegistry} elementRegistry\n */\nexport default function UpdateFlowNodeRefsHandler(elementRegistry) {\n  this._elementRegistry = elementRegistry;\n}\nUpdateFlowNodeRefsHandler.$inject = ['elementRegistry'];\n\n/**\n * @param {Shape} flowNodeShapes\n * @param {Shape} laneShapes\n *\n * @return { {\n *   flowNode: Shape;\n *   add: Shape[];\n *   remove: Shape[];\n * }[] }\n */\nUpdateFlowNodeRefsHandler.prototype._computeUpdates = function (flowNodeShapes, laneShapes) {\n  var handledNodes = [];\n  var updates = [];\n  var participantCache = {};\n  var allFlowNodeShapes = [];\n  function isInLaneShape(element, laneShape) {\n    var laneTrbl = asTRBL(laneShape);\n    var elementMid = {\n      x: element.x + element.width / 2,\n      y: element.y + element.height / 2\n    };\n    return elementMid.x > laneTrbl.left && elementMid.x < laneTrbl.right && elementMid.y > laneTrbl.top && elementMid.y < laneTrbl.bottom;\n  }\n  function addFlowNodeShape(flowNodeShape) {\n    if (handledNodes.indexOf(flowNodeShape) === -1) {\n      allFlowNodeShapes.push(flowNodeShape);\n      handledNodes.push(flowNodeShape);\n    }\n  }\n  function getAllLaneShapes(flowNodeShape) {\n    var root = getLanesRoot(flowNodeShape);\n    if (!participantCache[root.id]) {\n      participantCache[root.id] = collectLanes(root);\n    }\n    return participantCache[root.id];\n  }\n  function getNewLanes(flowNodeShape) {\n    if (!flowNodeShape.parent) {\n      return [];\n    }\n    var allLaneShapes = getAllLaneShapes(flowNodeShape);\n    return allLaneShapes.filter(function (l) {\n      return isInLaneShape(flowNodeShape, l);\n    }).map(function (shape) {\n      return shape.businessObject;\n    });\n  }\n  laneShapes.forEach(function (laneShape) {\n    var root = getLanesRoot(laneShape);\n    if (!root || handledNodes.indexOf(root) !== -1) {\n      return;\n    }\n    var children = root.children.filter(function (c) {\n      return is(c, 'bpmn:FlowNode');\n    });\n    children.forEach(addFlowNodeShape);\n    handledNodes.push(root);\n  });\n  flowNodeShapes.forEach(addFlowNodeShape);\n  allFlowNodeShapes.forEach(function (flowNodeShape) {\n    var flowNode = flowNodeShape.businessObject;\n    var lanes = flowNode.get(LANES_ATTR),\n      remove = lanes.slice(),\n      add = getNewLanes(flowNodeShape);\n    updates.push({\n      flowNode: flowNode,\n      remove: remove,\n      add: add\n    });\n  });\n  laneShapes.forEach(function (laneShape) {\n    var lane = laneShape.businessObject;\n\n    // lane got removed XX-)\n    if (!laneShape.parent) {\n      lane.get(FLOW_NODE_REFS_ATTR).forEach(function (flowNode) {\n        updates.push({\n          flowNode: flowNode,\n          remove: [lane],\n          add: []\n        });\n      });\n    }\n  });\n  return updates;\n};\nUpdateFlowNodeRefsHandler.prototype.execute = function (context) {\n  var updates = context.updates;\n  if (!updates) {\n    updates = context.updates = this._computeUpdates(context.flowNodeShapes, context.laneShapes);\n  }\n  updates.forEach(function (update) {\n    var flowNode = update.flowNode,\n      lanes = flowNode.get(LANES_ATTR);\n\n    // unwire old\n    update.remove.forEach(function (oldLane) {\n      collectionRemove(lanes, oldLane);\n      collectionRemove(oldLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n    });\n\n    // wire new\n    update.add.forEach(function (newLane) {\n      collectionAdd(lanes, newLane);\n      collectionAdd(newLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n    });\n  });\n\n  // TODO(nikku): return changed elements\n  // return [ ... ];\n\n  return [];\n};\nUpdateFlowNodeRefsHandler.prototype.revert = function (context) {\n  var updates = context.updates;\n  updates.forEach(function (update) {\n    var flowNode = update.flowNode,\n      lanes = flowNode.get(LANES_ATTR);\n\n    // unwire new\n    update.add.forEach(function (newLane) {\n      collectionRemove(lanes, newLane);\n      collectionRemove(newLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n    });\n\n    // wire old\n    update.remove.forEach(function (oldLane) {\n      collectionAdd(lanes, oldLane);\n      collectionAdd(oldLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n    });\n  });\n\n  // TODO(nikku): return changed elements\n  // return [ ... ];\n\n  return [];\n};","map":{"version":3,"names":["collectLanes","getLanesRoot","is","add","collectionAdd","remove","collectionRemove","asTRBL","FLOW_NODE_REFS_ATTR","LANES_ATTR","UpdateFlowNodeRefsHandler","elementRegistry","_elementRegistry","$inject","prototype","_computeUpdates","flowNodeShapes","laneShapes","handledNodes","updates","participantCache","allFlowNodeShapes","isInLaneShape","element","laneShape","laneTrbl","elementMid","x","width","y","height","left","right","top","bottom","addFlowNodeShape","flowNodeShape","indexOf","push","getAllLaneShapes","root","id","getNewLanes","parent","allLaneShapes","filter","l","map","shape","businessObject","forEach","children","c","flowNode","lanes","get","slice","lane","execute","context","update","oldLane","newLane","revert"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/modeling/cmd/UpdateFlowNodeRefsHandler.js"],"sourcesContent":["import {\n  collectLanes,\n  getLanesRoot\n} from '../util/LaneUtil';\n\nimport {\n  is\n} from '../../../util/ModelUtil';\n\nimport {\n  add as collectionAdd,\n  remove as collectionRemove\n} from 'diagram-js/lib/util/Collections';\n\nimport {\n  asTRBL\n} from 'diagram-js/lib/layout/LayoutUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n *\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n *\n * @typedef {import('../../../model/Types').Shape} Shape\n */\n\nvar FLOW_NODE_REFS_ATTR = 'flowNodeRef',\n    LANES_ATTR = 'lanes';\n\n\n/**\n * A handler that updates lane refs on changed elements.\n *\n * @implements {CommandHandler}\n *\n * @param {ElementRegistry} elementRegistry\n */\nexport default function UpdateFlowNodeRefsHandler(elementRegistry) {\n  this._elementRegistry = elementRegistry;\n}\n\nUpdateFlowNodeRefsHandler.$inject = [\n  'elementRegistry'\n];\n\n/**\n * @param {Shape} flowNodeShapes\n * @param {Shape} laneShapes\n *\n * @return { {\n *   flowNode: Shape;\n *   add: Shape[];\n *   remove: Shape[];\n * }[] }\n */\nUpdateFlowNodeRefsHandler.prototype._computeUpdates = function(flowNodeShapes, laneShapes) {\n\n  var handledNodes = [];\n\n  var updates = [];\n\n  var participantCache = {};\n\n  var allFlowNodeShapes = [];\n\n  function isInLaneShape(element, laneShape) {\n\n    var laneTrbl = asTRBL(laneShape);\n\n    var elementMid = {\n      x: element.x + element.width / 2,\n      y: element.y + element.height / 2\n    };\n\n    return elementMid.x > laneTrbl.left &&\n           elementMid.x < laneTrbl.right &&\n           elementMid.y > laneTrbl.top &&\n           elementMid.y < laneTrbl.bottom;\n  }\n\n  function addFlowNodeShape(flowNodeShape) {\n    if (handledNodes.indexOf(flowNodeShape) === -1) {\n      allFlowNodeShapes.push(flowNodeShape);\n      handledNodes.push(flowNodeShape);\n    }\n  }\n\n  function getAllLaneShapes(flowNodeShape) {\n\n    var root = getLanesRoot(flowNodeShape);\n\n    if (!participantCache[root.id]) {\n      participantCache[root.id] = collectLanes(root);\n    }\n\n    return participantCache[root.id];\n  }\n\n  function getNewLanes(flowNodeShape) {\n    if (!flowNodeShape.parent) {\n      return [];\n    }\n\n    var allLaneShapes = getAllLaneShapes(flowNodeShape);\n\n    return allLaneShapes.filter(function(l) {\n      return isInLaneShape(flowNodeShape, l);\n    }).map(function(shape) {\n      return shape.businessObject;\n    });\n  }\n\n  laneShapes.forEach(function(laneShape) {\n    var root = getLanesRoot(laneShape);\n\n    if (!root || handledNodes.indexOf(root) !== -1) {\n      return;\n    }\n\n    var children = root.children.filter(function(c) {\n      return is(c, 'bpmn:FlowNode');\n    });\n\n    children.forEach(addFlowNodeShape);\n\n    handledNodes.push(root);\n  });\n\n  flowNodeShapes.forEach(addFlowNodeShape);\n\n\n  allFlowNodeShapes.forEach(function(flowNodeShape) {\n\n    var flowNode = flowNodeShape.businessObject;\n\n    var lanes = flowNode.get(LANES_ATTR),\n        remove = lanes.slice(),\n        add = getNewLanes(flowNodeShape);\n\n    updates.push({ flowNode: flowNode, remove: remove, add: add });\n  });\n\n  laneShapes.forEach(function(laneShape) {\n\n    var lane = laneShape.businessObject;\n\n    // lane got removed XX-)\n    if (!laneShape.parent) {\n      lane.get(FLOW_NODE_REFS_ATTR).forEach(function(flowNode) {\n        updates.push({ flowNode: flowNode, remove: [ lane ], add: [] });\n      });\n    }\n  });\n\n  return updates;\n};\n\nUpdateFlowNodeRefsHandler.prototype.execute = function(context) {\n\n  var updates = context.updates;\n\n  if (!updates) {\n    updates = context.updates = this._computeUpdates(context.flowNodeShapes, context.laneShapes);\n  }\n\n\n  updates.forEach(function(update) {\n\n    var flowNode = update.flowNode,\n        lanes = flowNode.get(LANES_ATTR);\n\n    // unwire old\n    update.remove.forEach(function(oldLane) {\n      collectionRemove(lanes, oldLane);\n      collectionRemove(oldLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n    });\n\n    // wire new\n    update.add.forEach(function(newLane) {\n      collectionAdd(lanes, newLane);\n      collectionAdd(newLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n    });\n  });\n\n  // TODO(nikku): return changed elements\n  // return [ ... ];\n\n  return [];\n};\n\n\nUpdateFlowNodeRefsHandler.prototype.revert = function(context) {\n\n  var updates = context.updates;\n\n  updates.forEach(function(update) {\n\n    var flowNode = update.flowNode,\n        lanes = flowNode.get(LANES_ATTR);\n\n    // unwire new\n    update.add.forEach(function(newLane) {\n      collectionRemove(lanes, newLane);\n      collectionRemove(newLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n    });\n\n    // wire old\n    update.remove.forEach(function(oldLane) {\n      collectionAdd(lanes, oldLane);\n      collectionAdd(oldLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n    });\n  });\n\n  // TODO(nikku): return changed elements\n  // return [ ... ];\n\n  return [];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}