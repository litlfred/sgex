{"ast":null,"code":"import { isString } from 'min-dash';\nexport { is, isAny } from '../../../util/ModelUtil';\nimport { is, isAny, getBusinessObject } from '../../../util/ModelUtil';\nimport { isHorizontal } from '../../../util/DiUtil';\n\n/**\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n * @typedef {import('../../../model/Types').Element} Element\n */\n\n/**\n * Return the parent of the element with any of the given types.\n *\n * @param {Element} element\n * @param {string|string[]} anyType\n *\n * @return {Element|null}\n */\nexport function getParent(element, anyType) {\n  if (isString(anyType)) {\n    anyType = [anyType];\n  }\n  while (element = element.parent) {\n    if (isAny(element, anyType)) {\n      return element;\n    }\n  }\n  return null;\n}\n\n/**\n * Determines if the local modeling direction is vertical or horizontal.\n *\n * @param {Element} element\n * @param {ElementRegistry} [elementRegistry] - provide to consider parent diagram direction\n *\n * @return {boolean} false for vertical pools, lanes and their children. true otherwise\n */\nexport function isDirectionHorizontal(element, elementRegistry) {\n  var parent = getParent(element, 'bpmn:Process');\n  if (parent) {\n    return true;\n  }\n  var types = ['bpmn:Participant', 'bpmn:Lane'];\n  parent = getParent(element, types);\n  if (parent) {\n    return isHorizontal(parent);\n  } else if (isAny(element, types)) {\n    return isHorizontal(element);\n  }\n  var process;\n  for (process = getBusinessObject(element); process; process = process.$parent) {\n    if (is(process, 'bpmn:Process')) {\n      break;\n    }\n  }\n  if (!elementRegistry) {\n    return true;\n  }\n\n  // The direction may be specified in another diagram. We ignore that there\n  // could be multiple diagrams with contradicting properties based on the\n  // assumption that such BPMN files are unusual.\n  var pool = elementRegistry.find(function (shape) {\n    var businessObject = getBusinessObject(shape);\n    return businessObject && businessObject.get('processRef') === process;\n  });\n  if (!pool) {\n    return true;\n  }\n  return isHorizontal(pool);\n}","map":{"version":3,"names":["isString","is","isAny","getBusinessObject","isHorizontal","getParent","element","anyType","parent","isDirectionHorizontal","elementRegistry","types","process","$parent","pool","find","shape","businessObject","get"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/modeling/util/ModelingUtil.js"],"sourcesContent":["import { isString } from 'min-dash';\n\nexport { is, isAny } from '../../../util/ModelUtil';\n\nimport {\n  is,\n  isAny,\n  getBusinessObject\n} from '../../../util/ModelUtil';\n\nimport { isHorizontal } from '../../../util/DiUtil';\n\n/**\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n * @typedef {import('../../../model/Types').Element} Element\n */\n\n/**\n * Return the parent of the element with any of the given types.\n *\n * @param {Element} element\n * @param {string|string[]} anyType\n *\n * @return {Element|null}\n */\nexport function getParent(element, anyType) {\n\n  if (isString(anyType)) {\n    anyType = [ anyType ];\n  }\n\n  while ((element = element.parent)) {\n    if (isAny(element, anyType)) {\n      return element;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Determines if the local modeling direction is vertical or horizontal.\n *\n * @param {Element} element\n * @param {ElementRegistry} [elementRegistry] - provide to consider parent diagram direction\n *\n * @return {boolean} false for vertical pools, lanes and their children. true otherwise\n */\nexport function isDirectionHorizontal(element, elementRegistry) {\n\n  var parent = getParent(element, 'bpmn:Process');\n  if (parent) {\n    return true;\n  }\n\n  var types = [ 'bpmn:Participant', 'bpmn:Lane' ];\n\n  parent = getParent(element, types);\n  if (parent) {\n    return isHorizontal(parent);\n  } else if (isAny(element, types)) {\n    return isHorizontal(element);\n  }\n\n  var process;\n  for (process = getBusinessObject(element); process; process = process.$parent) {\n    if (is(process, 'bpmn:Process')) {\n      break;\n    }\n  }\n\n  if (!elementRegistry) {\n    return true;\n  }\n\n  // The direction may be specified in another diagram. We ignore that there\n  // could be multiple diagrams with contradicting properties based on the\n  // assumption that such BPMN files are unusual.\n  var pool = elementRegistry.find(function(shape) {\n    var businessObject = getBusinessObject(shape);\n    return businessObject && businessObject.get('processRef') === process;\n  });\n\n  if (!pool) {\n    return true;\n  }\n\n  return isHorizontal(pool);\n}"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,UAAU;AAEnC,SAASC,EAAE,EAAEC,KAAK,QAAQ,yBAAyB;AAEnD,SACED,EAAE,EACFC,KAAK,EACLC,iBAAiB,QACZ,yBAAyB;AAEhC,SAASC,YAAY,QAAQ,sBAAsB;;AAEnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,OAAO,EAAEC,OAAO,EAAE;EAE1C,IAAIP,QAAQ,CAACO,OAAO,CAAC,EAAE;IACrBA,OAAO,GAAG,CAAEA,OAAO,CAAE;EACvB;EAEA,OAAQD,OAAO,GAAGA,OAAO,CAACE,MAAM,EAAG;IACjC,IAAIN,KAAK,CAACI,OAAO,EAAEC,OAAO,CAAC,EAAE;MAC3B,OAAOD,OAAO;IAChB;EACF;EAEA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,qBAAqBA,CAACH,OAAO,EAAEI,eAAe,EAAE;EAE9D,IAAIF,MAAM,GAAGH,SAAS,CAACC,OAAO,EAAE,cAAc,CAAC;EAC/C,IAAIE,MAAM,EAAE;IACV,OAAO,IAAI;EACb;EAEA,IAAIG,KAAK,GAAG,CAAE,kBAAkB,EAAE,WAAW,CAAE;EAE/CH,MAAM,GAAGH,SAAS,CAACC,OAAO,EAAEK,KAAK,CAAC;EAClC,IAAIH,MAAM,EAAE;IACV,OAAOJ,YAAY,CAACI,MAAM,CAAC;EAC7B,CAAC,MAAM,IAAIN,KAAK,CAACI,OAAO,EAAEK,KAAK,CAAC,EAAE;IAChC,OAAOP,YAAY,CAACE,OAAO,CAAC;EAC9B;EAEA,IAAIM,OAAO;EACX,KAAKA,OAAO,GAAGT,iBAAiB,CAACG,OAAO,CAAC,EAAEM,OAAO,EAAEA,OAAO,GAAGA,OAAO,CAACC,OAAO,EAAE;IAC7E,IAAIZ,EAAE,CAACW,OAAO,EAAE,cAAc,CAAC,EAAE;MAC/B;IACF;EACF;EAEA,IAAI,CAACF,eAAe,EAAE;IACpB,OAAO,IAAI;EACb;;EAEA;EACA;EACA;EACA,IAAII,IAAI,GAAGJ,eAAe,CAACK,IAAI,CAAC,UAASC,KAAK,EAAE;IAC9C,IAAIC,cAAc,GAAGd,iBAAiB,CAACa,KAAK,CAAC;IAC7C,OAAOC,cAAc,IAAIA,cAAc,CAACC,GAAG,CAAC,YAAY,CAAC,KAAKN,OAAO;EACvE,CAAC,CAAC;EAEF,IAAI,CAACE,IAAI,EAAE;IACT,OAAO,IAAI;EACb;EAEA,OAAOV,YAAY,CAACU,IAAI,CAAC;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}