{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/runner/work/sgex/sgex/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nclass _CodeOrName {}\nexports._CodeOrName = _CodeOrName;\nexports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;\nclass Name extends _CodeOrName {\n  constructor(s) {\n    super();\n    if (!exports.IDENTIFIER.test(s)) throw new Error(\"CodeGen: name must be a valid identifier\");\n    this.str = s;\n  }\n  toString() {\n    return this.str;\n  }\n  emptyStr() {\n    return false;\n  }\n  get names() {\n    return {\n      [this.str]: 1\n    };\n  }\n}\nexports.Name = Name;\nclass _Code extends _CodeOrName {\n  constructor(code) {\n    super();\n    this._items = typeof code === \"string\" ? [code] : code;\n  }\n  toString() {\n    return this.str;\n  }\n  emptyStr() {\n    if (this._items.length > 1) return false;\n    const item = this._items[0];\n    return item === \"\" || item === '\"\"';\n  }\n  get str() {\n    var _a;\n    return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce((s, c) => \"\".concat(s).concat(c), \"\");\n  }\n  get names() {\n    var _a;\n    return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce((names, c) => {\n      if (c instanceof Name) names[c.str] = (names[c.str] || 0) + 1;\n      return names;\n    }, {});\n  }\n}\nexports._Code = _Code;\nexports.nil = new _Code(\"\");\nfunction _(strs) {\n  const code = [strs[0]];\n  let i = 0;\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  while (i < args.length) {\n    addCodeArg(code, args[i]);\n    code.push(strs[++i]);\n  }\n  return new _Code(code);\n}\nexports._ = _;\nconst plus = new _Code(\"+\");\nfunction str(strs) {\n  const expr = [safeStringify(strs[0])];\n  let i = 0;\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n  while (i < args.length) {\n    expr.push(plus);\n    addCodeArg(expr, args[i]);\n    expr.push(plus, safeStringify(strs[++i]));\n  }\n  optimize(expr);\n  return new _Code(expr);\n}\nexports.str = str;\nfunction addCodeArg(code, arg) {\n  if (arg instanceof _Code) code.push(...arg._items);else if (arg instanceof Name) code.push(arg);else code.push(interpolate(arg));\n}\nexports.addCodeArg = addCodeArg;\nfunction optimize(expr) {\n  let i = 1;\n  while (i < expr.length - 1) {\n    if (expr[i] === plus) {\n      const res = mergeExprItems(expr[i - 1], expr[i + 1]);\n      if (res !== undefined) {\n        expr.splice(i - 1, 3, res);\n        continue;\n      }\n      expr[i++] = \"+\";\n    }\n    i++;\n  }\n}\nfunction mergeExprItems(a, b) {\n  if (b === '\"\"') return a;\n  if (a === '\"\"') return b;\n  if (typeof a == \"string\") {\n    if (b instanceof Name || a[a.length - 1] !== '\"') return;\n    if (typeof b != \"string\") return \"\".concat(a.slice(0, -1)).concat(b, \"\\\"\");\n    if (b[0] === '\"') return a.slice(0, -1) + b.slice(1);\n    return;\n  }\n  if (typeof b == \"string\" && b[0] === '\"' && !(a instanceof Name)) return \"\\\"\".concat(a).concat(b.slice(1));\n  return;\n}\nfunction strConcat(c1, c2) {\n  return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \"\", \"\"])), c1, c2);\n}\nexports.strConcat = strConcat;\n// TODO do not allow arrays here\nfunction interpolate(x) {\n  return typeof x == \"number\" || typeof x == \"boolean\" || x === null ? x : safeStringify(Array.isArray(x) ? x.join(\",\") : x);\n}\nfunction stringify(x) {\n  return new _Code(safeStringify(x));\n}\nexports.stringify = stringify;\nfunction safeStringify(x) {\n  return JSON.stringify(x).replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\");\n}\nexports.safeStringify = safeStringify;\nfunction getProperty(key) {\n  return typeof key == \"string\" && exports.IDENTIFIER.test(key) ? new _Code(\".\".concat(key)) : _(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"[\", \"]\"])), key);\n}\nexports.getProperty = getProperty;\n//Does best effort to format the name properly\nfunction getEsmExportName(key) {\n  if (typeof key == \"string\" && exports.IDENTIFIER.test(key)) {\n    return new _Code(\"\".concat(key));\n  }\n  throw new Error(\"CodeGen: invalid export name: \".concat(key, \", use explicit $id name mapping\"));\n}\nexports.getEsmExportName = getEsmExportName;\nfunction regexpCode(rx) {\n  return new _Code(rx.toString());\n}\nexports.regexpCode = regexpCode;","map":{"version":3,"names":["_CodeOrName","exports","IDENTIFIER","Name","constructor","s","test","Error","str","toString","emptyStr","names","_Code","code","_items","length","item","_a","_str","reduce","c","concat","_names","nil","_","strs","i","_len","arguments","args","Array","_key","addCodeArg","push","plus","expr","safeStringify","_len2","_key2","optimize","arg","interpolate","res","mergeExprItems","undefined","splice","a","b","slice","strConcat","c1","c2","_templateObject","_taggedTemplateLiteral","x","isArray","join","stringify","JSON","replace","getProperty","key","_templateObject2","getEsmExportName","regexpCode","rx"],"sources":["/home/runner/work/sgex/sgex/node_modules/ajv/lib/compile/codegen/code.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport abstract class _CodeOrName {\n  abstract readonly str: string\n  abstract readonly names: UsedNames\n  abstract toString(): string\n  abstract emptyStr(): boolean\n}\n\nexport const IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i\n\nexport class Name extends _CodeOrName {\n  readonly str: string\n  constructor(s: string) {\n    super()\n    if (!IDENTIFIER.test(s)) throw new Error(\"CodeGen: name must be a valid identifier\")\n    this.str = s\n  }\n\n  toString(): string {\n    return this.str\n  }\n\n  emptyStr(): boolean {\n    return false\n  }\n\n  get names(): UsedNames {\n    return {[this.str]: 1}\n  }\n}\n\nexport class _Code extends _CodeOrName {\n  readonly _items: readonly CodeItem[]\n  private _str?: string\n  private _names?: UsedNames\n\n  constructor(code: string | readonly CodeItem[]) {\n    super()\n    this._items = typeof code === \"string\" ? [code] : code\n  }\n\n  toString(): string {\n    return this.str\n  }\n\n  emptyStr(): boolean {\n    if (this._items.length > 1) return false\n    const item = this._items[0]\n    return item === \"\" || item === '\"\"'\n  }\n\n  get str(): string {\n    return (this._str ??= this._items.reduce((s: string, c: CodeItem) => `${s}${c}`, \"\"))\n  }\n\n  get names(): UsedNames {\n    return (this._names ??= this._items.reduce((names: UsedNames, c) => {\n      if (c instanceof Name) names[c.str] = (names[c.str] || 0) + 1\n      return names\n    }, {}))\n  }\n}\n\nexport type CodeItem = Name | string | number | boolean | null\n\nexport type UsedNames = Record<string, number | undefined>\n\nexport type Code = _Code | Name\n\nexport type SafeExpr = Code | number | boolean | null\n\nexport const nil = new _Code(\"\")\n\ntype CodeArg = SafeExpr | string | undefined\n\nexport function _(strs: TemplateStringsArray, ...args: CodeArg[]): _Code {\n  const code: CodeItem[] = [strs[0]]\n  let i = 0\n  while (i < args.length) {\n    addCodeArg(code, args[i])\n    code.push(strs[++i])\n  }\n  return new _Code(code)\n}\n\nconst plus = new _Code(\"+\")\n\nexport function str(strs: TemplateStringsArray, ...args: (CodeArg | string[])[]): _Code {\n  const expr: CodeItem[] = [safeStringify(strs[0])]\n  let i = 0\n  while (i < args.length) {\n    expr.push(plus)\n    addCodeArg(expr, args[i])\n    expr.push(plus, safeStringify(strs[++i]))\n  }\n  optimize(expr)\n  return new _Code(expr)\n}\n\nexport function addCodeArg(code: CodeItem[], arg: CodeArg | string[]): void {\n  if (arg instanceof _Code) code.push(...arg._items)\n  else if (arg instanceof Name) code.push(arg)\n  else code.push(interpolate(arg))\n}\n\nfunction optimize(expr: CodeItem[]): void {\n  let i = 1\n  while (i < expr.length - 1) {\n    if (expr[i] === plus) {\n      const res = mergeExprItems(expr[i - 1], expr[i + 1])\n      if (res !== undefined) {\n        expr.splice(i - 1, 3, res)\n        continue\n      }\n      expr[i++] = \"+\"\n    }\n    i++\n  }\n}\n\nfunction mergeExprItems(a: CodeItem, b: CodeItem): CodeItem | undefined {\n  if (b === '\"\"') return a\n  if (a === '\"\"') return b\n  if (typeof a == \"string\") {\n    if (b instanceof Name || a[a.length - 1] !== '\"') return\n    if (typeof b != \"string\") return `${a.slice(0, -1)}${b}\"`\n    if (b[0] === '\"') return a.slice(0, -1) + b.slice(1)\n    return\n  }\n  if (typeof b == \"string\" && b[0] === '\"' && !(a instanceof Name)) return `\"${a}${b.slice(1)}`\n  return\n}\n\nexport function strConcat(c1: Code, c2: Code): Code {\n  return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`\n}\n\n// TODO do not allow arrays here\nfunction interpolate(x?: string | string[] | number | boolean | null): SafeExpr | string {\n  return typeof x == \"number\" || typeof x == \"boolean\" || x === null\n    ? x\n    : safeStringify(Array.isArray(x) ? x.join(\",\") : x)\n}\n\nexport function stringify(x: unknown): Code {\n  return new _Code(safeStringify(x))\n}\n\nexport function safeStringify(x: unknown): string {\n  return JSON.stringify(x)\n    .replace(/\\u2028/g, \"\\\\u2028\")\n    .replace(/\\u2029/g, \"\\\\u2029\")\n}\n\nexport function getProperty(key: Code | string | number): Code {\n  return typeof key == \"string\" && IDENTIFIER.test(key) ? new _Code(`.${key}`) : _`[${key}]`\n}\n\n//Does best effort to format the name properly\nexport function getEsmExportName(key: Code | string | number): Code {\n  if (typeof key == \"string\" && IDENTIFIER.test(key)) {\n    return new _Code(`${key}`)\n  }\n  throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`)\n}\n\nexport function regexpCode(rx: RegExp): Code {\n  return new _Code(rx.toString())\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}