{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/runner/work/sgex/sgex/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst code_1 = require(\"../code\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n  message: _ref => {\n    let {\n      schemaCode\n    } = _ref;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must match pattern \\\"\", \"\\\"\"])), schemaCode);\n  },\n  params: _ref2 => {\n    let {\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{pattern: \", \"}\"])), schemaCode);\n  }\n};\nconst def = {\n  keyword: \"pattern\",\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      data,\n      $data,\n      schema,\n      schemaCode,\n      it\n    } = cxt;\n    // TODO regexp should be wrapped in try/catchs\n    const u = it.opts.unicodeRegExp ? \"u\" : \"\";\n    const regExp = $data ? (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"(new RegExp(\", \", \", \"))\"])), schemaCode, u) : (0, code_1.usePattern)(cxt, schema);\n    cxt.fail$data((0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"!\", \".test(\", \")\"])), regExp, data));\n  }\n};\nexports.default = def;","map":{"version":3,"names":["code_1","require","codegen_1","error","message","_ref","schemaCode","str","_templateObject","_taggedTemplateLiteral","params","_ref2","_","_templateObject2","def","keyword","type","schemaType","$data","code","cxt","data","schema","it","u","opts","unicodeRegExp","regExp","_templateObject3","usePattern","fail$data","_templateObject4","exports","default"],"sources":["/home/runner/work/sgex/sgex/node_modules/ajv/lib/vocabularies/validation/pattern.ts"],"sourcesContent":["import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {usePattern} from \"../code\"\nimport {_, str} from \"../../compile/codegen\"\n\nexport type PatternError = ErrorObject<\"pattern\", {pattern: string}, string | {$data: string}>\n\nconst error: KeywordErrorDefinition = {\n  message: ({schemaCode}) => str`must match pattern \"${schemaCode}\"`,\n  params: ({schemaCode}) => _`{pattern: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"pattern\",\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {data, $data, schema, schemaCode, it} = cxt\n    // TODO regexp should be wrapped in try/catchs\n    const u = it.opts.unicodeRegExp ? \"u\" : \"\"\n    const regExp = $data ? _`(new RegExp(${schemaCode}, ${u}))` : usePattern(cxt, schema)\n    cxt.fail$data(_`!${regExp}.test(${data})`)\n  },\n}\n\nexport default def\n"],"mappings":";;;;;;;AAEA,MAAAA,MAAA,GAAAC,OAAA;AACA,MAAAC,SAAA,GAAAD,OAAA;AAIA,MAAME,KAAK,GAA2B;EACpCC,OAAO,EAAEC,IAAA;IAAA,IAAC;MAACC;IAAU,CAAC,GAAAD,IAAA;IAAA,QAAK,GAAAH,SAAA,CAAAK,GAAG,EAAAC,eAAA,KAAAA,eAAA,GAAAC,sBAAA,oCAAuBH,UAAU;EAAA,CAAG;EAClEI,MAAM,EAAEC,KAAA;IAAA,IAAC;MAACL;IAAU,CAAC,GAAAK,KAAA;IAAA,QAAK,GAAAT,SAAA,CAAAU,CAAC,EAAAC,gBAAA,KAAAA,gBAAA,GAAAJ,sBAAA,wBAAaH,UAAU;EAAA;CACnD;AAED,MAAMQ,GAAG,GAA0B;EACjCC,OAAO,EAAE,SAAS;EAClBC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,QAAQ;EACpBC,KAAK,EAAE,IAAI;EACXf,KAAK;EACLgB,IAAIA,CAACC,GAAe;IAClB,MAAM;MAACC,IAAI;MAAEH,KAAK;MAAEI,MAAM;MAAEhB,UAAU;MAAEiB;IAAE,CAAC,GAAGH,GAAG;IACjD;IACA,MAAMI,CAAC,GAAGD,EAAE,CAACE,IAAI,CAACC,aAAa,GAAG,GAAG,GAAG,EAAE;IAC1C,MAAMC,MAAM,GAAGT,KAAK,IAAG,GAAAhB,SAAA,CAAAU,CAAC,EAAAgB,gBAAA,KAAAA,gBAAA,GAAAnB,sBAAA,iCAAeH,UAAU,EAAKkB,CAAC,IAAO,IAAAxB,MAAA,CAAA6B,UAAU,EAACT,GAAG,EAAEE,MAAM,CAAC;IACrFF,GAAG,CAACU,SAAS,EAAC,GAAA5B,SAAA,CAAAU,CAAC,EAAAmB,gBAAA,KAAAA,gBAAA,GAAAtB,sBAAA,yBAAIkB,MAAM,EAASN,IAAI,CAAG,CAAC;EAC5C;CACD;AAEDW,OAAA,CAAAC,OAAA,GAAenB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}