{"ast":null,"code":"/**\n * Staging Ground Service\n * \n * Manages local changes to DAK components before they are committed to GitHub.\n * Provides persistent storage, versioning, and integration interfaces for DAK editing tools.\n */class StagingGroundService{constructor(){this.listeners=new Set();this.currentRepository=null;this.currentBranch=null;}/**\n   * Initialize staging ground for a specific repository and branch\n   */initialize(repository,branch){this.currentRepository=repository;this.currentBranch=branch;this.notifyListeners();}/**\n   * Get the storage key for current repository and branch\n   */getStorageKey(){if(!this.currentRepository||!this.currentBranch){throw new Error('Staging ground not initialized');}return`sgex_staging_${this.currentRepository.full_name}_${this.currentBranch}`;}/**\n   * Get current staging ground state\n   */getStagingGround(){try{const key=this.getStorageKey();const stored=localStorage.getItem(key);if(!stored){return this.createEmptyStagingGround();}return JSON.parse(stored);}catch(error){console.warn('Error reading staging ground from localStorage:',error);return this.createEmptyStagingGround();}}/**\n   * Create empty staging ground structure\n   */createEmptyStagingGround(){var _this$currentReposito;return{message:'',files:[],timestamp:Date.now(),branch:this.currentBranch,repository:(_this$currentReposito=this.currentRepository)===null||_this$currentReposito===void 0?void 0:_this$currentReposito.full_name};}/**\n   * Save staging ground state to localStorage\n   */saveStagingGround(stagingGround){try{var _this$currentReposito2;const key=this.getStorageKey();stagingGround.timestamp=Date.now();stagingGround.branch=this.currentBranch;stagingGround.repository=(_this$currentReposito2=this.currentRepository)===null||_this$currentReposito2===void 0?void 0:_this$currentReposito2.full_name;localStorage.setItem(key,JSON.stringify(stagingGround));this.saveToHistory(stagingGround);this.notifyListeners();return true;}catch(error){console.error('Error saving staging ground to localStorage:',error);return false;}}/**\n   * Add or update a file in the staging ground\n   */updateFile(filePath,content){let metadata=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const stagingGround=this.getStagingGround();// Find existing file or create new one\nconst existingFileIndex=stagingGround.files.findIndex(f=>f.path===filePath);const fileObject={path:filePath,content:content,metadata:{...metadata,lastModified:Date.now()},timestamp:Date.now()};if(existingFileIndex>=0){stagingGround.files[existingFileIndex]=fileObject;}else{stagingGround.files.push(fileObject);}return this.saveStagingGround(stagingGround);}/**\n   * Remove a file from the staging ground\n   */removeFile(filePath){const stagingGround=this.getStagingGround();stagingGround.files=stagingGround.files.filter(f=>f.path!==filePath);return this.saveStagingGround(stagingGround);}/**\n   * Update commit message\n   */updateCommitMessage(message){const stagingGround=this.getStagingGround();stagingGround.message=message;return this.saveStagingGround(stagingGround);}/**\n   * Check if staging ground has changes\n   */hasChanges(){const stagingGround=this.getStagingGround();return stagingGround.files.length>0;}/**\n   * Get count of changed files\n   */getChangedFilesCount(){const stagingGround=this.getStagingGround();return stagingGround.files.length;}/**\n   * Clear all changes in staging ground\n   */clearStagingGround(){const empty=this.createEmptyStagingGround();return this.saveStagingGround(empty);}/**\n   * Save current state to history for rollback\n   */saveToHistory(stagingGround){try{const historyKey=`${this.getStorageKey()}_history`;const history=this.getHistory();// Add current state to history\nhistory.push({...stagingGround,savedAt:Date.now()});// Keep only last 10 saves\nconst recentHistory=history.slice(-10);localStorage.setItem(historyKey,JSON.stringify(recentHistory));}catch(error){console.warn('Error saving to history:',error);}}/**\n   * Get history of saves\n   */getHistory(){try{const historyKey=`${this.getStorageKey()}_history`;const stored=localStorage.getItem(historyKey);return stored?JSON.parse(stored):[];}catch(error){console.warn('Error reading history:',error);return[];}}/**\n   * Rollback to a previous save\n   */rollbackToSave(timestamp){const history=this.getHistory();const save=history.find(s=>s.savedAt===timestamp);if(!save){throw new Error('Save not found in history');}// Remove the savedAt timestamp before restoring\nconst{savedAt,...stagingGroundState}=save;return this.saveStagingGround(stagingGroundState);}/**\n   * Export staging ground state for backup/sharing\n   */exportStagingGround(){var _this$currentReposito3;const stagingGround=this.getStagingGround();const history=this.getHistory();return{current:stagingGround,history:history,exportedAt:Date.now(),repository:(_this$currentReposito3=this.currentRepository)===null||_this$currentReposito3===void 0?void 0:_this$currentReposito3.full_name,branch:this.currentBranch};}/**\n   * Import staging ground state from backup\n   */importStagingGround(exportedData){var _this$currentReposito4;if(!exportedData.current||!exportedData.repository||!exportedData.branch){throw new Error('Invalid export data format');}if(exportedData.repository!==((_this$currentReposito4=this.currentRepository)===null||_this$currentReposito4===void 0?void 0:_this$currentReposito4.full_name)||exportedData.branch!==this.currentBranch){throw new Error('Export data is for different repository or branch');}// Save current state and import new one\nthis.saveStagingGround(exportedData.current);// Import history if available\nif(exportedData.history){try{const historyKey=`${this.getStorageKey()}_history`;localStorage.setItem(historyKey,JSON.stringify(exportedData.history));}catch(error){console.warn('Error importing history:',error);}}return true;}/**\n   * Clean up old staging grounds and history\n   */cleanup(){let maxAge=arguments.length>0&&arguments[0]!==undefined?arguments[0]:7*24*60*60*1000;// 7 days default\ntry{const now=Date.now();const keysToRemove=[];// Check all localStorage keys for old staging grounds\nfor(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key&&key.startsWith('sgex_staging_')){try{const data=JSON.parse(localStorage.getItem(key));if(data.timestamp&&now-data.timestamp>maxAge){keysToRemove.push(key);keysToRemove.push(`${key}_history`);}}catch(error){// Invalid data, mark for removal\nkeysToRemove.push(key);}}}// Remove old entries\nkeysToRemove.forEach(key=>{localStorage.removeItem(key);});return keysToRemove.length;}catch(error){console.error('Error during cleanup:',error);return 0;}}/**\n   * Add listener for staging ground changes\n   */addListener(callback){this.listeners.add(callback);// Return unsubscribe function\nreturn()=>{this.listeners.delete(callback);};}/**\n   * Notify all listeners of changes\n   */notifyListeners(){const stagingGround=this.getStagingGround();this.listeners.forEach(callback=>{try{callback(stagingGround);}catch(error){console.error('Error in staging ground listener:',error);}});}/**\n   * Interface for DAK editing tools to contribute files\n   */contributeFiles(files){let metadata=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!Array.isArray(files)){files=[files];}let success=true;const results=[];files.forEach(file=>{if(!file.path||!file.content){results.push({path:file.path,success:false,error:'Missing path or content'});success=false;return;}const result=this.updateFile(file.path,file.content,{...metadata,source:metadata.tool||'unknown',contributedAt:Date.now()});results.push({path:file.path,success:result});if(!result)success=false;});return{success,results};}/**\n   * Get status for DAK editing tools\n   */getStatus(){var _this$currentReposito5;const stagingGround=this.getStagingGround();return{hasChanges:this.hasChanges(),filesCount:this.getChangedFilesCount(),lastModified:stagingGround.timestamp,branch:this.currentBranch,repository:(_this$currentReposito5=this.currentRepository)===null||_this$currentReposito5===void 0?void 0:_this$currentReposito5.full_name};}}// Create singleton instance\nconst stagingGroundService=new StagingGroundService();export default stagingGroundService;","map":{"version":3,"names":["StagingGroundService","constructor","listeners","Set","currentRepository","currentBranch","initialize","repository","branch","notifyListeners","getStorageKey","Error","full_name","getStagingGround","key","stored","localStorage","getItem","createEmptyStagingGround","JSON","parse","error","console","warn","_this$currentReposito","message","files","timestamp","Date","now","saveStagingGround","stagingGround","_this$currentReposito2","setItem","stringify","saveToHistory","updateFile","filePath","content","metadata","arguments","length","undefined","existingFileIndex","findIndex","f","path","fileObject","lastModified","push","removeFile","filter","updateCommitMessage","hasChanges","getChangedFilesCount","clearStagingGround","empty","historyKey","history","getHistory","savedAt","recentHistory","slice","rollbackToSave","save","find","s","stagingGroundState","exportStagingGround","_this$currentReposito3","current","exportedAt","importStagingGround","exportedData","_this$currentReposito4","cleanup","maxAge","keysToRemove","i","startsWith","data","forEach","removeItem","addListener","callback","add","delete","contributeFiles","Array","isArray","success","results","file","result","source","tool","contributedAt","getStatus","_this$currentReposito5","filesCount","stagingGroundService"],"sources":["/home/runner/work/sgex/sgex/src/services/stagingGroundService.js"],"sourcesContent":["/**\n * Staging Ground Service\n * \n * Manages local changes to DAK components before they are committed to GitHub.\n * Provides persistent storage, versioning, and integration interfaces for DAK editing tools.\n */\n\nclass StagingGroundService {\n  constructor() {\n    this.listeners = new Set();\n    this.currentRepository = null;\n    this.currentBranch = null;\n  }\n\n  /**\n   * Initialize staging ground for a specific repository and branch\n   */\n  initialize(repository, branch) {\n    this.currentRepository = repository;\n    this.currentBranch = branch;\n    this.notifyListeners();\n  }\n\n  /**\n   * Get the storage key for current repository and branch\n   */\n  getStorageKey() {\n    if (!this.currentRepository || !this.currentBranch) {\n      throw new Error('Staging ground not initialized');\n    }\n    return `sgex_staging_${this.currentRepository.full_name}_${this.currentBranch}`;\n  }\n\n  /**\n   * Get current staging ground state\n   */\n  getStagingGround() {\n    try {\n      const key = this.getStorageKey();\n      const stored = localStorage.getItem(key);\n      if (!stored) {\n        return this.createEmptyStagingGround();\n      }\n      return JSON.parse(stored);\n    } catch (error) {\n      console.warn('Error reading staging ground from localStorage:', error);\n      return this.createEmptyStagingGround();\n    }\n  }\n\n  /**\n   * Create empty staging ground structure\n   */\n  createEmptyStagingGround() {\n    return {\n      message: '',\n      files: [],\n      timestamp: Date.now(),\n      branch: this.currentBranch,\n      repository: this.currentRepository?.full_name\n    };\n  }\n\n  /**\n   * Save staging ground state to localStorage\n   */\n  saveStagingGround(stagingGround) {\n    try {\n      const key = this.getStorageKey();\n      stagingGround.timestamp = Date.now();\n      stagingGround.branch = this.currentBranch;\n      stagingGround.repository = this.currentRepository?.full_name;\n      \n      localStorage.setItem(key, JSON.stringify(stagingGround));\n      this.saveToHistory(stagingGround);\n      this.notifyListeners();\n      return true;\n    } catch (error) {\n      console.error('Error saving staging ground to localStorage:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Add or update a file in the staging ground\n   */\n  updateFile(filePath, content, metadata = {}) {\n    const stagingGround = this.getStagingGround();\n    \n    // Find existing file or create new one\n    const existingFileIndex = stagingGround.files.findIndex(f => f.path === filePath);\n    const fileObject = {\n      path: filePath,\n      content: content,\n      metadata: {\n        ...metadata,\n        lastModified: Date.now()\n      },\n      timestamp: Date.now()\n    };\n\n    if (existingFileIndex >= 0) {\n      stagingGround.files[existingFileIndex] = fileObject;\n    } else {\n      stagingGround.files.push(fileObject);\n    }\n\n    return this.saveStagingGround(stagingGround);\n  }\n\n  /**\n   * Remove a file from the staging ground\n   */\n  removeFile(filePath) {\n    const stagingGround = this.getStagingGround();\n    stagingGround.files = stagingGround.files.filter(f => f.path !== filePath);\n    return this.saveStagingGround(stagingGround);\n  }\n\n  /**\n   * Update commit message\n   */\n  updateCommitMessage(message) {\n    const stagingGround = this.getStagingGround();\n    stagingGround.message = message;\n    return this.saveStagingGround(stagingGround);\n  }\n\n  /**\n   * Check if staging ground has changes\n   */\n  hasChanges() {\n    const stagingGround = this.getStagingGround();\n    return stagingGround.files.length > 0;\n  }\n\n  /**\n   * Get count of changed files\n   */\n  getChangedFilesCount() {\n    const stagingGround = this.getStagingGround();\n    return stagingGround.files.length;\n  }\n\n  /**\n   * Clear all changes in staging ground\n   */\n  clearStagingGround() {\n    const empty = this.createEmptyStagingGround();\n    return this.saveStagingGround(empty);\n  }\n\n  /**\n   * Save current state to history for rollback\n   */\n  saveToHistory(stagingGround) {\n    try {\n      const historyKey = `${this.getStorageKey()}_history`;\n      const history = this.getHistory();\n      \n      // Add current state to history\n      history.push({\n        ...stagingGround,\n        savedAt: Date.now()\n      });\n\n      // Keep only last 10 saves\n      const recentHistory = history.slice(-10);\n      localStorage.setItem(historyKey, JSON.stringify(recentHistory));\n      \n    } catch (error) {\n      console.warn('Error saving to history:', error);\n    }\n  }\n\n  /**\n   * Get history of saves\n   */\n  getHistory() {\n    try {\n      const historyKey = `${this.getStorageKey()}_history`;\n      const stored = localStorage.getItem(historyKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.warn('Error reading history:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Rollback to a previous save\n   */\n  rollbackToSave(timestamp) {\n    const history = this.getHistory();\n    const save = history.find(s => s.savedAt === timestamp);\n    \n    if (!save) {\n      throw new Error('Save not found in history');\n    }\n\n    // Remove the savedAt timestamp before restoring\n    const { savedAt, ...stagingGroundState } = save;\n    return this.saveStagingGround(stagingGroundState);\n  }\n\n  /**\n   * Export staging ground state for backup/sharing\n   */\n  exportStagingGround() {\n    const stagingGround = this.getStagingGround();\n    const history = this.getHistory();\n    \n    return {\n      current: stagingGround,\n      history: history,\n      exportedAt: Date.now(),\n      repository: this.currentRepository?.full_name,\n      branch: this.currentBranch\n    };\n  }\n\n  /**\n   * Import staging ground state from backup\n   */\n  importStagingGround(exportedData) {\n    if (!exportedData.current || !exportedData.repository || !exportedData.branch) {\n      throw new Error('Invalid export data format');\n    }\n\n    if (exportedData.repository !== this.currentRepository?.full_name ||\n        exportedData.branch !== this.currentBranch) {\n      throw new Error('Export data is for different repository or branch');\n    }\n\n    // Save current state and import new one\n    this.saveStagingGround(exportedData.current);\n    \n    // Import history if available\n    if (exportedData.history) {\n      try {\n        const historyKey = `${this.getStorageKey()}_history`;\n        localStorage.setItem(historyKey, JSON.stringify(exportedData.history));\n      } catch (error) {\n        console.warn('Error importing history:', error);\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Clean up old staging grounds and history\n   */\n  cleanup(maxAge = 7 * 24 * 60 * 60 * 1000) { // 7 days default\n    try {\n      const now = Date.now();\n      const keysToRemove = [];\n\n      // Check all localStorage keys for old staging grounds\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && key.startsWith('sgex_staging_')) {\n          try {\n            const data = JSON.parse(localStorage.getItem(key));\n            if (data.timestamp && (now - data.timestamp) > maxAge) {\n              keysToRemove.push(key);\n              keysToRemove.push(`${key}_history`);\n            }\n          } catch (error) {\n            // Invalid data, mark for removal\n            keysToRemove.push(key);\n          }\n        }\n      }\n\n      // Remove old entries\n      keysToRemove.forEach(key => {\n        localStorage.removeItem(key);\n      });\n\n      return keysToRemove.length;\n    } catch (error) {\n      console.error('Error during cleanup:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Add listener for staging ground changes\n   */\n  addListener(callback) {\n    this.listeners.add(callback);\n    \n    // Return unsubscribe function\n    return () => {\n      this.listeners.delete(callback);\n    };\n  }\n\n  /**\n   * Notify all listeners of changes\n   */\n  notifyListeners() {\n    const stagingGround = this.getStagingGround();\n    this.listeners.forEach(callback => {\n      try {\n        callback(stagingGround);\n      } catch (error) {\n        console.error('Error in staging ground listener:', error);\n      }\n    });\n  }\n\n  /**\n   * Interface for DAK editing tools to contribute files\n   */\n  contributeFiles(files, metadata = {}) {\n    if (!Array.isArray(files)) {\n      files = [files];\n    }\n\n    let success = true;\n    const results = [];\n\n    files.forEach(file => {\n      if (!file.path || !file.content) {\n        results.push({ path: file.path, success: false, error: 'Missing path or content' });\n        success = false;\n        return;\n      }\n\n      const result = this.updateFile(file.path, file.content, {\n        ...metadata,\n        source: metadata.tool || 'unknown',\n        contributedAt: Date.now()\n      });\n\n      results.push({ path: file.path, success: result });\n      if (!result) success = false;\n    });\n\n    return { success, results };\n  }\n\n  /**\n   * Get status for DAK editing tools\n   */\n  getStatus() {\n    const stagingGround = this.getStagingGround();\n    return {\n      hasChanges: this.hasChanges(),\n      filesCount: this.getChangedFilesCount(),\n      lastModified: stagingGround.timestamp,\n      branch: this.currentBranch,\n      repository: this.currentRepository?.full_name\n    };\n  }\n}\n\n// Create singleton instance\nconst stagingGroundService = new StagingGroundService();\n\nexport default stagingGroundService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}