{"ast":null,"code":"/**\n * User Access Service\n * \n * Manages user types and access levels throughout the SGEX Workbench.\n * Supports three user types: authenticated, unauthenticated, and demo users.\n */import githubService from'./githubService';import logger from'../utils/logger';/**\n * User types supported by the access framework\n */export const USER_TYPES={AUTHENTICATED:'authenticated',UNAUTHENTICATED:'unauthenticated',DEMO:'demo'};/**\n * Access levels for different operations\n */export const ACCESS_LEVELS={READ:'read',WRITE:'write',NONE:'none'};class UserAccessService{constructor(){this.logger=logger.getLogger('UserAccessService');this.currentUser=null;this.userType=USER_TYPES.UNAUTHENTICATED;this.permissions=new Map();this.listeners=new Set();}/**\n   * Initialize user access service\n   */async initialize(){this.logger.info('Initializing user access service');await this.detectUserType();this.notifyListeners();}/**\n   * Detect current user type based on authentication state\n   */async detectUserType(){try{if(githubService.isAuth()){// Check if this is a demo user (has demo DAKs configured)\nconst isDemoUser=this.checkIfDemoUser();if(isDemoUser){this.userType=USER_TYPES.DEMO;this.currentUser=await this.createDemoUser();}else{this.userType=USER_TYPES.AUTHENTICATED;this.currentUser=await githubService.getCurrentUser();}}else{this.userType=USER_TYPES.UNAUTHENTICATED;this.currentUser=null;}this.logger.info('User type detected',{userType:this.userType,hasUser:!!this.currentUser});}catch(error){this.logger.error('Error detecting user type',{error:error.message});// Fallback to unauthenticated\nthis.userType=USER_TYPES.UNAUTHENTICATED;this.currentUser=null;}}/**\n   * Check if current authenticated user should be treated as demo user\n   */checkIfDemoUser(){// Demo users are determined by having access to demo DAKs\n// This can be configured via localStorage or environment variables\nconst demoMode=localStorage.getItem('sgex_demo_mode');const envDemoMode=process.env.REACT_APP_DEMO_MODE;return demoMode==='true'||envDemoMode==='true';}/**\n   * Create demo user object with demo data\n   */async createDemoUser(){try{const realUser=await githubService.getCurrentUser();return{...realUser,isDemo:true,demoData:this.getDemoData()};}catch(error){// If we can't get real user, create a synthetic demo user\nreturn{login:'demo-user',name:'Demo User',avatar_url:'/sgex-mascot.png',type:'User',isDemo:true,demoData:this.getDemoData()};}}/**\n   * Get demo data and DAKs\n   */getDemoData(){return{daks:[{owner:'WHO',repo:'smart-anc',name:'Smart Antenatal Care',description:'Demo DAK for antenatal care guidelines'},{owner:'WHO',repo:'smart-tb',name:'Smart Tuberculosis',description:'Demo DAK for tuberculosis care guidelines'}],sampleAssets:{'input/vocabulary/ValueSet-anc-care-codes.json':{type:'ValueSet',description:'Demo value set for antenatal care'}}};}/**\n   * Get current user type\n   */getUserType(){return this.userType;}/**\n   * Get current user information\n   */getCurrentUser(){return this.currentUser;}/**\n   * Check if user is authenticated (includes demo users)\n   */isAuthenticated(){return this.userType===USER_TYPES.AUTHENTICATED||this.userType===USER_TYPES.DEMO;}/**\n   * Check if user is in demo mode\n   */isDemoUser(){return this.userType===USER_TYPES.DEMO;}/**\n   * Check if user is unauthenticated\n   */isUnauthenticated(){return this.userType===USER_TYPES.UNAUTHENTICATED;}/**\n   * Get access level for a specific repository and operation\n   */async getRepositoryAccess(owner,repo){let branch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'main';const cacheKey=`${owner}/${repo}/${branch}`;// Check cache first\nif(this.permissions.has(cacheKey)){return this.permissions.get(cacheKey);}let access=ACCESS_LEVELS.NONE;try{if(this.userType===USER_TYPES.UNAUTHENTICATED){// Unauthenticated users only get read access to public repos\naccess=ACCESS_LEVELS.READ;}else if(this.userType===USER_TYPES.DEMO){// Demo users get read access to demo DAKs, but no write access\nconst isDemoDAK=this.isDemoDAK(owner,repo);access=isDemoDAK?ACCESS_LEVELS.READ:ACCESS_LEVELS.NONE;}else if(this.userType===USER_TYPES.AUTHENTICATED){// Authenticated users get access based on GitHub permissions\nconst hasReadAccess=await this.checkGitHubReadAccess(owner,repo);const hasWriteAccess=await this.checkGitHubWriteAccess(owner,repo);if(hasWriteAccess){access=ACCESS_LEVELS.WRITE;}else if(hasReadAccess){access=ACCESS_LEVELS.READ;}}}catch(error){this.logger.error('Error checking repository access',{owner,repo,branch,error:error.message});// Default to read access on error for better UX\naccess=ACCESS_LEVELS.READ;}// Cache the result\nthis.permissions.set(cacheKey,access);this.logger.debug('Repository access determined',{owner,repo,branch,access,userType:this.userType});return access;}/**\n   * Check if a repository is a demo DAK\n   */isDemoDAK(owner,repo){var _this$currentUser,_this$currentUser$dem;if(!((_this$currentUser=this.currentUser)!==null&&_this$currentUser!==void 0&&(_this$currentUser$dem=_this$currentUser.demoData)!==null&&_this$currentUser$dem!==void 0&&_this$currentUser$dem.daks)){return false;}return this.currentUser.demoData.daks.some(dak=>dak.owner===owner&&dak.repo===repo);}/**\n   * Check GitHub read access for authenticated users\n   */async checkGitHubReadAccess(owner,repo){try{await githubService.getRepository(owner,repo);return true;}catch(error){return false;}}/**\n   * Check GitHub write access for authenticated users\n   */async checkGitHubWriteAccess(owner,repo){try{return await githubService.hasRepositoryWriteAccess(owner,repo);}catch(error){return false;}}/**\n   * Check if user can save to GitHub for a specific repository\n   */async canSaveToGitHub(owner,repo){let branch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'main';// Demo users and unauthenticated users never have GitHub write access\nif(this.userType!==USER_TYPES.AUTHENTICATED){return false;}const access=await this.getRepositoryAccess(owner,repo,branch);return access===ACCESS_LEVELS.WRITE;}/**\n   * Check if user can save to local storage (staging ground)\n   */canSaveLocal(){// All user types can save to local storage\nreturn true;}/**\n   * Get UI behavior configuration for current user type\n   */getUIBehavior(){const behavior={showEditFeatures:true,showSaveToGitHub:true,showSaveLocal:true,confirmBeforeSave:true,allowCreateNew:true,showAccessBadges:true};switch(this.userType){case USER_TYPES.UNAUTHENTICATED:return{...behavior,showEditFeatures:false,showSaveToGitHub:false,allowCreateNew:false};case USER_TYPES.DEMO:return{...behavior,showSaveToGitHub:false,// Demo users see the UI but get blocked at save\nallowCreateNew:false};case USER_TYPES.AUTHENTICATED:return behavior;default:return{...behavior,showEditFeatures:false,showSaveToGitHub:false,allowCreateNew:false};}}/**\n   * Get access badge information for a repository\n   */async getAccessBadge(owner,repo){let branch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'main';const access=await this.getRepositoryAccess(owner,repo,branch);const badges={[ACCESS_LEVELS.WRITE]:{text:'Write Access',icon:'✏️',color:'green',description:'You can edit and save changes to this repository'},[ACCESS_LEVELS.READ]:{text:'Read Only',icon:'👁️',color:'blue',description:'You can view this repository but cannot save changes'},[ACCESS_LEVELS.NONE]:{text:'No Access',icon:'🚫',color:'red',description:'You do not have access to this repository'}};return badges[access]||badges[ACCESS_LEVELS.NONE];}/**\n   * Enable demo mode for current user\n   */enableDemoMode(){localStorage.setItem('sgex_demo_mode','true');this.initialize();// Re-initialize to update user type\n}/**\n   * Disable demo mode\n   */disableDemoMode(){localStorage.removeItem('sgex_demo_mode');this.initialize();// Re-initialize to update user type\n}/**\n   * Clear cached permissions\n   */clearPermissionsCache(){this.permissions.clear();this.logger.debug('Permissions cache cleared');}/**\n   * Add listener for user access changes\n   */addListener(callback){this.listeners.add(callback);// Return unsubscribe function\nreturn()=>{this.listeners.delete(callback);};}/**\n   * Notify all listeners of changes\n   */notifyListeners(){const accessState={userType:this.userType,currentUser:this.currentUser,isAuthenticated:this.isAuthenticated(),isDemoUser:this.isDemoUser(),uiBehavior:this.getUIBehavior()};this.listeners.forEach(callback=>{try{callback(accessState);}catch(error){this.logger.error('Error in access service listener',{error:error.message});}});}/**\n   * Handle authentication state changes\n   */handleAuthChange(){this.clearPermissionsCache();this.initialize();}}// Create singleton instance\nconst userAccessService=new UserAccessService();export default userAccessService;","map":{"version":3,"names":["githubService","logger","USER_TYPES","AUTHENTICATED","UNAUTHENTICATED","DEMO","ACCESS_LEVELS","READ","WRITE","NONE","UserAccessService","constructor","getLogger","currentUser","userType","permissions","Map","listeners","Set","initialize","info","detectUserType","notifyListeners","isAuth","isDemoUser","checkIfDemoUser","createDemoUser","getCurrentUser","hasUser","error","message","demoMode","localStorage","getItem","envDemoMode","process","env","REACT_APP_DEMO_MODE","realUser","isDemo","demoData","getDemoData","login","name","avatar_url","type","daks","owner","repo","description","sampleAssets","getUserType","isAuthenticated","isUnauthenticated","getRepositoryAccess","branch","arguments","length","undefined","cacheKey","has","get","access","isDemoDAK","hasReadAccess","checkGitHubReadAccess","hasWriteAccess","checkGitHubWriteAccess","set","debug","_this$currentUser","_this$currentUser$dem","some","dak","getRepository","hasRepositoryWriteAccess","canSaveToGitHub","canSaveLocal","getUIBehavior","behavior","showEditFeatures","showSaveToGitHub","showSaveLocal","confirmBeforeSave","allowCreateNew","showAccessBadges","getAccessBadge","badges","text","icon","color","enableDemoMode","setItem","disableDemoMode","removeItem","clearPermissionsCache","clear","addListener","callback","add","delete","accessState","uiBehavior","forEach","handleAuthChange","userAccessService"],"sources":["/home/runner/work/sgex/sgex/src/services/userAccessService.js"],"sourcesContent":["/**\n * User Access Service\n * \n * Manages user types and access levels throughout the SGEX Workbench.\n * Supports three user types: authenticated, unauthenticated, and demo users.\n */\n\nimport githubService from './githubService';\nimport logger from '../utils/logger';\n\n/**\n * User types supported by the access framework\n */\nexport const USER_TYPES = {\n  AUTHENTICATED: 'authenticated',\n  UNAUTHENTICATED: 'unauthenticated', \n  DEMO: 'demo'\n};\n\n/**\n * Access levels for different operations\n */\nexport const ACCESS_LEVELS = {\n  READ: 'read',\n  WRITE: 'write',\n  NONE: 'none'\n};\n\nclass UserAccessService {\n  constructor() {\n    this.logger = logger.getLogger('UserAccessService');\n    this.currentUser = null;\n    this.userType = USER_TYPES.UNAUTHENTICATED;\n    this.permissions = new Map();\n    this.listeners = new Set();\n  }\n\n  /**\n   * Initialize user access service\n   */\n  async initialize() {\n    this.logger.info('Initializing user access service');\n    await this.detectUserType();\n    this.notifyListeners();\n  }\n\n  /**\n   * Detect current user type based on authentication state\n   */\n  async detectUserType() {\n    try {\n      if (githubService.isAuth()) {\n        // Check if this is a demo user (has demo DAKs configured)\n        const isDemoUser = this.checkIfDemoUser();\n        \n        if (isDemoUser) {\n          this.userType = USER_TYPES.DEMO;\n          this.currentUser = await this.createDemoUser();\n        } else {\n          this.userType = USER_TYPES.AUTHENTICATED;\n          this.currentUser = await githubService.getCurrentUser();\n        }\n      } else {\n        this.userType = USER_TYPES.UNAUTHENTICATED;\n        this.currentUser = null;\n      }\n\n      this.logger.info('User type detected', { \n        userType: this.userType, \n        hasUser: !!this.currentUser \n      });\n    } catch (error) {\n      this.logger.error('Error detecting user type', { error: error.message });\n      // Fallback to unauthenticated\n      this.userType = USER_TYPES.UNAUTHENTICATED;\n      this.currentUser = null;\n    }\n  }\n\n  /**\n   * Check if current authenticated user should be treated as demo user\n   */\n  checkIfDemoUser() {\n    // Demo users are determined by having access to demo DAKs\n    // This can be configured via localStorage or environment variables\n    const demoMode = localStorage.getItem('sgex_demo_mode');\n    const envDemoMode = process.env.REACT_APP_DEMO_MODE;\n    \n    return demoMode === 'true' || envDemoMode === 'true';\n  }\n\n  /**\n   * Create demo user object with demo data\n   */\n  async createDemoUser() {\n    try {\n      const realUser = await githubService.getCurrentUser();\n      return {\n        ...realUser,\n        isDemo: true,\n        demoData: this.getDemoData()\n      };\n    } catch (error) {\n      // If we can't get real user, create a synthetic demo user\n      return {\n        login: 'demo-user',\n        name: 'Demo User',\n        avatar_url: '/sgex-mascot.png',\n        type: 'User',\n        isDemo: true,\n        demoData: this.getDemoData()\n      };\n    }\n  }\n\n  /**\n   * Get demo data and DAKs\n   */\n  getDemoData() {\n    return {\n      daks: [\n        {\n          owner: 'WHO',\n          repo: 'smart-anc',\n          name: 'Smart Antenatal Care',\n          description: 'Demo DAK for antenatal care guidelines'\n        },\n        {\n          owner: 'WHO', \n          repo: 'smart-tb',\n          name: 'Smart Tuberculosis',\n          description: 'Demo DAK for tuberculosis care guidelines'\n        }\n      ],\n      sampleAssets: {\n        'input/vocabulary/ValueSet-anc-care-codes.json': {\n          type: 'ValueSet',\n          description: 'Demo value set for antenatal care'\n        }\n      }\n    };\n  }\n\n  /**\n   * Get current user type\n   */\n  getUserType() {\n    return this.userType;\n  }\n\n  /**\n   * Get current user information\n   */\n  getCurrentUser() {\n    return this.currentUser;\n  }\n\n  /**\n   * Check if user is authenticated (includes demo users)\n   */\n  isAuthenticated() {\n    return this.userType === USER_TYPES.AUTHENTICATED || this.userType === USER_TYPES.DEMO;\n  }\n\n  /**\n   * Check if user is in demo mode\n   */\n  isDemoUser() {\n    return this.userType === USER_TYPES.DEMO;\n  }\n\n  /**\n   * Check if user is unauthenticated\n   */\n  isUnauthenticated() {\n    return this.userType === USER_TYPES.UNAUTHENTICATED;\n  }\n\n  /**\n   * Get access level for a specific repository and operation\n   */\n  async getRepositoryAccess(owner, repo, branch = 'main') {\n    const cacheKey = `${owner}/${repo}/${branch}`;\n    \n    // Check cache first\n    if (this.permissions.has(cacheKey)) {\n      return this.permissions.get(cacheKey);\n    }\n\n    let access = ACCESS_LEVELS.NONE;\n\n    try {\n      if (this.userType === USER_TYPES.UNAUTHENTICATED) {\n        // Unauthenticated users only get read access to public repos\n        access = ACCESS_LEVELS.READ;\n      } else if (this.userType === USER_TYPES.DEMO) {\n        // Demo users get read access to demo DAKs, but no write access\n        const isDemoDAK = this.isDemoDAK(owner, repo);\n        access = isDemoDAK ? ACCESS_LEVELS.READ : ACCESS_LEVELS.NONE;\n      } else if (this.userType === USER_TYPES.AUTHENTICATED) {\n        // Authenticated users get access based on GitHub permissions\n        const hasReadAccess = await this.checkGitHubReadAccess(owner, repo);\n        const hasWriteAccess = await this.checkGitHubWriteAccess(owner, repo);\n        \n        if (hasWriteAccess) {\n          access = ACCESS_LEVELS.WRITE;\n        } else if (hasReadAccess) {\n          access = ACCESS_LEVELS.READ;\n        }\n      }\n    } catch (error) {\n      this.logger.error('Error checking repository access', { \n        owner, repo, branch, error: error.message \n      });\n      // Default to read access on error for better UX\n      access = ACCESS_LEVELS.READ;\n    }\n\n    // Cache the result\n    this.permissions.set(cacheKey, access);\n    \n    this.logger.debug('Repository access determined', { \n      owner, repo, branch, access, userType: this.userType \n    });\n\n    return access;\n  }\n\n  /**\n   * Check if a repository is a demo DAK\n   */\n  isDemoDAK(owner, repo) {\n    if (!this.currentUser?.demoData?.daks) {\n      return false;\n    }\n    \n    return this.currentUser.demoData.daks.some(dak => \n      dak.owner === owner && dak.repo === repo\n    );\n  }\n\n  /**\n   * Check GitHub read access for authenticated users\n   */\n  async checkGitHubReadAccess(owner, repo) {\n    try {\n      await githubService.getRepository(owner, repo);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Check GitHub write access for authenticated users\n   */\n  async checkGitHubWriteAccess(owner, repo) {\n    try {\n      return await githubService.hasRepositoryWriteAccess(owner, repo);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Check if user can save to GitHub for a specific repository\n   */\n  async canSaveToGitHub(owner, repo, branch = 'main') {\n    // Demo users and unauthenticated users never have GitHub write access\n    if (this.userType !== USER_TYPES.AUTHENTICATED) {\n      return false;\n    }\n\n    const access = await this.getRepositoryAccess(owner, repo, branch);\n    return access === ACCESS_LEVELS.WRITE;\n  }\n\n  /**\n   * Check if user can save to local storage (staging ground)\n   */\n  canSaveLocal() {\n    // All user types can save to local storage\n    return true;\n  }\n\n  /**\n   * Get UI behavior configuration for current user type\n   */\n  getUIBehavior() {\n    const behavior = {\n      showEditFeatures: true,\n      showSaveToGitHub: true,\n      showSaveLocal: true,\n      confirmBeforeSave: true,\n      allowCreateNew: true,\n      showAccessBadges: true\n    };\n\n    switch (this.userType) {\n      case USER_TYPES.UNAUTHENTICATED:\n        return {\n          ...behavior,\n          showEditFeatures: false,\n          showSaveToGitHub: false,\n          allowCreateNew: false\n        };\n      \n      case USER_TYPES.DEMO:\n        return {\n          ...behavior,\n          showSaveToGitHub: false, // Demo users see the UI but get blocked at save\n          allowCreateNew: false\n        };\n      \n      case USER_TYPES.AUTHENTICATED:\n        return behavior;\n      \n      default:\n        return {\n          ...behavior,\n          showEditFeatures: false,\n          showSaveToGitHub: false,\n          allowCreateNew: false\n        };\n    }\n  }\n\n  /**\n   * Get access badge information for a repository\n   */\n  async getAccessBadge(owner, repo, branch = 'main') {\n    const access = await this.getRepositoryAccess(owner, repo, branch);\n    \n    const badges = {\n      [ACCESS_LEVELS.WRITE]: {\n        text: 'Write Access',\n        icon: '✏️',\n        color: 'green',\n        description: 'You can edit and save changes to this repository'\n      },\n      [ACCESS_LEVELS.READ]: {\n        text: 'Read Only',\n        icon: '👁️',\n        color: 'blue', \n        description: 'You can view this repository but cannot save changes'\n      },\n      [ACCESS_LEVELS.NONE]: {\n        text: 'No Access',\n        icon: '🚫',\n        color: 'red',\n        description: 'You do not have access to this repository'\n      }\n    };\n\n    return badges[access] || badges[ACCESS_LEVELS.NONE];\n  }\n\n  /**\n   * Enable demo mode for current user\n   */\n  enableDemoMode() {\n    localStorage.setItem('sgex_demo_mode', 'true');\n    this.initialize(); // Re-initialize to update user type\n  }\n\n  /**\n   * Disable demo mode\n   */\n  disableDemoMode() {\n    localStorage.removeItem('sgex_demo_mode');\n    this.initialize(); // Re-initialize to update user type\n  }\n\n  /**\n   * Clear cached permissions\n   */\n  clearPermissionsCache() {\n    this.permissions.clear();\n    this.logger.debug('Permissions cache cleared');\n  }\n\n  /**\n   * Add listener for user access changes\n   */\n  addListener(callback) {\n    this.listeners.add(callback);\n    \n    // Return unsubscribe function\n    return () => {\n      this.listeners.delete(callback);\n    };\n  }\n\n  /**\n   * Notify all listeners of changes\n   */\n  notifyListeners() {\n    const accessState = {\n      userType: this.userType,\n      currentUser: this.currentUser,\n      isAuthenticated: this.isAuthenticated(),\n      isDemoUser: this.isDemoUser(),\n      uiBehavior: this.getUIBehavior()\n    };\n\n    this.listeners.forEach(callback => {\n      try {\n        callback(accessState);\n      } catch (error) {\n        this.logger.error('Error in access service listener', { error: error.message });\n      }\n    });\n  }\n\n  /**\n   * Handle authentication state changes\n   */\n  handleAuthChange() {\n    this.clearPermissionsCache();\n    this.initialize();\n  }\n}\n\n// Create singleton instance\nconst userAccessService = new UserAccessService();\n\nexport default userAccessService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}