{"ast":null,"code":"import inherits from 'inherits-browser';\nimport CommandInterceptor from '../../../command/CommandInterceptor';\nimport { assign, isString } from 'min-dash';\n\n/**\r\n * @typedef {import('../../../model/Types').Shape} Shape\r\n *\r\n * @typedef {import('../../../util/Types').Rect} Rect\r\n *\r\n * @typedef {import('../../../core/EventBus').default} EventBus\r\n * @typedef {import('../../grid-snapping/GridSnapping').default} GridSnapping\r\n */\n\n/**\r\n * Integrates resizing with grid snapping.\r\n *\r\n * @param {EventBus} eventBus\r\n * @param {GridSnapping} gridSnapping\r\n */\nexport default function ResizeBehavior(eventBus, gridSnapping) {\n  CommandInterceptor.call(this, eventBus);\n  this._gridSnapping = gridSnapping;\n  var self = this;\n  this.preExecute('shape.resize', function (event) {\n    var context = event.context,\n      hints = context.hints || {},\n      autoResize = hints.autoResize;\n    if (!autoResize) {\n      return;\n    }\n    var shape = context.shape,\n      newBounds = context.newBounds;\n    if (isString(autoResize)) {\n      context.newBounds = self.snapComplex(newBounds, autoResize);\n    } else {\n      context.newBounds = self.snapSimple(shape, newBounds);\n    }\n  });\n}\nResizeBehavior.$inject = ['eventBus', 'gridSnapping', 'modeling'];\ninherits(ResizeBehavior, CommandInterceptor);\n\n/**\r\n * Snap width and height in relation to center.\r\n *\r\n * @param {Shape} shape\r\n * @param {Rect} newBounds\r\n *\r\n * @return {Rect} Snapped bounds.\r\n */\nResizeBehavior.prototype.snapSimple = function (shape, newBounds) {\n  var gridSnapping = this._gridSnapping;\n  newBounds.width = gridSnapping.snapValue(newBounds.width, {\n    min: newBounds.width\n  });\n  newBounds.height = gridSnapping.snapValue(newBounds.height, {\n    min: newBounds.height\n  });\n  newBounds.x = shape.x + shape.width / 2 - newBounds.width / 2;\n  newBounds.y = shape.y + shape.height / 2 - newBounds.height / 2;\n  return newBounds;\n};\n\n/**\r\n * Snap x, y, width and height according to given directions.\r\n *\r\n * @param {Rect} newBounds\r\n * @param {string} directions - Directions as {n|w|s|e}.\r\n *\r\n * @return {Rect} Snapped bounds.\r\n */\nResizeBehavior.prototype.snapComplex = function (newBounds, directions) {\n  if (/w|e/.test(directions)) {\n    newBounds = this.snapHorizontally(newBounds, directions);\n  }\n  if (/n|s/.test(directions)) {\n    newBounds = this.snapVertically(newBounds, directions);\n  }\n  return newBounds;\n};\n\n/**\r\n * Snap in one or both directions horizontally.\r\n *\r\n * @param {Rect} newBounds\r\n * @param {string} directions - Directions as {n|w|s|e}.\r\n *\r\n * @return {Rect} Snapped bounds.\r\n */\nResizeBehavior.prototype.snapHorizontally = function (newBounds, directions) {\n  var gridSnapping = this._gridSnapping,\n    west = /w/.test(directions),\n    east = /e/.test(directions);\n  var snappedNewBounds = {};\n  snappedNewBounds.width = gridSnapping.snapValue(newBounds.width, {\n    min: newBounds.width\n  });\n  if (east) {\n    // handle <we>\n    if (west) {\n      snappedNewBounds.x = gridSnapping.snapValue(newBounds.x, {\n        max: newBounds.x\n      });\n      snappedNewBounds.width += gridSnapping.snapValue(newBounds.x - snappedNewBounds.x, {\n        min: newBounds.x - snappedNewBounds.x\n      });\n    }\n\n    // handle <e>\n    else {\n      newBounds.x = newBounds.x + newBounds.width - snappedNewBounds.width;\n    }\n  }\n\n  // assign snapped x and width\n  assign(newBounds, snappedNewBounds);\n  return newBounds;\n};\n\n/**\r\n * Snap in one or both directions vertically.\r\n *\r\n * @param {Rect} newBounds\r\n * @param {string} directions - Directions as {n|w|s|e}.\r\n *\r\n * @return {Rect} Snapped bounds.\r\n */\nResizeBehavior.prototype.snapVertically = function (newBounds, directions) {\n  var gridSnapping = this._gridSnapping,\n    north = /n/.test(directions),\n    south = /s/.test(directions);\n  var snappedNewBounds = {};\n  snappedNewBounds.height = gridSnapping.snapValue(newBounds.height, {\n    min: newBounds.height\n  });\n  if (north) {\n    // handle <ns>\n    if (south) {\n      snappedNewBounds.y = gridSnapping.snapValue(newBounds.y, {\n        max: newBounds.y\n      });\n      snappedNewBounds.height += gridSnapping.snapValue(newBounds.y - snappedNewBounds.y, {\n        min: newBounds.y - snappedNewBounds.y\n      });\n    }\n\n    // handle <n>\n    else {\n      newBounds.y = newBounds.y + newBounds.height - snappedNewBounds.height;\n    }\n  }\n\n  // assign snapped y and height\n  assign(newBounds, snappedNewBounds);\n  return newBounds;\n};","map":{"version":3,"names":["inherits","CommandInterceptor","assign","isString","ResizeBehavior","eventBus","gridSnapping","call","_gridSnapping","self","preExecute","event","context","hints","autoResize","shape","newBounds","snapComplex","snapSimple","$inject","prototype","width","snapValue","min","height","x","y","directions","test","snapHorizontally","snapVertically","west","east","snappedNewBounds","max","north","south"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/grid-snapping/behavior/ResizeBehavior.js"],"sourcesContent":["import inherits from 'inherits-browser';\r\n\r\nimport CommandInterceptor from '../../../command/CommandInterceptor';\r\n\r\nimport {\r\n  assign,\r\n  isString\r\n} from 'min-dash';\r\n\r\n/**\r\n * @typedef {import('../../../model/Types').Shape} Shape\r\n *\r\n * @typedef {import('../../../util/Types').Rect} Rect\r\n *\r\n * @typedef {import('../../../core/EventBus').default} EventBus\r\n * @typedef {import('../../grid-snapping/GridSnapping').default} GridSnapping\r\n */\r\n\r\n/**\r\n * Integrates resizing with grid snapping.\r\n *\r\n * @param {EventBus} eventBus\r\n * @param {GridSnapping} gridSnapping\r\n */\r\nexport default function ResizeBehavior(eventBus, gridSnapping) {\r\n  CommandInterceptor.call(this, eventBus);\r\n\r\n  this._gridSnapping = gridSnapping;\r\n\r\n  var self = this;\r\n\r\n  this.preExecute('shape.resize', function(event) {\r\n    var context = event.context,\r\n        hints = context.hints || {},\r\n        autoResize = hints.autoResize;\r\n\r\n    if (!autoResize) {\r\n      return;\r\n    }\r\n\r\n    var shape = context.shape,\r\n        newBounds = context.newBounds;\r\n\r\n    if (isString(autoResize)) {\r\n      context.newBounds = self.snapComplex(newBounds, autoResize);\r\n    } else {\r\n      context.newBounds = self.snapSimple(shape, newBounds);\r\n    }\r\n  });\r\n}\r\n\r\nResizeBehavior.$inject = [\r\n  'eventBus',\r\n  'gridSnapping',\r\n  'modeling'\r\n];\r\n\r\ninherits(ResizeBehavior, CommandInterceptor);\r\n\r\n/**\r\n * Snap width and height in relation to center.\r\n *\r\n * @param {Shape} shape\r\n * @param {Rect} newBounds\r\n *\r\n * @return {Rect} Snapped bounds.\r\n */\r\nResizeBehavior.prototype.snapSimple = function(shape, newBounds) {\r\n  var gridSnapping = this._gridSnapping;\r\n\r\n  newBounds.width = gridSnapping.snapValue(newBounds.width, {\r\n    min: newBounds.width\r\n  });\r\n\r\n  newBounds.height = gridSnapping.snapValue(newBounds.height, {\r\n    min: newBounds.height\r\n  });\r\n\r\n  newBounds.x = shape.x + (shape.width / 2) - (newBounds.width / 2);\r\n  newBounds.y = shape.y + (shape.height / 2) - (newBounds.height / 2);\r\n\r\n  return newBounds;\r\n};\r\n\r\n/**\r\n * Snap x, y, width and height according to given directions.\r\n *\r\n * @param {Rect} newBounds\r\n * @param {string} directions - Directions as {n|w|s|e}.\r\n *\r\n * @return {Rect} Snapped bounds.\r\n */\r\nResizeBehavior.prototype.snapComplex = function(newBounds, directions) {\r\n  if (/w|e/.test(directions)) {\r\n    newBounds = this.snapHorizontally(newBounds, directions);\r\n  }\r\n\r\n  if (/n|s/.test(directions)) {\r\n    newBounds = this.snapVertically(newBounds, directions);\r\n  }\r\n\r\n  return newBounds;\r\n};\r\n\r\n/**\r\n * Snap in one or both directions horizontally.\r\n *\r\n * @param {Rect} newBounds\r\n * @param {string} directions - Directions as {n|w|s|e}.\r\n *\r\n * @return {Rect} Snapped bounds.\r\n */\r\nResizeBehavior.prototype.snapHorizontally = function(newBounds, directions) {\r\n  var gridSnapping = this._gridSnapping,\r\n      west = /w/.test(directions),\r\n      east = /e/.test(directions);\r\n\r\n  var snappedNewBounds = {};\r\n\r\n  snappedNewBounds.width = gridSnapping.snapValue(newBounds.width, {\r\n    min: newBounds.width\r\n  });\r\n\r\n  if (east) {\r\n\r\n    // handle <we>\r\n    if (west) {\r\n      snappedNewBounds.x = gridSnapping.snapValue(newBounds.x, {\r\n        max: newBounds.x\r\n      });\r\n\r\n      snappedNewBounds.width += gridSnapping.snapValue(newBounds.x - snappedNewBounds.x, {\r\n        min: newBounds.x - snappedNewBounds.x\r\n      });\r\n    }\r\n\r\n    // handle <e>\r\n    else {\r\n      newBounds.x = newBounds.x + newBounds.width - snappedNewBounds.width;\r\n    }\r\n  }\r\n\r\n  // assign snapped x and width\r\n  assign(newBounds, snappedNewBounds);\r\n\r\n  return newBounds;\r\n};\r\n\r\n/**\r\n * Snap in one or both directions vertically.\r\n *\r\n * @param {Rect} newBounds\r\n * @param {string} directions - Directions as {n|w|s|e}.\r\n *\r\n * @return {Rect} Snapped bounds.\r\n */\r\nResizeBehavior.prototype.snapVertically = function(newBounds, directions) {\r\n  var gridSnapping = this._gridSnapping,\r\n      north = /n/.test(directions),\r\n      south = /s/.test(directions);\r\n\r\n  var snappedNewBounds = {};\r\n\r\n  snappedNewBounds.height = gridSnapping.snapValue(newBounds.height, {\r\n    min: newBounds.height\r\n  });\r\n\r\n  if (north) {\r\n\r\n    // handle <ns>\r\n    if (south) {\r\n      snappedNewBounds.y = gridSnapping.snapValue(newBounds.y, {\r\n        max: newBounds.y\r\n      });\r\n\r\n      snappedNewBounds.height += gridSnapping.snapValue(newBounds.y - snappedNewBounds.y, {\r\n        min: newBounds.y - snappedNewBounds.y\r\n      });\r\n    }\r\n\r\n    // handle <n>\r\n    else {\r\n      newBounds.y = newBounds.y + newBounds.height - snappedNewBounds.height;\r\n    }\r\n  }\r\n\r\n  // assign snapped y and height\r\n  assign(newBounds, snappedNewBounds);\r\n\r\n  return newBounds;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}