{"ast":null,"code":"import React,{useState,useEffect}from'react';import userAccessService from'../../services/userAccessService';import'./AccessBadge.css';/**\n * Access Badge Component\n * \n * Displays user's access level (read/write) for the current repository\n * Shows in the title bar with dynamic styling based on permissions\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AccessBadge=_ref=>{let{owner,repo,branch='main',className=''}=_ref;const[badge,setBadge]=useState(null);const[loading,setLoading]=useState(true);const[showTooltip,setShowTooltip]=useState(false);useEffect(()=>{let mounted=true;const loadBadge=async()=>{if(!owner||!repo){setLoading(false);return;}try{setLoading(true);const badgeInfo=await userAccessService.getAccessBadge(owner,repo,branch);if(mounted){setBadge(badgeInfo);setLoading(false);}}catch(error){console.error('Error loading access badge:',error);if(mounted){setBadge({text:'Unknown',icon:'❓',color:'gray',description:'Unable to determine access level'});setLoading(false);}}};loadBadge();// Listen for access changes\nconst unsubscribe=userAccessService.addListener(()=>{loadBadge();});return()=>{mounted=false;unsubscribe();};},[owner,repo,branch]);if(loading){return/*#__PURE__*/_jsxs(\"div\",{className:\"access-badge loading \".concat(className),children:[/*#__PURE__*/_jsx(\"span\",{className:\"access-badge-icon\",children:\"\\u23F3\"}),/*#__PURE__*/_jsx(\"span\",{className:\"access-badge-text\",children:\"Loading...\"})]});}if(!badge){return null;}return/*#__PURE__*/_jsxs(\"div\",{className:\"access-badge \".concat(badge.color,\" \").concat(className),onMouseEnter:()=>setShowTooltip(true),onMouseLeave:()=>setShowTooltip(false),title:badge.description,children:[/*#__PURE__*/_jsx(\"span\",{className:\"access-badge-icon\",role:\"img\",\"aria-label\":badge.text,children:badge.icon}),/*#__PURE__*/_jsx(\"span\",{className:\"access-badge-text\",children:badge.text}),showTooltip&&/*#__PURE__*/_jsx(\"div\",{className:\"access-badge-tooltip\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"tooltip-content\",children:[/*#__PURE__*/_jsx(\"strong\",{children:badge.text}),/*#__PURE__*/_jsx(\"p\",{children:badge.description}),repo&&/*#__PURE__*/_jsxs(\"small\",{children:[\"Repository: \",owner,\"/\",repo]})]})})]});};export default AccessBadge;","map":{"version":3,"names":["React","useState","useEffect","userAccessService","jsx","_jsx","jsxs","_jsxs","AccessBadge","_ref","owner","repo","branch","className","badge","setBadge","loading","setLoading","showTooltip","setShowTooltip","mounted","loadBadge","badgeInfo","getAccessBadge","error","console","text","icon","color","description","unsubscribe","addListener","concat","children","onMouseEnter","onMouseLeave","title","role"],"sources":["/home/runner/work/sgex/sgex/src/components/framework/AccessBadge.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport userAccessService from '../../services/userAccessService';\nimport './AccessBadge.css';\n\n/**\n * Access Badge Component\n * \n * Displays user's access level (read/write) for the current repository\n * Shows in the title bar with dynamic styling based on permissions\n */\nconst AccessBadge = ({ owner, repo, branch = 'main', className = '' }) => {\n  const [badge, setBadge] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const loadBadge = async () => {\n      if (!owner || !repo) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        const badgeInfo = await userAccessService.getAccessBadge(owner, repo, branch);\n        \n        if (mounted) {\n          setBadge(badgeInfo);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Error loading access badge:', error);\n        if (mounted) {\n          setBadge({\n            text: 'Unknown',\n            icon: '❓',\n            color: 'gray',\n            description: 'Unable to determine access level'\n          });\n          setLoading(false);\n        }\n      }\n    };\n\n    loadBadge();\n\n    // Listen for access changes\n    const unsubscribe = userAccessService.addListener(() => {\n      loadBadge();\n    });\n\n    return () => {\n      mounted = false;\n      unsubscribe();\n    };\n  }, [owner, repo, branch]);\n\n  if (loading) {\n    return (\n      <div className={`access-badge loading ${className}`}>\n        <span className=\"access-badge-icon\">⏳</span>\n        <span className=\"access-badge-text\">Loading...</span>\n      </div>\n    );\n  }\n\n  if (!badge) {\n    return null;\n  }\n\n  return (\n    <div \n      className={`access-badge ${badge.color} ${className}`}\n      onMouseEnter={() => setShowTooltip(true)}\n      onMouseLeave={() => setShowTooltip(false)}\n      title={badge.description}\n    >\n      <span className=\"access-badge-icon\" role=\"img\" aria-label={badge.text}>\n        {badge.icon}\n      </span>\n      <span className=\"access-badge-text\">\n        {badge.text}\n      </span>\n      \n      {showTooltip && (\n        <div className=\"access-badge-tooltip\">\n          <div className=\"tooltip-content\">\n            <strong>{badge.text}</strong>\n            <p>{badge.description}</p>\n            {repo && (\n              <small>Repository: {owner}/{repo}</small>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AccessBadge;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}