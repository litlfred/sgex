{"ast":null,"code":"import React,{useState,useEffect}from'react';import githubService from'../services/githubService';import'./PreviewBadge.css';/**\n * PreviewBadge component that displays when the app is deployed from a non-main branch\n * Shows branch name and links to the associated PR\n */import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const PreviewBadge=()=>{const[branchInfo,setBranchInfo]=useState(null);const[prInfo,setPrInfo]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const detectBranchAndPR=async()=>{try{setLoading(true);setError(null);// Detect current branch from environment or URL\nconst currentBranch=getCurrentBranch();if(!currentBranch||currentBranch==='main'){// Not a preview branch, don't show badge\nsetLoading(false);return;}setBranchInfo({name:currentBranch,safeName:currentBranch.replace(/\\//g,'-')});// Try to fetch PR information for this branch\ntry{const prData=await fetchPRForBranch(currentBranch);if(prData){setPrInfo(prData);}}catch(prError){console.debug('Could not fetch PR info:',prError);// Continue without PR info - still show branch badge\n}setLoading(false);}catch(err){console.error('Error detecting branch:',err);setError(err.message);setLoading(false);}};detectBranchAndPR();},[]);const getCurrentBranch=()=>{// First try environment variable (set during build)\nif(process.env.REACT_APP_GITHUB_REF_NAME){return process.env.REACT_APP_GITHUB_REF_NAME;}// Fallback: detect from URL path\nconst path=window.location.pathname;// Match pattern: /sgex/{branch-name}/\nconst match=path.match(/^\\/sgex\\/([^/]+)\\//);if(match&&match[1]!=='main'){const safeBranchName=match[1];// Convert safe branch name back to original branch name\n// This handles the common case where slashes are converted to dashes\n// Note: This is a heuristic and may not be perfect for all edge cases\nlet branchName=safeBranchName;// Common patterns: feature-name -> feature/name, fix-123 -> fix/123\nif(safeBranchName.includes('-')&&!safeBranchName.startsWith('v')&&!safeBranchName.match(/^\\d/)){// Try to detect if this looks like a feature branch\nif(safeBranchName.match(/^(feature|fix|hotfix|bugfix|chore|docs|style|refactor|test)-/)){branchName=safeBranchName.replace(/^([^-]+)-/,'$1/');}}return branchName;}return null;};const fetchPRForBranch=async branchName=>{try{// Get current repository context if available\n// For now, we'll use the main repository\nconst owner='litlfred';const repo='sgex';// Get PR for this specific branch\nconst pr=await githubService.getPullRequestForBranch(owner,repo,branchName);return pr;}catch(error){console.debug('Failed to fetch PR info:',error);return null;}};const handleBadgeClick=()=>{if(prInfo&&prInfo.html_url){window.open(prInfo.html_url,'_blank');}};// Don't render anything if loading, error, or not a preview branch\nif(loading||error||!branchInfo){return null;}return/*#__PURE__*/_jsx(\"div\",{className:\"preview-badge-container\",children:/*#__PURE__*/_jsx(\"div\",{className:`preview-badge ${prInfo?'clickable':''}`,onClick:prInfo?handleBadgeClick:undefined,title:prInfo?`Click to view PR: ${prInfo.title}`:`Preview branch: ${branchInfo.name}`,children:/*#__PURE__*/_jsxs(\"div\",{className:\"badge-content\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"badge-label\",children:\"Preview:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"badge-branch\",children:branchInfo.name}),prInfo&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"badge-separator\",children:\"|\"}),/*#__PURE__*/_jsx(\"span\",{className:\"badge-pr-title\",children:prInfo.title})]})]})})});};export default PreviewBadge;","map":{"version":3,"names":["React","useState","useEffect","githubService","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","PreviewBadge","branchInfo","setBranchInfo","prInfo","setPrInfo","loading","setLoading","error","setError","detectBranchAndPR","currentBranch","getCurrentBranch","name","safeName","replace","prData","fetchPRForBranch","prError","console","debug","err","message","process","env","REACT_APP_GITHUB_REF_NAME","path","window","location","pathname","match","safeBranchName","branchName","includes","startsWith","owner","repo","pr","getPullRequestForBranch","handleBadgeClick","html_url","open","className","children","onClick","undefined","title"],"sources":["/home/runner/work/sgex/sgex/src/components/PreviewBadge.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport githubService from '../services/githubService';\nimport './PreviewBadge.css';\n\n/**\n * PreviewBadge component that displays when the app is deployed from a non-main branch\n * Shows branch name and links to the associated PR\n */\nconst PreviewBadge = () => {\n  const [branchInfo, setBranchInfo] = useState(null);\n  const [prInfo, setPrInfo] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const detectBranchAndPR = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Detect current branch from environment or URL\n        const currentBranch = getCurrentBranch();\n        \n        if (!currentBranch || currentBranch === 'main') {\n          // Not a preview branch, don't show badge\n          setLoading(false);\n          return;\n        }\n\n        setBranchInfo({\n          name: currentBranch,\n          safeName: currentBranch.replace(/\\//g, '-')\n        });\n\n        // Try to fetch PR information for this branch\n        try {\n          const prData = await fetchPRForBranch(currentBranch);\n          if (prData) {\n            setPrInfo(prData);\n          }\n        } catch (prError) {\n          console.debug('Could not fetch PR info:', prError);\n          // Continue without PR info - still show branch badge\n        }\n\n        setLoading(false);\n      } catch (err) {\n        console.error('Error detecting branch:', err);\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    detectBranchAndPR();\n  }, []);\n\n  const getCurrentBranch = () => {\n    // First try environment variable (set during build)\n    if (process.env.REACT_APP_GITHUB_REF_NAME) {\n      return process.env.REACT_APP_GITHUB_REF_NAME;\n    }\n    \n    // Fallback: detect from URL path\n    const path = window.location.pathname;\n    \n    // Match pattern: /sgex/{branch-name}/\n    const match = path.match(/^\\/sgex\\/([^/]+)\\//);\n    if (match && match[1] !== 'main') {\n      const safeBranchName = match[1];\n      \n      // Convert safe branch name back to original branch name\n      // This handles the common case where slashes are converted to dashes\n      // Note: This is a heuristic and may not be perfect for all edge cases\n      let branchName = safeBranchName;\n      \n      // Common patterns: feature-name -> feature/name, fix-123 -> fix/123\n      if (safeBranchName.includes('-') && !safeBranchName.startsWith('v') && !safeBranchName.match(/^\\d/)) {\n        // Try to detect if this looks like a feature branch\n        if (safeBranchName.match(/^(feature|fix|hotfix|bugfix|chore|docs|style|refactor|test)-/)) {\n          branchName = safeBranchName.replace(/^([^-]+)-/, '$1/');\n        }\n      }\n      \n      return branchName;\n    }\n\n    return null;\n  };\n\n  const fetchPRForBranch = async (branchName) => {\n    try {\n      // Get current repository context if available\n      // For now, we'll use the main repository\n      const owner = 'litlfred';\n      const repo = 'sgex';\n\n      // Get PR for this specific branch\n      const pr = await githubService.getPullRequestForBranch(owner, repo, branchName);\n      \n      return pr;\n    } catch (error) {\n      console.debug('Failed to fetch PR info:', error);\n      return null;\n    }\n  };\n\n  const handleBadgeClick = () => {\n    if (prInfo && prInfo.html_url) {\n      window.open(prInfo.html_url, '_blank');\n    }\n  };\n\n  // Don't render anything if loading, error, or not a preview branch\n  if (loading || error || !branchInfo) {\n    return null;\n  }\n\n  return (\n    <div className=\"preview-badge-container\">\n      <div \n        className={`preview-badge ${prInfo ? 'clickable' : ''}`}\n        onClick={prInfo ? handleBadgeClick : undefined}\n        title={prInfo ? `Click to view PR: ${prInfo.title}` : `Preview branch: ${branchInfo.name}`}\n      >\n        <div className=\"badge-content\">\n          <span className=\"badge-label\">Preview:</span>\n          <span className=\"badge-branch\">{branchInfo.name}</span>\n          {prInfo && (\n            <>\n              <span className=\"badge-separator\">|</span>\n              <span className=\"badge-pr-title\">{prInfo.title}</span>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PreviewBadge;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}