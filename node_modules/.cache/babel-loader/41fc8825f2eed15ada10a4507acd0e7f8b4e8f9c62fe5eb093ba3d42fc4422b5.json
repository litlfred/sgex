{"ast":null,"code":"import React,{Suspense}from'react';import{Route}from'react-router-dom';/**\n * SGEX Lazy Route Generation Utility\n * \n * This utility generates React Router routes dynamically using lazy loading\n * based on the route configuration loaded from JSON files.\n * \n * Features:\n * 1. Lazy loading of all components using React.lazy()\n * 2. Automatic Suspense boundaries with loading fallbacks\n * 3. Dynamic route generation from configuration\n * 4. Support for different deployment types (main vs deploy)\n * 5. DAK component pattern generation (/{component}/:user/:repo/:branch/*)\n * \n * Usage:\n *   const routes = generateLazyRoutes();\n *   return <Routes>{routes}</Routes>\n */// Cache for lazy-loaded components to avoid re-creating them\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const lazyComponentCache=new Map();/**\n * Create a lazy-loaded component with Suspense boundary\n * @param {string} componentName - Name of the component for debugging\n * @returns {React.Component} Lazy component wrapped in Suspense\n */function createLazyComponent(componentName){const cacheKey=componentName;if(lazyComponentCache.has(cacheKey)){return lazyComponentCache.get(cacheKey);}// Create lazy component with explicit imports to avoid webpack warnings\nlet LazyComponent;switch(componentName){case'WelcomePage':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/WelcomePage'));break;case'SelectProfilePage':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/SelectProfilePage'));break;case'DAKActionSelection':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/DAKActionSelection'));break;case'DAKSelection':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/DAKSelection'));break;case'OrganizationSelection':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/OrganizationSelection'));break;case'DAKConfiguration':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/DAKConfiguration'));break;case'RepositorySelection':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/RepositorySelection'));break;case'DashboardRedirect':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/DashboardRedirect'));break;case'TestDashboard':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/TestDashboard'));break;case'BPMNViewerTestComponent':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/BPMNViewerTestComponent'));break;case'DocumentationViewer':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/DocumentationViewer'));break;case'PagesManager':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/PagesManager'));break;case'LandingPageWithFramework':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/LandingPageWithFramework'));break;case'TestDocumentationPage':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/TestDocumentationPage'));break;case'AssetEditorTest':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/AssetEditorTest'));break;case'BranchListingPage':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/BranchListingPage'));break;case'NotFound':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/NotFound'));break;// DAK Components\ncase'DAKDashboardWithFramework':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/DAKDashboardWithFramework'));break;case'TestingViewer':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/TestingViewer'));break;case'CoreDataDictionaryViewer':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/CoreDataDictionaryViewer'));break;case'ComponentEditor':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/ComponentEditor'));break;case'ActorEditor':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/ActorEditor'));break;case'BusinessProcessSelection':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/BusinessProcessSelection'));break;case'BPMNEditor':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/BPMNEditor'));break;case'BPMNViewer':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/BPMNViewer'));break;case'BPMNSource':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/BPMNSource'));break;case'DecisionSupportLogicView':LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/DecisionSupportLogicView'));break;default:console.warn(`Unknown component ${componentName}, using fallback`);LazyComponent=/*#__PURE__*/React.lazy(()=>import('../components/NotFound'));break;}// Wrap with Suspense and error boundary\nconst SuspenseWrapper=props=>/*#__PURE__*/_jsx(Suspense,{fallback:/*#__PURE__*/_jsxs(\"div\",{className:\"loading-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Loading \",componentName,\"...\"]})]}),children:/*#__PURE__*/_jsx(LazyComponent,{...props})});// Set display name for debugging\nSuspenseWrapper.displayName=`Lazy(${componentName})`;lazyComponentCache.set(cacheKey,SuspenseWrapper);return SuspenseWrapper;}/**\n * Generate standard DAK component routes (/{component}/:user/:repo/:branch/*)\n * @param {string} routeName - DAK route name (e.g., 'dashboard')\n * @param {Object} dakComponent - DAK component configuration\n * @returns {Array} Array of Route elements\n */function generateDAKRoutes(routeName,dakComponent){const componentName=dakComponent.component;const LazyComponent=createLazyComponent(componentName);const basePath=`/${routeName}`;return[/*#__PURE__*/_jsx(Route,{path:basePath,element:/*#__PURE__*/_jsx(LazyComponent,{})},`${routeName}-base`),/*#__PURE__*/_jsx(Route,{path:`${basePath}/:user/:repo`,element:/*#__PURE__*/_jsx(LazyComponent,{})},`${routeName}-user-repo`),/*#__PURE__*/_jsx(Route,{path:`${basePath}/:user/:repo/:branch`,element:/*#__PURE__*/_jsx(LazyComponent,{})},`${routeName}-user-repo-branch`),/*#__PURE__*/_jsx(Route,{path:`${basePath}/:user/:repo/:branch/*`,element:/*#__PURE__*/_jsx(LazyComponent,{})},`${routeName}-user-repo-branch-asset`)];}/**\n * Generate routes for standard components\n * @param {string} componentName - Component name\n * @param {Object} componentConfig - Component configuration with routes\n * @returns {Array} Array of Route elements\n */function generateStandardRoutes(componentName,componentConfig){const LazyComponent=createLazyComponent(componentName);return componentConfig.routes.map((routeConfig,index)=>/*#__PURE__*/_jsx(Route,{path:routeConfig.path,element:/*#__PURE__*/_jsx(LazyComponent,{})},`${componentName}-${index}`));}/**\n * Generate all lazy-loaded routes based on configuration\n * @returns {Array} Array of all Route elements\n */export function generateLazyRoutes(){const config=window.getSGEXRouteConfig();if(!config){console.warn('SGEX route configuration not loaded, falling back to minimal routes');return[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"})},\"fallback-home\"),/*#__PURE__*/_jsx(Route,{path:\"*\",element:/*#__PURE__*/_jsx(\"div\",{children:\"Page not found\"})},\"fallback-404\")];}const routes=[];// Generate DAK component routes (main deployment only)\nif(config.deployType==='main'&&config.dakComponents){Object.entries(config.dakComponents).forEach(_ref=>{let[routeName,dakComponent]=_ref;routes.push(...generateDAKRoutes(routeName,dakComponent));});}// Generate standard component routes\nif(config.standardComponents){Object.entries(config.standardComponents).forEach(_ref2=>{let[componentName,componentConfig]=_ref2;routes.push(...generateStandardRoutes(componentName,componentConfig));});}// Generate deploy-specific component routes\nif(config.components){Object.entries(config.components).forEach(_ref3=>{let[componentName,componentConfig]=_ref3;routes.push(...generateStandardRoutes(componentName,componentConfig));});}// Generate test routes (main deployment only)\nif(config.deployType==='main'&&config.testRoutes){config.testRoutes.forEach((testRoute,index)=>{const LazyComponent=createLazyComponent('DAKDashboardWithFramework');// Use dashboard component for test routes\nroutes.push(/*#__PURE__*/_jsx(Route,{path:testRoute.path,element:/*#__PURE__*/_jsx(LazyComponent,{})},`test-route-${index}`));});}return routes;}/**\n * Get list of valid DAK components for URL validation\n * @returns {Array} Array of valid DAK component names\n */export function getValidDAKComponents(){const config=window.getSGEXRouteConfig();return config?config.getDAKComponentNames():[];}/**\n * Check if a component is valid for routing\n * @param {string} componentName - Component name to validate\n * @returns {boolean} True if component is valid\n */export function isValidComponent(componentName){const config=window.getSGEXRouteConfig();return config?config.isValidComponent(componentName):false;}/**\n * Utility functions for lazy route generation\n */const LazyRouteUtils={generateLazyRoutes,getValidDAKComponents,isValidComponent};export default LazyRouteUtils;","map":{"version":3,"names":["React","Suspense","Route","jsx","_jsx","jsxs","_jsxs","lazyComponentCache","Map","createLazyComponent","componentName","cacheKey","has","get","LazyComponent","lazy","console","warn","SuspenseWrapper","props","fallback","className","children","displayName","set","generateDAKRoutes","routeName","dakComponent","component","basePath","path","element","generateStandardRoutes","componentConfig","routes","map","routeConfig","index","generateLazyRoutes","config","window","getSGEXRouteConfig","deployType","dakComponents","Object","entries","forEach","_ref","push","standardComponents","_ref2","components","_ref3","testRoutes","testRoute","getValidDAKComponents","getDAKComponentNames","isValidComponent","LazyRouteUtils"],"sources":["/home/runner/work/sgex/sgex/src/utils/lazyRouteUtils.js"],"sourcesContent":["import React, { Suspense } from 'react';\nimport { Route } from 'react-router-dom';\n\n/**\n * SGEX Lazy Route Generation Utility\n * \n * This utility generates React Router routes dynamically using lazy loading\n * based on the route configuration loaded from JSON files.\n * \n * Features:\n * 1. Lazy loading of all components using React.lazy()\n * 2. Automatic Suspense boundaries with loading fallbacks\n * 3. Dynamic route generation from configuration\n * 4. Support for different deployment types (main vs deploy)\n * 5. DAK component pattern generation (/{component}/:user/:repo/:branch/*)\n * \n * Usage:\n *   const routes = generateLazyRoutes();\n *   return <Routes>{routes}</Routes>\n */\n\n// Cache for lazy-loaded components to avoid re-creating them\nconst lazyComponentCache = new Map();\n\n/**\n * Create a lazy-loaded component with Suspense boundary\n * @param {string} componentName - Name of the component for debugging\n * @returns {React.Component} Lazy component wrapped in Suspense\n */\nfunction createLazyComponent(componentName) {\n  const cacheKey = componentName;\n  \n  if (lazyComponentCache.has(cacheKey)) {\n    return lazyComponentCache.get(cacheKey);\n  }\n\n  // Create lazy component with explicit imports to avoid webpack warnings\n  let LazyComponent;\n  \n  switch (componentName) {\n    case 'WelcomePage':\n      LazyComponent = React.lazy(() => import('../components/WelcomePage'));\n      break;\n    case 'SelectProfilePage':\n      LazyComponent = React.lazy(() => import('../components/SelectProfilePage'));\n      break;\n    case 'DAKActionSelection':\n      LazyComponent = React.lazy(() => import('../components/DAKActionSelection'));\n      break;\n    case 'DAKSelection':\n      LazyComponent = React.lazy(() => import('../components/DAKSelection'));\n      break;\n    case 'OrganizationSelection':\n      LazyComponent = React.lazy(() => import('../components/OrganizationSelection'));\n      break;\n    case 'DAKConfiguration':\n      LazyComponent = React.lazy(() => import('../components/DAKConfiguration'));\n      break;\n    case 'RepositorySelection':\n      LazyComponent = React.lazy(() => import('../components/RepositorySelection'));\n      break;\n    case 'DashboardRedirect':\n      LazyComponent = React.lazy(() => import('../components/DashboardRedirect'));\n      break;\n    case 'TestDashboard':\n      LazyComponent = React.lazy(() => import('../components/TestDashboard'));\n      break;\n    case 'BPMNViewerTestComponent':\n      LazyComponent = React.lazy(() => import('../components/BPMNViewerTestComponent'));\n      break;\n    case 'DocumentationViewer':\n      LazyComponent = React.lazy(() => import('../components/DocumentationViewer'));\n      break;\n    case 'PagesManager':\n      LazyComponent = React.lazy(() => import('../components/PagesManager'));\n      break;\n    case 'LandingPageWithFramework':\n      LazyComponent = React.lazy(() => import('../components/LandingPageWithFramework'));\n      break;\n    case 'TestDocumentationPage':\n      LazyComponent = React.lazy(() => import('../components/TestDocumentationPage'));\n      break;\n    case 'AssetEditorTest':\n      LazyComponent = React.lazy(() => import('../components/AssetEditorTest'));\n      break;\n    case 'BranchListingPage':\n      LazyComponent = React.lazy(() => import('../components/BranchListingPage'));\n      break;\n    case 'NotFound':\n      LazyComponent = React.lazy(() => import('../components/NotFound'));\n      break;\n    \n    // DAK Components\n    case 'DAKDashboardWithFramework':\n      LazyComponent = React.lazy(() => import('../components/DAKDashboardWithFramework'));\n      break;\n    case 'TestingViewer':\n      LazyComponent = React.lazy(() => import('../components/TestingViewer'));\n      break;\n    case 'CoreDataDictionaryViewer':\n      LazyComponent = React.lazy(() => import('../components/CoreDataDictionaryViewer'));\n      break;\n    case 'ComponentEditor':\n      LazyComponent = React.lazy(() => import('../components/ComponentEditor'));\n      break;\n    case 'ActorEditor':\n      LazyComponent = React.lazy(() => import('../components/ActorEditor'));\n      break;\n    case 'BusinessProcessSelection':\n      LazyComponent = React.lazy(() => import('../components/BusinessProcessSelection'));\n      break;\n    case 'BPMNEditor':\n      LazyComponent = React.lazy(() => import('../components/BPMNEditor'));\n      break;\n    case 'BPMNViewer':\n      LazyComponent = React.lazy(() => import('../components/BPMNViewer'));\n      break;\n    case 'BPMNSource':\n      LazyComponent = React.lazy(() => import('../components/BPMNSource'));\n      break;\n    case 'DecisionSupportLogicView':\n      LazyComponent = React.lazy(() => import('../components/DecisionSupportLogicView'));\n      break;\n    \n    default:\n      console.warn(`Unknown component ${componentName}, using fallback`);\n      LazyComponent = React.lazy(() => import('../components/NotFound'));\n      break;\n  }\n  \n  // Wrap with Suspense and error boundary\n  const SuspenseWrapper = (props) => (\n    <Suspense fallback={\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading {componentName}...</p>\n      </div>\n    }>\n      <LazyComponent {...props} />\n    </Suspense>\n  );\n  \n  // Set display name for debugging\n  SuspenseWrapper.displayName = `Lazy(${componentName})`;\n  \n  lazyComponentCache.set(cacheKey, SuspenseWrapper);\n  return SuspenseWrapper;\n}\n\n/**\n * Generate standard DAK component routes (/{component}/:user/:repo/:branch/*)\n * @param {string} routeName - DAK route name (e.g., 'dashboard')\n * @param {Object} dakComponent - DAK component configuration\n * @returns {Array} Array of Route elements\n */\nfunction generateDAKRoutes(routeName, dakComponent) {\n  const componentName = dakComponent.component;\n  const LazyComponent = createLazyComponent(componentName);\n  \n  const basePath = `/${routeName}`;\n  \n  return [\n    <Route key={`${routeName}-base`} path={basePath} element={<LazyComponent />} />,\n    <Route key={`${routeName}-user-repo`} path={`${basePath}/:user/:repo`} element={<LazyComponent />} />,\n    <Route key={`${routeName}-user-repo-branch`} path={`${basePath}/:user/:repo/:branch`} element={<LazyComponent />} />,\n    <Route key={`${routeName}-user-repo-branch-asset`} path={`${basePath}/:user/:repo/:branch/*`} element={<LazyComponent />} />\n  ];\n}\n\n/**\n * Generate routes for standard components\n * @param {string} componentName - Component name\n * @param {Object} componentConfig - Component configuration with routes\n * @returns {Array} Array of Route elements\n */\nfunction generateStandardRoutes(componentName, componentConfig) {\n  const LazyComponent = createLazyComponent(componentName);\n  \n  return componentConfig.routes.map((routeConfig, index) => (\n    <Route \n      key={`${componentName}-${index}`}\n      path={routeConfig.path}\n      element={<LazyComponent />}\n    />\n  ));\n}\n\n/**\n * Generate all lazy-loaded routes based on configuration\n * @returns {Array} Array of all Route elements\n */\nexport function generateLazyRoutes() {\n  const config = window.getSGEXRouteConfig();\n  \n  if (!config) {\n    console.warn('SGEX route configuration not loaded, falling back to minimal routes');\n    return [\n      <Route key=\"fallback-home\" path=\"/\" element={<div>Loading...</div>} />,\n      <Route key=\"fallback-404\" path=\"*\" element={<div>Page not found</div>} />\n    ];\n  }\n\n  const routes = [];\n\n  // Generate DAK component routes (main deployment only)\n  if (config.deployType === 'main' && config.dakComponents) {\n    Object.entries(config.dakComponents).forEach(([routeName, dakComponent]) => {\n      routes.push(...generateDAKRoutes(routeName, dakComponent));\n    });\n  }\n\n  // Generate standard component routes\n  if (config.standardComponents) {\n    Object.entries(config.standardComponents).forEach(([componentName, componentConfig]) => {\n      routes.push(...generateStandardRoutes(componentName, componentConfig));\n    });\n  }\n\n  // Generate deploy-specific component routes\n  if (config.components) {\n    Object.entries(config.components).forEach(([componentName, componentConfig]) => {\n      routes.push(...generateStandardRoutes(componentName, componentConfig));\n    });\n  }\n\n  // Generate test routes (main deployment only)\n  if (config.deployType === 'main' && config.testRoutes) {\n    config.testRoutes.forEach((testRoute, index) => {\n      const LazyComponent = createLazyComponent('DAKDashboardWithFramework'); // Use dashboard component for test routes\n      routes.push(\n        <Route \n          key={`test-route-${index}`}\n          path={testRoute.path}\n          element={<LazyComponent />}\n        />\n      );\n    });\n  }\n\n  return routes;\n}\n\n/**\n * Get list of valid DAK components for URL validation\n * @returns {Array} Array of valid DAK component names\n */\nexport function getValidDAKComponents() {\n  const config = window.getSGEXRouteConfig();\n  return config ? config.getDAKComponentNames() : [];\n}\n\n/**\n * Check if a component is valid for routing\n * @param {string} componentName - Component name to validate\n * @returns {boolean} True if component is valid\n */\nexport function isValidComponent(componentName) {\n  const config = window.getSGEXRouteConfig();\n  return config ? config.isValidComponent(componentName) : false;\n}\n\n/**\n * Utility functions for lazy route generation\n */\nconst LazyRouteUtils = {\n  generateLazyRoutes,\n  getValidDAKComponents,\n  isValidComponent\n};\n\nexport default LazyRouteUtils;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}