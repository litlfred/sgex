{"ast":null,"code":"import{useState,useEffect}from'react';import{useParams,useNavigate,useLocation}from'react-router-dom';import githubService from'../services/githubService';import dakValidationService from'../services/dakValidationService';/**\n * Custom hook to handle DAK URL parameters (user, repo, branch) for DAK component pages.\n * This extracts and validates DAK parameters from the URL, similar to how DAKDashboard works.\n * \n * @returns {Object} Contains loading state, error, profile, repository, selectedBranch, and navigate function\n */const useDAKUrlParams=()=>{var _location$state,_location$state2,_location$state3;const location=useLocation();const navigate=useNavigate();const{user,repo,branch}=useParams();// Try to get data from location.state first, then from URL params\nconst[profile,setProfile]=useState(((_location$state=location.state)===null||_location$state===void 0?void 0:_location$state.profile)||null);const[repository,setRepository]=useState(((_location$state2=location.state)===null||_location$state2===void 0?void 0:_location$state2.repository)||null);const[selectedBranch,setSelectedBranch]=useState(((_location$state3=location.state)===null||_location$state3===void 0?void 0:_location$state3.selectedBranch)||branch||null);const[loading,setLoading]=useState(!profile||!repository);const[error,setError]=useState(null);// Fetch data from URL parameters if not available in location.state\nuseEffect(()=>{const fetchDataFromUrlParams=async()=>{var _repository$owner,_location$state$profi,_location$state$repos,_location$state$repos2,_location$state$repos3;console.log('🔍 useDAKUrlParams: Starting data fetch analysis:',{urlParams:{user,repo,branch},currentState:{hasProfile:!!profile,hasRepository:!!repository,profileLogin:profile===null||profile===void 0?void 0:profile.login,repositoryFullName:repository===null||repository===void 0?void 0:repository.full_name,repositoryOwner:repository===null||repository===void 0?void 0:(_repository$owner=repository.owner)===null||_repository$owner===void 0?void 0:_repository$owner.login},hasLocationState:!!location.state,locationStateSummary:location.state?{hasProfile:!!location.state.profile,hasRepository:!!location.state.repository,profileLogin:(_location$state$profi=location.state.profile)===null||_location$state$profi===void 0?void 0:_location$state$profi.login,repositoryFullName:(_location$state$repos=location.state.repository)===null||_location$state$repos===void 0?void 0:_location$state$repos.full_name,repositoryOwner:(_location$state$repos2=location.state.repository)===null||_location$state$repos2===void 0?void 0:(_location$state$repos3=_location$state$repos2.owner)===null||_location$state$repos3===void 0?void 0:_location$state$repos3.login}:null,isAuthenticated:githubService.isAuth(),needsFetch:(!profile||!repository)&&user&&repo});if((!profile||!repository)&&user&&repo){console.log('useDAKUrlParams: Fetching data from URL parameters:',{user,repo,branch,hasProfile:!!profile,hasRepository:!!repository,hasLocationState:!!location.state,isAuthenticated:githubService.isAuth()});try{setLoading(true);setError(null);// Check if githubService is authenticated (allow demo mode to proceed without auth)\nif(!githubService.isAuth()){console.log('🚫 useDAKUrlParams: Not authenticated, entering demo mode');// In demo mode, use the DAK validation service for demo repositories\nconst isValidDAK=dakValidationService.validateDemoDAKRepository(user,repo);if(!isValidDAK){console.log('❌ useDAKUrlParams: Demo DAK validation failed, redirecting home');navigate('/',{state:{warningMessage:\"Could not access the requested DAK. Repository '\".concat(user,\"/\").concat(repo,\"' not found or not accessible.\")}});return;}console.log('✅ useDAKUrlParams: Demo DAK validation passed, creating demo data');const demoProfile={login:user,name:user.charAt(0).toUpperCase()+user.slice(1),avatar_url:\"https://github.com/\".concat(user,\".png\"),type:'User',isDemo:true};const demoRepository={name:repo,full_name:\"\".concat(user,\"/\").concat(repo),owner:{login:user},default_branch:branch||'main',html_url:\"https://github.com/\".concat(user,\"/\").concat(repo),isDemo:true};console.log('📋 useDAKUrlParams: Setting demo state:',{profile:demoProfile,repository:demoRepository,selectedBranch:branch||'main'});setProfile(demoProfile);setRepository(demoRepository);setSelectedBranch(branch||'main');setLoading(false);return;}console.log('🔐 useDAKUrlParams: Authenticated, fetching real repository data');// Fetch user profile\nlet userProfile=null;try{console.log(\"\\uD83D\\uDD0D useDAKUrlParams: Fetching user profile for: \".concat(user));const userResponse=await githubService.getUser(user);userProfile=userResponse;console.log('✅ useDAKUrlParams: User profile fetched:',{login:userProfile.login,name:userProfile.name,type:userProfile.type});}catch(err){console.error('❌ useDAKUrlParams: Error fetching user:',err);navigate('/',{state:{warningMessage:\"Could not access the requested DAK. User '\".concat(user,\"' not found or not accessible.\")}});return;}// Fetch repository\nlet repoData=null;try{console.log(\"useDAKUrlParams: Fetching repository data for \".concat(user,\"/\").concat(repo));const repoResponse=await githubService.getRepository(user,repo);repoData=repoResponse;console.log('useDAKUrlParams: Repository data fetched successfully:',{name:repoData.name,full_name:repoData.full_name,owner:repoData.owner,default_branch:repoData.default_branch});}catch(err){console.error('useDAKUrlParams: Error fetching repository:',err);navigate('/',{state:{warningMessage:\"Could not access the requested DAK. Repository '\".concat(user,\"/\").concat(repo,\"' not found or not accessible.\")}});return;}// Validate that this is actually a DAK repository\nconst isValidDAK=await dakValidationService.validateDAKRepository(user,repo,branch||repoData.default_branch);if(!isValidDAK){console.log(\"Repository \".concat(user,\"/\").concat(repo,\" is not a valid DAK repository\"));navigate('/',{state:{warningMessage:\"Could not access the requested DAK. Repository '\".concat(user,\"/\").concat(repo,\"' not found or not accessible.\")}});return;}// Validate branch if specified\nif(branch){try{await githubService.getBranch(user,repo,branch);setSelectedBranch(branch);}catch(err){console.warn(\"Branch '\".concat(branch,\"' not found, falling back to default branch\"));setSelectedBranch(repoData.default_branch);}}else{setSelectedBranch(repoData.default_branch);}console.log('useDAKUrlParams: Setting final state:',{profile:{login:userProfile.login,name:userProfile.name,type:userProfile.type},repository:{name:repoData.name,full_name:repoData.full_name,owner:repoData.owner,default_branch:repoData.default_branch},selectedBranch:branch||repoData.default_branch});setProfile(userProfile);setRepository(repoData);setLoading(false);}catch(err){console.error('Error fetching data from URL params:',err);setError('Failed to load DAK data. Please check the URL or try again.');setLoading(false);}}else{console.log('📋 useDAKUrlParams: Not fetching from URL params, using existing state:',{hasProfile:!!profile,hasRepository:!!repository,hasUserParam:!!user,hasRepoParam:!!repo,reason:!profile||!repository?'missing URL params':'state already populated'});setLoading(false);}};fetchDataFromUrlParams();},[user,repo,branch,profile,repository,navigate,location.state]);return{profile,repository,selectedBranch,loading,error,user,repo,branch:branch||selectedBranch,navigate};};export default useDAKUrlParams;","map":{"version":3,"names":["useState","useEffect","useParams","useNavigate","useLocation","githubService","dakValidationService","useDAKUrlParams","_location$state","_location$state2","_location$state3","location","navigate","user","repo","branch","profile","setProfile","state","repository","setRepository","selectedBranch","setSelectedBranch","loading","setLoading","error","setError","fetchDataFromUrlParams","_repository$owner","_location$state$profi","_location$state$repos","_location$state$repos2","_location$state$repos3","console","log","urlParams","currentState","hasProfile","hasRepository","profileLogin","login","repositoryFullName","full_name","repositoryOwner","owner","hasLocationState","locationStateSummary","isAuthenticated","isAuth","needsFetch","isValidDAK","validateDemoDAKRepository","warningMessage","concat","demoProfile","name","charAt","toUpperCase","slice","avatar_url","type","isDemo","demoRepository","default_branch","html_url","userProfile","userResponse","getUser","err","repoData","repoResponse","getRepository","validateDAKRepository","getBranch","warn","hasUserParam","hasRepoParam","reason"],"sources":["/home/runner/work/sgex/sgex/src/hooks/useDAKUrlParams.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport dakValidationService from '../services/dakValidationService';\n\n/**\n * Custom hook to handle DAK URL parameters (user, repo, branch) for DAK component pages.\n * This extracts and validates DAK parameters from the URL, similar to how DAKDashboard works.\n * \n * @returns {Object} Contains loading state, error, profile, repository, selectedBranch, and navigate function\n */\nconst useDAKUrlParams = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user, repo, branch } = useParams();\n  \n  // Try to get data from location.state first, then from URL params\n  const [profile, setProfile] = useState(location.state?.profile || null);\n  const [repository, setRepository] = useState(location.state?.repository || null);\n  const [selectedBranch, setSelectedBranch] = useState(location.state?.selectedBranch || branch || null);\n  const [loading, setLoading] = useState(!profile || !repository);\n  const [error, setError] = useState(null);\n\n  // Fetch data from URL parameters if not available in location.state\n  useEffect(() => {\n    const fetchDataFromUrlParams = async () => {\n      console.log('🔍 useDAKUrlParams: Starting data fetch analysis:', {\n        urlParams: { user, repo, branch },\n        currentState: {\n          hasProfile: !!profile,\n          hasRepository: !!repository,\n          profileLogin: profile?.login,\n          repositoryFullName: repository?.full_name,\n          repositoryOwner: repository?.owner?.login\n        },\n        hasLocationState: !!location.state,\n        locationStateSummary: location.state ? {\n          hasProfile: !!location.state.profile,\n          hasRepository: !!location.state.repository,\n          profileLogin: location.state.profile?.login,\n          repositoryFullName: location.state.repository?.full_name,\n          repositoryOwner: location.state.repository?.owner?.login\n        } : null,\n        isAuthenticated: githubService.isAuth(),\n        needsFetch: (!profile || !repository) && user && repo\n      });\n\n      if ((!profile || !repository) && user && repo) {\n        console.log('useDAKUrlParams: Fetching data from URL parameters:', {\n          user, \n          repo, \n          branch,\n          hasProfile: !!profile,\n          hasRepository: !!repository,\n          hasLocationState: !!location.state,\n          isAuthenticated: githubService.isAuth()\n        });\n        \n        try {\n          setLoading(true);\n          setError(null);\n\n          // Check if githubService is authenticated (allow demo mode to proceed without auth)\n          if (!githubService.isAuth()) {\n            console.log('🚫 useDAKUrlParams: Not authenticated, entering demo mode');\n            // In demo mode, use the DAK validation service for demo repositories\n            const isValidDAK = dakValidationService.validateDemoDAKRepository(user, repo);\n            \n            if (!isValidDAK) {\n              console.log('❌ useDAKUrlParams: Demo DAK validation failed, redirecting home');\n              navigate('/', { \n                state: { \n                  warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n                } \n              });\n              return;\n            }\n\n            console.log('✅ useDAKUrlParams: Demo DAK validation passed, creating demo data');\n            const demoProfile = {\n              login: user,\n              name: user.charAt(0).toUpperCase() + user.slice(1),\n              avatar_url: `https://github.com/${user}.png`,\n              type: 'User',\n              isDemo: true\n            };\n\n            const demoRepository = {\n              name: repo,\n              full_name: `${user}/${repo}`,\n              owner: { login: user },\n              default_branch: branch || 'main',\n              html_url: `https://github.com/${user}/${repo}`,\n              isDemo: true\n            };\n\n            console.log('📋 useDAKUrlParams: Setting demo state:', {\n              profile: demoProfile,\n              repository: demoRepository,\n              selectedBranch: branch || 'main'\n            });\n\n            setProfile(demoProfile);\n            setRepository(demoRepository);\n            setSelectedBranch(branch || 'main');\n            setLoading(false);\n            return;\n          }\n\n          console.log('🔐 useDAKUrlParams: Authenticated, fetching real repository data');\n\n          // Fetch user profile\n          let userProfile = null;\n          try {\n            console.log(`🔍 useDAKUrlParams: Fetching user profile for: ${user}`);\n            const userResponse = await githubService.getUser(user);\n            userProfile = userResponse;\n            console.log('✅ useDAKUrlParams: User profile fetched:', {\n              login: userProfile.login,\n              name: userProfile.name,\n              type: userProfile.type\n            });\n          } catch (err) {\n            console.error('❌ useDAKUrlParams: Error fetching user:', err);\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. User '${user}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Fetch repository\n          let repoData = null;\n          try {\n            console.log(`useDAKUrlParams: Fetching repository data for ${user}/${repo}`);\n            const repoResponse = await githubService.getRepository(user, repo);\n            repoData = repoResponse;\n            console.log('useDAKUrlParams: Repository data fetched successfully:', {\n              name: repoData.name,\n              full_name: repoData.full_name,\n              owner: repoData.owner,\n              default_branch: repoData.default_branch\n            });\n          } catch (err) {\n            console.error('useDAKUrlParams: Error fetching repository:', err);\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Validate that this is actually a DAK repository\n          const isValidDAK = await dakValidationService.validateDAKRepository(user, repo, branch || repoData.default_branch);\n          \n          if (!isValidDAK) {\n            console.log(`Repository ${user}/${repo} is not a valid DAK repository`);\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Validate branch if specified\n          if (branch) {\n            try {\n              await githubService.getBranch(user, repo, branch);\n              setSelectedBranch(branch);\n            } catch (err) {\n              console.warn(`Branch '${branch}' not found, falling back to default branch`);\n              setSelectedBranch(repoData.default_branch);\n            }\n          } else {\n            setSelectedBranch(repoData.default_branch);\n          }\n\n          console.log('useDAKUrlParams: Setting final state:', {\n            profile: {\n              login: userProfile.login,\n              name: userProfile.name,\n              type: userProfile.type\n            },\n            repository: {\n              name: repoData.name,\n              full_name: repoData.full_name,\n              owner: repoData.owner,\n              default_branch: repoData.default_branch\n            },\n            selectedBranch: branch || repoData.default_branch\n          });\n\n          setProfile(userProfile);\n          setRepository(repoData);\n          setLoading(false);\n        } catch (err) {\n          console.error('Error fetching data from URL params:', err);\n          setError('Failed to load DAK data. Please check the URL or try again.');\n          setLoading(false);\n        }\n      } else {\n        console.log('📋 useDAKUrlParams: Not fetching from URL params, using existing state:', {\n          hasProfile: !!profile,\n          hasRepository: !!repository,\n          hasUserParam: !!user,\n          hasRepoParam: !!repo,\n          reason: !profile || !repository ? 'missing URL params' : 'state already populated'\n        });\n        setLoading(false);\n      }\n    };\n\n    fetchDataFromUrlParams();\n  }, [user, repo, branch, profile, repository, navigate, location.state]);\n\n  return {\n    profile,\n    repository,\n    selectedBranch,\n    loading,\n    error,\n    user,\n    repo,\n    branch: branch || selectedBranch,\n    navigate\n  };\n};\n\nexport default useDAKUrlParams;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}