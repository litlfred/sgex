{"ast":null,"code":"/**\n * @typedef {import('../core/Types').ElementLike} Element\n * @typedef {import('../core/Types').ConnectionLike} Connection\n *\n * @typedef {import('../util').Point} Point\n *\n * @typedef { {\n *   connectionStart?: Point;\n *   connectionEnd?: Point;\n *   source?: Element;\n *   target?: Element;\n * } } LayoutConnectionHints\n */\n\nimport { getMid } from './LayoutUtil';\n\n/**\n * A base connection layouter implementation\n * that layouts the connection by directly connecting\n * mid(source) + mid(target).\n */\nexport default function BaseLayouter() {}\n\n/**\n * Return the new layouted waypoints for the given connection.\n *\n * The connection passed is still unchanged; you may figure out about\n * the new connection start / end via the layout hints provided.\n *\n * @param {Connection} connection\n * @param {LayoutConnectionHints} [hints]\n *\n * @return {Point[]} The waypoints of the laid out connection.\n */\nBaseLayouter.prototype.layoutConnection = function (connection, hints) {\n  hints = hints || {};\n  return [hints.connectionStart || getMid(hints.source || connection.source), hints.connectionEnd || getMid(hints.target || connection.target)];\n};","map":{"version":3,"names":["getMid","BaseLayouter","prototype","layoutConnection","connection","hints","connectionStart","source","connectionEnd","target"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/layout/BaseLayouter.js"],"sourcesContent":["/**\n * @typedef {import('../core/Types').ElementLike} Element\n * @typedef {import('../core/Types').ConnectionLike} Connection\n *\n * @typedef {import('../util').Point} Point\n *\n * @typedef { {\n *   connectionStart?: Point;\n *   connectionEnd?: Point;\n *   source?: Element;\n *   target?: Element;\n * } } LayoutConnectionHints\n */\n\nimport {\n  getMid\n} from './LayoutUtil';\n\n\n/**\n * A base connection layouter implementation\n * that layouts the connection by directly connecting\n * mid(source) + mid(target).\n */\nexport default function BaseLayouter() {}\n\n\n/**\n * Return the new layouted waypoints for the given connection.\n *\n * The connection passed is still unchanged; you may figure out about\n * the new connection start / end via the layout hints provided.\n *\n * @param {Connection} connection\n * @param {LayoutConnectionHints} [hints]\n *\n * @return {Point[]} The waypoints of the laid out connection.\n */\nBaseLayouter.prototype.layoutConnection = function(connection, hints) {\n\n  hints = hints || {};\n\n  return [\n    hints.connectionStart || getMid(hints.source || connection.source),\n    hints.connectionEnd || getMid(hints.target || connection.target)\n  ];\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACEA,MAAM,QACD,cAAc;;AAGrB;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,YAAYA,CAAA,EAAG,CAAC;;AAGxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,YAAY,CAACC,SAAS,CAACC,gBAAgB,GAAG,UAASC,UAAU,EAAEC,KAAK,EAAE;EAEpEA,KAAK,GAAGA,KAAK,IAAI,CAAC,CAAC;EAEnB,OAAO,CACLA,KAAK,CAACC,eAAe,IAAIN,MAAM,CAACK,KAAK,CAACE,MAAM,IAAIH,UAAU,CAACG,MAAM,CAAC,EAClEF,KAAK,CAACG,aAAa,IAAIR,MAAM,CAACK,KAAK,CAACI,MAAM,IAAIL,UAAU,CAACK,MAAM,CAAC,CACjE;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}