{"ast":null,"code":"import { assign } from 'min-dash';\nimport { is } from '../util/ModelUtil';\nimport { isLabelExternal, getExternalLabelBounds, getLabel } from '../util/LabelUtil';\nimport { getMid } from 'diagram-js/lib/layout/LayoutUtil';\nimport { isExpanded } from '../util/DiUtil';\nimport { elementToString } from './Util';\n\n/**\n * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n *\n * @typedef {import('../features/modeling/ElementFactory').default} ElementFactory\n * @typedef {import('../draw/TextRenderer').default} TextRenderer\n *\n * @typedef {import('../model/Types').Element} Element\n * @typedef {import('../model/Types').Label} Label\n * @typedef {import('../model/Types').Shape} Shape\n * @typedef {import('../model/Types').Connection} Connection\n * @typedef {import('../model/Types').Root} Root\n * @typedef {import('../model/Types').ModdleElement} ModdleElement\n */\n\n/**\n * @param {ModdleElement} semantic\n * @param {ModdleElement} di\n * @param {Object} [attrs=null]\n *\n * @return {Object}\n */\nfunction elementData(semantic, di, attrs) {\n  return assign({\n    id: semantic.id,\n    type: semantic.$type,\n    businessObject: semantic,\n    di: di\n  }, attrs);\n}\nfunction getWaypoints(di, source, target) {\n  var waypoints = di.waypoint;\n  if (!waypoints || waypoints.length < 2) {\n    return [getMid(source), getMid(target)];\n  }\n  return waypoints.map(function (p) {\n    return {\n      x: p.x,\n      y: p.y\n    };\n  });\n}\nfunction notYetDrawn(semantic, refSemantic, property) {\n  return new Error(\"element \".concat(elementToString(refSemantic), \" referenced by \").concat(elementToString(semantic), \"#\").concat(property, \" not yet drawn\"));\n}\n\n/**\n * An importer that adds bpmn elements to the canvas\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {ElementFactory} elementFactory\n * @param {ElementRegistry} elementRegistry\n * @param {TextRenderer} textRenderer\n */\nexport default function BpmnImporter(eventBus, canvas, elementFactory, elementRegistry, textRenderer) {\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  this._elementFactory = elementFactory;\n  this._elementRegistry = elementRegistry;\n  this._textRenderer = textRenderer;\n}\nBpmnImporter.$inject = ['eventBus', 'canvas', 'elementFactory', 'elementRegistry', 'textRenderer'];\n\n/**\n * Add a BPMN element (semantic) to the canvas making it a child of the\n * given parent.\n *\n * @param {ModdleElement} semantic\n * @param {ModdleElement} di\n * @param {Shape} parentElement\n *\n * @return {Shape | Root | Connection}\n */\nBpmnImporter.prototype.add = function (semantic, di, parentElement) {\n  var element, hidden;\n  var parentIndex;\n\n  // ROOT ELEMENT\n  // handle the special case that we deal with a\n  // invisible root element (process, subprocess or collaboration)\n  if (is(di, 'bpmndi:BPMNPlane')) {\n    var attrs = is(semantic, 'bpmn:SubProcess') ? {\n      id: semantic.id + '_plane'\n    } : {};\n\n    // add a virtual element (not being drawn)\n    element = this._elementFactory.createRoot(elementData(semantic, di, attrs));\n    this._canvas.addRootElement(element);\n  }\n\n  // SHAPE\n  else if (is(di, 'bpmndi:BPMNShape')) {\n    var collapsed = !isExpanded(semantic, di),\n      isFrame = isFrameElement(semantic);\n    hidden = parentElement && (parentElement.hidden || parentElement.collapsed);\n    var bounds = di.bounds;\n    element = this._elementFactory.createShape(elementData(semantic, di, {\n      collapsed: collapsed,\n      hidden: hidden,\n      x: Math.round(bounds.x),\n      y: Math.round(bounds.y),\n      width: Math.round(bounds.width),\n      height: Math.round(bounds.height),\n      isFrame: isFrame\n    }));\n    if (is(semantic, 'bpmn:BoundaryEvent')) {\n      this._attachBoundary(semantic, element);\n    }\n\n    // insert lanes behind other flow nodes (cf. #727)\n    if (is(semantic, 'bpmn:Lane')) {\n      parentIndex = 0;\n    }\n    if (is(semantic, 'bpmn:DataStoreReference')) {\n      // check whether data store is inside our outside of its semantic parent\n      if (!isPointInsideBBox(parentElement, getMid(bounds))) {\n        parentElement = this._canvas.findRoot(parentElement);\n      }\n    }\n    this._canvas.addShape(element, parentElement, parentIndex);\n  }\n\n  // CONNECTION\n  else if (is(di, 'bpmndi:BPMNEdge')) {\n    var source = this._getSource(semantic),\n      target = this._getTarget(semantic);\n    hidden = parentElement && (parentElement.hidden || parentElement.collapsed);\n    element = this._elementFactory.createConnection(elementData(semantic, di, {\n      hidden: hidden,\n      source: source,\n      target: target,\n      waypoints: getWaypoints(di, source, target)\n    }));\n    if (is(semantic, 'bpmn:DataAssociation')) {\n      // render always on top; this ensures DataAssociations\n      // are rendered correctly across different \"hacks\" people\n      // love to model such as cross participant / sub process\n      // associations\n      parentElement = this._canvas.findRoot(parentElement);\n    }\n    this._canvas.addConnection(element, parentElement, parentIndex);\n  } else {\n    throw new Error(\"unknown di \".concat(elementToString(di), \" for element \").concat(elementToString(semantic)));\n  }\n\n  // (optional) LABEL\n  if (isLabelExternal(semantic) && getLabel(element)) {\n    this.addLabel(semantic, di, element);\n  }\n  this._eventBus.fire('bpmnElement.added', {\n    element: element\n  });\n  return element;\n};\n\n/**\n * Attach a boundary element to the given host.\n *\n * @param {ModdleElement} boundarySemantic\n * @param {Shape} boundaryElement\n */\nBpmnImporter.prototype._attachBoundary = function (boundarySemantic, boundaryElement) {\n  var hostSemantic = boundarySemantic.attachedToRef;\n  if (!hostSemantic) {\n    throw new Error(\"missing \".concat(elementToString(boundarySemantic), \"#attachedToRef\"));\n  }\n  var host = this._elementRegistry.get(hostSemantic.id),\n    attachers = host && host.attachers;\n  if (!host) {\n    throw notYetDrawn(boundarySemantic, hostSemantic, 'attachedToRef');\n  }\n\n  // wire element.host <> host.attachers\n  boundaryElement.host = host;\n  if (!attachers) {\n    host.attachers = attachers = [];\n  }\n  if (attachers.indexOf(boundaryElement) === -1) {\n    attachers.push(boundaryElement);\n  }\n};\n\n/**\n * Add a label to a given element.\n *\n * @param {ModdleElement} semantic\n * @param {ModdleElement} di\n * @param {Element} element\n *\n * @return {Label}\n */\nBpmnImporter.prototype.addLabel = function (semantic, di, element) {\n  var bounds, text, label;\n  bounds = getExternalLabelBounds(di, element);\n  text = getLabel(element);\n  if (text) {\n    // get corrected bounds from actual layouted text\n    bounds = this._textRenderer.getExternalLabelBounds(bounds, text);\n  }\n  label = this._elementFactory.createLabel(elementData(semantic, di, {\n    id: semantic.id + '_label',\n    labelTarget: element,\n    type: 'label',\n    hidden: element.hidden || !getLabel(element),\n    x: Math.round(bounds.x),\n    y: Math.round(bounds.y),\n    width: Math.round(bounds.width),\n    height: Math.round(bounds.height)\n  }));\n  return this._canvas.addShape(label, element.parent);\n};\n\n/**\n * Get the source or target of the given connection.\n *\n * @param {ModdleElement} semantic\n * @param {'source' | 'target'} side\n *\n * @return {Element}\n */\nBpmnImporter.prototype._getConnectedElement = function (semantic, side) {\n  var element,\n    refSemantic,\n    type = semantic.$type;\n  refSemantic = semantic[side + 'Ref'];\n\n  // handle mysterious isMany DataAssociation#sourceRef\n  if (side === 'source' && type === 'bpmn:DataInputAssociation') {\n    refSemantic = refSemantic && refSemantic[0];\n  }\n\n  // fix source / target for DataInputAssociation / DataOutputAssociation\n  if (side === 'source' && type === 'bpmn:DataOutputAssociation' || side === 'target' && type === 'bpmn:DataInputAssociation') {\n    refSemantic = semantic.$parent;\n  }\n  element = refSemantic && this._getElement(refSemantic);\n  if (element) {\n    return element;\n  }\n  if (refSemantic) {\n    throw notYetDrawn(semantic, refSemantic, side + 'Ref');\n  } else {\n    throw new Error(\"\".concat(elementToString(semantic), \"#\").concat(side, \" Ref not specified\"));\n  }\n};\nBpmnImporter.prototype._getSource = function (semantic) {\n  return this._getConnectedElement(semantic, 'source');\n};\nBpmnImporter.prototype._getTarget = function (semantic) {\n  return this._getConnectedElement(semantic, 'target');\n};\nBpmnImporter.prototype._getElement = function (semantic) {\n  return this._elementRegistry.get(semantic.id);\n};\n\n// helpers ////////////////////\n\nfunction isPointInsideBBox(bbox, point) {\n  var x = point.x,\n    y = point.y;\n  return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;\n}\nfunction isFrameElement(semantic) {\n  return is(semantic, 'bpmn:Group');\n}","map":{"version":3,"names":["assign","is","isLabelExternal","getExternalLabelBounds","getLabel","getMid","isExpanded","elementToString","elementData","semantic","di","attrs","id","type","$type","businessObject","getWaypoints","source","target","waypoints","waypoint","length","map","p","x","y","notYetDrawn","refSemantic","property","Error","concat","BpmnImporter","eventBus","canvas","elementFactory","elementRegistry","textRenderer","_eventBus","_canvas","_elementFactory","_elementRegistry","_textRenderer","$inject","prototype","add","parentElement","element","hidden","parentIndex","createRoot","addRootElement","collapsed","isFrame","isFrameElement","bounds","createShape","Math","round","width","height","_attachBoundary","isPointInsideBBox","findRoot","addShape","_getSource","_getTarget","createConnection","addConnection","addLabel","fire","boundarySemantic","boundaryElement","hostSemantic","attachedToRef","host","get","attachers","indexOf","push","text","label","createLabel","labelTarget","parent","_getConnectedElement","side","$parent","_getElement","bbox","point"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/import/BpmnImporter.js"],"sourcesContent":["import {\n  assign\n} from 'min-dash';\n\nimport { is } from '../util/ModelUtil';\n\nimport {\n  isLabelExternal,\n  getExternalLabelBounds,\n  getLabel\n} from '../util/LabelUtil';\n\nimport {\n  getMid\n} from 'diagram-js/lib/layout/LayoutUtil';\n\nimport {\n  isExpanded\n} from '../util/DiUtil';\n\nimport {\n  elementToString\n} from './Util';\n\n/**\n * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n *\n * @typedef {import('../features/modeling/ElementFactory').default} ElementFactory\n * @typedef {import('../draw/TextRenderer').default} TextRenderer\n *\n * @typedef {import('../model/Types').Element} Element\n * @typedef {import('../model/Types').Label} Label\n * @typedef {import('../model/Types').Shape} Shape\n * @typedef {import('../model/Types').Connection} Connection\n * @typedef {import('../model/Types').Root} Root\n * @typedef {import('../model/Types').ModdleElement} ModdleElement\n */\n\n/**\n * @param {ModdleElement} semantic\n * @param {ModdleElement} di\n * @param {Object} [attrs=null]\n *\n * @return {Object}\n */\nfunction elementData(semantic, di, attrs) {\n  return assign({\n    id: semantic.id,\n    type: semantic.$type,\n    businessObject: semantic,\n    di: di\n  }, attrs);\n}\n\nfunction getWaypoints(di, source, target) {\n\n  var waypoints = di.waypoint;\n\n  if (!waypoints || waypoints.length < 2) {\n    return [ getMid(source), getMid(target) ];\n  }\n\n  return waypoints.map(function(p) {\n    return { x: p.x, y: p.y };\n  });\n}\n\nfunction notYetDrawn(semantic, refSemantic, property) {\n  return new Error(\n    `element ${ elementToString(refSemantic) } referenced by ${ elementToString(semantic) }#${ property } not yet drawn`\n  );\n}\n\n\n/**\n * An importer that adds bpmn elements to the canvas\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {ElementFactory} elementFactory\n * @param {ElementRegistry} elementRegistry\n * @param {TextRenderer} textRenderer\n */\nexport default function BpmnImporter(\n    eventBus, canvas, elementFactory,\n    elementRegistry, textRenderer) {\n\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  this._elementFactory = elementFactory;\n  this._elementRegistry = elementRegistry;\n  this._textRenderer = textRenderer;\n}\n\nBpmnImporter.$inject = [\n  'eventBus',\n  'canvas',\n  'elementFactory',\n  'elementRegistry',\n  'textRenderer'\n];\n\n\n/**\n * Add a BPMN element (semantic) to the canvas making it a child of the\n * given parent.\n *\n * @param {ModdleElement} semantic\n * @param {ModdleElement} di\n * @param {Shape} parentElement\n *\n * @return {Shape | Root | Connection}\n */\nBpmnImporter.prototype.add = function(semantic, di, parentElement) {\n  var element,\n      hidden;\n\n  var parentIndex;\n\n  // ROOT ELEMENT\n  // handle the special case that we deal with a\n  // invisible root element (process, subprocess or collaboration)\n  if (is(di, 'bpmndi:BPMNPlane')) {\n\n    var attrs = is(semantic, 'bpmn:SubProcess')\n      ? { id: semantic.id + '_plane' }\n      : {};\n\n    // add a virtual element (not being drawn)\n    element = this._elementFactory.createRoot(elementData(semantic, di, attrs));\n\n    this._canvas.addRootElement(element);\n  }\n\n  // SHAPE\n  else if (is(di, 'bpmndi:BPMNShape')) {\n\n    var collapsed = !isExpanded(semantic, di),\n        isFrame = isFrameElement(semantic);\n\n    hidden = parentElement && (parentElement.hidden || parentElement.collapsed);\n\n    var bounds = di.bounds;\n\n    element = this._elementFactory.createShape(elementData(semantic, di, {\n      collapsed: collapsed,\n      hidden: hidden,\n      x: Math.round(bounds.x),\n      y: Math.round(bounds.y),\n      width: Math.round(bounds.width),\n      height: Math.round(bounds.height),\n      isFrame: isFrame\n    }));\n\n    if (is(semantic, 'bpmn:BoundaryEvent')) {\n      this._attachBoundary(semantic, element);\n    }\n\n    // insert lanes behind other flow nodes (cf. #727)\n    if (is(semantic, 'bpmn:Lane')) {\n      parentIndex = 0;\n    }\n\n    if (is(semantic, 'bpmn:DataStoreReference')) {\n\n      // check whether data store is inside our outside of its semantic parent\n      if (!isPointInsideBBox(parentElement, getMid(bounds))) {\n        parentElement = this._canvas.findRoot(parentElement);\n      }\n    }\n\n    this._canvas.addShape(element, parentElement, parentIndex);\n  }\n\n  // CONNECTION\n  else if (is(di, 'bpmndi:BPMNEdge')) {\n\n    var source = this._getSource(semantic),\n        target = this._getTarget(semantic);\n\n    hidden = parentElement && (parentElement.hidden || parentElement.collapsed);\n\n    element = this._elementFactory.createConnection(elementData(semantic, di, {\n      hidden: hidden,\n      source: source,\n      target: target,\n      waypoints: getWaypoints(di, source, target)\n    }));\n\n    if (is(semantic, 'bpmn:DataAssociation')) {\n\n      // render always on top; this ensures DataAssociations\n      // are rendered correctly across different \"hacks\" people\n      // love to model such as cross participant / sub process\n      // associations\n      parentElement = this._canvas.findRoot(parentElement);\n    }\n\n    this._canvas.addConnection(element, parentElement, parentIndex);\n  } else {\n    throw new Error(\n      `unknown di ${ elementToString(di) } for element ${ elementToString(semantic) }`\n    );\n  }\n\n  // (optional) LABEL\n  if (isLabelExternal(semantic) && getLabel(element)) {\n    this.addLabel(semantic, di, element);\n  }\n\n  this._eventBus.fire('bpmnElement.added', { element: element });\n\n  return element;\n};\n\n\n/**\n * Attach a boundary element to the given host.\n *\n * @param {ModdleElement} boundarySemantic\n * @param {Shape} boundaryElement\n */\nBpmnImporter.prototype._attachBoundary = function(boundarySemantic, boundaryElement) {\n  var hostSemantic = boundarySemantic.attachedToRef;\n\n  if (!hostSemantic) {\n    throw new Error(\n      `missing ${ elementToString(boundarySemantic) }#attachedToRef`\n    );\n  }\n\n  var host = this._elementRegistry.get(hostSemantic.id),\n      attachers = host && host.attachers;\n\n  if (!host) {\n    throw notYetDrawn(boundarySemantic, hostSemantic, 'attachedToRef');\n  }\n\n  // wire element.host <> host.attachers\n  boundaryElement.host = host;\n\n  if (!attachers) {\n    host.attachers = attachers = [];\n  }\n\n  if (attachers.indexOf(boundaryElement) === -1) {\n    attachers.push(boundaryElement);\n  }\n};\n\n\n/**\n * Add a label to a given element.\n *\n * @param {ModdleElement} semantic\n * @param {ModdleElement} di\n * @param {Element} element\n *\n * @return {Label}\n */\nBpmnImporter.prototype.addLabel = function(semantic, di, element) {\n  var bounds,\n      text,\n      label;\n\n  bounds = getExternalLabelBounds(di, element);\n\n  text = getLabel(element);\n\n  if (text) {\n\n    // get corrected bounds from actual layouted text\n    bounds = this._textRenderer.getExternalLabelBounds(bounds, text);\n  }\n\n  label = this._elementFactory.createLabel(elementData(semantic, di, {\n    id: semantic.id + '_label',\n    labelTarget: element,\n    type: 'label',\n    hidden: element.hidden || !getLabel(element),\n    x: Math.round(bounds.x),\n    y: Math.round(bounds.y),\n    width: Math.round(bounds.width),\n    height: Math.round(bounds.height)\n  }));\n\n  return this._canvas.addShape(label, element.parent);\n};\n\n/**\n * Get the source or target of the given connection.\n *\n * @param {ModdleElement} semantic\n * @param {'source' | 'target'} side\n *\n * @return {Element}\n */\nBpmnImporter.prototype._getConnectedElement = function(semantic, side) {\n\n  var element,\n      refSemantic,\n      type = semantic.$type;\n\n  refSemantic = semantic[side + 'Ref'];\n\n  // handle mysterious isMany DataAssociation#sourceRef\n  if (side === 'source' && type === 'bpmn:DataInputAssociation') {\n    refSemantic = refSemantic && refSemantic[0];\n  }\n\n  // fix source / target for DataInputAssociation / DataOutputAssociation\n  if (side === 'source' && type === 'bpmn:DataOutputAssociation' ||\n      side === 'target' && type === 'bpmn:DataInputAssociation') {\n\n    refSemantic = semantic.$parent;\n  }\n\n  element = refSemantic && this._getElement(refSemantic);\n\n  if (element) {\n    return element;\n  }\n\n  if (refSemantic) {\n    throw notYetDrawn(semantic, refSemantic, side + 'Ref');\n  } else {\n    throw new Error(\n      `${ elementToString(semantic) }#${ side } Ref not specified`\n    );\n  }\n};\n\nBpmnImporter.prototype._getSource = function(semantic) {\n  return this._getConnectedElement(semantic, 'source');\n};\n\nBpmnImporter.prototype._getTarget = function(semantic) {\n  return this._getConnectedElement(semantic, 'target');\n};\n\n\nBpmnImporter.prototype._getElement = function(semantic) {\n  return this._elementRegistry.get(semantic.id);\n};\n\n\n// helpers ////////////////////\n\nfunction isPointInsideBBox(bbox, point) {\n  var x = point.x,\n      y = point.y;\n\n  return x >= bbox.x &&\n    x <= bbox.x + bbox.width &&\n    y >= bbox.y &&\n    y <= bbox.y + bbox.height;\n}\n\nfunction isFrameElement(semantic) {\n  return is(semantic, 'bpmn:Group');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}