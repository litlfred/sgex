{"ast":null,"code":"import { some } from 'min-dash';\n\n/**\n * @typedef { import('../model/Types').Element } Element\n * @typedef { import('../model/Types').ModdleElement } ModdleElement\n */\n\n/**\n * Is an element of the given BPMN type?\n *\n * @param  {Element|ModdleElement} element\n * @param  {string} type\n *\n * @return {boolean}\n */\nexport function is(element, type) {\n  var bo = getBusinessObject(element);\n  return bo && typeof bo.$instanceOf === 'function' && bo.$instanceOf(type);\n}\n\n/**\n * Return true if element has any of the given types.\n *\n * @param {Element|ModdleElement} element\n * @param {string[]} types\n *\n * @return {boolean}\n */\nexport function isAny(element, types) {\n  return some(types, function (t) {\n    return is(element, t);\n  });\n}\n\n/**\n * Return the business object for a given element.\n *\n * @param {Element|ModdleElement} element\n *\n * @return {ModdleElement}\n */\nexport function getBusinessObject(element) {\n  return element && element.businessObject || element;\n}\n\n/**\n * Return the di object for a given element.\n *\n * @param {Element} element\n *\n * @return {ModdleElement}\n */\nexport function getDi(element) {\n  return element && element.di;\n}","map":{"version":3,"names":["some","is","element","type","bo","getBusinessObject","$instanceOf","isAny","types","t","businessObject","getDi","di"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/util/ModelUtil.js"],"sourcesContent":["import {\n  some\n} from 'min-dash';\n\n/**\n * @typedef { import('../model/Types').Element } Element\n * @typedef { import('../model/Types').ModdleElement } ModdleElement\n */\n\n/**\n * Is an element of the given BPMN type?\n *\n * @param  {Element|ModdleElement} element\n * @param  {string} type\n *\n * @return {boolean}\n */\nexport function is(element, type) {\n  var bo = getBusinessObject(element);\n\n  return bo && (typeof bo.$instanceOf === 'function') && bo.$instanceOf(type);\n}\n\n\n/**\n * Return true if element has any of the given types.\n *\n * @param {Element|ModdleElement} element\n * @param {string[]} types\n *\n * @return {boolean}\n */\nexport function isAny(element, types) {\n  return some(types, function(t) {\n    return is(element, t);\n  });\n}\n\n/**\n * Return the business object for a given element.\n *\n * @param {Element|ModdleElement} element\n *\n * @return {ModdleElement}\n */\nexport function getBusinessObject(element) {\n  return (element && element.businessObject) || element;\n}\n\n/**\n * Return the di object for a given element.\n *\n * @param {Element} element\n *\n * @return {ModdleElement}\n */\nexport function getDi(element) {\n  return element && element.di;\n}"],"mappings":"AAAA,SACEA,IAAI,QACC,UAAU;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,EAAEA,CAACC,OAAO,EAAEC,IAAI,EAAE;EAChC,IAAIC,EAAE,GAAGC,iBAAiB,CAACH,OAAO,CAAC;EAEnC,OAAOE,EAAE,IAAK,OAAOA,EAAE,CAACE,WAAW,KAAK,UAAW,IAAIF,EAAE,CAACE,WAAW,CAACH,IAAI,CAAC;AAC7E;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,KAAKA,CAACL,OAAO,EAAEM,KAAK,EAAE;EACpC,OAAOR,IAAI,CAACQ,KAAK,EAAE,UAASC,CAAC,EAAE;IAC7B,OAAOR,EAAE,CAACC,OAAO,EAAEO,CAAC,CAAC;EACvB,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASJ,iBAAiBA,CAACH,OAAO,EAAE;EACzC,OAAQA,OAAO,IAAIA,OAAO,CAACQ,cAAc,IAAKR,OAAO;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,KAAKA,CAACT,OAAO,EAAE;EAC7B,OAAOA,OAAO,IAAIA,OAAO,CAACU,EAAE;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}