{"ast":null,"code":"import{Octokit}from'@octokit/rest';import{processConcurrently}from'../utils/concurrency';import repositoryCompatibilityCache from'../utils/repositoryCompatibilityCache';import logger from'../utils/logger';class GitHubService{constructor(){this.octokit=null;this.isAuthenticated=false;this.permissions=null;this.tokenType=null;// 'classic', 'fine-grained', or 'oauth'\nthis.logger=logger.getLogger('GitHubService');this.logger.debug('GitHubService instance created');}// Initialize with a GitHub token (supports both OAuth and PAT tokens)\nauthenticate(token){const startTime=Date.now();this.logger.auth('Starting authentication',{tokenProvided:!!token,tokenLength:token?token.length:0});try{this.octokit=new Octokit({auth:token});this.isAuthenticated=true;const duration=Date.now()-startTime;this.logger.auth('Authentication successful',{duration});this.logger.performance('GitHub authentication',duration);return true;}catch(error){const duration=Date.now()-startTime;this.logger.auth('Authentication failed',{error:error.message,duration});console.error('Failed to authenticate with GitHub:',error);this.isAuthenticated=false;return false;}}// Initialize with an existing Octokit instance (for OAuth flow)\nauthenticateWithOctokit(octokitInstance){this.logger.auth('Starting OAuth authentication with Octokit instance');try{this.octokit=octokitInstance;this.isAuthenticated=true;this.tokenType='oauth';this.logger.auth('OAuth authentication successful',{tokenType:this.tokenType});return true;}catch(error){this.logger.auth('OAuth authentication failed',{error:error.message});console.error('Failed to authenticate with Octokit instance:',error);this.isAuthenticated=false;return false;}}// Check token permissions and type\nasync checkTokenPermissions(){if(!this.isAuth()){const error=new Error('Not authenticated with GitHub');this.logger.error('Token permission check failed - not authenticated');throw error;}const startTime=Date.now();this.logger.apiCall('GET','/user',null);try{// Try to get token info to determine type and permissions\nconst response=await this.octokit.request('GET /user');this.logger.apiResponse('GET','/user',response.status,Date.now()-startTime);// Check if this is a fine-grained token by trying to access rate limit info\ntry{const rateLimitStart=Date.now();this.logger.apiCall('GET','/rate_limit',null);const rateLimit=await this.octokit.rest.rateLimit.get();this.logger.apiResponse('GET','/rate_limit',rateLimit.status,Date.now()-rateLimitStart);// Fine-grained tokens have different rate limit structure\nthis.tokenType=rateLimit.data.resources.core?'classic':'fine-grained';this.logger.debug('Token type determined',{tokenType:this.tokenType,hasCore:!!rateLimit.data.resources.core});}catch(rateLimitError){this.tokenType='unknown';this.logger.warn('Could not determine token type from rate limit',{error:rateLimitError.message});}const permissions={type:this.tokenType,user:response.data};this.permissions=permissions;this.logger.debug('Token permissions checked successfully',{tokenType:this.tokenType,username:response.data.login});return permissions;}catch(error){const duration=Date.now()-startTime;this.logger.apiError('GET','/user',error);this.logger.performance('Token permission check (failed)',duration);console.error('Failed to check token permissions:',error);throw error;}}// Check if we have write permissions for a specific repository\nasync checkRepositoryWritePermissions(owner,repo){if(!this.isAuth()){this.logger.warn('Cannot check repository write permissions - not authenticated',{owner,repo});return false;}const startTime=Date.now();this.logger.debug('Checking write permissions for repository',{owner,repo});try{// Get current user first\nconst currentUser=await this.getCurrentUser();const username=currentUser.login;this.logger.apiCall('GET',`/repos/${owner}/${repo}/collaborators/${username}/permission`,null);// Try to get repository collaborator permissions\nconst{data}=await this.octokit.rest.repos.getCollaboratorPermissionLevel({owner,repo,username});const duration=Date.now()-startTime;this.logger.apiResponse('GET',`/repos/${owner}/${repo}/collaborators/${username}/permission`,200,duration);const hasWriteAccess=['write','admin'].includes(data.permission);this.logger.debug('Repository write permissions checked',{owner,repo,permission:data.permission,hasWriteAccess});return hasWriteAccess;}catch(error){const duration=Date.now()-startTime;this.logger.apiError('GET',`/repos/${owner}/${repo}/collaborators/*/permission`,error);this.logger.performance('Repository write permission check (failed)',duration);// If we can't check permissions, assume we don't have write access\nconsole.warn('Could not check repository write permissions:',error);this.logger.warn('Assuming no write access due to permission check failure',{owner,repo,error:error.message});return false;}}// Check if authenticated\nisAuth(){return this.isAuthenticated&&this.octokit!==null;}// Get current user data\nasync getCurrentUser(){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.users.getAuthenticated();return data;}catch(error){console.error('Failed to fetch user data:',error);throw error;}}// Get user's organizations\nasync getUserOrganizations(){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.orgs.listForAuthenticatedUser();return data;}catch(error){console.error('Failed to fetch organizations:',error);throw error;}}// Get specific organization data (public data, no auth required)\nasync getOrganization(orgLogin){try{// Create a temporary Octokit instance for public API calls if we don't have one\nconst octokit=this.octokit||new Octokit();const{data}=await octokit.rest.orgs.get({org:orgLogin});return data;}catch(error){console.error(`Failed to fetch organization ${orgLogin}:`,error);throw error;}}// Get specific user data (public data, no auth required)\nasync getUser(username){try{// Create a temporary Octokit instance for public API calls if we don't have one\nconst octokit=this.octokit||new Octokit();const{data}=await octokit.rest.users.getByUsername({username});return data;}catch(error){console.error(`Failed to fetch user ${username}:`,error);throw error;}}// Get WHO organization data with fresh avatar\nasync getWHOOrganization(){try{const whoData=await this.getOrganization('WorldHealthOrganization');return{id:whoData.id,login:whoData.login,display_name:whoData.name||'World Health Organization',description:whoData.description||'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',avatar_url:whoData.avatar_url,html_url:whoData.html_url,type:'Organization',permissions:{can_create_repositories:true,can_create_private_repositories:true},plan:{name:'Organization',private_repos:'unlimited'},isWHO:true};}catch(error){console.warn('Could not fetch WHO organization data from API, using fallback:',error);// Return hardcoded fallback data\nreturn{id:'who-organization',login:'WorldHealthOrganization',display_name:'World Health Organization',description:'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',avatar_url:'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',html_url:'https://github.com/WorldHealthOrganization',type:'Organization',permissions:{can_create_repositories:true,can_create_private_repositories:true},plan:{name:'Organization',private_repos:'unlimited'},isWHO:true};}}// Get repositories for a user or organization (now filters by SMART Guidelines compatibility)\nasync getRepositories(owner){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'user';// Use the new SMART guidelines filtering method\nreturn this.getSmartGuidelinesRepositories(owner,type);}// Check if a repository has sushi-config.yaml with smart.who.int.base dependency\nasync checkSmartGuidelinesCompatibility(owner,repo){let retryCount=arguments.length>2&&arguments[2]!==undefined?arguments[2]:2;if(!this.isAuth()){return false;}// Check cache first to prevent redundant downloads\nconst cachedResult=repositoryCompatibilityCache.get(owner,repo);if(cachedResult!==null){return cachedResult;}try{// Try to get sushi-config.yaml from the repository root\nconst{data}=await this.octokit.rest.repos.getContent({owner,repo,path:'sushi-config.yaml'});if(data.type==='file'&&data.content){// Decode base64 content (browser-compatible)\nconst content=decodeURIComponent(escape(atob(data.content)));// Check if the content contains smart.who.int.base in dependencies\nconst isCompatible=content.includes('smart.who.int.base');// Cache the result\nrepositoryCompatibilityCache.set(owner,repo,isCompatible);return isCompatible;}// Cache negative result\nrepositoryCompatibilityCache.set(owner,repo,false);return false;}catch(error){// If it's a 404 (file not found), retry once more in case of temporary issues\nif(error.status===404&&retryCount>0){console.warn(`File not found for ${owner}/${repo}, retrying... (${retryCount} attempts left)`);// Use shorter delay in test environment\nconst delay=process.env.NODE_ENV==='test'?10:1000;await new Promise(resolve=>setTimeout(resolve,delay));return this.checkSmartGuidelinesCompatibility(owner,repo,retryCount-1);}// For any error (including rate limiting, network errors, or file not found after retries),\n// strictly return false - no fallback logic\nconsole.warn(`Failed to check ${owner}/${repo} for sushi-config.yaml with smart.who.int.base dependency:`,error.message);// Cache negative result\nrepositoryCompatibilityCache.set(owner,repo,false);return false;}}// Get repositories that are SMART guidelines compatible\nasync getSmartGuidelinesRepositories(owner){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'user';if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{let repositories=[];let page=1;let hasMorePages=true;// Fetch all repositories using pagination\nwhile(hasMorePages){let response;if(type==='user'){response=await this.octokit.rest.repos.listForUser({username:owner,sort:'updated',per_page:100,page:page});}else{response=await this.octokit.rest.repos.listForOrg({org:owner,sort:'updated',per_page:100,page:page});}repositories=repositories.concat(response.data);// Check if there are more pages\nhasMorePages=response.data.length===100;page++;}// Check each repository for SMART guidelines compatibility\nconst smartGuidelinesRepos=[];for(const repo of repositories){const isCompatible=await this.checkSmartGuidelinesCompatibility(repo.owner.login,repo.name);if(isCompatible){smartGuidelinesRepos.push({...repo,smart_guidelines_compatible:true});}}return smartGuidelinesRepos;}catch(error){console.error('Failed to fetch SMART guidelines repositories:',error);throw error;}}// Get repositories with progressive scanning (for real-time updates)\nasync getSmartGuidelinesRepositoriesProgressive(owner){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'user';let onRepositoryFound=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let onProgress=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{let repositories=[];let page=1;let hasMorePages=true;// Fetch all repositories using pagination\nwhile(hasMorePages){let response;if(type==='user'){response=await this.octokit.rest.repos.listForUser({username:owner,sort:'updated',per_page:100,page:page});}else{response=await this.octokit.rest.repos.listForOrg({org:owner,sort:'updated',per_page:100,page:page});}repositories=repositories.concat(response.data);// Check if there are more pages\nhasMorePages=response.data.length===100;page++;}// Handle case where user has no repositories\nif(repositories.length===0){console.log('📊 No repositories found for user, completing scan immediately');// Call progress callback to indicate completion\nif(onProgress){onProgress({current:0,total:0,currentRepo:'none',progress:100,completed:true});}return[];}// Process repositories concurrently with rate limiting and enhanced display\nconst processor=async(repo,index)=>{// Add a small delay to make scanning progress visible (similar to demo mode)\nawait new Promise(resolve=>setTimeout(resolve,100+Math.random()*200));const isCompatible=await this.checkSmartGuidelinesCompatibility(repo.owner.login,repo.name);if(isCompatible){const smartRepo={...repo,smart_guidelines_compatible:true};// Notify that a repository was found\nif(onRepositoryFound){onRepositoryFound(smartRepo);}return smartRepo;}return null;};// Use concurrent processing with max 5 parallel requests\nconst results=await processConcurrently(repositories,processor,{concurrency:5,onProgress:(completed,total,repo,result)=>{// Progress callback for completed items\nif(onProgress){onProgress({current:completed,total:total,currentRepo:repo.name,progress:Math.round(completed/total*100),completed:true});}},onItemStart:(repo,index)=>{// Progress callback for started items\nif(onProgress){onProgress({current:index+1,total:repositories.length,currentRepo:repo.name,progress:Math.round((index+1)/repositories.length*100),completed:false,started:true});}}});// Filter out null results and collect smart repositories\nconst validResults=results.filter(result=>result!==null&&!result.error);return validResults;}catch(error){console.error('Failed to fetch SMART guidelines repositories:',error);throw error;}}// Get a specific repository\nasync getRepository(owner,repo){try{// Use authenticated octokit if available, otherwise create a public instance for public repos\nconst octokit=this.isAuth()?this.octokit:new Octokit();const{data}=await octokit.rest.repos.get({owner,repo});return data;}catch(error){console.error('Failed to fetch repository:',error);throw error;}}// Get repository branches\nasync getBranches(owner,repo){try{console.log(`githubService.getBranches: Fetching branches for ${owner}/${repo}`);console.log('githubService.getBranches: Authentication status:',this.isAuth());// Use authenticated octokit if available, otherwise create a public instance for public repos\nconst octokit=this.isAuth()?this.octokit:new Octokit();console.log('githubService.getBranches: Using',this.isAuth()?'authenticated':'public','octokit instance');const{data}=await octokit.rest.repos.listBranches({owner,repo,per_page:100});console.log(`githubService.getBranches: Successfully fetched ${data.length} branches`);return data;}catch(error){console.error('githubService.getBranches: Failed to fetch branches:',error);console.error('githubService.getBranches: Error details:',{status:error.status,message:error.message,owner,repo});throw error;}}// Create a new branch\nasync createBranch(owner,repo,branchName){let fromBranch=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'main';if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{// First get the SHA of the source branch\nconst{data:refData}=await this.octokit.rest.git.getRef({owner,repo,ref:`heads/${fromBranch}`});// Create the new branch\nconst{data}=await this.octokit.rest.git.createRef({owner,repo,ref:`refs/heads/${branchName}`,sha:refData.object.sha});return data;}catch(error){console.error('Failed to create branch:',error);throw error;}}// Get a specific branch\nasync getBranch(owner,repo,branch){try{// Use authenticated octokit if available, otherwise create a public instance for public repos\nconst octokit=this.isAuth()?this.octokit:new Octokit();const{data}=await octokit.rest.repos.getBranch({owner,repo,branch});return data;}catch(error){console.error('Failed to fetch branch:',error);throw error;}}// GitHub Actions API methods\n// Get workflows for a repository (detailed version with file parsing)\nasync getWorkflows(owner,repo){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{// First, try to get the .github/workflows directory\nconst{data}=await this.octokit.rest.repos.getContent({owner,repo,path:'.github/workflows'});// Filter for YAML/YML files\nconst workflowFiles=Array.isArray(data)?data.filter(file=>file.name.endsWith('.yml')||file.name.endsWith('.yaml')):[];// Fetch workflow details for each file\nconst workflows=await Promise.all(workflowFiles.map(async file=>{try{// Get file content to parse workflow name\nconst contentResponse=await this.octokit.rest.repos.getContent({owner,repo,path:file.path});const content=decodeURIComponent(escape(atob(contentResponse.data.content)));// Parse workflow name from YAML (simple regex approach)\nconst nameMatch=content.match(/^name:\\s*(.+)$/m);const workflowName=nameMatch?nameMatch[1].replace(/['\"]/g,''):file.name.replace(/\\.(yml|yaml)$/,'');// Parse triggers\nconst onMatch=content.match(/^on:\\s*$/m);let triggers=[];if(onMatch){const pushMatch=content.match(/^\\s*push:/m);const prMatch=content.match(/^\\s*pull_request:/m);const scheduleMatch=content.match(/^\\s*schedule:/m);const workflowDispatchMatch=content.match(/^\\s*workflow_dispatch:/m);if(pushMatch)triggers.push('push');if(prMatch)triggers.push('pull_request');if(scheduleMatch)triggers.push('schedule');if(workflowDispatchMatch)triggers.push('manual');}return{name:workflowName,filename:file.name,path:file.path,size:file.size,sha:file.sha,url:file.html_url,triggers:triggers.length>0?triggers:['push'],// default to push if we can't parse\nlastModified:contentResponse.data.last_modified||'Unknown'};}catch(error){console.warn(`Failed to fetch workflow details for ${file.name}:`,error);return{name:file.name.replace(/\\.(yml|yaml)$/,''),filename:file.name,path:file.path,size:file.size,sha:file.sha,url:file.html_url,triggers:['unknown'],lastModified:'Unknown'};}}));return workflows;}catch(error){if(error.status===404){// No .github/workflows directory exists\nreturn[];}console.error('Failed to fetch workflows:',error);throw error;}}// Get workflow runs for a repository\nasync getWorkflowRuns(owner,repo){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const params={owner,repo,per_page:options.per_page||10,page:options.page||1};if(options.branch){params.branch=options.branch;}if(options.workflow_id){params.workflow_id=options.workflow_id;}const{data}=await this.octokit.rest.actions.listWorkflowRunsForRepo(params);return data;}catch(error){console.error('Failed to fetch workflow runs:',error);throw error;}}// Get workflow runs for a specific workflow\nasync getWorkflowRunsForWorkflow(owner,repo,workflow_id){let options=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const params={owner,repo,workflow_id,per_page:options.per_page||10,page:options.page||1};if(options.branch){params.branch=options.branch;}const{data}=await this.octokit.rest.actions.listWorkflowRuns(params);return data;}catch(error){console.error('Failed to fetch workflow runs for workflow:',error);throw error;}}// Trigger a workflow run\nasync triggerWorkflow(owner,repo,workflow_id){let ref=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'main';let inputs=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.actions.createWorkflowDispatch({owner,repo,workflow_id,ref,inputs});return data;}catch(error){console.error('Failed to trigger workflow:',error);throw error;}}// Re-run a workflow\nasync rerunWorkflow(owner,repo,run_id){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.actions.reRunWorkflow({owner,repo,run_id});return data;}catch(error){console.error('Failed to re-run workflow:',error);throw error;}}// Get workflow run logs\nasync getWorkflowRunLogs(owner,repo,run_id){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.actions.downloadWorkflowRunLogs({owner,repo,run_id});return data;}catch(error){console.error('Failed to get workflow run logs:',error);throw error;}}// Releases API methods\n// Get releases for a repository\nasync getReleases(owner,repo){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.repos.listReleases({owner,repo,per_page:options.per_page||10,page:options.page||1});return data;}catch(error){console.error('Failed to fetch releases:',error);throw error;}}// Get latest release\nasync getLatestRelease(owner,repo){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const{data}=await this.octokit.rest.repos.getLatestRelease({owner,repo});return data;}catch(error){console.error('Failed to fetch latest release:',error);throw error;}}// Recursively fetch BPMN files from a directory and its subdirectories\nasync getBpmnFilesRecursive(owner,repo,path){let ref=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'main';let allFiles=arguments.length>4&&arguments[4]!==undefined?arguments[4]:[];try{// Use authenticated octokit if available, otherwise create a public instance\nconst octokit=this.isAuth()?this.octokit:new Octokit();const{data}=await octokit.rest.repos.getContent({owner,repo,path,ref});// Handle single file response\nif(!Array.isArray(data)){if(data.name.endsWith('.bpmn')){allFiles.push(data);}return allFiles;}// Handle directory response\nfor(const item of data){if(item.type==='file'&&item.name.endsWith('.bpmn')){allFiles.push(item);}else if(item.type==='dir'){// Recursively search subdirectories\nawait this.getBpmnFilesRecursive(owner,repo,item.path,ref,allFiles);}}return allFiles;}catch(error){// If directory doesn't exist, return empty array (not an error)\nif(error.status===404){return allFiles;}throw error;}}// Get all BPMN files from a repository's business process directories\nasync getBpmnFiles(owner,repo){let ref=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'main';const allBpmnFiles=[];// Try both possible directory names: 'input/business-processes' and 'input/business-process'\nconst possiblePaths=['input/business-processes','input/business-process'];for(const path of possiblePaths){try{const files=await this.getBpmnFilesRecursive(owner,repo,path,ref);allBpmnFiles.push(...files);}catch(error){console.warn(`Could not fetch BPMN files from ${path}:`,error.message);// Continue trying other paths\n}}// Remove duplicates based on path (in case both directories exist and have overlapping files)\nconst uniqueFiles=allBpmnFiles.filter((file,index,self)=>index===self.findIndex(f=>f.path===file.path));return uniqueFiles;}// Get file content from GitHub repository with timeout handling\nasync getFileContent(owner,repo,path){let ref=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'main';const timeoutMs=15000;// 15 second timeout\ntry{console.log(`🚀 githubService.getFileContent: Starting request for ${owner}/${repo}/${path} (ref: ${ref})`);console.log('🔐 githubService.getFileContent: Authentication status:',this.isAuth());console.log('📋 githubService.getFileContent: Request parameters:',{owner,repo,path,ref});// Use authenticated octokit if available, otherwise create a public instance for public repos\nconst octokit=this.isAuth()?this.octokit:new Octokit();console.log('🔧 githubService.getFileContent: Using',this.isAuth()?'authenticated':'public','octokit instance');// Create a promise that rejects after timeout\nconst timeoutPromise=new Promise((_,reject)=>{console.log(`⏰ githubService.getFileContent: Setting up ${timeoutMs}ms timeout`);setTimeout(()=>{console.error(`⏰ githubService.getFileContent: Request timed out after ${timeoutMs}ms`);reject(new Error(`Request timeout after ${timeoutMs}ms`));},timeoutMs);});// Race the GitHub API call against the timeout\nconsole.log('🌐 githubService.getFileContent: Creating GitHub API promise...');const apiPromise=octokit.rest.repos.getContent({owner,repo,path,ref});console.log('📡 githubService.getFileContent: API request initiated, waiting for response...');const startTime=Date.now();const{data}=await Promise.race([apiPromise,timeoutPromise]);const responseTime=Date.now()-startTime;console.log(`✅ githubService.getFileContent: API response received in ${responseTime}ms`);console.log('📂 githubService.getFileContent: Response data type:',data.type);console.log('📊 githubService.getFileContent: Response details:',{type:data.type,name:data.name,size:data.size,encoding:data.encoding,hasContent:!!data.content});// Handle file content\nif(data.type==='file'&&data.content){// Decode base64 content\nconsole.log('🔧 githubService.getFileContent: Decoding base64 content...');console.log('📊 githubService.getFileContent: Base64 content length:',data.content.length);const content=decodeURIComponent(escape(atob(data.content)));console.log(`✅ githubService.getFileContent: Successfully fetched and decoded file content`);console.log('📏 githubService.getFileContent: Final content length:',content.length,'characters');console.log('👀 githubService.getFileContent: Content preview (first 200 chars):',content.substring(0,200));return content;}else{console.error('❌ githubService.getFileContent: Invalid response - not a file or no content');console.error('🔍 githubService.getFileContent: Full response data:',JSON.stringify(data,null,2));throw new Error('File not found or is not a file');}}catch(error){var _error$stack;console.error(`💥 githubService.getFileContent: Failed to fetch file content from ${owner}/${repo}/${path}:`,error);console.error('🔍 githubService.getFileContent: Error analysis:',{type:typeof error,status:error.status,message:error.message,name:error.name,stack:((_error$stack=error.stack)===null||_error$stack===void 0?void 0:_error$stack.substring(0,500))+'...'});// Provide more specific error messages\nif(error.message.includes('timeout')){console.error('⏰ githubService.getFileContent: Timeout error detected');throw new Error(`GitHub API request timed out after ${timeoutMs/1000} seconds. Please try again.`);}else if(error.status===403){console.error('🔒 githubService.getFileContent: 403 Forbidden error detected');throw new Error('Access denied. This repository may be private or you may have hit rate limits.');}else if(error.status===404){console.error('🔍 githubService.getFileContent: 404 Not Found error detected');throw new Error('File not found in the repository.');}else if(error.message.includes('rate limit')){console.error('🚦 githubService.getFileContent: Rate limit error detected');throw new Error('GitHub API rate limit exceeded. Please try again later.');}else if(error.message.includes('Network Error')||error.message.includes('Failed to fetch')){console.error('🌐 githubService.getFileContent: Network error detected');throw new Error('Network error occurred. Please check your internet connection and try again.');}console.error('❓ githubService.getFileContent: Unknown error type, re-throwing original error');throw error;}}// Create a commit with multiple files\nasync createCommit(owner,repo,branch,message,files){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{// Get the latest commit SHA\nconst{data:refData}=await this.octokit.rest.git.getRef({owner,repo,ref:`heads/${branch}`});const latestCommitSha=refData.object.sha;// Get the tree SHA from the latest commit\nconst{data:commitData}=await this.octokit.rest.git.getCommit({owner,repo,commit_sha:latestCommitSha});const baseTreeSha=commitData.tree.sha;// Create blobs for all files\nconst blobs=await Promise.all(files.map(async file=>{const{data:blobData}=await this.octokit.rest.git.createBlob({owner,repo,content:file.content,encoding:'utf-8'});return{path:file.path,mode:'100644',type:'blob',sha:blobData.sha};}));// Create a new tree with the blobs\nconst{data:treeData}=await this.octokit.rest.git.createTree({owner,repo,base_tree:baseTreeSha,tree:blobs});// Create the commit\nconst{data:newCommitData}=await this.octokit.rest.git.createCommit({owner,repo,message,tree:treeData.sha,parents:[latestCommitSha]});// Update the branch reference\nawait this.octokit.rest.git.updateRef({owner,repo,ref:`heads/${branch}`,sha:newCommitData.sha});return{sha:newCommitData.sha,html_url:`https://github.com/${owner}/${repo}/commit/${newCommitData.sha}`,message:newCommitData.message,author:newCommitData.author,committer:newCommitData.committer};}catch(error){console.error('Failed to create commit:',error);throw error;}}// Update a single file in the repository\nasync updateFile(owner,repo,path,content,message){let branch=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'main';let operation=arguments.length>6&&arguments[6]!==undefined?arguments[6]:'update';if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{// Use the createCommit method with a single file\nconst files=[{path:path,content:content}];const result=await this.createCommit(owner,repo,branch,message,files);return{sha:result.sha,commit:{sha:result.sha,html_url:result.html_url,message:result.message,author:result.author,committer:result.committer},content:{path:path,sha:result.sha// This will be the tree SHA, not file SHA, but sufficient for our needs\n}};}catch(error){console.error('Failed to update file:',error);throw error;}}// Get recent commits for a repository branch\nasync getRecentCommits(owner,repo){let branch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'main';let per_page=arguments.length>3&&arguments[3]!==undefined?arguments[3]:5;if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}const startTime=Date.now();this.logger.apiCall('GET',`/repos/${owner}/${repo}/commits`,{sha:branch,per_page});try{const response=await this.octokit.rest.repos.listCommits({owner,repo,sha:branch,per_page});this.logger.apiResponse('GET',`/repos/${owner}/${repo}/commits`,response.status,Date.now()-startTime);return response.data.map(commit=>({sha:commit.sha,message:commit.commit.message,author:{name:commit.commit.author.name,email:commit.commit.author.email,date:commit.commit.author.date},committer:{name:commit.commit.committer.name,email:commit.commit.committer.email,date:commit.commit.committer.date},html_url:commit.html_url,stats:commit.stats}));}catch(error){this.logger.apiResponse('GET',`/repos/${owner}/${repo}/commits`,error.status||'error',Date.now()-startTime);console.error('Failed to fetch recent commits:',error);throw error;}}// Get open pull requests count\nasync getOpenPullRequestsCount(owner,repo){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}const startTime=Date.now();this.logger.apiCall('GET',`/repos/${owner}/${repo}/pulls`,{state:'open',per_page:1});try{const response=await this.octokit.rest.pulls.list({owner,repo,state:'open',per_page:1});this.logger.apiResponse('GET',`/repos/${owner}/${repo}/pulls`,response.status,Date.now()-startTime);// GitHub includes the total count in the response headers\nconst linkHeader=response.headers.link;if(linkHeader&&linkHeader.includes('rel=\"last\"')){const lastPageMatch=linkHeader.match(/page=(\\d+)>; rel=\"last\"/);if(lastPageMatch){return parseInt(lastPageMatch[1],10);}}// Fallback: use the length of returned items (may not be accurate for large counts)\nreturn response.data.length;}catch(error){this.logger.apiResponse('GET',`/repos/${owner}/${repo}/pulls`,error.status||'error',Date.now()-startTime);console.error('Failed to fetch pull requests count:',error);throw error;}}// Get pull requests with pagination and search support\nasync getPullRequests(owner,repo){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};// Support unauthenticated access for public repositories\nconst octokit=this.isAuth()?this.octokit:new Octokit();const{state='all',// 'open', 'closed', 'all'\nper_page=5,page=1,sort='updated',// 'created', 'updated', 'popularity'\ndirection='desc',search=null}=options;const startTime=Date.now();this.logger.apiCall('GET',`/repos/${owner}/${repo}/pulls`,{state,per_page,page,sort,direction});try{let response;if(search){// Use search API for filtering by title\nconst searchQuery=`repo:${owner}/${repo} is:pr ${search} in:title`;response=await octokit.rest.search.issuesAndPullRequests({q:searchQuery,sort,order:direction,per_page,page});// Transform search results to match pulls.list format\nconst pullRequests=response.data.items.map(item=>{var _item$pull_request,_item$pull_request2,_item$pull_request2$h,_item$pull_request3,_item$pull_request3$h,_item$pull_request4,_item$pull_request4$b,_item$pull_request5;return{id:item.id,number:item.number,title:item.title,state:item.state,created_at:item.created_at,updated_at:item.updated_at,closed_at:item.closed_at,merged_at:((_item$pull_request=item.pull_request)===null||_item$pull_request===void 0?void 0:_item$pull_request.merged_at)||null,user:item.user,head:{ref:((_item$pull_request2=item.pull_request)===null||_item$pull_request2===void 0?void 0:(_item$pull_request2$h=_item$pull_request2.head)===null||_item$pull_request2$h===void 0?void 0:_item$pull_request2$h.ref)||'unknown',sha:((_item$pull_request3=item.pull_request)===null||_item$pull_request3===void 0?void 0:(_item$pull_request3$h=_item$pull_request3.head)===null||_item$pull_request3$h===void 0?void 0:_item$pull_request3$h.sha)||'unknown'},base:{ref:((_item$pull_request4=item.pull_request)===null||_item$pull_request4===void 0?void 0:(_item$pull_request4$b=_item$pull_request4.base)===null||_item$pull_request4$b===void 0?void 0:_item$pull_request4$b.ref)||'main'},html_url:item.html_url,mergeable:((_item$pull_request5=item.pull_request)===null||_item$pull_request5===void 0?void 0:_item$pull_request5.mergeable)||null,draft:item.draft||false};});response.data=pullRequests;}else{// Use regular pulls API\nresponse=await octokit.rest.pulls.list({owner,repo,state,per_page,page,sort,direction});}this.logger.apiResponse('GET',`/repos/${owner}/${repo}/pulls`,response.status,Date.now()-startTime);return{data:response.data,pagination:{page,per_page,total:search?response.data.total_count:null,hasMore:response.data.length===per_page}};}catch(error){this.logger.apiResponse('GET',`/repos/${owner}/${repo}/pulls`,error.status||'error',Date.now()-startTime);console.error('Failed to fetch pull requests:',error);throw error;}}// Get recently deployed/merged pull requests (for deployment landing page)\nasync getRecentlyDeployedPRs(owner,repo){let limit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:5;try{const response=await this.getPullRequests(owner,repo,{state:'closed',per_page:limit*2,// Get extra to filter for merged ones\nsort:'updated',direction:'desc'});// Filter for merged PRs (deployed ones)\nconst mergedPRs=response.data.filter(pr=>pr.merged_at)// Only merged PRs\n.slice(0,limit);// Take the requested limit\nreturn mergedPRs.map(pr=>({id:pr.id,number:pr.number,title:pr.title,merged_at:pr.merged_at,head_branch:pr.head.ref,head_sha:pr.head.sha,user:pr.user,html_url:pr.html_url,// Generate branch URL for this deployment\nbranch_url:`./sgex/${pr.head.ref.replace(/\\//g,'-')}/index.html`}));}catch(error){console.error('Failed to fetch recently deployed PRs:',error);throw error;}}// Get open issues count\nasync getOpenIssuesCount(owner,repo){if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}const startTime=Date.now();this.logger.apiCall('GET',`/repos/${owner}/${repo}/issues`,{state:'open',per_page:1});try{const response=await this.octokit.rest.issues.listForRepo({owner,repo,state:'open',per_page:1});this.logger.apiResponse('GET',`/repos/${owner}/${repo}/issues`,response.status,Date.now()-startTime);// GitHub includes the total count in the response headers\nconst linkHeader=response.headers.link;if(linkHeader&&linkHeader.includes('rel=\"last\"')){const lastPageMatch=linkHeader.match(/page=(\\d+)>; rel=\"last\"/);if(lastPageMatch){return parseInt(lastPageMatch[1],10);}}// Fallback: use the length of returned items (may not be accurate for large counts)\nreturn response.data.length;}catch(error){this.logger.apiResponse('GET',`/repos/${owner}/${repo}/issues`,error.status||'error',Date.now()-startTime);console.error('Failed to fetch issues count:',error);throw error;}}// Get repository statistics (combined method for efficiency)\nasync getRepositoryStats(owner,repo){let branch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'main';if(!this.isAuth()){throw new Error('Not authenticated with GitHub');}try{const[recentCommits,openPRsCount,openIssuesCount]=await Promise.allSettled([this.getRecentCommits(owner,repo,branch,1),this.getOpenPullRequestsCount(owner,repo),this.getOpenIssuesCount(owner,repo)]);return{recentCommits:recentCommits.status==='fulfilled'?recentCommits.value:[],openPullRequestsCount:openPRsCount.status==='fulfilled'?openPRsCount.value:0,openIssuesCount:openIssuesCount.status==='fulfilled'?openIssuesCount.value:0,errors:{recentCommits:recentCommits.status==='rejected'?recentCommits.reason:null,openPullRequestsCount:openPRsCount.status==='rejected'?openPRsCount.reason:null,openIssuesCount:openIssuesCount.status==='rejected'?openIssuesCount.reason:null}};}catch(error){console.error('Failed to fetch repository stats:',error);throw error;}}// Get directory contents (supports both authenticated and unauthenticated access)\nasync getDirectoryContents(owner,repo){let path=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';let ref=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'main';try{// Create temporary Octokit instance for unauthenticated access if needed\nconst octokit=this.isAuth()?this.octokit:new Octokit();const{data}=await octokit.rest.repos.getContent({owner,repo,path,ref});if(Array.isArray(data)){return data;}else{throw new Error('Not a directory');}}catch(error){console.error(`Failed to get directory contents for ${path}:`,error);throw error;}}// Get commits for a repository (supports unauthenticated access)\nasync getCommits(owner,repo){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};try{// Create temporary Octokit instance for unauthenticated access if needed\nconst octokit=this.isAuth()?this.octokit:new Octokit();const params={owner,repo,per_page:options.per_page||10,page:options.page||1};if(options.sha){params.sha=options.sha;}if(options.since){params.since=options.since;}if(options.until){params.until=options.until;}const{data}=await octokit.rest.repos.listCommits(params);return data;}catch(error){console.error('Failed to fetch commits:',error);throw error;}}// Get issues for a repository (supports unauthenticated access)\nasync getIssues(owner,repo){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};try{// Create temporary Octokit instance for unauthenticated access if needed\nconst octokit=this.isAuth()?this.octokit:new Octokit();const params={owner,repo,state:options.state||'all',per_page:options.per_page||30,page:options.page||1};if(options.labels){params.labels=options.labels;}if(options.milestone){params.milestone=options.milestone;}const{data}=await octokit.rest.issues.listForRepo(params);return data;}catch(error){console.error('Failed to fetch issues:',error);throw error;}}// Logout\nlogout(){this.octokit=null;this.isAuthenticated=false;this.tokenType=null;this.permissions=null;localStorage.removeItem('github_token');sessionStorage.removeItem('github_token');// Clear branch context on logout\ntry{const{default:branchContextService}=require('../services/branchContextService');branchContextService.clearAllBranchContext();}catch(error){// Service might not be available during testing\nsessionStorage.removeItem('sgex_branch_context');}}}// Create a singleton instance\nconst githubService=new GitHubService();export default githubService;","map":{"version":3,"names":["Octokit","processConcurrently","repositoryCompatibilityCache","logger","GitHubService","constructor","octokit","isAuthenticated","permissions","tokenType","getLogger","debug","authenticate","token","startTime","Date","now","auth","tokenProvided","tokenLength","length","duration","performance","error","message","console","authenticateWithOctokit","octokitInstance","checkTokenPermissions","isAuth","Error","apiCall","response","request","apiResponse","status","rateLimitStart","rateLimit","rest","get","data","resources","core","hasCore","rateLimitError","warn","type","user","username","login","apiError","checkRepositoryWritePermissions","owner","repo","currentUser","getCurrentUser","repos","getCollaboratorPermissionLevel","hasWriteAccess","includes","permission","users","getAuthenticated","getUserOrganizations","orgs","listForAuthenticatedUser","getOrganization","orgLogin","org","getUser","getByUsername","getWHOOrganization","whoData","id","display_name","name","description","avatar_url","html_url","can_create_repositories","can_create_private_repositories","plan","private_repos","isWHO","getRepositories","arguments","undefined","getSmartGuidelinesRepositories","checkSmartGuidelinesCompatibility","retryCount","cachedResult","getContent","path","content","decodeURIComponent","escape","atob","isCompatible","set","delay","process","env","NODE_ENV","Promise","resolve","setTimeout","repositories","page","hasMorePages","listForUser","sort","per_page","listForOrg","concat","smartGuidelinesRepos","push","smart_guidelines_compatible","getSmartGuidelinesRepositoriesProgressive","onRepositoryFound","onProgress","log","current","total","currentRepo","progress","completed","processor","index","Math","random","smartRepo","results","concurrency","result","round","onItemStart","started","validResults","filter","getRepository","getBranches","listBranches","createBranch","branchName","fromBranch","refData","git","getRef","ref","createRef","sha","object","getBranch","branch","getWorkflows","workflowFiles","Array","isArray","file","endsWith","workflows","all","map","contentResponse","nameMatch","match","workflowName","replace","onMatch","triggers","pushMatch","prMatch","scheduleMatch","workflowDispatchMatch","filename","size","url","lastModified","last_modified","getWorkflowRuns","options","params","workflow_id","actions","listWorkflowRunsForRepo","getWorkflowRunsForWorkflow","listWorkflowRuns","triggerWorkflow","inputs","createWorkflowDispatch","rerunWorkflow","run_id","reRunWorkflow","getWorkflowRunLogs","downloadWorkflowRunLogs","getReleases","listReleases","getLatestRelease","getBpmnFilesRecursive","allFiles","item","getBpmnFiles","allBpmnFiles","possiblePaths","files","uniqueFiles","self","findIndex","f","getFileContent","timeoutMs","timeoutPromise","_","reject","apiPromise","race","responseTime","encoding","hasContent","substring","JSON","stringify","_error$stack","stack","createCommit","latestCommitSha","commitData","getCommit","commit_sha","baseTreeSha","tree","blobs","blobData","createBlob","mode","treeData","createTree","base_tree","newCommitData","parents","updateRef","author","committer","updateFile","operation","commit","getRecentCommits","listCommits","email","date","stats","getOpenPullRequestsCount","state","pulls","list","linkHeader","headers","link","lastPageMatch","parseInt","getPullRequests","direction","search","searchQuery","issuesAndPullRequests","q","order","pullRequests","items","_item$pull_request","_item$pull_request2","_item$pull_request2$h","_item$pull_request3","_item$pull_request3$h","_item$pull_request4","_item$pull_request4$b","_item$pull_request5","number","title","created_at","updated_at","closed_at","merged_at","pull_request","head","base","mergeable","draft","pagination","total_count","hasMore","getRecentlyDeployedPRs","limit","mergedPRs","pr","slice","head_branch","head_sha","branch_url","getOpenIssuesCount","issues","listForRepo","getRepositoryStats","recentCommits","openPRsCount","openIssuesCount","allSettled","value","openPullRequestsCount","errors","reason","getDirectoryContents","getCommits","since","until","getIssues","labels","milestone","logout","localStorage","removeItem","sessionStorage","default","branchContextService","require","clearAllBranchContext","githubService"],"sources":["/home/runner/work/sgex/sgex/src/services/githubService.js"],"sourcesContent":["import { Octokit } from '@octokit/rest';\nimport { processConcurrently } from '../utils/concurrency';\nimport repositoryCompatibilityCache from '../utils/repositoryCompatibilityCache';\nimport logger from '../utils/logger';\n\nclass GitHubService {\n  constructor() {\n    this.octokit = null;\n    this.isAuthenticated = false;\n    this.permissions = null;\n    this.tokenType = null; // 'classic', 'fine-grained', or 'oauth'\n    this.logger = logger.getLogger('GitHubService');\n    this.logger.debug('GitHubService instance created');\n  }\n\n  // Initialize with a GitHub token (supports both OAuth and PAT tokens)\n  authenticate(token) {\n    const startTime = Date.now();\n    this.logger.auth('Starting authentication', { tokenProvided: !!token, tokenLength: token ? token.length : 0 });\n    \n    try {\n      this.octokit = new Octokit({\n        auth: token,\n      });\n      this.isAuthenticated = true;\n      \n      const duration = Date.now() - startTime;\n      this.logger.auth('Authentication successful', { duration });\n      this.logger.performance('GitHub authentication', duration);\n      \n      return true;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      this.logger.auth('Authentication failed', { error: error.message, duration });\n      console.error('Failed to authenticate with GitHub:', error);\n      this.isAuthenticated = false;\n      return false;\n    }\n  }\n\n  // Initialize with an existing Octokit instance (for OAuth flow)\n  authenticateWithOctokit(octokitInstance) {\n    this.logger.auth('Starting OAuth authentication with Octokit instance');\n    \n    try {\n      this.octokit = octokitInstance;\n      this.isAuthenticated = true;\n      this.tokenType = 'oauth';\n      \n      this.logger.auth('OAuth authentication successful', { tokenType: this.tokenType });\n      return true;\n    } catch (error) {\n      this.logger.auth('OAuth authentication failed', { error: error.message });\n      console.error('Failed to authenticate with Octokit instance:', error);\n      this.isAuthenticated = false;\n      return false;\n    }\n  }\n\n  // Check token permissions and type\n  async checkTokenPermissions() {\n    if (!this.isAuth()) {\n      const error = new Error('Not authenticated with GitHub');\n      this.logger.error('Token permission check failed - not authenticated');\n      throw error;\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', '/user', null);\n\n    try {\n      // Try to get token info to determine type and permissions\n      const response = await this.octokit.request('GET /user');\n      this.logger.apiResponse('GET', '/user', response.status, Date.now() - startTime);\n      \n      // Check if this is a fine-grained token by trying to access rate limit info\n      try {\n        const rateLimitStart = Date.now();\n        this.logger.apiCall('GET', '/rate_limit', null);\n        const rateLimit = await this.octokit.rest.rateLimit.get();\n        this.logger.apiResponse('GET', '/rate_limit', rateLimit.status, Date.now() - rateLimitStart);\n        \n        // Fine-grained tokens have different rate limit structure\n        this.tokenType = rateLimit.data.resources.core ? 'classic' : 'fine-grained';\n        this.logger.debug('Token type determined', { tokenType: this.tokenType, hasCore: !!rateLimit.data.resources.core });\n      } catch (rateLimitError) {\n        this.tokenType = 'unknown';\n        this.logger.warn('Could not determine token type from rate limit', { error: rateLimitError.message });\n      }\n\n      const permissions = {\n        type: this.tokenType,\n        user: response.data\n      };\n      \n      this.permissions = permissions;\n      this.logger.debug('Token permissions checked successfully', { \n        tokenType: this.tokenType, \n        username: response.data.login \n      });\n      \n      return permissions;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      this.logger.apiError('GET', '/user', error);\n      this.logger.performance('Token permission check (failed)', duration);\n      console.error('Failed to check token permissions:', error);\n      throw error;\n    }\n  }\n\n  // Check if we have write permissions for a specific repository\n  async checkRepositoryWritePermissions(owner, repo) {\n    if (!this.isAuth()) {\n      this.logger.warn('Cannot check repository write permissions - not authenticated', { owner, repo });\n      return false;\n    }\n\n    const startTime = Date.now();\n    this.logger.debug('Checking write permissions for repository', { owner, repo });\n\n    try {\n      // Get current user first\n      const currentUser = await this.getCurrentUser();\n      const username = currentUser.login;\n      \n      this.logger.apiCall('GET', `/repos/${owner}/${repo}/collaborators/${username}/permission`, null);\n      \n      // Try to get repository collaborator permissions\n      const { data } = await this.octokit.rest.repos.getCollaboratorPermissionLevel({\n        owner,\n        repo,\n        username\n      });\n      \n      const duration = Date.now() - startTime;\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/collaborators/${username}/permission`, 200, duration);\n      \n      const hasWriteAccess = ['write', 'admin'].includes(data.permission);\n      this.logger.debug('Repository write permissions checked', { \n        owner, \n        repo, \n        permission: data.permission, \n        hasWriteAccess \n      });\n      \n      return hasWriteAccess;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      this.logger.apiError('GET', `/repos/${owner}/${repo}/collaborators/*/permission`, error);\n      this.logger.performance('Repository write permission check (failed)', duration);\n      \n      // If we can't check permissions, assume we don't have write access\n      console.warn('Could not check repository write permissions:', error);\n      this.logger.warn('Assuming no write access due to permission check failure', { owner, repo, error: error.message });\n      return false;\n    }\n  }\n\n  // Check if authenticated\n  isAuth() {\n    return this.isAuthenticated && this.octokit !== null;\n  }\n\n  // Get current user data\n  async getCurrentUser() {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.users.getAuthenticated();\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch user data:', error);\n      throw error;\n    }\n  }\n\n  // Get user's organizations\n  async getUserOrganizations() {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.orgs.listForAuthenticatedUser();\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch organizations:', error);\n      throw error;\n    }\n  }\n\n  // Get specific organization data (public data, no auth required)\n  async getOrganization(orgLogin) {\n    try {\n      // Create a temporary Octokit instance for public API calls if we don't have one\n      const octokit = this.octokit || new Octokit();\n      \n      const { data } = await octokit.rest.orgs.get({\n        org: orgLogin\n      });\n      return data;\n    } catch (error) {\n      console.error(`Failed to fetch organization ${orgLogin}:`, error);\n      throw error;\n    }\n  }\n\n  // Get specific user data (public data, no auth required)\n  async getUser(username) {\n    try {\n      // Create a temporary Octokit instance for public API calls if we don't have one\n      const octokit = this.octokit || new Octokit();\n      \n      const { data } = await octokit.rest.users.getByUsername({\n        username\n      });\n      return data;\n    } catch (error) {\n      console.error(`Failed to fetch user ${username}:`, error);\n      throw error;\n    }\n  }\n\n  // Get WHO organization data with fresh avatar\n  async getWHOOrganization() {\n    try {\n      const whoData = await this.getOrganization('WorldHealthOrganization');\n      return {\n        id: whoData.id,\n        login: whoData.login,\n        display_name: whoData.name || 'World Health Organization',\n        description: whoData.description || 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n        avatar_url: whoData.avatar_url,\n        html_url: whoData.html_url,\n        type: 'Organization',\n        permissions: {\n          can_create_repositories: true,\n          can_create_private_repositories: true\n        },\n        plan: {\n          name: 'Organization',\n          private_repos: 'unlimited'\n        },\n        isWHO: true\n      };\n    } catch (error) {\n      console.warn('Could not fetch WHO organization data from API, using fallback:', error);\n      // Return hardcoded fallback data\n      return {\n        id: 'who-organization',\n        login: 'WorldHealthOrganization',\n        display_name: 'World Health Organization',\n        description: 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n        avatar_url: 'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',\n        html_url: 'https://github.com/WorldHealthOrganization',\n        type: 'Organization',\n        permissions: {\n          can_create_repositories: true,\n          can_create_private_repositories: true\n        },\n        plan: {\n          name: 'Organization',\n          private_repos: 'unlimited'\n        },\n        isWHO: true\n      };\n    }\n  }\n\n  // Get repositories for a user or organization (now filters by SMART Guidelines compatibility)\n  async getRepositories(owner, type = 'user') {\n    // Use the new SMART guidelines filtering method\n    return this.getSmartGuidelinesRepositories(owner, type);\n  }\n\n  // Check if a repository has sushi-config.yaml with smart.who.int.base dependency\n  async checkSmartGuidelinesCompatibility(owner, repo, retryCount = 2) {\n    if (!this.isAuth()) {\n      return false;\n    }\n\n    // Check cache first to prevent redundant downloads\n    const cachedResult = repositoryCompatibilityCache.get(owner, repo);\n    if (cachedResult !== null) {\n      return cachedResult;\n    }\n\n    try {\n      // Try to get sushi-config.yaml from the repository root\n      const { data } = await this.octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path: 'sushi-config.yaml',\n      });\n\n      if (data.type === 'file' && data.content) {\n        // Decode base64 content (browser-compatible)\n        const content = decodeURIComponent(escape(atob(data.content)));\n        \n        // Check if the content contains smart.who.int.base in dependencies\n        const isCompatible = content.includes('smart.who.int.base');\n        \n        // Cache the result\n        repositoryCompatibilityCache.set(owner, repo, isCompatible);\n        return isCompatible;\n      }\n      \n      // Cache negative result\n      repositoryCompatibilityCache.set(owner, repo, false);\n      return false;\n    } catch (error) {\n      // If it's a 404 (file not found), retry once more in case of temporary issues\n      if (error.status === 404 && retryCount > 0) {\n        console.warn(`File not found for ${owner}/${repo}, retrying... (${retryCount} attempts left)`);\n        // Use shorter delay in test environment\n        const delay = process.env.NODE_ENV === 'test' ? 10 : 1000;\n        await new Promise(resolve => setTimeout(resolve, delay));\n        return this.checkSmartGuidelinesCompatibility(owner, repo, retryCount - 1);\n      }\n      \n      // For any error (including rate limiting, network errors, or file not found after retries),\n      // strictly return false - no fallback logic\n      console.warn(`Failed to check ${owner}/${repo} for sushi-config.yaml with smart.who.int.base dependency:`, error.message);\n      \n      // Cache negative result\n      repositoryCompatibilityCache.set(owner, repo, false);\n      return false;\n    }\n  }\n\n\n\n  // Get repositories that are SMART guidelines compatible\n  async getSmartGuidelinesRepositories(owner, type = 'user') {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      let repositories = [];\n      let page = 1;\n      let hasMorePages = true;\n\n      // Fetch all repositories using pagination\n      while (hasMorePages) {\n        let response;\n        if (type === 'user') {\n          response = await this.octokit.rest.repos.listForUser({\n            username: owner,\n            sort: 'updated',\n            per_page: 100,\n            page: page,\n          });\n        } else {\n          response = await this.octokit.rest.repos.listForOrg({\n            org: owner,\n            sort: 'updated',\n            per_page: 100,\n            page: page,\n          });\n        }\n\n        repositories = repositories.concat(response.data);\n        \n        // Check if there are more pages\n        hasMorePages = response.data.length === 100;\n        page++;\n      }\n\n      // Check each repository for SMART guidelines compatibility\n      const smartGuidelinesRepos = [];\n      for (const repo of repositories) {\n        const isCompatible = await this.checkSmartGuidelinesCompatibility(repo.owner.login, repo.name);\n        if (isCompatible) {\n          smartGuidelinesRepos.push({\n            ...repo,\n            smart_guidelines_compatible: true\n          });\n        }\n      }\n\n      return smartGuidelinesRepos;\n    } catch (error) {\n      console.error('Failed to fetch SMART guidelines repositories:', error);\n      throw error;\n    }\n  }\n\n  // Get repositories with progressive scanning (for real-time updates)\n  async getSmartGuidelinesRepositoriesProgressive(owner, type = 'user', onRepositoryFound = null, onProgress = null) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      let repositories = [];\n      let page = 1;\n      let hasMorePages = true;\n\n      // Fetch all repositories using pagination\n      while (hasMorePages) {\n        let response;\n        if (type === 'user') {\n          response = await this.octokit.rest.repos.listForUser({\n            username: owner,\n            sort: 'updated',\n            per_page: 100,\n            page: page,\n          });\n        } else {\n          response = await this.octokit.rest.repos.listForOrg({\n            org: owner,\n            sort: 'updated',\n            per_page: 100,\n            page: page,\n          });\n        }\n\n        repositories = repositories.concat(response.data);\n        \n        // Check if there are more pages\n        hasMorePages = response.data.length === 100;\n        page++;\n      }\n\n      // Handle case where user has no repositories\n      if (repositories.length === 0) {\n        console.log('📊 No repositories found for user, completing scan immediately');\n        // Call progress callback to indicate completion\n        if (onProgress) {\n          onProgress({\n            current: 0,\n            total: 0,\n            currentRepo: 'none',\n            progress: 100,\n            completed: true\n          });\n        }\n        return [];\n      }\n\n      // Process repositories concurrently with rate limiting and enhanced display\n      const processor = async (repo, index) => {\n        // Add a small delay to make scanning progress visible (similar to demo mode)\n        await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));\n        \n        const isCompatible = await this.checkSmartGuidelinesCompatibility(repo.owner.login, repo.name);\n        \n        if (isCompatible) {\n          const smartRepo = {\n            ...repo,\n            smart_guidelines_compatible: true\n          };\n          \n          // Notify that a repository was found\n          if (onRepositoryFound) {\n            onRepositoryFound(smartRepo);\n          }\n          \n          return smartRepo;\n        }\n        \n        return null;\n      };\n\n      // Use concurrent processing with max 5 parallel requests\n      const results = await processConcurrently(repositories, processor, {\n        concurrency: 5,\n        onProgress: (completed, total, repo, result) => {\n          // Progress callback for completed items\n          if (onProgress) {\n            onProgress({\n              current: completed,\n              total: total,\n              currentRepo: repo.name,\n              progress: Math.round((completed / total) * 100),\n              completed: true\n            });\n          }\n        },\n        onItemStart: (repo, index) => {\n          // Progress callback for started items\n          if (onProgress) {\n            onProgress({\n              current: index + 1,\n              total: repositories.length,\n              currentRepo: repo.name,\n              progress: Math.round(((index + 1) / repositories.length) * 100),\n              completed: false,\n              started: true\n            });\n          }\n        }\n      });\n\n      // Filter out null results and collect smart repositories\n      const validResults = results.filter(result => result !== null && !result.error);\n      \n      return validResults;\n    } catch (error) {\n      console.error('Failed to fetch SMART guidelines repositories:', error);\n      throw error;\n    }\n  }\n\n  // Get a specific repository\n  async getRepository(owner, repo) {\n    try {\n      // Use authenticated octokit if available, otherwise create a public instance for public repos\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const { data } = await octokit.rest.repos.get({\n        owner,\n        repo,\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch repository:', error);\n      throw error;\n    }  \n  }\n\n  // Get repository branches\n  async getBranches(owner, repo) {\n    try {\n      console.log(`githubService.getBranches: Fetching branches for ${owner}/${repo}`);\n      console.log('githubService.getBranches: Authentication status:', this.isAuth());\n      \n      // Use authenticated octokit if available, otherwise create a public instance for public repos\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      console.log('githubService.getBranches: Using', this.isAuth() ? 'authenticated' : 'public', 'octokit instance');\n      \n      const { data } = await octokit.rest.repos.listBranches({\n        owner,\n        repo,\n        per_page: 100\n      });\n      \n      console.log(`githubService.getBranches: Successfully fetched ${data.length} branches`);\n      return data;\n    } catch (error) {\n      console.error('githubService.getBranches: Failed to fetch branches:', error);\n      console.error('githubService.getBranches: Error details:', {\n        status: error.status,\n        message: error.message,\n        owner,\n        repo\n      });\n      throw error;\n    }\n  }\n\n  // Create a new branch\n  async createBranch(owner, repo, branchName, fromBranch = 'main') {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      // First get the SHA of the source branch\n      const { data: refData } = await this.octokit.rest.git.getRef({\n        owner,\n        repo,\n        ref: `heads/${fromBranch}`\n      });\n\n      // Create the new branch\n      const { data } = await this.octokit.rest.git.createRef({\n        owner,\n        repo,\n        ref: `refs/heads/${branchName}`,\n        sha: refData.object.sha\n      });\n\n      return data;\n    } catch (error) {\n      console.error('Failed to create branch:', error);\n      throw error;\n    }\n  }\n\n  // Get a specific branch\n  async getBranch(owner, repo, branch) {\n    try {\n      // Use authenticated octokit if available, otherwise create a public instance for public repos\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const { data } = await octokit.rest.repos.getBranch({\n        owner,\n        repo,\n        branch\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch branch:', error);\n      throw error;\n    }\n  }\n\n  // GitHub Actions API methods\n  \n  // Get workflows for a repository (detailed version with file parsing)\n  async getWorkflows(owner, repo) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      // First, try to get the .github/workflows directory\n      const { data } = await this.octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path: '.github/workflows'\n      });\n\n      // Filter for YAML/YML files\n      const workflowFiles = Array.isArray(data) \n        ? data.filter(file => file.name.endsWith('.yml') || file.name.endsWith('.yaml'))\n        : [];\n\n      // Fetch workflow details for each file\n      const workflows = await Promise.all(\n        workflowFiles.map(async (file) => {\n          try {\n            // Get file content to parse workflow name\n            const contentResponse = await this.octokit.rest.repos.getContent({\n              owner,\n              repo,\n              path: file.path\n            });\n\n            const content = decodeURIComponent(escape(atob(contentResponse.data.content)));\n            \n            // Parse workflow name from YAML (simple regex approach)\n            const nameMatch = content.match(/^name:\\s*(.+)$/m);\n            const workflowName = nameMatch ? nameMatch[1].replace(/['\"]/g, '') : file.name.replace(/\\.(yml|yaml)$/, '');\n\n            // Parse triggers\n            const onMatch = content.match(/^on:\\s*$/m);\n            let triggers = [];\n            if (onMatch) {\n              const pushMatch = content.match(/^\\s*push:/m);\n              const prMatch = content.match(/^\\s*pull_request:/m);\n              const scheduleMatch = content.match(/^\\s*schedule:/m);\n              const workflowDispatchMatch = content.match(/^\\s*workflow_dispatch:/m);\n              \n              if (pushMatch) triggers.push('push');\n              if (prMatch) triggers.push('pull_request');\n              if (scheduleMatch) triggers.push('schedule');\n              if (workflowDispatchMatch) triggers.push('manual');\n            }\n\n            return {\n              name: workflowName,\n              filename: file.name,\n              path: file.path,\n              size: file.size,\n              sha: file.sha,\n              url: file.html_url,\n              triggers: triggers.length > 0 ? triggers : ['push'], // default to push if we can't parse\n              lastModified: contentResponse.data.last_modified || 'Unknown'\n            };\n          } catch (error) {\n            console.warn(`Failed to fetch workflow details for ${file.name}:`, error);\n            return {\n              name: file.name.replace(/\\.(yml|yaml)$/, ''),\n              filename: file.name,\n              path: file.path,\n              size: file.size,\n              sha: file.sha,\n              url: file.html_url,\n              triggers: ['unknown'],\n              lastModified: 'Unknown'\n            };\n          }\n        })\n      );\n\n      return workflows;\n    } catch (error) {\n      if (error.status === 404) {\n        // No .github/workflows directory exists\n        return [];\n      }\n      console.error('Failed to fetch workflows:', error);\n      throw error;\n    }\n  }\n\n  // Get workflow runs for a repository\n  async getWorkflowRuns(owner, repo, options = {}) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const params = {\n        owner,\n        repo,\n        per_page: options.per_page || 10,\n        page: options.page || 1\n      };\n\n      if (options.branch) {\n        params.branch = options.branch;\n      }\n\n      if (options.workflow_id) {\n        params.workflow_id = options.workflow_id;\n      }\n\n      const { data } = await this.octokit.rest.actions.listWorkflowRunsForRepo(params);\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch workflow runs:', error);\n      throw error;\n    }\n  }\n\n  // Get workflow runs for a specific workflow\n  async getWorkflowRunsForWorkflow(owner, repo, workflow_id, options = {}) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const params = {\n        owner,\n        repo,\n        workflow_id,\n        per_page: options.per_page || 10,\n        page: options.page || 1\n      };\n\n      if (options.branch) {\n        params.branch = options.branch;\n      }\n\n      const { data } = await this.octokit.rest.actions.listWorkflowRuns(params);\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch workflow runs for workflow:', error);\n      throw error;\n    }\n  }\n\n  // Trigger a workflow run\n  async triggerWorkflow(owner, repo, workflow_id, ref = 'main', inputs = {}) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.actions.createWorkflowDispatch({\n        owner,\n        repo,\n        workflow_id,\n        ref,\n        inputs\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to trigger workflow:', error);\n      throw error;\n    }\n  }\n\n  // Re-run a workflow\n  async rerunWorkflow(owner, repo, run_id) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.actions.reRunWorkflow({\n        owner,\n        repo,\n        run_id\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to re-run workflow:', error);\n      throw error;\n    }\n  }\n\n  // Get workflow run logs\n  async getWorkflowRunLogs(owner, repo, run_id) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.actions.downloadWorkflowRunLogs({\n        owner,\n        repo,\n        run_id\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to get workflow run logs:', error);\n      throw error;\n    }\n  }\n\n  // Releases API methods\n\n  // Get releases for a repository\n  async getReleases(owner, repo, options = {}) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.repos.listReleases({\n        owner,\n        repo,\n        per_page: options.per_page || 10,\n        page: options.page || 1\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch releases:', error);\n      throw error;\n    }\n  }\n\n  // Get latest release\n  async getLatestRelease(owner, repo) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.repos.getLatestRelease({\n        owner,\n        repo\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch latest release:', error);\n      throw error;\n    }\n  }\n\n  // Recursively fetch BPMN files from a directory and its subdirectories\n  async getBpmnFilesRecursive(owner, repo, path, ref = 'main', allFiles = []) {\n    try {\n      // Use authenticated octokit if available, otherwise create a public instance\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const { data } = await octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path,\n        ref\n      });\n\n      // Handle single file response\n      if (!Array.isArray(data)) {\n        if (data.name.endsWith('.bpmn')) {\n          allFiles.push(data);\n        }\n        return allFiles;\n      }\n\n      // Handle directory response\n      for (const item of data) {\n        if (item.type === 'file' && item.name.endsWith('.bpmn')) {\n          allFiles.push(item);\n        } else if (item.type === 'dir') {\n          // Recursively search subdirectories\n          await this.getBpmnFilesRecursive(owner, repo, item.path, ref, allFiles);\n        }\n      }\n\n      return allFiles;\n    } catch (error) {\n      // If directory doesn't exist, return empty array (not an error)\n      if (error.status === 404) {\n        return allFiles;\n      }\n      throw error;\n    }\n  }\n\n  // Get all BPMN files from a repository's business process directories\n  async getBpmnFiles(owner, repo, ref = 'main') {\n    const allBpmnFiles = [];\n    \n    // Try both possible directory names: 'input/business-processes' and 'input/business-process'\n    const possiblePaths = [\n      'input/business-processes',\n      'input/business-process'\n    ];\n\n    for (const path of possiblePaths) {\n      try {\n        const files = await this.getBpmnFilesRecursive(owner, repo, path, ref);\n        allBpmnFiles.push(...files);\n      } catch (error) {\n        console.warn(`Could not fetch BPMN files from ${path}:`, error.message);\n        // Continue trying other paths\n      }\n    }\n\n    // Remove duplicates based on path (in case both directories exist and have overlapping files)\n    const uniqueFiles = allBpmnFiles.filter((file, index, self) => \n      index === self.findIndex(f => f.path === file.path)\n    );\n\n    return uniqueFiles;\n  }\n\n  // Get file content from GitHub repository with timeout handling\n  async getFileContent(owner, repo, path, ref = 'main') {\n    const timeoutMs = 15000; // 15 second timeout\n    \n    try {\n      console.log(`🚀 githubService.getFileContent: Starting request for ${owner}/${repo}/${path} (ref: ${ref})`);\n      console.log('🔐 githubService.getFileContent: Authentication status:', this.isAuth());\n      console.log('📋 githubService.getFileContent: Request parameters:', { owner, repo, path, ref });\n      \n      // Use authenticated octokit if available, otherwise create a public instance for public repos\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      console.log('🔧 githubService.getFileContent: Using', this.isAuth() ? 'authenticated' : 'public', 'octokit instance');\n      \n      // Create a promise that rejects after timeout\n      const timeoutPromise = new Promise((_, reject) => {\n        console.log(`⏰ githubService.getFileContent: Setting up ${timeoutMs}ms timeout`);\n        setTimeout(() => {\n          console.error(`⏰ githubService.getFileContent: Request timed out after ${timeoutMs}ms`);\n          reject(new Error(`Request timeout after ${timeoutMs}ms`));\n        }, timeoutMs);\n      });\n      \n      // Race the GitHub API call against the timeout\n      console.log('🌐 githubService.getFileContent: Creating GitHub API promise...');\n      const apiPromise = octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path,\n        ref\n      });\n      \n      console.log('📡 githubService.getFileContent: API request initiated, waiting for response...');\n      const startTime = Date.now();\n      \n      const { data } = await Promise.race([apiPromise, timeoutPromise]);\n      const responseTime = Date.now() - startTime;\n      \n      console.log(`✅ githubService.getFileContent: API response received in ${responseTime}ms`);\n      console.log('📂 githubService.getFileContent: Response data type:', data.type);\n      console.log('📊 githubService.getFileContent: Response details:', {\n        type: data.type,\n        name: data.name,\n        size: data.size,\n        encoding: data.encoding,\n        hasContent: !!data.content\n      });\n\n      // Handle file content\n      if (data.type === 'file' && data.content) {\n        // Decode base64 content\n        console.log('🔧 githubService.getFileContent: Decoding base64 content...');\n        console.log('📊 githubService.getFileContent: Base64 content length:', data.content.length);\n        \n        const content = decodeURIComponent(escape(atob(data.content)));\n        console.log(`✅ githubService.getFileContent: Successfully fetched and decoded file content`);\n        console.log('📏 githubService.getFileContent: Final content length:', content.length, 'characters');\n        console.log('👀 githubService.getFileContent: Content preview (first 200 chars):', content.substring(0, 200));\n        \n        return content;\n      } else {\n        console.error('❌ githubService.getFileContent: Invalid response - not a file or no content');\n        console.error('🔍 githubService.getFileContent: Full response data:', JSON.stringify(data, null, 2));\n        throw new Error('File not found or is not a file');\n      }\n    } catch (error) {\n      console.error(`💥 githubService.getFileContent: Failed to fetch file content from ${owner}/${repo}/${path}:`, error);\n      console.error('🔍 githubService.getFileContent: Error analysis:', {\n        type: typeof error,\n        status: error.status,\n        message: error.message,\n        name: error.name,\n        stack: error.stack?.substring(0, 500) + '...'\n      });\n      \n      // Provide more specific error messages\n      if (error.message.includes('timeout')) {\n        console.error('⏰ githubService.getFileContent: Timeout error detected');\n        throw new Error(`GitHub API request timed out after ${timeoutMs / 1000} seconds. Please try again.`);\n      } else if (error.status === 403) {\n        console.error('🔒 githubService.getFileContent: 403 Forbidden error detected');\n        throw new Error('Access denied. This repository may be private or you may have hit rate limits.');\n      } else if (error.status === 404) {\n        console.error('🔍 githubService.getFileContent: 404 Not Found error detected');\n        throw new Error('File not found in the repository.');\n      } else if (error.message.includes('rate limit')) {\n        console.error('🚦 githubService.getFileContent: Rate limit error detected');\n        throw new Error('GitHub API rate limit exceeded. Please try again later.');\n      } else if (error.message.includes('Network Error') || error.message.includes('Failed to fetch')) {\n        console.error('🌐 githubService.getFileContent: Network error detected');\n        throw new Error('Network error occurred. Please check your internet connection and try again.');\n      }\n      \n      console.error('❓ githubService.getFileContent: Unknown error type, re-throwing original error');\n      throw error;\n    }\n  }\n\n  // Create a commit with multiple files\n  async createCommit(owner, repo, branch, message, files) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      // Get the latest commit SHA\n      const { data: refData } = await this.octokit.rest.git.getRef({\n        owner,\n        repo,\n        ref: `heads/${branch}`\n      });\n      const latestCommitSha = refData.object.sha;\n\n      // Get the tree SHA from the latest commit\n      const { data: commitData } = await this.octokit.rest.git.getCommit({\n        owner,\n        repo,\n        commit_sha: latestCommitSha\n      });\n      const baseTreeSha = commitData.tree.sha;\n\n      // Create blobs for all files\n      const blobs = await Promise.all(\n        files.map(async (file) => {\n          const { data: blobData } = await this.octokit.rest.git.createBlob({\n            owner,\n            repo,\n            content: file.content,\n            encoding: 'utf-8'\n          });\n          return {\n            path: file.path,\n            mode: '100644',\n            type: 'blob',\n            sha: blobData.sha\n          };\n        })\n      );\n\n      // Create a new tree with the blobs\n      const { data: treeData } = await this.octokit.rest.git.createTree({\n        owner,\n        repo,\n        base_tree: baseTreeSha,\n        tree: blobs\n      });\n\n      // Create the commit\n      const { data: newCommitData } = await this.octokit.rest.git.createCommit({\n        owner,\n        repo,\n        message,\n        tree: treeData.sha,\n        parents: [latestCommitSha]\n      });\n\n      // Update the branch reference\n      await this.octokit.rest.git.updateRef({\n        owner,\n        repo,\n        ref: `heads/${branch}`,\n        sha: newCommitData.sha\n      });\n\n      return {\n        sha: newCommitData.sha,\n        html_url: `https://github.com/${owner}/${repo}/commit/${newCommitData.sha}`,\n        message: newCommitData.message,\n        author: newCommitData.author,\n        committer: newCommitData.committer\n      };\n    } catch (error) {\n      console.error('Failed to create commit:', error);\n      throw error;\n    }\n  }\n\n  // Update a single file in the repository\n  async updateFile(owner, repo, path, content, message, branch = 'main', operation = 'update') {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      // Use the createCommit method with a single file\n      const files = [{\n        path: path,\n        content: content\n      }];\n\n      const result = await this.createCommit(owner, repo, branch, message, files);\n      \n      return {\n        sha: result.sha,\n        commit: {\n          sha: result.sha,\n          html_url: result.html_url,\n          message: result.message,\n          author: result.author,\n          committer: result.committer\n        },\n        content: {\n          path: path,\n          sha: result.sha // This will be the tree SHA, not file SHA, but sufficient for our needs\n        }\n      };\n    } catch (error) {\n      console.error('Failed to update file:', error);\n      throw error;\n    }\n  }\n\n  // Get recent commits for a repository branch\n  async getRecentCommits(owner, repo, branch = 'main', per_page = 5) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', `/repos/${owner}/${repo}/commits`, { sha: branch, per_page });\n\n    try {\n      const response = await this.octokit.rest.repos.listCommits({\n        owner,\n        repo,\n        sha: branch,\n        per_page\n      });\n\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/commits`, response.status, Date.now() - startTime);\n      \n      return response.data.map(commit => ({\n        sha: commit.sha,\n        message: commit.commit.message,\n        author: {\n          name: commit.commit.author.name,\n          email: commit.commit.author.email,\n          date: commit.commit.author.date\n        },\n        committer: {\n          name: commit.commit.committer.name,\n          email: commit.commit.committer.email,\n          date: commit.commit.committer.date\n        },\n        html_url: commit.html_url,\n        stats: commit.stats\n      }));\n    } catch (error) {\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/commits`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to fetch recent commits:', error);\n      throw error;\n    }\n  }\n\n  // Get open pull requests count\n  async getOpenPullRequestsCount(owner, repo) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', `/repos/${owner}/${repo}/pulls`, { state: 'open', per_page: 1 });\n\n    try {\n      const response = await this.octokit.rest.pulls.list({\n        owner,\n        repo,\n        state: 'open',\n        per_page: 1\n      });\n\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/pulls`, response.status, Date.now() - startTime);\n      \n      // GitHub includes the total count in the response headers\n      const linkHeader = response.headers.link;\n      if (linkHeader && linkHeader.includes('rel=\"last\"')) {\n        const lastPageMatch = linkHeader.match(/page=(\\d+)>; rel=\"last\"/);\n        if (lastPageMatch) {\n          return parseInt(lastPageMatch[1], 10);\n        }\n      }\n      \n      // Fallback: use the length of returned items (may not be accurate for large counts)\n      return response.data.length;\n    } catch (error) {\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/pulls`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to fetch pull requests count:', error);\n      throw error;\n    }\n  }\n\n  // Get pull requests with pagination and search support\n  async getPullRequests(owner, repo, options = {}) {\n    // Support unauthenticated access for public repositories\n    const octokit = this.isAuth() ? this.octokit : new Octokit();\n    \n    const {\n      state = 'all',  // 'open', 'closed', 'all'\n      per_page = 5,\n      page = 1,\n      sort = 'updated',  // 'created', 'updated', 'popularity'\n      direction = 'desc',\n      search = null\n    } = options;\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', `/repos/${owner}/${repo}/pulls`, { state, per_page, page, sort, direction });\n\n    try {\n      let response;\n      \n      if (search) {\n        // Use search API for filtering by title\n        const searchQuery = `repo:${owner}/${repo} is:pr ${search} in:title`;\n        response = await octokit.rest.search.issuesAndPullRequests({\n          q: searchQuery,\n          sort,\n          order: direction, \n          per_page,\n          page\n        });\n        \n        // Transform search results to match pulls.list format\n        const pullRequests = response.data.items.map(item => ({\n          id: item.id,\n          number: item.number,\n          title: item.title,\n          state: item.state,\n          created_at: item.created_at,\n          updated_at: item.updated_at,\n          closed_at: item.closed_at,\n          merged_at: item.pull_request?.merged_at || null,\n          user: item.user,\n          head: {\n            ref: item.pull_request?.head?.ref || 'unknown',\n            sha: item.pull_request?.head?.sha || 'unknown'\n          },\n          base: {\n            ref: item.pull_request?.base?.ref || 'main'\n          },\n          html_url: item.html_url,\n          mergeable: item.pull_request?.mergeable || null,\n          draft: item.draft || false\n        }));\n        \n        response.data = pullRequests;\n      } else {\n        // Use regular pulls API\n        response = await octokit.rest.pulls.list({\n          owner,\n          repo,\n          state,\n          per_page,\n          page,\n          sort,\n          direction\n        });\n      }\n\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/pulls`, response.status, Date.now() - startTime);\n      \n      return {\n        data: response.data,\n        pagination: {\n          page,\n          per_page,\n          total: search ? response.data.total_count : null,\n          hasMore: response.data.length === per_page\n        }\n      };\n    } catch (error) {\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/pulls`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to fetch pull requests:', error);\n      throw error;\n    }\n  }\n\n  // Get recently deployed/merged pull requests (for deployment landing page)\n  async getRecentlyDeployedPRs(owner, repo, limit = 5) {\n    try {\n      const response = await this.getPullRequests(owner, repo, {\n        state: 'closed',\n        per_page: limit * 2, // Get extra to filter for merged ones\n        sort: 'updated',\n        direction: 'desc'\n      });\n\n      // Filter for merged PRs (deployed ones)\n      const mergedPRs = response.data\n        .filter(pr => pr.merged_at) // Only merged PRs\n        .slice(0, limit); // Take the requested limit\n\n      return mergedPRs.map(pr => ({\n        id: pr.id,\n        number: pr.number,\n        title: pr.title,\n        merged_at: pr.merged_at,\n        head_branch: pr.head.ref,\n        head_sha: pr.head.sha,\n        user: pr.user,\n        html_url: pr.html_url,\n        // Generate branch URL for this deployment\n        branch_url: `./sgex/${pr.head.ref.replace(/\\//g, '-')}/index.html`\n      }));\n    } catch (error) {\n      console.error('Failed to fetch recently deployed PRs:', error);\n      throw error;\n    }\n  }\n\n  // Get open issues count\n  async getOpenIssuesCount(owner, repo) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', `/repos/${owner}/${repo}/issues`, { state: 'open', per_page: 1 });\n\n    try {\n      const response = await this.octokit.rest.issues.listForRepo({\n        owner,\n        repo,\n        state: 'open',\n        per_page: 1\n      });\n\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/issues`, response.status, Date.now() - startTime);\n      \n      // GitHub includes the total count in the response headers\n      const linkHeader = response.headers.link;\n      if (linkHeader && linkHeader.includes('rel=\"last\"')) {\n        const lastPageMatch = linkHeader.match(/page=(\\d+)>; rel=\"last\"/);\n        if (lastPageMatch) {\n          return parseInt(lastPageMatch[1], 10);\n        }\n      }\n      \n      // Fallback: use the length of returned items (may not be accurate for large counts)\n      return response.data.length;\n    } catch (error) {\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/issues`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to fetch issues count:', error);\n      throw error;\n    }\n  }\n\n  // Get repository statistics (combined method for efficiency)\n  async getRepositoryStats(owner, repo, branch = 'main') {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const [recentCommits, openPRsCount, openIssuesCount] = await Promise.allSettled([\n        this.getRecentCommits(owner, repo, branch, 1),\n        this.getOpenPullRequestsCount(owner, repo),\n        this.getOpenIssuesCount(owner, repo)\n      ]);\n\n      return {\n        recentCommits: recentCommits.status === 'fulfilled' ? recentCommits.value : [],\n        openPullRequestsCount: openPRsCount.status === 'fulfilled' ? openPRsCount.value : 0,\n        openIssuesCount: openIssuesCount.status === 'fulfilled' ? openIssuesCount.value : 0,\n        errors: {\n          recentCommits: recentCommits.status === 'rejected' ? recentCommits.reason : null,\n          openPullRequestsCount: openPRsCount.status === 'rejected' ? openPRsCount.reason : null,\n          openIssuesCount: openIssuesCount.status === 'rejected' ? openIssuesCount.reason : null\n        }\n      };\n    } catch (error) {\n      console.error('Failed to fetch repository stats:', error);\n      throw error;\n    }\n  }\n\n  // Get directory contents (supports both authenticated and unauthenticated access)\n  async getDirectoryContents(owner, repo, path = '', ref = 'main') {\n    try {\n      // Create temporary Octokit instance for unauthenticated access if needed\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const { data } = await octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path,\n        ref\n      });\n\n      if (Array.isArray(data)) {\n        return data;\n      } else {\n        throw new Error('Not a directory');\n      }\n    } catch (error) {\n      console.error(`Failed to get directory contents for ${path}:`, error);\n      throw error;\n    }\n  }\n\n  // Get commits for a repository (supports unauthenticated access)\n  async getCommits(owner, repo, options = {}) {\n    try {\n      // Create temporary Octokit instance for unauthenticated access if needed\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const params = {\n        owner,\n        repo,\n        per_page: options.per_page || 10,\n        page: options.page || 1\n      };\n\n      if (options.sha) {\n        params.sha = options.sha;\n      }\n\n      if (options.since) {\n        params.since = options.since;\n      }\n\n      if (options.until) {\n        params.until = options.until;\n      }\n\n      const { data } = await octokit.rest.repos.listCommits(params);\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch commits:', error);\n      throw error;\n    }\n  }\n\n  // Get issues for a repository (supports unauthenticated access)\n  async getIssues(owner, repo, options = {}) {\n    try {\n      // Create temporary Octokit instance for unauthenticated access if needed\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const params = {\n        owner,\n        repo,\n        state: options.state || 'all',\n        per_page: options.per_page || 30,\n        page: options.page || 1\n      };\n\n      if (options.labels) {\n        params.labels = options.labels;\n      }\n\n      if (options.milestone) {\n        params.milestone = options.milestone;\n      }\n\n      const { data } = await octokit.rest.issues.listForRepo(params);\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch issues:', error);\n      throw error;\n    }\n  }\n\n  // Logout\n  logout() {\n    this.octokit = null;\n    this.isAuthenticated = false;\n    this.tokenType = null;\n    this.permissions = null;\n    localStorage.removeItem('github_token');\n    sessionStorage.removeItem('github_token');\n    \n    // Clear branch context on logout\n    try {\n      const { default: branchContextService } = require('../services/branchContextService');\n      branchContextService.clearAllBranchContext();\n    } catch (error) {\n      // Service might not be available during testing\n      sessionStorage.removeItem('sgex_branch_context');\n    }\n  }\n}\n\n// Create a singleton instance\nconst githubService = new GitHubService();\n\nexport default githubService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}