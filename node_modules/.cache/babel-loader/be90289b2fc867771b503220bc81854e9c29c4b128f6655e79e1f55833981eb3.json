{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useTranslation}from'react-i18next';import githubService from'../services/githubService';import'./BranchSelector.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BranchSelector=_ref=>{let{repository,selectedBranch,onBranchChange,className=''}=_ref;const{t}=useTranslation();const[branches,setBranches]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[showCreateModal,setShowCreateModal]=useState(false);const[newBranchName,setNewBranchName]=useState('');const[creating,setCreating]=useState(false);const[createError,setCreateError]=useState(null);const[initializingAuth,setInitializingAuth]=useState(true);// Initialize authentication if needed\nuseEffect(()=>{const initializeAuthentication=async()=>{// Check if GitHub service is already authenticated\nif(githubService.isAuth()){setInitializingAuth(false);return;}// Try to restore authentication from stored token\nconst token=sessionStorage.getItem('github_token')||localStorage.getItem('github_token');if(token){console.log('BranchSelector: Restoring GitHub authentication from stored token');const success=githubService.authenticate(token);if(success){console.log('BranchSelector: GitHub authentication restored successfully');}else{console.warn('BranchSelector: Failed to restore GitHub authentication');// Clean up invalid tokens\nsessionStorage.removeItem('github_token');localStorage.removeItem('github_token');}}else{console.warn('BranchSelector: No stored GitHub token found');}setInitializingAuth(false);};initializeAuthentication();},[]);useEffect(()=>{const fetchBranches=async()=>{if(!repository)return;// Wait for authentication to be initialized\nif(initializingAuth){return;}// Note: For public repositories, authentication is not required\n// The githubService.getBranches method will work without authentication for public repos\nconsole.log('BranchSelector: Fetching branches for repository:',{name:repository.name,full_name:repository.full_name,owner:repository.owner,isAuthenticated:githubService.isAuth()});try{var _repository$owner;setLoading(true);setError(null);const owner=((_repository$owner=repository.owner)===null||_repository$owner===void 0?void 0:_repository$owner.login)||repository.full_name.split('/')[0];const branchData=await githubService.getBranches(owner,repository.name);setBranches(branchData);// If no branch is selected, default to 'main' or the default branch\nif(!selectedBranch){const mainBranch=branchData.find(b=>b.name==='main')||branchData.find(b=>b.name===repository.default_branch)||branchData[0];if(mainBranch&&onBranchChange){onBranchChange(mainBranch.name);}}}catch(err){console.error('Failed to fetch branches:',err);setError(t('branchSelector.errors.failedToLoad'));}finally{setLoading(false);}};if(!initializingAuth){fetchBranches();}},[repository,selectedBranch,onBranchChange,initializingAuth,t]);const handleBranchSelect=branchName=>{if(onBranchChange){onBranchChange(branchName);}};const handleCreateBranch=async()=>{if(!newBranchName.trim()){setCreateError(t('branchSelector.errors.nameRequired'));return;}// Validate branch name (basic GitHub rules)\nconst branchNameRegex=/^[a-zA-Z0-9._-]+$/;if(!branchNameRegex.test(newBranchName)){setCreateError(t('branchSelector.errors.invalidName'));return;}if(branches.some(b=>b.name===newBranchName)){setCreateError(t('branchSelector.errors.nameExists'));return;}try{var _repository$owner2;setCreating(true);setCreateError(null);const owner=((_repository$owner2=repository.owner)===null||_repository$owner2===void 0?void 0:_repository$owner2.login)||repository.full_name.split('/')[0];const sourceBranch=selectedBranch||'main';await githubService.createBranch(owner,repository.name,newBranchName,sourceBranch);// Refresh branches list\nconst updatedBranches=await githubService.getBranches(owner,repository.name);setBranches(updatedBranches);// Select the new branch\nhandleBranchSelect(newBranchName);// Close modal and reset form\nsetShowCreateModal(false);setNewBranchName('');}catch(err){console.error('Failed to create branch:',err);setCreateError(t('branchSelector.errors.createFailed'));}finally{setCreating(false);}};if(loading){return/*#__PURE__*/_jsxs(\"div\",{className:`branch-selector loading ${className}`,children:[/*#__PURE__*/_jsx(\"span\",{className:\"branch-icon\",children:\"\\uD83C\\uDF3F\"}),/*#__PURE__*/_jsx(\"span\",{children:t('branchSelector.loading')})]});}if(error){return/*#__PURE__*/_jsxs(\"div\",{className:`branch-selector error ${className}`,children:[/*#__PURE__*/_jsx(\"span\",{className:\"branch-icon\",children:\"\\u26A0\\uFE0F\"}),/*#__PURE__*/_jsx(\"span\",{children:error})]});}return/*#__PURE__*/_jsxs(\"div\",{className:`branch-selector ${className}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"branch-selector-main\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"branch-icon\",children:\"\\uD83C\\uDF3F\"}),/*#__PURE__*/_jsx(\"select\",{value:selectedBranch||'',onChange:e=>handleBranchSelect(e.target.value),className:\"branch-select\",children:branches.map(branch=>/*#__PURE__*/_jsxs(\"option\",{value:branch.name,children:[branch.name,branch.name===repository.default_branch&&' (default)']},branch.name))}),/*#__PURE__*/_jsx(\"button\",{className:\"create-branch-btn\",onClick:()=>setShowCreateModal(true),title:t('branchSelector.createButton'),children:\"+\"})]}),showCreateModal&&/*#__PURE__*/_jsx(\"div\",{className:\"create-branch-modal-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"create-branch-modal\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"modal-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:t('branchSelector.modal.title')}),/*#__PURE__*/_jsx(\"button\",{className:\"modal-close\",onClick:()=>{setShowCreateModal(false);setNewBranchName('');setCreateError(null);},children:\"\\xD7\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"branchName\",children:[t('branchSelector.modal.nameLabel'),\":\"]}),/*#__PURE__*/_jsx(\"input\",{id:\"branchName\",type:\"text\",value:newBranchName,onChange:e=>setNewBranchName(e.target.value),placeholder:t('branchSelector.modal.namePlaceholder'),className:\"branch-name-input\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[t('branchSelector.modal.createFrom'),\":\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"source-branch\",children:selectedBranch||'main'})]}),createError&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:createError})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn-secondary\",onClick:()=>{setShowCreateModal(false);setNewBranchName('');setCreateError(null);},children:t('buttons.cancel')}),/*#__PURE__*/_jsx(\"button\",{className:\"btn-primary\",onClick:handleCreateBranch,disabled:creating||!newBranchName.trim(),children:creating?t('branchSelector.modal.creating'):t('branchSelector.modal.createButton')})]})]})})]});};export default BranchSelector;","map":{"version":3,"names":["React","useState","useEffect","useTranslation","githubService","jsx","_jsx","jsxs","_jsxs","BranchSelector","_ref","repository","selectedBranch","onBranchChange","className","t","branches","setBranches","loading","setLoading","error","setError","showCreateModal","setShowCreateModal","newBranchName","setNewBranchName","creating","setCreating","createError","setCreateError","initializingAuth","setInitializingAuth","initializeAuthentication","isAuth","token","sessionStorage","getItem","localStorage","console","log","success","authenticate","warn","removeItem","fetchBranches","name","full_name","owner","isAuthenticated","_repository$owner","login","split","branchData","getBranches","mainBranch","find","b","default_branch","err","handleBranchSelect","branchName","handleCreateBranch","trim","branchNameRegex","test","some","_repository$owner2","sourceBranch","createBranch","updatedBranches","children","value","onChange","e","target","map","branch","onClick","title","htmlFor","id","type","placeholder","disabled"],"sources":["/home/runner/work/sgex/sgex/src/components/BranchSelector.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport githubService from '../services/githubService';\nimport './BranchSelector.css';\n\nconst BranchSelector = ({ \n  repository, \n  selectedBranch, \n  onBranchChange, \n  className = '' \n}) => {\n  const { t } = useTranslation();\n  const [branches, setBranches] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [newBranchName, setNewBranchName] = useState('');\n  const [creating, setCreating] = useState(false);\n  const [createError, setCreateError] = useState(null);\n  const [initializingAuth, setInitializingAuth] = useState(true);\n\n  // Initialize authentication if needed\n  useEffect(() => {\n    const initializeAuthentication = async () => {\n      // Check if GitHub service is already authenticated\n      if (githubService.isAuth()) {\n        setInitializingAuth(false);\n        return;\n      }\n\n      // Try to restore authentication from stored token\n      const token = sessionStorage.getItem('github_token') || localStorage.getItem('github_token');\n      if (token) {\n        console.log('BranchSelector: Restoring GitHub authentication from stored token');\n        const success = githubService.authenticate(token);\n        if (success) {\n          console.log('BranchSelector: GitHub authentication restored successfully');\n        } else {\n          console.warn('BranchSelector: Failed to restore GitHub authentication');\n          // Clean up invalid tokens\n          sessionStorage.removeItem('github_token');\n          localStorage.removeItem('github_token');\n        }\n      } else {\n        console.warn('BranchSelector: No stored GitHub token found');\n      }\n\n      setInitializingAuth(false);\n    };\n\n    initializeAuthentication();\n  }, []);\n\n  useEffect(() => {\n    const fetchBranches = async () => {\n      if (!repository) return;\n\n      // Wait for authentication to be initialized\n      if (initializingAuth) {\n        return;\n      }\n\n      // Note: For public repositories, authentication is not required\n      // The githubService.getBranches method will work without authentication for public repos\n      console.log('BranchSelector: Fetching branches for repository:', {\n        name: repository.name,\n        full_name: repository.full_name,\n        owner: repository.owner,\n        isAuthenticated: githubService.isAuth()\n      });\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const owner = repository.owner?.login || repository.full_name.split('/')[0];\n        const branchData = await githubService.getBranches(owner, repository.name);\n        \n        setBranches(branchData);\n        \n        // If no branch is selected, default to 'main' or the default branch\n        if (!selectedBranch) {\n          const mainBranch = branchData.find(b => b.name === 'main') || \n                            branchData.find(b => b.name === repository.default_branch) ||\n                            branchData[0];\n          if (mainBranch && onBranchChange) {\n            onBranchChange(mainBranch.name);\n          }\n        }\n      } catch (err) {\n        console.error('Failed to fetch branches:', err);\n        setError(t('branchSelector.errors.failedToLoad'));\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (!initializingAuth) {\n      fetchBranches();\n    }\n  }, [repository, selectedBranch, onBranchChange, initializingAuth, t]);\n\n  const handleBranchSelect = (branchName) => {\n    if (onBranchChange) {\n      onBranchChange(branchName);\n    }\n  };\n\n  const handleCreateBranch = async () => {\n    if (!newBranchName.trim()) {\n      setCreateError(t('branchSelector.errors.nameRequired'));\n      return;\n    }\n\n    // Validate branch name (basic GitHub rules)\n    const branchNameRegex = /^[a-zA-Z0-9._-]+$/;\n    if (!branchNameRegex.test(newBranchName)) {\n      setCreateError(t('branchSelector.errors.invalidName'));\n      return;\n    }\n\n    if (branches.some(b => b.name === newBranchName)) {\n      setCreateError(t('branchSelector.errors.nameExists'));\n      return;\n    }\n\n    try {\n      setCreating(true);\n      setCreateError(null);\n      \n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const sourceBranch = selectedBranch || 'main';\n      \n      await githubService.createBranch(owner, repository.name, newBranchName, sourceBranch);\n      \n      // Refresh branches list\n      const updatedBranches = await githubService.getBranches(owner, repository.name);\n      setBranches(updatedBranches);\n      \n      // Select the new branch\n      handleBranchSelect(newBranchName);\n      \n      // Close modal and reset form\n      setShowCreateModal(false);\n      setNewBranchName('');\n    } catch (err) {\n      console.error('Failed to create branch:', err);\n      setCreateError(t('branchSelector.errors.createFailed'));\n    } finally {\n      setCreating(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={`branch-selector loading ${className}`}>\n        <span className=\"branch-icon\">🌿</span>\n        <span>{t('branchSelector.loading')}</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`branch-selector error ${className}`}>\n        <span className=\"branch-icon\">⚠️</span>\n        <span>{error}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`branch-selector ${className}`}>\n      <div className=\"branch-selector-main\">\n        <span className=\"branch-icon\">🌿</span>\n        <select \n          value={selectedBranch || ''} \n          onChange={(e) => handleBranchSelect(e.target.value)}\n          className=\"branch-select\"\n        >\n          {branches.map((branch) => (\n            <option key={branch.name} value={branch.name}>\n              {branch.name}\n              {branch.name === repository.default_branch && ' (default)'}\n            </option>\n          ))}\n        </select>\n        <button \n          className=\"create-branch-btn\"\n          onClick={() => setShowCreateModal(true)}\n          title={t('branchSelector.createButton')}\n        >\n          +\n        </button>\n      </div>\n\n      {/* Create Branch Modal */}\n      {showCreateModal && (\n        <div className=\"create-branch-modal-overlay\">\n          <div className=\"create-branch-modal\">\n            <div className=\"modal-header\">\n              <h3>{t('branchSelector.modal.title')}</h3>\n              <button \n                className=\"modal-close\"\n                onClick={() => {\n                  setShowCreateModal(false);\n                  setNewBranchName('');\n                  setCreateError(null);\n                }}\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"modal-content\">\n              <div className=\"form-group\">\n                <label htmlFor=\"branchName\">{t('branchSelector.modal.nameLabel')}:</label>\n                <input\n                  id=\"branchName\"\n                  type=\"text\"\n                  value={newBranchName}\n                  onChange={(e) => setNewBranchName(e.target.value)}\n                  placeholder={t('branchSelector.modal.namePlaceholder')}\n                  className=\"branch-name-input\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>{t('branchSelector.modal.createFrom')}:</label>\n                <span className=\"source-branch\">{selectedBranch || 'main'}</span>\n              </div>\n              {createError && (\n                <div className=\"error-message\">{createError}</div>\n              )}\n            </div>\n            <div className=\"modal-actions\">\n              <button \n                className=\"btn-secondary\"\n                onClick={() => {\n                  setShowCreateModal(false);\n                  setNewBranchName('');\n                  setCreateError(null);\n                }}\n              >\n                {t('buttons.cancel')}\n              </button>\n              <button \n                className=\"btn-primary\"\n                onClick={handleCreateBranch}\n                disabled={creating || !newBranchName.trim()}\n              >\n                {creating ? t('branchSelector.modal.creating') : t('branchSelector.modal.createButton')}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BranchSelector;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}