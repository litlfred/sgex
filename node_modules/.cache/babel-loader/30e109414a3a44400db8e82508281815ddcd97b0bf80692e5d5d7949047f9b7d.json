{"ast":null,"code":"import { create } from '../model';\nimport { assign } from 'min-dash';\n\n/**\n * @typedef {import('../model/Types').Element} Element\n * @typedef {import('../model/Types').Connection} Connection\n * @typedef {import('../model/Types').Label} Label\n * @typedef {import('../model/Types').Root} Root\n * @typedef {import('../model/Types').Shape} Shape\n */\n\n/**\n * A factory for model elements.\n *\n * @template {Connection} [T=Connection]\n * @template {Label} [U=Label]\n * @template {Root} [V=Root]\n * @template {Shape} [W=Shape]\n */\nexport default function ElementFactory() {\n  this._uid = 12;\n}\n\n/**\n * Create a root element.\n *\n * @param {Partial<Root>} [attrs]\n *\n * @return {V} The created root element.\n */\nElementFactory.prototype.createRoot = function (attrs) {\n  return this.create('root', attrs);\n};\n\n/**\n * Create a label.\n *\n * @param {Partial<Label>} [attrs]\n *\n * @return {U} The created label.\n */\nElementFactory.prototype.createLabel = function (attrs) {\n  return this.create('label', attrs);\n};\n\n/**\n * Create a shape.\n *\n * @param {Partial<Shape>} [attrs]\n *\n * @return {W} The created shape.\n */\nElementFactory.prototype.createShape = function (attrs) {\n  return this.create('shape', attrs);\n};\n\n/**\n * Create a connection.\n *\n * @param {Partial<Connection>} [attrs]\n *\n * @return {T} The created connection.\n */\nElementFactory.prototype.createConnection = function (attrs) {\n  return this.create('connection', attrs);\n};\n\n/**\n * Create a root element.\n *\n * @overlord\n * @param {'root'} type\n * @param {Partial<Root>} [attrs]\n * @return {V}\n */\n/**\n * Create a shape.\n *\n * @overlord\n * @param {'shape'} type\n * @param {Partial<Shape>} [attrs]\n * @return {W}\n */\n/**\n * Create a connection.\n *\n * @overlord\n * @param {'connection'} type\n * @param {Partial<Connection>} [attrs]\n * @return {T}\n */\n/**\n * Create a label.\n *\n * @param {'label'} type\n * @param {Partial<Label>} [attrs]\n * @return {U}\n */\nElementFactory.prototype.create = function (type, attrs) {\n  attrs = assign({}, attrs || {});\n  if (!attrs.id) {\n    attrs.id = type + '_' + this._uid++;\n  }\n  return create(type, attrs);\n};","map":{"version":3,"names":["create","assign","ElementFactory","_uid","prototype","createRoot","attrs","createLabel","createShape","createConnection","type","id"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/core/ElementFactory.js"],"sourcesContent":["import {\n  create\n} from '../model';\n\nimport { assign } from 'min-dash';\n\n/**\n * @typedef {import('../model/Types').Element} Element\n * @typedef {import('../model/Types').Connection} Connection\n * @typedef {import('../model/Types').Label} Label\n * @typedef {import('../model/Types').Root} Root\n * @typedef {import('../model/Types').Shape} Shape\n */\n\n/**\n * A factory for model elements.\n *\n * @template {Connection} [T=Connection]\n * @template {Label} [U=Label]\n * @template {Root} [V=Root]\n * @template {Shape} [W=Shape]\n */\nexport default function ElementFactory() {\n  this._uid = 12;\n}\n\n/**\n * Create a root element.\n *\n * @param {Partial<Root>} [attrs]\n *\n * @return {V} The created root element.\n */\nElementFactory.prototype.createRoot = function(attrs) {\n  return this.create('root', attrs);\n};\n\n/**\n * Create a label.\n *\n * @param {Partial<Label>} [attrs]\n *\n * @return {U} The created label.\n */\nElementFactory.prototype.createLabel = function(attrs) {\n  return this.create('label', attrs);\n};\n\n/**\n * Create a shape.\n *\n * @param {Partial<Shape>} [attrs]\n *\n * @return {W} The created shape.\n */\nElementFactory.prototype.createShape = function(attrs) {\n  return this.create('shape', attrs);\n};\n\n/**\n * Create a connection.\n *\n * @param {Partial<Connection>} [attrs]\n *\n * @return {T} The created connection.\n */\nElementFactory.prototype.createConnection = function(attrs) {\n  return this.create('connection', attrs);\n};\n\n/**\n * Create a root element.\n *\n * @overlord\n * @param {'root'} type\n * @param {Partial<Root>} [attrs]\n * @return {V}\n */\n/**\n * Create a shape.\n *\n * @overlord\n * @param {'shape'} type\n * @param {Partial<Shape>} [attrs]\n * @return {W}\n */\n/**\n * Create a connection.\n *\n * @overlord\n * @param {'connection'} type\n * @param {Partial<Connection>} [attrs]\n * @return {T}\n */\n/**\n * Create a label.\n *\n * @param {'label'} type\n * @param {Partial<Label>} [attrs]\n * @return {U}\n */\nElementFactory.prototype.create = function(type, attrs) {\n\n  attrs = assign({}, attrs || {});\n\n  if (!attrs.id) {\n    attrs.id = type + '_' + (this._uid++);\n  }\n\n  return create(type, attrs);\n};"],"mappings":"AAAA,SACEA,MAAM,QACD,UAAU;AAEjB,SAASC,MAAM,QAAQ,UAAU;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,cAAcA,CAAA,EAAG;EACvC,IAAI,CAACC,IAAI,GAAG,EAAE;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,cAAc,CAACE,SAAS,CAACC,UAAU,GAAG,UAASC,KAAK,EAAE;EACpD,OAAO,IAAI,CAACN,MAAM,CAAC,MAAM,EAAEM,KAAK,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,cAAc,CAACE,SAAS,CAACG,WAAW,GAAG,UAASD,KAAK,EAAE;EACrD,OAAO,IAAI,CAACN,MAAM,CAAC,OAAO,EAAEM,KAAK,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,cAAc,CAACE,SAAS,CAACI,WAAW,GAAG,UAASF,KAAK,EAAE;EACrD,OAAO,IAAI,CAACN,MAAM,CAAC,OAAO,EAAEM,KAAK,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,cAAc,CAACE,SAAS,CAACK,gBAAgB,GAAG,UAASH,KAAK,EAAE;EAC1D,OAAO,IAAI,CAACN,MAAM,CAAC,YAAY,EAAEM,KAAK,CAAC;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,cAAc,CAACE,SAAS,CAACJ,MAAM,GAAG,UAASU,IAAI,EAAEJ,KAAK,EAAE;EAEtDA,KAAK,GAAGL,MAAM,CAAC,CAAC,CAAC,EAAEK,KAAK,IAAI,CAAC,CAAC,CAAC;EAE/B,IAAI,CAACA,KAAK,CAACK,EAAE,EAAE;IACbL,KAAK,CAACK,EAAE,GAAGD,IAAI,GAAG,GAAG,GAAI,IAAI,CAACP,IAAI,EAAG;EACvC;EAEA,OAAOH,MAAM,CAACU,IAAI,EAAEJ,KAAK,CAAC;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}