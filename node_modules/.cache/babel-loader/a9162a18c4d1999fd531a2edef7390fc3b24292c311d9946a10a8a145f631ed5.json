{"ast":null,"code":"import { add as collectionAdd, remove as collectionRemove } from 'diagram-js/lib/util/Collections';\nimport { getDi } from '../../../util/ModelUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n *\n * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * @implements {CommandHandler}\n *\n * @param {Canvas} canvas\n * @param {Modeling} modeling\n */\nexport default function UpdateCanvasRootHandler(canvas, modeling) {\n  this._canvas = canvas;\n  this._modeling = modeling;\n}\nUpdateCanvasRootHandler.$inject = ['canvas', 'modeling'];\nUpdateCanvasRootHandler.prototype.execute = function (context) {\n  var canvas = this._canvas;\n  var newRoot = context.newRoot,\n    newRootBusinessObject = newRoot.businessObject,\n    oldRoot = canvas.getRootElement(),\n    oldRootBusinessObject = oldRoot.businessObject,\n    bpmnDefinitions = oldRootBusinessObject.$parent,\n    diPlane = getDi(oldRoot);\n\n  // (1) replace process old <> new root\n  canvas.setRootElement(newRoot);\n  canvas.removeRootElement(oldRoot);\n\n  // (2) update root elements\n  collectionAdd(bpmnDefinitions.rootElements, newRootBusinessObject);\n  newRootBusinessObject.$parent = bpmnDefinitions;\n  collectionRemove(bpmnDefinitions.rootElements, oldRootBusinessObject);\n  oldRootBusinessObject.$parent = null;\n\n  // (3) wire di\n  oldRoot.di = null;\n  diPlane.bpmnElement = newRootBusinessObject;\n  newRoot.di = diPlane;\n  context.oldRoot = oldRoot;\n\n  // TODO(nikku): return changed elements?\n  // return [ newRoot, oldRoot ];\n  return [];\n};\nUpdateCanvasRootHandler.prototype.revert = function (context) {\n  var canvas = this._canvas;\n  var newRoot = context.newRoot,\n    newRootBusinessObject = newRoot.businessObject,\n    oldRoot = context.oldRoot,\n    oldRootBusinessObject = oldRoot.businessObject,\n    bpmnDefinitions = newRootBusinessObject.$parent,\n    diPlane = getDi(newRoot);\n\n  // (1) replace process old <> new root\n  canvas.setRootElement(oldRoot);\n  canvas.removeRootElement(newRoot);\n\n  // (2) update root elements\n  collectionRemove(bpmnDefinitions.rootElements, newRootBusinessObject);\n  newRootBusinessObject.$parent = null;\n  collectionAdd(bpmnDefinitions.rootElements, oldRootBusinessObject);\n  oldRootBusinessObject.$parent = bpmnDefinitions;\n\n  // (3) wire di\n  newRoot.di = null;\n  diPlane.bpmnElement = oldRootBusinessObject;\n  oldRoot.di = diPlane;\n\n  // TODO(nikku): return changed elements?\n  // return [ newRoot, oldRoot ];\n\n  return [];\n};","map":{"version":3,"names":["add","collectionAdd","remove","collectionRemove","getDi","UpdateCanvasRootHandler","canvas","modeling","_canvas","_modeling","$inject","prototype","execute","context","newRoot","newRootBusinessObject","businessObject","oldRoot","getRootElement","oldRootBusinessObject","bpmnDefinitions","$parent","diPlane","setRootElement","removeRootElement","rootElements","di","bpmnElement","revert"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/modeling/cmd/UpdateCanvasRootHandler.js"],"sourcesContent":["import {\n  add as collectionAdd,\n  remove as collectionRemove\n} from 'diagram-js/lib/util/Collections';\n\nimport { getDi } from '../../../util/ModelUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n *\n * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * @implements {CommandHandler}\n *\n * @param {Canvas} canvas\n * @param {Modeling} modeling\n */\nexport default function UpdateCanvasRootHandler(canvas, modeling) {\n  this._canvas = canvas;\n  this._modeling = modeling;\n}\n\nUpdateCanvasRootHandler.$inject = [\n  'canvas',\n  'modeling'\n];\n\n\nUpdateCanvasRootHandler.prototype.execute = function(context) {\n\n  var canvas = this._canvas;\n\n  var newRoot = context.newRoot,\n      newRootBusinessObject = newRoot.businessObject,\n      oldRoot = canvas.getRootElement(),\n      oldRootBusinessObject = oldRoot.businessObject,\n      bpmnDefinitions = oldRootBusinessObject.$parent,\n      diPlane = getDi(oldRoot);\n\n  // (1) replace process old <> new root\n  canvas.setRootElement(newRoot);\n  canvas.removeRootElement(oldRoot);\n\n  // (2) update root elements\n  collectionAdd(bpmnDefinitions.rootElements, newRootBusinessObject);\n  newRootBusinessObject.$parent = bpmnDefinitions;\n\n  collectionRemove(bpmnDefinitions.rootElements, oldRootBusinessObject);\n  oldRootBusinessObject.$parent = null;\n\n  // (3) wire di\n  oldRoot.di = null;\n\n  diPlane.bpmnElement = newRootBusinessObject;\n  newRoot.di = diPlane;\n\n  context.oldRoot = oldRoot;\n\n  // TODO(nikku): return changed elements?\n  // return [ newRoot, oldRoot ];\n  return [];\n};\n\n\nUpdateCanvasRootHandler.prototype.revert = function(context) {\n\n  var canvas = this._canvas;\n\n  var newRoot = context.newRoot,\n      newRootBusinessObject = newRoot.businessObject,\n      oldRoot = context.oldRoot,\n      oldRootBusinessObject = oldRoot.businessObject,\n      bpmnDefinitions = newRootBusinessObject.$parent,\n      diPlane = getDi(newRoot);\n\n  // (1) replace process old <> new root\n  canvas.setRootElement(oldRoot);\n  canvas.removeRootElement(newRoot);\n\n  // (2) update root elements\n  collectionRemove(bpmnDefinitions.rootElements, newRootBusinessObject);\n  newRootBusinessObject.$parent = null;\n\n  collectionAdd(bpmnDefinitions.rootElements, oldRootBusinessObject);\n  oldRootBusinessObject.$parent = bpmnDefinitions;\n\n  // (3) wire di\n  newRoot.di = null;\n\n  diPlane.bpmnElement = oldRootBusinessObject;\n  oldRoot.di = diPlane;\n\n  // TODO(nikku): return changed elements?\n  // return [ newRoot, oldRoot ];\n\n  return [];\n};"],"mappings":"AAAA,SACEA,GAAG,IAAIC,aAAa,EACpBC,MAAM,IAAIC,gBAAgB,QACrB,iCAAiC;AAExC,SAASC,KAAK,QAAQ,yBAAyB;;AAE/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,uBAAuBA,CAACC,MAAM,EAAEC,QAAQ,EAAE;EAChE,IAAI,CAACC,OAAO,GAAGF,MAAM;EACrB,IAAI,CAACG,SAAS,GAAGF,QAAQ;AAC3B;AAEAF,uBAAuB,CAACK,OAAO,GAAG,CAChC,QAAQ,EACR,UAAU,CACX;AAGDL,uBAAuB,CAACM,SAAS,CAACC,OAAO,GAAG,UAASC,OAAO,EAAE;EAE5D,IAAIP,MAAM,GAAG,IAAI,CAACE,OAAO;EAEzB,IAAIM,OAAO,GAAGD,OAAO,CAACC,OAAO;IACzBC,qBAAqB,GAAGD,OAAO,CAACE,cAAc;IAC9CC,OAAO,GAAGX,MAAM,CAACY,cAAc,CAAC,CAAC;IACjCC,qBAAqB,GAAGF,OAAO,CAACD,cAAc;IAC9CI,eAAe,GAAGD,qBAAqB,CAACE,OAAO;IAC/CC,OAAO,GAAGlB,KAAK,CAACa,OAAO,CAAC;;EAE5B;EACAX,MAAM,CAACiB,cAAc,CAACT,OAAO,CAAC;EAC9BR,MAAM,CAACkB,iBAAiB,CAACP,OAAO,CAAC;;EAEjC;EACAhB,aAAa,CAACmB,eAAe,CAACK,YAAY,EAAEV,qBAAqB,CAAC;EAClEA,qBAAqB,CAACM,OAAO,GAAGD,eAAe;EAE/CjB,gBAAgB,CAACiB,eAAe,CAACK,YAAY,EAAEN,qBAAqB,CAAC;EACrEA,qBAAqB,CAACE,OAAO,GAAG,IAAI;;EAEpC;EACAJ,OAAO,CAACS,EAAE,GAAG,IAAI;EAEjBJ,OAAO,CAACK,WAAW,GAAGZ,qBAAqB;EAC3CD,OAAO,CAACY,EAAE,GAAGJ,OAAO;EAEpBT,OAAO,CAACI,OAAO,GAAGA,OAAO;;EAEzB;EACA;EACA,OAAO,EAAE;AACX,CAAC;AAGDZ,uBAAuB,CAACM,SAAS,CAACiB,MAAM,GAAG,UAASf,OAAO,EAAE;EAE3D,IAAIP,MAAM,GAAG,IAAI,CAACE,OAAO;EAEzB,IAAIM,OAAO,GAAGD,OAAO,CAACC,OAAO;IACzBC,qBAAqB,GAAGD,OAAO,CAACE,cAAc;IAC9CC,OAAO,GAAGJ,OAAO,CAACI,OAAO;IACzBE,qBAAqB,GAAGF,OAAO,CAACD,cAAc;IAC9CI,eAAe,GAAGL,qBAAqB,CAACM,OAAO;IAC/CC,OAAO,GAAGlB,KAAK,CAACU,OAAO,CAAC;;EAE5B;EACAR,MAAM,CAACiB,cAAc,CAACN,OAAO,CAAC;EAC9BX,MAAM,CAACkB,iBAAiB,CAACV,OAAO,CAAC;;EAEjC;EACAX,gBAAgB,CAACiB,eAAe,CAACK,YAAY,EAAEV,qBAAqB,CAAC;EACrEA,qBAAqB,CAACM,OAAO,GAAG,IAAI;EAEpCpB,aAAa,CAACmB,eAAe,CAACK,YAAY,EAAEN,qBAAqB,CAAC;EAClEA,qBAAqB,CAACE,OAAO,GAAGD,eAAe;;EAE/C;EACAN,OAAO,CAACY,EAAE,GAAG,IAAI;EAEjBJ,OAAO,CAACK,WAAW,GAAGR,qBAAqB;EAC3CF,OAAO,CAACS,EAAE,GAAGJ,OAAO;;EAEpB;EACA;;EAEA,OAAO,EAAE;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}