{"ast":null,"code":"import { getType as getElementType } from '../../util/Elements';\n\n/**\n * @typedef {import('../../core/Canvas').default} Canvas\n * @typedef {import('../../core/ElementRegistry').default} ElementRegistry\n * @typedef {import('../../core/EventBus').default} EventBus\n * @typedef {import('../../core/GraphicsFactory').default} GraphicsFactory\n */\n\n/**\n * Adds change support to the diagram, including\n *\n * <ul>\n *   <li>redrawing shapes and connections on change</li>\n * </ul>\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {ElementRegistry} elementRegistry\n * @param {GraphicsFactory} graphicsFactory\n */\nexport default function ChangeSupport(eventBus, canvas, elementRegistry, graphicsFactory) {\n  // redraw shapes / connections on change\n\n  eventBus.on('element.changed', function (event) {\n    var element = event.element;\n\n    // element might have been deleted and replaced by new element with same ID\n    // thus check for parent of element except for root element\n    if (element.parent || element === canvas.getRootElement()) {\n      event.gfx = elementRegistry.getGraphics(element);\n    }\n\n    // shape + gfx may have been deleted\n    if (!event.gfx) {\n      return;\n    }\n    eventBus.fire(getElementType(element) + '.changed', event);\n  });\n  eventBus.on('elements.changed', function (event) {\n    var elements = event.elements;\n    elements.forEach(function (e) {\n      eventBus.fire('element.changed', {\n        element: e\n      });\n    });\n    graphicsFactory.updateContainments(elements);\n  });\n  eventBus.on('shape.changed', function (event) {\n    graphicsFactory.update('shape', event.element, event.gfx);\n  });\n  eventBus.on('connection.changed', function (event) {\n    graphicsFactory.update('connection', event.element, event.gfx);\n  });\n}\nChangeSupport.$inject = ['eventBus', 'canvas', 'elementRegistry', 'graphicsFactory'];","map":{"version":3,"names":["getType","getElementType","ChangeSupport","eventBus","canvas","elementRegistry","graphicsFactory","on","event","element","parent","getRootElement","gfx","getGraphics","fire","elements","forEach","e","updateContainments","update","$inject"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/change-support/ChangeSupport.js"],"sourcesContent":["import {\n  getType as getElementType\n} from '../../util/Elements';\n\n/**\n * @typedef {import('../../core/Canvas').default} Canvas\n * @typedef {import('../../core/ElementRegistry').default} ElementRegistry\n * @typedef {import('../../core/EventBus').default} EventBus\n * @typedef {import('../../core/GraphicsFactory').default} GraphicsFactory\n */\n\n/**\n * Adds change support to the diagram, including\n *\n * <ul>\n *   <li>redrawing shapes and connections on change</li>\n * </ul>\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {ElementRegistry} elementRegistry\n * @param {GraphicsFactory} graphicsFactory\n */\nexport default function ChangeSupport(\n    eventBus, canvas, elementRegistry,\n    graphicsFactory) {\n\n\n  // redraw shapes / connections on change\n\n  eventBus.on('element.changed', function(event) {\n\n    var element = event.element;\n\n    // element might have been deleted and replaced by new element with same ID\n    // thus check for parent of element except for root element\n    if (element.parent || element === canvas.getRootElement()) {\n      event.gfx = elementRegistry.getGraphics(element);\n    }\n\n    // shape + gfx may have been deleted\n    if (!event.gfx) {\n      return;\n    }\n\n    eventBus.fire(getElementType(element) + '.changed', event);\n  });\n\n  eventBus.on('elements.changed', function(event) {\n\n    var elements = event.elements;\n\n    elements.forEach(function(e) {\n      eventBus.fire('element.changed', { element: e });\n    });\n\n    graphicsFactory.updateContainments(elements);\n  });\n\n  eventBus.on('shape.changed', function(event) {\n    graphicsFactory.update('shape', event.element, event.gfx);\n  });\n\n  eventBus.on('connection.changed', function(event) {\n    graphicsFactory.update('connection', event.element, event.gfx);\n  });\n}\n\nChangeSupport.$inject = [\n  'eventBus',\n  'canvas',\n  'elementRegistry',\n  'graphicsFactory'\n];"],"mappings":"AAAA,SACEA,OAAO,IAAIC,cAAc,QACpB,qBAAqB;;AAE5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,aAAaA,CACjCC,QAAQ,EAAEC,MAAM,EAAEC,eAAe,EACjCC,eAAe,EAAE;EAGnB;;EAEAH,QAAQ,CAACI,EAAE,CAAC,iBAAiB,EAAE,UAASC,KAAK,EAAE;IAE7C,IAAIC,OAAO,GAAGD,KAAK,CAACC,OAAO;;IAE3B;IACA;IACA,IAAIA,OAAO,CAACC,MAAM,IAAID,OAAO,KAAKL,MAAM,CAACO,cAAc,CAAC,CAAC,EAAE;MACzDH,KAAK,CAACI,GAAG,GAAGP,eAAe,CAACQ,WAAW,CAACJ,OAAO,CAAC;IAClD;;IAEA;IACA,IAAI,CAACD,KAAK,CAACI,GAAG,EAAE;MACd;IACF;IAEAT,QAAQ,CAACW,IAAI,CAACb,cAAc,CAACQ,OAAO,CAAC,GAAG,UAAU,EAAED,KAAK,CAAC;EAC5D,CAAC,CAAC;EAEFL,QAAQ,CAACI,EAAE,CAAC,kBAAkB,EAAE,UAASC,KAAK,EAAE;IAE9C,IAAIO,QAAQ,GAAGP,KAAK,CAACO,QAAQ;IAE7BA,QAAQ,CAACC,OAAO,CAAC,UAASC,CAAC,EAAE;MAC3Bd,QAAQ,CAACW,IAAI,CAAC,iBAAiB,EAAE;QAAEL,OAAO,EAAEQ;MAAE,CAAC,CAAC;IAClD,CAAC,CAAC;IAEFX,eAAe,CAACY,kBAAkB,CAACH,QAAQ,CAAC;EAC9C,CAAC,CAAC;EAEFZ,QAAQ,CAACI,EAAE,CAAC,eAAe,EAAE,UAASC,KAAK,EAAE;IAC3CF,eAAe,CAACa,MAAM,CAAC,OAAO,EAAEX,KAAK,CAACC,OAAO,EAAED,KAAK,CAACI,GAAG,CAAC;EAC3D,CAAC,CAAC;EAEFT,QAAQ,CAACI,EAAE,CAAC,oBAAoB,EAAE,UAASC,KAAK,EAAE;IAChDF,eAAe,CAACa,MAAM,CAAC,YAAY,EAAEX,KAAK,CAACC,OAAO,EAAED,KAAK,CAACI,GAAG,CAAC;EAChE,CAAC,CAAC;AACJ;AAEAV,aAAa,CAACkB,OAAO,GAAG,CACtB,UAAU,EACV,QAAQ,EACR,iBAAiB,EACjB,iBAAiB,CAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}