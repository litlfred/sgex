{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/runner/work/sgex/sgex/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n  message(_ref) {\n    let {\n      keyword,\n      schemaCode\n    } = _ref;\n    const comp = keyword === \"maxProperties\" ? \"more\" : \"fewer\";\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must NOT have \", \" than \", \" properties\"])), comp, schemaCode);\n  },\n  params: _ref2 => {\n    let {\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{limit: \", \"}\"])), schemaCode);\n  }\n};\nconst def = {\n  keyword: [\"maxProperties\", \"minProperties\"],\n  type: \"object\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      keyword,\n      data,\n      schemaCode\n    } = cxt;\n    const op = keyword === \"maxProperties\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n    cxt.fail$data((0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"Object.keys(\", \").length \", \" \", \"\"])), data, op, schemaCode));\n  }\n};\nexports.default = def;","map":{"version":3,"names":["codegen_1","require","error","message","_ref","keyword","schemaCode","comp","str","_templateObject","_taggedTemplateLiteral","params","_ref2","_","_templateObject2","def","type","schemaType","$data","code","cxt","data","op","operators","GT","LT","fail$data","_templateObject3","exports","default"],"sources":["/home/runner/work/sgex/sgex/node_modules/ajv/lib/vocabularies/validation/limitProperties.ts"],"sourcesContent":["import type {CodeKeywordDefinition, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, operators} from \"../../compile/codegen\"\n\nconst error: KeywordErrorDefinition = {\n  message({keyword, schemaCode}) {\n    const comp = keyword === \"maxProperties\" ? \"more\" : \"fewer\"\n    return str`must NOT have ${comp} than ${schemaCode} properties`\n  },\n  params: ({schemaCode}) => _`{limit: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: [\"maxProperties\", \"minProperties\"],\n  type: \"object\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {keyword, data, schemaCode} = cxt\n    const op = keyword === \"maxProperties\" ? operators.GT : operators.LT\n    cxt.fail$data(_`Object.keys(${data}).length ${op} ${schemaCode}`)\n  },\n}\n\nexport default def\n"],"mappings":";;;;;;;AAEA,MAAAA,SAAA,GAAAC,OAAA;AAEA,MAAMC,KAAK,GAA2B;EACpCC,OAAOA,CAAAC,IAAA,EAAsB;IAAA,IAArB;MAACC,OAAO;MAAEC;IAAU,CAAC,GAAAF,IAAA;IAC3B,MAAMG,IAAI,GAAGF,OAAO,KAAK,eAAe,GAAG,MAAM,GAAG,OAAO;IAC3D,QAAO,GAAAL,SAAA,CAAAQ,GAAG,EAAAC,eAAA,KAAAA,eAAA,GAAAC,sBAAA,gDAAiBH,IAAI,EAASD,UAAU;EACpD,CAAC;EACDK,MAAM,EAAEC,KAAA;IAAA,IAAC;MAACN;IAAU,CAAC,GAAAM,KAAA;IAAA,QAAK,GAAAZ,SAAA,CAAAa,CAAC,EAAAC,gBAAA,KAAAA,gBAAA,GAAAJ,sBAAA,sBAAWJ,UAAU;EAAA;CACjD;AAED,MAAMS,GAAG,GAA0B;EACjCV,OAAO,EAAE,CAAC,eAAe,EAAE,eAAe,CAAC;EAC3CW,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,QAAQ;EACpBC,KAAK,EAAE,IAAI;EACXhB,KAAK;EACLiB,IAAIA,CAACC,GAAe;IAClB,MAAM;MAACf,OAAO;MAAEgB,IAAI;MAAEf;IAAU,CAAC,GAAGc,GAAG;IACvC,MAAME,EAAE,GAAGjB,OAAO,KAAK,eAAe,GAAGL,SAAA,CAAAuB,SAAS,CAACC,EAAE,GAAGxB,SAAA,CAAAuB,SAAS,CAACE,EAAE;IACpEL,GAAG,CAACM,SAAS,EAAC,GAAA1B,SAAA,CAAAa,CAAC,EAAAc,gBAAA,KAAAA,gBAAA,GAAAjB,sBAAA,2CAAeW,IAAI,EAAYC,EAAE,EAAIhB,UAAU,CAAE,CAAC;EACnE;CACD;AAEDsB,OAAA,CAAAC,OAAA,GAAed,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}