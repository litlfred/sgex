{"ast":null,"code":"import React,{useState}from\"react\";import{useTranslation}from'react-i18next';import logger from\"../utils/logger\";import\"./PATLogin.css\";import{jsxs as _jsxs,jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const PATLogin=_ref=>{let{onAuthSuccess}=_ref;const{t}=useTranslation();const[token,setToken]=useState(\"\");const[error,setError]=useState(\"\");const[loading,setLoading]=useState(false);const componentLogger=logger.getLogger('PATLogin');React.useEffect(()=>{componentLogger.componentMount({hasOnAuthSuccess:!!onAuthSuccess});return()=>componentLogger.componentUnmount();},[componentLogger,onAuthSuccess]);const handleSubmit=async e=>{e.preventDefault();componentLogger.userAction('PAT login attempt',{tokenProvided:!!token.trim()});if(!token.trim()){const errorMsg=t('patLogin.errors.noToken');setError(errorMsg);componentLogger.warn('PAT login failed - no token provided');return;}setLoading(true);setError(\"\");const startTime=Date.now();componentLogger.auth('Starting PAT authentication');try{// Test the token by creating an Octokit instance and making a test request\nconst{Octokit}=await import('@octokit/rest');const octokit=new Octokit({auth:token.trim()});componentLogger.debug('Octokit instance created for PAT validation');// Test the token by fetching user info\ncomponentLogger.apiCall('GET','/user',null);const userResponse=await octokit.rest.users.getAuthenticated();const duration=Date.now()-startTime;componentLogger.apiResponse('GET','/user',userResponse.status,duration);componentLogger.auth('PAT authentication successful',{username:userResponse.data.login,duration});// Call success callback with token and octokit instance\nonAuthSuccess(token.trim(),octokit);}catch(err){const duration=Date.now()-startTime;componentLogger.apiError('GET','/user',err);componentLogger.auth('PAT authentication failed',{status:err.status,message:err.message,duration});console.error('PAT authentication failed:',err);if(err.status===401){setError(t('patLogin.errors.invalidToken'));}else if(err.status===403){setError(t('patLogin.errors.insufficientPermissions'));}else{setError(t('patLogin.errors.authFailed'));}}finally{setLoading(false);}};const handleTokenChange=e=>{setToken(e.target.value);if(error)setError(\"\");// Clear error when user starts typing\n};return/*#__PURE__*/_jsx(\"div\",{className:\"pat-login\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"pat-login-section\",children:[/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"pat-form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"pat-token\",children:[t('patLogin.tokenLabel'),\":\"]}),/*#__PURE__*/_jsx(\"input\",{id:\"pat-token\",type:\"password\",value:token,onChange:handleTokenChange,placeholder:t('patLogin.tokenPlaceholder'),className:`token-input ${error?'error':''}`,disabled:loading,autoComplete:\"off\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"github-login-btn\",disabled:loading||!token.trim(),children:loading?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"spinner small\"}),t('patLogin.authenticating')]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"github-icon\",children:\"\\uD83D\\uDD11\"}),t('patLogin.signInButton')]})})]}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error})]})});};export default PATLogin;","map":{"version":3,"names":["React","useState","useTranslation","logger","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","PATLogin","_ref","onAuthSuccess","t","token","setToken","error","setError","loading","setLoading","componentLogger","getLogger","useEffect","componentMount","hasOnAuthSuccess","componentUnmount","handleSubmit","e","preventDefault","userAction","tokenProvided","trim","errorMsg","warn","startTime","Date","now","auth","Octokit","octokit","debug","apiCall","userResponse","rest","users","getAuthenticated","duration","apiResponse","status","username","data","login","err","apiError","message","console","handleTokenChange","target","value","className","children","onSubmit","htmlFor","id","type","onChange","placeholder","disabled","autoComplete"],"sources":["/home/runner/work/sgex/sgex/src/components/PATLogin.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport logger from \"../utils/logger\";\nimport \"./PATLogin.css\";\n\nconst PATLogin = ({ onAuthSuccess }) => {\n  const { t } = useTranslation();\n  const [token, setToken] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const componentLogger = logger.getLogger('PATLogin');\n\n  React.useEffect(() => {\n    componentLogger.componentMount({ hasOnAuthSuccess: !!onAuthSuccess });\n    return () => componentLogger.componentUnmount();\n  }, [componentLogger, onAuthSuccess]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    componentLogger.userAction('PAT login attempt', { tokenProvided: !!token.trim() });\n    \n    if (!token.trim()) {\n      const errorMsg = t('patLogin.errors.noToken');\n      setError(errorMsg);\n      componentLogger.warn('PAT login failed - no token provided');\n      return;\n    }\n\n    setLoading(true);\n    setError(\"\");\n    const startTime = Date.now();\n    componentLogger.auth('Starting PAT authentication');\n    \n    try {\n      // Test the token by creating an Octokit instance and making a test request\n      const { Octokit } = await import('@octokit/rest');\n      const octokit = new Octokit({ auth: token.trim() });\n      componentLogger.debug('Octokit instance created for PAT validation');\n      \n      // Test the token by fetching user info\n      componentLogger.apiCall('GET', '/user', null);\n      const userResponse = await octokit.rest.users.getAuthenticated();\n      const duration = Date.now() - startTime;\n      componentLogger.apiResponse('GET', '/user', userResponse.status, duration);\n      \n      componentLogger.auth('PAT authentication successful', { \n        username: userResponse.data.login,\n        duration \n      });\n      \n      // Call success callback with token and octokit instance\n      onAuthSuccess(token.trim(), octokit);\n    } catch (err) {\n      const duration = Date.now() - startTime;\n      componentLogger.apiError('GET', '/user', err);\n      componentLogger.auth('PAT authentication failed', { \n        status: err.status, \n        message: err.message,\n        duration \n      });\n      console.error('PAT authentication failed:', err);\n      \n      if (err.status === 401) {\n        setError(t('patLogin.errors.invalidToken'));\n      } else if (err.status === 403) {\n        setError(t('patLogin.errors.insufficientPermissions'));\n      } else {\n        setError(t('patLogin.errors.authFailed'));\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTokenChange = (e) => {\n    setToken(e.target.value);\n    if (error) setError(\"\"); // Clear error when user starts typing\n  };\n\n  return (\n    <div className=\"pat-login\">\n      <div className=\"pat-login-section\">\n        <form onSubmit={handleSubmit} className=\"pat-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"pat-token\">{t('patLogin.tokenLabel')}:</label>\n            <input\n              id=\"pat-token\"\n              type=\"password\"\n              value={token}\n              onChange={handleTokenChange}\n              placeholder={t('patLogin.tokenPlaceholder')}\n              className={`token-input ${error ? 'error' : ''}`}\n              disabled={loading}\n              autoComplete=\"off\"\n            />\n          </div>\n          \n          <button \n            type=\"submit\" \n            className=\"github-login-btn\" \n            disabled={loading || !token.trim()}\n          >\n            {loading ? (\n              <>\n                <span className=\"spinner small\"></span>\n                {t('patLogin.authenticating')}\n              </>\n            ) : (\n              <>\n                <span className=\"github-icon\">ðŸ”‘</span>\n                {t('patLogin.signInButton')}\n              </>\n            )}\n          </button>\n        </form>\n        \n        {error && <div className=\"error-message\">{error}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default PATLogin;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}