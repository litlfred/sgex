{"ast":null,"code":"/**\n * Centralized logging utility for SGEX Workbench\n * Provides consistent, configurable logging for debugging during development\n */class Logger{constructor(){// Check if we're in development mode\nthis.isDevelopment=process.env.NODE_ENV==='development';// Log levels\nthis.LEVELS={ERROR:0,WARN:1,INFO:2,DEBUG:3};// Current log level (can be overridden via localStorage)\nthis.currentLevel=this.isDevelopment?this.LEVELS.DEBUG:this.LEVELS.ERROR;// Check for custom log level in localStorage\nconst storedLevel=localStorage.getItem('sgex-log-level');if(storedLevel&&this.LEVELS[storedLevel.toUpperCase()]!==undefined){this.currentLevel=this.LEVELS[storedLevel.toUpperCase()];}// Component/service prefixes for organized logging\nthis.prefixes=new Map();}/**\n   * Set log level programmatically\n   * @param {string} level - ERROR, WARN, INFO, or DEBUG\n   */setLevel(level){const upperLevel=level.toUpperCase();if(this.LEVELS[upperLevel]!==undefined){this.currentLevel=this.LEVELS[upperLevel];localStorage.setItem('sgex-log-level',upperLevel);}}/**\n   * Get a logger instance for a specific component/service\n   * @param {string} name - Component or service name\n   * @returns {Object} Logger instance with prefixed methods\n   */getLogger(name){var _this=this;const prefix=`[SGEX:${name}]`;return{error:function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _this._log(_this.LEVELS.ERROR,prefix,...args);},warn:function(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}return _this._log(_this.LEVELS.WARN,prefix,...args);},info:function(){for(var _len3=arguments.length,args=new Array(_len3),_key3=0;_key3<_len3;_key3++){args[_key3]=arguments[_key3];}return _this._log(_this.LEVELS.INFO,prefix,...args);},debug:function(){for(var _len4=arguments.length,args=new Array(_len4),_key4=0;_key4<_len4;_key4++){args[_key4]=arguments[_key4];}return _this._log(_this.LEVELS.DEBUG,prefix,...args);},// Specialized logging methods\napiCall:(method,url,data)=>this._log(this.LEVELS.DEBUG,prefix,`API ${method}:`,url,data?{data}:''),apiResponse:(method,url,status,responseTime)=>this._log(this.LEVELS.DEBUG,prefix,`API Response ${method}:`,url,`(${status}) ${responseTime}ms`),apiError:(method,url,error)=>this._log(this.LEVELS.ERROR,prefix,`API Error ${method}:`,url,error),componentMount:props=>this._log(this.LEVELS.DEBUG,prefix,'Component mounted',props?{props}:''),componentUnmount:()=>this._log(this.LEVELS.DEBUG,prefix,'Component unmounted'),stateChange:(oldState,newState)=>this._log(this.LEVELS.DEBUG,prefix,'State change',{from:oldState,to:newState}),userAction:(action,details)=>this._log(this.LEVELS.INFO,prefix,`User action: ${action}`,details),performance:(operation,duration)=>this._log(this.LEVELS.INFO,prefix,`Performance: ${operation} took ${duration}ms`),auth:(event,details)=>this._log(this.LEVELS.INFO,prefix,`Auth: ${event}`,details),navigation:(from,to)=>this._log(this.LEVELS.INFO,prefix,`Navigation: ${from} -> ${to}`),cache:(operation,key,details)=>this._log(this.LEVELS.DEBUG,prefix,`Cache ${operation}:`,key,details)};}/**\n   * Internal logging method\n   * @private\n   */_log(level,prefix){if(level<=this.currentLevel){const timestamp=new Date().toISOString();const levelName=Object.keys(this.LEVELS)[Object.values(this.LEVELS).indexOf(level)];// Add timestamp and level to the log\nfor(var _len5=arguments.length,args=new Array(_len5>2?_len5-2:0),_key5=2;_key5<_len5;_key5++){args[_key5-2]=arguments[_key5];}const logArgs=[`${timestamp} [${levelName}] ${prefix}`,...args];// Use appropriate console method based on level\nswitch(level){case this.LEVELS.ERROR:console.error(...logArgs);break;case this.LEVELS.WARN:console.warn(...logArgs);break;case this.LEVELS.INFO:console.info(...logArgs);break;case this.LEVELS.DEBUG:console.log(...logArgs);break;default:console.log(...logArgs);break;}}}/**\n   * Enable verbose logging for debugging\n   */enableVerbose(){this.setLevel('DEBUG');console.info('[SGEX:Logger] Verbose logging enabled. Use logger.setLevel(\"ERROR\") to disable.');}/**\n   * Disable verbose logging\n   */disableVerbose(){this.setLevel('ERROR');console.info('[SGEX:Logger] Verbose logging disabled.');}}// Export singleton instance\nconst logger=new Logger();// Make logger available globally for debugging\nif(typeof window!=='undefined'){window.sgexLogger=logger;}export default logger;","map":{"version":3,"names":["Logger","constructor","isDevelopment","process","env","NODE_ENV","LEVELS","ERROR","WARN","INFO","DEBUG","currentLevel","storedLevel","localStorage","getItem","toUpperCase","undefined","prefixes","Map","setLevel","level","upperLevel","setItem","getLogger","name","_this","prefix","error","_len","arguments","length","args","Array","_key","_log","warn","_len2","_key2","info","_len3","_key3","debug","_len4","_key4","apiCall","method","url","data","apiResponse","status","responseTime","apiError","componentMount","props","componentUnmount","stateChange","oldState","newState","from","to","userAction","action","details","performance","operation","duration","auth","event","navigation","cache","key","timestamp","Date","toISOString","levelName","Object","keys","values","indexOf","_len5","_key5","logArgs","console","log","enableVerbose","disableVerbose","logger","window","sgexLogger"],"sources":["/home/runner/work/sgex/sgex/src/utils/logger.js"],"sourcesContent":["/**\n * Centralized logging utility for SGEX Workbench\n * Provides consistent, configurable logging for debugging during development\n */\n\nclass Logger {\n  constructor() {\n    // Check if we're in development mode\n    this.isDevelopment = process.env.NODE_ENV === 'development';\n    \n    // Log levels\n    this.LEVELS = {\n      ERROR: 0,\n      WARN: 1,\n      INFO: 2,\n      DEBUG: 3\n    };\n    \n    // Current log level (can be overridden via localStorage)\n    this.currentLevel = this.isDevelopment ? this.LEVELS.DEBUG : this.LEVELS.ERROR;\n    \n    // Check for custom log level in localStorage\n    const storedLevel = localStorage.getItem('sgex-log-level');\n    if (storedLevel && this.LEVELS[storedLevel.toUpperCase()] !== undefined) {\n      this.currentLevel = this.LEVELS[storedLevel.toUpperCase()];\n    }\n    \n    // Component/service prefixes for organized logging\n    this.prefixes = new Map();\n  }\n  \n  /**\n   * Set log level programmatically\n   * @param {string} level - ERROR, WARN, INFO, or DEBUG\n   */\n  setLevel(level) {\n    const upperLevel = level.toUpperCase();\n    if (this.LEVELS[upperLevel] !== undefined) {\n      this.currentLevel = this.LEVELS[upperLevel];\n      localStorage.setItem('sgex-log-level', upperLevel);\n    }\n  }\n  \n  /**\n   * Get a logger instance for a specific component/service\n   * @param {string} name - Component or service name\n   * @returns {Object} Logger instance with prefixed methods\n   */\n  getLogger(name) {\n    const prefix = `[SGEX:${name}]`;\n    return {\n      error: (...args) => this._log(this.LEVELS.ERROR, prefix, ...args),\n      warn: (...args) => this._log(this.LEVELS.WARN, prefix, ...args),\n      info: (...args) => this._log(this.LEVELS.INFO, prefix, ...args),\n      debug: (...args) => this._log(this.LEVELS.DEBUG, prefix, ...args),\n      \n      // Specialized logging methods\n      apiCall: (method, url, data) => this._log(this.LEVELS.DEBUG, prefix, `API ${method}:`, url, data ? { data } : ''),\n      apiResponse: (method, url, status, responseTime) => this._log(this.LEVELS.DEBUG, prefix, `API Response ${method}:`, url, `(${status}) ${responseTime}ms`),\n      apiError: (method, url, error) => this._log(this.LEVELS.ERROR, prefix, `API Error ${method}:`, url, error),\n      \n      componentMount: (props) => this._log(this.LEVELS.DEBUG, prefix, 'Component mounted', props ? { props } : ''),\n      componentUnmount: () => this._log(this.LEVELS.DEBUG, prefix, 'Component unmounted'),\n      stateChange: (oldState, newState) => this._log(this.LEVELS.DEBUG, prefix, 'State change', { from: oldState, to: newState }),\n      \n      userAction: (action, details) => this._log(this.LEVELS.INFO, prefix, `User action: ${action}`, details),\n      \n      performance: (operation, duration) => this._log(this.LEVELS.INFO, prefix, `Performance: ${operation} took ${duration}ms`),\n      \n      auth: (event, details) => this._log(this.LEVELS.INFO, prefix, `Auth: ${event}`, details),\n      \n      navigation: (from, to) => this._log(this.LEVELS.INFO, prefix, `Navigation: ${from} -> ${to}`),\n      \n      cache: (operation, key, details) => this._log(this.LEVELS.DEBUG, prefix, `Cache ${operation}:`, key, details)\n    };\n  }\n  \n  /**\n   * Internal logging method\n   * @private\n   */\n  _log(level, prefix, ...args) {\n    if (level <= this.currentLevel) {\n      const timestamp = new Date().toISOString();\n      const levelName = Object.keys(this.LEVELS)[Object.values(this.LEVELS).indexOf(level)];\n      \n      // Add timestamp and level to the log\n      const logArgs = [`${timestamp} [${levelName}] ${prefix}`, ...args];\n      \n      // Use appropriate console method based on level\n      switch (level) {\n        case this.LEVELS.ERROR:\n          console.error(...logArgs);\n          break;\n        case this.LEVELS.WARN:\n          console.warn(...logArgs);\n          break;\n        case this.LEVELS.INFO:\n          console.info(...logArgs);\n          break;\n        case this.LEVELS.DEBUG:\n          console.log(...logArgs);\n          break;\n        default:\n          console.log(...logArgs);\n          break;\n      }\n    }\n  }\n  \n  /**\n   * Enable verbose logging for debugging\n   */\n  enableVerbose() {\n    this.setLevel('DEBUG');\n    console.info('[SGEX:Logger] Verbose logging enabled. Use logger.setLevel(\"ERROR\") to disable.');\n  }\n  \n  /**\n   * Disable verbose logging\n   */\n  disableVerbose() {\n    this.setLevel('ERROR');\n    console.info('[SGEX:Logger] Verbose logging disabled.');\n  }\n}\n\n// Export singleton instance\nconst logger = new Logger();\n\n// Make logger available globally for debugging\nif (typeof window !== 'undefined') {\n  window.sgexLogger = logger;\n}\n\nexport default logger;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}