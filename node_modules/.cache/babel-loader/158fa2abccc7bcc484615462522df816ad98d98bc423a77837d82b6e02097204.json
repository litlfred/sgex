{"ast":null,"code":"import { every } from 'min-dash';\n\n/**\n * @typedef {import('../util/Types').Axis} Axis\n * @typedef {import('../util/Types').Point} Point\n * @typedef {import('../util/Types').Rect} Rect\n */\n\n/**\n * Computes the distance between two points.\n *\n * @param {Point} a\n * @param {Point} b\n *\n * @return {number} The distance between the two points.\n */\nexport function pointDistance(a, b) {\n  if (!a || !b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n}\n\n/**\n * Returns true if the point r is on the line between p and q.\n *\n * @param {Point} p\n * @param {Point} q\n * @param {Point} r\n * @param {number} [accuracy=5] The accuracy with which to check (lower is better).\n *\n * @return {boolean}\n */\nexport function pointsOnLine(p, q, r, accuracy) {\n  if (typeof accuracy === 'undefined') {\n    accuracy = 5;\n  }\n  if (!p || !q || !r) {\n    return false;\n  }\n  var val = (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x),\n    dist = pointDistance(p, q);\n\n  // @see http://stackoverflow.com/a/907491/412190\n  return Math.abs(val / dist) <= accuracy;\n}\nvar ALIGNED_THRESHOLD = 2;\n\n/**\n * Check whether two points are horizontally or vertically aligned.\n *\n * @param {Point[]|Point} a\n * @param {Point} [b]\n *\n * @return {string|boolean} If and how the two points are aligned ('h', 'v' or `false`).\n */\nexport function pointsAligned(a, b) {\n  var points = Array.from(arguments).flat();\n  const axisMap = {\n    'x': 'v',\n    'y': 'h'\n  };\n  for (const [axis, orientation] of Object.entries(axisMap)) {\n    if (pointsAlignedOnAxis(axis, points)) {\n      return orientation;\n    }\n  }\n  return false;\n}\n\n/**\n * @param {Axis} axis\n * @param {Point[]} points\n *\n * @return {boolean}\n */\nexport function pointsAlignedOnAxis(axis, points) {\n  const referencePoint = points[0];\n  return every(points, function (point) {\n    return Math.abs(referencePoint[axis] - point[axis]) <= ALIGNED_THRESHOLD;\n  });\n}\n\n/**\n * Returns true if the point p is inside the rectangle rect\n *\n * @param {Point} p\n * @param {Rect} rect\n * @param {number} tolerance\n *\n * @return {boolean}\n */\nexport function pointInRect(p, rect, tolerance) {\n  tolerance = tolerance || 0;\n  return p.x > rect.x - tolerance && p.y > rect.y - tolerance && p.x < rect.x + rect.width + tolerance && p.y < rect.y + rect.height + tolerance;\n}\n\n/**\n * Returns a point in the middle of points p and q\n *\n * @param {Point} p\n * @param {Point} q\n *\n * @return {Point} The mid point between the two points.\n */\nexport function getMidPoint(p, q) {\n  return {\n    x: Math.round(p.x + (q.x - p.x) / 2.0),\n    y: Math.round(p.y + (q.y - p.y) / 2.0)\n  };\n}","map":{"version":3,"names":["every","pointDistance","a","b","Math","sqrt","pow","x","y","pointsOnLine","p","q","r","accuracy","val","dist","abs","ALIGNED_THRESHOLD","pointsAligned","points","Array","from","arguments","flat","axisMap","axis","orientation","Object","entries","pointsAlignedOnAxis","referencePoint","point","pointInRect","rect","tolerance","width","height","getMidPoint","round"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/util/Geometry.js"],"sourcesContent":["import {\n  every\n} from 'min-dash';\n\n/**\n * @typedef {import('../util/Types').Axis} Axis\n * @typedef {import('../util/Types').Point} Point\n * @typedef {import('../util/Types').Rect} Rect\n */\n\n/**\n * Computes the distance between two points.\n *\n * @param {Point} a\n * @param {Point} b\n *\n * @return {number} The distance between the two points.\n */\nexport function pointDistance(a, b) {\n  if (!a || !b) {\n    return -1;\n  }\n\n  return Math.sqrt(\n    Math.pow(a.x - b.x, 2) +\n    Math.pow(a.y - b.y, 2)\n  );\n}\n\n\n/**\n * Returns true if the point r is on the line between p and q.\n *\n * @param {Point} p\n * @param {Point} q\n * @param {Point} r\n * @param {number} [accuracy=5] The accuracy with which to check (lower is better).\n *\n * @return {boolean}\n */\nexport function pointsOnLine(p, q, r, accuracy) {\n\n  if (typeof accuracy === 'undefined') {\n    accuracy = 5;\n  }\n\n  if (!p || !q || !r) {\n    return false;\n  }\n\n  var val = (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x),\n      dist = pointDistance(p, q);\n\n  // @see http://stackoverflow.com/a/907491/412190\n  return Math.abs(val / dist) <= accuracy;\n}\n\n\nvar ALIGNED_THRESHOLD = 2;\n\n/**\n * Check whether two points are horizontally or vertically aligned.\n *\n * @param {Point[]|Point} a\n * @param {Point} [b]\n *\n * @return {string|boolean} If and how the two points are aligned ('h', 'v' or `false`).\n */\nexport function pointsAligned(a, b) {\n  var points = Array.from(arguments).flat();\n\n  const axisMap = {\n    'x': 'v',\n    'y': 'h'\n  };\n\n  for (const [ axis, orientation ] of Object.entries(axisMap)) {\n    if (pointsAlignedOnAxis(axis, points)) {\n      return orientation;\n    }\n  }\n\n  return false;\n}\n\n/**\n * @param {Axis} axis\n * @param {Point[]} points\n *\n * @return {boolean}\n */\nexport function pointsAlignedOnAxis(axis, points) {\n  const referencePoint = points[0];\n\n  return every(points, function(point) {\n    return Math.abs(referencePoint[axis] - point[axis]) <= ALIGNED_THRESHOLD;\n  });\n}\n\n/**\n * Returns true if the point p is inside the rectangle rect\n *\n * @param {Point} p\n * @param {Rect} rect\n * @param {number} tolerance\n *\n * @return {boolean}\n */\nexport function pointInRect(p, rect, tolerance) {\n  tolerance = tolerance || 0;\n\n  return p.x > rect.x - tolerance &&\n         p.y > rect.y - tolerance &&\n         p.x < rect.x + rect.width + tolerance &&\n         p.y < rect.y + rect.height + tolerance;\n}\n\n/**\n * Returns a point in the middle of points p and q\n *\n * @param {Point} p\n * @param {Point} q\n *\n * @return {Point} The mid point between the two points.\n */\nexport function getMidPoint(p, q) {\n  return {\n    x: Math.round(p.x + ((q.x - p.x) / 2.0)),\n    y: Math.round(p.y + ((q.y - p.y) / 2.0))\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}