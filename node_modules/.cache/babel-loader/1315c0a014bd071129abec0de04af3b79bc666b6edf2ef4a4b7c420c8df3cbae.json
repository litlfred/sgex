{"ast":null,"code":"import { getMid } from 'diagram-js/lib/layout/LayoutUtil';\nimport lineIntersect from './util/LineIntersect';\n\n/**\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n */\n\n/**\n * Fix broken dockings after DI imports.\n *\n * @param {EventBus} eventBus\n */\nexport default function ImportDockingFix(eventBus) {\n  function adjustDocking(startPoint, nextPoint, elementMid) {\n    var elementTop = {\n      x: elementMid.x,\n      y: elementMid.y - 50\n    };\n    var elementLeft = {\n      x: elementMid.x - 50,\n      y: elementMid.y\n    };\n    var verticalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementTop),\n      horizontalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementLeft);\n\n    // original is horizontal or vertical center cross intersection\n    var centerIntersect;\n    if (verticalIntersect && horizontalIntersect) {\n      if (getDistance(verticalIntersect, elementMid) > getDistance(horizontalIntersect, elementMid)) {\n        centerIntersect = horizontalIntersect;\n      } else {\n        centerIntersect = verticalIntersect;\n      }\n    } else {\n      centerIntersect = verticalIntersect || horizontalIntersect;\n    }\n    startPoint.original = centerIntersect;\n  }\n  function fixDockings(connection) {\n    var waypoints = connection.waypoints;\n    adjustDocking(waypoints[0], waypoints[1], getMid(connection.source));\n    adjustDocking(waypoints[waypoints.length - 1], waypoints[waypoints.length - 2], getMid(connection.target));\n  }\n  eventBus.on('bpmnElement.added', function (e) {\n    var element = e.element;\n    if (element.waypoints) {\n      fixDockings(element);\n    }\n  });\n}\nImportDockingFix.$inject = ['eventBus'];\n\n// helpers //////////////////////\n\nfunction getDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}","map":{"version":3,"names":["getMid","lineIntersect","ImportDockingFix","eventBus","adjustDocking","startPoint","nextPoint","elementMid","elementTop","x","y","elementLeft","verticalIntersect","horizontalIntersect","centerIntersect","getDistance","original","fixDockings","connection","waypoints","source","length","target","on","e","element","$inject","p1","p2","Math","sqrt","pow"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/modeling/behavior/ImportDockingFix.js"],"sourcesContent":["import {\n  getMid\n} from 'diagram-js/lib/layout/LayoutUtil';\n\nimport lineIntersect from './util/LineIntersect';\n\n/**\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n */\n\n/**\n * Fix broken dockings after DI imports.\n *\n * @param {EventBus} eventBus\n */\nexport default function ImportDockingFix(eventBus) {\n\n  function adjustDocking(startPoint, nextPoint, elementMid) {\n\n    var elementTop = {\n      x: elementMid.x,\n      y: elementMid.y - 50\n    };\n\n    var elementLeft = {\n      x: elementMid.x - 50,\n      y: elementMid.y\n    };\n\n    var verticalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementTop),\n        horizontalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementLeft);\n\n    // original is horizontal or vertical center cross intersection\n    var centerIntersect;\n\n    if (verticalIntersect && horizontalIntersect) {\n      if (getDistance(verticalIntersect, elementMid) > getDistance(horizontalIntersect, elementMid)) {\n        centerIntersect = horizontalIntersect;\n      } else {\n        centerIntersect = verticalIntersect;\n      }\n    } else {\n      centerIntersect = verticalIntersect || horizontalIntersect;\n    }\n\n    startPoint.original = centerIntersect;\n  }\n\n  function fixDockings(connection) {\n    var waypoints = connection.waypoints;\n\n    adjustDocking(\n      waypoints[0],\n      waypoints[1],\n      getMid(connection.source)\n    );\n\n    adjustDocking(\n      waypoints[waypoints.length - 1],\n      waypoints[waypoints.length - 2],\n      getMid(connection.target)\n    );\n  }\n\n  eventBus.on('bpmnElement.added', function(e) {\n\n    var element = e.element;\n\n    if (element.waypoints) {\n      fixDockings(element);\n    }\n  });\n}\n\nImportDockingFix.$inject = [\n  'eventBus'\n];\n\n\n// helpers //////////////////////\n\nfunction getDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}"],"mappings":"AAAA,SACEA,MAAM,QACD,kCAAkC;AAEzC,OAAOC,aAAa,MAAM,sBAAsB;;AAEhD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,gBAAgBA,CAACC,QAAQ,EAAE;EAEjD,SAASC,aAAaA,CAACC,UAAU,EAAEC,SAAS,EAAEC,UAAU,EAAE;IAExD,IAAIC,UAAU,GAAG;MACfC,CAAC,EAAEF,UAAU,CAACE,CAAC;MACfC,CAAC,EAAEH,UAAU,CAACG,CAAC,GAAG;IACpB,CAAC;IAED,IAAIC,WAAW,GAAG;MAChBF,CAAC,EAAEF,UAAU,CAACE,CAAC,GAAG,EAAE;MACpBC,CAAC,EAAEH,UAAU,CAACG;IAChB,CAAC;IAED,IAAIE,iBAAiB,GAAGX,aAAa,CAACI,UAAU,EAAEC,SAAS,EAAEC,UAAU,EAAEC,UAAU,CAAC;MAChFK,mBAAmB,GAAGZ,aAAa,CAACI,UAAU,EAAEC,SAAS,EAAEC,UAAU,EAAEI,WAAW,CAAC;;IAEvF;IACA,IAAIG,eAAe;IAEnB,IAAIF,iBAAiB,IAAIC,mBAAmB,EAAE;MAC5C,IAAIE,WAAW,CAACH,iBAAiB,EAAEL,UAAU,CAAC,GAAGQ,WAAW,CAACF,mBAAmB,EAAEN,UAAU,CAAC,EAAE;QAC7FO,eAAe,GAAGD,mBAAmB;MACvC,CAAC,MAAM;QACLC,eAAe,GAAGF,iBAAiB;MACrC;IACF,CAAC,MAAM;MACLE,eAAe,GAAGF,iBAAiB,IAAIC,mBAAmB;IAC5D;IAEAR,UAAU,CAACW,QAAQ,GAAGF,eAAe;EACvC;EAEA,SAASG,WAAWA,CAACC,UAAU,EAAE;IAC/B,IAAIC,SAAS,GAAGD,UAAU,CAACC,SAAS;IAEpCf,aAAa,CACXe,SAAS,CAAC,CAAC,CAAC,EACZA,SAAS,CAAC,CAAC,CAAC,EACZnB,MAAM,CAACkB,UAAU,CAACE,MAAM,CAC1B,CAAC;IAEDhB,aAAa,CACXe,SAAS,CAACA,SAAS,CAACE,MAAM,GAAG,CAAC,CAAC,EAC/BF,SAAS,CAACA,SAAS,CAACE,MAAM,GAAG,CAAC,CAAC,EAC/BrB,MAAM,CAACkB,UAAU,CAACI,MAAM,CAC1B,CAAC;EACH;EAEAnB,QAAQ,CAACoB,EAAE,CAAC,mBAAmB,EAAE,UAASC,CAAC,EAAE;IAE3C,IAAIC,OAAO,GAAGD,CAAC,CAACC,OAAO;IAEvB,IAAIA,OAAO,CAACN,SAAS,EAAE;MACrBF,WAAW,CAACQ,OAAO,CAAC;IACtB;EACF,CAAC,CAAC;AACJ;AAEAvB,gBAAgB,CAACwB,OAAO,GAAG,CACzB,UAAU,CACX;;AAGD;;AAEA,SAASX,WAAWA,CAACY,EAAE,EAAEC,EAAE,EAAE;EAC3B,OAAOC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,GAAG,CAACJ,EAAE,CAAClB,CAAC,GAAGmB,EAAE,CAACnB,CAAC,EAAE,CAAC,CAAC,GAAGoB,IAAI,CAACE,GAAG,CAACJ,EAAE,CAACjB,CAAC,GAAGkB,EAAE,CAAClB,CAAC,EAAE,CAAC,CAAC,CAAC;AACvE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}