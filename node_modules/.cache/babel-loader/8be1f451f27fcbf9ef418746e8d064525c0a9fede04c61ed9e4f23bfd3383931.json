{"ast":null,"code":"import _objectSpread from\"/home/runner/work/sgex/sgex/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * Data Access Layer\n * \n * Comprehensive service that integrates user access, staging ground, and GitHub\n * for a unified asset management experience across all user types.\n */import userAccessService from'./userAccessService';import stagingGroundService from'./stagingGroundService';import githubService from'./githubService';import logger from'../utils/logger';/**\n * Save targets for asset operations\n */export const SAVE_TARGETS={LOCAL:'local',GITHUB:'github'};/**\n * Asset operation results\n */export const OPERATION_RESULTS={SUCCESS:'success',ERROR:'error',PERMISSION_DENIED:'permission_denied',DEMO_MODE_BLOCKED:'demo_mode_blocked'};class DataAccessLayer{constructor(){this.logger=logger.getLogger('DataAccessLayer');this.pendingOperations=new Map();this.assetCache=new Map();}/**\n   * Initialize data access layer\n   */async initialize(repository,branch){this.logger.info('Initializing data access layer',{repository:repository===null||repository===void 0?void 0:repository.full_name,branch});// Initialize staging ground for the repository\nstagingGroundService.initialize(repository,branch);// Initialize user access service if not already done\nawait userAccessService.initialize();}/**\n   * Get asset content from GitHub or local storage\n   */async getAsset(owner,repo,branch,assetPath){const cacheKey=\"\".concat(owner,\"/\").concat(repo,\"/\").concat(branch,\"/\").concat(assetPath);try{// Check if user has read access\nconst access=await userAccessService.getRepositoryAccess(owner,repo,branch);if(access==='none'){throw new Error('No access to this repository');}// First, check if there's a local version in staging ground\nconst stagingGround=stagingGroundService.getStagingGround();const localFile=stagingGround.files.find(f=>f.path===assetPath);if(localFile){this.logger.debug('Asset loaded from staging ground',{assetPath});return{content:localFile.content,source:'local',metadata:localFile.metadata,hasLocalChanges:true};}// If no local version, get from GitHub\nlet content;if(userAccessService.isDemoUser()&&userAccessService.isDemoDAK(owner,repo)){// For demo users, provide demo content\ncontent=this.getDemoAssetContent(assetPath);}else{// Get real content from GitHub\ncontent=await githubService.getFileContent(owner,repo,assetPath,branch);}// Cache the content\nthis.assetCache.set(cacheKey,content);this.logger.debug('Asset loaded from GitHub',{assetPath,source:'github'});return{content,source:'github',hasLocalChanges:false};}catch(error){this.logger.error('Error getting asset',{owner,repo,branch,assetPath,error:error.message});throw error;}}/**\n   * Save asset to local storage (staging ground)\n   */async saveAssetLocal(assetPath,content){let metadata=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};try{const userType=userAccessService.getUserType();// All user types can save to local storage\nconst success=stagingGroundService.updateFile(assetPath,content,_objectSpread(_objectSpread({},metadata),{},{savedBy:userType,saveTarget:SAVE_TARGETS.LOCAL}));if(success){this.logger.info('Asset saved to local storage',{assetPath,userType});return{result:OPERATION_RESULTS.SUCCESS,message:'Changes saved to local staging area',target:SAVE_TARGETS.LOCAL};}else{throw new Error('Failed to save to local storage');}}catch(error){this.logger.error('Error saving asset locally',{assetPath,error:error.message});return{result:OPERATION_RESULTS.ERROR,message:\"Failed to save locally: \".concat(error.message),target:SAVE_TARGETS.LOCAL};}}/**\n   * Save asset to GitHub\n   */async saveAssetGitHub(owner,repo,branch,assetPath,content,commitMessage){let metadata=arguments.length>6&&arguments[6]!==undefined?arguments[6]:{};try{const userType=userAccessService.getUserType();// Check if user can save to GitHub\nconst canSave=await userAccessService.canSaveToGitHub(owner,repo,branch);if(!canSave){if(userType==='demo'){return{result:OPERATION_RESULTS.DEMO_MODE_BLOCKED,message:'Demo users cannot save to GitHub. Changes can be saved locally.',target:SAVE_TARGETS.GITHUB};}else if(userType==='unauthenticated'){return{result:OPERATION_RESULTS.PERMISSION_DENIED,message:'Please authenticate to save changes to GitHub.',target:SAVE_TARGETS.GITHUB};}else{return{result:OPERATION_RESULTS.PERMISSION_DENIED,message:'You do not have write access to this repository.',target:SAVE_TARGETS.GITHUB};}}// For authenticated users with write access, save to GitHub\nconst result=await githubService.updateFileContent(owner,repo,assetPath,content,commitMessage,branch);if(result.success){var _result$data,_result$data$commit,_result$data2,_result$data2$commit,_result$data3,_result$data3$commit;// Remove from staging ground since it's now committed\nstagingGroundService.removeFile(assetPath);// Clear cache\nconst cacheKey=\"\".concat(owner,\"/\").concat(repo,\"/\").concat(branch,\"/\").concat(assetPath);this.assetCache.delete(cacheKey);this.logger.info('Asset saved to GitHub',{owner,repo,branch,assetPath,commit:(_result$data=result.data)===null||_result$data===void 0?void 0:(_result$data$commit=_result$data.commit)===null||_result$data$commit===void 0?void 0:_result$data$commit.sha});return{result:OPERATION_RESULTS.SUCCESS,message:'Changes successfully committed to GitHub',target:SAVE_TARGETS.GITHUB,commitSha:(_result$data2=result.data)===null||_result$data2===void 0?void 0:(_result$data2$commit=_result$data2.commit)===null||_result$data2$commit===void 0?void 0:_result$data2$commit.sha,commitUrl:(_result$data3=result.data)===null||_result$data3===void 0?void 0:(_result$data3$commit=_result$data3.commit)===null||_result$data3$commit===void 0?void 0:_result$data3$commit.html_url};}else{throw new Error(result.error||'GitHub commit failed');}}catch(error){this.logger.error('Error saving asset to GitHub',{owner,repo,branch,assetPath,error:error.message});return{result:OPERATION_RESULTS.ERROR,message:\"Failed to save to GitHub: \".concat(error.message),target:SAVE_TARGETS.GITHUB};}}/**\n   * Get demo asset content for demo users\n   */getDemoAssetContent(assetPath){const demoAssets={'input/vocabulary/ValueSet-anc-care-codes.json':JSON.stringify({resourceType:\"ValueSet\",id:\"anc-care-codes\",name:\"ANCCareCodes\",title:\"ANC Care Codes (Demo)\",status:\"draft\",description:\"Demo value set for antenatal care codes\",compose:{include:[{system:\"http://example.org/anc-codes\",concept:[{code:\"anc-visit\",display:\"Antenatal Care Visit\"},{code:\"anc-screening\",display:\"Antenatal Screening\"}]}]}},null,2),'input/actors/Patient.json':JSON.stringify({resourceType:\"ActorDefinition\",id:\"patient\",name:\"Patient\",title:\"Patient (Demo)\",status:\"draft\",description:\"Demo patient actor definition\",type:\"person\"},null,2),'README.md':\"# Demo DAK Repository\\n\\nThis is a demo repository showing the structure of a SMART Guidelines DAK.\\n\\n## Components\\n\\n- **ValueSets**: Terminology definitions\\n- **Actors**: System and person actors  \\n- **Business Processes**: BPMN workflow definitions\\n\\nThis is demo data and cannot be saved to GitHub.\"};return demoAssets[assetPath]||\"# Demo Asset: \".concat(assetPath,\"\\n\\nThis is demo content for the asset located at: \").concat(assetPath,\"\\n\\nDemo users can edit this content and save it locally, but cannot commit changes to GitHub.\");}/**\n   * Get save options for current user and asset\n   */async getSaveOptions(owner,repo,branch){const userType=userAccessService.getUserType();const canSaveGitHub=await userAccessService.canSaveToGitHub(owner,repo,branch);const canSaveLocal=userAccessService.canSaveLocal();const uiBehavior=userAccessService.getUIBehavior();return{canSaveLocal,canSaveGitHub,showSaveLocal:uiBehavior.showSaveLocal,showSaveGitHub:uiBehavior.showSaveToGitHub,confirmBeforeSave:uiBehavior.confirmBeforeSave,userType,restrictions:this.getSaveRestrictions(userType,canSaveGitHub)};}/**\n   * Get save restrictions and messaging for user type\n   */getSaveRestrictions(userType,canSaveGitHub){switch(userType){case'unauthenticated':return{localMessage:'Changes will be saved to your browser only',githubMessage:'Please authenticate to save to GitHub',githubDisabled:true};case'demo':return{localMessage:'Changes will be saved to your browser only',githubMessage:'Demo users cannot save to GitHub',githubDisabled:true};case'authenticated':if(canSaveGitHub){return{localMessage:'Save changes to staging area',githubMessage:'Commit changes to GitHub repository',githubDisabled:false};}else{return{localMessage:'Changes will be saved to your browser only',githubMessage:'You do not have write access to this repository',githubDisabled:true};}default:return{localMessage:'Local saves only',githubMessage:'GitHub saves not available',githubDisabled:true};}}/**\n   * Get staging ground status\n   */getStagingGroundStatus(){return stagingGroundService.getStatus();}/**\n   * Clear staging ground\n   */clearStagingGround(){return stagingGroundService.clearStagingGround();}/**\n   * Get changed files in staging ground\n   */getChangedFiles(){const stagingGround=stagingGroundService.getStagingGround();return stagingGround.files;}/**\n   * Check if asset has local changes\n   */hasLocalChanges(assetPath){const stagingGround=stagingGroundService.getStagingGround();return stagingGround.files.some(f=>f.path===assetPath);}/**\n   * Create new asset (when supported by user type)\n   */async createAsset(owner,repo,branch,assetPath){let initialContent=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'';let metadata=arguments.length>5&&arguments[5]!==undefined?arguments[5]:{};const uiBehavior=userAccessService.getUIBehavior();if(!uiBehavior.allowCreateNew){throw new Error('Current user type cannot create new assets');}// Save as local first\nreturn this.saveAssetLocal(assetPath,initialContent,_objectSpread(_objectSpread({},metadata),{},{isNew:true,createdAt:Date.now()}));}/**\n   * Batch operations for multiple assets\n   */async batchSaveLocal(assets){const results=[];for(const asset of assets){const result=await this.saveAssetLocal(asset.path,asset.content,asset.metadata);results.push(_objectSpread(_objectSpread({},result),{},{path:asset.path}));}return{success:results.every(r=>r.result===OPERATION_RESULTS.SUCCESS),results};}/**\n   * Get access information for current context\n   */async getAccessInfo(owner,repo,branch){const[access,badge,saveOptions]=await Promise.all([userAccessService.getRepositoryAccess(owner,repo,branch),userAccessService.getAccessBadge(owner,repo,branch),this.getSaveOptions(owner,repo,branch)]);return{access,badge,saveOptions,userType:userAccessService.getUserType(),isDemo:userAccessService.isDemoUser()};}}// Create singleton instance\nconst dataAccessLayer=new DataAccessLayer();export default dataAccessLayer;","map":{"version":3,"names":["userAccessService","stagingGroundService","githubService","logger","SAVE_TARGETS","LOCAL","GITHUB","OPERATION_RESULTS","SUCCESS","ERROR","PERMISSION_DENIED","DEMO_MODE_BLOCKED","DataAccessLayer","constructor","getLogger","pendingOperations","Map","assetCache","initialize","repository","branch","info","full_name","getAsset","owner","repo","assetPath","cacheKey","concat","access","getRepositoryAccess","Error","stagingGround","getStagingGround","localFile","files","find","f","path","debug","content","source","metadata","hasLocalChanges","isDemoUser","isDemoDAK","getDemoAssetContent","getFileContent","set","error","message","saveAssetLocal","arguments","length","undefined","userType","getUserType","success","updateFile","_objectSpread","savedBy","saveTarget","result","target","saveAssetGitHub","commitMessage","canSave","canSaveToGitHub","updateFileContent","_result$data","_result$data$commit","_result$data2","_result$data2$commit","_result$data3","_result$data3$commit","removeFile","delete","commit","data","sha","commitSha","commitUrl","html_url","demoAssets","JSON","stringify","resourceType","id","name","title","status","description","compose","include","system","concept","code","display","type","getSaveOptions","canSaveGitHub","canSaveLocal","uiBehavior","getUIBehavior","showSaveLocal","showSaveGitHub","showSaveToGitHub","confirmBeforeSave","restrictions","getSaveRestrictions","localMessage","githubMessage","githubDisabled","getStagingGroundStatus","getStatus","clearStagingGround","getChangedFiles","some","createAsset","initialContent","allowCreateNew","isNew","createdAt","Date","now","batchSaveLocal","assets","results","asset","push","every","r","getAccessInfo","badge","saveOptions","Promise","all","getAccessBadge","isDemo","dataAccessLayer"],"sources":["/home/runner/work/sgex/sgex/src/services/dataAccessLayer.js"],"sourcesContent":["/**\n * Data Access Layer\n * \n * Comprehensive service that integrates user access, staging ground, and GitHub\n * for a unified asset management experience across all user types.\n */\n\nimport userAccessService from './userAccessService';\nimport stagingGroundService from './stagingGroundService';\nimport githubService from './githubService';\nimport logger from '../utils/logger';\n\n/**\n * Save targets for asset operations\n */\nexport const SAVE_TARGETS = {\n  LOCAL: 'local',\n  GITHUB: 'github'\n};\n\n/**\n * Asset operation results\n */\nexport const OPERATION_RESULTS = {\n  SUCCESS: 'success',\n  ERROR: 'error',\n  PERMISSION_DENIED: 'permission_denied',\n  DEMO_MODE_BLOCKED: 'demo_mode_blocked'\n};\n\nclass DataAccessLayer {\n  constructor() {\n    this.logger = logger.getLogger('DataAccessLayer');\n    this.pendingOperations = new Map();\n    this.assetCache = new Map();\n  }\n\n  /**\n   * Initialize data access layer\n   */\n  async initialize(repository, branch) {\n    this.logger.info('Initializing data access layer', { \n      repository: repository?.full_name, \n      branch \n    });\n    \n    // Initialize staging ground for the repository\n    stagingGroundService.initialize(repository, branch);\n    \n    // Initialize user access service if not already done\n    await userAccessService.initialize();\n  }\n\n  /**\n   * Get asset content from GitHub or local storage\n   */\n  async getAsset(owner, repo, branch, assetPath) {\n    const cacheKey = `${owner}/${repo}/${branch}/${assetPath}`;\n    \n    try {\n      // Check if user has read access\n      const access = await userAccessService.getRepositoryAccess(owner, repo, branch);\n      if (access === 'none') {\n        throw new Error('No access to this repository');\n      }\n\n      // First, check if there's a local version in staging ground\n      const stagingGround = stagingGroundService.getStagingGround();\n      const localFile = stagingGround.files.find(f => f.path === assetPath);\n      \n      if (localFile) {\n        this.logger.debug('Asset loaded from staging ground', { assetPath });\n        return {\n          content: localFile.content,\n          source: 'local',\n          metadata: localFile.metadata,\n          hasLocalChanges: true\n        };\n      }\n\n      // If no local version, get from GitHub\n      let content;\n      if (userAccessService.isDemoUser() && userAccessService.isDemoDAK(owner, repo)) {\n        // For demo users, provide demo content\n        content = this.getDemoAssetContent(assetPath);\n      } else {\n        // Get real content from GitHub\n        content = await githubService.getFileContent(owner, repo, assetPath, branch);\n      }\n\n      // Cache the content\n      this.assetCache.set(cacheKey, content);\n\n      this.logger.debug('Asset loaded from GitHub', { assetPath, source: 'github' });\n      return {\n        content,\n        source: 'github',\n        hasLocalChanges: false\n      };\n\n    } catch (error) {\n      this.logger.error('Error getting asset', { \n        owner, repo, branch, assetPath, error: error.message \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Save asset to local storage (staging ground)\n   */\n  async saveAssetLocal(assetPath, content, metadata = {}) {\n    try {\n      const userType = userAccessService.getUserType();\n      \n      // All user types can save to local storage\n      const success = stagingGroundService.updateFile(assetPath, content, {\n        ...metadata,\n        savedBy: userType,\n        saveTarget: SAVE_TARGETS.LOCAL\n      });\n\n      if (success) {\n        this.logger.info('Asset saved to local storage', { assetPath, userType });\n        return {\n          result: OPERATION_RESULTS.SUCCESS,\n          message: 'Changes saved to local staging area',\n          target: SAVE_TARGETS.LOCAL\n        };\n      } else {\n        throw new Error('Failed to save to local storage');\n      }\n\n    } catch (error) {\n      this.logger.error('Error saving asset locally', { assetPath, error: error.message });\n      return {\n        result: OPERATION_RESULTS.ERROR,\n        message: `Failed to save locally: ${error.message}`,\n        target: SAVE_TARGETS.LOCAL\n      };\n    }\n  }\n\n  /**\n   * Save asset to GitHub\n   */\n  async saveAssetGitHub(owner, repo, branch, assetPath, content, commitMessage, metadata = {}) {\n    try {\n      const userType = userAccessService.getUserType();\n      \n      // Check if user can save to GitHub\n      const canSave = await userAccessService.canSaveToGitHub(owner, repo, branch);\n      \n      if (!canSave) {\n        if (userType === 'demo') {\n          return {\n            result: OPERATION_RESULTS.DEMO_MODE_BLOCKED,\n            message: 'Demo users cannot save to GitHub. Changes can be saved locally.',\n            target: SAVE_TARGETS.GITHUB\n          };\n        } else if (userType === 'unauthenticated') {\n          return {\n            result: OPERATION_RESULTS.PERMISSION_DENIED,\n            message: 'Please authenticate to save changes to GitHub.',\n            target: SAVE_TARGETS.GITHUB\n          };\n        } else {\n          return {\n            result: OPERATION_RESULTS.PERMISSION_DENIED,\n            message: 'You do not have write access to this repository.',\n            target: SAVE_TARGETS.GITHUB\n          };\n        }\n      }\n\n      // For authenticated users with write access, save to GitHub\n      const result = await githubService.updateFileContent(\n        owner, \n        repo, \n        assetPath, \n        content, \n        commitMessage, \n        branch\n      );\n\n      if (result.success) {\n        // Remove from staging ground since it's now committed\n        stagingGroundService.removeFile(assetPath);\n        \n        // Clear cache\n        const cacheKey = `${owner}/${repo}/${branch}/${assetPath}`;\n        this.assetCache.delete(cacheKey);\n\n        this.logger.info('Asset saved to GitHub', { \n          owner, repo, branch, assetPath, commit: result.data?.commit?.sha \n        });\n\n        return {\n          result: OPERATION_RESULTS.SUCCESS,\n          message: 'Changes successfully committed to GitHub',\n          target: SAVE_TARGETS.GITHUB,\n          commitSha: result.data?.commit?.sha,\n          commitUrl: result.data?.commit?.html_url\n        };\n      } else {\n        throw new Error(result.error || 'GitHub commit failed');\n      }\n\n    } catch (error) {\n      this.logger.error('Error saving asset to GitHub', { \n        owner, repo, branch, assetPath, error: error.message \n      });\n      \n      return {\n        result: OPERATION_RESULTS.ERROR,\n        message: `Failed to save to GitHub: ${error.message}`,\n        target: SAVE_TARGETS.GITHUB\n      };\n    }\n  }\n\n  /**\n   * Get demo asset content for demo users\n   */\n  getDemoAssetContent(assetPath) {\n    const demoAssets = {\n      'input/vocabulary/ValueSet-anc-care-codes.json': JSON.stringify({\n        resourceType: \"ValueSet\",\n        id: \"anc-care-codes\",\n        name: \"ANCCareCodes\",\n        title: \"ANC Care Codes (Demo)\",\n        status: \"draft\",\n        description: \"Demo value set for antenatal care codes\",\n        compose: {\n          include: [{\n            system: \"http://example.org/anc-codes\",\n            concept: [\n              { code: \"anc-visit\", display: \"Antenatal Care Visit\" },\n              { code: \"anc-screening\", display: \"Antenatal Screening\" }\n            ]\n          }]\n        }\n      }, null, 2),\n      \n      'input/actors/Patient.json': JSON.stringify({\n        resourceType: \"ActorDefinition\",\n        id: \"patient\",\n        name: \"Patient\",\n        title: \"Patient (Demo)\",\n        status: \"draft\",\n        description: \"Demo patient actor definition\",\n        type: \"person\"\n      }, null, 2),\n\n      'README.md': `# Demo DAK Repository\n\nThis is a demo repository showing the structure of a SMART Guidelines DAK.\n\n## Components\n\n- **ValueSets**: Terminology definitions\n- **Actors**: System and person actors  \n- **Business Processes**: BPMN workflow definitions\n\nThis is demo data and cannot be saved to GitHub.`\n    };\n\n    return demoAssets[assetPath] || `# Demo Asset: ${assetPath}\n\nThis is demo content for the asset located at: ${assetPath}\n\nDemo users can edit this content and save it locally, but cannot commit changes to GitHub.`;\n  }\n\n  /**\n   * Get save options for current user and asset\n   */\n  async getSaveOptions(owner, repo, branch) {\n    const userType = userAccessService.getUserType();\n    const canSaveGitHub = await userAccessService.canSaveToGitHub(owner, repo, branch);\n    const canSaveLocal = userAccessService.canSaveLocal();\n    const uiBehavior = userAccessService.getUIBehavior();\n\n    return {\n      canSaveLocal,\n      canSaveGitHub,\n      showSaveLocal: uiBehavior.showSaveLocal,\n      showSaveGitHub: uiBehavior.showSaveToGitHub,\n      confirmBeforeSave: uiBehavior.confirmBeforeSave,\n      userType,\n      restrictions: this.getSaveRestrictions(userType, canSaveGitHub)\n    };\n  }\n\n  /**\n   * Get save restrictions and messaging for user type\n   */\n  getSaveRestrictions(userType, canSaveGitHub) {\n    switch (userType) {\n      case 'unauthenticated':\n        return {\n          localMessage: 'Changes will be saved to your browser only',\n          githubMessage: 'Please authenticate to save to GitHub',\n          githubDisabled: true\n        };\n      \n      case 'demo':\n        return {\n          localMessage: 'Changes will be saved to your browser only',\n          githubMessage: 'Demo users cannot save to GitHub',\n          githubDisabled: true\n        };\n      \n      case 'authenticated':\n        if (canSaveGitHub) {\n          return {\n            localMessage: 'Save changes to staging area',\n            githubMessage: 'Commit changes to GitHub repository',\n            githubDisabled: false\n          };\n        } else {\n          return {\n            localMessage: 'Changes will be saved to your browser only',\n            githubMessage: 'You do not have write access to this repository',\n            githubDisabled: true\n          };\n        }\n      \n      default:\n        return {\n          localMessage: 'Local saves only',\n          githubMessage: 'GitHub saves not available',\n          githubDisabled: true\n        };\n    }\n  }\n\n  /**\n   * Get staging ground status\n   */\n  getStagingGroundStatus() {\n    return stagingGroundService.getStatus();\n  }\n\n  /**\n   * Clear staging ground\n   */\n  clearStagingGround() {\n    return stagingGroundService.clearStagingGround();\n  }\n\n  /**\n   * Get changed files in staging ground\n   */\n  getChangedFiles() {\n    const stagingGround = stagingGroundService.getStagingGround();\n    return stagingGround.files;\n  }\n\n  /**\n   * Check if asset has local changes\n   */\n  hasLocalChanges(assetPath) {\n    const stagingGround = stagingGroundService.getStagingGround();\n    return stagingGround.files.some(f => f.path === assetPath);\n  }\n\n  /**\n   * Create new asset (when supported by user type)\n   */\n  async createAsset(owner, repo, branch, assetPath, initialContent = '', metadata = {}) {\n    const uiBehavior = userAccessService.getUIBehavior();\n    \n    if (!uiBehavior.allowCreateNew) {\n      throw new Error('Current user type cannot create new assets');\n    }\n\n    // Save as local first\n    return this.saveAssetLocal(assetPath, initialContent, {\n      ...metadata,\n      isNew: true,\n      createdAt: Date.now()\n    });\n  }\n\n  /**\n   * Batch operations for multiple assets\n   */\n  async batchSaveLocal(assets) {\n    const results = [];\n    \n    for (const asset of assets) {\n      const result = await this.saveAssetLocal(\n        asset.path, \n        asset.content, \n        asset.metadata\n      );\n      results.push({ ...result, path: asset.path });\n    }\n\n    return {\n      success: results.every(r => r.result === OPERATION_RESULTS.SUCCESS),\n      results\n    };\n  }\n\n  /**\n   * Get access information for current context\n   */\n  async getAccessInfo(owner, repo, branch) {\n    const [access, badge, saveOptions] = await Promise.all([\n      userAccessService.getRepositoryAccess(owner, repo, branch),\n      userAccessService.getAccessBadge(owner, repo, branch),\n      this.getSaveOptions(owner, repo, branch)\n    ]);\n\n    return {\n      access,\n      badge,\n      saveOptions,\n      userType: userAccessService.getUserType(),\n      isDemo: userAccessService.isDemoUser()\n    };\n  }\n}\n\n// Create singleton instance\nconst dataAccessLayer = new DataAccessLayer();\n\nexport default dataAccessLayer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}