{"ast":null,"code":"import _objectSpread from \"/home/runner/work/sgex/sgex/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { pick, assign, filter, forEach, isArray, isUndefined, has } from 'min-dash';\nimport { is, getDi, getBusinessObject } from '../../util/ModelUtil';\nimport { isAny } from '../modeling/util/ModelingUtil';\nimport { isExpanded, isEventSubProcess, isHorizontal } from '../../util/DiUtil';\nimport { getPropertyNames } from '../copy-paste/ModdleCopy';\n\n/**\n * @typedef {import('../modeling/BpmnFactory').default} BpmnFactory\n * @typedef {import('../modeling/ElementFactory').default} ElementFactory\n * @typedef {import('../copy-paste/ModdleCopy').default} ModdleCopy\n * @typedef {import('../modeling/Modeling').default} Modeling\n * @typedef {import('diagram-js/lib/features/replace/Replace').default} Replace\n * @typedef {import('diagram-js/lib/features/rules/Rules').default} Rules\n *\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').Shape} Shape\n * @typedef {import('../../model/Types').ModdleElement} ModdleElement\n *\n * @typedef { {\n *   type: string;\n *   cancelActivity: boolean;\n *   instantiate: boolean;\n *   eventGatewayType: string;\n *   triggeredByEvent: boolean;\n *   isInterrupting: boolean;\n *   collapsed: boolean;\n *   isExpanded: boolean;\n *   eventDefinitionType: string;\n *   eventDefinitionAttrs: Object;\n *   host: Shape;\n * } } TargetElement\n *\n * @typedef { {\n *   moveChildren: boolean;\n * } & Record<string, any> } Hints\n */\n\nfunction copyProperties(source, target, properties) {\n  if (!isArray(properties)) {\n    properties = [properties];\n  }\n  forEach(properties, function (property) {\n    if (!isUndefined(source[property])) {\n      target[property] = source[property];\n    }\n  });\n}\nvar CUSTOM_PROPERTIES = ['cancelActivity', 'instantiate', 'eventGatewayType', 'triggeredByEvent', 'isInterrupting'];\n\n/**\n * Check if element should be collapsed or expanded.\n */\nfunction shouldToggleCollapsed(element, targetElement) {\n  var oldCollapsed = element && has(element, 'collapsed') ? element.collapsed : !isExpanded(element);\n  var targetCollapsed;\n  if (targetElement && (has(targetElement, 'collapsed') || has(targetElement, 'isExpanded'))) {\n    // property is explicitly set so use it\n    targetCollapsed = has(targetElement, 'collapsed') ? targetElement.collapsed : !targetElement.isExpanded;\n  } else {\n    // keep old state\n    targetCollapsed = oldCollapsed;\n  }\n  if (oldCollapsed !== targetCollapsed) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * BPMN-specific replace.\n *\n * @param {BpmnFactory} bpmnFactory\n * @param {ElementFactory} elementFactory\n * @param {ModdleCopy} moddleCopy\n * @param {Modeling} modeling\n * @param {Replace} replace\n * @param {Rules} rules\n */\nexport default function BpmnReplace(bpmnFactory, elementFactory, moddleCopy, modeling, replace, rules) {\n  /**\n   * Prepares a new business object for the replacement element\n   * and triggers the replace operation.\n   *\n   * @param  {Element} element\n   * @param  {TargetElement} targetElement\n   * @param  {Hints} [hints]\n   *\n   * @return {Element}\n   */\n  function replaceElement(element, targetElement, hints) {\n    hints = hints || {};\n    var type = targetElement.type,\n      oldBusinessObject = element.businessObject;\n    if (isSubProcess(oldBusinessObject) && (type === 'bpmn:SubProcess' || type === 'bpmn:AdHocSubProcess')) {\n      if (shouldToggleCollapsed(element, targetElement)) {\n        // expanding or collapsing process\n        modeling.toggleCollapse(element);\n        return element;\n      }\n    }\n    var newBusinessObject = bpmnFactory.create(type);\n    var newElement = {\n      type: type,\n      businessObject: newBusinessObject\n    };\n    newElement.di = {};\n    if (type === 'bpmn:ExclusiveGateway') {\n      newElement.di.isMarkerVisible = true;\n    }\n\n    // colors will be set to DI\n    copyProperties(element.di, newElement.di, ['fill', 'stroke', 'background-color', 'border-color', 'color']);\n    var elementProps = getPropertyNames(oldBusinessObject.$descriptor),\n      newElementProps = getPropertyNames(newBusinessObject.$descriptor, true),\n      copyProps = intersection(elementProps, newElementProps);\n\n    // initialize special properties defined in target definition\n    assign(newBusinessObject, pick(targetElement, CUSTOM_PROPERTIES));\n    var properties = filter(copyProps, function (propertyName) {\n      // copying event definitions, unless we replace\n      if (propertyName === 'eventDefinitions') {\n        return hasEventDefinition(element, targetElement.eventDefinitionType);\n      }\n\n      // retain loop characteristics if the target element\n      // is not an event sub process\n      if (propertyName === 'loopCharacteristics') {\n        return !isEventSubProcess(newBusinessObject);\n      }\n\n      // so the applied properties from 'target' don't get lost\n      if (has(newBusinessObject, propertyName)) {\n        return false;\n      }\n      if (propertyName === 'processRef' && targetElement.isExpanded === false) {\n        return false;\n      }\n      if (propertyName === 'triggeredByEvent') {\n        return false;\n      }\n      if (propertyName === 'isForCompensation') {\n        return !isEventSubProcess(newBusinessObject);\n      }\n      return true;\n    });\n    newBusinessObject = moddleCopy.copyElement(oldBusinessObject, newBusinessObject, properties);\n\n    // initialize custom BPMN extensions\n    if (targetElement.eventDefinitionType) {\n      // only initialize with new eventDefinition\n      // if we did not set an event definition yet,\n      // i.e. because we copied it\n      if (!hasEventDefinition(newBusinessObject, targetElement.eventDefinitionType)) {\n        newElement.eventDefinitionType = targetElement.eventDefinitionType;\n        newElement.eventDefinitionAttrs = targetElement.eventDefinitionAttrs;\n      }\n    }\n    if (is(oldBusinessObject, 'bpmn:Activity')) {\n      if (isSubProcess(oldBusinessObject)) {\n        // no toggeling, so keep old state\n        newElement.isExpanded = isExpanded(element);\n      }\n\n      // else if property is explicitly set, use it\n      else if (targetElement && has(targetElement, 'isExpanded')) {\n        newElement.isExpanded = targetElement.isExpanded;\n\n        // assign default size of new expanded element\n        var defaultSize = elementFactory.getDefaultSize(newBusinessObject, {\n          isExpanded: newElement.isExpanded\n        });\n        newElement.width = defaultSize.width;\n        newElement.height = defaultSize.height;\n\n        // keep element centered\n        newElement.x = element.x - (newElement.width - element.width) / 2;\n        newElement.y = element.y - (newElement.height - element.height) / 2;\n      }\n\n      // TODO: need also to respect min/max Size\n      // copy size, from an expanded subprocess to an expanded alternative subprocess\n      // except bpmn:Task, because Task is always expanded\n      if (isExpanded(element) && !is(oldBusinessObject, 'bpmn:Task') && newElement.isExpanded) {\n        newElement.width = element.width;\n        newElement.height = element.height;\n      }\n    }\n\n    // remove children if not expanding sub process\n    if (isSubProcess(oldBusinessObject) && !isSubProcess(newBusinessObject)) {\n      hints.moveChildren = false;\n    }\n\n    // transform collapsed/expanded pools\n    if (is(oldBusinessObject, 'bpmn:Participant')) {\n      // create expanded pool\n      if (targetElement.isExpanded === true) {\n        newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');\n      } else {\n        // remove children when transforming to collapsed pool\n        hints.moveChildren = false;\n      }\n\n      // apply same directionality\n      var isHorizontalPool = isHorizontal(element);\n      if (!getDi(element).isHorizontal) {\n        getDi(newElement).isHorizontal = isHorizontalPool;\n      }\n\n      // keep the existing size of the pool's direction to\n      // prevent dangling message flows\n      newElement.width = isHorizontalPool ? element.width : elementFactory.getDefaultSize(newElement).width;\n      newElement.height = isHorizontalPool ? elementFactory.getDefaultSize(newElement).height : element.height;\n    }\n    if (!rules.allowed('shape.resize', {\n      shape: newBusinessObject\n    })) {\n      newElement.height = elementFactory.getDefaultSize(newElement).height;\n      newElement.width = elementFactory.getDefaultSize(newElement).width;\n    }\n    newBusinessObject.name = oldBusinessObject.name;\n\n    // retain default flow's reference between inclusive <-> exclusive gateways and activities\n    if (isAny(oldBusinessObject, ['bpmn:ExclusiveGateway', 'bpmn:InclusiveGateway', 'bpmn:Activity']) && isAny(newBusinessObject, ['bpmn:ExclusiveGateway', 'bpmn:InclusiveGateway', 'bpmn:Activity'])) {\n      newBusinessObject.default = oldBusinessObject.default;\n    }\n    if (targetElement.host && !is(oldBusinessObject, 'bpmn:BoundaryEvent') && is(newBusinessObject, 'bpmn:BoundaryEvent')) {\n      newElement.host = targetElement.host;\n    }\n\n    // The DataStoreReference element is 14px wider than the DataObjectReference element\n    // This ensures that they stay centered on the x axis when replaced\n    if (newElement.type === 'bpmn:DataStoreReference' || newElement.type === 'bpmn:DataObjectReference') {\n      newElement.x = element.x + (element.width - newElement.width) / 2;\n    }\n    return replace.replaceElement(element, newElement, _objectSpread(_objectSpread({}, hints), {}, {\n      targetElement\n    }));\n  }\n  this.replaceElement = replaceElement;\n}\nBpmnReplace.$inject = ['bpmnFactory', 'elementFactory', 'moddleCopy', 'modeling', 'replace', 'rules'];\n\n/**\n * @param {ModdleElement} businessObject\n *\n * @return {boolean}\n */\nfunction isSubProcess(businessObject) {\n  return is(businessObject, 'bpmn:SubProcess');\n}\n\n/**\n * @param {Element|ModdleElement} element\n * @param {string} type\n *\n * @return {boolean}\n */\nfunction hasEventDefinition(element, type) {\n  var businessObject = getBusinessObject(element);\n  return type && businessObject.get('eventDefinitions').some(function (definition) {\n    return is(definition, type);\n  });\n}\n\n/**\n * Compute intersection between two arrays.\n *\n * @param {Array} a\n * @param {Array} b\n *\n * @return {Array}\n */\nfunction intersection(a, b) {\n  return a.filter(function (item) {\n    return b.includes(item);\n  });\n}","map":{"version":3,"names":["pick","assign","filter","forEach","isArray","isUndefined","has","is","getDi","getBusinessObject","isAny","isExpanded","isEventSubProcess","isHorizontal","getPropertyNames","copyProperties","source","target","properties","property","CUSTOM_PROPERTIES","shouldToggleCollapsed","element","targetElement","oldCollapsed","collapsed","targetCollapsed","BpmnReplace","bpmnFactory","elementFactory","moddleCopy","modeling","replace","rules","replaceElement","hints","type","oldBusinessObject","businessObject","isSubProcess","toggleCollapse","newBusinessObject","create","newElement","di","isMarkerVisible","elementProps","$descriptor","newElementProps","copyProps","intersection","propertyName","hasEventDefinition","eventDefinitionType","copyElement","eventDefinitionAttrs","defaultSize","getDefaultSize","width","height","x","y","moveChildren","processRef","isHorizontalPool","allowed","shape","name","default","host","_objectSpread","$inject","get","some","definition","a","b","item","includes"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/replace/BpmnReplace.js"],"sourcesContent":["import {\n  pick,\n  assign,\n  filter,\n  forEach,\n  isArray,\n  isUndefined,\n  has\n} from 'min-dash';\n\nimport {\n  is,\n  getDi,\n  getBusinessObject\n} from '../../util/ModelUtil';\n\nimport {\n  isAny\n} from '../modeling/util/ModelingUtil';\n\nimport {\n  isExpanded,\n  isEventSubProcess,\n  isHorizontal\n} from '../../util/DiUtil';\n\nimport { getPropertyNames } from '../copy-paste/ModdleCopy';\n\n/**\n * @typedef {import('../modeling/BpmnFactory').default} BpmnFactory\n * @typedef {import('../modeling/ElementFactory').default} ElementFactory\n * @typedef {import('../copy-paste/ModdleCopy').default} ModdleCopy\n * @typedef {import('../modeling/Modeling').default} Modeling\n * @typedef {import('diagram-js/lib/features/replace/Replace').default} Replace\n * @typedef {import('diagram-js/lib/features/rules/Rules').default} Rules\n *\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').Shape} Shape\n * @typedef {import('../../model/Types').ModdleElement} ModdleElement\n *\n * @typedef { {\n *   type: string;\n *   cancelActivity: boolean;\n *   instantiate: boolean;\n *   eventGatewayType: string;\n *   triggeredByEvent: boolean;\n *   isInterrupting: boolean;\n *   collapsed: boolean;\n *   isExpanded: boolean;\n *   eventDefinitionType: string;\n *   eventDefinitionAttrs: Object;\n *   host: Shape;\n * } } TargetElement\n *\n * @typedef { {\n *   moveChildren: boolean;\n * } & Record<string, any> } Hints\n */\n\nfunction copyProperties(source, target, properties) {\n  if (!isArray(properties)) {\n    properties = [ properties ];\n  }\n\n  forEach(properties, function(property) {\n    if (!isUndefined(source[property])) {\n      target[property] = source[property];\n    }\n  });\n}\n\n\nvar CUSTOM_PROPERTIES = [\n  'cancelActivity',\n  'instantiate',\n  'eventGatewayType',\n  'triggeredByEvent',\n  'isInterrupting'\n];\n\n/**\n * Check if element should be collapsed or expanded.\n */\nfunction shouldToggleCollapsed(element, targetElement) {\n\n  var oldCollapsed = (\n    element && has(element, 'collapsed') ? element.collapsed : !isExpanded(element)\n  );\n\n  var targetCollapsed;\n\n  if (targetElement && (has(targetElement, 'collapsed') || has(targetElement, 'isExpanded'))) {\n\n    // property is explicitly set so use it\n    targetCollapsed = (\n      has(targetElement, 'collapsed') ? targetElement.collapsed : !targetElement.isExpanded\n    );\n  } else {\n\n    // keep old state\n    targetCollapsed = oldCollapsed;\n  }\n\n  if (oldCollapsed !== targetCollapsed) {\n    return true;\n  }\n\n  return false;\n}\n\n\n/**\n * BPMN-specific replace.\n *\n * @param {BpmnFactory} bpmnFactory\n * @param {ElementFactory} elementFactory\n * @param {ModdleCopy} moddleCopy\n * @param {Modeling} modeling\n * @param {Replace} replace\n * @param {Rules} rules\n */\nexport default function BpmnReplace(\n    bpmnFactory,\n    elementFactory,\n    moddleCopy,\n    modeling,\n    replace,\n    rules\n) {\n\n  /**\n   * Prepares a new business object for the replacement element\n   * and triggers the replace operation.\n   *\n   * @param  {Element} element\n   * @param  {TargetElement} targetElement\n   * @param  {Hints} [hints]\n   *\n   * @return {Element}\n   */\n  function replaceElement(element, targetElement, hints) {\n\n    hints = hints || {};\n\n    var type = targetElement.type,\n        oldBusinessObject = element.businessObject;\n\n    if (isSubProcess(oldBusinessObject) && (type === 'bpmn:SubProcess' || type === 'bpmn:AdHocSubProcess')) {\n      if (shouldToggleCollapsed(element, targetElement)) {\n\n        // expanding or collapsing process\n        modeling.toggleCollapse(element);\n\n        return element;\n      }\n    }\n\n    var newBusinessObject = bpmnFactory.create(type);\n\n    var newElement = {\n      type: type,\n      businessObject: newBusinessObject,\n    };\n\n    newElement.di = {};\n\n    if (type === 'bpmn:ExclusiveGateway') {\n      newElement.di.isMarkerVisible = true;\n    }\n\n    // colors will be set to DI\n    copyProperties(element.di, newElement.di, [\n      'fill',\n      'stroke',\n      'background-color',\n      'border-color',\n      'color'\n    ]);\n\n    var elementProps = getPropertyNames(oldBusinessObject.$descriptor),\n        newElementProps = getPropertyNames(newBusinessObject.$descriptor, true),\n        copyProps = intersection(elementProps, newElementProps);\n\n    // initialize special properties defined in target definition\n    assign(newBusinessObject, pick(targetElement, CUSTOM_PROPERTIES));\n\n    var properties = filter(copyProps, function(propertyName) {\n\n      // copying event definitions, unless we replace\n      if (propertyName === 'eventDefinitions') {\n        return hasEventDefinition(element, targetElement.eventDefinitionType);\n      }\n\n      // retain loop characteristics if the target element\n      // is not an event sub process\n      if (propertyName === 'loopCharacteristics') {\n        return !isEventSubProcess(newBusinessObject);\n      }\n\n      // so the applied properties from 'target' don't get lost\n      if (has(newBusinessObject, propertyName)) {\n        return false;\n      }\n\n      if (propertyName === 'processRef' && targetElement.isExpanded === false) {\n        return false;\n      }\n\n      if (propertyName === 'triggeredByEvent') {\n        return false;\n      }\n\n      if (propertyName === 'isForCompensation') {\n        return !isEventSubProcess(newBusinessObject);\n      }\n\n      return true;\n    });\n\n    newBusinessObject = moddleCopy.copyElement(\n      oldBusinessObject,\n      newBusinessObject,\n      properties\n    );\n\n    // initialize custom BPMN extensions\n    if (targetElement.eventDefinitionType) {\n\n      // only initialize with new eventDefinition\n      // if we did not set an event definition yet,\n      // i.e. because we copied it\n      if (!hasEventDefinition(newBusinessObject, targetElement.eventDefinitionType)) {\n        newElement.eventDefinitionType = targetElement.eventDefinitionType;\n        newElement.eventDefinitionAttrs = targetElement.eventDefinitionAttrs;\n      }\n    }\n\n    if (is(oldBusinessObject, 'bpmn:Activity')) {\n\n      if (isSubProcess(oldBusinessObject)) {\n\n        // no toggeling, so keep old state\n        newElement.isExpanded = isExpanded(element);\n      }\n\n      // else if property is explicitly set, use it\n      else if (targetElement && has(targetElement, 'isExpanded')) {\n        newElement.isExpanded = targetElement.isExpanded;\n\n        // assign default size of new expanded element\n        var defaultSize = elementFactory.getDefaultSize(newBusinessObject, {\n          isExpanded: newElement.isExpanded\n        });\n\n        newElement.width = defaultSize.width;\n        newElement.height = defaultSize.height;\n\n        // keep element centered\n        newElement.x = element.x - (newElement.width - element.width) / 2;\n        newElement.y = element.y - (newElement.height - element.height) / 2;\n      }\n\n      // TODO: need also to respect min/max Size\n      // copy size, from an expanded subprocess to an expanded alternative subprocess\n      // except bpmn:Task, because Task is always expanded\n      if ((isExpanded(element) && !is(oldBusinessObject, 'bpmn:Task')) && newElement.isExpanded) {\n        newElement.width = element.width;\n        newElement.height = element.height;\n      }\n    }\n\n    // remove children if not expanding sub process\n    if (isSubProcess(oldBusinessObject) && !isSubProcess(newBusinessObject)) {\n      hints.moveChildren = false;\n    }\n\n    // transform collapsed/expanded pools\n    if (is(oldBusinessObject, 'bpmn:Participant')) {\n\n      // create expanded pool\n      if (targetElement.isExpanded === true) {\n        newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');\n      } else {\n\n        // remove children when transforming to collapsed pool\n        hints.moveChildren = false;\n      }\n\n      // apply same directionality\n      var isHorizontalPool = isHorizontal(element);\n      if (!getDi(element).isHorizontal) {\n        getDi(newElement).isHorizontal = isHorizontalPool;\n      }\n\n      // keep the existing size of the pool's direction to\n      // prevent dangling message flows\n      newElement.width = isHorizontalPool ? element.width : elementFactory.getDefaultSize(newElement).width;\n      newElement.height = isHorizontalPool ? elementFactory.getDefaultSize(newElement).height : element.height;\n    }\n\n    if (!rules.allowed('shape.resize', { shape: newBusinessObject })) {\n      newElement.height = elementFactory.getDefaultSize(newElement).height;\n      newElement.width = elementFactory.getDefaultSize(newElement).width;\n    }\n\n    newBusinessObject.name = oldBusinessObject.name;\n\n    // retain default flow's reference between inclusive <-> exclusive gateways and activities\n    if (\n      isAny(oldBusinessObject, [\n        'bpmn:ExclusiveGateway',\n        'bpmn:InclusiveGateway',\n        'bpmn:Activity'\n      ]) &&\n      isAny(newBusinessObject, [\n        'bpmn:ExclusiveGateway',\n        'bpmn:InclusiveGateway',\n        'bpmn:Activity'\n      ])\n    ) {\n      newBusinessObject.default = oldBusinessObject.default;\n    }\n\n    if (\n      targetElement.host &&\n      !is(oldBusinessObject, 'bpmn:BoundaryEvent') &&\n      is(newBusinessObject, 'bpmn:BoundaryEvent')\n    ) {\n      newElement.host = targetElement.host;\n    }\n\n    // The DataStoreReference element is 14px wider than the DataObjectReference element\n    // This ensures that they stay centered on the x axis when replaced\n    if (\n      newElement.type === 'bpmn:DataStoreReference' ||\n      newElement.type === 'bpmn:DataObjectReference'\n    ) {\n      newElement.x = element.x + (element.width - newElement.width) / 2;\n    }\n\n    return replace.replaceElement(element, newElement, { ...hints, targetElement });\n  }\n\n  this.replaceElement = replaceElement;\n}\n\nBpmnReplace.$inject = [\n  'bpmnFactory',\n  'elementFactory',\n  'moddleCopy',\n  'modeling',\n  'replace',\n  'rules'\n];\n\n/**\n * @param {ModdleElement} businessObject\n *\n * @return {boolean}\n */\nfunction isSubProcess(businessObject) {\n  return is(businessObject, 'bpmn:SubProcess');\n}\n\n/**\n * @param {Element|ModdleElement} element\n * @param {string} type\n *\n * @return {boolean}\n */\nfunction hasEventDefinition(element, type) {\n  var businessObject = getBusinessObject(element);\n\n  return type && businessObject.get('eventDefinitions').some(function(definition) {\n    return is(definition, type);\n  });\n}\n\n/**\n * Compute intersection between two arrays.\n *\n * @param {Array} a\n * @param {Array} b\n *\n * @return {Array}\n */\nfunction intersection(a, b) {\n  return a.filter(function(item) {\n    return b.includes(item);\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}