{"ast":null,"code":"/**\n * WebAssembly Loader Utility\n * \n * Provides utilities for loading and managing WebAssembly modules\n * with proper error handling and browser compatibility.\n */export class WasmLoader{constructor(){this.loadedModules=new Map();this.loadingPromises=new Map();}/**\n   * Load a WebAssembly module with caching\n   * @param {string} moduleName - Name of the module for caching\n   * @param {string|ArrayBuffer} source - URL to WASM file or ArrayBuffer\n   * @param {Object} imports - WebAssembly imports object\n   * @returns {Promise<WebAssembly.Instance>}\n   */async loadModule(moduleName,source){let imports=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};// Check if already loaded\nif(this.loadedModules.has(moduleName)){return this.loadedModules.get(moduleName);}// Check if currently loading\nif(this.loadingPromises.has(moduleName)){return this.loadingPromises.get(moduleName);}// Start loading\nconst loadingPromise=this._loadModuleInternal(source,imports);this.loadingPromises.set(moduleName,loadingPromise);try{const instance=await loadingPromise;this.loadedModules.set(moduleName,instance);this.loadingPromises.delete(moduleName);return instance;}catch(error){this.loadingPromises.delete(moduleName);throw error;}}async _loadModuleInternal(source,imports){let wasmBytes;if(source instanceof ArrayBuffer){wasmBytes=source;}else if(typeof source==='string'){// Load from URL\nconst response=await fetch(source);if(!response.ok){throw new Error(\"Failed to fetch WASM module: \".concat(response.statusText));}wasmBytes=await response.arrayBuffer();}else{throw new Error('Invalid WASM source: must be URL string or ArrayBuffer');}// Compile and instantiate\nconst module=await WebAssembly.compile(wasmBytes);const instance=await WebAssembly.instantiate(module,imports);return instance;}/**\n   * Check if WebAssembly is supported in this browser\n   * @returns {boolean}\n   */static isSupported(){return typeof WebAssembly==='object'&&typeof WebAssembly.instantiate==='function';}/**\n   * Get information about WebAssembly support\n   * @returns {Object}\n   */static getSupportInfo(){const support={basic:typeof WebAssembly==='object',streaming:typeof WebAssembly.instantiateStreaming==='function',threads:typeof SharedArrayBuffer!=='undefined',simd:false// SIMD detection is more complex\n};// Check for SIMD support (simplified check)\ntry{support.simd=typeof WebAssembly.v128!=='undefined';}catch(e){support.simd=false;}return support;}/**\n   * Clear the module cache\n   */clearCache(){this.loadedModules.clear();this.loadingPromises.clear();}/**\n   * Remove a specific module from cache\n   * @param {string} moduleName \n   */unloadModule(moduleName){this.loadedModules.delete(moduleName);this.loadingPromises.delete(moduleName);}}/**\n * Performance monitor for comparing JavaScript vs WebAssembly execution\n */export class WasmPerformanceMonitor{constructor(){this.metrics=new Map();}/**\n   * Start timing an operation\n   * @param {string} operationName \n   * @param {string} implementation - 'js' or 'wasm'\n   */startTiming(operationName){let implementation=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'unknown';const key=\"\".concat(operationName,\"-\").concat(implementation);this.metrics.set(key,{startTime:performance.now(),implementation,operationName});}/**\n   * End timing an operation\n   * @param {string} operationName \n   * @param {string} implementation \n   * @returns {number} Duration in milliseconds\n   */endTiming(operationName){let implementation=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'unknown';const key=\"\".concat(operationName,\"-\").concat(implementation);const metric=this.metrics.get(key);if(!metric){console.warn(\"No timing started for \".concat(key));return 0;}const duration=performance.now()-metric.startTime;metric.duration=duration;metric.endTime=performance.now();return duration;}/**\n   * Get performance comparison between implementations\n   * @param {string} operationName \n   * @returns {Object}\n   */getComparison(operationName){const jsKey=\"\".concat(operationName,\"-js\");const wasmKey=\"\".concat(operationName,\"-wasm\");const jsMetric=this.metrics.get(jsKey);const wasmMetric=this.metrics.get(wasmKey);if(!jsMetric||!wasmMetric){return null;}const speedup=jsMetric.duration/wasmMetric.duration;return{javascript:{duration:jsMetric.duration,implementation:'JavaScript'},webassembly:{duration:wasmMetric.duration,implementation:'WebAssembly'},speedup:speedup,winner:speedup>1?'WebAssembly':'JavaScript',improvement:speedup>1?\"\".concat(((speedup-1)*100).toFixed(1),\"% faster\"):\"\".concat(((1-speedup)*100).toFixed(1),\"% slower\")};}/**\n   * Get all performance metrics\n   * @returns {Array}\n   */getAllMetrics(){return Array.from(this.metrics.values());}/**\n   * Clear all metrics\n   */clear(){this.metrics.clear();}}// Singleton instances\nexport const wasmLoader=new WasmLoader();export const performanceMonitor=new WasmPerformanceMonitor();","map":{"version":3,"names":["WasmLoader","constructor","loadedModules","Map","loadingPromises","loadModule","moduleName","source","imports","arguments","length","undefined","has","get","loadingPromise","_loadModuleInternal","set","instance","delete","error","wasmBytes","ArrayBuffer","response","fetch","ok","Error","concat","statusText","arrayBuffer","module","WebAssembly","compile","instantiate","isSupported","getSupportInfo","support","basic","streaming","instantiateStreaming","threads","SharedArrayBuffer","simd","v128","e","clearCache","clear","unloadModule","WasmPerformanceMonitor","metrics","startTiming","operationName","implementation","key","startTime","performance","now","endTiming","metric","console","warn","duration","endTime","getComparison","jsKey","wasmKey","jsMetric","wasmMetric","speedup","javascript","webassembly","winner","improvement","toFixed","getAllMetrics","Array","from","values","wasmLoader","performanceMonitor"],"sources":["/home/runner/work/sgex/sgex/src/utils/wasmLoader.js"],"sourcesContent":["/**\n * WebAssembly Loader Utility\n * \n * Provides utilities for loading and managing WebAssembly modules\n * with proper error handling and browser compatibility.\n */\n\nexport class WasmLoader {\n  constructor() {\n    this.loadedModules = new Map();\n    this.loadingPromises = new Map();\n  }\n\n  /**\n   * Load a WebAssembly module with caching\n   * @param {string} moduleName - Name of the module for caching\n   * @param {string|ArrayBuffer} source - URL to WASM file or ArrayBuffer\n   * @param {Object} imports - WebAssembly imports object\n   * @returns {Promise<WebAssembly.Instance>}\n   */\n  async loadModule(moduleName, source, imports = {}) {\n    // Check if already loaded\n    if (this.loadedModules.has(moduleName)) {\n      return this.loadedModules.get(moduleName);\n    }\n\n    // Check if currently loading\n    if (this.loadingPromises.has(moduleName)) {\n      return this.loadingPromises.get(moduleName);\n    }\n\n    // Start loading\n    const loadingPromise = this._loadModuleInternal(source, imports);\n    this.loadingPromises.set(moduleName, loadingPromise);\n\n    try {\n      const instance = await loadingPromise;\n      this.loadedModules.set(moduleName, instance);\n      this.loadingPromises.delete(moduleName);\n      return instance;\n    } catch (error) {\n      this.loadingPromises.delete(moduleName);\n      throw error;\n    }\n  }\n\n  async _loadModuleInternal(source, imports) {\n    let wasmBytes;\n\n    if (source instanceof ArrayBuffer) {\n      wasmBytes = source;\n    } else if (typeof source === 'string') {\n      // Load from URL\n      const response = await fetch(source);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch WASM module: ${response.statusText}`);\n      }\n      wasmBytes = await response.arrayBuffer();\n    } else {\n      throw new Error('Invalid WASM source: must be URL string or ArrayBuffer');\n    }\n\n    // Compile and instantiate\n    const module = await WebAssembly.compile(wasmBytes);\n    const instance = await WebAssembly.instantiate(module, imports);\n\n    return instance;\n  }\n\n  /**\n   * Check if WebAssembly is supported in this browser\n   * @returns {boolean}\n   */\n  static isSupported() {\n    return typeof WebAssembly === 'object' &&\n           typeof WebAssembly.instantiate === 'function';\n  }\n\n  /**\n   * Get information about WebAssembly support\n   * @returns {Object}\n   */\n  static getSupportInfo() {\n    const support = {\n      basic: typeof WebAssembly === 'object',\n      streaming: typeof WebAssembly.instantiateStreaming === 'function',\n      threads: typeof SharedArrayBuffer !== 'undefined',\n      simd: false // SIMD detection is more complex\n    };\n\n    // Check for SIMD support (simplified check)\n    try {\n      support.simd = typeof WebAssembly.v128 !== 'undefined';\n    } catch (e) {\n      support.simd = false;\n    }\n\n    return support;\n  }\n\n  /**\n   * Clear the module cache\n   */\n  clearCache() {\n    this.loadedModules.clear();\n    this.loadingPromises.clear();\n  }\n\n  /**\n   * Remove a specific module from cache\n   * @param {string} moduleName \n   */\n  unloadModule(moduleName) {\n    this.loadedModules.delete(moduleName);\n    this.loadingPromises.delete(moduleName);\n  }\n}\n\n/**\n * Performance monitor for comparing JavaScript vs WebAssembly execution\n */\nexport class WasmPerformanceMonitor {\n  constructor() {\n    this.metrics = new Map();\n  }\n\n  /**\n   * Start timing an operation\n   * @param {string} operationName \n   * @param {string} implementation - 'js' or 'wasm'\n   */\n  startTiming(operationName, implementation = 'unknown') {\n    const key = `${operationName}-${implementation}`;\n    this.metrics.set(key, {\n      startTime: performance.now(),\n      implementation,\n      operationName\n    });\n  }\n\n  /**\n   * End timing an operation\n   * @param {string} operationName \n   * @param {string} implementation \n   * @returns {number} Duration in milliseconds\n   */\n  endTiming(operationName, implementation = 'unknown') {\n    const key = `${operationName}-${implementation}`;\n    const metric = this.metrics.get(key);\n    \n    if (!metric) {\n      console.warn(`No timing started for ${key}`);\n      return 0;\n    }\n\n    const duration = performance.now() - metric.startTime;\n    metric.duration = duration;\n    metric.endTime = performance.now();\n\n    return duration;\n  }\n\n  /**\n   * Get performance comparison between implementations\n   * @param {string} operationName \n   * @returns {Object}\n   */\n  getComparison(operationName) {\n    const jsKey = `${operationName}-js`;\n    const wasmKey = `${operationName}-wasm`;\n    \n    const jsMetric = this.metrics.get(jsKey);\n    const wasmMetric = this.metrics.get(wasmKey);\n\n    if (!jsMetric || !wasmMetric) {\n      return null;\n    }\n\n    const speedup = jsMetric.duration / wasmMetric.duration;\n    \n    return {\n      javascript: {\n        duration: jsMetric.duration,\n        implementation: 'JavaScript'\n      },\n      webassembly: {\n        duration: wasmMetric.duration,\n        implementation: 'WebAssembly'\n      },\n      speedup: speedup,\n      winner: speedup > 1 ? 'WebAssembly' : 'JavaScript',\n      improvement: speedup > 1 ? \n        `${((speedup - 1) * 100).toFixed(1)}% faster` :\n        `${((1 - speedup) * 100).toFixed(1)}% slower`\n    };\n  }\n\n  /**\n   * Get all performance metrics\n   * @returns {Array}\n   */\n  getAllMetrics() {\n    return Array.from(this.metrics.values());\n  }\n\n  /**\n   * Clear all metrics\n   */\n  clear() {\n    this.metrics.clear();\n  }\n}\n\n// Singleton instances\nexport const wasmLoader = new WasmLoader();\nexport const performanceMonitor = new WasmPerformanceMonitor();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}