{"ast":null,"code":"import { isFunction } from 'min-dash';\nimport { event as domEvent } from 'min-dom';\nimport { hasModifier, isCmd, isKey, isShift } from './KeyboardUtil';\n\n/**\n * @typedef {import('../../core/EventBus').default} EventBus\n *\n * @typedef {({ keyEvent: KeyboardEvent }) => any} Listener\n */\n\nvar KEYDOWN_EVENT = 'keyboard.keydown',\n  KEYUP_EVENT = 'keyboard.keyup';\nvar DEFAULT_PRIORITY = 1000;\nvar compatMessage = 'Keyboard binding is now implicit; explicit binding to an element got removed. For more information, see https://github.com/bpmn-io/diagram-js/issues/661';\n\n/**\n * A keyboard abstraction that may be activated and\n * deactivated by users at will, consuming global key events\n * and triggering diagram actions.\n *\n * For keys pressed down, keyboard fires `keyboard.keydown` event.\n * The event context contains one field which is `KeyboardEvent` event.\n *\n * The implementation fires the following key events that allow\n * other components to hook into key handling:\n *\n *  - keyboard.bind\n *  - keyboard.unbind\n *  - keyboard.init\n *  - keyboard.destroy\n *\n * All events contain one field which is node.\n *\n * Specify the initial keyboard binding state via the\n * `keyboard.bind=true|false` configuration option.\n *\n * @param {Object} config\n * @param {boolean} [config.bind]\n * @param {EventBus} eventBus\n */\nexport default function Keyboard(config, eventBus) {\n  var self = this;\n  this._config = config = config || {};\n  this._eventBus = eventBus;\n  this._keydownHandler = this._keydownHandler.bind(this);\n  this._keyupHandler = this._keyupHandler.bind(this);\n\n  // properly clean dom registrations\n  eventBus.on('diagram.destroy', function () {\n    self._fire('destroy');\n    self.unbind();\n  });\n  if (config.bindTo) {\n    console.error('unsupported configuration <keyboard.bindTo>', new Error(compatMessage));\n  }\n  var bind = config && config.bind !== false;\n  eventBus.on('canvas.init', function (event) {\n    self._target = event.svg;\n    if (bind) {\n      self.bind();\n    }\n    self._fire('init');\n  });\n}\nKeyboard.$inject = ['config.keyboard', 'eventBus'];\nKeyboard.prototype._keydownHandler = function (event) {\n  this._keyHandler(event, KEYDOWN_EVENT);\n};\nKeyboard.prototype._keyupHandler = function (event) {\n  this._keyHandler(event, KEYUP_EVENT);\n};\nKeyboard.prototype._keyHandler = function (event, type) {\n  var eventBusResult;\n  if (this._isEventIgnored(event)) {\n    return;\n  }\n  var context = {\n    keyEvent: event\n  };\n  eventBusResult = this._eventBus.fire(type || KEYDOWN_EVENT, context);\n  if (eventBusResult) {\n    event.preventDefault();\n  }\n};\nKeyboard.prototype._isEventIgnored = function (event) {\n  return false;\n};\n\n/**\n * Bind keyboard events to the given DOM node.\n *\n * @overlord\n * @deprecated No longer in use since version 15.0.0.\n *\n * @param {EventTarget} node\n */\n/**\n * Bind keyboard events to the canvas node.\n */\nKeyboard.prototype.bind = function (node) {\n  // legacy <node> argument provided\n  if (node) {\n    console.error('unsupported argument <node>', new Error(compatMessage));\n  }\n\n  // make sure that the keyboard is only bound once to the DOM\n  this.unbind();\n  node = this._node = this._target;\n\n  // bind key events\n  domEvent.bind(node, 'keydown', this._keydownHandler);\n  domEvent.bind(node, 'keyup', this._keyupHandler);\n  this._fire('bind');\n};\n\n/**\n * @return {EventTarget}\n */\nKeyboard.prototype.getBinding = function () {\n  return this._node;\n};\nKeyboard.prototype.unbind = function () {\n  var node = this._node;\n  if (node) {\n    this._fire('unbind');\n\n    // unbind key events\n    domEvent.unbind(node, 'keydown', this._keydownHandler);\n    domEvent.unbind(node, 'keyup', this._keyupHandler);\n  }\n  this._node = null;\n};\n\n/**\n * @param {string} event\n */\nKeyboard.prototype._fire = function (event) {\n  this._eventBus.fire('keyboard.' + event, {\n    node: this._node\n  });\n};\n\n/**\n * Add a listener function that is notified with `KeyboardEvent` whenever\n * the keyboard is bound and the user presses a key. If no priority is\n * provided, the default value of 1000 is used.\n *\n * @param {number} [priority]\n * @param {Listener} listener\n * @param {string} [type='keyboard.keydown']\n */\nKeyboard.prototype.addListener = function (priority, listener, type) {\n  if (isFunction(priority)) {\n    type = listener;\n    listener = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n  this._eventBus.on(type || KEYDOWN_EVENT, priority, listener);\n};\n\n/**\n * Remove a listener function.\n *\n * @param {Listener} listener\n * @param {string} [type='keyboard.keydown']\n */\nKeyboard.prototype.removeListener = function (listener, type) {\n  this._eventBus.off(type || KEYDOWN_EVENT, listener);\n};\nKeyboard.prototype.hasModifier = hasModifier;\nKeyboard.prototype.isCmd = isCmd;\nKeyboard.prototype.isShift = isShift;\nKeyboard.prototype.isKey = isKey;","map":{"version":3,"names":["isFunction","event","domEvent","hasModifier","isCmd","isKey","isShift","KEYDOWN_EVENT","KEYUP_EVENT","DEFAULT_PRIORITY","compatMessage","Keyboard","config","eventBus","self","_config","_eventBus","_keydownHandler","bind","_keyupHandler","on","_fire","unbind","bindTo","console","error","Error","_target","svg","$inject","prototype","_keyHandler","type","eventBusResult","_isEventIgnored","context","keyEvent","fire","preventDefault","node","_node","getBinding","addListener","priority","listener","removeListener","off"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/keyboard/Keyboard.js"],"sourcesContent":["import {\n  isFunction\n} from 'min-dash';\n\nimport {\n  event as domEvent\n} from 'min-dom';\n\nimport {\n  hasModifier,\n  isCmd,\n  isKey,\n  isShift\n} from './KeyboardUtil';\n\n/**\n * @typedef {import('../../core/EventBus').default} EventBus\n *\n * @typedef {({ keyEvent: KeyboardEvent }) => any} Listener\n */\n\nvar KEYDOWN_EVENT = 'keyboard.keydown',\n    KEYUP_EVENT = 'keyboard.keyup';\n\nvar DEFAULT_PRIORITY = 1000;\n\nvar compatMessage = 'Keyboard binding is now implicit; explicit binding to an element got removed. For more information, see https://github.com/bpmn-io/diagram-js/issues/661';\n\n\n/**\n * A keyboard abstraction that may be activated and\n * deactivated by users at will, consuming global key events\n * and triggering diagram actions.\n *\n * For keys pressed down, keyboard fires `keyboard.keydown` event.\n * The event context contains one field which is `KeyboardEvent` event.\n *\n * The implementation fires the following key events that allow\n * other components to hook into key handling:\n *\n *  - keyboard.bind\n *  - keyboard.unbind\n *  - keyboard.init\n *  - keyboard.destroy\n *\n * All events contain one field which is node.\n *\n * Specify the initial keyboard binding state via the\n * `keyboard.bind=true|false` configuration option.\n *\n * @param {Object} config\n * @param {boolean} [config.bind]\n * @param {EventBus} eventBus\n */\nexport default function Keyboard(config, eventBus) {\n  var self = this;\n\n  this._config = config = config || {};\n\n  this._eventBus = eventBus;\n\n  this._keydownHandler = this._keydownHandler.bind(this);\n  this._keyupHandler = this._keyupHandler.bind(this);\n\n  // properly clean dom registrations\n  eventBus.on('diagram.destroy', function() {\n    self._fire('destroy');\n\n    self.unbind();\n  });\n\n  if (config.bindTo) {\n    console.error('unsupported configuration <keyboard.bindTo>', new Error(compatMessage));\n  }\n\n  var bind = config && config.bind !== false;\n\n  eventBus.on('canvas.init', function(event) {\n    self._target = event.svg;\n\n    if (bind) {\n      self.bind();\n    }\n\n    self._fire('init');\n  });\n\n}\n\nKeyboard.$inject = [\n  'config.keyboard',\n  'eventBus'\n];\n\nKeyboard.prototype._keydownHandler = function(event) {\n  this._keyHandler(event, KEYDOWN_EVENT);\n};\n\nKeyboard.prototype._keyupHandler = function(event) {\n  this._keyHandler(event, KEYUP_EVENT);\n};\n\nKeyboard.prototype._keyHandler = function(event, type) {\n  var eventBusResult;\n\n  if (this._isEventIgnored(event)) {\n    return;\n  }\n\n  var context = {\n    keyEvent: event\n  };\n\n  eventBusResult = this._eventBus.fire(type || KEYDOWN_EVENT, context);\n\n  if (eventBusResult) {\n    event.preventDefault();\n  }\n};\n\nKeyboard.prototype._isEventIgnored = function(event) {\n  return false;\n};\n\n/**\n * Bind keyboard events to the given DOM node.\n *\n * @overlord\n * @deprecated No longer in use since version 15.0.0.\n *\n * @param {EventTarget} node\n */\n/**\n * Bind keyboard events to the canvas node.\n */\nKeyboard.prototype.bind = function(node) {\n\n  // legacy <node> argument provided\n  if (node) {\n    console.error('unsupported argument <node>', new Error(compatMessage));\n  }\n\n  // make sure that the keyboard is only bound once to the DOM\n  this.unbind();\n\n  node = this._node = this._target;\n\n  // bind key events\n  domEvent.bind(node, 'keydown', this._keydownHandler);\n  domEvent.bind(node, 'keyup', this._keyupHandler);\n\n  this._fire('bind');\n};\n\n/**\n * @return {EventTarget}\n */\nKeyboard.prototype.getBinding = function() {\n  return this._node;\n};\n\nKeyboard.prototype.unbind = function() {\n  var node = this._node;\n\n  if (node) {\n    this._fire('unbind');\n\n    // unbind key events\n    domEvent.unbind(node, 'keydown', this._keydownHandler);\n    domEvent.unbind(node, 'keyup', this._keyupHandler);\n  }\n\n  this._node = null;\n};\n\n/**\n * @param {string} event\n */\nKeyboard.prototype._fire = function(event) {\n  this._eventBus.fire('keyboard.' + event, { node: this._node });\n};\n\n/**\n * Add a listener function that is notified with `KeyboardEvent` whenever\n * the keyboard is bound and the user presses a key. If no priority is\n * provided, the default value of 1000 is used.\n *\n * @param {number} [priority]\n * @param {Listener} listener\n * @param {string} [type='keyboard.keydown']\n */\nKeyboard.prototype.addListener = function(priority, listener, type) {\n  if (isFunction(priority)) {\n    type = listener;\n    listener = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  this._eventBus.on(type || KEYDOWN_EVENT, priority, listener);\n};\n\n/**\n * Remove a listener function.\n *\n * @param {Listener} listener\n * @param {string} [type='keyboard.keydown']\n */\nKeyboard.prototype.removeListener = function(listener, type) {\n  this._eventBus.off(type || KEYDOWN_EVENT, listener);\n};\n\nKeyboard.prototype.hasModifier = hasModifier;\nKeyboard.prototype.isCmd = isCmd;\nKeyboard.prototype.isShift = isShift;\nKeyboard.prototype.isKey = isKey;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}