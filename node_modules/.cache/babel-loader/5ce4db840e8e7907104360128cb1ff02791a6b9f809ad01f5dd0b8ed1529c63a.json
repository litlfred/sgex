{"ast":null,"code":"import inherits from 'inherits-browser';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { pointsAligned } from 'diagram-js/lib/util/Geometry';\nimport { assign } from 'min-dash';\n\n/**\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('diagram-js/lib/features/grid-snapping/GridSnapping').default} GridSnapping\n * @typedef {import('../../modeling/Modeling').default} Modeling\n *\n * @typedef {import('diagram-js/lib/util/Types').Point} Point\n */\n\nvar HIGH_PRIORITY = 3000;\n\n/**\n * Snaps connections with Manhattan layout.\n *\n * @param {EventBus} eventBus\n * @param {GridSnapping} gridSnapping\n * @param {Modeling} modeling\n */\nexport default function GridSnappingLayoutConnectionBehavior(eventBus, gridSnapping, modeling) {\n  CommandInterceptor.call(this, eventBus);\n  this._gridSnapping = gridSnapping;\n  var self = this;\n  this.postExecuted(['connection.create', 'connection.layout'], HIGH_PRIORITY, function (event) {\n    var context = event.context,\n      connection = context.connection,\n      hints = context.hints || {},\n      waypoints = connection.waypoints;\n    if (hints.connectionStart || hints.connectionEnd || hints.createElementsBehavior === false) {\n      return;\n    }\n    if (!hasMiddleSegments(waypoints)) {\n      return;\n    }\n    modeling.updateWaypoints(connection, self.snapMiddleSegments(waypoints));\n  });\n}\nGridSnappingLayoutConnectionBehavior.$inject = ['eventBus', 'gridSnapping', 'modeling'];\ninherits(GridSnappingLayoutConnectionBehavior, CommandInterceptor);\n\n/**\n * Snap middle segments of a given connection.\n *\n * @param {Point[]} waypoints\n *\n * @return {Point[]}\n */\nGridSnappingLayoutConnectionBehavior.prototype.snapMiddleSegments = function (waypoints) {\n  var gridSnapping = this._gridSnapping,\n    snapped;\n  waypoints = waypoints.slice();\n  for (var i = 1; i < waypoints.length - 2; i++) {\n    snapped = snapSegment(gridSnapping, waypoints[i], waypoints[i + 1]);\n    waypoints[i] = snapped[0];\n    waypoints[i + 1] = snapped[1];\n  }\n  return waypoints;\n};\n\n// helpers //////////\n\n/**\n * Check whether a connection has a middle segments.\n *\n * @param {Point[]} waypoints\n *\n * @return {boolean}\n */\nfunction hasMiddleSegments(waypoints) {\n  return waypoints.length > 3;\n}\n\n/**\n * Check whether an alignment is horizontal.\n *\n * @param {string} aligned\n *\n * @return {boolean}\n */\nfunction horizontallyAligned(aligned) {\n  return aligned === 'h';\n}\n\n/**\n * Check whether an alignment is vertical.\n *\n * @param {string} aligned\n *\n * @return {boolean}\n */\nfunction verticallyAligned(aligned) {\n  return aligned === 'v';\n}\n\n/**\n * Get middle segments from a given connection.\n *\n * @param {Point[]} waypoints\n *\n * @return {Point[]}\n */\nfunction snapSegment(gridSnapping, segmentStart, segmentEnd) {\n  var aligned = pointsAligned(segmentStart, segmentEnd);\n  var snapped = {};\n  if (horizontallyAligned(aligned)) {\n    // snap horizontally\n    snapped.y = gridSnapping.snapValue(segmentStart.y);\n  }\n  if (verticallyAligned(aligned)) {\n    // snap vertically\n    snapped.x = gridSnapping.snapValue(segmentStart.x);\n  }\n  if ('x' in snapped || 'y' in snapped) {\n    segmentStart = assign({}, segmentStart, snapped);\n    segmentEnd = assign({}, segmentEnd, snapped);\n  }\n  return [segmentStart, segmentEnd];\n}","map":{"version":3,"names":["inherits","CommandInterceptor","pointsAligned","assign","HIGH_PRIORITY","GridSnappingLayoutConnectionBehavior","eventBus","gridSnapping","modeling","call","_gridSnapping","self","postExecuted","event","context","connection","hints","waypoints","connectionStart","connectionEnd","createElementsBehavior","hasMiddleSegments","updateWaypoints","snapMiddleSegments","$inject","prototype","snapped","slice","i","length","snapSegment","horizontallyAligned","aligned","verticallyAligned","segmentStart","segmentEnd","y","snapValue","x"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/grid-snapping/behavior/GridSnappingLayoutConnectionBehavior.js"],"sourcesContent":["import inherits from 'inherits-browser';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport { pointsAligned } from 'diagram-js/lib/util/Geometry';\n\nimport {\n  assign\n} from 'min-dash';\n\n/**\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('diagram-js/lib/features/grid-snapping/GridSnapping').default} GridSnapping\n * @typedef {import('../../modeling/Modeling').default} Modeling\n *\n * @typedef {import('diagram-js/lib/util/Types').Point} Point\n */\n\nvar HIGH_PRIORITY = 3000;\n\n\n/**\n * Snaps connections with Manhattan layout.\n *\n * @param {EventBus} eventBus\n * @param {GridSnapping} gridSnapping\n * @param {Modeling} modeling\n */\nexport default function GridSnappingLayoutConnectionBehavior(eventBus, gridSnapping, modeling) {\n  CommandInterceptor.call(this, eventBus);\n\n  this._gridSnapping = gridSnapping;\n\n  var self = this;\n\n  this.postExecuted([\n    'connection.create',\n    'connection.layout'\n  ], HIGH_PRIORITY, function(event) {\n    var context = event.context,\n        connection = context.connection,\n        hints = context.hints || {},\n        waypoints = connection.waypoints;\n\n    if (hints.connectionStart || hints.connectionEnd || hints.createElementsBehavior === false) {\n      return;\n    }\n\n    if (!hasMiddleSegments(waypoints)) {\n      return;\n    }\n\n    modeling.updateWaypoints(connection, self.snapMiddleSegments(waypoints));\n  });\n}\n\nGridSnappingLayoutConnectionBehavior.$inject = [\n  'eventBus',\n  'gridSnapping',\n  'modeling'\n];\n\ninherits(GridSnappingLayoutConnectionBehavior, CommandInterceptor);\n\n/**\n * Snap middle segments of a given connection.\n *\n * @param {Point[]} waypoints\n *\n * @return {Point[]}\n */\nGridSnappingLayoutConnectionBehavior.prototype.snapMiddleSegments = function(waypoints) {\n  var gridSnapping = this._gridSnapping,\n      snapped;\n\n  waypoints = waypoints.slice();\n\n  for (var i = 1; i < waypoints.length - 2; i++) {\n\n    snapped = snapSegment(gridSnapping, waypoints[i], waypoints[i + 1]);\n\n    waypoints[i] = snapped[0];\n    waypoints[i + 1] = snapped[1];\n  }\n\n  return waypoints;\n};\n\n\n// helpers //////////\n\n/**\n * Check whether a connection has a middle segments.\n *\n * @param {Point[]} waypoints\n *\n * @return {boolean}\n */\nfunction hasMiddleSegments(waypoints) {\n  return waypoints.length > 3;\n}\n\n/**\n * Check whether an alignment is horizontal.\n *\n * @param {string} aligned\n *\n * @return {boolean}\n */\nfunction horizontallyAligned(aligned) {\n  return aligned === 'h';\n}\n\n/**\n * Check whether an alignment is vertical.\n *\n * @param {string} aligned\n *\n * @return {boolean}\n */\nfunction verticallyAligned(aligned) {\n  return aligned === 'v';\n}\n\n/**\n * Get middle segments from a given connection.\n *\n * @param {Point[]} waypoints\n *\n * @return {Point[]}\n */\nfunction snapSegment(gridSnapping, segmentStart, segmentEnd) {\n\n  var aligned = pointsAligned(segmentStart, segmentEnd);\n\n  var snapped = {};\n\n  if (horizontallyAligned(aligned)) {\n\n    // snap horizontally\n    snapped.y = gridSnapping.snapValue(segmentStart.y);\n  }\n\n  if (verticallyAligned(aligned)) {\n\n    // snap vertically\n    snapped.x = gridSnapping.snapValue(segmentStart.x);\n  }\n\n  if ('x' in snapped || 'y' in snapped) {\n    segmentStart = assign({}, segmentStart, snapped);\n    segmentEnd = assign({}, segmentEnd, snapped);\n  }\n\n  return [ segmentStart, segmentEnd ];\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}