{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import BpmnViewer from'bpmn-js/lib/NavigatedViewer';import githubService from'../services/githubService';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BPMNPreview=_ref=>{let{file,repository,selectedBranch,profile}=_ref;const containerRef=useRef(null);const viewerRef=useRef(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const loadPreview=async()=>{if(!file||!repository||!containerRef.current)return;try{var _repository$owner,_file$path,_file$sha;setLoading(true);setError(null);// Clean container\nif(containerRef.current){containerRef.current.innerHTML='';}const owner=((_repository$owner=repository.owner)===null||_repository$owner===void 0?void 0:_repository$owner.login)||repository.full_name.split('/')[0];const repoName=repository.name;const ref=selectedBranch||'main';const isDemo=((_file$path=file.path)===null||_file$path===void 0?void 0:_file$path.includes('demo/'))||((_file$sha=file.sha)===null||_file$sha===void 0?void 0:_file$sha.startsWith('demo-'));let bpmnXml;if(isDemo){// For demo files, create a representative BPMN diagram\nconst processName=file.name.replace('.bpmn','').replace(/[-_]/g,' ');bpmnXml=\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<bpmn:definitions xmlns:bpmn=\\\"http://www.omg.org/spec/BPMN/20100524/MODEL\\\" \\n                  xmlns:bpmndi=\\\"http://www.omg.org/spec/BPMN/20100524/DI\\\" \\n                  xmlns:dc=\\\"http://www.omg.org/spec/DD/20100524/DC\\\" \\n                  xmlns:di=\\\"http://www.omg.org/spec/DD/20100524/DI\\\" \\n                  id=\\\"Definitions_1\\\" targetNamespace=\\\"http://bpmn.io/schema/bpmn\\\">\\n  <bpmn:process id=\\\"Process_\".concat(file.name.replace(/[^a-zA-Z0-9]/g,'_'),\"\\\" isExecutable=\\\"false\\\">\\n    <bpmn:startEvent id=\\\"StartEvent_1\\\" name=\\\"Start\\\">\\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\\n    </bpmn:startEvent>\\n    <bpmn:task id=\\\"Task_1\\\" name=\\\"\").concat(processName,\"\\\">\\n      <bpmn:incoming>Flow_1</bpmn:incoming>\\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\\n    </bpmn:task>\\n    <bpmn:endEvent id=\\\"EndEvent_1\\\" name=\\\"End\\\">\\n      <bpmn:incoming>Flow_2</bpmn:incoming>\\n    </bpmn:endEvent>\\n    <bpmn:sequenceFlow id=\\\"Flow_1\\\" sourceRef=\\\"StartEvent_1\\\" targetRef=\\\"Task_1\\\" />\\n    <bpmn:sequenceFlow id=\\\"Flow_2\\\" sourceRef=\\\"Task_1\\\" targetRef=\\\"EndEvent_1\\\" />\\n  </bpmn:process>\\n  <bpmndi:BPMNDiagram id=\\\"BPMNDiagram_1\\\">\\n    <bpmndi:BPMNPlane id=\\\"BPMNPlane_1\\\" bpmnElement=\\\"Process_\").concat(file.name.replace(/[^a-zA-Z0-9]/g,'_'),\"\\\">\\n      <bpmndi:BPMNShape id=\\\"StartEvent_1_di\\\" bpmnElement=\\\"StartEvent_1\\\">\\n        <dc:Bounds x=\\\"152\\\" y=\\\"82\\\" width=\\\"36\\\" height=\\\"36\\\" />\\n        <bpmndi:BPMNLabel>\\n          <dc:Bounds x=\\\"158\\\" y=\\\"125\\\" width=\\\"24\\\" height=\\\"14\\\" />\\n        </bpmndi:BPMNLabel>\\n      </bpmndi:BPMNShape>\\n      <bpmndi:BPMNShape id=\\\"Task_1_di\\\" bpmnElement=\\\"Task_1\\\">\\n        <dc:Bounds x=\\\"250\\\" y=\\\"60\\\" width=\\\"100\\\" height=\\\"80\\\" />\\n      </bpmndi:BPMNShape>\\n      <bpmndi:BPMNShape id=\\\"EndEvent_1_di\\\" bpmnElement=\\\"EndEvent_1\\\">\\n        <dc:Bounds x=\\\"402\\\" y=\\\"82\\\" width=\\\"36\\\" height=\\\"36\\\" />\\n        <bpmndi:BPMNLabel>\\n          <dc:Bounds x=\\\"410\\\" y=\\\"125\\\" width=\\\"20\\\" height=\\\"14\\\" />\\n        </bpmndi:BPMNLabel>\\n      </bpmndi:BPMNShape>\\n      <bpmndi:BPMNEdge id=\\\"Flow_1_di\\\" bpmnElement=\\\"Flow_1\\\">\\n        <di:waypoint x=\\\"188\\\" y=\\\"100\\\" />\\n        <di:waypoint x=\\\"250\\\" y=\\\"100\\\" />\\n      </bpmndi:BPMNEdge>\\n      <bpmndi:BPMNEdge id=\\\"Flow_2_di\\\" bpmnElement=\\\"Flow_2\\\">\\n        <di:waypoint x=\\\"350\\\" y=\\\"100\\\" />\\n        <di:waypoint x=\\\"402\\\" y=\\\"100\\\" />\\n      </bpmndi:BPMNEdge>\\n    </bpmndi:BPMNPlane>\\n  </bpmndi:BPMNDiagram>\\n</bpmn:definitions>\");}else{// For real files, try to load the actual BPMN content\ntry{bpmnXml=await githubService.getFileContent(owner,repoName,file.path,ref);}catch(fileError){console.warn('Could not load BPMN file content:',fileError);// Fallback to a generic BPMN diagram if file can't be loaded\nconst processName=file.name.replace('.bpmn','').replace(/[-_]/g,' ');bpmnXml=\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<bpmn:definitions xmlns:bpmn=\\\"http://www.omg.org/spec/BPMN/20100524/MODEL\\\" \\n                  xmlns:bpmndi=\\\"http://www.omg.org/spec/BPMN/20100524/DI\\\" \\n                  xmlns:dc=\\\"http://www.omg.org/spec/DD/20100524/DC\\\" \\n                  xmlns:di=\\\"http://www.omg.org/spec/DD/20100524/DI\\\" \\n                  id=\\\"Definitions_1\\\" targetNamespace=\\\"http://bpmn.io/schema/bpmn\\\">\\n  <bpmn:process id=\\\"Process_\".concat(file.name.replace(/[^a-zA-Z0-9]/g,'_'),\"\\\" isExecutable=\\\"false\\\">\\n    <bpmn:startEvent id=\\\"StartEvent_1\\\" name=\\\"Start\\\">\\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\\n    </bpmn:startEvent>\\n    <bpmn:task id=\\\"Task_1\\\" name=\\\"\").concat(processName,\"\\\">\\n      <bpmn:incoming>Flow_1</bpmn:incoming>\\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\\n    </bpmn:task>\\n    <bpmn:endEvent id=\\\"EndEvent_1\\\" name=\\\"End\\\">\\n      <bpmn:incoming>Flow_2</bpmn:incoming>\\n    </bpmn:endEvent>\\n    <bpmn:sequenceFlow id=\\\"Flow_1\\\" sourceRef=\\\"StartEvent_1\\\" targetRef=\\\"Task_1\\\" />\\n    <bpmn:sequenceFlow id=\\\"Flow_2\\\" sourceRef=\\\"Task_1\\\" targetRef=\\\"EndEvent_1\\\" />\\n  </bpmn:process>\\n  <bpmndi:BPMNDiagram id=\\\"BPMNDiagram_1\\\">\\n    <bpmndi:BPMNPlane id=\\\"BPMNPlane_1\\\" bpmnElement=\\\"Process_\").concat(file.name.replace(/[^a-zA-Z0-9]/g,'_'),\"\\\">\\n      <bpmndi:BPMNShape id=\\\"StartEvent_1_di\\\" bpmnElement=\\\"StartEvent_1\\\">\\n        <dc:Bounds x=\\\"152\\\" y=\\\"82\\\" width=\\\"36\\\" height=\\\"36\\\" />\\n        <bpmndi:BPMNLabel>\\n          <dc:Bounds x=\\\"158\\\" y=\\\"125\\\" width=\\\"24\\\" height=\\\"14\\\" />\\n        </bpmndi:BPMNLabel>\\n      </bpmndi:BPMNShape>\\n      <bpmndi:BPMNShape id=\\\"Task_1_di\\\" bpmnElement=\\\"Task_1\\\">\\n        <dc:Bounds x=\\\"250\\\" y=\\\"60\\\" width=\\\"100\\\" height=\\\"80\\\" />\\n      </bpmndi:BPMNShape>\\n      <bpmndi:BPMNShape id=\\\"EndEvent_1_di\\\" bpmnElement=\\\"EndEvent_1\\\">\\n        <dc:Bounds x=\\\"402\\\" y=\\\"82\\\" width=\\\"36\\\" height=\\\"36\\\" />\\n        <bpmndi:BPMNLabel>\\n          <dc:Bounds x=\\\"410\\\" y=\\\"125\\\" width=\\\"20\\\" height=\\\"14\\\" />\\n        </bpmndi:BPMNLabel>\\n      </bpmndi:BPMNShape>\\n      <bpmndi:BPMNEdge id=\\\"Flow_1_di\\\" bpmnElement=\\\"Flow_1\\\">\\n        <di:waypoint x=\\\"188\\\" y=\\\"100\\\" />\\n        <di:waypoint x=\\\"250\\\" y=\\\"100\\\" />\\n      </bpmndi:BPMNEdge>\\n      <bpmndi:BPMNEdge id=\\\"Flow_2_di\\\" bpmnElement=\\\"Flow_2\\\">\\n        <di:waypoint x=\\\"350\\\" y=\\\"100\\\" />\\n        <di:waypoint x=\\\"402\\\" y=\\\"100\\\" />\\n      </bpmndi:BPMNEdge>\\n    </bpmndi:BPMNPlane>\\n  </bpmndi:BPMNDiagram>\\n</bpmn:definitions>\");}}// Create and initialize viewer with clean separation\nconst viewer=new BpmnViewer();viewerRef.current=viewer;try{// Attach viewer to container first\nawait viewer.attachTo(containerRef.current);// Then import XML\nawait viewer.importXML(bpmnXml);// Fit to viewport for preview\nconst canvas=viewer.get('canvas');canvas.zoom('fit-viewport');setLoading(false);}catch(importError){console.error('Failed to import BPMN XML:',importError);setError('Failed to load preview');setLoading(false);}}catch(renderError){console.error('Failed to render BPMN preview:',renderError);setError('Failed to load preview');setLoading(false);}};// Cleanup function\nconst cleanup=()=>{if(viewerRef.current){try{viewerRef.current.destroy();}catch(cleanupError){console.warn('Error cleaning up BPMN viewer:',cleanupError);}viewerRef.current=null;}};// Only run if we have all required props\nif(file&&repository&&containerRef.current){loadPreview();}else{setLoading(false);}return cleanup;},[file,repository,selectedBranch,profile]);if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"bpmn-preview\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"preview-loading\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"preview-spinner\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Loading preview...\"})]})});}if(error){return/*#__PURE__*/_jsx(\"div\",{className:\"bpmn-preview\",children:/*#__PURE__*/_jsx(\"div\",{className:\"preview-error\",children:/*#__PURE__*/_jsxs(\"span\",{children:[\"\\u274C \",error]})})});}return/*#__PURE__*/_jsx(\"div\",{className:\"bpmn-preview\",children:/*#__PURE__*/_jsx(\"div\",{className:\"preview-container\",ref:containerRef})});};export default BPMNPreview;","map":{"version":3,"names":["React","useState","useEffect","useRef","BpmnViewer","githubService","jsx","_jsx","jsxs","_jsxs","BPMNPreview","_ref","file","repository","selectedBranch","profile","containerRef","viewerRef","loading","setLoading","error","setError","loadPreview","current","_repository$owner","_file$path","_file$sha","innerHTML","owner","login","full_name","split","repoName","name","ref","isDemo","path","includes","sha","startsWith","bpmnXml","processName","replace","concat","getFileContent","fileError","console","warn","viewer","attachTo","importXML","canvas","get","zoom","importError","renderError","cleanup","destroy","cleanupError","className","children"],"sources":["/home/runner/work/sgex/sgex/src/components/BPMNPreview.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport BpmnViewer from 'bpmn-js/lib/NavigatedViewer';\nimport githubService from '../services/githubService';\n\nconst BPMNPreview = ({ file, repository, selectedBranch, profile }) => {\n  const containerRef = useRef(null);\n  const viewerRef = useRef(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadPreview = async () => {\n      if (!file || !repository || !containerRef.current) return;\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Clean container\n        if (containerRef.current) {\n          containerRef.current.innerHTML = '';\n        }\n\n        const owner = repository.owner?.login || repository.full_name.split('/')[0];\n        const repoName = repository.name;\n        const ref = selectedBranch || 'main';\n        const isDemo = file.path?.includes('demo/') || file.sha?.startsWith('demo-');\n\n        let bpmnXml;\n\n        if (isDemo) {\n          // For demo files, create a representative BPMN diagram\n          const processName = file.name.replace('.bpmn', '').replace(/[-_]/g, ' ');\n          bpmnXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn:definitions xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" \n                  xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" \n                  xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" \n                  xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" \n                  id=\"Definitions_1\" targetNamespace=\"http://bpmn.io/schema/bpmn\">\n  <bpmn:process id=\"Process_${file.name.replace(/[^a-zA-Z0-9]/g, '_')}\" isExecutable=\"false\">\n    <bpmn:startEvent id=\"StartEvent_1\" name=\"Start\">\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:task id=\"Task_1\" name=\"${processName}\">\n      <bpmn:incoming>Flow_1</bpmn:incoming>\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\n    </bpmn:task>\n    <bpmn:endEvent id=\"EndEvent_1\" name=\"End\">\n      <bpmn:incoming>Flow_2</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id=\"Flow_1\" sourceRef=\"StartEvent_1\" targetRef=\"Task_1\" />\n    <bpmn:sequenceFlow id=\"Flow_2\" sourceRef=\"Task_1\" targetRef=\"EndEvent_1\" />\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_${file.name.replace(/[^a-zA-Z0-9]/g, '_')}\">\n      <bpmndi:BPMNShape id=\"StartEvent_1_di\" bpmnElement=\"StartEvent_1\">\n        <dc:Bounds x=\"152\" y=\"82\" width=\"36\" height=\"36\" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x=\"158\" y=\"125\" width=\"24\" height=\"14\" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Task_1_di\" bpmnElement=\"Task_1\">\n        <dc:Bounds x=\"250\" y=\"60\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"EndEvent_1_di\" bpmnElement=\"EndEvent_1\">\n        <dc:Bounds x=\"402\" y=\"82\" width=\"36\" height=\"36\" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x=\"410\" y=\"125\" width=\"20\" height=\"14\" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id=\"Flow_1_di\" bpmnElement=\"Flow_1\">\n        <di:waypoint x=\"188\" y=\"100\" />\n        <di:waypoint x=\"250\" y=\"100\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_2_di\" bpmnElement=\"Flow_2\">\n        <di:waypoint x=\"350\" y=\"100\" />\n        <di:waypoint x=\"402\" y=\"100\" />\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>`;\n        } else {\n          // For real files, try to load the actual BPMN content\n          try {\n            bpmnXml = await githubService.getFileContent(owner, repoName, file.path, ref);\n          } catch (fileError) {\n            console.warn('Could not load BPMN file content:', fileError);\n            // Fallback to a generic BPMN diagram if file can't be loaded\n            const processName = file.name.replace('.bpmn', '').replace(/[-_]/g, ' ');\n            bpmnXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn:definitions xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" \n                  xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" \n                  xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" \n                  xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" \n                  id=\"Definitions_1\" targetNamespace=\"http://bpmn.io/schema/bpmn\">\n  <bpmn:process id=\"Process_${file.name.replace(/[^a-zA-Z0-9]/g, '_')}\" isExecutable=\"false\">\n    <bpmn:startEvent id=\"StartEvent_1\" name=\"Start\">\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:task id=\"Task_1\" name=\"${processName}\">\n      <bpmn:incoming>Flow_1</bpmn:incoming>\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\n    </bpmn:task>\n    <bpmn:endEvent id=\"EndEvent_1\" name=\"End\">\n      <bpmn:incoming>Flow_2</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id=\"Flow_1\" sourceRef=\"StartEvent_1\" targetRef=\"Task_1\" />\n    <bpmn:sequenceFlow id=\"Flow_2\" sourceRef=\"Task_1\" targetRef=\"EndEvent_1\" />\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_${file.name.replace(/[^a-zA-Z0-9]/g, '_')}\">\n      <bpmndi:BPMNShape id=\"StartEvent_1_di\" bpmnElement=\"StartEvent_1\">\n        <dc:Bounds x=\"152\" y=\"82\" width=\"36\" height=\"36\" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x=\"158\" y=\"125\" width=\"24\" height=\"14\" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Task_1_di\" bpmnElement=\"Task_1\">\n        <dc:Bounds x=\"250\" y=\"60\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"EndEvent_1_di\" bpmnElement=\"EndEvent_1\">\n        <dc:Bounds x=\"402\" y=\"82\" width=\"36\" height=\"36\" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x=\"410\" y=\"125\" width=\"20\" height=\"14\" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id=\"Flow_1_di\" bpmnElement=\"Flow_1\">\n        <di:waypoint x=\"188\" y=\"100\" />\n        <di:waypoint x=\"250\" y=\"100\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_2_di\" bpmnElement=\"Flow_2\">\n        <di:waypoint x=\"350\" y=\"100\" />\n        <di:waypoint x=\"402\" y=\"100\" />\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>`;\n          }\n        }\n\n        // Create and initialize viewer with clean separation\n        const viewer = new BpmnViewer();\n        viewerRef.current = viewer;\n\n        try {\n          // Attach viewer to container first\n          await viewer.attachTo(containerRef.current);\n          \n          // Then import XML\n          await viewer.importXML(bpmnXml);\n          \n          // Fit to viewport for preview\n          const canvas = viewer.get('canvas');\n          canvas.zoom('fit-viewport');\n\n          setLoading(false);\n        } catch (importError) {\n          console.error('Failed to import BPMN XML:', importError);\n          setError('Failed to load preview');\n          setLoading(false);\n        }\n\n      } catch (renderError) {\n        console.error('Failed to render BPMN preview:', renderError);\n        setError('Failed to load preview');\n        setLoading(false);\n      }\n    };\n\n    // Cleanup function\n    const cleanup = () => {\n      if (viewerRef.current) {\n        try {\n          viewerRef.current.destroy();\n        } catch (cleanupError) {\n          console.warn('Error cleaning up BPMN viewer:', cleanupError);\n        }\n        viewerRef.current = null;\n      }\n    };\n\n    // Only run if we have all required props\n    if (file && repository && containerRef.current) {\n      loadPreview();\n    } else {\n      setLoading(false);\n    }\n\n    return cleanup;\n  }, [file, repository, selectedBranch, profile]);\n\n  if (loading) {\n    return (\n      <div className=\"bpmn-preview\">\n        <div className=\"preview-loading\">\n          <div className=\"preview-spinner\"></div>\n          <span>Loading preview...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bpmn-preview\">\n        <div className=\"preview-error\">\n          <span>❌ {error}</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bpmn-preview\">\n      <div className=\"preview-container\" ref={containerRef}>\n        {/* BPMN viewer will be rendered here */}\n      </div>\n    </div>\n  );\n};\n\nexport default BPMNPreview;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}