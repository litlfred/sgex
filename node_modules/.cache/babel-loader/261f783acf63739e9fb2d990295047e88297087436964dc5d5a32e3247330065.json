{"ast":null,"code":"import { getBusinessObject } from '../../../util/ModelUtil';\nimport { isExpanded } from '../../../util/DiUtil';\n\n/**\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').PopupMenuTarget} PopupMenuTarget\n *\n * @typedef {(entry: PopupMenuTarget) => boolean} DifferentTypeValidator\n */\n\n/**\n * Returns true, if an element is from a different type\n * than a target definition. Takes into account the type,\n * event definition type and triggeredByEvent property.\n *\n * @param {Element} element\n *\n * @return {DifferentTypeValidator}\n */\nexport function isDifferentType(element) {\n  return function (entry) {\n    var target = entry.target;\n    var businessObject = getBusinessObject(element),\n      eventDefinition = businessObject.eventDefinitions && businessObject.eventDefinitions[0];\n    var isTypeEqual = businessObject.$type === target.type;\n    var isEventDefinitionEqual = (eventDefinition && eventDefinition.$type) === target.eventDefinitionType;\n    var isTriggeredByEventEqual =\n    // coherse to <false>\n    !!target.triggeredByEvent === !!businessObject.triggeredByEvent;\n    var isExpandedEqual = target.isExpanded === undefined || target.isExpanded === isExpanded(element);\n    return !isTypeEqual || !isEventDefinitionEqual || !isTriggeredByEventEqual || !isExpandedEqual;\n  };\n}","map":{"version":3,"names":["getBusinessObject","isExpanded","isDifferentType","element","entry","target","businessObject","eventDefinition","eventDefinitions","isTypeEqual","$type","type","isEventDefinitionEqual","eventDefinitionType","isTriggeredByEventEqual","triggeredByEvent","isExpandedEqual","undefined"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/popup-menu/util/TypeUtil.js"],"sourcesContent":["import {\n  getBusinessObject\n} from '../../../util/ModelUtil';\n\nimport {\n  isExpanded\n} from '../../../util/DiUtil';\n\n/**\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').PopupMenuTarget} PopupMenuTarget\n *\n * @typedef {(entry: PopupMenuTarget) => boolean} DifferentTypeValidator\n */\n\n/**\n * Returns true, if an element is from a different type\n * than a target definition. Takes into account the type,\n * event definition type and triggeredByEvent property.\n *\n * @param {Element} element\n *\n * @return {DifferentTypeValidator}\n */\nexport function isDifferentType(element) {\n\n  return function(entry) {\n    var target = entry.target;\n\n    var businessObject = getBusinessObject(element),\n        eventDefinition = businessObject.eventDefinitions && businessObject.eventDefinitions[0];\n\n    var isTypeEqual = businessObject.$type === target.type;\n\n    var isEventDefinitionEqual = (\n      (eventDefinition && eventDefinition.$type) === target.eventDefinitionType\n    );\n\n    var isTriggeredByEventEqual = (\n\n      // coherse to <false>\n      !!target.triggeredByEvent === !!businessObject.triggeredByEvent\n    );\n\n    var isExpandedEqual = (\n      target.isExpanded === undefined ||\n      target.isExpanded === isExpanded(element)\n    );\n\n    return !isTypeEqual || !isEventDefinitionEqual || !isTriggeredByEventEqual || !isExpandedEqual;\n  };\n}\n"],"mappings":"AAAA,SACEA,iBAAiB,QACZ,yBAAyB;AAEhC,SACEC,UAAU,QACL,sBAAsB;;AAE7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,OAAO,EAAE;EAEvC,OAAO,UAASC,KAAK,EAAE;IACrB,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAM;IAEzB,IAAIC,cAAc,GAAGN,iBAAiB,CAACG,OAAO,CAAC;MAC3CI,eAAe,GAAGD,cAAc,CAACE,gBAAgB,IAAIF,cAAc,CAACE,gBAAgB,CAAC,CAAC,CAAC;IAE3F,IAAIC,WAAW,GAAGH,cAAc,CAACI,KAAK,KAAKL,MAAM,CAACM,IAAI;IAEtD,IAAIC,sBAAsB,GACxB,CAACL,eAAe,IAAIA,eAAe,CAACG,KAAK,MAAML,MAAM,CAACQ,mBACvD;IAED,IAAIC,uBAAuB;IAEzB;IACA,CAAC,CAACT,MAAM,CAACU,gBAAgB,KAAK,CAAC,CAACT,cAAc,CAACS,gBAChD;IAED,IAAIC,eAAe,GACjBX,MAAM,CAACJ,UAAU,KAAKgB,SAAS,IAC/BZ,MAAM,CAACJ,UAAU,KAAKA,UAAU,CAACE,OAAO,CACzC;IAED,OAAO,CAACM,WAAW,IAAI,CAACG,sBAAsB,IAAI,CAACE,uBAAuB,IAAI,CAACE,eAAe;EAChG,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}