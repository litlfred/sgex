{"ast":null,"code":"import { getBusinessObject, getDi, is } from '../../util/ModelUtil';\nimport { forEach, isArray, isUndefined, omit, reduce } from 'min-dash';\nimport { isLabel } from '../../util/LabelUtil';\n\n/**\n * @typedef {import('../modeling/BpmnFactory').default} BpmnFactory\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('./ModdleCopy').default} ModdleCopy\n */\n\nfunction copyProperties(source, target, properties) {\n  if (!isArray(properties)) {\n    properties = [properties];\n  }\n  forEach(properties, function (property) {\n    if (!isUndefined(source[property])) {\n      target[property] = source[property];\n    }\n  });\n}\nvar LOW_PRIORITY = 750;\n\n/**\n * BPMN-specific copy & paste.\n *\n * @param {BpmnFactory} bpmnFactory\n * @param {EventBus} eventBus\n * @param {ModdleCopy} moddleCopy\n */\nexport default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {\n  function copy(bo, clone) {\n    var targetBo = bpmnFactory.create(bo.$type);\n    return moddleCopy.copyElement(bo, targetBo, null, clone);\n  }\n  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function (context) {\n    var descriptor = context.descriptor,\n      element = context.element,\n      businessObject = getBusinessObject(element);\n\n    // do not copy business object + di for labels;\n    // will be pulled from the referenced label target\n    if (isLabel(element)) {\n      return descriptor;\n    }\n    var businessObjectCopy = descriptor.businessObject = copy(businessObject, true);\n    var diCopy = descriptor.di = copy(getDi(element), true);\n    diCopy.bpmnElement = businessObjectCopy;\n    copyProperties(businessObjectCopy, descriptor, 'name');\n    copyProperties(diCopy, descriptor, 'isExpanded');\n\n    // default sequence flow\n    if (businessObject.default) {\n      descriptor.default = businessObject.default.id;\n    }\n  });\n  var referencesKey = '-bpmn-js-refs';\n  function getReferences(cache) {\n    return cache[referencesKey] = cache[referencesKey] || {};\n  }\n  function setReferences(cache, references) {\n    cache[referencesKey] = references;\n  }\n  function resolveReferences(descriptor, cache, references) {\n    var businessObject = getBusinessObject(descriptor);\n\n    // default sequence flows\n    if (descriptor.default) {\n      // relationship cannot be resolved immediately\n      references[descriptor.default] = {\n        element: businessObject,\n        property: 'default'\n      };\n    }\n\n    // boundary events\n    if (descriptor.host) {\n      // relationship can be resolved immediately\n      getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[descriptor.host]);\n    }\n    return omit(references, reduce(references, function (array, reference, key) {\n      var element = reference.element,\n        property = reference.property;\n      if (key === descriptor.id) {\n        element.set(property, businessObject);\n        array.push(descriptor.id);\n      }\n      return array;\n    }, []));\n  }\n  eventBus.on('copyPaste.pasteElement', function (context) {\n    var cache = context.cache,\n      descriptor = context.descriptor,\n      businessObject = descriptor.businessObject,\n      di = descriptor.di;\n\n    // wire existing di + businessObject for external label\n    if (isLabel(descriptor)) {\n      descriptor.businessObject = getBusinessObject(cache[descriptor.labelTarget]);\n      descriptor.di = getDi(cache[descriptor.labelTarget]);\n      return;\n    }\n    businessObject = descriptor.businessObject = copy(businessObject);\n    di = descriptor.di = copy(di);\n    di.bpmnElement = businessObject;\n    copyProperties(descriptor, businessObject, ['isExpanded', 'name']);\n    descriptor.type = businessObject.$type;\n  });\n\n  // copy + paste processRef with participant\n\n  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function (context) {\n    var descriptor = context.descriptor,\n      element = context.element;\n    if (!is(element, 'bpmn:Participant')) {\n      return;\n    }\n    var participantBo = getBusinessObject(element);\n    if (participantBo.processRef) {\n      descriptor.processRef = copy(participantBo.processRef, true);\n    }\n  });\n  eventBus.on('copyPaste.pasteElement', function (context) {\n    var descriptor = context.descriptor,\n      processRef = descriptor.processRef;\n    if (processRef) {\n      descriptor.processRef = copy(processRef);\n    }\n  });\n\n  // resolve references\n\n  eventBus.on('copyPaste.pasteElement', LOW_PRIORITY, function (context) {\n    var cache = context.cache,\n      descriptor = context.descriptor;\n\n    // resolve references e.g. default sequence flow\n    setReferences(cache, resolveReferences(descriptor, cache, getReferences(cache)));\n  });\n}\nBpmnCopyPaste.$inject = ['bpmnFactory', 'eventBus', 'moddleCopy'];","map":{"version":3,"names":["getBusinessObject","getDi","is","forEach","isArray","isUndefined","omit","reduce","isLabel","copyProperties","source","target","properties","property","LOW_PRIORITY","BpmnCopyPaste","bpmnFactory","eventBus","moddleCopy","copy","bo","clone","targetBo","create","$type","copyElement","on","context","descriptor","element","businessObject","businessObjectCopy","diCopy","di","bpmnElement","default","id","referencesKey","getReferences","cache","setReferences","references","resolveReferences","host","attachedToRef","array","reference","key","set","push","labelTarget","type","participantBo","processRef","$inject"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/copy-paste/BpmnCopyPaste.js"],"sourcesContent":["import {\n  getBusinessObject,\n  getDi,\n  is\n} from '../../util/ModelUtil';\n\nimport {\n  forEach,\n  isArray,\n  isUndefined,\n  omit,\n  reduce\n} from 'min-dash';\n\nimport { isLabel } from '../../util/LabelUtil';\n\n/**\n * @typedef {import('../modeling/BpmnFactory').default} BpmnFactory\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('./ModdleCopy').default} ModdleCopy\n */\n\nfunction copyProperties(source, target, properties) {\n  if (!isArray(properties)) {\n    properties = [ properties ];\n  }\n\n  forEach(properties, function(property) {\n    if (!isUndefined(source[property])) {\n      target[property] = source[property];\n    }\n  });\n}\n\nvar LOW_PRIORITY = 750;\n\n/**\n * BPMN-specific copy & paste.\n *\n * @param {BpmnFactory} bpmnFactory\n * @param {EventBus} eventBus\n * @param {ModdleCopy} moddleCopy\n */\nexport default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {\n\n  function copy(bo, clone) {\n    var targetBo = bpmnFactory.create(bo.$type);\n\n    return moddleCopy.copyElement(bo, targetBo, null, clone);\n  }\n\n  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function(context) {\n    var descriptor = context.descriptor,\n        element = context.element,\n        businessObject = getBusinessObject(element);\n\n    // do not copy business object + di for labels;\n    // will be pulled from the referenced label target\n    if (isLabel(element)) {\n      return descriptor;\n    }\n\n    var businessObjectCopy = descriptor.businessObject = copy(businessObject, true);\n    var diCopy = descriptor.di = copy(getDi(element), true);\n    diCopy.bpmnElement = businessObjectCopy;\n\n    copyProperties(businessObjectCopy, descriptor, 'name');\n    copyProperties(diCopy, descriptor, 'isExpanded');\n\n    // default sequence flow\n    if (businessObject.default) {\n      descriptor.default = businessObject.default.id;\n    }\n  });\n\n  var referencesKey = '-bpmn-js-refs';\n\n  function getReferences(cache) {\n    return (cache[referencesKey] = cache[referencesKey] || {});\n  }\n\n  function setReferences(cache, references) {\n    cache[referencesKey] = references;\n  }\n\n  function resolveReferences(descriptor, cache, references) {\n    var businessObject = getBusinessObject(descriptor);\n\n    // default sequence flows\n    if (descriptor.default) {\n\n      // relationship cannot be resolved immediately\n      references[ descriptor.default ] = {\n        element: businessObject,\n        property: 'default'\n      };\n    }\n\n    // boundary events\n    if (descriptor.host) {\n\n      // relationship can be resolved immediately\n      getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[ descriptor.host ]);\n    }\n\n    return omit(references, reduce(references, function(array, reference, key) {\n      var element = reference.element,\n          property = reference.property;\n\n      if (key === descriptor.id) {\n        element.set(property, businessObject);\n\n        array.push(descriptor.id);\n      }\n\n      return array;\n    }, []));\n  }\n\n  eventBus.on('copyPaste.pasteElement', function(context) {\n    var cache = context.cache,\n        descriptor = context.descriptor,\n        businessObject = descriptor.businessObject,\n        di = descriptor.di;\n\n    // wire existing di + businessObject for external label\n    if (isLabel(descriptor)) {\n      descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);\n      descriptor.di = getDi(cache[ descriptor.labelTarget ]);\n\n      return;\n    }\n\n    businessObject = descriptor.businessObject = copy(businessObject);\n\n    di = descriptor.di = copy(di);\n    di.bpmnElement = businessObject;\n\n    copyProperties(descriptor, businessObject, [\n      'isExpanded',\n      'name'\n    ]);\n\n    descriptor.type = businessObject.$type;\n  });\n\n  // copy + paste processRef with participant\n\n  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function(context) {\n    var descriptor = context.descriptor,\n        element = context.element;\n\n    if (!is(element, 'bpmn:Participant')) {\n      return;\n    }\n\n    var participantBo = getBusinessObject(element);\n\n    if (participantBo.processRef) {\n      descriptor.processRef = copy(participantBo.processRef, true);\n    }\n  });\n\n  eventBus.on('copyPaste.pasteElement', function(context) {\n    var descriptor = context.descriptor,\n        processRef = descriptor.processRef;\n\n    if (processRef) {\n      descriptor.processRef = copy(processRef);\n    }\n  });\n\n  // resolve references\n\n  eventBus.on('copyPaste.pasteElement', LOW_PRIORITY, function(context) {\n    var cache = context.cache,\n        descriptor = context.descriptor;\n\n    // resolve references e.g. default sequence flow\n    setReferences(\n      cache,\n      resolveReferences(descriptor, cache, getReferences(cache))\n    );\n  });\n\n}\n\n\nBpmnCopyPaste.$inject = [\n  'bpmnFactory',\n  'eventBus',\n  'moddleCopy'\n];"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}