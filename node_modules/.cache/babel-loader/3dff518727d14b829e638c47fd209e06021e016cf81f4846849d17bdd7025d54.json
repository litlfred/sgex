{"ast":null,"code":"import yaml from'js-yaml';import githubService from'./githubService';/**\n * Service for validating WHO SMART Guidelines Digital Adaptation Kit repositories\n * \n * A repository is considered a valid DAK if:\n * 1. It has a sushi-config.yaml file in the root\n * 2. The sushi-config.yaml contains a 'dependencies' section\n * 3. The dependencies section contains the key 'smart.who.int.base'\n */class DAKValidationService{/**\n   * Validates if a repository is a WHO SMART Guidelines Digital Adaptation Kit\n   * @param {string} owner - Repository owner (username or organization)\n   * @param {string} repo - Repository name\n   * @param {string} branch - Branch to check (defaults to 'main')\n   * @returns {Promise<boolean>} - True if repository is a valid DAK\n   */async validateDAKRepository(owner,repo){let branch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'main';try{// Try to fetch the sushi-config.yaml file from the repository root\nconst sushiConfigContent=await this.fetchSushiConfig(owner,repo,branch);if(!sushiConfigContent){console.log(`No sushi-config.yaml found in ${owner}/${repo}`);return false;}// Parse the YAML content\nconst config=yaml.load(sushiConfigContent);if(!config||typeof config!=='object'){console.log(`Invalid YAML format in sushi-config.yaml for ${owner}/${repo}`);return false;}// Check if dependencies section exists\nif(!config.dependencies||typeof config.dependencies!=='object'){console.log(`No dependencies section found in sushi-config.yaml for ${owner}/${repo}`);return false;}// Check if smart.who.int.base dependency exists\nconst hasSmartBase='smart.who.int.base'in config.dependencies;if(hasSmartBase){console.log(`Valid DAK repository found: ${owner}/${repo} (has smart.who.int.base dependency)`);return true;}else{console.log(`Repository ${owner}/${repo} has sushi-config.yaml but missing smart.who.int.base dependency`);return false;}}catch(error){console.log(`Error validating DAK repository ${owner}/${repo}:`,error.message);return false;}}/**\n   * Fetches the sushi-config.yaml file content from a repository\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name  \n   * @param {string} branch - Branch to check\n   * @returns {Promise<string|null>} - YAML content or null if not found\n   */async fetchSushiConfig(owner,repo){let branch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'main';try{// Use the same approach as githubService - get the octokit instance\nconst octokit=githubService.isAuth()?githubService.octokit:null;if(!octokit){// In unauthenticated mode, we can't fetch file contents reliably\nconsole.log(`Cannot fetch sushi-config.yaml for ${owner}/${repo} - not authenticated`);return null;}// Try main branch first if no branch specified\nconst branchesToTry=branch==='main'?['main','master']:[branch];for(const branchName of branchesToTry){try{const{data}=await octokit.rest.repos.getContent({owner,repo,path:'sushi-config.yaml',ref:branchName});if(data.type==='file'&&data.content){// Decode base64 content\nconst content=decodeURIComponent(escape(atob(data.content)));console.log(`Found sushi-config.yaml in ${owner}/${repo} on branch ${branchName}`);return content;}}catch(branchError){console.log(`sushi-config.yaml not found on branch ${branchName} for ${owner}/${repo}:`,branchError.status===404?'File not found':branchError.message);continue;}}return null;}catch(error){console.log(`Error fetching sushi-config.yaml for ${owner}/${repo}:`,error.message);return null;}}/**\n   * Creates a mock validation for demo mode\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name\n   * @returns {boolean} - True for known demo DAK repositories\n   */validateDemoDAKRepository(owner,repo){// List of known valid demo DAK repositories for demo mode\nconst knownDAKRepos=[// Actual WHO DAK repositories\n'WorldHealthOrganization/smart-immunizations','WorldHealthOrganization/smart-anc-toolkit','WorldHealthOrganization/smart-hiv','WorldHealthOrganization/smart-tb','WorldHealthOrganization/smart-base',// Demo repositories for testing\n'litlfred/smart-guidelines-demo','litlfred/sgex-demo','who/smart-guidelines','who/smart-anc-toolkit','who/smart-immunizations',// Demo variations\n'demo-user/smart-guidelines-demo','demo-user/who-smart-guidelines'];const fullName=`${owner}/${repo}`;const isKnown=knownDAKRepos.some(knownRepo=>knownRepo.toLowerCase()===fullName.toLowerCase());if(isKnown){console.log(`Demo mode: ${fullName} recognized as valid DAK repository`);return true;}else{console.log(`Demo mode: ${fullName} not recognized as valid DAK repository`);return false;}}}const dakValidationService=new DAKValidationService();export default dakValidationService;","map":{"version":3,"names":["yaml","githubService","DAKValidationService","validateDAKRepository","owner","repo","branch","arguments","length","undefined","sushiConfigContent","fetchSushiConfig","console","log","config","load","dependencies","hasSmartBase","error","message","octokit","isAuth","branchesToTry","branchName","data","rest","repos","getContent","path","ref","type","content","decodeURIComponent","escape","atob","branchError","status","validateDemoDAKRepository","knownDAKRepos","fullName","isKnown","some","knownRepo","toLowerCase","dakValidationService"],"sources":["/home/runner/work/sgex/sgex/src/services/dakValidationService.js"],"sourcesContent":["import yaml from 'js-yaml';\nimport githubService from './githubService';\n\n/**\n * Service for validating WHO SMART Guidelines Digital Adaptation Kit repositories\n * \n * A repository is considered a valid DAK if:\n * 1. It has a sushi-config.yaml file in the root\n * 2. The sushi-config.yaml contains a 'dependencies' section\n * 3. The dependencies section contains the key 'smart.who.int.base'\n */\nclass DAKValidationService {\n  /**\n   * Validates if a repository is a WHO SMART Guidelines Digital Adaptation Kit\n   * @param {string} owner - Repository owner (username or organization)\n   * @param {string} repo - Repository name\n   * @param {string} branch - Branch to check (defaults to 'main')\n   * @returns {Promise<boolean>} - True if repository is a valid DAK\n   */\n  async validateDAKRepository(owner, repo, branch = 'main') {\n    try {\n      // Try to fetch the sushi-config.yaml file from the repository root\n      const sushiConfigContent = await this.fetchSushiConfig(owner, repo, branch);\n      \n      if (!sushiConfigContent) {\n        console.log(`No sushi-config.yaml found in ${owner}/${repo}`);\n        return false;\n      }\n\n      // Parse the YAML content\n      const config = yaml.load(sushiConfigContent);\n      \n      if (!config || typeof config !== 'object') {\n        console.log(`Invalid YAML format in sushi-config.yaml for ${owner}/${repo}`);\n        return false;\n      }\n\n      // Check if dependencies section exists\n      if (!config.dependencies || typeof config.dependencies !== 'object') {\n        console.log(`No dependencies section found in sushi-config.yaml for ${owner}/${repo}`);\n        return false;\n      }\n\n      // Check if smart.who.int.base dependency exists\n      const hasSmartBase = 'smart.who.int.base' in config.dependencies;\n      \n      if (hasSmartBase) {\n        console.log(`Valid DAK repository found: ${owner}/${repo} (has smart.who.int.base dependency)`);\n        return true;\n      } else {\n        console.log(`Repository ${owner}/${repo} has sushi-config.yaml but missing smart.who.int.base dependency`);\n        return false;\n      }\n\n    } catch (error) {\n      console.log(`Error validating DAK repository ${owner}/${repo}:`, error.message);\n      return false;\n    }\n  }\n\n  /**\n   * Fetches the sushi-config.yaml file content from a repository\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name  \n   * @param {string} branch - Branch to check\n   * @returns {Promise<string|null>} - YAML content or null if not found\n   */\n  async fetchSushiConfig(owner, repo, branch = 'main') {\n    try {\n      // Use the same approach as githubService - get the octokit instance\n      const octokit = githubService.isAuth() ? githubService.octokit : null;\n      \n      if (!octokit) {\n        // In unauthenticated mode, we can't fetch file contents reliably\n        console.log(`Cannot fetch sushi-config.yaml for ${owner}/${repo} - not authenticated`);\n        return null;\n      }\n\n      // Try main branch first if no branch specified\n      const branchesToTry = branch === 'main' ? ['main', 'master'] : [branch];\n      \n      for (const branchName of branchesToTry) {\n        try {\n          const { data } = await octokit.rest.repos.getContent({\n            owner,\n            repo,\n            path: 'sushi-config.yaml',\n            ref: branchName\n          });\n          \n          if (data.type === 'file' && data.content) {\n            // Decode base64 content\n            const content = decodeURIComponent(escape(atob(data.content)));\n            console.log(`Found sushi-config.yaml in ${owner}/${repo} on branch ${branchName}`);\n            return content;\n          }\n        } catch (branchError) {\n          console.log(`sushi-config.yaml not found on branch ${branchName} for ${owner}/${repo}:`, branchError.status === 404 ? 'File not found' : branchError.message);\n          continue;\n        }\n      }\n      \n      return null;\n    } catch (error) {\n      console.log(`Error fetching sushi-config.yaml for ${owner}/${repo}:`, error.message);\n      return null;\n    }\n  }\n\n  /**\n   * Creates a mock validation for demo mode\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name\n   * @returns {boolean} - True for known demo DAK repositories\n   */\n  validateDemoDAKRepository(owner, repo) {\n    // List of known valid demo DAK repositories for demo mode\n    const knownDAKRepos = [\n      // Actual WHO DAK repositories\n      'WorldHealthOrganization/smart-immunizations',\n      'WorldHealthOrganization/smart-anc-toolkit', \n      'WorldHealthOrganization/smart-hiv',\n      'WorldHealthOrganization/smart-tb',\n      'WorldHealthOrganization/smart-base',\n      \n      // Demo repositories for testing\n      'litlfred/smart-guidelines-demo',\n      'litlfred/sgex-demo',\n      'who/smart-guidelines',\n      'who/smart-anc-toolkit',\n      'who/smart-immunizations',\n      \n      // Demo variations\n      'demo-user/smart-guidelines-demo',\n      'demo-user/who-smart-guidelines'\n    ];\n\n    const fullName = `${owner}/${repo}`;\n    const isKnown = knownDAKRepos.some(knownRepo => \n      knownRepo.toLowerCase() === fullName.toLowerCase()\n    );\n\n    if (isKnown) {\n      console.log(`Demo mode: ${fullName} recognized as valid DAK repository`);\n      return true;\n    } else {\n      console.log(`Demo mode: ${fullName} not recognized as valid DAK repository`);\n      return false;\n    }\n  }\n}\n\nconst dakValidationService = new DAKValidationService();\n\nexport default dakValidationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}