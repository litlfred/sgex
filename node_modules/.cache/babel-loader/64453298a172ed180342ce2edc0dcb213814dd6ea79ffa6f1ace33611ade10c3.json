{"ast":null,"code":"import { getDi, is } from './ModelUtil';\n\n/**\n * @typedef {import('../model/Types').Element} Element\n * @typedef {import('../model/Types').ModdleElement} ModdleElement\n */\n\nexport var planeSuffix = '_plane';\n\n/**\n * Get primary shape ID for a plane.\n *\n * @param  {Element|ModdleElement} element\n *\n * @return {string}\n */\nexport function getShapeIdFromPlane(element) {\n  var id = element.id;\n  return removePlaneSuffix(id);\n}\n\n/**\n * Get plane ID for a primary shape.\n *\n * @param  {Element|ModdleElement} element\n *\n * @return {string}\n */\nexport function getPlaneIdFromShape(element) {\n  var id = element.id;\n  if (is(element, 'bpmn:SubProcess')) {\n    return addPlaneSuffix(id);\n  }\n  return id;\n}\n\n/**\n * Get plane ID for primary shape ID.\n *\n * @param {string} id\n *\n * @return {string}\n */\nexport function toPlaneId(id) {\n  return addPlaneSuffix(id);\n}\n\n/**\n * Check wether element is plane.\n *\n * @param  {Element|ModdleElement} element\n *\n * @return {boolean}\n */\nexport function isPlane(element) {\n  var di = getDi(element);\n  return is(di, 'bpmndi:BPMNPlane');\n}\nfunction addPlaneSuffix(id) {\n  return id + planeSuffix;\n}\nfunction removePlaneSuffix(id) {\n  return id.replace(new RegExp(planeSuffix + '$'), '');\n}","map":{"version":3,"names":["getDi","is","planeSuffix","getShapeIdFromPlane","element","id","removePlaneSuffix","getPlaneIdFromShape","addPlaneSuffix","toPlaneId","isPlane","di","replace","RegExp"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/util/DrilldownUtil.js"],"sourcesContent":["import { getDi, is } from './ModelUtil';\n\n/**\n * @typedef {import('../model/Types').Element} Element\n * @typedef {import('../model/Types').ModdleElement} ModdleElement\n */\n\nexport var planeSuffix = '_plane';\n\n/**\n * Get primary shape ID for a plane.\n *\n * @param  {Element|ModdleElement} element\n *\n * @return {string}\n */\nexport function getShapeIdFromPlane(element) {\n  var id = element.id;\n\n  return removePlaneSuffix(id);\n}\n\n/**\n * Get plane ID for a primary shape.\n *\n * @param  {Element|ModdleElement} element\n *\n * @return {string}\n */\nexport function getPlaneIdFromShape(element) {\n  var id = element.id;\n\n  if (is(element, 'bpmn:SubProcess')) {\n    return addPlaneSuffix(id);\n  }\n\n  return id;\n}\n\n/**\n * Get plane ID for primary shape ID.\n *\n * @param {string} id\n *\n * @return {string}\n */\nexport function toPlaneId(id) {\n  return addPlaneSuffix(id);\n}\n\n/**\n * Check wether element is plane.\n *\n * @param  {Element|ModdleElement} element\n *\n * @return {boolean}\n */\nexport function isPlane(element) {\n  var di = getDi(element);\n\n  return is(di, 'bpmndi:BPMNPlane');\n}\n\nfunction addPlaneSuffix(id) {\n  return id + planeSuffix;\n}\n\nfunction removePlaneSuffix(id) {\n  return id.replace(new RegExp(planeSuffix + '$'), '');\n}"],"mappings":"AAAA,SAASA,KAAK,EAAEC,EAAE,QAAQ,aAAa;;AAEvC;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,WAAW,GAAG,QAAQ;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAACC,OAAO,EAAE;EAC3C,IAAIC,EAAE,GAAGD,OAAO,CAACC,EAAE;EAEnB,OAAOC,iBAAiB,CAACD,EAAE,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,mBAAmBA,CAACH,OAAO,EAAE;EAC3C,IAAIC,EAAE,GAAGD,OAAO,CAACC,EAAE;EAEnB,IAAIJ,EAAE,CAACG,OAAO,EAAE,iBAAiB,CAAC,EAAE;IAClC,OAAOI,cAAc,CAACH,EAAE,CAAC;EAC3B;EAEA,OAAOA,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,SAASA,CAACJ,EAAE,EAAE;EAC5B,OAAOG,cAAc,CAACH,EAAE,CAAC;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,OAAOA,CAACN,OAAO,EAAE;EAC/B,IAAIO,EAAE,GAAGX,KAAK,CAACI,OAAO,CAAC;EAEvB,OAAOH,EAAE,CAACU,EAAE,EAAE,kBAAkB,CAAC;AACnC;AAEA,SAASH,cAAcA,CAACH,EAAE,EAAE;EAC1B,OAAOA,EAAE,GAAGH,WAAW;AACzB;AAEA,SAASI,iBAAiBA,CAACD,EAAE,EAAE;EAC7B,OAAOA,EAAE,CAACO,OAAO,CAAC,IAAIC,MAAM,CAACX,WAAW,GAAG,GAAG,CAAC,EAAE,EAAE,CAAC;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}