{"ast":null,"code":"import{usePage,PAGE_TYPES}from'./PageProvider';/**\n * Hook for accessing URL parameters in a type-safe way\n */export const usePageParams=()=>{const{type,user,profile,repository,branch,asset,params,navigate}=usePage();const updateBranch=newBranch=>{if(type===PAGE_TYPES.DAK||type===PAGE_TYPES.ASSET){const currentPath=window.location.pathname;const pathParts=currentPath.split('/');// Update branch in URL path\nif(pathParts.length>=5){pathParts[5]=newBranch;navigate(pathParts.join('/'));}}};const navigateToUser=userLogin=>{navigate(`/${params.page||'dak-action'}/${userLogin}`);};const navigateToDAK=function(userLogin,repoName){let branchName=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'main';navigate(`/${params.page||'dashboard'}/${userLogin}/${repoName}/${branchName}`);};const navigateToAsset=(userLogin,repoName,branchName,assetPath)=>{navigate(`/${params.page||'editor'}/${userLogin}/${repoName}/${branchName}/${assetPath}`);};return{type,user,profile,repository,branch,asset,params,updateBranch,navigateToUser,navigateToDAK,navigateToAsset,navigate};};/**\n * Hook specifically for DAK pages (DAK and Asset page types)\n */export const useDAKParams=()=>{const pageParams=usePageParams();// Only throw error if page is fully loaded and type is not DAK/ASSET\n// This prevents errors during initial loading or page type determination\nif(!pageParams.loading&&pageParams.type!==PAGE_TYPES.DAK&&pageParams.type!==PAGE_TYPES.ASSET){throw new Error(`useDAKParams can only be used on DAK or Asset pages. Current page type: ${pageParams.type}`);}return{user:pageParams.user,profile:pageParams.profile,repository:pageParams.repository,branch:pageParams.branch,asset:pageParams.asset,updateBranch:pageParams.updateBranch,navigate:pageParams.navigate};};/**\n * Hook specifically for User pages\n */export const useUserParams=()=>{const pageParams=usePageParams();if(pageParams.type!==PAGE_TYPES.USER){throw new Error('useUserParams can only be used on User pages');}return{user:pageParams.user,profile:pageParams.profile,navigateToDAK:pageParams.navigateToDAK,navigate:pageParams.navigate};};","map":{"version":3,"names":["usePage","PAGE_TYPES","usePageParams","type","user","profile","repository","branch","asset","params","navigate","updateBranch","newBranch","DAK","ASSET","currentPath","window","location","pathname","pathParts","split","length","join","navigateToUser","userLogin","page","navigateToDAK","repoName","branchName","arguments","undefined","navigateToAsset","assetPath","useDAKParams","pageParams","loading","Error","useUserParams","USER"],"sources":["/home/runner/work/sgex/sgex/src/components/framework/usePageParams.js"],"sourcesContent":["import { usePage, PAGE_TYPES } from './PageProvider';\n\n/**\n * Hook for accessing URL parameters in a type-safe way\n */\nexport const usePageParams = () => {\n  const { type, user, profile, repository, branch, asset, params, navigate } = usePage();\n\n  const updateBranch = (newBranch) => {\n    if (type === PAGE_TYPES.DAK || type === PAGE_TYPES.ASSET) {\n      const currentPath = window.location.pathname;\n      const pathParts = currentPath.split('/');\n      \n      // Update branch in URL path\n      if (pathParts.length >= 5) {\n        pathParts[5] = newBranch;\n        navigate(pathParts.join('/'));\n      }\n    }\n  };\n\n  const navigateToUser = (userLogin) => {\n    navigate(`/${params.page || 'dak-action'}/${userLogin}`);\n  };\n\n  const navigateToDAK = (userLogin, repoName, branchName = 'main') => {\n    navigate(`/${params.page || 'dashboard'}/${userLogin}/${repoName}/${branchName}`);\n  };\n\n  const navigateToAsset = (userLogin, repoName, branchName, assetPath) => {\n    navigate(`/${params.page || 'editor'}/${userLogin}/${repoName}/${branchName}/${assetPath}`);\n  };\n\n  return {\n    type,\n    user,\n    profile,\n    repository,\n    branch,\n    asset,\n    params,\n    updateBranch,\n    navigateToUser,\n    navigateToDAK,\n    navigateToAsset,\n    navigate\n  };\n};\n\n/**\n * Hook specifically for DAK pages (DAK and Asset page types)\n */\nexport const useDAKParams = () => {\n  const pageParams = usePageParams();\n  \n  // Only throw error if page is fully loaded and type is not DAK/ASSET\n  // This prevents errors during initial loading or page type determination\n  if (!pageParams.loading && \n      pageParams.type !== PAGE_TYPES.DAK && \n      pageParams.type !== PAGE_TYPES.ASSET) {\n    throw new Error(`useDAKParams can only be used on DAK or Asset pages. Current page type: ${pageParams.type}`);\n  }\n\n  return {\n    user: pageParams.user,\n    profile: pageParams.profile,\n    repository: pageParams.repository,\n    branch: pageParams.branch,\n    asset: pageParams.asset,\n    updateBranch: pageParams.updateBranch,\n    navigate: pageParams.navigate\n  };\n};\n\n/**\n * Hook specifically for User pages\n */\nexport const useUserParams = () => {\n  const pageParams = usePageParams();\n  \n  if (pageParams.type !== PAGE_TYPES.USER) {\n    throw new Error('useUserParams can only be used on User pages');\n  }\n\n  return {\n    user: pageParams.user,\n    profile: pageParams.profile,\n    navigateToDAK: pageParams.navigateToDAK,\n    navigate: pageParams.navigate\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}