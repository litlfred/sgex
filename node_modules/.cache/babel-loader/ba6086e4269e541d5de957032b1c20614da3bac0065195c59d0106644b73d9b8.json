{"ast":null,"code":"import inherits from 'inherits-browser';\nimport CoreModule from './core';\nimport DrilldownModdule from './features/drilldown';\nimport OverlaysModule from 'diagram-js/lib/features/overlays';\nimport SelectionModule from 'diagram-js/lib/features/selection';\nimport TranslateModule from 'diagram-js/lib/i18n/translate';\nimport BaseViewer from './BaseViewer';\n\n/**\n * @typedef { import('./BaseViewer').BaseViewerOptions } BaseViewerOptions\n */\n\n/**\n * A viewer for BPMN 2.0 diagrams.\n *\n * Have a look at {@link bpmn-js/lib/NavigatedViewer} or {@link bpmn-js/lib/Modeler} for bundles that include\n * additional features.\n *\n *\n * ## Extending the Viewer\n *\n * In order to extend the viewer pass extension modules to bootstrap via the\n * `additionalModules` option. An extension module is an object that exposes\n * named services.\n *\n * The following example depicts the integration of a simple\n * logging component that integrates with interaction events:\n *\n *\n * ```javascript\n *\n * // logging component\n * function InteractionLogger(eventBus) {\n *   eventBus.on('element.hover', function(event) {\n *     console.log()\n *   })\n * }\n *\n * InteractionLogger.$inject = [ 'eventBus' ]; // minification save\n *\n * // extension module\n * var extensionModule = {\n *   __init__: [ 'interactionLogger' ],\n *   interactionLogger: [ 'type', InteractionLogger ]\n * };\n *\n * // extend the viewer\n * var bpmnViewer = new Viewer({ additionalModules: [ extensionModule ] });\n * bpmnViewer.importXML(...);\n * ```\n *\n * @template [ServiceMap=null]\n *\n * @extends BaseViewer<ServiceMap>\n *\n * @param {BaseViewerOptions} [options] The options to configure the viewer.\n */\nexport default function Viewer(options) {\n  BaseViewer.call(this, options);\n}\ninherits(Viewer, BaseViewer);\n\n// modules the viewer is composed of\nViewer.prototype._modules = [CoreModule, DrilldownModdule, OverlaysModule, SelectionModule, TranslateModule];\n\n// default moddle extensions the viewer is composed of\nViewer.prototype._moddleExtensions = {};","map":{"version":3,"names":["inherits","CoreModule","DrilldownModdule","OverlaysModule","SelectionModule","TranslateModule","BaseViewer","Viewer","options","call","prototype","_modules","_moddleExtensions"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/Viewer.js"],"sourcesContent":["import inherits from 'inherits-browser';\n\nimport CoreModule from './core';\nimport DrilldownModdule from './features/drilldown';\nimport OverlaysModule from 'diagram-js/lib/features/overlays';\nimport SelectionModule from 'diagram-js/lib/features/selection';\nimport TranslateModule from 'diagram-js/lib/i18n/translate';\n\nimport BaseViewer from './BaseViewer';\n\n\n/**\n * @typedef { import('./BaseViewer').BaseViewerOptions } BaseViewerOptions\n */\n\n/**\n * A viewer for BPMN 2.0 diagrams.\n *\n * Have a look at {@link bpmn-js/lib/NavigatedViewer} or {@link bpmn-js/lib/Modeler} for bundles that include\n * additional features.\n *\n *\n * ## Extending the Viewer\n *\n * In order to extend the viewer pass extension modules to bootstrap via the\n * `additionalModules` option. An extension module is an object that exposes\n * named services.\n *\n * The following example depicts the integration of a simple\n * logging component that integrates with interaction events:\n *\n *\n * ```javascript\n *\n * // logging component\n * function InteractionLogger(eventBus) {\n *   eventBus.on('element.hover', function(event) {\n *     console.log()\n *   })\n * }\n *\n * InteractionLogger.$inject = [ 'eventBus' ]; // minification save\n *\n * // extension module\n * var extensionModule = {\n *   __init__: [ 'interactionLogger' ],\n *   interactionLogger: [ 'type', InteractionLogger ]\n * };\n *\n * // extend the viewer\n * var bpmnViewer = new Viewer({ additionalModules: [ extensionModule ] });\n * bpmnViewer.importXML(...);\n * ```\n *\n * @template [ServiceMap=null]\n *\n * @extends BaseViewer<ServiceMap>\n *\n * @param {BaseViewerOptions} [options] The options to configure the viewer.\n */\nexport default function Viewer(options) {\n  BaseViewer.call(this, options);\n}\n\ninherits(Viewer, BaseViewer);\n\n// modules the viewer is composed of\nViewer.prototype._modules = [\n  CoreModule,\n  DrilldownModdule,\n  OverlaysModule,\n  SelectionModule,\n  TranslateModule\n];\n\n// default moddle extensions the viewer is composed of\nViewer.prototype._moddleExtensions = {};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,kBAAkB;AAEvC,OAAOC,UAAU,MAAM,QAAQ;AAC/B,OAAOC,gBAAgB,MAAM,sBAAsB;AACnD,OAAOC,cAAc,MAAM,kCAAkC;AAC7D,OAAOC,eAAe,MAAM,mCAAmC;AAC/D,OAAOC,eAAe,MAAM,+BAA+B;AAE3D,OAAOC,UAAU,MAAM,cAAc;;AAGrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,MAAMA,CAACC,OAAO,EAAE;EACtCF,UAAU,CAACG,IAAI,CAAC,IAAI,EAAED,OAAO,CAAC;AAChC;AAEAR,QAAQ,CAACO,MAAM,EAAED,UAAU,CAAC;;AAE5B;AACAC,MAAM,CAACG,SAAS,CAACC,QAAQ,GAAG,CAC1BV,UAAU,EACVC,gBAAgB,EAChBC,cAAc,EACdC,eAAe,EACfC,eAAe,CAChB;;AAED;AACAE,MAAM,CAACG,SAAS,CAACE,iBAAiB,GAAG,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}