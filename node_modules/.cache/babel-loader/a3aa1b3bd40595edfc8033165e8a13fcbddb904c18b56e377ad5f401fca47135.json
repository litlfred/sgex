{"ast":null,"code":"import i18n from'i18next';import{initReactI18next}from'react-i18next';import LanguageDetector from'i18next-browser-languagedetector';import HttpApi from'i18next-http-backend';// Import translation resources directly for now\n// This can be replaced with HTTP backend for .po files in production\nimport enTranslations from'./locales/en_US/translation.json';import frTranslations from'./locales/fr_FR/translation.json';import esTranslations from'./locales/es_ES/translation.json';const resources={'en-US':{translation:enTranslations},'fr-FR':{translation:frTranslations},'es-ES':{translation:esTranslations}};i18n// Load translation using http backend for .po files\n// In production, this can load from /locales/{lng}/{ns}.po\n.use(HttpApi)// Detect user language\n.use(LanguageDetector)// Pass the i18n instance to react-i18next\n.use(initReactI18next)// Initialize i18next\n.init({// Use direct resources for now, can be replaced with backend\nresources,// Default language\nlng:'en-US',fallbackLng:'en-US',// Allowed languages\nsupportedLngs:['en-US','fr-FR','es-ES'],// Language detection options\ndetection:{// Order of language detection methods\norder:['localStorage','sessionStorage','navigator','htmlTag'],// Cache user language\ncaches:['localStorage','sessionStorage'],// Only detect languages from supported list\ncheckWhitelist:true},// Backend options (for .po file loading in production)\nbackend:{loadPath:'/sgex/locales/{{lng}}/{{ns}}.json',// Path to translation files\naddPath:'/sgex/locales/add/{{lng}}/{{ns}}',// Path to save missing translations\n// Custom .po file parsing can be added here\nparse:function(data){try{return JSON.parse(data);}catch(error){console.error('Failed to parse translation data:',error);return{};}}},interpolation:{escapeValue:false,// React already escapes values\nformatSeparator:','},// React options\nreact:{useSuspense:false// Set to false to avoid suspense mode for easier integration\n},// Debug mode (disable in production)\ndebug:process.env.NODE_ENV==='development',// Namespace and key separator\nns:['translation'],defaultNS:'translation',keySeparator:'.',nsSeparator:':',// Return key if translation is missing (useful for development)\nreturnNull:false,returnEmptyString:false,returnObjects:false,// Save missing keys (useful for development)\nsaveMissing:process.env.NODE_ENV==='development',// Update missing keys\nupdateMissing:process.env.NODE_ENV==='development',// Pluralization\npluralSeparator:'_',contextSeparator:'_'});export default i18n;","map":{"version":3,"names":["i18n","initReactI18next","LanguageDetector","HttpApi","enTranslations","frTranslations","esTranslations","resources","translation","use","init","lng","fallbackLng","supportedLngs","detection","order","caches","checkWhitelist","backend","loadPath","addPath","parse","data","JSON","error","console","interpolation","escapeValue","formatSeparator","react","useSuspense","debug","process","env","NODE_ENV","ns","defaultNS","keySeparator","nsSeparator","returnNull","returnEmptyString","returnObjects","saveMissing","updateMissing","pluralSeparator","contextSeparator"],"sources":["/home/runner/work/sgex/sgex/src/i18n.js"],"sourcesContent":["import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport HttpApi from 'i18next-http-backend';\n\n// Import translation resources directly for now\n// This can be replaced with HTTP backend for .po files in production\nimport enTranslations from './locales/en_US/translation.json';\nimport frTranslations from './locales/fr_FR/translation.json';\nimport esTranslations from './locales/es_ES/translation.json';\n\nconst resources = {\n  'en-US': {\n    translation: enTranslations\n  },\n  'fr-FR': {\n    translation: frTranslations\n  },\n  'es-ES': {\n    translation: esTranslations\n  }\n};\n\ni18n\n  // Load translation using http backend for .po files\n  // In production, this can load from /locales/{lng}/{ns}.po\n  .use(HttpApi)\n  // Detect user language\n  .use(LanguageDetector)\n  // Pass the i18n instance to react-i18next\n  .use(initReactI18next)\n  // Initialize i18next\n  .init({\n    // Use direct resources for now, can be replaced with backend\n    resources,\n    \n    // Default language\n    lng: 'en-US',\n    fallbackLng: 'en-US',\n    \n    // Allowed languages\n    supportedLngs: ['en-US', 'fr-FR', 'es-ES'],\n    \n    // Language detection options\n    detection: {\n      // Order of language detection methods\n      order: ['localStorage', 'sessionStorage', 'navigator', 'htmlTag'],\n      \n      // Cache user language\n      caches: ['localStorage', 'sessionStorage'],\n      \n      // Only detect languages from supported list\n      checkWhitelist: true\n    },\n    \n    // Backend options (for .po file loading in production)\n    backend: {\n      loadPath: '/sgex/locales/{{lng}}/{{ns}}.json', // Path to translation files\n      addPath: '/sgex/locales/add/{{lng}}/{{ns}}', // Path to save missing translations\n      \n      // Custom .po file parsing can be added here\n      parse: function(data) {\n        try {\n          return JSON.parse(data);\n        } catch (error) {\n          console.error('Failed to parse translation data:', error);\n          return {};\n        }\n      }\n    },\n    \n    interpolation: {\n      escapeValue: false, // React already escapes values\n      formatSeparator: ','\n    },\n    \n    // React options\n    react: {\n      useSuspense: false // Set to false to avoid suspense mode for easier integration\n    },\n    \n    // Debug mode (disable in production)\n    debug: process.env.NODE_ENV === 'development',\n    \n    // Namespace and key separator\n    ns: ['translation'],\n    defaultNS: 'translation',\n    keySeparator: '.',\n    nsSeparator: ':',\n    \n    // Return key if translation is missing (useful for development)\n    returnNull: false,\n    returnEmptyString: false,\n    returnObjects: false,\n    \n    // Save missing keys (useful for development)\n    saveMissing: process.env.NODE_ENV === 'development',\n    \n    // Update missing keys\n    updateMissing: process.env.NODE_ENV === 'development',\n    \n    // Pluralization\n    pluralSeparator: '_',\n    contextSeparator: '_'\n  });\n\nexport default i18n;"],"mappings":"AAAA,MAAO,CAAAA,IAAI,KAAM,SAAS,CAC1B,OAASC,gBAAgB,KAAQ,eAAe,CAChD,MAAO,CAAAC,gBAAgB,KAAM,kCAAkC,CAC/D,MAAO,CAAAC,OAAO,KAAM,sBAAsB,CAE1C;AACA;AACA,MAAO,CAAAC,cAAc,KAAM,kCAAkC,CAC7D,MAAO,CAAAC,cAAc,KAAM,kCAAkC,CAC7D,MAAO,CAAAC,cAAc,KAAM,kCAAkC,CAE7D,KAAM,CAAAC,SAAS,CAAG,CAChB,OAAO,CAAE,CACPC,WAAW,CAAEJ,cACf,CAAC,CACD,OAAO,CAAE,CACPI,WAAW,CAAEH,cACf,CAAC,CACD,OAAO,CAAE,CACPG,WAAW,CAAEF,cACf,CACF,CAAC,CAEDN,IACE;AACA;AAAA,CACCS,GAAG,CAACN,OAAO,CACZ;AAAA,CACCM,GAAG,CAACP,gBAAgB,CACrB;AAAA,CACCO,GAAG,CAACR,gBAAgB,CACrB;AAAA,CACCS,IAAI,CAAC,CACJ;AACAH,SAAS,CAET;AACAI,GAAG,CAAE,OAAO,CACZC,WAAW,CAAE,OAAO,CAEpB;AACAC,aAAa,CAAE,CAAC,OAAO,CAAE,OAAO,CAAE,OAAO,CAAC,CAE1C;AACAC,SAAS,CAAE,CACT;AACAC,KAAK,CAAE,CAAC,cAAc,CAAE,gBAAgB,CAAE,WAAW,CAAE,SAAS,CAAC,CAEjE;AACAC,MAAM,CAAE,CAAC,cAAc,CAAE,gBAAgB,CAAC,CAE1C;AACAC,cAAc,CAAE,IAClB,CAAC,CAED;AACAC,OAAO,CAAE,CACPC,QAAQ,CAAE,mCAAmC,CAAE;AAC/CC,OAAO,CAAE,kCAAkC,CAAE;AAE7C;AACAC,KAAK,CAAE,QAAAA,CAASC,IAAI,CAAE,CACpB,GAAI,CACF,MAAO,CAAAC,IAAI,CAACF,KAAK,CAACC,IAAI,CAAC,CACzB,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzD,MAAO,CAAC,CAAC,CACX,CACF,CACF,CAAC,CAEDE,aAAa,CAAE,CACbC,WAAW,CAAE,KAAK,CAAE;AACpBC,eAAe,CAAE,GACnB,CAAC,CAED;AACAC,KAAK,CAAE,CACLC,WAAW,CAAE,KAAM;AACrB,CAAC,CAED;AACAC,KAAK,CAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,aAAa,CAE7C;AACAC,EAAE,CAAE,CAAC,aAAa,CAAC,CACnBC,SAAS,CAAE,aAAa,CACxBC,YAAY,CAAE,GAAG,CACjBC,WAAW,CAAE,GAAG,CAEhB;AACAC,UAAU,CAAE,KAAK,CACjBC,iBAAiB,CAAE,KAAK,CACxBC,aAAa,CAAE,KAAK,CAEpB;AACAC,WAAW,CAAEV,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,aAAa,CAEnD;AACAS,aAAa,CAAEX,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,aAAa,CAErD;AACAU,eAAe,CAAE,GAAG,CACpBC,gBAAgB,CAAE,GACpB,CAAC,CAAC,CAEJ,cAAe,CAAA7C,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}