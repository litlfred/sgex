{"ast":null,"code":"import inherits from 'inherits-browser';\nimport Ids from 'ids';\nimport BaseViewer from './BaseViewer';\n\n/**\n * @typedef {import('./BaseViewer').BaseViewerOptions} BaseViewerOptions\n * @typedef {import('./BaseViewer').ModdleElementsById} ModdleElementsById\n *\n * @typedef {import('./model/Types').ModdleElement} ModdleElement\n */\n\n/**\n * A base modeler for BPMN 2.0 diagrams.\n *\n * See {@link bpmn-js/lib/Modeler} for a fully-featured modeler.\n *\n * @template [ServiceMap=null]\n *\n * @extends BaseViewer<ServiceMap>\n *\n * @param {BaseViewerOptions} [options] The options to configure the modeler.\n */\nexport default function BaseModeler(options) {\n  BaseViewer.call(this, options);\n\n  // hook ID collection into the modeler\n  this.on('import.parse.complete', function (event) {\n    if (!event.error) {\n      this._collectIds(event.definitions, event.elementsById);\n    }\n  }, this);\n  this.on('diagram.destroy', function () {\n    this.get('moddle').ids.clear();\n  }, this);\n}\ninherits(BaseModeler, BaseViewer);\n\n/**\n * Create a moddle instance, attaching IDs to it.\n *\n * @param {BaseViewerOptions} options\n *\n * @return {Moddle}\n */\nBaseModeler.prototype._createModdle = function (options) {\n  var moddle = BaseViewer.prototype._createModdle.call(this, options);\n\n  // attach ids to moddle to be able to track and validated ids in the BPMN 2.0\n  // XML document tree\n  moddle.ids = new Ids([32, 36, 1]);\n  return moddle;\n};\n\n/**\n * Collect IDs processed during parsing of the definitions object.\n *\n * @param {ModdleElement} definitions\n * @param {ModdleElementsById} elementsById\n */\nBaseModeler.prototype._collectIds = function (definitions, elementsById) {\n  var moddle = definitions.$model,\n    ids = moddle.ids,\n    id;\n\n  // remove references from previous import\n  ids.clear();\n  for (id in elementsById) {\n    ids.claim(id, elementsById[id]);\n  }\n};","map":{"version":3,"names":["inherits","Ids","BaseViewer","BaseModeler","options","call","on","event","error","_collectIds","definitions","elementsById","get","ids","clear","prototype","_createModdle","moddle","$model","id","claim"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/BaseModeler.js"],"sourcesContent":["import inherits from 'inherits-browser';\n\nimport Ids from 'ids';\n\nimport BaseViewer from './BaseViewer';\n\n\n/**\n * @typedef {import('./BaseViewer').BaseViewerOptions} BaseViewerOptions\n * @typedef {import('./BaseViewer').ModdleElementsById} ModdleElementsById\n *\n * @typedef {import('./model/Types').ModdleElement} ModdleElement\n */\n\n/**\n * A base modeler for BPMN 2.0 diagrams.\n *\n * See {@link bpmn-js/lib/Modeler} for a fully-featured modeler.\n *\n * @template [ServiceMap=null]\n *\n * @extends BaseViewer<ServiceMap>\n *\n * @param {BaseViewerOptions} [options] The options to configure the modeler.\n */\nexport default function BaseModeler(options) {\n  BaseViewer.call(this, options);\n\n  // hook ID collection into the modeler\n  this.on('import.parse.complete', function(event) {\n    if (!event.error) {\n      this._collectIds(event.definitions, event.elementsById);\n    }\n  }, this);\n\n  this.on('diagram.destroy', function() {\n    this.get('moddle').ids.clear();\n  }, this);\n}\n\ninherits(BaseModeler, BaseViewer);\n\n\n/**\n * Create a moddle instance, attaching IDs to it.\n *\n * @param {BaseViewerOptions} options\n *\n * @return {Moddle}\n */\nBaseModeler.prototype._createModdle = function(options) {\n  var moddle = BaseViewer.prototype._createModdle.call(this, options);\n\n  // attach ids to moddle to be able to track and validated ids in the BPMN 2.0\n  // XML document tree\n  moddle.ids = new Ids([ 32, 36, 1 ]);\n\n  return moddle;\n};\n\n/**\n * Collect IDs processed during parsing of the definitions object.\n *\n * @param {ModdleElement} definitions\n * @param {ModdleElementsById} elementsById\n */\nBaseModeler.prototype._collectIds = function(definitions, elementsById) {\n\n  var moddle = definitions.$model,\n      ids = moddle.ids,\n      id;\n\n  // remove references from previous import\n  ids.clear();\n\n  for (id in elementsById) {\n    ids.claim(id, elementsById[ id ]);\n  }\n};\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,kBAAkB;AAEvC,OAAOC,GAAG,MAAM,KAAK;AAErB,OAAOC,UAAU,MAAM,cAAc;;AAGrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,WAAWA,CAACC,OAAO,EAAE;EAC3CF,UAAU,CAACG,IAAI,CAAC,IAAI,EAAED,OAAO,CAAC;;EAE9B;EACA,IAAI,CAACE,EAAE,CAAC,uBAAuB,EAAE,UAASC,KAAK,EAAE;IAC/C,IAAI,CAACA,KAAK,CAACC,KAAK,EAAE;MAChB,IAAI,CAACC,WAAW,CAACF,KAAK,CAACG,WAAW,EAAEH,KAAK,CAACI,YAAY,CAAC;IACzD;EACF,CAAC,EAAE,IAAI,CAAC;EAER,IAAI,CAACL,EAAE,CAAC,iBAAiB,EAAE,YAAW;IACpC,IAAI,CAACM,GAAG,CAAC,QAAQ,CAAC,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;EAChC,CAAC,EAAE,IAAI,CAAC;AACV;AAEAd,QAAQ,CAACG,WAAW,EAAED,UAAU,CAAC;;AAGjC;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,WAAW,CAACY,SAAS,CAACC,aAAa,GAAG,UAASZ,OAAO,EAAE;EACtD,IAAIa,MAAM,GAAGf,UAAU,CAACa,SAAS,CAACC,aAAa,CAACX,IAAI,CAAC,IAAI,EAAED,OAAO,CAAC;;EAEnE;EACA;EACAa,MAAM,CAACJ,GAAG,GAAG,IAAIZ,GAAG,CAAC,CAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAE,CAAC;EAEnC,OAAOgB,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAd,WAAW,CAACY,SAAS,CAACN,WAAW,GAAG,UAASC,WAAW,EAAEC,YAAY,EAAE;EAEtE,IAAIM,MAAM,GAAGP,WAAW,CAACQ,MAAM;IAC3BL,GAAG,GAAGI,MAAM,CAACJ,GAAG;IAChBM,EAAE;;EAEN;EACAN,GAAG,CAACC,KAAK,CAAC,CAAC;EAEX,KAAKK,EAAE,IAAIR,YAAY,EAAE;IACvBE,GAAG,CAACO,KAAK,CAACD,EAAE,EAAER,YAAY,CAAEQ,EAAE,CAAE,CAAC;EACnC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}