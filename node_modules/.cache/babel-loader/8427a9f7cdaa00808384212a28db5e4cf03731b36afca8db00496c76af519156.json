{"ast":null,"code":"import { some } from 'min-dash';\n\n/**\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('../../../model/Types').Parent} Parent\n * @typedef {import('../../../model/Types').Shape} Shape\n *\n * @typedef {import('../../../util/Types').Point} Point\n *\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * A handler that implements reversible appending of shapes\n * to a source shape.\n *\n * @param {Modeling} modeling\n */\nexport default function AppendShapeHandler(modeling) {\n  this._modeling = modeling;\n}\nAppendShapeHandler.$inject = ['modeling'];\n\n// api //////////////////////\n\n/**\n * Creates a new shape.\n *\n * @param {Object} context\n * @param {Partial<Shape>} context.shape The new shape.\n * @param {Element} context.source The element to which to append the new shape to.\n * @param {Parent} context.parent The parent.\n * @param {Point} context.position The position at which to create the new shape.\n */\nAppendShapeHandler.prototype.preExecute = function (context) {\n  var source = context.source;\n  if (!source) {\n    throw new Error('source required');\n  }\n  var target = context.target || source.parent,\n    shape = context.shape,\n    hints = context.hints || {};\n  shape = context.shape = this._modeling.createShape(shape, context.position, target, {\n    attach: hints.attach\n  });\n  context.shape = shape;\n};\nAppendShapeHandler.prototype.postExecute = function (context) {\n  var hints = context.hints || {};\n  if (!existsConnection(context.source, context.shape)) {\n    // create connection\n    if (hints.connectionTarget === context.source) {\n      this._modeling.connect(context.shape, context.source, context.connection);\n    } else {\n      this._modeling.connect(context.source, context.shape, context.connection);\n    }\n  }\n};\nfunction existsConnection(source, target) {\n  return some(source.outgoing, function (c) {\n    return c.target === target;\n  });\n}","map":{"version":3,"names":["some","AppendShapeHandler","modeling","_modeling","$inject","prototype","preExecute","context","source","Error","target","parent","shape","hints","createShape","position","attach","postExecute","existsConnection","connectionTarget","connect","connection","outgoing","c"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/modeling/cmd/AppendShapeHandler.js"],"sourcesContent":["import { some } from 'min-dash';\n\n/**\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('../../../model/Types').Parent} Parent\n * @typedef {import('../../../model/Types').Shape} Shape\n *\n * @typedef {import('../../../util/Types').Point} Point\n *\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * A handler that implements reversible appending of shapes\n * to a source shape.\n *\n * @param {Modeling} modeling\n */\nexport default function AppendShapeHandler(modeling) {\n  this._modeling = modeling;\n}\n\nAppendShapeHandler.$inject = [ 'modeling' ];\n\n\n// api //////////////////////\n\n\n/**\n * Creates a new shape.\n *\n * @param {Object} context\n * @param {Partial<Shape>} context.shape The new shape.\n * @param {Element} context.source The element to which to append the new shape to.\n * @param {Parent} context.parent The parent.\n * @param {Point} context.position The position at which to create the new shape.\n */\nAppendShapeHandler.prototype.preExecute = function(context) {\n\n  var source = context.source;\n\n  if (!source) {\n    throw new Error('source required');\n  }\n\n  var target = context.target || source.parent,\n      shape = context.shape,\n      hints = context.hints || {};\n\n  shape = context.shape =\n    this._modeling.createShape(\n      shape,\n      context.position,\n      target, { attach: hints.attach });\n\n  context.shape = shape;\n};\n\nAppendShapeHandler.prototype.postExecute = function(context) {\n  var hints = context.hints || {};\n\n  if (!existsConnection(context.source, context.shape)) {\n\n    // create connection\n    if (hints.connectionTarget === context.source) {\n      this._modeling.connect(context.shape, context.source, context.connection);\n    } else {\n      this._modeling.connect(context.source, context.shape, context.connection);\n    }\n  }\n};\n\n\nfunction existsConnection(source, target) {\n  return some(source.outgoing, function(c) {\n    return c.target === target;\n  });\n}"],"mappings":"AAAA,SAASA,IAAI,QAAQ,UAAU;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,kBAAkBA,CAACC,QAAQ,EAAE;EACnD,IAAI,CAACC,SAAS,GAAGD,QAAQ;AAC3B;AAEAD,kBAAkB,CAACG,OAAO,GAAG,CAAE,UAAU,CAAE;;AAG3C;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,kBAAkB,CAACI,SAAS,CAACC,UAAU,GAAG,UAASC,OAAO,EAAE;EAE1D,IAAIC,MAAM,GAAGD,OAAO,CAACC,MAAM;EAE3B,IAAI,CAACA,MAAM,EAAE;IACX,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA,IAAIC,MAAM,GAAGH,OAAO,CAACG,MAAM,IAAIF,MAAM,CAACG,MAAM;IACxCC,KAAK,GAAGL,OAAO,CAACK,KAAK;IACrBC,KAAK,GAAGN,OAAO,CAACM,KAAK,IAAI,CAAC,CAAC;EAE/BD,KAAK,GAAGL,OAAO,CAACK,KAAK,GACnB,IAAI,CAACT,SAAS,CAACW,WAAW,CACxBF,KAAK,EACLL,OAAO,CAACQ,QAAQ,EAChBL,MAAM,EAAE;IAAEM,MAAM,EAAEH,KAAK,CAACG;EAAO,CAAC,CAAC;EAErCT,OAAO,CAACK,KAAK,GAAGA,KAAK;AACvB,CAAC;AAEDX,kBAAkB,CAACI,SAAS,CAACY,WAAW,GAAG,UAASV,OAAO,EAAE;EAC3D,IAAIM,KAAK,GAAGN,OAAO,CAACM,KAAK,IAAI,CAAC,CAAC;EAE/B,IAAI,CAACK,gBAAgB,CAACX,OAAO,CAACC,MAAM,EAAED,OAAO,CAACK,KAAK,CAAC,EAAE;IAEpD;IACA,IAAIC,KAAK,CAACM,gBAAgB,KAAKZ,OAAO,CAACC,MAAM,EAAE;MAC7C,IAAI,CAACL,SAAS,CAACiB,OAAO,CAACb,OAAO,CAACK,KAAK,EAAEL,OAAO,CAACC,MAAM,EAAED,OAAO,CAACc,UAAU,CAAC;IAC3E,CAAC,MAAM;MACL,IAAI,CAAClB,SAAS,CAACiB,OAAO,CAACb,OAAO,CAACC,MAAM,EAAED,OAAO,CAACK,KAAK,EAAEL,OAAO,CAACc,UAAU,CAAC;IAC3E;EACF;AACF,CAAC;AAGD,SAASH,gBAAgBA,CAACV,MAAM,EAAEE,MAAM,EAAE;EACxC,OAAOV,IAAI,CAACQ,MAAM,CAACc,QAAQ,EAAE,UAASC,CAAC,EAAE;IACvC,OAAOA,CAAC,CAACb,MAAM,KAAKA,MAAM;EAC5B,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}