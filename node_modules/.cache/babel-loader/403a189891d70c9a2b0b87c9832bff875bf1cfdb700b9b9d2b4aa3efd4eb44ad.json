{"ast":null,"code":"/**\n * DAK Compliance Service\n * \n * Provides comprehensive validation for DAK components with support for error, warning, and info levels.\n * Designed to work in multiple environments: React client-side, command-line, and IDE integration.\n */import yaml from'js-yaml';import Ajv from'ajv';import addFormats from'ajv-formats';// Import schema as a module\nconst sushiConfigSchema=require('../schemas/sushi-config.json');class DAKComplianceService{constructor(){this.validators=new Map();this.initializeSchemaValidator();this.initializeDefaultValidators();}/**\n   * Initialize AJV schema validator for sushi-config.yaml\n   */initializeSchemaValidator(){this.ajv=new Ajv({allErrors:true,verbose:true});addFormats(this.ajv);this.sushiConfigValidator=this.ajv.compile(sushiConfigSchema);}/**\n   * Initialize default validators for common DAK file types\n   */initializeDefaultValidators(){// XML file validators (general)\nthis.addValidator('xml','xml-well-formed',{level:'error',description:'XML files must be well-formed',validator:this.validateXMLWellFormed.bind(this)});// BPMN file validators\nthis.addValidator('bpmn','xml-well-formed',{level:'error',description:'BPMN files must be well-formed XML',validator:this.validateXMLWellFormed.bind(this)});this.addValidator('bpmn','bpmn-namespace',{level:'error',description:'BPMN files must use correct BPMN 2.0 namespace',validator:this.validateBPMNNamespace.bind(this)});this.addValidator('bpmn','has-start-event',{level:'warning',description:'BPMN process should have at least one start event',validator:this.validateBPMNStartEvent.bind(this)});// DMN file validators\nthis.addValidator('dmn','xml-well-formed',{level:'error',description:'DMN files must be well-formed XML',validator:this.validateXMLWellFormed.bind(this)});this.addValidator('dmn','dmn-namespace',{level:'error',description:'DMN files must use correct DMN 1.3 namespace',validator:this.validateDMNNamespace.bind(this)});// JSON file validators\nthis.addValidator('json','json-valid',{level:'error',description:'JSON files must be valid JSON',validator:this.validateJSONSyntax.bind(this)});// FHIR resource validators\nthis.addValidator('json','fhir-resource-type',{level:'info',description:'FHIR resources should have valid resourceType',validator:this.validateFHIRResourceType.bind(this)});// General file validators\nthis.addValidator('*','file-size-limit',{level:'warning',description:'Files should be under 1MB for optimal performance',validator:this.validateFileSize.bind(this)});this.addValidator('*','filename-conventions',{level:'info',description:'Files should follow naming conventions',validator:this.validateFilenameConventions.bind(this)});// WHO SMART Guidelines specific validators\nthis.addValidator('yaml','sushi-config-valid',{level:'error',description:'sushi-config.yaml must be valid and contain required fields',validator:this.validateSushiConfig.bind(this)});}/**\n   * Add a new validator\n   */addValidator(fileType,validatorId,config){if(!this.validators.has(fileType)){this.validators.set(fileType,new Map());}this.validators.get(fileType).set(validatorId,config);}/**\n   * Remove a validator\n   */removeValidator(fileType,validatorId){if(this.validators.has(fileType)){this.validators.get(fileType).delete(validatorId);}}/**\n   * Validate a single file\n   */async validateFile(filePath,content){const results=[];const fileExtension=this.getFileExtension(filePath);const fileName=this.getFileName(filePath);// Get validators for this file type and universal validators\nconst typeValidators=this.validators.get(fileExtension)||new Map();const universalValidators=this.validators.get('*')||new Map();// Run type-specific validators\nfor(const[validatorId,config]of typeValidators){try{const result=await config.validator(filePath,content,fileName);if(result){results.push({validatorId,level:config.level,description:config.description,...result});}}catch(error){results.push({validatorId,level:'error',description:'Validator execution failed',message:error.message,filePath});}}// Run universal validators\nfor(const[validatorId,config]of universalValidators){try{const result=await config.validator(filePath,content,fileName);if(result){results.push({validatorId,level:config.level,description:config.description,...result});}}catch(error){results.push({validatorId,level:'error',description:'Validator execution failed',message:error.message,filePath});}}return results;}/**\n   * Validate entire staging ground\n   */async validateStagingGround(stagingGround){const results={summary:{error:0,warning:0,info:0},files:{},validatedAt:Date.now()};for(const file of stagingGround.files){const fileResults=await this.validateFile(file.path,file.content);results.files[file.path]=fileResults;// Update summary counts\nfileResults.forEach(result=>{if(result.level==='error')results.summary.error++;else if(result.level==='warning')results.summary.warning++;else if(result.level==='info')results.summary.info++;});}return results;}/**\n   * Check if staging ground can be saved (no error-level violations)\n   */async canSave(stagingGround){const validation=await this.validateStagingGround(stagingGround);return validation.summary.error===0;}// Validator implementations\nasync validateXMLWellFormed(filePath,content){try{const parser=new DOMParser();const doc=parser.parseFromString(content,'text/xml');const parserError=doc.querySelector('parsererror');if(parserError){return{message:'XML is not well-formed: '+parserError.textContent,filePath};}return null;}catch(error){return{message:'Failed to parse XML: '+error.message,filePath};}}async validateBPMNNamespace(filePath,content){if(!content.includes('xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"')){return{message:'BPMN file missing correct BPMN 2.0 namespace declaration',filePath,suggestion:'Add xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" to root element'};}return null;}async validateBPMNStartEvent(filePath,content){if(!content.includes('<startEvent')&&!content.includes('<bpmn:startEvent')){return{message:'BPMN process should contain at least one start event',filePath,suggestion:'Add a start event to begin the process flow'};}return null;}async validateDMNNamespace(filePath,content){if(!content.includes('xmlns:dmn=\"https://www.omg.org/spec/DMN/20191111/MODEL/\"')){return{message:'DMN file missing correct DMN 1.3 namespace declaration',filePath,suggestion:'Add xmlns:dmn=\"https://www.omg.org/spec/DMN/20191111/MODEL/\" to root element'};}return null;}async validateJSONSyntax(filePath,content){try{JSON.parse(content);return null;}catch(error){return{message:'Invalid JSON syntax: '+error.message,filePath};}}async validateFHIRResourceType(filePath,content){try{const json=JSON.parse(content);const validResourceTypes=['StructureDefinition','ValueSet','CodeSystem','ConceptMap','Questionnaire','PlanDefinition','ActivityDefinition','Measure','Library','ImplementationGuide','Bundle','Patient','Practitioner'];if(json.resourceType&&!validResourceTypes.includes(json.resourceType)){return{message:`Unknown FHIR resourceType: ${json.resourceType}`,filePath,suggestion:'Verify the resourceType is correct for FHIR R4'};}return null;}catch(error){// Not JSON, skip this validator\nreturn null;}}async validateFileSize(filePath,content){const sizeInBytes=new Blob([content]).size;const maxSize=1024*1024;// 1MB\nif(sizeInBytes>maxSize){return{message:`File size (${(sizeInBytes/1024/1024).toFixed(1)}MB) exceeds recommended limit of 1MB`,filePath,suggestion:'Consider breaking large files into smaller components'};}return null;}async validateFilenameConventions(filePath,content){const fileName=this.getFileName(filePath);const issues=[];// Check for spaces in filename\nif(fileName.includes(' ')){issues.push('avoid spaces in filenames');}// Check for special characters\nif(/[<>:\"|?*]/.test(fileName)){issues.push('avoid special characters (<>:\"|?*)');}// Check for very long names\nif(fileName.length>100){issues.push('filename is very long (>100 characters)');}if(issues.length>0){return{message:`Filename convention issues: ${issues.join(', ')}`,filePath,suggestion:'Use lowercase letters, numbers, hyphens, and underscores'};}return null;}async validateSushiConfig(filePath,content){if(!filePath.endsWith('sushi-config.yaml')){return null;}try{// Parse YAML content\nlet parsedConfig;try{parsedConfig=yaml.load(content);}catch(yamlError){return{message:`Invalid YAML syntax: ${yamlError.message}`,filePath,suggestion:'Fix YAML syntax errors and ensure proper indentation'};}if(!parsedConfig||typeof parsedConfig!=='object'){return{message:'sushi-config.yaml must contain a valid YAML object',filePath,suggestion:'Ensure the file contains proper YAML object structure'};}// Validate against JSON schema\nconst isValid=this.sushiConfigValidator(parsedConfig);if(!isValid){const errors=this.sushiConfigValidator.errors;const errorMessages=errors.map(error=>{var _error$params,_error$params2;const field=error.instancePath?error.instancePath.replace('/',''):((_error$params=error.params)===null||_error$params===void 0?void 0:_error$params.missingProperty)||'root';let message=`${field}: ${error.message}`;if((_error$params2=error.params)!==null&&_error$params2!==void 0&&_error$params2.allowedValues){message+=` (allowed: ${error.params.allowedValues.join(', ')})`;}return message;});return{message:`sushi-config.yaml validation errors: ${errorMessages.join('; ')}`,filePath,suggestion:'Review the sushi-config.yaml specification at https://fshschool.org/docs/sushi/configuration/',details:errors};}// Additional WHO SMART Guidelines specific validation\nconst whoValidation=this.validateWHOSmartGuidelines(parsedConfig);if(whoValidation){return whoValidation;}return null;}catch(error){return{message:'Failed to validate sushi-config.yaml: '+error.message,filePath,suggestion:'Check file format and content structure'};}}/**\n   * Additional validation for WHO SMART Guidelines compliance\n   */validateWHOSmartGuidelines(config){const issues=[];// Check for smart.who.int.base dependency\nif(!config.dependencies||!config.dependencies['smart.who.int.base']){issues.push('missing smart.who.int.base dependency (required for WHO DAK compliance)');}// Check canonical URL pattern for WHO guidelines\nif(config.canonical&&config.canonical.includes('smart.who.int')){if(!config.id.startsWith('smart.who.int')){issues.push('id should start with \"smart.who.int\" when using WHO canonical URL');}}// Check for required WHO metadata\nif(config.canonical&&config.canonical.includes('smart.who.int')){if(!config.publisher||!config.publisher.toLowerCase().includes('world health organization')){issues.push('publisher should include \"World Health Organization\" for WHO guidelines');}if(!config.jurisdiction||!Array.isArray(config.jurisdiction)){issues.push('jurisdiction should be specified for WHO guidelines');}}if(issues.length>0){return{message:`WHO SMART Guidelines compliance issues: ${issues.join(', ')}`,filePath:'sushi-config.yaml',suggestion:'Ensure compliance with WHO SMART Guidelines requirements'};}return null;}// Utility methods\ngetFileExtension(filePath){const parts=filePath.split('.');return parts.length>1?parts[parts.length-1].toLowerCase():'';}getFileName(filePath){return filePath.split('/').pop()||filePath;}/**\n   * Format validation results for display\n   */formatValidationResults(validation){const formatted={canSave:validation.summary.error===0,summary:validation.summary,files:[]};Object.entries(validation.files).forEach(_ref=>{let[filePath,results]=_ref;if(results.length>0){formatted.files.push({path:filePath,issues:results.map(result=>({level:result.level,message:result.message,description:result.description,suggestion:result.suggestion}))});}});return formatted;}/**\n   * Get validation summary for UI display\n   */getValidationSummary(validation){return{error:validation.summary.error,warning:validation.summary.warning,info:validation.summary.info,canSave:validation.summary.error===0,hasIssues:validation.summary.error+validation.summary.warning+validation.summary.info>0};}}// Create singleton instance\nconst dakComplianceService=new DAKComplianceService();export default dakComplianceService;","map":{"version":3,"names":["yaml","Ajv","addFormats","sushiConfigSchema","require","DAKComplianceService","constructor","validators","Map","initializeSchemaValidator","initializeDefaultValidators","ajv","allErrors","verbose","sushiConfigValidator","compile","addValidator","level","description","validator","validateXMLWellFormed","bind","validateBPMNNamespace","validateBPMNStartEvent","validateDMNNamespace","validateJSONSyntax","validateFHIRResourceType","validateFileSize","validateFilenameConventions","validateSushiConfig","fileType","validatorId","config","has","set","get","removeValidator","delete","validateFile","filePath","content","results","fileExtension","getFileExtension","fileName","getFileName","typeValidators","universalValidators","result","push","error","message","validateStagingGround","stagingGround","summary","warning","info","files","validatedAt","Date","now","file","fileResults","path","forEach","canSave","validation","parser","DOMParser","doc","parseFromString","parserError","querySelector","textContent","includes","suggestion","JSON","parse","json","validResourceTypes","resourceType","sizeInBytes","Blob","size","maxSize","toFixed","issues","test","length","join","endsWith","parsedConfig","load","yamlError","isValid","errors","errorMessages","map","_error$params","_error$params2","field","instancePath","replace","params","missingProperty","allowedValues","details","whoValidation","validateWHOSmartGuidelines","dependencies","canonical","id","startsWith","publisher","toLowerCase","jurisdiction","Array","isArray","parts","split","pop","formatValidationResults","formatted","Object","entries","_ref","getValidationSummary","hasIssues","dakComplianceService"],"sources":["/home/runner/work/sgex/sgex/src/services/dakComplianceService.js"],"sourcesContent":["/**\n * DAK Compliance Service\n * \n * Provides comprehensive validation for DAK components with support for error, warning, and info levels.\n * Designed to work in multiple environments: React client-side, command-line, and IDE integration.\n */\n\nimport yaml from 'js-yaml';\nimport Ajv from 'ajv';\nimport addFormats from 'ajv-formats';\n\n// Import schema as a module\nconst sushiConfigSchema = require('../schemas/sushi-config.json');\n\nclass DAKComplianceService {\n  constructor() {\n    this.validators = new Map();\n    this.initializeSchemaValidator();\n    this.initializeDefaultValidators();\n  }\n\n  /**\n   * Initialize AJV schema validator for sushi-config.yaml\n   */\n  initializeSchemaValidator() {\n    this.ajv = new Ajv({ allErrors: true, verbose: true });\n    addFormats(this.ajv);\n    this.sushiConfigValidator = this.ajv.compile(sushiConfigSchema);\n  }\n\n  /**\n   * Initialize default validators for common DAK file types\n   */\n  initializeDefaultValidators() {\n    // XML file validators (general)\n    this.addValidator('xml', 'xml-well-formed', {\n      level: 'error',\n      description: 'XML files must be well-formed',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    // BPMN file validators\n    this.addValidator('bpmn', 'xml-well-formed', {\n      level: 'error',\n      description: 'BPMN files must be well-formed XML',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    this.addValidator('bpmn', 'bpmn-namespace', {\n      level: 'error',\n      description: 'BPMN files must use correct BPMN 2.0 namespace',\n      validator: this.validateBPMNNamespace.bind(this)\n    });\n\n    this.addValidator('bpmn', 'has-start-event', {\n      level: 'warning',\n      description: 'BPMN process should have at least one start event',\n      validator: this.validateBPMNStartEvent.bind(this)\n    });\n\n    // DMN file validators\n    this.addValidator('dmn', 'xml-well-formed', {\n      level: 'error',\n      description: 'DMN files must be well-formed XML',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    this.addValidator('dmn', 'dmn-namespace', {\n      level: 'error',\n      description: 'DMN files must use correct DMN 1.3 namespace',\n      validator: this.validateDMNNamespace.bind(this)\n    });\n\n    // JSON file validators\n    this.addValidator('json', 'json-valid', {\n      level: 'error',\n      description: 'JSON files must be valid JSON',\n      validator: this.validateJSONSyntax.bind(this)\n    });\n\n    // FHIR resource validators\n    this.addValidator('json', 'fhir-resource-type', {\n      level: 'info',\n      description: 'FHIR resources should have valid resourceType',\n      validator: this.validateFHIRResourceType.bind(this)\n    });\n\n    // General file validators\n    this.addValidator('*', 'file-size-limit', {\n      level: 'warning',\n      description: 'Files should be under 1MB for optimal performance',\n      validator: this.validateFileSize.bind(this)\n    });\n\n    this.addValidator('*', 'filename-conventions', {\n      level: 'info',\n      description: 'Files should follow naming conventions',\n      validator: this.validateFilenameConventions.bind(this)\n    });\n\n    // WHO SMART Guidelines specific validators\n    this.addValidator('yaml', 'sushi-config-valid', {\n      level: 'error',\n      description: 'sushi-config.yaml must be valid and contain required fields',\n      validator: this.validateSushiConfig.bind(this)\n    });\n  }\n\n  /**\n   * Add a new validator\n   */\n  addValidator(fileType, validatorId, config) {\n    if (!this.validators.has(fileType)) {\n      this.validators.set(fileType, new Map());\n    }\n    this.validators.get(fileType).set(validatorId, config);\n  }\n\n  /**\n   * Remove a validator\n   */\n  removeValidator(fileType, validatorId) {\n    if (this.validators.has(fileType)) {\n      this.validators.get(fileType).delete(validatorId);\n    }\n  }\n\n  /**\n   * Validate a single file\n   */\n  async validateFile(filePath, content) {\n    const results = [];\n    const fileExtension = this.getFileExtension(filePath);\n    const fileName = this.getFileName(filePath);\n\n    // Get validators for this file type and universal validators\n    const typeValidators = this.validators.get(fileExtension) || new Map();\n    const universalValidators = this.validators.get('*') || new Map();\n\n    // Run type-specific validators\n    for (const [validatorId, config] of typeValidators) {\n      try {\n        const result = await config.validator(filePath, content, fileName);\n        if (result) {\n          results.push({\n            validatorId,\n            level: config.level,\n            description: config.description,\n            ...result\n          });\n        }\n      } catch (error) {\n        results.push({\n          validatorId,\n          level: 'error',\n          description: 'Validator execution failed',\n          message: error.message,\n          filePath\n        });\n      }\n    }\n\n    // Run universal validators\n    for (const [validatorId, config] of universalValidators) {\n      try {\n        const result = await config.validator(filePath, content, fileName);\n        if (result) {\n          results.push({\n            validatorId,\n            level: config.level,\n            description: config.description,\n            ...result\n          });\n        }\n      } catch (error) {\n        results.push({\n          validatorId,\n          level: 'error',\n          description: 'Validator execution failed',\n          message: error.message,\n          filePath\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Validate entire staging ground\n   */\n  async validateStagingGround(stagingGround) {\n    const results = {\n      summary: { error: 0, warning: 0, info: 0 },\n      files: {},\n      validatedAt: Date.now()\n    };\n\n    for (const file of stagingGround.files) {\n      const fileResults = await this.validateFile(file.path, file.content);\n      results.files[file.path] = fileResults;\n\n      // Update summary counts\n      fileResults.forEach(result => {\n        if (result.level === 'error') results.summary.error++;\n        else if (result.level === 'warning') results.summary.warning++;\n        else if (result.level === 'info') results.summary.info++;\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Check if staging ground can be saved (no error-level violations)\n   */\n  async canSave(stagingGround) {\n    const validation = await this.validateStagingGround(stagingGround);\n    return validation.summary.error === 0;\n  }\n\n  // Validator implementations\n\n  async validateXMLWellFormed(filePath, content) {\n    try {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, 'text/xml');\n      const parserError = doc.querySelector('parsererror');\n      \n      if (parserError) {\n        return {\n          message: 'XML is not well-formed: ' + parserError.textContent,\n          filePath\n        };\n      }\n      return null;\n    } catch (error) {\n      return {\n        message: 'Failed to parse XML: ' + error.message,\n        filePath\n      };\n    }\n  }\n\n  async validateBPMNNamespace(filePath, content) {\n    if (!content.includes('xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"')) {\n      return {\n        message: 'BPMN file missing correct BPMN 2.0 namespace declaration',\n        filePath,\n        suggestion: 'Add xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" to root element'\n      };\n    }\n    return null;\n  }\n\n  async validateBPMNStartEvent(filePath, content) {\n    if (!content.includes('<startEvent') && !content.includes('<bpmn:startEvent')) {\n      return {\n        message: 'BPMN process should contain at least one start event',\n        filePath,\n        suggestion: 'Add a start event to begin the process flow'\n      };\n    }\n    return null;\n  }\n\n  async validateDMNNamespace(filePath, content) {\n    if (!content.includes('xmlns:dmn=\"https://www.omg.org/spec/DMN/20191111/MODEL/\"')) {\n      return {\n        message: 'DMN file missing correct DMN 1.3 namespace declaration',\n        filePath,\n        suggestion: 'Add xmlns:dmn=\"https://www.omg.org/spec/DMN/20191111/MODEL/\" to root element'\n      };\n    }\n    return null;\n  }\n\n  async validateJSONSyntax(filePath, content) {\n    try {\n      JSON.parse(content);\n      return null;\n    } catch (error) {\n      return {\n        message: 'Invalid JSON syntax: ' + error.message,\n        filePath\n      };\n    }\n  }\n\n  async validateFHIRResourceType(filePath, content) {\n    try {\n      const json = JSON.parse(content);\n      const validResourceTypes = [\n        'StructureDefinition', 'ValueSet', 'CodeSystem', 'ConceptMap',\n        'Questionnaire', 'PlanDefinition', 'ActivityDefinition', 'Measure',\n        'Library', 'ImplementationGuide', 'Bundle', 'Patient', 'Practitioner'\n      ];\n\n      if (json.resourceType && !validResourceTypes.includes(json.resourceType)) {\n        return {\n          message: `Unknown FHIR resourceType: ${json.resourceType}`,\n          filePath,\n          suggestion: 'Verify the resourceType is correct for FHIR R4'\n        };\n      }\n      return null;\n    } catch (error) {\n      // Not JSON, skip this validator\n      return null;\n    }\n  }\n\n  async validateFileSize(filePath, content) {\n    const sizeInBytes = new Blob([content]).size;\n    const maxSize = 1024 * 1024; // 1MB\n\n    if (sizeInBytes > maxSize) {\n      return {\n        message: `File size (${(sizeInBytes / 1024 / 1024).toFixed(1)}MB) exceeds recommended limit of 1MB`,\n        filePath,\n        suggestion: 'Consider breaking large files into smaller components'\n      };\n    }\n    return null;\n  }\n\n  async validateFilenameConventions(filePath, content) {\n    const fileName = this.getFileName(filePath);\n    const issues = [];\n\n    // Check for spaces in filename\n    if (fileName.includes(' ')) {\n      issues.push('avoid spaces in filenames');\n    }\n\n    // Check for special characters\n    if (/[<>:\"|?*]/.test(fileName)) {\n      issues.push('avoid special characters (<>:\"|?*)');\n    }\n\n    // Check for very long names\n    if (fileName.length > 100) {\n      issues.push('filename is very long (>100 characters)');\n    }\n\n    if (issues.length > 0) {\n      return {\n        message: `Filename convention issues: ${issues.join(', ')}`,\n        filePath,\n        suggestion: 'Use lowercase letters, numbers, hyphens, and underscores'\n      };\n    }\n    return null;\n  }\n\n  async validateSushiConfig(filePath, content) {\n    if (!filePath.endsWith('sushi-config.yaml')) {\n      return null;\n    }\n\n    try {\n      // Parse YAML content\n      let parsedConfig;\n      try {\n        parsedConfig = yaml.load(content);\n      } catch (yamlError) {\n        return {\n          message: `Invalid YAML syntax: ${yamlError.message}`,\n          filePath,\n          suggestion: 'Fix YAML syntax errors and ensure proper indentation'\n        };\n      }\n\n      if (!parsedConfig || typeof parsedConfig !== 'object') {\n        return {\n          message: 'sushi-config.yaml must contain a valid YAML object',\n          filePath,\n          suggestion: 'Ensure the file contains proper YAML object structure'\n        };\n      }\n\n      // Validate against JSON schema\n      const isValid = this.sushiConfigValidator(parsedConfig);\n      \n      if (!isValid) {\n        const errors = this.sushiConfigValidator.errors;\n        const errorMessages = errors.map(error => {\n          const field = error.instancePath ? error.instancePath.replace('/', '') : error.params?.missingProperty || 'root';\n          let message = `${field}: ${error.message}`;\n          \n          if (error.params?.allowedValues) {\n            message += ` (allowed: ${error.params.allowedValues.join(', ')})`;\n          }\n          \n          return message;\n        });\n\n        return {\n          message: `sushi-config.yaml validation errors: ${errorMessages.join('; ')}`,\n          filePath,\n          suggestion: 'Review the sushi-config.yaml specification at https://fshschool.org/docs/sushi/configuration/',\n          details: errors\n        };\n      }\n\n      // Additional WHO SMART Guidelines specific validation\n      const whoValidation = this.validateWHOSmartGuidelines(parsedConfig);\n      if (whoValidation) {\n        return whoValidation;\n      }\n\n      return null;\n    } catch (error) {\n      return {\n        message: 'Failed to validate sushi-config.yaml: ' + error.message,\n        filePath,\n        suggestion: 'Check file format and content structure'\n      };\n    }\n  }\n\n  /**\n   * Additional validation for WHO SMART Guidelines compliance\n   */\n  validateWHOSmartGuidelines(config) {\n    const issues = [];\n\n    // Check for smart.who.int.base dependency\n    if (!config.dependencies || !config.dependencies['smart.who.int.base']) {\n      issues.push('missing smart.who.int.base dependency (required for WHO DAK compliance)');\n    }\n\n    // Check canonical URL pattern for WHO guidelines\n    if (config.canonical && config.canonical.includes('smart.who.int')) {\n      if (!config.id.startsWith('smart.who.int')) {\n        issues.push('id should start with \"smart.who.int\" when using WHO canonical URL');\n      }\n    }\n\n    // Check for required WHO metadata\n    if (config.canonical && config.canonical.includes('smart.who.int')) {\n      if (!config.publisher || !config.publisher.toLowerCase().includes('world health organization')) {\n        issues.push('publisher should include \"World Health Organization\" for WHO guidelines');\n      }\n\n      if (!config.jurisdiction || !Array.isArray(config.jurisdiction)) {\n        issues.push('jurisdiction should be specified for WHO guidelines');\n      }\n    }\n\n    if (issues.length > 0) {\n      return {\n        message: `WHO SMART Guidelines compliance issues: ${issues.join(', ')}`,\n        filePath: 'sushi-config.yaml',\n        suggestion: 'Ensure compliance with WHO SMART Guidelines requirements'\n      };\n    }\n\n    return null;\n  }\n\n  // Utility methods\n\n  getFileExtension(filePath) {\n    const parts = filePath.split('.');\n    return parts.length > 1 ? parts[parts.length - 1].toLowerCase() : '';\n  }\n\n  getFileName(filePath) {\n    return filePath.split('/').pop() || filePath;\n  }\n\n  /**\n   * Format validation results for display\n   */\n  formatValidationResults(validation) {\n    const formatted = {\n      canSave: validation.summary.error === 0,\n      summary: validation.summary,\n      files: []\n    };\n\n    Object.entries(validation.files).forEach(([filePath, results]) => {\n      if (results.length > 0) {\n        formatted.files.push({\n          path: filePath,\n          issues: results.map(result => ({\n            level: result.level,\n            message: result.message,\n            description: result.description,\n            suggestion: result.suggestion\n          }))\n        });\n      }\n    });\n\n    return formatted;\n  }\n\n  /**\n   * Get validation summary for UI display\n   */\n  getValidationSummary(validation) {\n    return {\n      error: validation.summary.error,\n      warning: validation.summary.warning,\n      info: validation.summary.info,\n      canSave: validation.summary.error === 0,\n      hasIssues: validation.summary.error + validation.summary.warning + validation.summary.info > 0\n    };\n  }\n}\n\n// Create singleton instance\nconst dakComplianceService = new DAKComplianceService();\n\nexport default dakComplianceService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}