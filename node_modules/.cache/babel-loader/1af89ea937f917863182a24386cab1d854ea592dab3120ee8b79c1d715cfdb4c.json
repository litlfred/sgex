{"ast":null,"code":"import inherits from 'inherits-browser';\nimport BaseModeling from 'diagram-js/lib/features/modeling/Modeling';\nimport UpdateModdlePropertiesHandler from './cmd/UpdateModdlePropertiesHandler';\nimport UpdatePropertiesHandler from './cmd/UpdatePropertiesHandler';\nimport UpdateCanvasRootHandler from './cmd/UpdateCanvasRootHandler';\nimport AddLaneHandler from './cmd/AddLaneHandler';\nimport SplitLaneHandler from './cmd/SplitLaneHandler';\nimport ResizeLaneHandler from './cmd/ResizeLaneHandler';\nimport UpdateFlowNodeRefsHandler from './cmd/UpdateFlowNodeRefsHandler';\nimport IdClaimHandler from './cmd/IdClaimHandler';\nimport SetColorHandler from './cmd/SetColorHandler';\nimport UpdateLabelHandler from '../label-editing/cmd/UpdateLabelHandler';\n\n/**\n * @typedef {import('../rules/BpmnRules').default} BpmnRules\n * @typedef {import('diagram-js/lib/command/CommandStack').default} CommandStack\n * @typedef {import('./ElementFactory').default} ElementFactory\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n *\n * @typedef {import('diagram-js/lib/features/modeling/Modeling').ModelingHints} ModelingHints\n *\n * @typedef {import('../../model/Types').Connection} Connection\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').Label} Label\n * @typedef {import('../../model/Types').Parent} Parent\n * @typedef {import('../../model/Types').Root} Root\n * @typedef {import('../../model/Types').Shape} Shape\n * @typedef {import('../../model/Types').ModdleElement} ModdleElement\n *\n * @typedef {import('diagram-js/lib/util/Types').Rect} Rect\n *\n * @typedef {import('../../util/Types').Colors} Colors\n *\n * @typedef { {\n *   removeShape?: boolean;\n * } } UpdateLabelHints\n */\n\n/**\n * The BPMN 2.0 modeling entry point.\n *\n * @template {Connection} [T=Connection]\n * @template {Element} [U=Element]\n * @template {Label} [V=Label]\n * @template {Parent} [W=Parent]\n * @template {Shape} [X=Shape]\n *\n * @extends {BaseModeling<T, U, V, W, X>}\n *\n * @param {EventBus} eventBus\n * @param {ElementFactory} elementFactory\n * @param {CommandStack} commandStack\n * @param {BpmnRules} bpmnRules\n */\nexport default function Modeling(eventBus, elementFactory, commandStack, bpmnRules) {\n  BaseModeling.call(this, eventBus, elementFactory, commandStack);\n  this._bpmnRules = bpmnRules;\n}\ninherits(Modeling, BaseModeling);\nModeling.$inject = ['eventBus', 'elementFactory', 'commandStack', 'bpmnRules'];\nModeling.prototype.getHandlers = function () {\n  var handlers = BaseModeling.prototype.getHandlers.call(this);\n  handlers['element.updateModdleProperties'] = UpdateModdlePropertiesHandler;\n  handlers['element.updateProperties'] = UpdatePropertiesHandler;\n  handlers['canvas.updateRoot'] = UpdateCanvasRootHandler;\n  handlers['lane.add'] = AddLaneHandler;\n  handlers['lane.resize'] = ResizeLaneHandler;\n  handlers['lane.split'] = SplitLaneHandler;\n  handlers['lane.updateRefs'] = UpdateFlowNodeRefsHandler;\n  handlers['id.updateClaim'] = IdClaimHandler;\n  handlers['element.setColor'] = SetColorHandler;\n  handlers['element.updateLabel'] = UpdateLabelHandler;\n  return handlers;\n};\n\n/**\n * Update an element's label.\n *\n * @param {Element} element The element.\n * @param {string} newLabel The new label.\n * @param {Rect} [newBounds] The optional bounds of the label.\n * @param {UpdateLabelHints} [hints] The optional hints.\n */\nModeling.prototype.updateLabel = function (element, newLabel, newBounds, hints) {\n  this._commandStack.execute('element.updateLabel', {\n    element: element,\n    newLabel: newLabel,\n    newBounds: newBounds,\n    hints: hints || {}\n  });\n};\n\n/**\n * @param {Element} source\n * @param {Element} target\n * @param {Partial<Connection>} [attrs]\n * @param {ModelingHints} [hints]\n *\n * @return {T}\n */\nModeling.prototype.connect = function (source, target, attrs, hints) {\n  var bpmnRules = this._bpmnRules;\n  if (!attrs) {\n    attrs = bpmnRules.canConnect(source, target);\n  }\n  if (!attrs) {\n    return;\n  }\n  return this.createConnection(source, target, attrs, source.parent, hints);\n};\n\n/**\n * Update a model element's properties.\n *\n * @param {Element} element The element.\n * @param {ModdleElement} moddleElement The model element.\n * @param {Object} properties The updated properties.\n */\nModeling.prototype.updateModdleProperties = function (element, moddleElement, properties) {\n  this._commandStack.execute('element.updateModdleProperties', {\n    element: element,\n    moddleElement: moddleElement,\n    properties: properties\n  });\n};\n\n/**\n * Update an element's properties.\n *\n * @param {Element} element The element.\n * @param {Object} properties The updated properties.\n */\nModeling.prototype.updateProperties = function (element, properties) {\n  this._commandStack.execute('element.updateProperties', {\n    element: element,\n    properties: properties\n  });\n};\n\n/**\n * Resize a lane.\n *\n * @param {Shape} laneShape The lane.\n * @param {Rect} newBounds The new bounds of the lane.\n * @param {boolean} [balanced] Wether to resize neighboring lanes.\n */\nModeling.prototype.resizeLane = function (laneShape, newBounds, balanced) {\n  this._commandStack.execute('lane.resize', {\n    shape: laneShape,\n    newBounds: newBounds,\n    balanced: balanced\n  });\n};\n\n/**\n * Add a lane.\n *\n * @param {Shape} targetLaneShape The shape to add the lane to.\n * @param {string} location The location.\n *\n * @return {Shape} The added lane.\n */\nModeling.prototype.addLane = function (targetLaneShape, location) {\n  var context = {\n    shape: targetLaneShape,\n    location: location\n  };\n  this._commandStack.execute('lane.add', context);\n  return context.newLane;\n};\n\n/**\n * Split a lane.\n *\n * @param {Shape} targetLane The lane to split.\n * @param {number} count The number of lanes to split the lane into. Must not\n * exceed the number of existing lanes.\n */\nModeling.prototype.splitLane = function (targetLane, count) {\n  this._commandStack.execute('lane.split', {\n    shape: targetLane,\n    count: count\n  });\n};\n\n/**\n * Turn a process into a collaboration.\n *\n * @return {Root} The root of the collaboration.\n */\nModeling.prototype.makeCollaboration = function () {\n  var collaborationElement = this._create('root', {\n    type: 'bpmn:Collaboration'\n  });\n  var context = {\n    newRoot: collaborationElement\n  };\n  this._commandStack.execute('canvas.updateRoot', context);\n  return collaborationElement;\n};\n\n/**\n * Transform a collaboration into a process.\n *\n * @return {Root} The root of the process.\n */\nModeling.prototype.makeProcess = function () {\n  var processElement = this._create('root', {\n    type: 'bpmn:Process'\n  });\n  var context = {\n    newRoot: processElement\n  };\n  this._commandStack.execute('canvas.updateRoot', context);\n  return processElement;\n};\n\n/**\n * Update the referenced lanes of each flow node.\n *\n * @param {Shape[]} flowNodeShapes The flow nodes to update.\n * @param {Shape[]} laneShapes The lanes.\n */\nModeling.prototype.updateLaneRefs = function (flowNodeShapes, laneShapes) {\n  this._commandStack.execute('lane.updateRefs', {\n    flowNodeShapes: flowNodeShapes,\n    laneShapes: laneShapes\n  });\n};\n\n/**\n * Claim an ID.\n *\n * @param {string} id The ID to claim.\n * @param {ModdleElement} moddleElement The model element the ID is claimed for.\n */\nModeling.prototype.claimId = function (id, moddleElement) {\n  this._commandStack.execute('id.updateClaim', {\n    id: id,\n    element: moddleElement,\n    claiming: true\n  });\n};\n\n/**\n * Unclaim an ID.\n *\n * @param {string} id The ID to unclaim.\n * @param {ModdleElement} moddleElement The model element the ID is claimed for.\n */\nModeling.prototype.unclaimId = function (id, moddleElement) {\n  this._commandStack.execute('id.updateClaim', {\n    id: id,\n    element: moddleElement\n  });\n};\n\n/**\n * Set the color(s) of one or many elements.\n *\n * @param {Element[]} elements The elements to set the color(s) for.\n * @param {Colors} colors The color(s) to set.\n */\nModeling.prototype.setColor = function (elements, colors) {\n  if (!elements.length) {\n    elements = [elements];\n  }\n  this._commandStack.execute('element.setColor', {\n    elements: elements,\n    colors: colors\n  });\n};","map":{"version":3,"names":["inherits","BaseModeling","UpdateModdlePropertiesHandler","UpdatePropertiesHandler","UpdateCanvasRootHandler","AddLaneHandler","SplitLaneHandler","ResizeLaneHandler","UpdateFlowNodeRefsHandler","IdClaimHandler","SetColorHandler","UpdateLabelHandler","Modeling","eventBus","elementFactory","commandStack","bpmnRules","call","_bpmnRules","$inject","prototype","getHandlers","handlers","updateLabel","element","newLabel","newBounds","hints","_commandStack","execute","connect","source","target","attrs","canConnect","createConnection","parent","updateModdleProperties","moddleElement","properties","updateProperties","resizeLane","laneShape","balanced","shape","addLane","targetLaneShape","location","context","newLane","splitLane","targetLane","count","makeCollaboration","collaborationElement","_create","type","newRoot","makeProcess","processElement","updateLaneRefs","flowNodeShapes","laneShapes","claimId","id","claiming","unclaimId","setColor","elements","colors","length"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/modeling/Modeling.js"],"sourcesContent":["import inherits from 'inherits-browser';\n\nimport BaseModeling from 'diagram-js/lib/features/modeling/Modeling';\n\nimport UpdateModdlePropertiesHandler from './cmd/UpdateModdlePropertiesHandler';\nimport UpdatePropertiesHandler from './cmd/UpdatePropertiesHandler';\nimport UpdateCanvasRootHandler from './cmd/UpdateCanvasRootHandler';\nimport AddLaneHandler from './cmd/AddLaneHandler';\nimport SplitLaneHandler from './cmd/SplitLaneHandler';\nimport ResizeLaneHandler from './cmd/ResizeLaneHandler';\nimport UpdateFlowNodeRefsHandler from './cmd/UpdateFlowNodeRefsHandler';\nimport IdClaimHandler from './cmd/IdClaimHandler';\nimport SetColorHandler from './cmd/SetColorHandler';\n\nimport UpdateLabelHandler from '../label-editing/cmd/UpdateLabelHandler';\n\n/**\n * @typedef {import('../rules/BpmnRules').default} BpmnRules\n * @typedef {import('diagram-js/lib/command/CommandStack').default} CommandStack\n * @typedef {import('./ElementFactory').default} ElementFactory\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n *\n * @typedef {import('diagram-js/lib/features/modeling/Modeling').ModelingHints} ModelingHints\n *\n * @typedef {import('../../model/Types').Connection} Connection\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').Label} Label\n * @typedef {import('../../model/Types').Parent} Parent\n * @typedef {import('../../model/Types').Root} Root\n * @typedef {import('../../model/Types').Shape} Shape\n * @typedef {import('../../model/Types').ModdleElement} ModdleElement\n *\n * @typedef {import('diagram-js/lib/util/Types').Rect} Rect\n *\n * @typedef {import('../../util/Types').Colors} Colors\n *\n * @typedef { {\n *   removeShape?: boolean;\n * } } UpdateLabelHints\n */\n\n/**\n * The BPMN 2.0 modeling entry point.\n *\n * @template {Connection} [T=Connection]\n * @template {Element} [U=Element]\n * @template {Label} [V=Label]\n * @template {Parent} [W=Parent]\n * @template {Shape} [X=Shape]\n *\n * @extends {BaseModeling<T, U, V, W, X>}\n *\n * @param {EventBus} eventBus\n * @param {ElementFactory} elementFactory\n * @param {CommandStack} commandStack\n * @param {BpmnRules} bpmnRules\n */\nexport default function Modeling(\n    eventBus,\n    elementFactory,\n    commandStack,\n    bpmnRules\n) {\n\n  BaseModeling.call(this, eventBus, elementFactory, commandStack);\n\n  this._bpmnRules = bpmnRules;\n}\n\ninherits(Modeling, BaseModeling);\n\nModeling.$inject = [\n  'eventBus',\n  'elementFactory',\n  'commandStack',\n  'bpmnRules'\n];\n\n\nModeling.prototype.getHandlers = function() {\n  var handlers = BaseModeling.prototype.getHandlers.call(this);\n\n  handlers['element.updateModdleProperties'] = UpdateModdlePropertiesHandler;\n  handlers['element.updateProperties'] = UpdatePropertiesHandler;\n  handlers['canvas.updateRoot'] = UpdateCanvasRootHandler;\n  handlers['lane.add'] = AddLaneHandler;\n  handlers['lane.resize'] = ResizeLaneHandler;\n  handlers['lane.split'] = SplitLaneHandler;\n  handlers['lane.updateRefs'] = UpdateFlowNodeRefsHandler;\n  handlers['id.updateClaim'] = IdClaimHandler;\n  handlers['element.setColor'] = SetColorHandler;\n  handlers['element.updateLabel'] = UpdateLabelHandler;\n\n  return handlers;\n};\n\n/**\n * Update an element's label.\n *\n * @param {Element} element The element.\n * @param {string} newLabel The new label.\n * @param {Rect} [newBounds] The optional bounds of the label.\n * @param {UpdateLabelHints} [hints] The optional hints.\n */\nModeling.prototype.updateLabel = function(element, newLabel, newBounds, hints) {\n  this._commandStack.execute('element.updateLabel', {\n    element: element,\n    newLabel: newLabel,\n    newBounds: newBounds,\n    hints: hints || {}\n  });\n};\n\n/**\n * @param {Element} source\n * @param {Element} target\n * @param {Partial<Connection>} [attrs]\n * @param {ModelingHints} [hints]\n *\n * @return {T}\n */\nModeling.prototype.connect = function(source, target, attrs, hints) {\n\n  var bpmnRules = this._bpmnRules;\n\n  if (!attrs) {\n    attrs = bpmnRules.canConnect(source, target);\n  }\n\n  if (!attrs) {\n    return;\n  }\n\n  return this.createConnection(source, target, attrs, source.parent, hints);\n};\n\n/**\n * Update a model element's properties.\n *\n * @param {Element} element The element.\n * @param {ModdleElement} moddleElement The model element.\n * @param {Object} properties The updated properties.\n */\nModeling.prototype.updateModdleProperties = function(element, moddleElement, properties) {\n  this._commandStack.execute('element.updateModdleProperties', {\n    element: element,\n    moddleElement: moddleElement,\n    properties: properties\n  });\n};\n\n/**\n * Update an element's properties.\n *\n * @param {Element} element The element.\n * @param {Object} properties The updated properties.\n */\nModeling.prototype.updateProperties = function(element, properties) {\n  this._commandStack.execute('element.updateProperties', {\n    element: element,\n    properties: properties\n  });\n};\n\n/**\n * Resize a lane.\n *\n * @param {Shape} laneShape The lane.\n * @param {Rect} newBounds The new bounds of the lane.\n * @param {boolean} [balanced] Wether to resize neighboring lanes.\n */\nModeling.prototype.resizeLane = function(laneShape, newBounds, balanced) {\n  this._commandStack.execute('lane.resize', {\n    shape: laneShape,\n    newBounds: newBounds,\n    balanced: balanced\n  });\n};\n\n/**\n * Add a lane.\n *\n * @param {Shape} targetLaneShape The shape to add the lane to.\n * @param {string} location The location.\n *\n * @return {Shape} The added lane.\n */\nModeling.prototype.addLane = function(targetLaneShape, location) {\n  var context = {\n    shape: targetLaneShape,\n    location: location\n  };\n\n  this._commandStack.execute('lane.add', context);\n\n  return context.newLane;\n};\n\n/**\n * Split a lane.\n *\n * @param {Shape} targetLane The lane to split.\n * @param {number} count The number of lanes to split the lane into. Must not\n * exceed the number of existing lanes.\n */\nModeling.prototype.splitLane = function(targetLane, count) {\n  this._commandStack.execute('lane.split', {\n    shape: targetLane,\n    count: count\n  });\n};\n\n/**\n * Turn a process into a collaboration.\n *\n * @return {Root} The root of the collaboration.\n */\nModeling.prototype.makeCollaboration = function() {\n\n  var collaborationElement = this._create('root', {\n    type: 'bpmn:Collaboration'\n  });\n\n  var context = {\n    newRoot: collaborationElement\n  };\n\n  this._commandStack.execute('canvas.updateRoot', context);\n\n  return collaborationElement;\n};\n\n/**\n * Transform a collaboration into a process.\n *\n * @return {Root} The root of the process.\n */\nModeling.prototype.makeProcess = function() {\n\n  var processElement = this._create('root', {\n    type: 'bpmn:Process'\n  });\n\n  var context = {\n    newRoot: processElement\n  };\n\n  this._commandStack.execute('canvas.updateRoot', context);\n\n  return processElement;\n};\n\n/**\n * Update the referenced lanes of each flow node.\n *\n * @param {Shape[]} flowNodeShapes The flow nodes to update.\n * @param {Shape[]} laneShapes The lanes.\n */\nModeling.prototype.updateLaneRefs = function(flowNodeShapes, laneShapes) {\n\n  this._commandStack.execute('lane.updateRefs', {\n    flowNodeShapes: flowNodeShapes,\n    laneShapes: laneShapes\n  });\n};\n\n/**\n * Claim an ID.\n *\n * @param {string} id The ID to claim.\n * @param {ModdleElement} moddleElement The model element the ID is claimed for.\n */\nModeling.prototype.claimId = function(id, moddleElement) {\n  this._commandStack.execute('id.updateClaim', {\n    id: id,\n    element: moddleElement,\n    claiming: true\n  });\n};\n\n/**\n * Unclaim an ID.\n *\n * @param {string} id The ID to unclaim.\n * @param {ModdleElement} moddleElement The model element the ID is claimed for.\n */\nModeling.prototype.unclaimId = function(id, moddleElement) {\n  this._commandStack.execute('id.updateClaim', {\n    id: id,\n    element: moddleElement\n  });\n};\n\n/**\n * Set the color(s) of one or many elements.\n *\n * @param {Element[]} elements The elements to set the color(s) for.\n * @param {Colors} colors The color(s) to set.\n */\nModeling.prototype.setColor = function(elements, colors) {\n  if (!elements.length) {\n    elements = [ elements ];\n  }\n\n  this._commandStack.execute('element.setColor', {\n    elements: elements,\n    colors: colors\n  });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}