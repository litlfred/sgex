{"ast":null,"code":"/**\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('../../../model/Types').Shape} Shape\n *\n * @typedef {import('../../../util/Types').Point} Point\n *\n * @typedef {import('../Modeling').ModelingHints} ModelingHints\n *\n * @typedef {import('../../../core/Canvas').default} Canvas\n * @typedef {import('../../../layout/BaseLayouter').default} Layouter\n */\n\n/**\n * @param {Canvas} canvas\n * @param {Layouter} layouter\n */\nexport default function CreateConnectionHandler(canvas, layouter) {\n  this._canvas = canvas;\n  this._layouter = layouter;\n}\nCreateConnectionHandler.$inject = ['canvas', 'layouter'];\n\n// api //////////////////////\n\n/**\n * Creates a new connection between two elements.\n *\n * @param {Object} context\n * @param {Element} context.source The source.\n * @param {Element} context.target The target.\n * @param {Shape} context.parent The parent.\n * @param {number} [context.parentIndex] The optional index at which to add the\n * connection to the parent's children.\n * @param {ModelingHints} [context.hints] The optional hints.\n */\nCreateConnectionHandler.prototype.execute = function (context) {\n  var connection = context.connection,\n    source = context.source,\n    target = context.target,\n    parent = context.parent,\n    parentIndex = context.parentIndex,\n    hints = context.hints;\n  if (!source || !target) {\n    throw new Error('source and target required');\n  }\n  if (!parent) {\n    throw new Error('parent required');\n  }\n  connection.source = source;\n  connection.target = target;\n  if (!connection.waypoints) {\n    connection.waypoints = this._layouter.layoutConnection(connection, hints);\n  }\n\n  // add connection\n  this._canvas.addConnection(connection, parent, parentIndex);\n  return connection;\n};\nCreateConnectionHandler.prototype.revert = function (context) {\n  var connection = context.connection;\n  this._canvas.removeConnection(connection);\n  connection.source = null;\n  connection.target = null;\n  return connection;\n};","map":{"version":3,"names":["CreateConnectionHandler","canvas","layouter","_canvas","_layouter","$inject","prototype","execute","context","connection","source","target","parent","parentIndex","hints","Error","waypoints","layoutConnection","addConnection","revert","removeConnection"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/modeling/cmd/CreateConnectionHandler.js"],"sourcesContent":["/**\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('../../../model/Types').Shape} Shape\n *\n * @typedef {import('../../../util/Types').Point} Point\n *\n * @typedef {import('../Modeling').ModelingHints} ModelingHints\n *\n * @typedef {import('../../../core/Canvas').default} Canvas\n * @typedef {import('../../../layout/BaseLayouter').default} Layouter\n */\n\n/**\n * @param {Canvas} canvas\n * @param {Layouter} layouter\n */\nexport default function CreateConnectionHandler(canvas, layouter) {\n  this._canvas = canvas;\n  this._layouter = layouter;\n}\n\nCreateConnectionHandler.$inject = [ 'canvas', 'layouter' ];\n\n\n// api //////////////////////\n\n\n/**\n * Creates a new connection between two elements.\n *\n * @param {Object} context\n * @param {Element} context.source The source.\n * @param {Element} context.target The target.\n * @param {Shape} context.parent The parent.\n * @param {number} [context.parentIndex] The optional index at which to add the\n * connection to the parent's children.\n * @param {ModelingHints} [context.hints] The optional hints.\n */\nCreateConnectionHandler.prototype.execute = function(context) {\n\n  var connection = context.connection,\n      source = context.source,\n      target = context.target,\n      parent = context.parent,\n      parentIndex = context.parentIndex,\n      hints = context.hints;\n\n  if (!source || !target) {\n    throw new Error('source and target required');\n  }\n\n  if (!parent) {\n    throw new Error('parent required');\n  }\n\n  connection.source = source;\n  connection.target = target;\n\n  if (!connection.waypoints) {\n    connection.waypoints = this._layouter.layoutConnection(connection, hints);\n  }\n\n  // add connection\n  this._canvas.addConnection(connection, parent, parentIndex);\n\n  return connection;\n};\n\nCreateConnectionHandler.prototype.revert = function(context) {\n  var connection = context.connection;\n\n  this._canvas.removeConnection(connection);\n\n  connection.source = null;\n  connection.target = null;\n\n  return connection;\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAASA,uBAAuBA,CAACC,MAAM,EAAEC,QAAQ,EAAE;EAChE,IAAI,CAACC,OAAO,GAAGF,MAAM;EACrB,IAAI,CAACG,SAAS,GAAGF,QAAQ;AAC3B;AAEAF,uBAAuB,CAACK,OAAO,GAAG,CAAE,QAAQ,EAAE,UAAU,CAAE;;AAG1D;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,uBAAuB,CAACM,SAAS,CAACC,OAAO,GAAG,UAASC,OAAO,EAAE;EAE5D,IAAIC,UAAU,GAAGD,OAAO,CAACC,UAAU;IAC/BC,MAAM,GAAGF,OAAO,CAACE,MAAM;IACvBC,MAAM,GAAGH,OAAO,CAACG,MAAM;IACvBC,MAAM,GAAGJ,OAAO,CAACI,MAAM;IACvBC,WAAW,GAAGL,OAAO,CAACK,WAAW;IACjCC,KAAK,GAAGN,OAAO,CAACM,KAAK;EAEzB,IAAI,CAACJ,MAAM,IAAI,CAACC,MAAM,EAAE;IACtB,MAAM,IAAII,KAAK,CAAC,4BAA4B,CAAC;EAC/C;EAEA,IAAI,CAACH,MAAM,EAAE;IACX,MAAM,IAAIG,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEAN,UAAU,CAACC,MAAM,GAAGA,MAAM;EAC1BD,UAAU,CAACE,MAAM,GAAGA,MAAM;EAE1B,IAAI,CAACF,UAAU,CAACO,SAAS,EAAE;IACzBP,UAAU,CAACO,SAAS,GAAG,IAAI,CAACZ,SAAS,CAACa,gBAAgB,CAACR,UAAU,EAAEK,KAAK,CAAC;EAC3E;;EAEA;EACA,IAAI,CAACX,OAAO,CAACe,aAAa,CAACT,UAAU,EAAEG,MAAM,EAAEC,WAAW,CAAC;EAE3D,OAAOJ,UAAU;AACnB,CAAC;AAEDT,uBAAuB,CAACM,SAAS,CAACa,MAAM,GAAG,UAASX,OAAO,EAAE;EAC3D,IAAIC,UAAU,GAAGD,OAAO,CAACC,UAAU;EAEnC,IAAI,CAACN,OAAO,CAACiB,gBAAgB,CAACX,UAAU,CAAC;EAEzCA,UAAU,CAACC,MAAM,GAAG,IAAI;EACxBD,UAAU,CAACE,MAAM,GAAG,IAAI;EAExB,OAAOF,UAAU;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}