{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{useLocation,useNavigate}from'react-router-dom';import BpmnModeler from'bpmn-js/lib/Modeler';import{Octokit}from'@octokit/rest';import{AssetEditorLayout}from'./framework';import'./BPMNEditor.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const BPMNEditor=()=>{const location=useLocation();const navigate=useNavigate();const modelerRef=useRef(null);const containerRef=useRef(null);const{profile,repository,component}=location.state||{};const[bpmnFiles,setBpmnFiles]=useState([]);const[selectedFile,setSelectedFile]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[currentXmlContent,setCurrentXmlContent]=useState('');const[originalXmlContent,setOriginalXmlContent]=useState('');// Initialize BPMN modeler\nuseEffect(()=>{// Initialize modeler when container is available and file is selected\nconst initializeModeler=()=>{if(containerRef.current&&!modelerRef.current&&selectedFile){try{modelerRef.current=new BpmnModeler({container:containerRef.current});console.log('BPMN modeler initialized successfully');}catch(error){console.error('Failed to initialize BPMN modeler:',error);}}};// Try to initialize immediately if we have a selected file\nif(selectedFile){initializeModeler();// If container is not ready, wait a bit and try again\nconst timer=setTimeout(initializeModeler,100);return()=>clearTimeout(timer);}return()=>{if(modelerRef.current){try{modelerRef.current.destroy();}catch(error){console.error('Error destroying BPMN modeler:',error);}modelerRef.current=null;}};},[selectedFile]);// Load BPMN files from repository\nuseEffect(()=>{const loadBpmnFiles=async()=>{if(!profile||!repository){navigate('/');return;}try{setLoading(true);setError(null);// Use GitHub API if profile has token, otherwise use mock data\nif(profile.token){try{var _repository$owner;const octokit=new Octokit({auth:profile.token});const{data}=await octokit.rest.repos.getContent({owner:((_repository$owner=repository.owner)===null||_repository$owner===void 0?void 0:_repository$owner.login)||repository.full_name.split('/')[0],repo:repository.name,path:'input/business-processes'});// Filter for .bpmn files\nconst bpmnFiles=Array.isArray(data)?data.filter(file=>file.name.endsWith('.bpmn')):data.name.endsWith('.bpmn')?[data]:[];setBpmnFiles(bpmnFiles);setLoading(false);return;}catch(apiError){console.warn('GitHub API error, falling back to mock data:',apiError);// Fall through to mock data\n}}// Mock BPMN files for demonstration\nconst mockFiles=[{name:'patient-registration.bpmn',path:'input/business-processes/patient-registration.bpmn',sha:'abc123',size:2048,download_url:'https://raw.githubusercontent.com/...'},{name:'vaccination-workflow.bpmn',path:'input/business-processes/vaccination-workflow.bpmn',sha:'def456',size:3072,download_url:'https://raw.githubusercontent.com/...'},{name:'appointment-scheduling.bpmn',path:'input/business-processes/appointment-scheduling.bpmn',sha:'ghi789',size:1536,download_url:'https://raw.githubusercontent.com/...'}];setBpmnFiles(mockFiles);setLoading(false);}catch(err){console.error('Error loading BPMN files:',err);setError('Failed to load BPMN files from repository');setLoading(false);}};loadBpmnFiles();},[profile,repository,navigate]);// Track BPMN content changes\nuseEffect(()=>{if(modelerRef.current){const handleChanged=()=>{// Update current content when diagram changes\nmodelerRef.current.saveXML({format:true}).then(_ref=>{let{xml}=_ref;setCurrentXmlContent(xml);}).catch(error=>{console.error('Error getting XML content:',error);});};modelerRef.current.on('commandStack.changed',handleChanged);return()=>{if(modelerRef.current){modelerRef.current.off('commandStack.changed',handleChanged);}};}},[selectedFile]);// Handle save completion\nconst handleSave=async(content,saveType)=>{console.log(`BPMN diagram saved to ${saveType}`);if(saveType==='github'){// After GitHub save, update the original content\nsetOriginalXmlContent(content);}};// Custom save to GitHub function that exports XML and uses GitHub API\nconst customSaveToGitHub=async commitMessage=>{if(!commitMessage.trim()||!selectedFile||!modelerRef.current){return false;}try{// Export BPMN XML\nconst{xml}=await modelerRef.current.saveXML({format:true});// Use GitHub API if profile has token\nif(profile.token&&repository){var _repository$owner3;const octokit=new Octokit({auth:profile.token});// Get current file to get SHA for update\nlet currentSha=selectedFile.sha;try{var _repository$owner2;const{data:currentFile}=await octokit.rest.repos.getContent({owner:((_repository$owner2=repository.owner)===null||_repository$owner2===void 0?void 0:_repository$owner2.login)||repository.full_name.split('/')[0],repo:repository.name,path:selectedFile.path});currentSha=currentFile.sha;}catch(getError){console.warn('Could not get current file SHA, using provided SHA:',getError);}// Commit the updated BPMN file\nawait octokit.rest.repos.createOrUpdateFileContents({owner:((_repository$owner3=repository.owner)===null||_repository$owner3===void 0?void 0:_repository$owner3.login)||repository.full_name.split('/')[0],repo:repository.name,path:selectedFile.path,message:commitMessage,content:btoa(xml),// Base64 encode the XML content\nsha:currentSha,committer:{name:profile.name||profile.login,email:profile.email||`${profile.login}@users.noreply.github.com`}});console.log('BPMN file committed to GitHub successfully');return true;}// Fallback: return false for demo mode\nreturn false;}catch(error){console.error('Error saving BPMN to GitHub:',error);throw error;}};// Load selected BPMN file content\nconst loadBpmnFile=async file=>{try{setLoading(true);setError(null);setSelectedFile(file);// Wait for the next render cycle to ensure container is visible\nsetTimeout(async()=>{try{// Initialize modeler if not already done\nif(!modelerRef.current&&containerRef.current){modelerRef.current=new BpmnModeler({container:containerRef.current});console.log('BPMN modeler initialized for file loading');}// Ensure modeler is initialized\nif(!modelerRef.current){console.error('BPMN modeler not available');setError('BPMN editor not ready. Please try again.');setLoading(false);return;}// Load actual BPMN content from GitHub if available\nlet bpmnXml=null;if(profile.token&&file.download_url){try{const response=await fetch(file.download_url);if(response.ok){bpmnXml=await response.text();console.log('Loaded BPMN content from GitHub');}}catch(fetchError){console.warn('Could not fetch BPMN content from GitHub:',fetchError);}}// Use mock content if we couldn't load from GitHub\nif(!bpmnXml){bpmnXml=`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn:definitions xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" id=\"Definitions_1\" targetNamespace=\"http://bpmn.io/schema/bpmn\" exporter=\"bpmn-js (https://demo.bpmn.io)\" exporterVersion=\"17.11.1\">\n  <bpmn:process id=\"Process_${file.name.replace('.bpmn','')}\" isExecutable=\"true\">\n    <bpmn:startEvent id=\"StartEvent_1\">\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:task id=\"Task_1\" name=\"${file.name.replace('.bpmn','').replace('-',' ').toUpperCase()}\">\n      <bpmn:incoming>Flow_1</bpmn:incoming>\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\n    </bpmn:task>\n    <bpmn:endEvent id=\"EndEvent_1\">\n      <bpmn:incoming>Flow_2</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id=\"Flow_1\" sourceRef=\"StartEvent_1\" targetRef=\"Task_1\" />\n    <bpmn:sequenceFlow id=\"Flow_2\" sourceRef=\"Task_1\" targetRef=\"EndEvent_1\" />\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_${file.name.replace('.bpmn','')}\">\n      <bpmndi:BPMNShape id=\"_BPMNShape_StartEvent_2\" bpmnElement=\"StartEvent_1\">\n        <dc:Bounds x=\"179\" y=\"99\" width=\"36\" height=\"36\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Activity_1\" bpmnElement=\"Task_1\">\n        <dc:Bounds x=\"270\" y=\"77\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Event_1\" bpmnElement=\"EndEvent_1\">\n        <dc:Bounds x=\"432\" y=\"99\" width=\"36\" height=\"36\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id=\"Flow_1_di\" bpmnElement=\"Flow_1\">\n        <di:waypoint x=\"215\" y=\"117\" />\n        <di:waypoint x=\"270\" y=\"117\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_2_di\" bpmnElement=\"Flow_2\">\n        <di:waypoint x=\"370\" y=\"117\" />\n        <di:waypoint x=\"432\" y=\"117\" />\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>`;}// Load the BPMN diagram\nawait modelerRef.current.importXML(bpmnXml);// Set the content states\nsetOriginalXmlContent(bpmnXml);setCurrentXmlContent(bpmnXml);setLoading(false);}catch(err){console.error('Error loading BPMN file:',err);setError('Failed to load BPMN diagram');setLoading(false);}},100);}catch(err){console.error('Error initializing BPMN file load:',err);setError('Failed to initialize BPMN editor');setLoading(false);}};if(!profile||!repository||!component){navigate('/');return/*#__PURE__*/_jsx(\"div\",{children:\"Redirecting...\"});}// Check if there are changes in the BPMN diagram\nconst hasChanges=currentXmlContent!==originalXmlContent;return/*#__PURE__*/_jsx(AssetEditorLayout,{pageName:\"bpmn-editor\",file:selectedFile,repository:repository,branch:\"main\"// You might want to get this from props or state\n,content:currentXmlContent,originalContent:originalXmlContent,hasChanges:hasChanges,onSave:handleSave,saveButtonsPosition:\"top\"// Custom save function for GitHub to handle BPMN XML export\n,customSaveToGitHub:customSaveToGitHub,children:/*#__PURE__*/_jsx(\"div\",{className:\"bpmn-editor\",children:/*#__PURE__*/_jsx(\"div\",{className:\"editor-content\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bpmn-workspace\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"file-browser\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"file-browser-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"BPMN Files\"}),/*#__PURE__*/_jsx(\"span\",{className:\"file-path\",children:\"input/business-processes/\"})]}),loading&&!selectedFile?/*#__PURE__*/_jsxs(\"div\",{className:\"loading\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Loading BPMN files...\"})]}):error?/*#__PURE__*/_jsx(\"div\",{className:\"error\",children:/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u274C \",error]})}):/*#__PURE__*/_jsx(\"div\",{className:\"file-list\",children:bpmnFiles.map(file=>/*#__PURE__*/_jsxs(\"div\",{className:`file-item ${(selectedFile===null||selectedFile===void 0?void 0:selectedFile.sha)===file.sha?'selected':''}`,onClick:()=>loadBpmnFile(file),children:[/*#__PURE__*/_jsx(\"div\",{className:\"file-icon\",children:\"\\uD83D\\uDCCB\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"file-details\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"file-name\",children:file.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"file-size\",children:[(file.size/1024).toFixed(1),\" KB\"]})]})]},file.sha))})]}),/*#__PURE__*/_jsx(\"div\",{className:\"diagram-editor\",children:selectedFile?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"editor-toolbar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"toolbar-left\",children:/*#__PURE__*/_jsx(\"h4\",{children:selectedFile.name})})}),/*#__PURE__*/_jsx(\"div\",{className:\"bpmn-container\",ref:containerRef})]}):/*#__PURE__*/_jsx(\"div\",{className:\"diagram-placeholder\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"placeholder-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"placeholder-icon\",children:\"\\uD83D\\uDD04\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Select a BPMN File\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Choose a .bpmn file from the list to start editing business processes.\"})]})})})]})})})});};export default BPMNEditor;","map":{"version":3,"names":["React","useState","useEffect","useRef","useLocation","useNavigate","BpmnModeler","Octokit","AssetEditorLayout","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","BPMNEditor","location","navigate","modelerRef","containerRef","profile","repository","component","state","bpmnFiles","setBpmnFiles","selectedFile","setSelectedFile","loading","setLoading","error","setError","currentXmlContent","setCurrentXmlContent","originalXmlContent","setOriginalXmlContent","initializeModeler","current","container","console","log","timer","setTimeout","clearTimeout","destroy","loadBpmnFiles","token","_repository$owner","octokit","auth","data","rest","repos","getContent","owner","login","full_name","split","repo","name","path","Array","isArray","filter","file","endsWith","apiError","warn","mockFiles","sha","size","download_url","err","handleChanged","saveXML","format","then","_ref","xml","catch","on","off","handleSave","content","saveType","customSaveToGitHub","commitMessage","trim","_repository$owner3","currentSha","_repository$owner2","currentFile","getError","createOrUpdateFileContents","message","btoa","committer","email","loadBpmnFile","bpmnXml","response","fetch","ok","text","fetchError","replace","toUpperCase","importXML","children","hasChanges","pageName","branch","originalContent","onSave","saveButtonsPosition","className","map","onClick","toFixed","ref"],"sources":["/home/runner/work/sgex/sgex/src/components/BPMNEditor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport BpmnModeler from 'bpmn-js/lib/Modeler';\nimport { Octokit } from '@octokit/rest';\nimport { AssetEditorLayout } from './framework';\nimport './BPMNEditor.css';\n\nconst BPMNEditor = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const modelerRef = useRef(null);\n  const containerRef = useRef(null);\n  \n  const { profile, repository, component } = location.state || {};\n  \n  const [bpmnFiles, setBpmnFiles] = useState([]);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentXmlContent, setCurrentXmlContent] = useState('');\n  const [originalXmlContent, setOriginalXmlContent] = useState('');\n\n  // Initialize BPMN modeler\n  useEffect(() => {\n    // Initialize modeler when container is available and file is selected\n    const initializeModeler = () => {\n      if (containerRef.current && !modelerRef.current && selectedFile) {\n        try {\n          modelerRef.current = new BpmnModeler({\n            container: containerRef.current\n          });\n          console.log('BPMN modeler initialized successfully');\n        } catch (error) {\n          console.error('Failed to initialize BPMN modeler:', error);\n        }\n      }\n    };\n\n    // Try to initialize immediately if we have a selected file\n    if (selectedFile) {\n      initializeModeler();\n      \n      // If container is not ready, wait a bit and try again\n      const timer = setTimeout(initializeModeler, 100);\n      return () => clearTimeout(timer);\n    }\n\n    return () => {\n      if (modelerRef.current) {\n        try {\n          modelerRef.current.destroy();\n        } catch (error) {\n          console.error('Error destroying BPMN modeler:', error);\n        }\n        modelerRef.current = null;\n      }\n    };\n  }, [selectedFile]);\n\n  // Load BPMN files from repository\n  useEffect(() => {\n    const loadBpmnFiles = async () => {\n      if (!profile || !repository) {\n        navigate('/');\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Use GitHub API if profile has token, otherwise use mock data\n        if (profile.token) {\n          try {\n            const octokit = new Octokit({ auth: profile.token });\n            const { data } = await octokit.rest.repos.getContent({\n              owner: repository.owner?.login || repository.full_name.split('/')[0],\n              repo: repository.name,\n              path: 'input/business-processes'\n            });\n\n            // Filter for .bpmn files\n            const bpmnFiles = Array.isArray(data) \n              ? data.filter(file => file.name.endsWith('.bpmn'))\n              : data.name.endsWith('.bpmn') ? [data] : [];\n\n            setBpmnFiles(bpmnFiles);\n            setLoading(false);\n            return;\n          } catch (apiError) {\n            console.warn('GitHub API error, falling back to mock data:', apiError);\n            // Fall through to mock data\n          }\n        }\n\n        // Mock BPMN files for demonstration\n        const mockFiles = [\n          {\n            name: 'patient-registration.bpmn',\n            path: 'input/business-processes/patient-registration.bpmn',\n            sha: 'abc123',\n            size: 2048,\n            download_url: 'https://raw.githubusercontent.com/...'\n          },\n          {\n            name: 'vaccination-workflow.bpmn',\n            path: 'input/business-processes/vaccination-workflow.bpmn',\n            sha: 'def456',\n            size: 3072,\n            download_url: 'https://raw.githubusercontent.com/...'\n          },\n          {\n            name: 'appointment-scheduling.bpmn',\n            path: 'input/business-processes/appointment-scheduling.bpmn',\n            sha: 'ghi789',\n            size: 1536,\n            download_url: 'https://raw.githubusercontent.com/...'\n          }\n        ];\n\n        setBpmnFiles(mockFiles);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error loading BPMN files:', err);\n        setError('Failed to load BPMN files from repository');\n        setLoading(false);\n      }\n    };\n\n    loadBpmnFiles();\n  }, [profile, repository, navigate]);\n\n  // Track BPMN content changes\n  useEffect(() => {\n    if (modelerRef.current) {\n      const handleChanged = () => {\n        // Update current content when diagram changes\n        modelerRef.current.saveXML({ format: true })\n          .then(({ xml }) => {\n            setCurrentXmlContent(xml);\n          })\n          .catch(error => {\n            console.error('Error getting XML content:', error);\n          });\n      };\n\n      modelerRef.current.on('commandStack.changed', handleChanged);\n      \n      return () => {\n        if (modelerRef.current) {\n          modelerRef.current.off('commandStack.changed', handleChanged);\n        }\n      };\n    }\n  }, [selectedFile]);\n\n  // Handle save completion\n  const handleSave = async (content, saveType) => {\n    console.log(`BPMN diagram saved to ${saveType}`);\n    if (saveType === 'github') {\n      // After GitHub save, update the original content\n      setOriginalXmlContent(content);\n    }\n  };\n\n  // Custom save to GitHub function that exports XML and uses GitHub API\n  const customSaveToGitHub = async (commitMessage) => {\n    if (!commitMessage.trim() || !selectedFile || !modelerRef.current) {\n      return false;\n    }\n\n    try {\n      // Export BPMN XML\n      const { xml } = await modelerRef.current.saveXML({ format: true });\n\n      // Use GitHub API if profile has token\n      if (profile.token && repository) {\n        const octokit = new Octokit({ auth: profile.token });\n        \n        // Get current file to get SHA for update\n        let currentSha = selectedFile.sha;\n        try {\n          const { data: currentFile } = await octokit.rest.repos.getContent({\n            owner: repository.owner?.login || repository.full_name.split('/')[0],\n            repo: repository.name,\n            path: selectedFile.path\n          });\n          currentSha = currentFile.sha;\n        } catch (getError) {\n          console.warn('Could not get current file SHA, using provided SHA:', getError);\n        }\n\n        // Commit the updated BPMN file\n        await octokit.rest.repos.createOrUpdateFileContents({\n          owner: repository.owner?.login || repository.full_name.split('/')[0],\n          repo: repository.name,\n          path: selectedFile.path,\n          message: commitMessage,\n          content: btoa(xml), // Base64 encode the XML content\n          sha: currentSha,\n          committer: {\n            name: profile.name || profile.login,\n            email: profile.email || `${profile.login}@users.noreply.github.com`\n          }\n        });\n\n        console.log('BPMN file committed to GitHub successfully');\n        return true;\n      }\n\n      // Fallback: return false for demo mode\n      return false;\n    } catch (error) {\n      console.error('Error saving BPMN to GitHub:', error);\n      throw error;\n    }\n  };\n\n  // Load selected BPMN file content\n  const loadBpmnFile = async (file) => {\n    try {\n      setLoading(true);\n      setError(null);\n      setSelectedFile(file);\n\n      // Wait for the next render cycle to ensure container is visible\n      setTimeout(async () => {\n        try {\n          // Initialize modeler if not already done\n          if (!modelerRef.current && containerRef.current) {\n            modelerRef.current = new BpmnModeler({\n              container: containerRef.current\n            });\n            console.log('BPMN modeler initialized for file loading');\n          }\n\n          // Ensure modeler is initialized\n          if (!modelerRef.current) {\n            console.error('BPMN modeler not available');\n            setError('BPMN editor not ready. Please try again.');\n            setLoading(false);\n            return;\n          }\n\n          // Load actual BPMN content from GitHub if available\n          let bpmnXml = null;\n          if (profile.token && file.download_url) {\n            try {\n              const response = await fetch(file.download_url);\n              if (response.ok) {\n                bpmnXml = await response.text();\n                console.log('Loaded BPMN content from GitHub');\n              }\n            } catch (fetchError) {\n              console.warn('Could not fetch BPMN content from GitHub:', fetchError);\n            }\n          }\n\n          // Use mock content if we couldn't load from GitHub\n          if (!bpmnXml) {\n            bpmnXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn:definitions xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" id=\"Definitions_1\" targetNamespace=\"http://bpmn.io/schema/bpmn\" exporter=\"bpmn-js (https://demo.bpmn.io)\" exporterVersion=\"17.11.1\">\n  <bpmn:process id=\"Process_${file.name.replace('.bpmn', '')}\" isExecutable=\"true\">\n    <bpmn:startEvent id=\"StartEvent_1\">\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:task id=\"Task_1\" name=\"${file.name.replace('.bpmn', '').replace('-', ' ').toUpperCase()}\">\n      <bpmn:incoming>Flow_1</bpmn:incoming>\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\n    </bpmn:task>\n    <bpmn:endEvent id=\"EndEvent_1\">\n      <bpmn:incoming>Flow_2</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id=\"Flow_1\" sourceRef=\"StartEvent_1\" targetRef=\"Task_1\" />\n    <bpmn:sequenceFlow id=\"Flow_2\" sourceRef=\"Task_1\" targetRef=\"EndEvent_1\" />\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_${file.name.replace('.bpmn', '')}\">\n      <bpmndi:BPMNShape id=\"_BPMNShape_StartEvent_2\" bpmnElement=\"StartEvent_1\">\n        <dc:Bounds x=\"179\" y=\"99\" width=\"36\" height=\"36\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Activity_1\" bpmnElement=\"Task_1\">\n        <dc:Bounds x=\"270\" y=\"77\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Event_1\" bpmnElement=\"EndEvent_1\">\n        <dc:Bounds x=\"432\" y=\"99\" width=\"36\" height=\"36\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id=\"Flow_1_di\" bpmnElement=\"Flow_1\">\n        <di:waypoint x=\"215\" y=\"117\" />\n        <di:waypoint x=\"270\" y=\"117\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_2_di\" bpmnElement=\"Flow_2\">\n        <di:waypoint x=\"370\" y=\"117\" />\n        <di:waypoint x=\"432\" y=\"117\" />\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>`;\n          }\n\n          // Load the BPMN diagram\n          await modelerRef.current.importXML(bpmnXml);\n          \n          // Set the content states\n          setOriginalXmlContent(bpmnXml);\n          setCurrentXmlContent(bpmnXml);\n          \n          setLoading(false);\n        } catch (err) {\n          console.error('Error loading BPMN file:', err);\n          setError('Failed to load BPMN diagram');\n          setLoading(false);\n        }\n      }, 100);\n\n    } catch (err) {\n      console.error('Error initializing BPMN file load:', err);\n      setError('Failed to initialize BPMN editor');\n      setLoading(false);\n    }\n  };\n\n  if (!profile || !repository || !component) {\n    navigate('/');\n    return <div>Redirecting...</div>;\n  }\n\n  // Check if there are changes in the BPMN diagram\n  const hasChanges = currentXmlContent !== originalXmlContent;\n\n  return (\n    <AssetEditorLayout\n      pageName=\"bpmn-editor\"\n      file={selectedFile}\n      repository={repository}\n      branch=\"main\" // You might want to get this from props or state\n      content={currentXmlContent}\n      originalContent={originalXmlContent}\n      hasChanges={hasChanges}\n      onSave={handleSave}\n      saveButtonsPosition=\"top\"\n      // Custom save function for GitHub to handle BPMN XML export\n      customSaveToGitHub={customSaveToGitHub}\n    >\n      <div className=\"bpmn-editor\">\n        <div className=\"editor-content\">\n          <div className=\"bpmn-workspace\">\n            <div className=\"file-browser\">\n              <div className=\"file-browser-header\">\n                <h3>BPMN Files</h3>\n                <span className=\"file-path\">input/business-processes/</span>\n              </div>\n              \n              {loading && !selectedFile ? (\n                <div className=\"loading\">\n                  <div className=\"spinner\"></div>\n                  <p>Loading BPMN files...</p>\n                </div>\n              ) : error ? (\n                <div className=\"error\">\n                  <p>❌ {error}</p>\n                </div>\n              ) : (\n                <div className=\"file-list\">\n                  {bpmnFiles.map((file) => (\n                    <div \n                      key={file.sha}\n                      className={`file-item ${selectedFile?.sha === file.sha ? 'selected' : ''}`}\n                      onClick={() => loadBpmnFile(file)}\n                    >\n                      <div className=\"file-icon\">📋</div>\n                      <div className=\"file-details\">\n                        <div className=\"file-name\">{file.name}</div>\n                        <div className=\"file-size\">{(file.size / 1024).toFixed(1)} KB</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            <div className=\"diagram-editor\">\n              {selectedFile ? (\n                <>\n                  <div className=\"editor-toolbar\">\n                    <div className=\"toolbar-left\">\n                      <h4>{selectedFile.name}</h4>\n                    </div>\n                  </div>\n                  <div className=\"bpmn-container\" ref={containerRef}></div>\n                </>\n              ) : (\n                <div className=\"diagram-placeholder\">\n                  <div className=\"placeholder-content\">\n                    <div className=\"placeholder-icon\">🔄</div>\n                    <h3>Select a BPMN File</h3>\n                    <p>Choose a .bpmn file from the list to start editing business processes.</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </AssetEditorLayout>\n  );\n};\n\nexport default BPMNEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}