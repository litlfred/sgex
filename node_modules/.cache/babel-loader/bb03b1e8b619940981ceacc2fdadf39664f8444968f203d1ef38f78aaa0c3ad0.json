{"ast":null,"code":"/**\n * Branch Listing Cache Service\n * Manages caching of branch and PR preview data with 5-minute expiry\n */import logger from'../utils/logger.js';class BranchListingCacheService{constructor(){this.CACHE_KEY_PREFIX='sgex_branch_listing_cache_';this.CACHE_EXPIRY_MINUTES=5;// Cache expires after 5 minutes as per requirements\nthis.logger=logger.getLogger('BranchListingCacheService');this.logger.debug('BranchListingCacheService initialized',{cacheExpiryMinutes:this.CACHE_EXPIRY_MINUTES});}/**\n   * Generate cache key for branch listing data\n   */getCacheKey(owner,repo){return`${this.CACHE_KEY_PREFIX}${owner}_${repo}`;}/**\n   * Check if cached data is stale (older than 5 minutes)\n   */isStale(timestamp){const now=Date.now();const cacheAge=now-timestamp;const maxAge=this.CACHE_EXPIRY_MINUTES*60*1000;// 5 minutes in milliseconds\nreturn cacheAge>maxAge;}/**\n   * Get cached branch listing data (branches and PRs)\n   * Returns null if cache doesn't exist or is stale\n   */getCachedData(owner,repo){try{var _parsed$branches,_parsed$pullRequests;const cacheKey=this.getCacheKey(owner,repo);this.logger.cache('get',cacheKey);const cachedData=localStorage.getItem(cacheKey);if(!cachedData){this.logger.cache('miss',cacheKey,'No cached data found');return null;}const parsed=JSON.parse(cachedData);// Check if cache is stale\nif(this.isStale(parsed.timestamp)){// Remove stale cache\nthis.logger.cache('expired',cacheKey,{age:Date.now()-parsed.timestamp});localStorage.removeItem(cacheKey);return null;}this.logger.cache('hit',cacheKey,{branchCount:((_parsed$branches=parsed.branches)===null||_parsed$branches===void 0?void 0:_parsed$branches.length)||0,prCount:((_parsed$pullRequests=parsed.pullRequests)===null||_parsed$pullRequests===void 0?void 0:_parsed$pullRequests.length)||0,age:Date.now()-parsed.timestamp});return{branches:parsed.branches,pullRequests:parsed.pullRequests,timestamp:parsed.timestamp,owner:parsed.owner,repo:parsed.repo};}catch(error){const cacheKey=this.getCacheKey(owner,repo);this.logger.error('Error reading branch listing cache',{cacheKey,error:error.message});console.warn('Error reading branch listing cache:',error);return null;}}/**\n   * Cache branch listing data (branches and PRs)\n   */setCachedData(owner,repo,branches,pullRequests){try{const cacheKey=this.getCacheKey(owner,repo);const cacheData={branches,pullRequests,timestamp:Date.now(),owner,repo};this.logger.cache('set',cacheKey,{branchCount:(branches===null||branches===void 0?void 0:branches.length)||0,prCount:(pullRequests===null||pullRequests===void 0?void 0:pullRequests.length)||0,owner,repo});localStorage.setItem(cacheKey,JSON.stringify(cacheData));return true;}catch(error){const cacheKey=this.getCacheKey(owner,repo);this.logger.error('Error caching branch listing data',{cacheKey,error:error.message});console.warn('Error caching branch listing data:',error);return false;}}/**\n   * Clear cache for a specific repository\n   */clearCache(owner,repo){try{const cacheKey=this.getCacheKey(owner,repo);this.logger.cache('clear',cacheKey,{owner,repo});localStorage.removeItem(cacheKey);return true;}catch(error){const cacheKey=this.getCacheKey(owner,repo);this.logger.error('Error clearing branch listing cache',{cacheKey,error:error.message});console.warn('Error clearing branch listing cache:',error);return false;}}/**\n   * Clear all branch listing caches\n   */clearAllCaches(){try{const keys=Object.keys(localStorage);let clearedCount=0;keys.forEach(key=>{if(key.startsWith(this.CACHE_KEY_PREFIX)){localStorage.removeItem(key);clearedCount++;}});this.logger.debug('Cleared all branch listing caches',{clearedCount});return true;}catch(error){this.logger.error('Error clearing all branch listing caches',{error:error.message});console.warn('Error clearing all branch listing caches:',error);return false;}}/**\n   * Get cache info for debugging\n   */getCacheInfo(owner,repo){var _cached$branches,_cached$pullRequests;const cached=this.getCachedData(owner,repo);if(!cached){return{exists:false,stale:true};}const age=Date.now()-cached.timestamp;const ageMinutes=Math.round(age/(60*1000));return{exists:true,stale:this.isStale(cached.timestamp),age:age,ageMinutes:ageMinutes,branchCount:((_cached$branches=cached.branches)===null||_cached$branches===void 0?void 0:_cached$branches.length)||0,prCount:((_cached$pullRequests=cached.pullRequests)===null||_cached$pullRequests===void 0?void 0:_cached$pullRequests.length)||0,timestamp:new Date(cached.timestamp).toISOString()};}/**\n   * Force refresh cache - clear existing cache to force fresh data fetch\n   */forceRefresh(owner,repo){this.logger.info('Force refresh requested',{owner,repo});return this.clearCache(owner,repo);}}// Create singleton instance\nconst branchListingCacheService=new BranchListingCacheService();export default branchListingCacheService;","map":{"version":3,"names":["logger","BranchListingCacheService","constructor","CACHE_KEY_PREFIX","CACHE_EXPIRY_MINUTES","getLogger","debug","cacheExpiryMinutes","getCacheKey","owner","repo","isStale","timestamp","now","Date","cacheAge","maxAge","getCachedData","_parsed$branches","_parsed$pullRequests","cacheKey","cache","cachedData","localStorage","getItem","parsed","JSON","parse","age","removeItem","branchCount","branches","length","prCount","pullRequests","error","message","console","warn","setCachedData","cacheData","setItem","stringify","clearCache","clearAllCaches","keys","Object","clearedCount","forEach","key","startsWith","getCacheInfo","_cached$branches","_cached$pullRequests","cached","exists","stale","ageMinutes","Math","round","toISOString","forceRefresh","info","branchListingCacheService"],"sources":["/home/runner/work/sgex/sgex/src/services/branchListingCacheService.js"],"sourcesContent":["/**\n * Branch Listing Cache Service\n * Manages caching of branch and PR preview data with 5-minute expiry\n */\n\nimport logger from '../utils/logger.js';\n\nclass BranchListingCacheService {\n  constructor() {\n    this.CACHE_KEY_PREFIX = 'sgex_branch_listing_cache_';\n    this.CACHE_EXPIRY_MINUTES = 5; // Cache expires after 5 minutes as per requirements\n    this.logger = logger.getLogger('BranchListingCacheService');\n    this.logger.debug('BranchListingCacheService initialized', { \n      cacheExpiryMinutes: this.CACHE_EXPIRY_MINUTES \n    });\n  }\n\n  /**\n   * Generate cache key for branch listing data\n   */\n  getCacheKey(owner, repo) {\n    return `${this.CACHE_KEY_PREFIX}${owner}_${repo}`;\n  }\n\n  /**\n   * Check if cached data is stale (older than 5 minutes)\n   */\n  isStale(timestamp) {\n    const now = Date.now();\n    const cacheAge = now - timestamp;\n    const maxAge = this.CACHE_EXPIRY_MINUTES * 60 * 1000; // 5 minutes in milliseconds\n    return cacheAge > maxAge;\n  }\n\n  /**\n   * Get cached branch listing data (branches and PRs)\n   * Returns null if cache doesn't exist or is stale\n   */\n  getCachedData(owner, repo) {\n    try {\n      const cacheKey = this.getCacheKey(owner, repo);\n      this.logger.cache('get', cacheKey);\n      \n      const cachedData = localStorage.getItem(cacheKey);\n      \n      if (!cachedData) {\n        this.logger.cache('miss', cacheKey, 'No cached data found');\n        return null;\n      }\n\n      const parsed = JSON.parse(cachedData);\n      \n      // Check if cache is stale\n      if (this.isStale(parsed.timestamp)) {\n        // Remove stale cache\n        this.logger.cache('expired', cacheKey, { age: Date.now() - parsed.timestamp });\n        localStorage.removeItem(cacheKey);\n        return null;\n      }\n\n      this.logger.cache('hit', cacheKey, { \n        branchCount: parsed.branches?.length || 0,\n        prCount: parsed.pullRequests?.length || 0,\n        age: Date.now() - parsed.timestamp\n      });\n\n      return {\n        branches: parsed.branches,\n        pullRequests: parsed.pullRequests,\n        timestamp: parsed.timestamp,\n        owner: parsed.owner,\n        repo: parsed.repo\n      };\n    } catch (error) {\n      const cacheKey = this.getCacheKey(owner, repo);\n      this.logger.error('Error reading branch listing cache', { cacheKey, error: error.message });\n      console.warn('Error reading branch listing cache:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Cache branch listing data (branches and PRs)\n   */\n  setCachedData(owner, repo, branches, pullRequests) {\n    try {\n      const cacheKey = this.getCacheKey(owner, repo);\n      const cacheData = {\n        branches,\n        pullRequests,\n        timestamp: Date.now(),\n        owner,\n        repo\n      };\n\n      this.logger.cache('set', cacheKey, { \n        branchCount: branches?.length || 0,\n        prCount: pullRequests?.length || 0,\n        owner, \n        repo \n      });\n\n      localStorage.setItem(cacheKey, JSON.stringify(cacheData));\n      return true;\n    } catch (error) {\n      const cacheKey = this.getCacheKey(owner, repo);\n      this.logger.error('Error caching branch listing data', { cacheKey, error: error.message });\n      console.warn('Error caching branch listing data:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear cache for a specific repository\n   */\n  clearCache(owner, repo) {\n    try {\n      const cacheKey = this.getCacheKey(owner, repo);\n      this.logger.cache('clear', cacheKey, { owner, repo });\n      localStorage.removeItem(cacheKey);\n      return true;\n    } catch (error) {\n      const cacheKey = this.getCacheKey(owner, repo);\n      this.logger.error('Error clearing branch listing cache', { cacheKey, error: error.message });\n      console.warn('Error clearing branch listing cache:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all branch listing caches\n   */\n  clearAllCaches() {\n    try {\n      const keys = Object.keys(localStorage);\n      let clearedCount = 0;\n      keys.forEach(key => {\n        if (key.startsWith(this.CACHE_KEY_PREFIX)) {\n          localStorage.removeItem(key);\n          clearedCount++;\n        }\n      });\n      this.logger.debug('Cleared all branch listing caches', { clearedCount });\n      return true;\n    } catch (error) {\n      this.logger.error('Error clearing all branch listing caches', { error: error.message });\n      console.warn('Error clearing all branch listing caches:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get cache info for debugging\n   */\n  getCacheInfo(owner, repo) {\n    const cached = this.getCachedData(owner, repo);\n    if (!cached) {\n      return { exists: false, stale: true };\n    }\n\n    const age = Date.now() - cached.timestamp;\n    const ageMinutes = Math.round(age / (60 * 1000));\n    \n    return {\n      exists: true,\n      stale: this.isStale(cached.timestamp),\n      age: age,\n      ageMinutes: ageMinutes,\n      branchCount: cached.branches?.length || 0,\n      prCount: cached.pullRequests?.length || 0,\n      timestamp: new Date(cached.timestamp).toISOString()\n    };\n  }\n\n  /**\n   * Force refresh cache - clear existing cache to force fresh data fetch\n   */\n  forceRefresh(owner, repo) {\n    this.logger.info('Force refresh requested', { owner, repo });\n    return this.clearCache(owner, repo);\n  }\n}\n\n// Create singleton instance\nconst branchListingCacheService = new BranchListingCacheService();\n\nexport default branchListingCacheService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}