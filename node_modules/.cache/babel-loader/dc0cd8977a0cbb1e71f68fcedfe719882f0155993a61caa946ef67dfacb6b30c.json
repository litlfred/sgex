{"ast":null,"code":"/**\n * @typedef {import('../../util/Types').Point} Point\n * @typedef {import('../../util/Types').Vector} Vector\n */\n\n/**\n * Returns the length of a vector.\n *\n * @param {Vector} vector\n *\n * @return {number}\n */\nexport function vectorLength(vector) {\n  return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n}\n\n/**\n * Calculates the angle between a line a the Y axis.\n *\n * @param {Point[]} line\n *\n * @return {number}\n */\nexport function getAngle(line) {\n  // return value is between 0, 180 and -180, -0\n  // @janstuemmel: maybe replace return a/b with b/a\n  return Math.atan((line[1].y - line[0].y) / (line[1].x - line[0].x));\n}\n\n/**\n * Rotates a vector by a given angle.\n *\n * @param {Vector} vector\n * @param {number} angle The angle in radians.\n *\n * @return {Vector}\n */\nexport function rotateVector(vector, angle) {\n  return !angle ? vector : {\n    x: Math.cos(angle) * vector.x - Math.sin(angle) * vector.y,\n    y: Math.sin(angle) * vector.x + Math.cos(angle) * vector.y\n  };\n}\n\n/**\n * Solves a 2D equation system\n * a + r*b = c, where a,b,c are 2D vectors\n *\n * @param {Vector} a\n * @param {Vector} b\n * @param {Vector} c\n *\n * @return {number}\n */\nfunction solveLambaSystem(a, b, c) {\n  // the 2d system\n  var system = [{\n    n: a[0] - c[0],\n    lambda: b[0]\n  }, {\n    n: a[1] - c[1],\n    lambda: b[1]\n  }];\n\n  // solve\n  var n = system[0].n * b[0] + system[1].n * b[1],\n    l = system[0].lambda * b[0] + system[1].lambda * b[1];\n  return -n / l;\n}\n\n/**\n * Calculates the position of the perpendicular foot.\n *\n * @param {Point} point\n * @param {Point[]} line\n *\n * @return {Point}\n */\nexport function perpendicularFoot(point, line) {\n  var a = line[0],\n    b = line[1];\n\n  // relative position of b from a\n  var bd = {\n    x: b.x - a.x,\n    y: b.y - a.y\n  };\n\n  // solve equation system to the parametrized vectors param real value\n  var r = solveLambaSystem([a.x, a.y], [bd.x, bd.y], [point.x, point.y]);\n  return {\n    x: a.x + r * bd.x,\n    y: a.y + r * bd.y\n  };\n}\n\n/**\n * Calculates the distance between a point and a line.\n *\n * @param {Point} point\n * @param {Point[]} line\n *\n * @return {number}\n */\nexport function getDistancePointLine(point, line) {\n  var pfPoint = perpendicularFoot(point, line);\n\n  // distance vector\n  var connectionVector = {\n    x: pfPoint.x - point.x,\n    y: pfPoint.y - point.y\n  };\n  return vectorLength(connectionVector);\n}\n\n/**\n * Calculates the distance between two points.\n *\n * @param {Point} point1\n * @param {Point} point2\n *\n * @return {number}\n */\nexport function getDistancePointPoint(point1, point2) {\n  return vectorLength({\n    x: point1.x - point2.x,\n    y: point1.y - point2.y\n  });\n}","map":{"version":3,"names":["vectorLength","vector","Math","sqrt","pow","x","y","getAngle","line","atan","rotateVector","angle","cos","sin","solveLambaSystem","a","b","c","system","n","lambda","l","perpendicularFoot","point","bd","r","getDistancePointLine","pfPoint","connectionVector","getDistancePointPoint","point1","point2"],"sources":["/home/runner/work/sgex/sgex/node_modules/diagram-js/lib/features/bendpoints/GeometricUtil.js"],"sourcesContent":["/**\n * @typedef {import('../../util/Types').Point} Point\n * @typedef {import('../../util/Types').Vector} Vector\n */\n\n/**\n * Returns the length of a vector.\n *\n * @param {Vector} vector\n *\n * @return {number}\n */\nexport function vectorLength(vector) {\n  return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n}\n\n\n/**\n * Calculates the angle between a line a the Y axis.\n *\n * @param {Point[]} line\n *\n * @return {number}\n */\nexport function getAngle(line) {\n\n  // return value is between 0, 180 and -180, -0\n  // @janstuemmel: maybe replace return a/b with b/a\n  return Math.atan((line[1].y - line[0].y) / (line[1].x - line[0].x));\n}\n\n\n/**\n * Rotates a vector by a given angle.\n *\n * @param {Vector} vector\n * @param {number} angle The angle in radians.\n *\n * @return {Vector}\n */\nexport function rotateVector(vector, angle) {\n  return (!angle) ? vector : {\n    x: Math.cos(angle) * vector.x - Math.sin(angle) * vector.y,\n    y: Math.sin(angle) * vector.x + Math.cos(angle) * vector.y\n  };\n}\n\n\n/**\n * Solves a 2D equation system\n * a + r*b = c, where a,b,c are 2D vectors\n *\n * @param {Vector} a\n * @param {Vector} b\n * @param {Vector} c\n *\n * @return {number}\n */\nfunction solveLambaSystem(a, b, c) {\n\n  // the 2d system\n  var system = [\n    { n: a[0] - c[0], lambda: b[0] },\n    { n: a[1] - c[1], lambda: b[1] }\n  ];\n\n  // solve\n  var n = system[0].n * b[0] + system[1].n * b[1],\n      l = system[0].lambda * b[0] + system[1].lambda * b[1];\n\n  return -n / l;\n}\n\n\n/**\n * Calculates the position of the perpendicular foot.\n *\n * @param {Point} point\n * @param {Point[]} line\n *\n * @return {Point}\n */\nexport function perpendicularFoot(point, line) {\n\n  var a = line[0], b = line[1];\n\n  // relative position of b from a\n  var bd = { x: b.x - a.x, y: b.y - a.y };\n\n  // solve equation system to the parametrized vectors param real value\n  var r = solveLambaSystem([ a.x, a.y ], [ bd.x, bd.y ], [ point.x, point.y ]);\n\n  return { x: a.x + r * bd.x, y: a.y + r * bd.y };\n}\n\n\n/**\n * Calculates the distance between a point and a line.\n *\n * @param {Point} point\n * @param {Point[]} line\n *\n * @return {number}\n */\nexport function getDistancePointLine(point, line) {\n\n  var pfPoint = perpendicularFoot(point, line);\n\n  // distance vector\n  var connectionVector = {\n    x: pfPoint.x - point.x,\n    y: pfPoint.y - point.y\n  };\n\n  return vectorLength(connectionVector);\n}\n\n\n/**\n * Calculates the distance between two points.\n *\n * @param {Point} point1\n * @param {Point} point2\n *\n * @return {number}\n */\nexport function getDistancePointPoint(point1, point2) {\n\n  return vectorLength({\n    x: point1.x - point2.x,\n    y: point1.y - point2.y\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}