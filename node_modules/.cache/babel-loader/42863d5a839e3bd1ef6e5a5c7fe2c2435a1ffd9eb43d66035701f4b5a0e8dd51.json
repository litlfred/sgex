{"ast":null,"code":"import { VERSION } from \"./version.js\";\nfunction requestLog(octokit) {\n  octokit.hook.wrap(\"request\", (request, options) => {\n    octokit.log.debug(\"request\", options);\n    const start = Date.now();\n    const requestOptions = octokit.request.endpoint.parse(options);\n    const path = requestOptions.url.replace(options.baseUrl, \"\");\n    return request(options).then(response => {\n      const requestId = response.headers[\"x-github-request-id\"];\n      octokit.log.info(\"\".concat(requestOptions.method, \" \").concat(path, \" - \").concat(response.status, \" with id \").concat(requestId, \" in \").concat(Date.now() - start, \"ms\"));\n      return response;\n    }).catch(error => {\n      var _error$response;\n      const requestId = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.headers[\"x-github-request-id\"]) || \"UNKNOWN\";\n      octokit.log.error(\"\".concat(requestOptions.method, \" \").concat(path, \" - \").concat(error.status, \" with id \").concat(requestId, \" in \").concat(Date.now() - start, \"ms\"));\n      throw error;\n    });\n  });\n}\nrequestLog.VERSION = VERSION;\nexport { requestLog };","map":{"version":3,"names":["VERSION","requestLog","octokit","hook","wrap","request","options","log","debug","start","Date","now","requestOptions","endpoint","parse","path","url","replace","baseUrl","then","response","requestId","headers","info","concat","method","status","catch","error","_error$response"],"sources":["/home/runner/work/sgex/sgex/node_modules/@octokit/plugin-request-log/dist-src/index.js"],"sourcesContent":["import { VERSION } from \"./version.js\";\nfunction requestLog(octokit) {\n  octokit.hook.wrap(\"request\", (request, options) => {\n    octokit.log.debug(\"request\", options);\n    const start = Date.now();\n    const requestOptions = octokit.request.endpoint.parse(options);\n    const path = requestOptions.url.replace(options.baseUrl, \"\");\n    return request(options).then((response) => {\n      const requestId = response.headers[\"x-github-request-id\"];\n      octokit.log.info(\n        `${requestOptions.method} ${path} - ${response.status} with id ${requestId} in ${Date.now() - start}ms`\n      );\n      return response;\n    }).catch((error) => {\n      const requestId = error.response?.headers[\"x-github-request-id\"] || \"UNKNOWN\";\n      octokit.log.error(\n        `${requestOptions.method} ${path} - ${error.status} with id ${requestId} in ${Date.now() - start}ms`\n      );\n      throw error;\n    });\n  });\n}\nrequestLog.VERSION = VERSION;\nexport {\n  requestLog\n};\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,UAAUA,CAACC,OAAO,EAAE;EAC3BA,OAAO,CAACC,IAAI,CAACC,IAAI,CAAC,SAAS,EAAE,CAACC,OAAO,EAAEC,OAAO,KAAK;IACjDJ,OAAO,CAACK,GAAG,CAACC,KAAK,CAAC,SAAS,EAAEF,OAAO,CAAC;IACrC,MAAMG,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IACxB,MAAMC,cAAc,GAAGV,OAAO,CAACG,OAAO,CAACQ,QAAQ,CAACC,KAAK,CAACR,OAAO,CAAC;IAC9D,MAAMS,IAAI,GAAGH,cAAc,CAACI,GAAG,CAACC,OAAO,CAACX,OAAO,CAACY,OAAO,EAAE,EAAE,CAAC;IAC5D,OAAOb,OAAO,CAACC,OAAO,CAAC,CAACa,IAAI,CAAEC,QAAQ,IAAK;MACzC,MAAMC,SAAS,GAAGD,QAAQ,CAACE,OAAO,CAAC,qBAAqB,CAAC;MACzDpB,OAAO,CAACK,GAAG,CAACgB,IAAI,IAAAC,MAAA,CACXZ,cAAc,CAACa,MAAM,OAAAD,MAAA,CAAIT,IAAI,SAAAS,MAAA,CAAMJ,QAAQ,CAACM,MAAM,eAAAF,MAAA,CAAYH,SAAS,UAAAG,MAAA,CAAOd,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,KAAK,OACrG,CAAC;MACD,OAAOW,QAAQ;IACjB,CAAC,CAAC,CAACO,KAAK,CAAEC,KAAK,IAAK;MAAA,IAAAC,eAAA;MAClB,MAAMR,SAAS,GAAG,EAAAQ,eAAA,GAAAD,KAAK,CAACR,QAAQ,cAAAS,eAAA,uBAAdA,eAAA,CAAgBP,OAAO,CAAC,qBAAqB,CAAC,KAAI,SAAS;MAC7EpB,OAAO,CAACK,GAAG,CAACqB,KAAK,IAAAJ,MAAA,CACZZ,cAAc,CAACa,MAAM,OAAAD,MAAA,CAAIT,IAAI,SAAAS,MAAA,CAAMI,KAAK,CAACF,MAAM,eAAAF,MAAA,CAAYH,SAAS,UAAAG,MAAA,CAAOd,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,KAAK,OAClG,CAAC;MACD,MAAMmB,KAAK;IACb,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AACA3B,UAAU,CAACD,OAAO,GAAGA,OAAO;AAC5B,SACEC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}