{"ast":null,"code":"import { reduce, keys, forEach, assign } from 'min-dash';\nimport { getBusinessObject, getDi } from '../../../util/ModelUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n * @typedef {import('diagram-js/lib/command/CommandStack').CommandContext} CommandContext\n *\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n * @typedef {import('../../../model/Types').Moddle} Moddle\n * @typedef {import('../Modeling').default} Modeling\n * @typedef {import('../../../draw/TextRenderer').default} TextRenderer\n *\n * @typedef {import('../../../model/Types').Element} Element\n */\n\nvar DEFAULT_FLOW = 'default',\n  ID = 'id',\n  DI = 'di';\nvar NULL_DIMENSIONS = {\n  width: 0,\n  height: 0\n};\n\n/**\n * A handler that implements a BPMN 2.0 property update.\n *\n * This should be used to set simple properties on elements with\n * an underlying BPMN business object.\n *\n * Use respective diagram-js provided handlers if you would\n * like to perform automated modeling.\n *\n * @implements {CommandHandler}\n *\n * @param {ElementRegistry} elementRegistry\n * @param {Moddle} moddle\n * @param {Modeling} modeling\n * @param {TextRenderer} textRenderer\n */\nexport default function UpdatePropertiesHandler(elementRegistry, moddle, modeling, textRenderer) {\n  this._elementRegistry = elementRegistry;\n  this._moddle = moddle;\n  this._modeling = modeling;\n  this._textRenderer = textRenderer;\n}\nUpdatePropertiesHandler.$inject = ['elementRegistry', 'moddle', 'modeling', 'textRenderer'];\n\n// api //////////////////////\n\n/**\n * Update a BPMN element's properties.\n *\n * @param { {\n *   element: Element;\n *   properties: Record<string, any>;\n * } & CommandContext } context\n *\n * @return {Element[]}\n */\nUpdatePropertiesHandler.prototype.execute = function (context) {\n  var element = context.element,\n    changed = [element];\n  if (!element) {\n    throw new Error('element required');\n  }\n  var elementRegistry = this._elementRegistry,\n    ids = this._moddle.ids;\n  var businessObject = element.businessObject,\n    properties = unwrapBusinessObjects(context.properties),\n    oldProperties = context.oldProperties || getProperties(element, properties);\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(businessObject[ID]);\n    elementRegistry.updateId(element, properties[ID]);\n    ids.claim(properties[ID], businessObject);\n  }\n\n  // correctly indicate visual changes on default flow updates\n  if (DEFAULT_FLOW in properties) {\n    if (properties[DEFAULT_FLOW]) {\n      changed.push(elementRegistry.get(properties[DEFAULT_FLOW].id));\n    }\n    if (businessObject[DEFAULT_FLOW]) {\n      changed.push(elementRegistry.get(businessObject[DEFAULT_FLOW].id));\n    }\n  }\n\n  // update properties\n  setProperties(element, properties);\n\n  // store old values\n  context.oldProperties = oldProperties;\n  context.changed = changed;\n\n  // indicate changed on objects affected by the update\n  return changed;\n};\nUpdatePropertiesHandler.prototype.postExecute = function (context) {\n  var element = context.element,\n    label = element.label;\n  var text = label && getBusinessObject(label).name;\n  if (!text) {\n    return;\n  }\n\n  // get layouted text bounds and resize external\n  // external label accordingly\n  var newLabelBounds = this._textRenderer.getExternalLabelBounds(label, text);\n  this._modeling.resizeShape(label, newLabelBounds, NULL_DIMENSIONS);\n};\n\n/**\n * Revert updating a BPMN element's properties.\n *\n * @param { {\n *   element: Element;\n *   properties: Record<string, any>;\n *   oldProperties: Record<string, any>;\n * } & CommandContext } context\n *\n * @return {Element[]}\n */\nUpdatePropertiesHandler.prototype.revert = function (context) {\n  var element = context.element,\n    properties = context.properties,\n    oldProperties = context.oldProperties,\n    businessObject = element.businessObject,\n    elementRegistry = this._elementRegistry,\n    ids = this._moddle.ids;\n\n  // update properties\n  setProperties(element, oldProperties);\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(properties[ID]);\n    elementRegistry.updateId(element, oldProperties[ID]);\n    ids.claim(oldProperties[ID], businessObject);\n  }\n  return context.changed;\n};\nfunction isIdChange(properties, businessObject) {\n  return ID in properties && properties[ID] !== businessObject[ID];\n}\nfunction getProperties(element, properties) {\n  var propertyNames = keys(properties),\n    businessObject = element.businessObject,\n    di = getDi(element);\n  return reduce(propertyNames, function (result, key) {\n    // handle DI separately\n    if (key !== DI) {\n      result[key] = businessObject.get(key);\n    } else {\n      result[key] = getDiProperties(di, keys(properties.di));\n    }\n    return result;\n  }, {});\n}\nfunction getDiProperties(di, propertyNames) {\n  return reduce(propertyNames, function (result, key) {\n    result[key] = di && di.get(key);\n    return result;\n  }, {});\n}\nfunction setProperties(element, properties) {\n  var businessObject = element.businessObject,\n    di = getDi(element);\n  forEach(properties, function (value, key) {\n    if (key !== DI) {\n      businessObject.set(key, value);\n    } else {\n      // only update, if di exists\n      if (di) {\n        setDiProperties(di, value);\n      }\n    }\n  });\n}\nfunction setDiProperties(di, properties) {\n  forEach(properties, function (value, key) {\n    di.set(key, value);\n  });\n}\nvar referencePropertyNames = ['default'];\n\n/**\n * Make sure we unwrap the actual business object behind diagram element that\n * may have been passed as arguments.\n *\n * @param  {Record<string, any>} properties\n *\n * @return {Record<string, any>} unwrappedProps\n */\nfunction unwrapBusinessObjects(properties) {\n  var unwrappedProps = assign({}, properties);\n  referencePropertyNames.forEach(function (name) {\n    if (name in properties) {\n      unwrappedProps[name] = getBusinessObject(unwrappedProps[name]);\n    }\n  });\n  return unwrappedProps;\n}","map":{"version":3,"names":["reduce","keys","forEach","assign","getBusinessObject","getDi","DEFAULT_FLOW","ID","DI","NULL_DIMENSIONS","width","height","UpdatePropertiesHandler","elementRegistry","moddle","modeling","textRenderer","_elementRegistry","_moddle","_modeling","_textRenderer","$inject","prototype","execute","context","element","changed","Error","ids","businessObject","properties","unwrapBusinessObjects","oldProperties","getProperties","isIdChange","unclaim","updateId","claim","push","get","id","setProperties","postExecute","label","text","name","newLabelBounds","getExternalLabelBounds","resizeShape","revert","propertyNames","di","result","key","getDiProperties","value","set","setDiProperties","referencePropertyNames","unwrappedProps"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/modeling/cmd/UpdatePropertiesHandler.js"],"sourcesContent":["import {\n  reduce,\n  keys,\n  forEach,\n  assign\n} from 'min-dash';\n\nimport {\n  getBusinessObject,\n  getDi\n} from '../../../util/ModelUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n * @typedef {import('diagram-js/lib/command/CommandStack').CommandContext} CommandContext\n *\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n * @typedef {import('../../../model/Types').Moddle} Moddle\n * @typedef {import('../Modeling').default} Modeling\n * @typedef {import('../../../draw/TextRenderer').default} TextRenderer\n *\n * @typedef {import('../../../model/Types').Element} Element\n */\n\nvar DEFAULT_FLOW = 'default',\n    ID = 'id',\n    DI = 'di';\n\nvar NULL_DIMENSIONS = {\n  width: 0,\n  height: 0\n};\n\n/**\n * A handler that implements a BPMN 2.0 property update.\n *\n * This should be used to set simple properties on elements with\n * an underlying BPMN business object.\n *\n * Use respective diagram-js provided handlers if you would\n * like to perform automated modeling.\n *\n * @implements {CommandHandler}\n *\n * @param {ElementRegistry} elementRegistry\n * @param {Moddle} moddle\n * @param {Modeling} modeling\n * @param {TextRenderer} textRenderer\n */\nexport default function UpdatePropertiesHandler(\n    elementRegistry, moddle,\n    modeling, textRenderer) {\n\n  this._elementRegistry = elementRegistry;\n  this._moddle = moddle;\n  this._modeling = modeling;\n  this._textRenderer = textRenderer;\n}\n\nUpdatePropertiesHandler.$inject = [\n  'elementRegistry',\n  'moddle',\n  'modeling',\n  'textRenderer'\n];\n\n\n// api //////////////////////\n\n/**\n * Update a BPMN element's properties.\n *\n * @param { {\n *   element: Element;\n *   properties: Record<string, any>;\n * } & CommandContext } context\n *\n * @return {Element[]}\n */\nUpdatePropertiesHandler.prototype.execute = function(context) {\n\n  var element = context.element,\n      changed = [ element ];\n\n  if (!element) {\n    throw new Error('element required');\n  }\n\n  var elementRegistry = this._elementRegistry,\n      ids = this._moddle.ids;\n\n  var businessObject = element.businessObject,\n      properties = unwrapBusinessObjects(context.properties),\n      oldProperties = context.oldProperties || getProperties(element, properties);\n\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(businessObject[ID]);\n\n    elementRegistry.updateId(element, properties[ID]);\n\n    ids.claim(properties[ID], businessObject);\n  }\n\n  // correctly indicate visual changes on default flow updates\n  if (DEFAULT_FLOW in properties) {\n\n    if (properties[DEFAULT_FLOW]) {\n      changed.push(elementRegistry.get(properties[DEFAULT_FLOW].id));\n    }\n\n    if (businessObject[DEFAULT_FLOW]) {\n      changed.push(elementRegistry.get(businessObject[DEFAULT_FLOW].id));\n    }\n  }\n\n  // update properties\n  setProperties(element, properties);\n\n  // store old values\n  context.oldProperties = oldProperties;\n  context.changed = changed;\n\n  // indicate changed on objects affected by the update\n  return changed;\n};\n\n\nUpdatePropertiesHandler.prototype.postExecute = function(context) {\n  var element = context.element,\n      label = element.label;\n\n  var text = label && getBusinessObject(label).name;\n\n  if (!text) {\n    return;\n  }\n\n  // get layouted text bounds and resize external\n  // external label accordingly\n  var newLabelBounds = this._textRenderer.getExternalLabelBounds(label, text);\n\n  this._modeling.resizeShape(label, newLabelBounds, NULL_DIMENSIONS);\n};\n\n/**\n * Revert updating a BPMN element's properties.\n *\n * @param { {\n *   element: Element;\n *   properties: Record<string, any>;\n *   oldProperties: Record<string, any>;\n * } & CommandContext } context\n *\n * @return {Element[]}\n */\nUpdatePropertiesHandler.prototype.revert = function(context) {\n\n  var element = context.element,\n      properties = context.properties,\n      oldProperties = context.oldProperties,\n      businessObject = element.businessObject,\n      elementRegistry = this._elementRegistry,\n      ids = this._moddle.ids;\n\n  // update properties\n  setProperties(element, oldProperties);\n\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(properties[ID]);\n\n    elementRegistry.updateId(element, oldProperties[ID]);\n\n    ids.claim(oldProperties[ID], businessObject);\n  }\n\n  return context.changed;\n};\n\n\nfunction isIdChange(properties, businessObject) {\n  return ID in properties && properties[ID] !== businessObject[ID];\n}\n\n\nfunction getProperties(element, properties) {\n  var propertyNames = keys(properties),\n      businessObject = element.businessObject,\n      di = getDi(element);\n\n  return reduce(propertyNames, function(result, key) {\n\n    // handle DI separately\n    if (key !== DI) {\n      result[key] = businessObject.get(key);\n\n    } else {\n      result[key] = getDiProperties(di, keys(properties.di));\n    }\n\n    return result;\n  }, {});\n}\n\n\nfunction getDiProperties(di, propertyNames) {\n  return reduce(propertyNames, function(result, key) {\n    result[key] = di && di.get(key);\n\n    return result;\n  }, {});\n}\n\n\nfunction setProperties(element, properties) {\n  var businessObject = element.businessObject,\n      di = getDi(element);\n\n  forEach(properties, function(value, key) {\n\n    if (key !== DI) {\n      businessObject.set(key, value);\n    } else {\n\n      // only update, if di exists\n      if (di) {\n        setDiProperties(di, value);\n      }\n    }\n  });\n}\n\n\nfunction setDiProperties(di, properties) {\n  forEach(properties, function(value, key) {\n    di.set(key, value);\n  });\n}\n\n\nvar referencePropertyNames = [ 'default' ];\n\n/**\n * Make sure we unwrap the actual business object behind diagram element that\n * may have been passed as arguments.\n *\n * @param  {Record<string, any>} properties\n *\n * @return {Record<string, any>} unwrappedProps\n */\nfunction unwrapBusinessObjects(properties) {\n\n  var unwrappedProps = assign({}, properties);\n\n  referencePropertyNames.forEach(function(name) {\n    if (name in properties) {\n      unwrappedProps[name] = getBusinessObject(unwrappedProps[name]);\n    }\n  });\n\n  return unwrappedProps;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}