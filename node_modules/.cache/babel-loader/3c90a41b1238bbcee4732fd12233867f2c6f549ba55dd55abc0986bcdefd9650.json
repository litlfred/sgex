{"ast":null,"code":"import inherits from 'inherits-browser';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { find } from 'min-dash';\nimport { isExpanded } from '../../../util/DiUtil';\nimport { getBusinessObject, getDi, is } from '../../../util/ModelUtil';\nimport { getMid } from 'diagram-js/lib/layout/LayoutUtil';\nimport { getBBox } from 'diagram-js/lib/util/Elements';\nimport { getPlaneIdFromShape, getShapeIdFromPlane, isPlane, toPlaneId } from '../../../util/DrilldownUtil';\n\n/**\n * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('../Modeling').default} Modeling\n * @typedef {import('../ElementFactory').default} ElementFactory\n * @typedef {import('../BpmnFactory').default} BpmnFactory\n * @typedef {import('../../../Modeler').default} Modeler\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n *\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('../../../model/Types').Root} Root\n * @typedef {import('../../../model/Types').ModdleElement} ModdleElement\n */\n\nvar LOW_PRIORITY = 400;\nvar HIGH_PRIORITY = 600;\nvar DEFAULT_POSITION = {\n  x: 180,\n  y: 160\n};\n\n/**\n * Creates bpmndi:BPMNPlane elements and canvas planes when collapsed subprocesses are created.\n *\n * @param {Canvas} canvas\n * @param {EventBus} eventBus\n * @param {Modeling} modeling\n * @param {ElementFactory} elementFactory\n * @param {BpmnFactory} bpmnFactory\n * @param {Modeler} bpmnjs\n * @param {ElementRegistry} elementRegistry\n */\nexport default function SubProcessPlaneBehavior(canvas, eventBus, modeling, elementFactory, bpmnFactory, bpmnjs, elementRegistry) {\n  CommandInterceptor.call(this, eventBus);\n  this._canvas = canvas;\n  this._eventBus = eventBus;\n  this._modeling = modeling;\n  this._elementFactory = elementFactory;\n  this._bpmnFactory = bpmnFactory;\n  this._bpmnjs = bpmnjs;\n  this._elementRegistry = elementRegistry;\n  var self = this;\n  function isCollapsedSubProcess(element) {\n    return is(element, 'bpmn:SubProcess') && !isExpanded(element);\n  }\n  function createRoot(context) {\n    var shape = context.shape,\n      rootElement = context.newRootElement;\n    var businessObject = getBusinessObject(shape);\n    rootElement = self._addDiagram(rootElement || businessObject);\n    context.newRootElement = canvas.addRootElement(rootElement);\n  }\n  function removeRoot(context) {\n    var shape = context.shape;\n    var businessObject = getBusinessObject(shape);\n    self._removeDiagram(businessObject);\n    var rootElement = context.newRootElement = elementRegistry.get(getPlaneIdFromShape(businessObject));\n    canvas.removeRootElement(rootElement);\n  }\n\n  // add plane elements for newly created sub-processes\n  // this ensures we can actually drill down into the element\n  this.executed('shape.create', function (context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n    createRoot(context);\n  }, true);\n  this.postExecuted('shape.create', function (context) {\n    var shape = context.shape,\n      rootElement = context.newRootElement;\n    if (!rootElement || !shape.children) {\n      return;\n    }\n    self._showRecursively(shape.children);\n    self._moveChildrenToShape(shape, rootElement);\n  }, true);\n  this.reverted('shape.create', function (context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n    removeRoot(context);\n  }, true);\n  this.preExecuted('shape.delete', function (context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n    var attachedRoot = elementRegistry.get(getPlaneIdFromShape(shape));\n    if (!attachedRoot) {\n      return;\n    }\n    modeling.removeElements(attachedRoot.children.slice());\n  }, true);\n  this.executed('shape.delete', function (context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n    removeRoot(context);\n  }, true);\n  this.reverted('shape.delete', function (context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n    createRoot(context);\n  }, true);\n  this.preExecuted('shape.replace', function (context) {\n    var oldShape = context.oldShape;\n    var newShape = context.newShape;\n    if (!isCollapsedSubProcess(oldShape) || !isCollapsedSubProcess(newShape)) {\n      return;\n    }\n\n    // old plane could have content,\n    // we remove it so it is not recursively deleted from 'shape.delete'\n    context.oldRoot = canvas.removeRootElement(getPlaneIdFromShape(oldShape));\n  }, true);\n  this.postExecuted('shape.replace', function (context) {\n    var newShape = context.newShape,\n      source = context.oldRoot,\n      target = canvas.findRoot(getPlaneIdFromShape(newShape));\n    if (!source || !target) {\n      return;\n    }\n    var elements = source.children;\n    modeling.moveElements(elements, {\n      x: 0,\n      y: 0\n    }, target);\n  }, true);\n\n  // rename primary elements when the secondary element changes\n  // this ensures rootElement.id = element.id + '_plane'\n  this.executed('element.updateProperties', function (context) {\n    var shape = context.element;\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n    var properties = context.properties;\n    var oldProperties = context.oldProperties;\n    var oldId = oldProperties.id,\n      newId = properties.id;\n    if (oldId === newId) {\n      return;\n    }\n    if (isPlane(shape)) {\n      elementRegistry.updateId(shape, toPlaneId(newId));\n      elementRegistry.updateId(oldId, newId);\n      return;\n    }\n    var planeElement = elementRegistry.get(toPlaneId(oldId));\n    if (!planeElement) {\n      return;\n    }\n    elementRegistry.updateId(toPlaneId(oldId), toPlaneId(newId));\n  }, true);\n  this.reverted('element.updateProperties', function (context) {\n    var shape = context.element;\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n    var properties = context.properties;\n    var oldProperties = context.oldProperties;\n    var oldId = oldProperties.id,\n      newId = properties.id;\n    if (oldId === newId) {\n      return;\n    }\n    if (isPlane(shape)) {\n      elementRegistry.updateId(shape, toPlaneId(oldId));\n      elementRegistry.updateId(newId, oldId);\n      return;\n    }\n    var planeElement = elementRegistry.get(toPlaneId(newId));\n    if (!planeElement) {\n      return;\n    }\n    elementRegistry.updateId(planeElement, toPlaneId(oldId));\n  }, true);\n\n  // re-throw element.changed to re-render primary shape if associated plane has\n  // changed (e.g. bpmn:name property has changed)\n  eventBus.on('element.changed', function (context) {\n    var element = context.element;\n    if (!isPlane(element)) {\n      return;\n    }\n    var plane = element;\n    var primaryShape = elementRegistry.get(getShapeIdFromPlane(plane));\n\n    // do not re-throw if no associated primary shape (e.g. bpmn:Process)\n    if (!primaryShape || primaryShape === plane) {\n      return;\n    }\n    eventBus.fire('element.changed', {\n      element: primaryShape\n    });\n  });\n\n  // create/remove plane for the subprocess\n  this.executed('shape.toggleCollapse', LOW_PRIORITY, function (context) {\n    var shape = context.shape;\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n    if (!isExpanded(shape)) {\n      createRoot(context);\n      self._showRecursively(shape.children);\n    } else {\n      removeRoot(context);\n    }\n  }, true);\n\n  // create/remove plane for the subprocess\n  this.reverted('shape.toggleCollapse', LOW_PRIORITY, function (context) {\n    var shape = context.shape;\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n    if (!isExpanded(shape)) {\n      createRoot(context);\n      self._showRecursively(shape.children);\n    } else {\n      removeRoot(context);\n    }\n  }, true);\n\n  // move elements between planes\n  this.postExecuted('shape.toggleCollapse', HIGH_PRIORITY, function (context) {\n    var shape = context.shape;\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n    var rootElement = context.newRootElement;\n    if (!rootElement) {\n      return;\n    }\n    if (!isExpanded(shape)) {\n      // collapsed\n      self._moveChildrenToShape(shape, rootElement);\n    } else {\n      self._moveChildrenToShape(rootElement, shape);\n    }\n  }, true);\n\n  // copy-paste ///////////\n\n  // add elements in plane to tree\n  eventBus.on('copyPaste.createTree', function (context) {\n    var element = context.element,\n      children = context.children;\n    if (!isCollapsedSubProcess(element)) {\n      return;\n    }\n    var id = getPlaneIdFromShape(element);\n    var parent = elementRegistry.get(id);\n    if (parent) {\n      // do not copy invisible root element\n      children.push.apply(children, parent.children);\n    }\n  });\n\n  // set plane children as direct children of collapsed shape\n  eventBus.on('copyPaste.copyElement', function (context) {\n    var descriptor = context.descriptor,\n      element = context.element,\n      elements = context.elements;\n    var parent = element.parent;\n    var isPlane = is(getDi(parent), 'bpmndi:BPMNPlane');\n    if (!isPlane) {\n      return;\n    }\n    var parentId = getShapeIdFromPlane(parent);\n    var referencedShape = find(elements, function (element) {\n      return element.id === parentId;\n    });\n    if (!referencedShape) {\n      return;\n    }\n    descriptor.parent = referencedShape.id;\n  });\n\n  // hide children during pasting\n  eventBus.on('copyPaste.pasteElement', function (context) {\n    var descriptor = context.descriptor;\n    if (!descriptor.parent) {\n      return;\n    }\n    if (isCollapsedSubProcess(descriptor.parent) || descriptor.parent.hidden) {\n      descriptor.hidden = true;\n    }\n  });\n}\ninherits(SubProcessPlaneBehavior, CommandInterceptor);\n\n/**\n * Moves the child elements from source to target.\n *\n * If the target is a plane, the children are moved to the top left corner.\n * Otherwise, the center of the target is used.\n *\n * @param {Root} source\n * @param {Root} target\n */\nSubProcessPlaneBehavior.prototype._moveChildrenToShape = function (source, target) {\n  var modeling = this._modeling;\n  var children = source.children;\n  var offset;\n  if (!children) {\n    return;\n  }\n\n  // add external labels that weren't children of sub process\n  children = children.concat(children.reduce(function (labels, child) {\n    if (child.label && child.label.parent !== source) {\n      return labels.concat(child.label);\n    }\n    return labels;\n  }, []));\n\n  // only change plane if there are no visible children, but don't move them\n  var visibleChildren = children.filter(function (child) {\n    return !child.hidden;\n  });\n  if (!visibleChildren.length) {\n    modeling.moveElements(children, {\n      x: 0,\n      y: 0\n    }, target, {\n      autoResize: false\n    });\n    return;\n  }\n  var childrenBounds = getBBox(visibleChildren);\n\n  // target is a plane\n  if (!target.x) {\n    offset = {\n      x: DEFAULT_POSITION.x - childrenBounds.x,\n      y: DEFAULT_POSITION.y - childrenBounds.y\n    };\n  }\n\n  // source is a plane\n  else {\n    // move relative to the center of the shape\n    var targetMid = getMid(target);\n    var childrenMid = getMid(childrenBounds);\n    offset = {\n      x: targetMid.x - childrenMid.x,\n      y: targetMid.y - childrenMid.y\n    };\n  }\n  modeling.moveElements(children, offset, target, {\n    autoResize: false\n  });\n};\n\n/**\n * Sets `hidden` property on all children of the given shape.\n *\n * @param {Element[]} elements\n * @param {boolean} [hidden=false]\n *\n * @return {Element[]}\n */\nSubProcessPlaneBehavior.prototype._showRecursively = function (elements, hidden) {\n  var self = this;\n  var result = [];\n  elements.forEach(function (element) {\n    element.hidden = !!hidden;\n    result = result.concat(element);\n    if (element.children) {\n      result = result.concat(self._showRecursively(element.children, element.collapsed || hidden));\n    }\n  });\n  return result;\n};\n\n/**\n * Adds a given root element to the BPMNDI diagrams.\n *\n * @param {Root|ModdleElement} planeElement\n *\n * @return {Root}\n */\nSubProcessPlaneBehavior.prototype._addDiagram = function (planeElement) {\n  var bpmnjs = this._bpmnjs;\n  var diagrams = bpmnjs.getDefinitions().diagrams;\n  if (!planeElement.businessObject) {\n    planeElement = this._createNewDiagram(planeElement);\n  }\n  diagrams.push(planeElement.di.$parent);\n  return planeElement;\n};\n\n/**\n * Creates a new plane element for the given sub process.\n *\n * @param {ModdleElement} bpmnElement\n *\n * @return {Root}\n */\nSubProcessPlaneBehavior.prototype._createNewDiagram = function (bpmnElement) {\n  var bpmnFactory = this._bpmnFactory,\n    elementFactory = this._elementFactory;\n  var diPlane = bpmnFactory.create('bpmndi:BPMNPlane', {\n    bpmnElement: bpmnElement\n  });\n  var diDiagram = bpmnFactory.create('bpmndi:BPMNDiagram', {\n    plane: diPlane\n  });\n  diPlane.$parent = diDiagram;\n\n  // add a virtual element (not being drawn),\n  // a copy cat of our BpmnImporter code\n  var planeElement = elementFactory.createRoot({\n    id: getPlaneIdFromShape(bpmnElement),\n    type: bpmnElement.$type,\n    di: diPlane,\n    businessObject: bpmnElement,\n    collapsed: true\n  });\n  return planeElement;\n};\n\n/**\n * Removes the diagram for a given root element.\n *\n * @param {Root} rootElement\n *\n * @return {ModdleElement}\n */\nSubProcessPlaneBehavior.prototype._removeDiagram = function (rootElement) {\n  var bpmnjs = this._bpmnjs;\n  var diagrams = bpmnjs.getDefinitions().diagrams;\n  var removedDiagram = find(diagrams, function (diagram) {\n    return diagram.plane.bpmnElement.id === rootElement.id;\n  });\n  diagrams.splice(diagrams.indexOf(removedDiagram), 1);\n  return removedDiagram;\n};\nSubProcessPlaneBehavior.$inject = ['canvas', 'eventBus', 'modeling', 'elementFactory', 'bpmnFactory', 'bpmnjs', 'elementRegistry'];","map":{"version":3,"names":["inherits","CommandInterceptor","find","isExpanded","getBusinessObject","getDi","is","getMid","getBBox","getPlaneIdFromShape","getShapeIdFromPlane","isPlane","toPlaneId","LOW_PRIORITY","HIGH_PRIORITY","DEFAULT_POSITION","x","y","SubProcessPlaneBehavior","canvas","eventBus","modeling","elementFactory","bpmnFactory","bpmnjs","elementRegistry","call","_canvas","_eventBus","_modeling","_elementFactory","_bpmnFactory","_bpmnjs","_elementRegistry","self","isCollapsedSubProcess","element","createRoot","context","shape","rootElement","newRootElement","businessObject","_addDiagram","addRootElement","removeRoot","_removeDiagram","get","removeRootElement","executed","postExecuted","children","_showRecursively","_moveChildrenToShape","reverted","preExecuted","attachedRoot","removeElements","slice","oldShape","newShape","oldRoot","source","target","findRoot","elements","moveElements","properties","oldProperties","oldId","id","newId","updateId","planeElement","on","plane","primaryShape","fire","parent","push","apply","descriptor","parentId","referencedShape","hidden","prototype","offset","concat","reduce","labels","child","label","visibleChildren","filter","length","autoResize","childrenBounds","targetMid","childrenMid","result","forEach","collapsed","diagrams","getDefinitions","_createNewDiagram","di","$parent","bpmnElement","diPlane","create","diDiagram","type","$type","removedDiagram","diagram","splice","indexOf","$inject"],"sources":["/home/runner/work/sgex/sgex/node_modules/bpmn-js/lib/features/modeling/behavior/SubProcessPlaneBehavior.js"],"sourcesContent":["import inherits from 'inherits-browser';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport { find } from 'min-dash';\n\nimport { isExpanded } from '../../../util/DiUtil';\n\nimport { getBusinessObject, getDi, is } from '../../../util/ModelUtil';\n\nimport { getMid } from 'diagram-js/lib/layout/LayoutUtil';\n\nimport { getBBox } from 'diagram-js/lib/util/Elements';\n\nimport {\n  getPlaneIdFromShape,\n  getShapeIdFromPlane,\n  isPlane,\n  toPlaneId\n} from '../../../util/DrilldownUtil';\n\n/**\n * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('../Modeling').default} Modeling\n * @typedef {import('../ElementFactory').default} ElementFactory\n * @typedef {import('../BpmnFactory').default} BpmnFactory\n * @typedef {import('../../../Modeler').default} Modeler\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n *\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('../../../model/Types').Root} Root\n * @typedef {import('../../../model/Types').ModdleElement} ModdleElement\n */\n\nvar LOW_PRIORITY = 400;\nvar HIGH_PRIORITY = 600;\n\nvar DEFAULT_POSITION = {\n  x: 180,\n  y: 160\n};\n\n\n/**\n * Creates bpmndi:BPMNPlane elements and canvas planes when collapsed subprocesses are created.\n *\n * @param {Canvas} canvas\n * @param {EventBus} eventBus\n * @param {Modeling} modeling\n * @param {ElementFactory} elementFactory\n * @param {BpmnFactory} bpmnFactory\n * @param {Modeler} bpmnjs\n * @param {ElementRegistry} elementRegistry\n */\nexport default function SubProcessPlaneBehavior(\n    canvas, eventBus, modeling,\n    elementFactory, bpmnFactory, bpmnjs, elementRegistry) {\n\n  CommandInterceptor.call(this, eventBus);\n\n  this._canvas = canvas;\n  this._eventBus = eventBus;\n  this._modeling = modeling;\n  this._elementFactory = elementFactory;\n  this._bpmnFactory = bpmnFactory;\n  this._bpmnjs = bpmnjs;\n  this._elementRegistry = elementRegistry;\n\n  var self = this;\n\n  function isCollapsedSubProcess(element) {\n    return is(element, 'bpmn:SubProcess') && !isExpanded(element);\n  }\n\n  function createRoot(context) {\n    var shape = context.shape,\n        rootElement = context.newRootElement;\n\n    var businessObject = getBusinessObject(shape);\n\n    rootElement = self._addDiagram(rootElement || businessObject);\n\n    context.newRootElement = canvas.addRootElement(rootElement);\n  }\n\n  function removeRoot(context) {\n    var shape = context.shape;\n\n    var businessObject = getBusinessObject(shape);\n    self._removeDiagram(businessObject);\n\n    var rootElement = context.newRootElement = elementRegistry.get(getPlaneIdFromShape(businessObject));\n\n    canvas.removeRootElement(rootElement);\n  }\n\n  // add plane elements for newly created sub-processes\n  // this ensures we can actually drill down into the element\n  this.executed('shape.create', function(context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n\n    createRoot(context);\n  }, true);\n\n\n  this.postExecuted('shape.create', function(context) {\n    var shape = context.shape,\n        rootElement = context.newRootElement;\n\n    if (!rootElement || !shape.children) {\n      return;\n    }\n\n    self._showRecursively(shape.children);\n\n    self._moveChildrenToShape(shape, rootElement);\n  }, true);\n\n\n  this.reverted('shape.create', function(context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n\n    removeRoot(context);\n  }, true);\n\n\n  this.preExecuted('shape.delete', function(context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n\n    var attachedRoot = elementRegistry.get(getPlaneIdFromShape(shape));\n\n    if (!attachedRoot) {\n      return;\n    }\n\n    modeling.removeElements(attachedRoot.children.slice());\n  }, true);\n\n\n  this.executed('shape.delete', function(context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n    removeRoot(context);\n  }, true);\n\n\n  this.reverted('shape.delete', function(context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n\n    createRoot(context);\n  }, true);\n\n\n  this.preExecuted('shape.replace', function(context) {\n    var oldShape = context.oldShape;\n    var newShape = context.newShape;\n\n    if (!isCollapsedSubProcess(oldShape) || !isCollapsedSubProcess(newShape)) {\n      return;\n    }\n\n    // old plane could have content,\n    // we remove it so it is not recursively deleted from 'shape.delete'\n    context.oldRoot = canvas.removeRootElement(getPlaneIdFromShape(oldShape));\n  }, true);\n\n\n  this.postExecuted('shape.replace', function(context) {\n    var newShape = context.newShape,\n        source = context.oldRoot,\n        target = canvas.findRoot(getPlaneIdFromShape(newShape));\n\n    if (!source || !target) {\n      return;\n    }\n    var elements = source.children;\n\n    modeling.moveElements(elements, { x: 0, y: 0 }, target);\n  }, true);\n\n\n  // rename primary elements when the secondary element changes\n  // this ensures rootElement.id = element.id + '_plane'\n  this.executed('element.updateProperties', function(context) {\n    var shape = context.element;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    var properties = context.properties;\n    var oldProperties = context.oldProperties;\n\n    var oldId = oldProperties.id,\n        newId = properties.id;\n\n    if (oldId === newId) {\n      return;\n    }\n\n    if (isPlane(shape)) {\n      elementRegistry.updateId(shape, toPlaneId(newId));\n      elementRegistry.updateId(oldId, newId);\n\n      return;\n    }\n\n    var planeElement = elementRegistry.get(toPlaneId(oldId));\n\n    if (!planeElement) {\n      return;\n    }\n\n    elementRegistry.updateId(toPlaneId(oldId), toPlaneId(newId));\n  }, true);\n\n\n  this.reverted('element.updateProperties', function(context) {\n    var shape = context.element;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    var properties = context.properties;\n    var oldProperties = context.oldProperties;\n\n    var oldId = oldProperties.id,\n        newId = properties.id;\n\n    if (oldId === newId) {\n      return;\n    }\n\n    if (isPlane(shape)) {\n      elementRegistry.updateId(shape, toPlaneId(oldId));\n      elementRegistry.updateId(newId, oldId);\n\n      return;\n    }\n\n    var planeElement = elementRegistry.get(toPlaneId(newId));\n\n    if (!planeElement) {\n      return;\n    }\n\n    elementRegistry.updateId(planeElement, toPlaneId(oldId));\n  }, true);\n\n  // re-throw element.changed to re-render primary shape if associated plane has\n  // changed (e.g. bpmn:name property has changed)\n  eventBus.on('element.changed', function(context) {\n    var element = context.element;\n\n    if (!isPlane(element)) {\n      return;\n    }\n\n    var plane = element;\n\n    var primaryShape = elementRegistry.get(getShapeIdFromPlane(plane));\n\n    // do not re-throw if no associated primary shape (e.g. bpmn:Process)\n    if (!primaryShape || primaryShape === plane) {\n      return;\n    }\n\n    eventBus.fire('element.changed', { element: primaryShape });\n  });\n\n\n  // create/remove plane for the subprocess\n  this.executed('shape.toggleCollapse', LOW_PRIORITY, function(context) {\n    var shape = context.shape;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    if (!isExpanded(shape)) {\n      createRoot(context);\n      self._showRecursively(shape.children);\n    } else {\n      removeRoot(context);\n    }\n\n  }, true);\n\n\n  // create/remove plane for the subprocess\n  this.reverted('shape.toggleCollapse', LOW_PRIORITY, function(context) {\n    var shape = context.shape;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    if (!isExpanded(shape)) {\n      createRoot(context);\n      self._showRecursively(shape.children);\n    } else {\n      removeRoot(context);\n    }\n\n  }, true);\n\n  // move elements between planes\n  this.postExecuted('shape.toggleCollapse', HIGH_PRIORITY, function(context) {\n    var shape = context.shape;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    var rootElement = context.newRootElement;\n\n    if (!rootElement) {\n      return;\n    }\n\n    if (!isExpanded(shape)) {\n\n      // collapsed\n      self._moveChildrenToShape(shape, rootElement);\n\n    } else {\n      self._moveChildrenToShape(rootElement, shape);\n    }\n  }, true);\n\n\n  // copy-paste ///////////\n\n  // add elements in plane to tree\n  eventBus.on('copyPaste.createTree', function(context) {\n    var element = context.element,\n        children = context.children;\n\n    if (!isCollapsedSubProcess(element)) {\n      return;\n    }\n\n    var id = getPlaneIdFromShape(element);\n    var parent = elementRegistry.get(id);\n\n    if (parent) {\n\n      // do not copy invisible root element\n      children.push.apply(children, parent.children);\n    }\n  });\n\n  // set plane children as direct children of collapsed shape\n  eventBus.on('copyPaste.copyElement', function(context) {\n    var descriptor = context.descriptor,\n        element = context.element,\n        elements = context.elements;\n\n    var parent = element.parent;\n\n    var isPlane = is(getDi(parent), 'bpmndi:BPMNPlane');\n    if (!isPlane) {\n      return;\n    }\n\n    var parentId = getShapeIdFromPlane(parent);\n\n    var referencedShape = find(elements, function(element) {\n      return element.id === parentId;\n    });\n\n    if (!referencedShape) {\n      return;\n    }\n\n    descriptor.parent = referencedShape.id;\n  });\n\n  // hide children during pasting\n  eventBus.on('copyPaste.pasteElement', function(context) {\n    var descriptor = context.descriptor;\n\n    if (!descriptor.parent) {\n      return;\n    }\n\n    if (isCollapsedSubProcess(descriptor.parent) || descriptor.parent.hidden) {\n      descriptor.hidden = true;\n    }\n  });\n\n}\n\ninherits(SubProcessPlaneBehavior, CommandInterceptor);\n\n/**\n * Moves the child elements from source to target.\n *\n * If the target is a plane, the children are moved to the top left corner.\n * Otherwise, the center of the target is used.\n *\n * @param {Root} source\n * @param {Root} target\n */\nSubProcessPlaneBehavior.prototype._moveChildrenToShape = function(source, target) {\n  var modeling = this._modeling;\n\n  var children = source.children;\n  var offset;\n\n  if (!children) {\n    return;\n  }\n\n  // add external labels that weren't children of sub process\n  children = children.concat(children.reduce(function(labels, child) {\n    if (child.label && child.label.parent !== source) {\n      return labels.concat(child.label);\n    }\n\n    return labels;\n  }, []));\n\n  // only change plane if there are no visible children, but don't move them\n  var visibleChildren = children.filter(function(child) {\n    return !child.hidden;\n  });\n\n  if (!visibleChildren.length) {\n    modeling.moveElements(children, { x: 0, y: 0 }, target, { autoResize: false });\n    return;\n  }\n\n  var childrenBounds = getBBox(visibleChildren);\n\n  // target is a plane\n  if (!target.x) {\n    offset = {\n      x: DEFAULT_POSITION.x - childrenBounds.x,\n      y: DEFAULT_POSITION.y - childrenBounds.y\n    };\n  }\n\n  // source is a plane\n  else {\n\n    // move relative to the center of the shape\n    var targetMid = getMid(target);\n    var childrenMid = getMid(childrenBounds);\n\n    offset = {\n      x: targetMid.x - childrenMid.x,\n      y: targetMid.y - childrenMid.y\n    };\n  }\n\n  modeling.moveElements(children, offset, target, { autoResize: false });\n};\n\n/**\n * Sets `hidden` property on all children of the given shape.\n *\n * @param {Element[]} elements\n * @param {boolean} [hidden=false]\n *\n * @return {Element[]}\n */\nSubProcessPlaneBehavior.prototype._showRecursively = function(elements, hidden) {\n  var self = this;\n\n  var result = [];\n  elements.forEach(function(element) {\n    element.hidden = !!hidden;\n\n    result = result.concat(element);\n\n    if (element.children) {\n      result = result.concat(\n        self._showRecursively(element.children, element.collapsed || hidden)\n      );\n    }\n  });\n\n  return result;\n};\n\n/**\n * Adds a given root element to the BPMNDI diagrams.\n *\n * @param {Root|ModdleElement} planeElement\n *\n * @return {Root}\n */\nSubProcessPlaneBehavior.prototype._addDiagram = function(planeElement) {\n  var bpmnjs = this._bpmnjs;\n  var diagrams = bpmnjs.getDefinitions().diagrams;\n\n  if (!planeElement.businessObject) {\n    planeElement = this._createNewDiagram(planeElement);\n  }\n\n  diagrams.push(planeElement.di.$parent);\n\n  return planeElement;\n};\n\n\n/**\n * Creates a new plane element for the given sub process.\n *\n * @param {ModdleElement} bpmnElement\n *\n * @return {Root}\n */\nSubProcessPlaneBehavior.prototype._createNewDiagram = function(bpmnElement) {\n  var bpmnFactory = this._bpmnFactory,\n      elementFactory = this._elementFactory;\n\n  var diPlane = bpmnFactory.create('bpmndi:BPMNPlane', {\n    bpmnElement: bpmnElement\n  });\n\n  var diDiagram = bpmnFactory.create('bpmndi:BPMNDiagram', {\n    plane: diPlane\n  });\n\n  diPlane.$parent = diDiagram;\n\n  // add a virtual element (not being drawn),\n  // a copy cat of our BpmnImporter code\n  var planeElement = elementFactory.createRoot({\n    id: getPlaneIdFromShape(bpmnElement),\n    type: bpmnElement.$type,\n    di: diPlane,\n    businessObject: bpmnElement,\n    collapsed: true\n  });\n\n  return planeElement;\n};\n\n/**\n * Removes the diagram for a given root element.\n *\n * @param {Root} rootElement\n *\n * @return {ModdleElement}\n */\nSubProcessPlaneBehavior.prototype._removeDiagram = function(rootElement) {\n  var bpmnjs = this._bpmnjs;\n\n  var diagrams = bpmnjs.getDefinitions().diagrams;\n\n  var removedDiagram = find(diagrams, function(diagram) {\n    return diagram.plane.bpmnElement.id === rootElement.id;\n  });\n\n  diagrams.splice(diagrams.indexOf(removedDiagram), 1);\n\n  return removedDiagram;\n};\n\n\nSubProcessPlaneBehavior.$inject = [\n  'canvas',\n  'eventBus',\n  'modeling',\n  'elementFactory',\n  'bpmnFactory',\n  'bpmnjs',\n  'elementRegistry'\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}