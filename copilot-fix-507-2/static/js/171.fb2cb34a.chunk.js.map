{"version":3,"file":"static/js/171.fb2cb34a.chunk.js","mappings":"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","sources":["services/dakComplianceService.js","components/SaveDialog.js","components/StagingGround.js","components/Publications.js","components/DAKDashboardWithFramework.js"],"sourcesContent":["/**\n * DAK Compliance Service\n * \n * Provides comprehensive validation for DAK components with support for error, warning, and info levels.\n * Designed to work in multiple environments: React client-side, command-line, and IDE integration.\n */\n\nclass DAKComplianceService {\n  constructor() {\n    this.validators = new Map();\n    this.initializeDefaultValidators();\n  }\n\n  /**\n   * Initialize default validators for common DAK file types\n   */\n  initializeDefaultValidators() {\n    // XML file validators (general)\n    this.addValidator('xml', 'xml-well-formed', {\n      level: 'error',\n      description: 'XML files must be well-formed',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    // BPMN file validators\n    this.addValidator('bpmn', 'xml-well-formed', {\n      level: 'error',\n      description: 'BPMN files must be well-formed XML',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    this.addValidator('bpmn', 'bpmn-namespace', {\n      level: 'error',\n      description: 'BPMN files must use correct BPMN 2.0 namespace',\n      validator: this.validateBPMNNamespace.bind(this)\n    });\n\n    this.addValidator('bpmn', 'has-start-event', {\n      level: 'warning',\n      description: 'BPMN process should have at least one start event',\n      validator: this.validateBPMNStartEvent.bind(this)\n    });\n\n    // DMN file validators\n    this.addValidator('dmn', 'xml-well-formed', {\n      level: 'error',\n      description: 'DMN files must be well-formed XML',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    this.addValidator('dmn', 'dmn-namespace', {\n      level: 'error',\n      description: 'DMN files must use correct DMN 1.3 namespace',\n      validator: this.validateDMNNamespace.bind(this)\n    });\n\n    // JSON file validators\n    this.addValidator('json', 'json-valid', {\n      level: 'error',\n      description: 'JSON files must be valid JSON',\n      validator: this.validateJSONSyntax.bind(this)\n    });\n\n    // FHIR resource validators\n    this.addValidator('json', 'fhir-resource-type', {\n      level: 'info',\n      description: 'FHIR resources should have valid resourceType',\n      validator: this.validateFHIRResourceType.bind(this)\n    });\n\n    // General file validators\n    this.addValidator('*', 'file-size-limit', {\n      level: 'warning',\n      description: 'Files should be under 1MB for optimal performance',\n      validator: this.validateFileSize.bind(this)\n    });\n\n    this.addValidator('*', 'filename-conventions', {\n      level: 'info',\n      description: 'Files should follow naming conventions',\n      validator: this.validateFilenameConventions.bind(this)\n    });\n\n    // WHO SMART Guidelines specific validators\n    this.addValidator('yaml', 'sushi-config-valid', {\n      level: 'error',\n      description: 'sushi-config.yaml must be valid and contain required fields',\n      validator: this.validateSushiConfig.bind(this)\n    });\n  }\n\n  /**\n   * Add a new validator\n   */\n  addValidator(fileType, validatorId, config) {\n    if (!this.validators.has(fileType)) {\n      this.validators.set(fileType, new Map());\n    }\n    this.validators.get(fileType).set(validatorId, config);\n  }\n\n  /**\n   * Remove a validator\n   */\n  removeValidator(fileType, validatorId) {\n    if (this.validators.has(fileType)) {\n      this.validators.get(fileType).delete(validatorId);\n    }\n  }\n\n  /**\n   * Validate a single file\n   */\n  async validateFile(filePath, content) {\n    const results = [];\n    const fileExtension = this.getFileExtension(filePath);\n    const fileName = this.getFileName(filePath);\n\n    // Get validators for this file type and universal validators\n    const typeValidators = this.validators.get(fileExtension) || new Map();\n    const universalValidators = this.validators.get('*') || new Map();\n\n    // Run type-specific validators\n    for (const [validatorId, config] of typeValidators) {\n      try {\n        const result = await config.validator(filePath, content, fileName);\n        if (result) {\n          results.push({\n            validatorId,\n            level: config.level,\n            description: config.description,\n            ...result\n          });\n        }\n      } catch (error) {\n        results.push({\n          validatorId,\n          level: 'error',\n          description: 'Validator execution failed',\n          message: error.message,\n          filePath\n        });\n      }\n    }\n\n    // Run universal validators\n    for (const [validatorId, config] of universalValidators) {\n      try {\n        const result = await config.validator(filePath, content, fileName);\n        if (result) {\n          results.push({\n            validatorId,\n            level: config.level,\n            description: config.description,\n            ...result\n          });\n        }\n      } catch (error) {\n        results.push({\n          validatorId,\n          level: 'error',\n          description: 'Validator execution failed',\n          message: error.message,\n          filePath\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Validate entire staging ground\n   */\n  async validateStagingGround(stagingGround) {\n    const results = {\n      summary: { error: 0, warning: 0, info: 0 },\n      files: {},\n      validatedAt: Date.now()\n    };\n\n    for (const file of stagingGround.files) {\n      const fileResults = await this.validateFile(file.path, file.content);\n      results.files[file.path] = fileResults;\n\n      // Update summary counts\n      fileResults.forEach(result => {\n        if (result.level === 'error') results.summary.error++;\n        else if (result.level === 'warning') results.summary.warning++;\n        else if (result.level === 'info') results.summary.info++;\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Check if staging ground can be saved (no error-level violations)\n   */\n  async canSave(stagingGround) {\n    const validation = await this.validateStagingGround(stagingGround);\n    return validation.summary.error === 0;\n  }\n\n  // Validator implementations\n\n  async validateXMLWellFormed(filePath, content) {\n    try {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, 'text/xml');\n      const parserError = doc.querySelector('parsererror');\n      \n      if (parserError) {\n        return {\n          message: 'XML is not well-formed: ' + parserError.textContent,\n          filePath\n        };\n      }\n      return null;\n    } catch (error) {\n      return {\n        message: 'Failed to parse XML: ' + error.message,\n        filePath\n      };\n    }\n  }\n\n  async validateBPMNNamespace(filePath, content) {\n    if (!content.includes('xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"')) {\n      return {\n        message: 'BPMN file missing correct BPMN 2.0 namespace declaration',\n        filePath,\n        suggestion: 'Add xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" to root element'\n      };\n    }\n    return null;\n  }\n\n  async validateBPMNStartEvent(filePath, content) {\n    if (!content.includes('<startEvent') && !content.includes('<bpmn:startEvent')) {\n      return {\n        message: 'BPMN process should contain at least one start event',\n        filePath,\n        suggestion: 'Add a start event to begin the process flow'\n      };\n    }\n    return null;\n  }\n\n  async validateDMNNamespace(filePath, content) {\n    if (!content.includes('xmlns:dmn=\"https://www.omg.org/spec/DMN/20191111/MODEL/\"')) {\n      return {\n        message: 'DMN file missing correct DMN 1.3 namespace declaration',\n        filePath,\n        suggestion: 'Add xmlns:dmn=\"https://www.omg.org/spec/DMN/20191111/MODEL/\" to root element'\n      };\n    }\n    return null;\n  }\n\n  async validateJSONSyntax(filePath, content) {\n    try {\n      JSON.parse(content);\n      return null;\n    } catch (error) {\n      return {\n        message: 'Invalid JSON syntax: ' + error.message,\n        filePath\n      };\n    }\n  }\n\n  async validateFHIRResourceType(filePath, content) {\n    try {\n      const json = JSON.parse(content);\n      const validResourceTypes = [\n        'StructureDefinition', 'ValueSet', 'CodeSystem', 'ConceptMap',\n        'Questionnaire', 'PlanDefinition', 'ActivityDefinition', 'Measure',\n        'Library', 'ImplementationGuide', 'Bundle', 'Patient', 'Practitioner'\n      ];\n\n      if (json.resourceType && !validResourceTypes.includes(json.resourceType)) {\n        return {\n          message: `Unknown FHIR resourceType: ${json.resourceType}`,\n          filePath,\n          suggestion: 'Verify the resourceType is correct for FHIR R4'\n        };\n      }\n      return null;\n    } catch (error) {\n      // Not JSON, skip this validator\n      return null;\n    }\n  }\n\n  async validateFileSize(filePath, content) {\n    const sizeInBytes = new Blob([content]).size;\n    const maxSize = 1024 * 1024; // 1MB\n\n    if (sizeInBytes > maxSize) {\n      return {\n        message: `File size (${(sizeInBytes / 1024 / 1024).toFixed(1)}MB) exceeds recommended limit of 1MB`,\n        filePath,\n        suggestion: 'Consider breaking large files into smaller components'\n      };\n    }\n    return null;\n  }\n\n  async validateFilenameConventions(filePath, content) {\n    const fileName = this.getFileName(filePath);\n    const issues = [];\n\n    // Check for spaces in filename\n    if (fileName.includes(' ')) {\n      issues.push('avoid spaces in filenames');\n    }\n\n    // Check for special characters\n    if (/[<>:\"|?*]/.test(fileName)) {\n      issues.push('avoid special characters (<>:\"|?*)');\n    }\n\n    // Check for very long names\n    if (fileName.length > 100) {\n      issues.push('filename is very long (>100 characters)');\n    }\n\n    if (issues.length > 0) {\n      return {\n        message: `Filename convention issues: ${issues.join(', ')}`,\n        filePath,\n        suggestion: 'Use lowercase letters, numbers, hyphens, and underscores'\n      };\n    }\n    return null;\n  }\n\n  async validateSushiConfig(filePath, content) {\n    if (!filePath.endsWith('sushi-config.yaml')) {\n      return null;\n    }\n\n    try {\n      // Basic YAML parsing (would need js-yaml library for full implementation)\n      const lines = content.split('\\n');\n      const hasName = lines.some(line => line.trim().startsWith('name:'));\n      const hasId = lines.some(line => line.trim().startsWith('id:'));\n      const hasDependencies = lines.some(line => line.trim().startsWith('dependencies:'));\n\n      const issues = [];\n      if (!hasName) issues.push('missing \"name\" field');\n      if (!hasId) issues.push('missing \"id\" field');\n      if (!hasDependencies) issues.push('missing \"dependencies\" section');\n\n      if (issues.length > 0) {\n        return {\n          message: `sushi-config.yaml validation issues: ${issues.join(', ')}`,\n          filePath,\n          suggestion: 'Ensure required fields are present for FHIR IG'\n        };\n      }\n      return null;\n    } catch (error) {\n      return {\n        message: 'Failed to validate sushi-config.yaml: ' + error.message,\n        filePath\n      };\n    }\n  }\n\n  // Utility methods\n\n  getFileExtension(filePath) {\n    const parts = filePath.split('.');\n    return parts.length > 1 ? parts[parts.length - 1].toLowerCase() : '';\n  }\n\n  getFileName(filePath) {\n    return filePath.split('/').pop() || filePath;\n  }\n\n  /**\n   * Format validation results for display\n   */\n  formatValidationResults(validation) {\n    const formatted = {\n      canSave: validation.summary.error === 0,\n      summary: validation.summary,\n      files: []\n    };\n\n    Object.entries(validation.files).forEach(([filePath, results]) => {\n      if (results.length > 0) {\n        formatted.files.push({\n          path: filePath,\n          issues: results.map(result => ({\n            level: result.level,\n            message: result.message,\n            description: result.description,\n            suggestion: result.suggestion\n          }))\n        });\n      }\n    });\n\n    return formatted;\n  }\n\n  /**\n   * Get validation summary for UI display\n   */\n  getValidationSummary(validation) {\n    return {\n      error: validation.summary.error,\n      warning: validation.summary.warning,\n      info: validation.summary.info,\n      canSave: validation.summary.error === 0,\n      hasIssues: validation.summary.error + validation.summary.warning + validation.summary.info > 0\n    };\n  }\n}\n\n// Create singleton instance\nconst dakComplianceService = new DAKComplianceService();\n\nexport default dakComplianceService;","import React, { useState, useEffect } from 'react';\nimport githubService from '../services/githubService';\nimport dakComplianceService from '../services/dakComplianceService';\nimport stagingGroundService from '../services/stagingGroundService';\nimport './SaveDialog.css';\n\nconst SaveDialog = ({ \n  isOpen, \n  onClose, \n  stagingGround, \n  validation, \n  repository, \n  selectedBranch,\n  hasWriteAccess,\n  onSaveSuccess \n}) => {\n  const [commitMessage, setCommitMessage] = useState('');\n  const [overrideValidation, setOverrideValidation] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [showValidationDetails, setShowValidationDetails] = useState(false);\n\n  // Reset state when dialog opens\n  useEffect(() => {\n    if (isOpen) {\n      setCommitMessage(stagingGround?.message || '');\n      setOverrideValidation(false);\n      setIsSaving(false);\n      setError(null);\n      setShowValidationDetails(false);\n    }\n  }, [isOpen, stagingGround]);\n\n  if (!isOpen) return null;\n\n  const validationSummary = validation ? dakComplianceService.getValidationSummary(validation) : null;\n  const canSave = validationSummary ? (validationSummary.canSave || overrideValidation) : true;\n  const hasErrors = validationSummary ? validationSummary.error > 0 : false;\n\n  const handleSave = async () => {\n    if (!commitMessage.trim()) {\n      setError('Commit message is required');\n      return;\n    }\n\n    if (!hasWriteAccess) {\n      setError('You need write permissions to save changes');\n      return;\n    }\n\n    if (hasErrors && !overrideValidation) {\n      setError('Cannot save with validation errors. Enable override option to proceed anyway.');\n      return;\n    }\n\n    setIsSaving(true);\n    setError(null);\n\n    try {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      \n      if (repository.isDemo || (repository.owner && repository.owner.login === 'demo-user')) {\n        // Simulate save in demo mode\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        onSaveSuccess({\n          sha: 'demo-commit-sha',\n          message: commitMessage,\n          url: `https://github.com/${repository.full_name}/commit/demo-commit-sha`\n        });\n        return;\n      }\n\n      // Create commit with multiple files\n      const result = await githubService.createCommit(\n        owner,\n        repository.name,\n        selectedBranch,\n        commitMessage.trim(),\n        stagingGround.files\n      );\n\n      onSaveSuccess({\n        sha: result.sha,\n        message: commitMessage,\n        url: result.html_url\n      });\n\n    } catch (err) {\n      console.error('Error saving changes:', err);\n      setError(getErrorMessage(err));\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const getErrorMessage = (error) => {\n    if (error.status === 409) {\n      return 'Conflict detected. The branch has been updated since you started. Please refresh and try again.';\n    } else if (error.status === 403) {\n      return 'Permission denied. Check that your token has write access to this repository.';\n    } else if (error.status === 404) {\n      return 'Repository or branch not found. Please verify the repository exists and you have access.';\n    } else if (error.message) {\n      return error.message;\n    } else {\n      return 'An unexpected error occurred while saving. Please try again.';\n    }\n  };\n\n  const formatValidationIcon = (level) => {\n    switch (level) {\n      case 'error': return '🔴';\n      case 'warning': return '🟡';\n      case 'info': return '🟢';\n      default: return '❓';\n    }\n  };\n\n  // Handle removing individual file\n  const handleRemoveFile = (filePath) => {\n    if (window.confirm(`Are you sure you want to remove \"${filePath}\" from staging? This cannot be undone.`)) {\n      stagingGroundService.removeFile(filePath);\n    }\n  };\n\n  return (\n    <div className=\"save-dialog-overlay\">\n      <div className=\"save-dialog\">\n        <div className=\"dialog-header\">\n          <h3>💾 Save Changes</h3>\n          <button \n            className=\"dialog-close\"\n            onClick={onClose}\n            disabled={isSaving}\n          >\n            ×\n          </button>\n        </div>\n\n        <div className=\"dialog-content\">\n          {/* Files Summary */}\n          <div className=\"save-summary\">\n            <h4>Files to be committed ({stagingGround?.files?.length || 0}):</h4>\n            <div className=\"files-list\">\n              {stagingGround?.files?.map((file, index) => (\n                <div key={index} className=\"file-item\">\n                  <span className=\"file-icon\">📄</span>\n                  <span className=\"file-path\">{file.path}</span>\n                  <span className=\"file-size\">\n                    {(new Blob([file.content]).size / 1024).toFixed(1)} KB\n                  </span>\n                  <button\n                    className=\"remove-file-btn\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleRemoveFile(file.path);\n                    }}\n                    title={`Remove ${file.path} from staging`}\n                    disabled={isSaving}\n                  >\n                    🗑️\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Validation Status */}\n          {validationSummary && (\n            <div className=\"validation-section\">\n              <div \n                className={`validation-summary ${validationSummary.hasIssues ? 'has-issues' : 'clean'}`}\n                onClick={() => setShowValidationDetails(!showValidationDetails)}\n              >\n                <div className=\"validation-header\">\n                  <h4>🚦 Validation Status</h4>\n                  <div className=\"validation-badges\">\n                    {validationSummary.error > 0 && (\n                      <span className=\"validation-badge error\">\n                        🔴 {validationSummary.error}\n                      </span>\n                    )}\n                    {validationSummary.warning > 0 && (\n                      <span className=\"validation-badge warning\">\n                        🟡 {validationSummary.warning}\n                      </span>\n                    )}\n                    {validationSummary.info > 0 && (\n                      <span className=\"validation-badge info\">\n                        🟢 {validationSummary.info}\n                      </span>\n                    )}\n                    {!validationSummary.hasIssues && (\n                      <span className=\"validation-badge success\">\n                        ✅ All clear\n                      </span>\n                    )}\n                  </div>\n                  <span className={`expand-icon ${showValidationDetails ? 'expanded' : ''}`}>\n                    ▼\n                  </span>\n                </div>\n              </div>\n\n              {showValidationDetails && validation && (\n                <div className=\"validation-details\">\n                  {Object.entries(validation.files).map(([filePath, results]) => (\n                    results.length > 0 && (\n                      <div key={filePath} className=\"file-validation\">\n                        <h5>📄 {filePath}</h5>\n                        <div className=\"validation-issues\">\n                          {results.map((result, index) => (\n                            <div key={index} className={`validation-issue ${result.level}`}>\n                              <span className=\"issue-icon\">{formatValidationIcon(result.level)}</span>\n                              <div className=\"issue-content\">\n                                <div className=\"issue-message\">{result.message}</div>\n                                {result.suggestion && (\n                                  <div className=\"issue-suggestion\">💡 {result.suggestion}</div>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n\n              {/* Override option for errors */}\n              {hasErrors && (\n                <div className=\"override-section\">\n                  <label className=\"override-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      checked={overrideValidation}\n                      onChange={(e) => setOverrideValidation(e.target.checked)}\n                    />\n                    <span className=\"checkmark\"></span>\n                    Override validation errors and save anyway\n                  </label>\n                  <p className=\"override-warning\">\n                    ⚠️ Saving with validation errors may cause issues with your DAK.\n                    Only enable this if you're sure about your changes.\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Commit Message */}\n          <div className=\"commit-message-section\">\n            <label htmlFor=\"commit-message\">\n              <h4>✍️ Commit Message</h4>\n            </label>\n            <textarea\n              id=\"commit-message\"\n              className=\"commit-message-input\"\n              value={commitMessage}\n              onChange={(e) => setCommitMessage(e.target.value)}\n              placeholder=\"Describe your changes...\"\n              rows={3}\n              disabled={isSaving}\n              required\n            />\n            <div className=\"commit-tips\">\n              <p>💡 <strong>Tip:</strong> Write a clear, descriptive message about what you changed and why.</p>\n            </div>\n          </div>\n\n          {/* Error Display */}\n          {error && (\n            <div className=\"error-section\">\n              <div className=\"error-message\">\n                <span className=\"error-icon\">❌</span>\n                {error}\n              </div>\n            </div>\n          )}\n\n          {/* Repository Info */}\n          <div className=\"repo-info\">\n            <div className=\"info-item\">\n              <span className=\"info-label\">Repository:</span>\n              <span className=\"info-value\">{repository?.full_name}</span>\n            </div>\n            <div className=\"info-item\">\n              <span className=\"info-label\">Branch:</span>\n              <span className=\"info-value\">{selectedBranch}</span>\n            </div>\n            <div className=\"info-item\">\n              <span className=\"info-label\">Access:</span>\n              <span className={`info-value ${hasWriteAccess ? 'write' : 'read'}`}>\n                {hasWriteAccess ? '✏️ Write' : '👁️ Read-only'}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"dialog-actions\">\n          <button\n            className=\"action-btn secondary\"\n            onClick={onClose}\n            disabled={isSaving}\n          >\n            Cancel\n          </button>\n          <button\n            className=\"action-btn primary\"\n            onClick={handleSave}\n            disabled={!canSave || !commitMessage.trim() || isSaving || !hasWriteAccess}\n          >\n            {isSaving ? (\n              <>\n                <span className=\"saving-spinner\">⏳</span>\n                Saving...\n              </>\n            ) : (\n              <>💾 Save Changes</>\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SaveDialog;","import React, { useState, useEffect, useCallback } from 'react';\nimport stagingGroundService from '../services/stagingGroundService';\nimport dakComplianceService from '../services/dakComplianceService';\nimport SaveDialog from './SaveDialog';\nimport './StagingGround.css';\n\nconst StagingGround = ({ repository, selectedBranch, hasWriteAccess, profile }) => {\n  const [stagingGround, setStagingGround] = useState(null);\n  const [validation, setValidation] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n\n  // Load staging ground data\n  const loadStagingGroundData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const currentStagingGround = stagingGroundService.getStagingGround();\n      setStagingGround(currentStagingGround);\n      \n      if (currentStagingGround.files.length > 0) {\n        await validateStagingGround(currentStagingGround);\n      }\n    } catch (err) {\n      setError('Failed to load staging ground data');\n      console.error('Error loading staging ground:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Initialize staging ground service\n  useEffect(() => {\n    if (repository && selectedBranch) {\n      stagingGroundService.initialize(repository, selectedBranch);\n      loadStagingGroundData();\n\n      // Subscribe to staging ground changes\n      const unsubscribe = stagingGroundService.addListener((updatedStagingGround) => {\n        setStagingGround(updatedStagingGround);\n        validateStagingGround(updatedStagingGround);\n      });\n\n      return unsubscribe;\n    }\n  }, [repository, selectedBranch, loadStagingGroundData]);\n\n  // Validate staging ground\n  const validateStagingGround = async (stagingGroundData) => {\n    if (!stagingGroundData || stagingGroundData.files.length === 0) {\n      setValidation(null);\n      return;\n    }\n\n    try {\n      const validationResult = await dakComplianceService.validateStagingGround(stagingGroundData);\n      setValidation(validationResult);\n    } catch (err) {\n      console.error('Error validating staging ground:', err);\n      setValidation(null);\n    }\n  };\n\n  // Handle saving changes\n  const handleSave = () => {\n    if (!hasWriteAccess) {\n      alert('You need write permissions to save changes to this repository.');\n      return;\n    }\n    \n    setShowSaveDialog(true);\n  };\n\n  // Handle successful save\n  const handleSaveSuccess = (result) => {\n    setShowSaveDialog(false);\n    \n    // Clear staging ground after successful save\n    stagingGroundService.clearStagingGround();\n    \n    // Show success message\n    alert(`Changes saved successfully! Commit: ${result.sha.substring(0, 7)}`);\n  };\n\n  // Handle clearing staging ground\n  const handleClearChanges = () => {\n    if (window.confirm('Are you sure you want to discard all changes? This cannot be undone.')) {\n      stagingGroundService.clearStagingGround();\n    }\n  };\n\n  // Handle removing individual file\n  const handleRemoveFile = (filePath) => {\n    if (window.confirm(`Are you sure you want to remove \"${filePath}\" from staging? This cannot be undone.`)) {\n      stagingGroundService.removeFile(filePath);\n    }\n  };\n\n  // Get validation summary for display\n  const getValidationSummary = () => {\n    if (!validation) {\n      return { error: 0, warning: 0, info: 0, canSave: true };\n    }\n    return dakComplianceService.getValidationSummary(validation);\n  };\n\n  // Format file list for display\n  const formatFileList = () => {\n    if (!stagingGround || !stagingGround.files) return [];\n    \n    return stagingGround.files.map(file => ({\n      path: file.path,\n      size: new Blob([file.content]).size,\n      lastModified: file.timestamp\n    }));\n  };\n\n  const validationSummary = getValidationSummary();\n  const hasChanges = stagingGround && stagingGround.files.length > 0;\n  const filesCount = stagingGround ? stagingGround.files.length : 0;\n\n  return (\n    <div className=\"staging-ground-section\">\n      <div className=\"section-header\">\n        <h3 className=\"section-title\">\n          <span className=\"section-icon\">📝</span>\n          Staging Ground\n          {hasChanges && (\n            <span className=\"files-badge\">\n              {filesCount} file{filesCount !== 1 ? 's' : ''}\n            </span>\n          )}\n        </h3>\n        <p className=\"section-description\">\n          Changes made through DAK component editors are staged here before being committed to the repository.\n          Review and commit your changes when ready.\n        </p>\n      </div>\n\n      <div className=\"staging-content\">\n        {loading ? (\n          <div className=\"loading-indicator\">\n            <span className=\"loading-spinner\">⏳</span>\n            Loading staging ground...\n          </div>\n        ) : error ? (\n          <div className=\"error-message\">\n            <span className=\"error-icon\">⚠️</span>\n            {error}\n          </div>\n        ) : (\n          <>\n            {/* Staging Status Bar */}\n            <div className=\"staging-status-bar\">\n              <div className=\"status-indicators\">\n                {/* Validation stoplight */}\n                <div className=\"validation-stoplight\">\n                  <div className={`stoplight-indicator error ${validationSummary.error === 0 ? 'lit' : ''}`}>\n                    🔴\n                    {validationSummary.error > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.error}</span>\n                    )}\n                  </div>\n                  <div className={`stoplight-indicator warning ${validationSummary.warning === 0 ? 'lit' : ''}`}>\n                    🟡\n                    {validationSummary.warning > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.warning}</span>\n                    )}\n                  </div>\n                  <div className={`stoplight-indicator info ${validationSummary.info === 0 ? 'lit' : ''}`}>\n                    🟢\n                    {validationSummary.info > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.info}</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Save button */}\n              <button\n                className={`save-btn ${!hasChanges || !validationSummary.canSave ? 'disabled' : ''}`}\n                onClick={handleSave}\n                disabled={!hasChanges || !hasWriteAccess}\n                title={\n                  !hasChanges ? 'No changes to save' :\n                  !hasWriteAccess ? 'Write access required' :\n                  !validationSummary.canSave ? 'Fix validation errors first' :\n                  'Save changes to repository'\n                }\n              >\n                💾 Save Changes\n              </button>\n            </div>\n\n            {/* Changed Files Section */}\n            <div className=\"staging-files-section\">\n              <h4>📁 Changed Files</h4>\n              {hasChanges ? (\n                <div className=\"changed-files\">\n                  {formatFileList().map((file, index) => (\n                    <div key={index} className=\"file-item\">\n                      <div className=\"file-info\">\n                        <span className=\"file-icon\">📄</span>\n                        <span className=\"file-path\">{file.path}</span>\n                      </div>\n                      <div className=\"file-meta\">\n                        <span className=\"file-size\">\n                          {(file.size / 1024).toFixed(1)} KB\n                        </span>\n                        <span className=\"file-time\">\n                          {new Date(file.lastModified).toLocaleTimeString()}\n                        </span>\n                        <button\n                          className=\"remove-file-btn\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleRemoveFile(file.path);\n                          }}\n                          title={`Remove ${file.path} from staging`}\n                        >\n                          🗑️\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"file-actions\">\n                    <button\n                      className=\"action-btn secondary small\"\n                      onClick={handleClearChanges}\n                    >\n                      🗑️ Clear All Changes\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"no-changes\">\n                  <p>No changes in staging ground</p>\n                  <p className=\"help-text\">\n                    Changes made through DAK component editors will appear here before being saved to the repository.\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {/* Commit Message Preview */}\n            {hasChanges && stagingGround.message && (\n              <div className=\"commit-message-section\">\n                <h4>✍️ Commit Message</h4>\n                <div className=\"commit-preview\">\n                  <p>{stagingGround.message}</p>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Save Dialog */}\n      <SaveDialog\n        isOpen={showSaveDialog}\n        onClose={() => setShowSaveDialog(false)}\n        stagingGround={stagingGround}\n        validation={validation}\n        repository={repository}\n        selectedBranch={selectedBranch}\n        hasWriteAccess={hasWriteAccess}\n        onSaveSuccess={handleSaveSuccess}\n      />\n    </div>\n  );\n};\n\nexport default StagingGround;","import React, { useState, useEffect } from 'react';\nimport githubService from '../services/githubService';\nimport StagingGround from './StagingGround';\nimport './Publications.css';\n\nconst Publications = ({ profile, repository, selectedBranch, hasWriteAccess }) => {\n  const [branches, setBranches] = useState([]);\n  const [workflows, setWorkflows] = useState([]);\n  const [workflowRuns, setWorkflowRuns] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const owner = repository.owner?.login || repository.full_name.split('/')[0];\n  const repoName = repository.name;\n\n  useEffect(() => {\n    const fetchPublicationData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Handle demo mode - provide mock data\n        if (profile?.isDemo) {\n          const mockBranches = [\n            { name: 'main', commit: { sha: 'abc123' } },\n            { name: 'feature/updates', commit: { sha: 'def456' } },\n            { name: 'dev', commit: { sha: 'ghi789' } }\n          ];\n          setBranches(mockBranches);\n\n          const mockWorkflows = [\n            { id: 'pages-build', name: 'Deploy to GitHub Pages', triggers: ['push', 'manual'] }\n          ];\n          setWorkflows(mockWorkflows);\n\n          // Mock workflow runs\n          const mockWorkflowRuns = {\n            'main': { \n              status: 'completed', \n              conclusion: 'success', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123456`,\n              updated_at: new Date().toISOString()\n            },\n            'feature/updates': { \n              status: 'completed', \n              conclusion: 'action_required', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123457`,\n              updated_at: new Date().toISOString()\n            },\n            'dev': { \n              status: 'completed', \n              conclusion: 'failure', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123458`,\n              updated_at: new Date().toISOString()\n            }\n          };\n          setWorkflowRuns(mockWorkflowRuns);\n          setLoading(false);\n          return;\n        }\n\n        // Fetch branches (excluding gh-pages)\n        const branchesData = await githubService.getBranches(owner, repoName);\n        const filteredBranches = branchesData.filter(branch => branch.name !== 'gh-pages');\n        setBranches(filteredBranches);\n\n        // Fetch workflows to find ghbuild workflow\n        const workflowsData = await githubService.getWorkflows(owner, repoName);\n        setWorkflows(workflowsData);\n\n        // Find the ghbuild workflow (look for workflow with 'build' or 'publish' in name)\n        const ghbuildWorkflow = workflowsData.find(workflow => \n          workflow.name.toLowerCase().includes('build') || \n          workflow.name.toLowerCase().includes('publish') ||\n          workflow.name.toLowerCase().includes('pages')\n        );\n\n        // Fetch recent workflow runs for each branch if ghbuild workflow exists\n        if (ghbuildWorkflow) {\n          const runsByBranch = {};\n          for (const branch of filteredBranches) {\n            try {\n              const runs = await githubService.getWorkflowRunsForWorkflow(\n                owner, \n                repoName, \n                ghbuildWorkflow.id,\n                { branch: branch.name, per_page: 1 }\n              );\n              if (runs.length > 0) {\n                runsByBranch[branch.name] = runs[0];\n              }\n            } catch (err) {\n              console.warn(`Could not fetch workflow runs for branch ${branch.name}:`, err);\n            }\n          }\n          setWorkflowRuns(runsByBranch);\n        }\n\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching publication data:', err);\n        setError('Failed to load publication data');\n        setLoading(false);\n      }\n    };\n\n    fetchPublicationData();\n  }, [owner, repoName, profile?.isDemo]);\n\n  const getPublicationUrl = (branchName) => {\n    if (branchName === repository.default_branch || branchName === 'main') {\n      return `https://${owner}.github.io/${repoName}/`;\n    } else {\n      return `https://${owner}.github.io/${repoName}/branches/${branchName}/`;\n    }\n  };\n\n  const getWorkflowStatusIcon = (branchName) => {\n    const run = workflowRuns[branchName];\n    if (!run) return { icon: '⚪', title: 'No recent workflow runs', link: null };\n\n    const status = run.status;\n    const conclusion = run.conclusion;\n\n    if (status === 'in_progress' || status === 'queued') {\n      return { \n        icon: '🔄', \n        title: 'Workflow running', \n        link: run.html_url,\n        className: 'running' \n      };\n    } else if (conclusion === 'success') {\n      return { \n        icon: '✅', \n        title: 'Last build successful', \n        link: run.html_url,\n        className: 'success' \n      };\n    } else if (conclusion === 'failure') {\n      return { \n        icon: '❌', \n        title: 'Last build failed', \n        link: run.html_url,\n        className: 'failure' \n      };\n    } else if (conclusion === 'action_required') {\n      return { \n        icon: '⏳', \n        title: 'Workflow requires approval', \n        link: run.html_url,\n        className: 'approval-required' \n      };\n    } else {\n      return { \n        icon: '⚠️', \n        title: `Build ${conclusion || status}`, \n        link: run.html_url,\n        className: 'warning' \n      };\n    }\n  };\n\n  const handleRestartWorkflow = async (branchName) => {\n    // Handle demo mode\n    if (profile?.isDemo) {\n      alert(`Demo Mode: Workflow restart simulated for branch: ${branchName}`);\n      return;\n    }\n\n    const ghbuildWorkflow = workflows.find(workflow => \n      workflow.name.toLowerCase().includes('build') || \n      workflow.name.toLowerCase().includes('publish') ||\n      workflow.name.toLowerCase().includes('pages')\n    );\n\n    if (!ghbuildWorkflow) {\n      alert('No suitable workflow found to restart');\n      return;\n    }\n\n    try {\n      await githubService.triggerWorkflow(owner, repoName, ghbuildWorkflow.id, branchName);\n      alert(`Workflow restarted for branch: ${branchName}`);\n      \n      // Refresh workflow runs after a delay\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    } catch (err) {\n      console.error('Error restarting workflow:', err);\n      alert('Failed to restart workflow. Please check your permissions.');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"publications-loading\">\n        <div className=\"loading-content\">\n          <h3>Loading Publications...</h3>\n          <p>Fetching branch and workflow information...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"publications-error\">\n        <div className=\"error-content\">\n          <h3>Error Loading Publications</h3>\n          <p>{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"publications-section\">\n      {/* Staging Ground Section */}\n      <StagingGround\n        repository={repository}\n        selectedBranch={selectedBranch}\n        hasWriteAccess={hasWriteAccess}\n        profile={profile}\n      />\n      \n      <div className=\"section-header\">\n        <h3 className=\"section-title\">Published DAK Content</h3>\n        <p className=\"section-description\">\n          Access published Implementation Guide content for this DAK repository. Each branch is published \n          automatically via GitHub Actions to GitHub Pages.\n        </p>\n      </div>\n\n      <div className=\"publications-grid\">\n        {branches.map((branch) => {\n          const isMainBranch = branch.name === repository.default_branch || branch.name === 'main';\n          const publicationUrl = getPublicationUrl(branch.name);\n          const workflowStatus = getWorkflowStatusIcon(branch.name);\n\n          return (\n            <div key={branch.name} className={`publication-card ${isMainBranch ? 'main-branch' : ''}`}>\n              <div className=\"publication-header\">\n                <div className=\"branch-info\">\n                  <span className=\"branch-icon\">🌿</span>\n                  <span className=\"branch-name\">{branch.name}</span>\n                  {isMainBranch && <span className=\"main-badge\">MAIN</span>}\n                </div>\n                <div className=\"workflow-status\">\n                  {workflowStatus.link ? (\n                    <a \n                      href={workflowStatus.link} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className={`status-icon ${workflowStatus.className || ''}`}\n                      title={workflowStatus.title}\n                    >\n                      {workflowStatus.icon}\n                    </a>\n                  ) : (\n                    <span \n                      className={`status-icon ${workflowStatus.className || ''}`}\n                      title={workflowStatus.title}\n                    >\n                      {workflowStatus.icon}\n                    </span>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"publication-content\">\n                <div className=\"publication-url\">\n                  <label>Published at:</label>\n                  <a \n                    href={publicationUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"publication-link\"\n                  >\n                    {publicationUrl}\n                    <span className=\"external-link\">↗</span>\n                  </a>\n                </div>\n\n                <div className=\"publication-actions\">\n                  <button\n                    className=\"restart-workflow-btn\"\n                    onClick={() => handleRestartWorkflow(branch.name)}\n                    disabled={!hasWriteAccess}\n                    title={hasWriteAccess ? 'Restart build workflow for this branch' : 'Write permissions required'}\n                  >\n                    🔄 Rebuild\n                  </button>\n                  \n                  <a \n                    href={`https://github.com/${owner}/${repoName}/tree/${branch.name}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"view-source-btn\"\n                    title=\"View source code for this branch\"\n                  >\n                    👁️ View Source\n                  </a>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {branches.length === 0 && (\n        <div className=\"no-branches\">\n          <p>No publishable branches found (excluding gh-pages).</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Publications;","import React, { useState, useEffect } from 'react';\nimport { PageLayout, useDAKParams } from './framework';\nimport githubService from '../services/githubService';\nimport branchContextService from '../services/branchContextService';\nimport DAKStatusBox from './DAKStatusBox';\nimport Publications from './Publications';\nimport './DAKDashboard.css';\n\nconst DAKDashboardWithFramework = () => {\n  return (\n    <PageLayout pageName=\"dashboard\">\n      <DAKDashboardContent />\n    </PageLayout>\n  );\n};\n\nconst DAKDashboardContent = () => {\n  const { profile, repository, branch, navigate } = useDAKParams();\n  \n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n  const [showPermissionDialog, setShowPermissionDialog] = useState(false);\n  const [activeTab, setActiveTab] = useState('core'); // 'core', 'additional', or 'publications'\n  const [issueCounts, setIssueCounts] = useState({});\n\n  // Check write permissions\n  useEffect(() => {\n    const checkWritePermissions = async () => {\n      if (!repository || !githubService.isAuth()) {\n        setHasWriteAccess(false);\n        return;\n      }\n\n      try {\n        // Check repository permissions\n        const hasPermission = await githubService.checkRepositoryPermissions(repository.owner.login, repository.name);\n        setHasWriteAccess(hasPermission);\n      } catch (error) {\n        console.error('Error checking repository permissions:', error);\n        setHasWriteAccess(false);\n      }\n    };\n\n    checkWritePermissions();\n  }, [repository]);\n\n  // Set branch context\n  useEffect(() => {\n    if (profile && repository && branch) {\n      branchContextService.setBranchContext(profile.login, repository.name, branch);\n    }\n  }, [profile, repository, branch]);\n\n  // Fetch issue counts for repository (if authenticated)\n  useEffect(() => {\n    const fetchIssueCounts = async () => {\n      if (!repository || !githubService.isAuth()) {\n        return;\n      }\n\n      try {\n        const issues = await githubService.getRepositoryIssues(repository.owner.login, repository.name);\n        \n        // Count issues by label\n        const counts = {};\n        issues.forEach(issue => {\n          issue.labels.forEach(label => {\n            counts[label.name] = (counts[label.name] || 0) + 1;\n          });\n        });\n        \n        setIssueCounts(counts);\n      } catch (error) {\n        console.warn('Could not fetch issue counts:', error);\n      }\n    };\n\n    fetchIssueCounts();\n  }, [repository]);\n\n  const handleComponentNavigate = (componentPath) => {\n    if (profile && repository) {\n      navigate(`/${componentPath}/${profile.login}/${repository.name}/${branch}`, {\n        state: {\n          profile,\n          repository,\n          selectedBranch: branch\n        }\n      });\n    }\n  };\n\n  const handlePublicationNavigate = () => {\n    if (profile && repository) {\n      navigate(`/publications/${profile.login}/${repository.name}/${branch}`, {\n        state: {\n          profile,\n          repository,\n          selectedBranch: branch\n        }\n      });\n    }\n  };\n\n  // Define the 9 core DAK components based on WHO SMART Guidelines documentation\n  const dakComponents = [\n    // Core Components (Level 2)\n    {\n      id: 'health-interventions',\n      title: 'Health Interventions and Recommendations',\n      description: 'Clinical guidelines and health intervention specifications that define evidence-based care recommendations',\n      icon: '📖',\n      path: 'health-interventions',\n      level: 'Level 2: Core Components',\n      color: '#0078d4'\n    },\n    {\n      id: 'generic-personas',\n      title: 'Generic Personas',\n      description: 'Standardized user roles and actor definitions that represent different types of healthcare workers and patients',\n      icon: '👥',\n      path: 'actor-editor',\n      level: 'Level 2: Core Components',\n      color: '#107c10'\n    },\n    {\n      id: 'user-scenarios',\n      title: 'User Scenarios',\n      description: 'Narrative descriptions of how different personas interact with the system in specific healthcare contexts',\n      icon: '📝',\n      path: 'user-scenarios',\n      level: 'Level 2: Core Components',\n      color: '#881798'\n    },\n    {\n      id: 'business-processes',\n      title: 'Generic Business Processes and Workflows',\n      description: 'BPMN workflows and business process definitions that model clinical workflows and care pathways',\n      icon: '🔄',\n      path: 'business-process-selection',\n      level: 'Level 2: Core Components',\n      color: '#d13438'\n    },\n    {\n      id: 'core-data-elements',\n      title: 'Core Data Elements',\n      description: 'Essential data structures and terminology needed for clinical data capture and exchange',\n      icon: '🗃️',\n      path: 'core-data-dictionary-viewer',\n      level: 'Level 2: Core Components',\n      color: '#ff8c00'\n    },\n    {\n      id: 'decision-support',\n      title: 'Decision-Support Logic',\n      description: 'DMN decision tables and clinical decision support rules that encode clinical logic',\n      icon: '🎯',\n      path: 'decision-support-logic',\n      level: 'Level 2: Core Components',\n      color: '#00bcf2'\n    },\n    {\n      id: 'program-indicators',\n      title: 'Program Indicators',\n      description: 'Performance indicators and measurement definitions for monitoring and evaluation',\n      icon: '📊',\n      path: 'program-indicators',\n      level: 'Level 2: Core Components',\n      color: '#498205'\n    },\n    {\n      id: 'functional-requirements',\n      title: 'Functional and Non-Functional Requirements',\n      description: 'System requirements specifications that define capabilities and constraints',\n      icon: '⚙️',\n      path: 'functional-requirements',\n      level: 'Level 2: Core Components',\n      color: '#6b69d6'\n    },\n    {\n      id: 'testing',\n      title: 'Testing',\n      description: 'Feature files and test scenarios for validating the DAK implementation',\n      icon: '🧪',\n      path: 'testing-viewer',\n      level: 'Level 2: Core Components',\n      color: '#8b5cf6'\n    },\n    // Additional Components (Level 3)\n    {\n      id: 'terminology',\n      title: 'Terminology',\n      description: 'Code systems, value sets, and concept maps',\n      icon: '🏷️',\n      path: 'terminology',\n      level: 'Level 3: Technical Implementation',\n      color: '#ff8c00'\n    },\n    {\n      id: 'profiles',\n      title: 'FHIR Profiles',\n      description: 'FHIR resource profiles and constraints',\n      icon: '🔧',\n      path: 'profiles',\n      level: 'Level 3: Technical Implementation',\n      color: '#00bcf2'\n    },\n    {\n      id: 'extensions',\n      title: 'FHIR Extensions',\n      description: 'Custom FHIR extensions and modifications',\n      icon: '🧩',\n      path: 'extensions',\n      level: 'Level 3: Technical Implementation',\n      color: '#498205'\n    },\n    {\n      id: 'test-data',\n      title: 'Test Data & Examples',\n      description: 'Sample data and testing resources',\n      icon: '🧪',\n      path: 'test-data',\n      level: 'Level 3: Technical Implementation',\n      color: '#8b5cf6'\n    },\n    {\n      id: 'questionnaire-editor',\n      title: 'FHIR Questionnaires',\n      description: 'Structured questionnaires and forms for data collection using FHIR standard',\n      icon: '📋',\n      path: 'questionnaire-editor',\n      level: 'Level 3: Technical Implementation',\n      color: '#17a2b8'\n    }\n  ];\n\n  const coreComponents = dakComponents.filter(comp => comp.level.includes('Level 2: Core Components'));\n  const additionalComponents = dakComponents.filter(comp => comp.level.includes('Level 3: Technical Implementation'));\n\n  return (\n    <div className=\"dak-dashboard\">\n        <div className=\"dashboard-header\">\n          <div className=\"dashboard-title\">\n            <h1>{repository?.name} Dashboard</h1>\n            <p className=\"dashboard-subtitle\">\n              Digital Adaptation Kit for {profile?.name || profile?.login}\n            </p>\n          </div>\n        </div>\n\n        {repository && (\n          <DAKStatusBox \n            repository={repository}\n            profile={profile}\n            selectedBranch={branch}\n            issueCounts={issueCounts}\n          />\n        )}\n\n        <div className=\"tab-navigation\">\n          <button \n            className={`tab-button ${activeTab === 'core' ? 'active' : ''}`}\n            onClick={() => setActiveTab('core')}\n          >\n            <span className=\"tab-icon\">⭐</span>\n            <span className=\"tab-text\">9 Core Components</span>\n          </button>\n          <button \n            className={`tab-button ${activeTab === 'additional' ? 'active' : ''}`}\n            onClick={() => setActiveTab('additional')}\n          >\n            <span className=\"tab-icon\">🔧</span>\n            <span className=\"tab-text\">Additional Components ({additionalComponents.length})</span>\n          </button>\n          <button \n            className={`tab-button ${activeTab === 'publications' ? 'active' : ''}`}\n            onClick={() => setActiveTab('publications')}\n          >\n            <span className=\"tab-icon\">📚</span>\n            <span className=\"tab-text\">Publications</span>\n          </button>\n        </div>\n\n        <div className=\"dashboard-content\">\n          {activeTab === 'core' && (\n            <div className=\"components-grid core-components\">\n              {coreComponents.map(component => (\n                <div \n                  key={component.id}\n                  className=\"component-card\"\n                  onClick={() => handleComponentNavigate(component.path)}\n                >\n                  <div className=\"component-icon\">{component.icon}</div>\n                  <h3>{component.title}</h3>\n                  <p>{component.description}</p>\n                  {issueCounts[component.id] > 0 && (\n                    <div className=\"issue-badge\">\n                      {issueCounts[component.id]} issues\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n\n          {activeTab === 'additional' && (\n            <div className=\"components-grid additional-components\">\n              {additionalComponents.map(component => (\n                <div \n                  key={component.id}\n                  className=\"component-card\"\n                  onClick={() => handleComponentNavigate(component.path)}\n                >\n                  <div className=\"component-icon\">{component.icon}</div>\n                  <h3>{component.title}</h3>\n                  <p>{component.description}</p>\n                  {issueCounts[component.id] > 0 && (\n                    <div className=\"issue-badge\">\n                      {issueCounts[component.id]} issues\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n\n          {activeTab === 'publications' && (\n            <div className=\"publications-section\">\n              <Publications \n                repository={repository}\n                profile={profile}\n                selectedBranch={branch}\n                onNavigate={handlePublicationNavigate}\n              />\n            </div>\n          )}\n        </div>\n\n        {showPermissionDialog && (\n          <div className=\"permission-dialog\">\n            <div className=\"dialog-overlay\" onClick={() => setShowPermissionDialog(false)}></div>\n            <div className=\"dialog-content\">\n              <h3>Repository Permissions</h3>\n              <p>\n                You have {hasWriteAccess ? 'write' : 'read-only'} access to this repository.\n                {!hasWriteAccess && ' You can view content but cannot make changes.'}\n              </p>\n              <button onClick={() => setShowPermissionDialog(false)}>\n                Got it\n              </button>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default DAKDashboardWithFramework;"],"names":["constructor","this","validators","Map","initializeDefaultValidators","addValidator","level","description","validator","validateXMLWellFormed","bind","validateBPMNNamespace","validateBPMNStartEvent","validateDMNNamespace","validateJSONSyntax","validateFHIRResourceType","validateFileSize","validateFilenameConventions","validateSushiConfig","fileType","validatorId","config","has","set","get","removeValidator","delete","validateFile","filePath","content","results","fileExtension","getFileExtension","fileName","getFileName","typeValidators","universalValidators","result","push","error","message","validateStagingGround","stagingGround","summary","warning","info","files","validatedAt","Date","now","file","fileResults","path","forEach","canSave","parser","DOMParser","parserError","parseFromString","querySelector","textContent","includes","suggestion","JSON","parse","json","validResourceTypes","resourceType","sizeInBytes","Blob","size","toFixed","issues","test","length","join","endsWith","lines","split","hasName","some","line","trim","startsWith","hasId","hasDependencies","parts","toLowerCase","pop","formatValidationResults","validation","formatted","Object","entries","_ref","map","getValidationSummary","hasIssues","_stagingGround$files","_stagingGround$files2","isOpen","onClose","repository","selectedBranch","hasWriteAccess","onSaveSuccess","commitMessage","setCommitMessage","useState","overrideValidation","setOverrideValidation","isSaving","setIsSaving","setError","showValidationDetails","setShowValidationDetails","useEffect","validationSummary","dakComplianceService","hasErrors","getErrorMessage","status","formatValidationIcon","_jsx","className","children","_jsxs","onClick","disabled","index","e","stopPropagation","window","confirm","stagingGroundService","removeFile","title","_ref2","type","checked","onChange","target","htmlFor","id","value","placeholder","rows","required","full_name","async","_repository$owner","owner","login","isDemo","Promise","resolve","setTimeout","sha","url","githubService","createCommit","name","html_url","err","console","_Fragment","profile","setStagingGround","setValidation","loading","setLoading","showSaveDialog","setShowSaveDialog","loadStagingGroundData","useCallback","currentStagingGround","getStagingGround","initialize","addListener","updatedStagingGround","stagingGroundData","validationResult","hasChanges","filesCount","handleSave","alert","lastModified","timestamp","toLocaleTimeString","handleClearChanges","clearStagingGround","SaveDialog","substring","branches","setBranches","workflows","setWorkflows","workflowRuns","setWorkflowRuns","repoName","commit","triggers","mockWorkflowRuns","conclusion","updated_at","toISOString","filteredBranches","getBranches","filter","branch","workflowsData","getWorkflows","ghbuildWorkflow","find","workflow","runsByBranch","runs","getWorkflowRunsForWorkflow","per_page","warn","fetchPublicationData","StagingGround","isMainBranch","default_branch","publicationUrl","branchName","workflowStatus","run","icon","link","getWorkflowStatusIcon","href","rel","triggerWorkflow","location","reload","handleRestartWorkflow","DAKDashboardContent","navigate","useDAKParams","setHasWriteAccess","showPermissionDialog","setShowPermissionDialog","activeTab","setActiveTab","issueCounts","setIssueCounts","isAuth","hasPermission","checkRepositoryPermissions","checkWritePermissions","branchContextService","setBranchContext","getRepositoryIssues","counts","issue","labels","label","fetchIssueCounts","handleComponentNavigate","componentPath","state","dakComponents","color","coreComponents","comp","additionalComponents","DAKStatusBox","component","Publications","onNavigate","handlePublicationNavigate","DAKDashboardWithFramework","PageLayout","pageName"],"sourceRoot":""}