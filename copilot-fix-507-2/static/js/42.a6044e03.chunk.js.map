{"version":3,"file":"static/js/42.a6044e03.chunk.js","mappings":"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","sources":["components/QuestionnaireEditor.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { PageLayout, AssetEditorLayout, useDAKParams } from './framework';\nimport ContextualHelpMascot from './ContextualHelpMascot';\nimport githubService from '../services/githubService';\nimport './QuestionnaireEditor.css';\n\n// Simple Visual Editor Component (without LForms dependency for now)\nconst LFormsVisualEditor = ({ questionnaire, onChange, onError }) => {\n  const [previewMode, setPreviewMode] = useState(false);\n  \n  const addQuestion = () => {\n    const newItem = {\n      linkId: `item-${Date.now()}`,\n      text: `New Question ${(questionnaire.item?.length || 0) + 1}`,\n      type: 'string',\n      required: false\n    };\n    \n    const updatedQuestionnaire = {\n      ...questionnaire,\n      item: [...(questionnaire.item || []), newItem]\n    };\n    \n    onChange(updatedQuestionnaire);\n  };\n\n  const removeQuestion = (index) => {\n    if (!questionnaire.item) return;\n    \n    const updatedItems = questionnaire.item.filter((_, i) => i !== index);\n    const updatedQuestionnaire = {\n      ...questionnaire,\n      item: updatedItems\n    };\n    \n    onChange(updatedQuestionnaire);\n  };\n\n  const updateQuestion = (index, field, value) => {\n    if (!questionnaire.item) return;\n    \n    const updatedItems = [...questionnaire.item];\n    updatedItems[index] = { ...updatedItems[index], [field]: value };\n    \n    const updatedQuestionnaire = {\n      ...questionnaire,\n      item: updatedItems\n    };\n    \n    onChange(updatedQuestionnaire);\n  };\n\n  const updateMetadata = (field, value) => {\n    const updatedQuestionnaire = {\n      ...questionnaire,\n      [field]: value\n    };\n    onChange(updatedQuestionnaire);\n  };\n\n  return (\n    <div className=\"lforms-visual-editor\">\n      <div className=\"editor-modes\">\n        <button \n          className={`mode-toggle ${!previewMode ? 'active' : ''}`}\n          onClick={() => setPreviewMode(false)}\n        >\n          🔧 Build Mode\n        </button>\n        <button \n          className={`mode-toggle ${previewMode ? 'active' : ''}`}\n          onClick={() => setPreviewMode(true)}\n        >\n          👁️ Preview Mode\n        </button>\n      </div>\n\n      {previewMode ? (\n        <div className=\"lforms-preview\">\n          <h5>Live Preview</h5>\n          <div className=\"simple-questionnaire-preview\">\n            <div className=\"preview-header\">\n              <h3>{questionnaire.title || 'Untitled Questionnaire'}</h3>\n              <p>{questionnaire.description || 'No description provided'}</p>\n            </div>\n            \n            <div className=\"preview-questions\">\n              {questionnaire.item?.map((item, index) => (\n                <div key={item.linkId} className=\"preview-question\">\n                  <label className=\"preview-question-label\">\n                    {index + 1}. {item.text}\n                    {item.required && <span className=\"required-asterisk\"> *</span>}\n                  </label>\n                  \n                  {item.type === 'string' && (\n                    <input type=\"text\" placeholder=\"Text answer\" disabled />\n                  )}\n                  {item.type === 'text' && (\n                    <textarea placeholder=\"Long text answer\" disabled rows={3} />\n                  )}\n                  {item.type === 'boolean' && (\n                    <div className=\"preview-boolean\">\n                      <label><input type=\"radio\" disabled /> Yes</label>\n                      <label><input type=\"radio\" disabled /> No</label>\n                    </div>\n                  )}\n                  {item.type === 'decimal' && (\n                    <input type=\"number\" step=\"0.01\" placeholder=\"Number\" disabled />\n                  )}\n                  {item.type === 'integer' && (\n                    <input type=\"number\" step=\"1\" placeholder=\"Integer\" disabled />\n                  )}\n                  {item.type === 'date' && (\n                    <input type=\"date\" disabled />\n                  )}\n                  {item.type === 'choice' && (\n                    <select disabled>\n                      <option>Select an option...</option>\n                    </select>\n                  )}\n                </div>\n              )) || <p className=\"no-questions-preview\">No questions added yet.</p>}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"lforms-builder\">\n          <div className=\"questionnaire-metadata-editor\">\n            <h5>Questionnaire Details</h5>\n            <div className=\"metadata-grid\">\n              <div className=\"field-group\">\n                <label>Title:</label>\n                <input\n                  type=\"text\"\n                  value={questionnaire.title || ''}\n                  onChange={(e) => updateMetadata('title', e.target.value)}\n                  placeholder=\"Enter questionnaire title\"\n                />\n              </div>\n              <div className=\"field-group\">\n                <label>Name:</label>\n                <input\n                  type=\"text\"\n                  value={questionnaire.name || ''}\n                  onChange={(e) => updateMetadata('name', e.target.value)}\n                  placeholder=\"Enter questionnaire name\"\n                />\n              </div>\n              <div className=\"field-group\">\n                <label>Status:</label>\n                <select\n                  value={questionnaire.status || 'draft'}\n                  onChange={(e) => updateMetadata('status', e.target.value)}\n                >\n                  <option value=\"draft\">Draft</option>\n                  <option value=\"active\">Active</option>\n                  <option value=\"retired\">Retired</option>\n                </select>\n              </div>\n              <div className=\"field-group\">\n                <label>Publisher:</label>\n                <input\n                  type=\"text\"\n                  value={questionnaire.publisher || ''}\n                  onChange={(e) => updateMetadata('publisher', e.target.value)}\n                  placeholder=\"Enter publisher\"\n                />\n              </div>\n            </div>\n            <div className=\"field-group\">\n              <label>Description:</label>\n              <textarea\n                value={questionnaire.description || ''}\n                onChange={(e) => updateMetadata('description', e.target.value)}\n                placeholder=\"Enter questionnaire description\"\n                rows={3}\n              />\n            </div>\n          </div>\n\n          <div className=\"questions-builder\">\n            <div className=\"questions-header\">\n              <h5>Questions ({questionnaire.item?.length || 0})</h5>\n              <button onClick={addQuestion} className=\"add-question-btn\">\n                + Add Question\n              </button>\n            </div>\n\n            {questionnaire.item?.map((item, index) => (\n              <div key={item.linkId} className=\"question-editor\">\n                <div className=\"question-header\">\n                  <span className=\"question-number\">Q{index + 1}</span>\n                  <button \n                    onClick={() => removeQuestion(index)} \n                    className=\"remove-question-btn\"\n                    title=\"Remove question\"\n                  >\n                    ✕\n                  </button>\n                </div>\n                \n                <div className=\"question-fields\">\n                  <div className=\"field-group\">\n                    <label>Question Text:</label>\n                    <input\n                      type=\"text\"\n                      value={item.text || ''}\n                      onChange={(e) => updateQuestion(index, 'text', e.target.value)}\n                      placeholder=\"Enter question text\"\n                    />\n                  </div>\n                  \n                  <div className=\"field-group\">\n                    <label>Link ID:</label>\n                    <input\n                      type=\"text\"\n                      value={item.linkId || ''}\n                      onChange={(e) => updateQuestion(index, 'linkId', e.target.value)}\n                      placeholder=\"Enter unique ID\"\n                    />\n                  </div>\n                  \n                  <div className=\"field-group\">\n                    <label>Question Type:</label>\n                    <select\n                      value={item.type || 'string'}\n                      onChange={(e) => updateQuestion(index, 'type', e.target.value)}\n                    >\n                      <option value=\"string\">Short Text</option>\n                      <option value=\"text\">Long Text</option>\n                      <option value=\"boolean\">Yes/No</option>\n                      <option value=\"decimal\">Decimal Number</option>\n                      <option value=\"integer\">Integer</option>\n                      <option value=\"date\">Date</option>\n                      <option value=\"choice\">Single Choice</option>\n                      <option value=\"open-choice\">Choice with Other</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"field-group checkbox-group\">\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={item.required || false}\n                        onChange={(e) => updateQuestion(index, 'required', e.target.checked)}\n                      />\n                      Required\n                    </label>\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            {(!questionnaire.item || questionnaire.item.length === 0) && (\n              <div className=\"no-questions\">\n                <p>No questions yet. Click \"Add Question\" to get started.</p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst QuestionnaireEditorContent = () => {\n  const navigate = useNavigate();\n  const { repository, branch } = useDAKParams();\n  \n  // Component state\n  const [questionnaires, setQuestionnaires] = useState([]);\n  const [selectedQuestionnaire, setSelectedQuestionnaire] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [editing, setEditing] = useState(false);\n  const [questionnaireContent, setQuestionnaireContent] = useState(null);\n  const [originalContent, setOriginalContent] = useState(null);\n  \n  // LForms integration state\n  const [lformsLoaded, setLformsLoaded] = useState(false);\n  const [editMode, setEditMode] = useState('visual'); // 'visual' or 'json'\n  const [lformsError, setLformsError] = useState(null);\n\n  // Load LForms library\n  useEffect(() => {\n    const loadLForms = async () => {\n      try {\n        setLformsError(null);\n        \n        // For now, enable the visual editor without loading external LForms\n        // TODO: Add proper LForms integration for advanced features\n        console.log('Using built-in visual editor');\n        setLformsLoaded(true);\n      } catch (error) {\n        console.error('Failed to load LForms:', error);\n        setLformsError(`Failed to load questionnaire editor: ${error.message}`);\n        // Still mark as loaded to enable basic functionality\n        setLformsLoaded(true);\n      }\n    };\n\n    loadLForms();\n  }, []);\n\n  // Load questionnaires from repository\n  useEffect(() => {\n    const loadQuestionnaires = async () => {\n      // Don't attempt to load if repository/branch are not available yet\n      if (!repository || !branch) {\n        console.log('QuestionnaireEditor: Repository or branch not available yet, waiting...', { repository: !!repository, branch: !!branch });\n        return;\n      }\n      \n      try {\n        console.log('QuestionnaireEditor: Loading questionnaires for', repository.name, 'branch', branch);\n        setLoading(true);\n        setError(null);\n        \n        const allQuestionnaires = [];\n        \n        // Check multiple possible locations for questionnaires\n        const paths = [\n          { path: 'input/questionnaires', extensions: ['.json'], type: 'JSON' },\n          { path: 'input/fsh/questionnaires', extensions: ['.fsh'], type: 'FSH' }\n        ];\n        \n        for (const pathConfig of paths) {\n          try {\n            const files = await githubService.getDirectoryContents(\n              repository.owner.login,\n              repository.name,\n              pathConfig.path,\n              branch\n            );\n            \n            // Filter for supported file extensions\n            const questionnaireFiles = files\n              .filter(file => file.type === 'file' && \n                pathConfig.extensions.some(ext => file.name.endsWith(ext)))\n              .map(file => {\n                const extension = pathConfig.extensions.find(ext => file.name.endsWith(ext));\n                return {\n                  ...file,\n                  displayName: file.name.replace(extension, ''),\n                  fullPath: `${pathConfig.path}/${file.name}`,\n                  fileType: pathConfig.type,\n                  extension: extension\n                };\n              });\n            \n            allQuestionnaires.push(...questionnaireFiles);\n          } catch (error) {\n            // Directory doesn't exist, continue with other paths\n            if (error.status !== 404) {\n              console.warn(`Error loading from ${pathConfig.path}:`, error);\n            }\n          }\n        }\n        \n        setQuestionnaires(allQuestionnaires);\n      } catch (error) {\n        console.error('Error loading questionnaires:', error);\n        setError(`Failed to load questionnaires: ${error.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadQuestionnaires();\n  }, [repository, branch]);\n\n  // Early return if PageProvider context is not ready\n  if (!repository || !branch) {\n    return (\n      <div className=\"questionnaire-editor-loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Initializing Questionnaire Editor...</p>\n      </div>\n    );\n  }\n\n  // Load questionnaire content\n  const loadQuestionnaireContent = async (questionnaire) => {\n    try {\n      setLoading(true);\n      const content = await githubService.getFileContent(\n        repository.owner.login,\n        repository.name,\n        questionnaire.fullPath,\n        branch\n      );\n      \n      let questionnaireData;\n      \n      if (questionnaire.fileType === 'JSON') {\n        // Parse JSON questionnaire\n        questionnaireData = JSON.parse(content);\n      } else if (questionnaire.fileType === 'FSH') {\n        // For FSH files, create a preview object with metadata\n        questionnaireData = {\n          resourceType: 'Questionnaire',\n          fileType: 'FSH',\n          title: extractFshTitle(content) || questionnaire.displayName,\n          status: extractFshStatus(content) || 'draft',\n          name: extractFshName(content) || questionnaire.displayName,\n          description: extractFshDescription(content) || 'FHIR Shorthand Questionnaire',\n          rawContent: content,\n          isReadOnly: true\n        };\n      }\n      \n      setQuestionnaireContent(questionnaireData);\n      setOriginalContent(content);\n      setSelectedQuestionnaire(questionnaire);\n      setEditing(true);\n      \n      console.log('Questionnaire loaded:', questionnaireData);\n    } catch (error) {\n      console.error('Error loading questionnaire content:', error);\n      setError(`Failed to load questionnaire: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Helper functions to extract metadata from FSH content\n  const extractFshTitle = (content) => {\n    const titleMatch = content.match(/\\*\\s*title\\s*=\\s*\"([^\"]+)\"/);\n    return titleMatch ? titleMatch[1] : null;\n  };\n\n  const extractFshStatus = (content) => {\n    const statusMatch = content.match(/\\*\\s*status\\s*=\\s*#(\\w+)/);\n    return statusMatch ? statusMatch[1] : null;\n  };\n\n  const extractFshName = (content) => {\n    const nameMatch = content.match(/\\*\\s*name\\s*=\\s*\"([^\"]+)\"/);\n    return nameMatch ? nameMatch[1] : null;\n  };\n\n  const extractFshDescription = (content) => {\n    const descMatch = content.match(/\\*\\s*description\\s*=\\s*\"([^\"]+)\"/);\n    return descMatch ? descMatch[1] : null;\n  };\n\n  // Create new questionnaire\n  const createNewQuestionnaire = () => {\n    const newQuestionnaire = {\n      resourceType: 'Questionnaire',\n      id: `questionnaire-${Date.now()}`,\n      meta: {\n        versionId: '1',\n        lastUpdated: new Date().toISOString()\n      },\n      url: `http://example.org/Questionnaire/${Date.now()}`,\n      name: 'NewQuestionnaire',\n      title: 'New Questionnaire',\n      status: 'draft',\n      date: new Date().toISOString().split('T')[0],\n      publisher: 'WHO SMART Guidelines',\n      description: 'A new FHIR Questionnaire',\n      item: [\n        {\n          linkId: '1',\n          text: 'Sample Question',\n          type: 'string',\n          required: false\n        }\n      ]\n    };\n\n    setQuestionnaireContent(newQuestionnaire);\n    setOriginalContent(JSON.stringify(newQuestionnaire, null, 2));\n    setSelectedQuestionnaire({\n      name: `${newQuestionnaire.name}.json`,\n      displayName: newQuestionnaire.name,\n      fullPath: `input/questionnaires/${newQuestionnaire.name}.json`,\n      fileType: 'JSON',\n      isNew: true\n    });\n    setEditing(true);\n    setEditMode('visual'); // Start with visual editor for new questionnaires\n\n    console.log('New questionnaire created:', newQuestionnaire);\n  };\n\n  // Handle save operation (called by AssetEditorLayout)\n  const handleSave = (content, saveType) => {\n    console.log(`Questionnaire saved to ${saveType}`);\n    \n    if (saveType === 'github') {\n      // Refresh questionnaires list after GitHub save\n      const loadQuestionnaires = async () => {\n        try {\n          const allQuestionnaires = [];\n          \n          const paths = [\n            { path: 'input/questionnaires', extensions: ['.json'], type: 'JSON' },\n            { path: 'input/fsh/questionnaires', extensions: ['.fsh'], type: 'FSH' }\n          ];\n          \n          for (const pathConfig of paths) {\n            try {\n              const files = await githubService.getDirectoryContents(\n                repository.owner.login,\n                repository.name,\n                pathConfig.path,\n                branch\n              );\n              \n              const questionnaireFiles = files\n                .filter(file => file.type === 'file' && \n                  pathConfig.extensions.some(ext => file.name.endsWith(ext)))\n                .map(file => {\n                  const extension = pathConfig.extensions.find(ext => file.name.endsWith(ext));\n                  return {\n                    ...file,\n                    displayName: file.name.replace(extension, ''),\n                    fullPath: `${pathConfig.path}/${file.name}`,\n                    fileType: pathConfig.type,\n                    extension: extension\n                  };\n                });\n              \n              allQuestionnaires.push(...questionnaireFiles);\n            } catch (error) {\n              if (error.status !== 404) {\n                console.warn(`Error loading from ${pathConfig.path}:`, error);\n              }\n            }\n          }\n          \n          setQuestionnaires(allQuestionnaires);\n        } catch (error) {\n          console.error('Error refreshing questionnaires:', error);\n        }\n      };\n      \n      loadQuestionnaires();\n    }\n  };\n\n  // Navigate back to dashboard\n  const handleBackToDashboard = () => {\n    if (repository && branch) {\n      navigate(`/dashboard/${repository.owner.login}/${repository.name}/${branch}`);\n    } else {\n      // Fallback to home page if repository context is not available\n      navigate('/');\n    }\n  };\n\n  // Check if there are changes in the questionnaire\n  const hasChanges = questionnaireContent && originalContent &&\n    JSON.stringify(questionnaireContent, null, 2) !== originalContent;\n\n  // Show loading state when PageProvider is not ready or when we're loading questionnaires\n  if (loading && (!repository || !branch)) {\n    return (\n      <AssetEditorLayout pageName=\"questionnaire-editor\">\n        <div className=\"questionnaire-editor-loading\">\n          <h2>Initializing Questionnaire Editor...</h2>\n          <p>Loading repository context...</p>\n        </div>\n      </AssetEditorLayout>\n    );\n  }\n\n  if (loading && !editing) {\n    return (\n      <AssetEditorLayout pageName=\"questionnaire-editor\">\n        <div className=\"questionnaire-editor-loading\">\n          <h2>Loading Questionnaires...</h2>\n          <p>Fetching questionnaire files from repository...</p>\n        </div>\n      </AssetEditorLayout>\n    );\n  }\n\n  return (\n    <AssetEditorLayout\n      pageName=\"questionnaire-editor\"\n      file={selectedQuestionnaire}\n      repository={repository}\n      branch={branch}\n      content={questionnaireContent ? JSON.stringify(questionnaireContent, null, 2) : null}\n      originalContent={originalContent}\n      hasChanges={hasChanges}\n      onSave={handleSave}\n      showSaveButtons={editing}\n    >\n      <div className=\"questionnaire-editor\">\n        <div className=\"questionnaire-header\">\n          <div className=\"header-content\">\n            <div className=\"breadcrumb\">\n              <button onClick={handleBackToDashboard} className=\"back-link\">\n                ← {repository.name}\n              </button>\n              <span className=\"separator\">/</span>\n              <span>Questionnaire Editor</span>\n              {branch && (\n                <>\n                  <span className=\"separator\">/</span>\n                  <span className=\"branch\">{branch}</span>\n                </>\n              )}\n            </div>\n            <h1>FHIR Questionnaire Editor</h1>\n            <p>Manage and edit FHIR Questionnaire assets for your DAK</p>\n          </div>\n        </div>\n\n        <div className=\"questionnaire-content\">\n          {error && (\n            <div className=\"error-message\">\n              <strong>Error:</strong> {error}\n            </div>\n          )}\n\n          {!editing ? (\n            <div className=\"questionnaire-list\">\n              <div className=\"list-header\">\n                <h2>Questionnaires ({questionnaires.length})</h2>\n                <button \n                  onClick={createNewQuestionnaire}\n                  className=\"btn-primary\"\n                  disabled={!lformsLoaded}\n                >\n                  + Create New Questionnaire\n                </button>\n              </div>\n\n              {questionnaires.length === 0 ? (\n                <div className=\"empty-state\">\n                  <div className=\"empty-icon\">📋</div>\n                  <h3>No Questionnaires Found</h3>\n                  <p>This repository doesn't have any FHIR Questionnaire files yet.</p>\n                  <p>Questionnaires can be stored as:</p>\n                  <ul style={{textAlign: 'left', maxWidth: '400px', margin: '0 auto'}}>\n                    <li><code>input/questionnaires/*.json</code> - FHIR JSON format</li>\n                    <li><code>input/fsh/questionnaires/*.fsh</code> - FHIR Shorthand format</li>\n                  </ul>\n                  <button \n                    onClick={createNewQuestionnaire}\n                    className=\"btn-primary\"\n                    disabled={!lformsLoaded}\n                  >\n                    Create Your First Questionnaire\n                  </button>\n                </div>\n              ) : (\n                <div className=\"questionnaire-grid\">\n                  {questionnaires.map((questionnaire) => (\n                    <div \n                      key={questionnaire.name}\n                      className=\"questionnaire-card\"\n                      onClick={() => loadQuestionnaireContent(questionnaire)}\n                    >\n                      <div className=\"card-icon\">\n                        {questionnaire.fileType === 'FSH' ? '📝' : '📋'}\n                      </div>\n                      <div className=\"card-content\">\n                        <h3>{questionnaire.displayName}</h3>\n                        <p className=\"card-type\">{questionnaire.fileType} Questionnaire</p>\n                        <p className=\"card-path\">{questionnaire.fullPath}</p>\n                        <p className=\"card-size\">{(questionnaire.size / 1024).toFixed(1)} KB</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"questionnaire-editor-container\">\n              <div className=\"editor-header\">\n                <button \n                  onClick={() => setEditing(false)}\n                  className=\"back-to-list\"\n                >\n                  ← Back to List\n                </button>\n                <h2>{selectedQuestionnaire?.displayName || 'New Questionnaire'}</h2>\n                \n                {/* Mode toggle for JSON questionnaires */}\n                {questionnaireContent?.fileType !== 'FSH' && (\n                  <div className=\"edit-mode-toggle\">\n                    <button \n                      className={`mode-btn ${editMode === 'visual' ? 'active' : ''}`}\n                      onClick={() => setEditMode('visual')}\n                    >\n                      📝 Visual Editor\n                    </button>\n                    <button \n                      className={`mode-btn ${editMode === 'json' ? 'active' : ''}`}\n                      onClick={() => setEditMode('json')}\n                    >\n                      {} JSON Editor\n                    </button>\n                  </div>\n                )}\n              </div>\n\n              {lformsError && (\n                <div className=\"error-message\">\n                  <strong>LForms Error:</strong> {lformsError}\n                </div>\n              )}\n\n              {!lformsLoaded ? (\n                <div className=\"lforms-loading\">\n                  <p>Loading questionnaire editor...</p>\n                </div>\n              ) : (\n                <div className=\"lforms-container\">\n                  {/* Preview Section */}\n                  <div className=\"questionnaire-preview\">\n                    <h4>Questionnaire Preview</h4>\n                    <div className=\"questionnaire-metadata\">\n                      <p><strong>Title:</strong> {questionnaireContent?.title || 'Untitled'}</p>\n                      <p><strong>Status:</strong> {questionnaireContent?.status || 'draft'}</p>\n                      <p><strong>Format:</strong> {questionnaireContent?.fileType || 'JSON'}</p>\n                      <p><strong>Date:</strong> {questionnaireContent?.date || 'Not specified'}</p>\n                      {questionnaireContent?.fileType !== 'FSH' && (\n                        <p><strong>Items:</strong> {questionnaireContent?.item?.length || 0} questions</p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {/* Editor Section */}\n                  {questionnaireContent?.fileType === 'FSH' ? (\n                    // FSH files - read-only mode\n                    <div className=\"questionnaire-content-editor\">\n                      <h4>\n                        FHIR Shorthand Content\n                        <span className=\"readonly-badge\"> (Read-Only)</span>\n                      </h4>\n                      \n                      <div className=\"fsh-editor\">\n                        <textarea\n                          value={questionnaireContent?.rawContent || ''}\n                          readOnly={true}\n                          className=\"fsh-content\"\n                          rows={20}\n                        />\n                        <div className=\"fsh-notice\">\n                          <strong>📝 FSH File:</strong> This is a FHIR Shorthand questionnaire. \n                          Direct editing is not supported yet - please edit the .fsh file directly in your repository.\n                        </div>\n                      </div>\n                    </div>\n                  ) : editMode === 'visual' ? (\n                    // Visual editor\n                    <div className=\"visual-editor-section\">\n                      <h4>Visual Questionnaire Builder</h4>\n                      <div className=\"lforms-visual-editor\">\n                        <LFormsVisualEditor \n                          questionnaire={questionnaireContent}\n                          onChange={(updatedQuestionnaire) => {\n                            setQuestionnaireContent(updatedQuestionnaire);\n                          }}\n                          onError={setLformsError}\n                        />\n                      </div>\n                    </div>\n                  ) : (\n                    // JSON editor mode\n                    <div className=\"questionnaire-content-editor\">\n                      <h4>Raw JSON Content</h4>\n                      <textarea\n                        value={JSON.stringify(questionnaireContent, null, 2)}\n                        onChange={(e) => {\n                          try {\n                            const newContent = JSON.parse(e.target.value);\n                            setQuestionnaireContent(newContent);\n                          } catch (error) {\n                            // Invalid JSON, don't update\n                            console.warn('Invalid JSON in editor');\n                          }\n                        }}\n                        className=\"json-editor\"\n                        rows={20}\n                      />\n                    </div>\n                  )}\n                  \n                  <div className=\"editor-instructions\">\n                    <h4>Editing Instructions:</h4>\n                    {questionnaireContent?.fileType === 'FSH' ? (\n                      <ul>\n                        <li>This is a FHIR Shorthand (.fsh) questionnaire file</li>\n                        <li>FSH files define questionnaires using a domain-specific language</li>\n                        <li>To edit this questionnaire, modify the .fsh file directly in your repository</li>\n                        <li>FSH files are compiled into JSON during the build process</li>\n                        <li>Learn more about FHIR Shorthand at <a href=\"https://build.fhir.org/ig/HL7/fhir-shorthand/\" target=\"_blank\" rel=\"noopener noreferrer\">HL7 FHIR Shorthand</a></li>\n                      </ul>\n                    ) : editMode === 'visual' ? (\n                      <ul>\n                        <li>Use the visual editor above to build your questionnaire interactively</li>\n                        <li>Add, remove, and modify questions using the form builder interface</li>\n                        <li>Preview your questionnaire as users will see it</li>\n                        <li>Switch to JSON mode to see the raw FHIR Questionnaire structure</li>\n                        <li>Changes are automatically saved as you work</li>\n                      </ul>\n                    ) : (\n                      <ul>\n                        <li>Edit the JSON structure above to modify the questionnaire</li>\n                        <li>The preview shows key questionnaire metadata</li>\n                        <li>Changes are automatically detected for saving</li>\n                        <li>Switch to Visual mode for an easier editing experience</li>\n                        <li>Click \"Save to Staging\" to save changes locally</li>\n                      </ul>\n                    )}\n                    <div className=\"help-tip\">\n                      <strong>✨ New:</strong> Visual questionnaire editor is now available using LHC-Forms!\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        <ContextualHelpMascot \n          pageId=\"questionnaire-editor\"\n          contextData={{\n            repository: repository.name,\n            branch: branch,\n            hasQuestionnaires: questionnaires.length > 0,\n            isEditing: editing\n          }}\n        />\n      </div>\n    </AssetEditorLayout>\n  );\n};\n\nconst QuestionnaireEditor = () => {\n  return (\n    <PageLayout pageName=\"questionnaire-editor\">\n      <QuestionnaireEditorContent />\n    </PageLayout>\n  );\n};\n\nexport default QuestionnaireEditor;"],"names":["LFormsVisualEditor","_ref","_questionnaire$item2","_questionnaire$item3","_questionnaire$item4","questionnaire","onChange","onError","previewMode","setPreviewMode","useState","updateQuestion","index","field","value","item","updatedItems","updatedQuestionnaire","updateMetadata","_jsxs","className","children","_jsx","onClick","title","description","map","text","required","type","placeholder","disabled","rows","step","linkId","e","target","name","status","publisher","length","addQuestion","_questionnaire$item","newItem","Date","now","filter","_","i","removeQuestion","checked","QuestionnaireEditorContent","_questionnaireContent","navigate","useNavigate","repository","branch","useDAKParams","questionnaires","setQuestionnaires","selectedQuestionnaire","setSelectedQuestionnaire","loading","setLoading","error","setError","editing","setEditing","questionnaireContent","setQuestionnaireContent","originalContent","setOriginalContent","lformsLoaded","setLformsLoaded","editMode","setEditMode","lformsError","setLformsError","useEffect","async","console","log","message","loadLForms","allQuestionnaires","paths","path","extensions","pathConfig","questionnaireFiles","githubService","getDirectoryContents","owner","login","file","some","ext","endsWith","extension","find","displayName","replace","fullPath","fileType","push","warn","loadQuestionnaires","extractFshTitle","content","titleMatch","match","extractFshStatus","statusMatch","extractFshName","nameMatch","extractFshDescription","descMatch","createNewQuestionnaire","newQuestionnaire","resourceType","id","meta","versionId","lastUpdated","toISOString","url","date","split","JSON","stringify","isNew","hasChanges","AssetEditorLayout","pageName","onSave","handleSave","saveType","showSaveButtons","handleBackToDashboard","_Fragment","rawContent","readOnly","newContent","parse","href","rel","style","textAlign","maxWidth","margin","getFileContent","questionnaireData","isReadOnly","loadQuestionnaireContent","size","toFixed","ContextualHelpMascot","pageId","contextData","hasQuestionnaires","isEditing","QuestionnaireEditor","PageLayout"],"sourceRoot":""}