{"version":3,"file":"static/js/648.dd9bc624.chunk.js","mappings":"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","sources":["components/DAKSelection.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport repositoryCacheService from '../services/repositoryCacheService';\nimport dakTemplates from '../config/dak-templates.json';\nimport { PageLayout, usePageParams } from './framework';\nimport './DAKSelection.css';\n\nconst DAKSelection = () => {\n  return (\n    <PageLayout pageName=\"dak-selection\" showHeader={true}>\n      <DAKSelectionContent />\n    </PageLayout>\n  );\n};\n\nconst DAKSelectionContent = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { params, profile } = usePageParams();\n  const userParam = params?.user;\n  \n  // Use profile from framework (PageProvider) or location state\n  const effectiveProfile = profile || location.state?.profile;\n  const effectiveProfileRef = useRef();\n  effectiveProfileRef.current = effectiveProfile;\n  const { action } = location.state || {};\n  \n  const [repositories, setRepositories] = useState([]);\n  const [selectedRepository, setSelectedRepository] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanProgress, setScanProgress] = useState(null);\n  const [currentlyScanningRepos, setCurrentlyScanningRepos] = useState(new Set());\n  const [usingCachedData, setUsingCachedData] = useState(false);\n\n  // Validate user parameter and profile consistency\n  useEffect(() => {\n    // If no user parameter in URL and no profile in state, redirect to landing\n    if (!userParam && !effectiveProfile) {\n      navigate('/');\n      return;\n    }\n    \n    // If user parameter exists but no action - redirect to action selection\n    if (userParam && !action) {\n      navigate(`/dak-action/${userParam}`, { replace: true });\n      return;\n    }\n    \n    // If user parameter exists but no profile - redirect to landing\n    if (userParam && !effectiveProfile) {\n      navigate('/');\n      return;\n    }\n    \n    // If user parameter exists and profile exists but they don't match - redirect to landing\n    if (userParam && effectiveProfile && effectiveProfile.login !== userParam) {\n      navigate('/');\n      return;\n    }\n    \n    // If profile exists but no user parameter, redirect to include user in URL\n    if (effectiveProfile && !userParam) {\n      navigate(`/dak-selection/${effectiveProfile.login}`, { \n        state: { profile: effectiveProfile, action },\n        replace: true \n      });\n      return;\n    }\n  }, [userParam, effectiveProfile, action, navigate]);\n\n  // Helper function to extract user and repo from repository object\n  const getRepositoryPath = (repository) => {\n    if (!repository) return null;\n    \n    // Get user from owner.login or fallback to parsing full_name\n    const user = repository.owner?.login || repository.full_name?.split('/')[0];\n    const repo = repository.name;\n    \n    if (!user || !repo) {\n      console.error('Unable to extract user/repo from repository object:', repository);\n      return null;\n    }\n    \n    return { user, repo };\n  };\n\n  const getActionConfig = () => {\n    switch (action) {\n      case 'edit':\n        return {\n          title: 'Select DAK to Edit',\n          description: 'Choose an existing DAK repository that you have permission to modify.',\n          buttonText: 'Continue to Edit Components',\n          nextRoute: '/dashboard'  // This will be constructed dynamically with user/repo\n        };\n      case 'fork':\n        return {\n          title: 'Select DAK to Fork',\n          description: 'Choose the source DAK repository that you want to fork.',\n          buttonText: 'Continue to Organization Selection',\n          nextRoute: '/organization-selection'\n        };\n      case 'create':\n        return {\n          title: 'Select Template DAK',\n          description: 'Choose a template repository to use as the base for your new DAK.',\n          buttonText: 'Continue to Organization Selection',\n          nextRoute: '/organization-selection',\n          showTemplate: true\n        };\n      default:\n        return {\n          title: 'Select DAK Repository',\n          description: 'Choose a DAK repository to work with.',\n          buttonText: 'Continue',\n          nextRoute: '/dashboard'  // This will be constructed dynamically with user/repo\n        };\n    }\n  };\n\n  const getMockRepositories = useCallback(() => {\n    const profile = effectiveProfileRef.current;\n    if (!profile || !profile.login) {\n      return [];\n    }\n    \n    // Mock repositories - only some have SMART guidelines compatibility\n    const allMockRepos = [\n      {\n        id: 1,\n        name: 'maternal-health-dak',\n        full_name: `${profile.login}/maternal-health-dak`,\n        description: 'WHO SMART Guidelines for Maternal Health - Digital Adaptation Kit',\n        html_url: `https://github.com/${profile.login}/maternal-health-dak`,\n        topics: ['who', 'smart-guidelines', 'maternal-health', 'dak'],\n        language: 'FML',\n        stargazers_count: 12,\n        forks_count: 3,\n        updated_at: '2024-01-15T10:30:00Z',\n        smart_guidelines_compatible: true\n      },\n      {\n        id: 2,\n        name: 'immunization-dak',\n        full_name: `${profile.login}/immunization-dak`,\n        description: 'Digital Adaptation Kit for Immunization Guidelines',\n        html_url: `https://github.com/${profile.login}/immunization-dak`,\n        topics: ['who', 'smart-guidelines', 'immunization', 'vaccines'],\n        language: 'FML',\n        stargazers_count: 8,\n        forks_count: 2,\n        updated_at: '2024-01-10T14:20:00Z',\n        smart_guidelines_compatible: true\n      },\n      {\n        id: 3,\n        name: 'anc-dak',\n        full_name: `${profile.login}/anc-dak`,\n        description: 'Antenatal Care Digital Adaptation Kit based on WHO guidelines',\n        html_url: `https://github.com/${profile.login}/anc-dak`,\n        topics: ['who', 'anc', 'antenatal-care', 'smart-guidelines'],\n        language: 'FML',\n        stargazers_count: 15,\n        forks_count: 5,\n        updated_at: '2024-01-12T09:15:00Z',\n        smart_guidelines_compatible: true\n      },\n      {\n        id: 4,\n        name: 'regular-health-app',\n        full_name: `${profile.login}/regular-health-app`,\n        description: 'A regular health application without SMART Guidelines',\n        html_url: `https://github.com/${profile.login}/regular-health-app`,\n        topics: ['health', 'app', 'javascript'],\n        language: 'JavaScript',\n        stargazers_count: 5,\n        forks_count: 1,\n        updated_at: '2024-01-08T16:45:00Z',\n        smart_guidelines_compatible: false // This one doesn't have sushi-config.yaml with smart.who.int.base\n      },\n      {\n        id: 5,\n        name: 'medical-database',\n        full_name: `${profile.login}/medical-database`,\n        description: 'Medical database with FHIR but not SMART Guidelines',\n        html_url: `https://github.com/${profile.login}/medical-database`,\n        topics: ['fhir', 'database', 'medical'],\n        language: 'SQL',\n        stargazers_count: 7,\n        forks_count: 2,\n        updated_at: '2024-01-05T11:20:00Z',\n        smart_guidelines_compatible: false // This one also doesn't have the required sushi-config.yaml\n      }\n    ];\n\n    // Filter to only return SMART guidelines compatible repositories\n    return allMockRepos.filter(repo => repo.smart_guidelines_compatible);\n  }, []);\n\n  const simulateEnhancedScanning = useCallback(async () => {\n    setIsScanning(true);\n    setRepositories([]); // Clear current repositories for progressive updates\n    \n    const mockRepos = getMockRepositories();\n    const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n    \n    try {\n      // Simulate concurrent scanning with enhanced display\n      for (let i = 0; i < mockRepos.length; i++) {\n        const repo = mockRepos[i];\n        \n        // Simulate starting to scan this repository\n        setScanProgress({\n          current: i + 1,\n          total: mockRepos.length,\n          currentRepo: repo.name,\n          progress: Math.round(((i + 1) / mockRepos.length) * 100),\n          completed: false,\n          started: true\n        });\n        \n        // Add to currently scanning repos\n        setCurrentlyScanningRepos(prev => new Set([...prev, repo.name]));\n        \n        // Simulate scanning time (1-2 seconds per repository)\n        await delay(1000 + Math.random() * 1000);\n        \n        // Add found repository to results in alphabetical order\n        setRepositories(prevRepos => {\n          const newRepos = [...prevRepos, repo];\n          return newRepos.sort((a, b) => a.name.localeCompare(b.name));\n        });\n        \n        // Simulate completion\n        setScanProgress({\n          current: i + 1,\n          total: mockRepos.length,\n          currentRepo: repo.name,\n          progress: Math.round(((i + 1) / mockRepos.length) * 100),\n          completed: true\n        });\n        \n        // Remove from currently scanning repos\n        setCurrentlyScanningRepos(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(repo.name);\n          return newSet;\n        });\n        \n        // Small delay before next repository\n        await delay(300);\n      }\n      \n      // After all repositories are scanned, stop the scanning state\n      console.log('🎉 Demo scanning completed, stopping scanning state');\n      setTimeout(() => {\n        setIsScanning(false);\n        setScanProgress(null);\n        setCurrentlyScanningRepos(new Set());\n      }, 500); // Small delay to show completion\n    } catch (error) {\n      console.error('Error in simulated scanning:', error);\n      // Make sure to stop scanning on error\n      setIsScanning(false);\n      setScanProgress(null);\n      setCurrentlyScanningRepos(new Set());\n    }\n  }, [getMockRepositories]);\n\n  const fetchRepositories = useCallback(async (forceRescan = false, useCachedData = false) => {\n    setLoading(true);\n    setError(null);\n    setIsScanning(false);\n    setScanProgress(null);\n    setCurrentlyScanningRepos(new Set());\n    setUsingCachedData(false);\n    \n    try {\n      let repos = [];\n      let cachedData = null;\n      \n      if (action === 'create') {\n        // For create action, load templates from configuration\n        repos = dakTemplates.dakTemplates.map((template, index) => ({\n          id: -(index + 1),\n          name: template.repo,\n          full_name: `${template.owner}/${template.repo}`,\n          description: template.description,\n          html_url: template.repository,\n          clone_url: `${template.repository}.git`,\n          topics: template.tags.map(tag => tag.toLowerCase().replace(/\\s+/g, '-')),\n          language: 'FML',\n          stargazers_count: 15,\n          forks_count: 8,\n          updated_at: new Date().toISOString(),\n          smart_guidelines_compatible: true,\n          is_template: true,\n          template_config: template,\n          owner: {\n            login: template.owner,\n            avatar_url: template.owner === 'WorldHealthOrganization' \n              ? 'https://avatars.githubusercontent.com/u/9166906?s=200&v=4'\n              : 'https://github.com/favicon.ico'\n          }\n        }));\n        // Sort templates alphabetically by name\n        repos.sort((a, b) => a.name.localeCompare(b.name));\n        setRepositories(repos);\n      } else {\n        // For edit/fork actions, implement cache-first approach\n        \n        // Always check cache first unless explicitly forcing a rescan\n        if (githubService.isAuth() && !forceRescan) {\n          try {\n            cachedData = repositoryCacheService.getCachedRepositories(effectiveProfile.login, effectiveProfile.type === 'org' ? 'org' : 'user');\n          } catch (cacheError) {\n            console.warn('Error accessing repository cache:', cacheError);\n          }\n        }\n\n        if (cachedData && !forceRescan) {\n          // Use cached data - show immediately\n          console.log('Using cached repository data', repositoryCacheService.getCacheInfo(effectiveProfile.login, effectiveProfile.type === 'org' ? 'org' : 'user'));\n          repos = cachedData.repositories;\n          setUsingCachedData(true);\n          // Sort cached repositories alphabetically\n          repos.sort((a, b) => a.name.localeCompare(b.name));\n          setRepositories(repos);\n        } else {\n          // No cached data or forcing rescan - initiate progressive scanning\n          if (githubService.isAuth()) {\n            console.log(forceRescan ? '🔄 Force rescanning repositories...' : '🔍 No cached data, initiating scan...');\n            setIsScanning(true);\n            setLoading(false); // Stop loading state to show scanning progress\n            \n            // Important: Don't clear existing repositories when scanning\n            // This preserves any cached repos that were already displayed\n            console.log('📊 Starting enhanced scanning display for authenticated user');\n            \n            // Add timeout wrapper to prevent infinite scanning\n            const SCAN_TIMEOUT = 60000; // 60 seconds timeout\n            const timeoutPromise = new Promise((_, reject) => {\n              setTimeout(() => reject(new Error('Scanning timeout - operation took longer than 60 seconds')), SCAN_TIMEOUT);\n            });\n            \n            const scanPromise = githubService.getSmartGuidelinesRepositoriesProgressive(\n              effectiveProfile.login, \n              effectiveProfile.type === 'org' ? 'org' : 'user',\n              // onRepositoryFound callback - add repo to list immediately in alphabetical order\n              (foundRepo) => {\n                setRepositories(prevRepos => {\n                  // Avoid duplicates\n                  const exists = prevRepos.some(repo => repo.id === foundRepo.id);\n                  if (!exists) {\n                    // Add the new repository and sort alphabetically by name\n                    const newRepos = [...prevRepos, foundRepo];\n                    return newRepos.sort((a, b) => a.name.localeCompare(b.name));\n                  }\n                  return prevRepos;\n                });\n              },\n              // onProgress callback - update progress indicator with enhanced display\n              (progress) => {\n                console.log('📊 Real scanning progress:', progress);\n                setScanProgress(progress);\n                \n                // Track repositories currently being scanned with enhanced display timing\n                if (progress.started && !progress.completed) {\n                  // Repository is being started - add to currently scanning set\n                  console.log('🔍 Started scanning:', progress.currentRepo);\n                  setCurrentlyScanningRepos(prev => new Set([...prev, progress.currentRepo]));\n                  \n                  // Ensure the scanning state is properly set\n                  setScanProgress({\n                    ...progress,\n                    started: true,\n                    completed: false\n                  });\n                } else if (progress.completed) {\n                  // Repository is completed - show completion state\n                  console.log('✅ Completed scanning:', progress.currentRepo);\n                  setScanProgress({\n                    ...progress,\n                    completed: true\n                  });\n                  \n                  // Remove from currently scanning set after a brief moment\n                  setTimeout(() => {\n                    setCurrentlyScanningRepos(prev => {\n                      const newSet = new Set(prev);\n                      newSet.delete(progress.currentRepo);\n                      return newSet;\n                    });\n                  }, 200);\n                  \n                  // Check if this is the last repository being scanned\n                  if (progress.current === progress.total) {\n                    // All repositories have been scanned, stop the scanning state\n                    console.log('🎉 All repositories scanned, stopping scanning state');\n                    setTimeout(() => {\n                      setIsScanning(false);\n                      setScanProgress(null);\n                      setCurrentlyScanningRepos(new Set());\n                    }, 500); // Small delay to show completion\n                  }\n                } else if (progress.total === 0 && progress.completed) {\n                  // Special case: no repositories to scan\n                  console.log('🎉 No repositories to scan, stopping scanning state');\n                  setTimeout(() => {\n                    setIsScanning(false);\n                    setScanProgress(null);\n                    setCurrentlyScanningRepos(new Set());\n                  }, 500);\n                }\n              }\n            );\n            \n            try {\n              // Race between the scanning promise and timeout\n              repos = await Promise.race([scanPromise, timeoutPromise]);\n            } catch (timeoutError) {\n              console.error('⏰ Scanning timed out:', timeoutError.message);\n              // Stop scanning on timeout\n              setIsScanning(false);\n              setScanProgress(null);\n              setCurrentlyScanningRepos(new Set());\n              throw new Error('Repository scanning timed out. Please try again or use cached data if available.');\n            }\n            \n            // Cache the results for future quick access\n            repositoryCacheService.setCachedRepositories(\n              effectiveProfile.login, \n              effectiveProfile.type === 'org' ? 'org' : 'user', \n              repos\n            );\n            \n            // Update repositories with final results (in case callback missed any)\n            // Sort alphabetically to ensure consistent ordering\n            const sortedRepos = repos.sort((a, b) => a.name.localeCompare(b.name));\n            setRepositories(sortedRepos);\n          } else {\n            // Fallback to mock repositories with enhanced scanning demonstration\n            await simulateEnhancedScanning();\n            repos = getMockRepositories();\n            // Sort mock repositories alphabetically\n            repos.sort((a, b) => a.name.localeCompare(b.name));\n            setRepositories(repos);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching repositories:', error);\n      setError('Failed to fetch repositories. Please check your connection and try again.');\n      // Fallback to mock data for demonstration\n      const mockRepos = getMockRepositories();\n      mockRepos.sort((a, b) => a.name.localeCompare(b.name));\n      setRepositories(mockRepos);\n      // Make sure to stop scanning on error\n      setIsScanning(false);\n      setScanProgress(null);\n      setCurrentlyScanningRepos(new Set());\n    } finally {\n      setLoading(false);\n      // Don't automatically stop scanning here for authenticated progressive scans\n      // or for demo scanning - let them manage their own scanning state\n      if (!githubService.isAuth() && action === 'create') {\n        // Only auto-stop for create action when not authenticated\n        setIsScanning(false);\n        setScanProgress(null);\n        setCurrentlyScanningRepos(new Set());\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [effectiveProfile, action]);\n\n  useEffect(() => {\n    // Only proceed if we have valid profile, action and userParam consistency\n    if (!effectiveProfile || !action || !userParam || effectiveProfile.login !== userParam) {\n      return;\n    }\n    \n    // Always check cache first on initial load\n    fetchRepositories(false, false); // forceRescan=false, useCachedData=false (but still check cache first)\n  }, [effectiveProfile, action, userParam, fetchRepositories]);\n\n  const handleRepositorySelect = (repo) => {\n    setSelectedRepository(repo);\n    \n    // For 'edit' action, automatically navigate after selection\n    if (action === 'edit') {\n      // Add a small delay for visual feedback before navigation\n      setTimeout(() => {\n        const repoPath = getRepositoryPath(repo);\n        if (repoPath) {\n          const dashboardUrl = `/dashboard/${repoPath.user}/${repoPath.repo}`;\n          navigate(dashboardUrl, {\n            state: {\n              profile: effectiveProfile,\n              repository: repo,\n              action\n            }\n          });\n        } else {\n          // Fallback to original behavior if unable to extract path\n          const config = getActionConfig();\n          navigate(config.nextRoute, {\n            state: {\n              profile: effectiveProfile,\n              repository: repo,\n              action\n            }\n          });\n        }\n      }, 300); // 300ms delay for visual feedback\n    }\n  };\n\n  const handleContinue = () => {\n    if (!selectedRepository) {\n      alert('Please select a repository to continue');\n      return;\n    }\n\n    const config = getActionConfig();\n    \n    if (action === 'edit') {\n      // Go directly to dashboard for editing with user/repo parameters\n      const repoPath = getRepositoryPath(selectedRepository);\n      if (repoPath) {\n        const dashboardUrl = `/dashboard/${repoPath.user}/${repoPath.repo}`;\n        navigate(dashboardUrl, {\n          state: {\n            profile: effectiveProfile,\n            repository: selectedRepository,\n            action: action\n          }\n        });\n      } else {\n        // Fallback to original behavior if unable to extract path\n        navigate(config.nextRoute, {\n          state: {\n            profile: effectiveProfile,\n            repository: selectedRepository,\n            action: action\n          }\n        });\n      }\n    } else {\n      // Go to organization selection for fork/create\n      navigate(config.nextRoute, {\n        state: {\n          profile: effectiveProfile,\n          sourceRepository: selectedRepository,\n          action: action\n        }\n      });\n    }\n  };\n\n  const handleRescan = () => {\n    fetchRepositories(true, false); // Force rescan, don't use cache\n  };\n\n  const handleUseCachedData = () => {\n    fetchRepositories(false, false); // Don't force rescan, check cache first (this should use cache if available)\n  };\n\n  const handleDemoScanning = async () => {\n    // Simulate the enhanced scanning display for demonstration purposes\n    await simulateEnhancedScanning();\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  if (!effectiveProfile || !action || !userParam || effectiveProfile.login !== userParam) {\n    return <div className=\"dak-selection\"><div style={{color: 'white', textAlign: 'center', padding: '2rem'}}>Redirecting...</div></div>;\n  }\n\n  const config = getActionConfig();\n\n  return (\n    <div className=\"dak-selection\">\n      <div className=\"selection-content\">\n        <div className=\"selection-main\">\n          <div className=\"selection-header\">\n            <div className=\"selection-title\">\n              <h1>{config.title}</h1>\n              <p className=\"selection-subtitle\">{config.description}</p>\n            </div>\n          </div>\n          <div className=\"selection-intro\">\n            {action === 'create' && (\n              <div className=\"template-notice\">\n                <span className=\"notice-icon\">ℹ️</span>\n                <span>You'll create a new repository based on the WHO SMART Guidelines template.</span>\n              </div>\n            )}\n            \n            {action !== 'create' && githubService.isAuth() && (\n              <div className=\"cache-controls\">\n                {usingCachedData ? (\n                  <div className=\"cache-info\">\n                    <span className=\"cache-icon\">💾</span>\n                    <span>Using cached data. </span>\n                    <button \n                      onClick={handleRescan} \n                      className=\"rescan-link\"\n                      disabled={isScanning}\n                    >\n                      {isScanning ? 'Scanning...' : 'Refresh'}\n                    </button>\n                  </div>\n                ) : (\n                  <div className=\"scan-controls\">\n                    {!isScanning && !loading && (\n                      <>\n                        <button \n                          onClick={handleRescan} \n                          className=\"rescan-btn\"\n                          disabled={isScanning}\n                        >\n                          🔄 Rescan Repositories\n                        </button>\n                        {repositoryCacheService.getCachedRepositories(effectiveProfile.login, effectiveProfile.type === 'org' ? 'org' : 'user') && (\n                          <button \n                            onClick={handleUseCachedData} \n                            className=\"cache-btn\"\n                            disabled={isScanning}\n                          >\n                            💾 Use Cached Data\n                          </button>\n                        )}\n                      </>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n            {action !== 'create' && !githubService.isAuth() && !isScanning && !loading && (\n              <div className=\"demo-controls\">\n                <div className=\"demo-info\">\n                  <span className=\"demo-icon\">🎭</span>\n                  <span>Not authenticated. </span>\n                  <button \n                    onClick={handleDemoScanning} \n                    className=\"demo-scan-btn\"\n                    disabled={isScanning}\n                  >\n                    ✨ Demo Enhanced Scanning Display\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {loading ? (\n            <div className=\"loading\">\n              <div className=\"spinner\"></div>\n              <p>Loading repositories...</p>\n            </div>\n          ) : isScanning ? (\n            <div className=\"scanning-status\">\n              <div className=\"scanning-header\">\n                <div className=\"spinner\"></div>\n                <h3>Scanning repositories for SMART Guidelines compatibility...</h3>\n              </div>\n              {scanProgress && (\n                <div className=\"progress-container\">\n                  <div className=\"progress-bar\">\n                    <div \n                      className=\"progress-fill\" \n                      style={{ width: `${scanProgress.progress}%` }}\n                    ></div>\n                  </div>\n                  <div className=\"progress-info\">\n                    {/* Unified scanning status showing percentage and currently testing repos */}\n                    <div className=\"unified-scanning-status\">\n                      <div className=\"scanning-header-unified\">\n                        <div className=\"progress-stats\">\n                          <span className=\"progress-text\">\n                            {scanProgress.current}/{scanProgress.total} repositories\n                          </span>\n                          <span className=\"progress-percentage\">{scanProgress.progress}%</span>\n                        </div>\n                        {/* Always show Currently Testing section to maintain consistent height */}\n                        <div className=\"currently-testing-unified\">\n                          <span className=\"scanning-icon\">🔍</span>\n                          <span>Currently Testing:</span>\n                          <div className=\"currently-scanning-repos\">\n                            {currentlyScanningRepos.size > 0 ? (\n                              Array.from(currentlyScanningRepos).map((repoName) => (\n                                <div key={repoName} className=\"scanning-repo-item\">\n                                  <span className=\"repo-status-indicator\">⚡</span>\n                                  <span className=\"scanning-repo-name\">{repoName}</span>\n                                </div>\n                              ))\n                            ) : (\n                              <div className=\"scanning-repo-item\">\n                                <span className=\"repo-status-indicator\">⏳</span>\n                                <span className=\"scanning-repo-name\">Preparing scan...</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"scanning-note\">\n                    <span className=\"note-icon\">⚡</span>\n                    <span>Scanning up to 5 repositories concurrently to improve speed</span>\n                  </div>\n                </div>\n              )}\n              <div className=\"scanning-results\">\n                <p>Found repositories will appear below as they are discovered:</p>\n                <div className=\"repo-grid\">\n                  {repositories.map((repo) => (\n                    <div \n                      key={repo.id}\n                      className={`repo-card ${selectedRepository?.id === repo.id ? 'selected' : ''} scanning-found`}\n                      onClick={() => handleRepositorySelect(repo)}\n                    >\n                      <div className=\"repo-header-info\">\n                        <h3>{repo.name} <span className=\"new-badge\">✨ Found</span></h3>\n                        <div className=\"repo-meta\">\n                          {repo.is_template && (\n                            <span className=\"template-badge\">\n                              {repo.template_config?.name || 'Template'}\n                            </span>\n                          )}\n                          {repo.private && <span className=\"private-badge\">Private</span>}\n                          {repo.language && <span className=\"language-badge\">{repo.language}</span>}\n                          {repo.smart_guidelines_compatible && (\n                            <span className=\"compatible-badge\">SMART Guidelines</span>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <p className=\"repo-description\">{repo.description || 'No description available'}</p>\n                      \n                      <div className=\"repo-topics\">\n                        {(repo.topics || []).slice(0, 3).map((topic) => (\n                          <span key={topic} className=\"topic-tag\">{topic}</span>\n                        ))}\n                        {(repo.topics || []).length > 3 && (\n                          <span className=\"topic-more\">+{(repo.topics || []).length - 3} more</span>\n                        )}\n                      </div>\n                      \n                      <div className=\"repo-stats\">\n                        <div className=\"stat\">\n                          <span className=\"stat-icon\">⭐</span>\n                          <span>{repo.stargazers_count || 0}</span>\n                        </div>\n                        <div className=\"stat\">\n                          <span className=\"stat-icon\">🍴</span>\n                          <span>{repo.forks_count || 0}</span>\n                        </div>\n                        <div className=\"stat\">\n                          <span className=\"stat-icon\">📅</span>\n                          <span>Updated {formatDate(repo.updated_at)}</span>\n                        </div>\n                      </div>\n\n                      {selectedRepository?.id === repo.id && (\n                        <div className=\"selection-indicator\">\n                          <span>✓ Selected</span>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          ) : error ? (\n            <div className=\"error-state\">\n              <h3>Error loading repositories</h3>\n              <p>{error}</p>\n              <button onClick={fetchRepositories} className=\"retry-btn\">\n                Try Again\n              </button>\n            </div>\n          ) : repositories.length === 0 ? (\n            <div className=\"empty-state\">\n              <h3>No repositories found</h3>\n              <p>\n                {action === 'create' \n                  ? 'Unable to load the WHO template repository.'\n                  : 'No DAK repositories found with SMART Guidelines compatibility.'\n                }\n              </p>\n            </div>\n          ) : (\n            <>\n              <div className=\"repo-grid\">\n                {repositories.map((repo) => (\n                  <div \n                    key={repo.id}\n                    className={`repo-card ${selectedRepository?.id === repo.id ? 'selected' : ''}`}\n                    onClick={() => handleRepositorySelect(repo)}\n                  >\n                    <div className=\"repo-header-info\">\n                      <h3>{repo.name}</h3>\n                      <div className=\"repo-meta\">\n                        {repo.is_template && (\n                          <span className=\"template-badge\">\n                            {repo.template_config?.name || 'Template'}\n                          </span>\n                        )}\n                        {repo.private && <span className=\"private-badge\">Private</span>}\n                        {repo.language && <span className=\"language-badge\">{repo.language}</span>}\n                        {repo.smart_guidelines_compatible && (\n                          <span className=\"compatible-badge\">SMART Guidelines</span>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <p className=\"repo-description\">{repo.description || 'No description available'}</p>\n                    \n                    <div className=\"repo-topics\">\n                      {(repo.topics || []).slice(0, 3).map((topic) => (\n                        <span key={topic} className=\"topic-tag\">{topic}</span>\n                      ))}\n                      {(repo.topics || []).length > 3 && (\n                        <span className=\"topic-more\">+{(repo.topics || []).length - 3} more</span>\n                      )}\n                    </div>\n                    \n                    <div className=\"repo-stats\">\n                      <div className=\"stat\">\n                        <span className=\"stat-icon\">⭐</span>\n                        <span>{repo.stargazers_count || 0}</span>\n                      </div>\n                      <div className=\"stat\">\n                        <span className=\"stat-icon\">🍴</span>\n                        <span>{repo.forks_count || 0}</span>\n                      </div>\n                      <div className=\"stat\">\n                        <span className=\"stat-icon\">📅</span>\n                        <span>Updated {formatDate(repo.updated_at)}</span>\n                      </div>\n                    </div>\n\n                    {selectedRepository?.id === repo.id && (\n                      <div className=\"selection-indicator\">\n                        <span>✓ Selected</span>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"selection-footer\">\n                {action !== 'edit' && (\n                  <button \n                    className=\"continue-btn\"\n                    onClick={handleContinue}\n                    disabled={!selectedRepository}\n                  >\n                    {config.buttonText}\n                  </button>\n                )}\n                {action === 'edit' && (\n                  <div className=\"direct-selection-note\">\n                    <span className=\"note-icon\">💡</span>\n                    <span>Click on a repository above to start editing its components</span>\n                  </div>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DAKSelection;"],"names":["DAKSelectionContent","_location$state","location","useLocation","navigate","useNavigate","params","profile","usePageParams","userParam","user","effectiveProfile","state","effectiveProfileRef","useRef","current","action","repositories","setRepositories","useState","selectedRepository","setSelectedRepository","loading","setLoading","error","setError","isScanning","setIsScanning","scanProgress","setScanProgress","currentlyScanningRepos","setCurrentlyScanningRepos","Set","usingCachedData","setUsingCachedData","useEffect","login","replace","getRepositoryPath","repository","_repository$owner","_repository$full_name","owner","full_name","split","repo","name","console","getActionConfig","title","description","buttonText","nextRoute","showTemplate","getMockRepositories","useCallback","id","html_url","topics","language","stargazers_count","forks_count","updated_at","smart_guidelines_compatible","filter","simulateEnhancedScanning","async","mockRepos","delay","ms","Promise","resolve","setTimeout","i","length","total","currentRepo","progress","Math","round","completed","started","prev","random","prevRepos","sort","a","b","localeCompare","newSet","delete","log","fetchRepositories","forceRescan","arguments","undefined","repos","cachedData","dakTemplates","map","template","index","clone_url","tags","tag","toLowerCase","Date","toISOString","is_template","template_config","avatar_url","githubService","isAuth","repositoryCacheService","getCachedRepositories","type","cacheError","warn","getCacheInfo","SCAN_TIMEOUT","timeoutPromise","_","reject","Error","scanPromise","getSmartGuidelinesRepositoriesProgressive","foundRepo","some","race","timeoutError","message","setCachedRepositories","sortedRepos","handleRepositorySelect","repoPath","dashboardUrl","config","handleRescan","formatDate","dateString","toLocaleDateString","year","month","day","_jsx","className","children","style","color","textAlign","padding","_jsxs","onClick","disabled","_Fragment","handleUseCachedData","width","size","Array","from","repoName","_repo$template_config","private","slice","topic","_repo$template_config2","handleContinue","alert","sourceRepository","DAKSelection","PageLayout","pageName","showHeader"],"sourceRoot":""}