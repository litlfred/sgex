{"version":3,"file":"static/js/878.75d3541d.chunk.js","mappings":"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","sources":["components/FeatureFileEditor.js","components/TestingViewer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneLight } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { AssetEditorLayout } from './framework';\nimport localStorageService from '../services/localStorageService';\n\nconst FeatureFileEditor = ({ \n  file, \n  repository, \n  selectedBranch, \n  isOpen, \n  onClose, \n  onSave,\n  initialContent = '',\n  isDemo = false \n}) => {\n  const [content, setContent] = useState(initialContent);\n  const [isEditing, setIsEditing] = useState(false);\n  const [savedLocally, setSavedLocally] = useState(false);\n\n  useEffect(() => {\n    setContent(initialContent);\n    \n    // Check if there's a local version of this file\n    if (file && file.path) {\n      const localContent = localStorageService.getLocalContent(file.path);\n      if (localContent && localContent !== initialContent) {\n        setSavedLocally(true);\n      }\n    }\n  }, [initialContent, file]);\n\n  const handleContentChange = (e) => {\n    const newContent = e.target.value;\n    setContent(newContent);\n  };\n\n  const handleSave = (savedContent, saveType) => {\n    console.log(`Feature file saved to ${saveType}`);\n    onSave && onSave(savedContent);\n    \n    // Auto-close editing mode after save if not continuing to edit\n    if (saveType === 'local') {\n      setTimeout(() => {\n        setIsEditing(false);\n      }, 2000);\n    } else if (saveType === 'github') {\n      setTimeout(() => {\n        setIsEditing(false);\n      }, 1000);\n    }\n  };\n\n  const handleCancel = () => {\n    const hasChanges = content !== initialContent;\n    if (hasChanges) {\n      if (!window.confirm('You have unsaved changes. Are you sure you want to cancel?')) {\n        return;\n      }\n    }\n    setContent(initialContent);\n    setIsEditing(false);\n  };\n\n  const handleExportLocal = () => {\n    try {\n      const exportData = localStorageService.exportLocalChanges('json');\n      const url = URL.createObjectURL(exportData);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `sgex-feature-files-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Error exporting local changes:', error);\n    }\n  };\n\n  const handleLoadLocal = () => {\n    if (file && file.path) {\n      const localContent = localStorageService.getLocalContent(file.path);\n      if (localContent) {\n        const hasChanges = content !== initialContent;\n        if (hasChanges && !window.confirm('Loading local version will discard current changes. Continue?')) {\n          return;\n        }\n        setContent(localContent);\n        setSavedLocally(true);\n      }\n    }\n  };\n\n  const handleDiscardLocal = () => {\n    if (file && file.path && window.confirm('This will permanently delete the local version. Continue?')) {\n      localStorageService.removeLocal(file.path);\n      setSavedLocally(false);\n      if (content !== initialContent) {\n        setContent(initialContent);\n      }\n    }\n  };\n\n  if (!isOpen || !file) return null;\n\n  const hasChanges = content !== initialContent;\n\n  return (\n    <div className=\"feature-editor-overlay\" onClick={onClose}>\n      <div className=\"feature-editor-modal\" onClick={(e) => e.stopPropagation()}>\n        {isEditing ? (\n          <AssetEditorLayout\n            pageName=\"feature-file-editor\"\n            file={file}\n            repository={repository}\n            branch={selectedBranch}\n            content={content}\n            originalContent={initialContent}\n            hasChanges={hasChanges}\n            isDemo={isDemo}\n            onSave={handleSave}\n            showHeader={false}\n            showMascot={false}\n            saveButtonsPosition=\"top\"\n          >\n            <div className=\"feature-editor-header\">\n              <div className=\"editor-title\">\n                <h3>{file.name}</h3>\n                <span className=\"file-path\">{file.path}</span>\n              </div>\n              <div className=\"editor-actions\">\n                <button \n                  className=\"btn btn-secondary\"\n                  onClick={handleCancel}\n                >\n                  Cancel\n                </button>\n                {localStorageService.hasLocalChanges() && (\n                  <button \n                    className=\"btn btn-info\"\n                    onClick={handleExportLocal}\n                    title=\"Export all local changes\"\n                  >\n                    Export All\n                  </button>\n                )}\n              </div>\n            </div>\n\n            <div className=\"feature-editor-content\">\n              <div className=\"editor-container\">\n                <textarea\n                  className=\"feature-editor-textarea\"\n                  value={content}\n                  onChange={handleContentChange}\n                  placeholder=\"Enter your Gherkin feature content here...\"\n                  spellCheck={false}\n                />\n                <div className=\"editor-preview\">\n                  <h4>Preview:</h4>\n                  <SyntaxHighlighter\n                    language=\"gherkin\"\n                    style={oneLight}\n                    customStyle={{\n                      margin: 0,\n                      borderRadius: '4px',\n                      fontSize: '14px',\n                      lineHeight: '1.5'\n                    }}\n                  >\n                    {content || '# Feature content will appear here...'}\n                  </SyntaxHighlighter>\n                </div>\n              </div>\n            </div>\n\n            {!isDemo && (\n              <div className=\"local-storage-notice\">\n                <span className=\"info-icon\">💾</span>\n                Local Mode: Changes will be saved to your browser's local storage. \n                {savedLocally && ' Local version available.'} \n                <button \n                  className=\"btn-link\"\n                  onClick={handleExportLocal}\n                  disabled={!localStorageService.hasLocalChanges()}\n                >\n                  Export changes\n                </button>\n                {savedLocally && (\n                  <button \n                    className=\"btn-link danger\"\n                    onClick={handleDiscardLocal}\n                  >\n                    Discard local\n                  </button>\n                )}\n              </div>\n            )}\n\n            {isDemo && (\n              <div className=\"demo-notice\">\n                <span className=\"info-icon\">🧪</span>\n                Demo Mode: Changes are saved locally for demonstration. Use \"Save Local\" to save changes to your browser's storage.\n              </div>\n            )}\n\n            <div className=\"feature-editor-footer\">\n              <div className=\"editor-info\">\n                <span>Gherkin Feature File</span>\n                {hasChanges && <span className=\"changes-indicator\">• Unsaved changes</span>}\n                {savedLocally && <span className=\"local-indicator\">• Local version available</span>}\n              </div>\n              <div className=\"editor-links\">\n                <a \n                  href={file.url} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"btn btn-link\"\n                >\n                  View on GitHub\n                </a>\n              </div>\n            </div>\n          </AssetEditorLayout>\n        ) : (\n          <>\n            <div className=\"feature-editor-header\">\n              <div className=\"editor-title\">\n                <h3>{file.name}</h3>\n                <span className=\"file-path\">{file.path}</span>\n              </div>\n              <div className=\"editor-actions\">\n                <button \n                  className=\"btn btn-primary\"\n                  onClick={() => setIsEditing(true)}\n                >\n                  Edit\n                </button>\n                {savedLocally && (\n                  <button \n                    className=\"btn btn-info\"\n                    onClick={handleLoadLocal}\n                    title=\"Load local version\"\n                  >\n                    Load Local\n                  </button>\n                )}\n                <button \n                  className=\"btn btn-secondary\"\n                  onClick={onClose}\n                >\n                  Close\n                </button>\n              </div>\n            </div>\n\n            <div className=\"feature-editor-content\">\n              <div className=\"feature-viewer\">\n                <SyntaxHighlighter\n                  language=\"gherkin\"\n                  style={oneLight}\n                  customStyle={{\n                    margin: 0,\n                    borderRadius: '4px',\n                    fontSize: '14px',\n                    lineHeight: '1.5',\n                    minHeight: '400px'\n                  }}\n                >\n                  {content}\n                </SyntaxHighlighter>\n              </div>\n            </div>\n\n            <div className=\"feature-editor-footer\">\n              <div className=\"editor-info\">\n                <span>Gherkin Feature File</span>\n                {savedLocally && <span className=\"local-indicator\">• Local version available</span>}\n              </div>\n              <div className=\"editor-links\">\n                <a \n                  href={file.url} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"btn btn-link\"\n                >\n                  View on GitHub\n                </a>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FeatureFileEditor;","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneLight } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport githubService from '../services/githubService';\nimport { PageLayout, useDAKParams } from './framework';\nimport FeatureFileEditor from './FeatureFileEditor';\n\n// Demo feature files data for when in demo mode\nconst DEMO_FEATURE_FILES = [\n  {\n    name: 'ViewIPSContent.feature',\n    path: 'input/testing/ViewIPSContent.feature',\n    url: 'https://github.com/demo-user/anc-dak/blob/main/input/testing/ViewIPSContent.feature',\n    download_url: 'https://raw.githubusercontent.com/demo-user/anc-dak/main/input/testing/ViewIPSContent.feature',\n    content: `Feature: View IPS Content\n  As a healthcare provider\n  I want to view International Patient Summary (IPS) content\n  So that I can review standardized patient information\n\n  Background:\n    Given the system has IPS data available\n    And the user has appropriate permissions\n\n  Scenario: View basic IPS information\n    Given I am logged into the system\n    When I navigate to the IPS viewer\n    Then I should see the patient summary header\n    And I should see basic patient demographics\n    And I should see medical history section\n\n  Scenario: View IPS medications\n    Given I am viewing an IPS document\n    When I scroll to the medications section\n    Then I should see a list of current medications\n    And each medication should display name, dosage, and frequency\n    And medications should be sorted by importance\n\n  Scenario: Export IPS content\n    Given I am viewing an IPS document\n    When I click the export button\n    Then I should be able to download the IPS as PDF\n    And the PDF should contain all visible sections\n    And the formatting should be preserved\n\n  Scenario: Handle missing IPS data\n    Given the patient has no IPS document\n    When I attempt to view their IPS\n    Then I should see a \"No IPS available\" message\n    And I should see options to create a new IPS\n    And the system should suggest relevant data sources`\n  },\n  {\n    name: 'PatientRegistration.feature',\n    path: 'input/testing/PatientRegistration.feature',\n    url: 'https://github.com/demo-user/anc-dak/blob/main/input/testing/PatientRegistration.feature',\n    download_url: 'https://raw.githubusercontent.com/demo-user/anc-dak/main/input/testing/PatientRegistration.feature',\n    content: `Feature: Patient Registration\n  As a healthcare worker\n  I want to register new patients in the system\n  So that I can track their care journey\n\n  Background:\n    Given I am logged into the healthcare system\n    And I have patient registration permissions\n\n  Scenario: Register a new patient with complete information\n    Given I am on the patient registration page\n    When I enter the patient's full name \"Sarah Johnson\"\n    And I enter the date of birth \"1990-05-15\"\n    And I enter the contact phone \"555-0123\"\n    And I select the preferred language \"English\"\n    And I click the \"Register Patient\" button\n    Then the patient should be successfully registered\n    And I should see a confirmation message\n    And the patient should receive a unique identifier\n\n  Scenario: Register patient with minimal required information\n    Given I am on the patient registration page\n    When I enter only the required fields\n    And I click \"Register Patient\"\n    Then the system should accept the registration\n    And prompt me to complete the profile later\n\n  Scenario: Handle duplicate patient registration\n    Given a patient with phone \"555-0123\" already exists\n    When I try to register another patient with the same phone\n    Then the system should show a duplicate warning\n    And offer to link to the existing patient record\n    And allow me to verify this is the same person`\n  },\n  {\n    name: 'AntenatalCareWorkflow.feature',\n    path: 'input/testing/AntenatalCareWorkflow.feature',\n    url: 'https://github.com/demo-user/anc-dak/blob/main/input/testing/AntenatalCareWorkflow.feature',\n    download_url: 'https://raw.githubusercontent.com/demo-user/anc-dak/main/input/testing/AntenatalCareWorkflow.feature',\n    content: `Feature: Antenatal Care Workflow\n  As a midwife\n  I want to follow standardized antenatal care protocols\n  So that I can provide consistent quality care to pregnant women\n\n  Background:\n    Given I am a certified midwife logged into the system\n    And the WHO antenatal care guidelines are loaded\n\n  Scenario: First antenatal visit workflow\n    Given a pregnant woman is attending her first ANC visit\n    When I start the first visit assessment\n    Then I should see prompts for initial health history\n    And I should see required vital signs checklist\n    And I should see screening test recommendations\n    And the system should calculate gestational age\n    And I should see next appointment scheduling options\n\n  Scenario: Follow-up visit risk assessment\n    Given a patient is attending a follow-up ANC visit\n    And her previous visit data is available\n    When I review her current condition\n    Then the system should highlight any risk factors\n    And suggest appropriate interventions\n    And update the care plan automatically\n    And schedule appropriate follow-up intervals\n\n  Scenario: High-risk pregnancy detection\n    Given I am conducting an ANC assessment\n    When the patient shows signs of complications\n    Then the system should trigger risk alerts\n    And recommend immediate specialist referral\n    And provide emergency contact information\n    And document the escalation in patient records\n\n  Scenario: Generate antenatal care summary\n    Given a patient has completed multiple ANC visits\n    When I request a care summary report\n    Then I should see a timeline of all visits\n    And all test results and measurements\n    And current risk status and recommendations\n    And the report should be suitable for referrals`\n  }\n];\n\nconst TestingViewer = () => {\n  return (\n    <PageLayout pageName=\"testing-viewer\">\n      <TestingViewerContent />\n    </PageLayout>\n  );\n};\n\nconst TestingViewerContent = () => {\n  const navigate = useNavigate();\n  const { profile, repository, branch } = useDAKParams();\n\n  const [featureFiles, setFeatureFiles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [fileContent, setFileContent] = useState('');\n  const [showModal, setShowModal] = useState(false);\n  const [showEditor, setShowEditor] = useState(false);\n  const [editorFile, setEditorFile] = useState(null);\n  const [editorContent, setEditorContent] = useState('');\n\n  useEffect(() => {\n    const fetchFeatureFiles = async () => {\n      if (!repository) {\n        setError('Missing repository information');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Check if we're in demo mode - improved detection for demo repositories\n        const isDemoMode = repository.isDemo || \n                          (repository.owner && repository.owner.login === 'demo-user') ||\n                          (repository.full_name && repository.full_name.startsWith('demo-user/'));\n        \n        if (isDemoMode) {\n          // Use demo data in demo mode\n          console.log('Demo mode detected, using demo feature files');\n          setTimeout(() => {\n            setFeatureFiles(DEMO_FEATURE_FILES.map(file => ({\n              name: file.name,\n              path: file.path,\n              url: file.url,\n              download_url: file.download_url\n            })));\n            setLoading(false);\n          }, 1000); // Simulate loading time\n          return;\n        }\n\n        // Extract owner and repo name - handle both demo and real repository structures\n        let owner, repoName;\n        \n        if (repository.owner?.login) {\n          // Real GitHub repository structure\n          owner = repository.owner.login;\n          repoName = repository.name;\n        } else if (repository.full_name) {\n          // Handle repository with full_name\n          [owner, repoName] = repository.full_name.split('/');\n        } else if (typeof repository === 'string') {\n          // Handle string format\n          [owner, repoName] = repository.split('/');\n        } else {\n          // Fallback - try to extract from repository properties\n          owner = repository.owner || 'demo-user';\n          repoName = repository.name || repository.repo || 'unknown';\n        }\n\n        console.log('Fetching feature files for:', { owner, repoName, repository });\n\n        // Try to get files from input/testing directory\n        const files = await githubService.getDirectoryContents(\n          owner,\n          repoName,\n          'input/testing',\n          branch || repository.default_branch || 'main'\n        );\n\n        // Filter for .feature files\n        const featureFiles = files\n          .filter(file => file.type === 'file' && file.name.endsWith('.feature'))\n          .map(file => ({\n            name: file.name,\n            path: file.path,\n            url: file.html_url,\n            download_url: file.download_url\n          }));\n\n        setFeatureFiles(featureFiles);\n      } catch (err) {\n        console.error('Error fetching feature files:', err);\n        if (err.message.includes('Not Found')) {\n          setError('No input/testing directory found in this repository');\n        } else {\n          setError(`Error loading feature files: ${err.message}`);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchFeatureFiles();\n  }, [profile, repository, branch]);\n\n  const handleViewFile = async (file) => {\n    try {\n      setLoading(true);\n      \n      // Check if we're in demo mode - improved detection for demo repositories\n      const isDemoMode = repository.isDemo || \n                        (repository.owner && repository.owner.login === 'demo-user') ||\n                        (repository.full_name && repository.full_name.startsWith('demo-user/'));\n      \n      if (isDemoMode) {\n        // Find the demo file content\n        const demoFile = DEMO_FEATURE_FILES.find(df => df.name === file.name);\n        if (demoFile) {\n          setTimeout(() => {\n            setSelectedFile(file);\n            setFileContent(demoFile.content);\n            setShowModal(true);\n            setLoading(false);\n          }, 500); // Simulate loading time\n        } else {\n          setError(`Demo content not found for file: ${file.name}`);\n          setLoading(false);\n        }\n        return;\n      }\n\n      // For real repositories, fetch from GitHub\n      const response = await fetch(file.download_url);\n      const content = await response.text();\n      setSelectedFile(file);\n      setFileContent(content);\n      setShowModal(true);\n    } catch (err) {\n      console.error('Error loading file content:', err);\n      setError(`Error loading file: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEditFile = async (file) => {\n    try {\n      setLoading(true);\n      \n      // Check if we're in demo mode\n      const isDemoMode = repository.isDemo || \n                        (repository.owner && repository.owner.login === 'demo-user') ||\n                        (repository.full_name && repository.full_name.startsWith('demo-user/'));\n      \n      if (isDemoMode) {\n        // Find the demo file content\n        const demoFile = DEMO_FEATURE_FILES.find(df => df.name === file.name);\n        if (demoFile) {\n          setTimeout(() => {\n            setEditorFile(file);\n            setEditorContent(demoFile.content);\n            setShowEditor(true);\n            setLoading(false);\n          }, 500); // Simulate loading time\n        } else {\n          setError(`Demo content not found for file: ${file.name}`);\n          setLoading(false);\n        }\n        return;\n      }\n\n      // For real repositories, fetch from GitHub\n      const response = await fetch(file.download_url);\n      const content = await response.text();\n      setEditorFile(file);\n      setEditorContent(content);\n      setShowEditor(true);\n    } catch (err) {\n      console.error('Error loading file content for editing:', err);\n      setError(`Error loading file: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSaveFile = (newContent) => {\n    // Update the content if it was successfully saved\n    setEditorContent(newContent);\n    console.log('File saved successfully');\n  };\n\n  const handleBack = () => {\n    navigate(`/dashboard/${profile?.login}/${repository?.name}${branch && branch !== 'main' ? `/${branch}` : ''}`);\n  };\n\n  const renderModal = () => {\n    if (!showModal || !selectedFile) return null;\n\n    return (\n      <div className=\"testing-modal-overlay\" onClick={() => setShowModal(false)}>\n        <div className=\"testing-modal\" onClick={(e) => e.stopPropagation()}>\n          <div className=\"testing-modal-header\">\n            <h3>{selectedFile.name}</h3>\n            <button \n              className=\"testing-modal-close\"\n              onClick={() => setShowModal(false)}\n            >\n              ×\n            </button>\n          </div>\n          <div className=\"testing-modal-content\">\n            <SyntaxHighlighter\n              language=\"gherkin\"\n              style={oneLight}\n              customStyle={{\n                margin: 0,\n                borderRadius: '4px',\n                fontSize: '14px',\n                lineHeight: '1.5',\n                minHeight: '400px'\n              }}\n            >\n              {fileContent}\n            </SyntaxHighlighter>\n          </div>\n          <div className=\"testing-modal-footer\">\n            <a \n              href={selectedFile.url} \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"btn btn-secondary\"\n            >\n              View on GitHub\n            </a>\n            <button \n              className=\"btn btn-primary\"\n              onClick={() => setShowModal(false)}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <PageLayout pageName=\"testing-viewer\">\n      <div className=\"testing-viewer\">\n        <div className=\"testing-header\">\n          <button onClick={handleBack} className=\"back-button\">\n            ← Back to Dashboard\n          </button>\n          <h1>Testing Files</h1>\n          <p className=\"testing-description\">\n            Feature files from the input/testing directory\n          </p>\n        </div>\n\n        {loading && (\n          <div className=\"loading-container\">\n            <div className=\"loading-spinner\"></div>\n            <p>Loading feature files...</p>\n          </div>\n        )}\n\n        {error && (\n          <div className=\"error-container\">\n            <div className=\"error-message\">\n              <span className=\"error-icon\">⚠️</span>\n              {error}\n            </div>\n          </div>\n        )}\n\n        {!loading && !error && featureFiles.length === 0 && (\n          <div className=\"empty-state\">\n            <div className=\"empty-icon\">📂</div>\n            <h3>No Feature Files Found</h3>\n            <p>No .feature files were found in the input/testing directory.</p>\n          </div>\n        )}\n\n        {!loading && !error && featureFiles.length > 0 && (\n          <div className=\"feature-files-grid\">\n            {featureFiles.map((file, index) => (\n              <div key={index} className=\"feature-file-card\">\n                <div className=\"file-icon\">🧪</div>\n                <div className=\"file-info\">\n                  <h3 className=\"file-name\">{file.name}</h3>\n                  <p className=\"file-path\">{file.path}</p>\n                </div>\n                <div className=\"file-actions\">\n                  <button \n                    className=\"btn btn-primary\"\n                    onClick={() => handleViewFile(file)}\n                  >\n                    View\n                  </button>\n                  <button \n                    className=\"btn btn-success\"\n                    onClick={() => handleEditFile(file)}\n                  >\n                    Edit\n                  </button>\n                  <a \n                    href={file.url} \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"btn btn-secondary\"\n                  >\n                    GitHub\n                  </a>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {renderModal()}\n\n        <FeatureFileEditor\n          file={editorFile}\n          repository={repository}\n          selectedBranch={branch}\n          isOpen={showEditor}\n          onClose={() => setShowEditor(false)}\n          onSave={handleSaveFile}\n          initialContent={editorContent}\n          isDemo={repository.isDemo || \n                  (repository.owner && repository.owner.login === 'demo-user') ||\n                  (repository.full_name && repository.full_name.startsWith('demo-user/'))}\n        />\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default TestingViewer;"],"names":["_ref","file","repository","selectedBranch","isOpen","onClose","onSave","initialContent","isDemo","content","setContent","useState","isEditing","setIsEditing","savedLocally","setSavedLocally","useEffect","path","localContent","localStorageService","getLocalContent","handleExportLocal","exportData","exportLocalChanges","url","URL","createObjectURL","link","document","createElement","href","download","concat","Date","toISOString","split","body","appendChild","click","removeChild","revokeObjectURL","error","console","hasChanges","_jsx","className","onClick","children","e","stopPropagation","_jsxs","AssetEditorLayout","pageName","branch","originalContent","handleSave","savedContent","saveType","log","setTimeout","showHeader","showMascot","saveButtonsPosition","name","handleCancel","window","confirm","hasLocalChanges","title","value","onChange","newContent","target","placeholder","spellCheck","SyntaxHighlighter","language","style","oneLight","customStyle","margin","borderRadius","fontSize","lineHeight","disabled","handleDiscardLocal","removeLocal","rel","_Fragment","handleLoadLocal","minHeight","DEMO_FEATURE_FILES","download_url","TestingViewerContent","navigate","useNavigate","profile","useDAKParams","featureFiles","setFeatureFiles","loading","setLoading","setError","selectedFile","setSelectedFile","fileContent","setFileContent","showModal","setShowModal","showEditor","setShowEditor","editorFile","setEditorFile","editorContent","setEditorContent","async","_repository$owner","owner","login","full_name","startsWith","map","repoName","repo","githubService","getDirectoryContents","default_branch","filter","type","endsWith","html_url","err","message","includes","fetchFeatureFiles","PageLayout","handleBack","length","index","demoFile","find","df","response","fetch","text","handleViewFile","handleEditFile","FeatureFileEditor","TestingViewer"],"sourceRoot":""}