"use strict";(self.webpackChunksgex_workbench=self.webpackChunksgex_workbench||[]).push([[5531],{65531:(e,r,t)=>{t.d(r,{A:()=>l});var s=t(9950),i=t(94074),o=t(89379),a=t(85571);const n=new class{constructor(){this.CONFIG_KEY="sgex_local_repo_config",this.PREFERENCES_KEY="sgex_local_repo_preferences",this.logger=void 0,this.config=void 0,this.preferences=void 0,this.logger=a.A.getLogger("LocalRepoConfigService"),this.config=this.loadConfig(),this.preferences=this.loadPreferences(),this.logger.debug("LocalRepoConfigService initialized",{configExists:!!this.config,preferencesExists:!!this.preferences})}getDefaultConfig(){return{lastUsedDirectories:[],autoScanOnStartup:!1,maxScanDepth:3,preferredServiceType:"github"}}getDefaultPreferences(){return{showDAKBadges:!0,autoValidateDAKs:!0,cacheDiscoveredRepos:!0,enableGitOperations:!0,defaultBranch:"main"}}loadConfig(){try{const e=localStorage.getItem(this.CONFIG_KEY);if(e){const r=JSON.parse(e);return(0,o.A)((0,o.A)({},this.getDefaultConfig()),r)}}catch(e){const r=e instanceof Error?e.message:"Unknown error";this.logger.warn("Failed to load local repo config",{error:r})}return this.getDefaultConfig()}loadPreferences(){try{const e=localStorage.getItem(this.PREFERENCES_KEY);if(e){const r=JSON.parse(e);return(0,o.A)((0,o.A)({},this.getDefaultPreferences()),r)}}catch(e){const r=e instanceof Error?e.message:"Unknown error";this.logger.warn("Failed to load local repo preferences",{error:r})}return this.getDefaultPreferences()}saveConfig(){try{localStorage.setItem(this.CONFIG_KEY,JSON.stringify(this.config)),this.logger.debug("Local repo config saved")}catch(e){const r=e instanceof Error?e.message:"Unknown error";this.logger.error("Failed to save local repo config",{error:r})}}savePreferences(){try{localStorage.setItem(this.PREFERENCES_KEY,JSON.stringify(this.preferences)),this.logger.debug("Local repo preferences saved")}catch(e){const r=e instanceof Error?e.message:"Unknown error";this.logger.error("Failed to save local repo preferences",{error:r})}}getConfig(){return(0,o.A)({},this.config)}getPreferences(){return(0,o.A)({},this.preferences)}getSelectedDirectory(){return this.config.selectedDirectory}getLastUsedDirectories(){return[...this.config.lastUsedDirectories]}getPreferredServiceType(){return this.config.preferredServiceType}getMaxScanDepth(){return this.config.maxScanDepth}shouldAutoScanOnStartup(){return this.config.autoScanOnStartup}setSelectedDirectory(e){this.logger.debug("Setting selected directory",{directory:e}),this.config.selectedDirectory=e,this.addToLastUsedDirectories(e),this.saveConfig()}addToLastUsedDirectories(e){this.config.lastUsedDirectories.includes(e)||(this.config.lastUsedDirectories.unshift(e),this.config.lastUsedDirectories=this.config.lastUsedDirectories.slice(0,10),this.saveConfig())}setPreferredServiceType(e){this.logger.debug("Setting preferred service type",{serviceType:e}),this.config.preferredServiceType=e,this.saveConfig()}setAutoScanOnStartup(e){this.config.autoScanOnStartup=e,this.saveConfig()}setMaxScanDepth(e){this.config.maxScanDepth=Math.max(1,Math.min(10,e)),this.saveConfig()}setShowDAKBadges(e){this.preferences.showDAKBadges=e,this.savePreferences()}setAutoValidateDAKs(e){this.preferences.autoValidateDAKs=e,this.savePreferences()}setCacheDiscoveredRepos(e){this.preferences.cacheDiscoveredRepos=e,this.savePreferences()}setEnableGitOperations(e){this.preferences.enableGitOperations=e,this.savePreferences()}setDefaultBranch(e){this.preferences.defaultBranch=e,this.savePreferences()}clearConfig(){this.logger.debug("Clearing local repo config"),localStorage.removeItem(this.CONFIG_KEY),this.config=this.getDefaultConfig()}clearPreferences(){this.logger.debug("Clearing local repo preferences"),localStorage.removeItem(this.PREFERENCES_KEY),this.preferences=this.getDefaultPreferences()}clearAll(){this.clearConfig(),this.clearPreferences()}getEnvironmentInfo(){return{hasFileSystemAccess:"showDirectoryPicker"in window,hasLocalStorage:this.hasLocalStorageSupport(),canPersistConfig:this.hasLocalStorageSupport(),isSecureContext:window.isSecureContext,userAgent:navigator.userAgent}}hasLocalStorageSupport(){try{const e="sgex_test";return localStorage.setItem(e,e),localStorage.removeItem(e),!0}catch(e){return!1}}exportConfig(){const e={config:this.config,preferences:this.preferences,exportDate:(new Date).toISOString(),version:"1.0"};return JSON.stringify(e,null,2)}importConfig(e){try{const r=JSON.parse(e);return r.config&&(this.config=(0,o.A)((0,o.A)({},this.getDefaultConfig()),r.config),this.saveConfig()),r.preferences&&(this.preferences=(0,o.A)((0,o.A)({},this.getDefaultPreferences()),r.preferences),this.savePreferences()),this.logger.debug("Configuration imported successfully"),!0}catch(r){const e=r instanceof Error?r.message:"Unknown error";return this.logger.error("Failed to import configuration",{error:e}),!1}}};var c=t(44414);const l=e=>{let{onServiceChange:r,currentService:t}=e;const[o,a]=(0,s.useState)("github"),[l,g]=(0,s.useState)([]),[u,h]=(0,s.useState)({}),[d,p]=(0,s.useState)(!1),[y,f]=(0,s.useState)([]);(0,s.useEffect)(()=>{const e=i.A.getAvailableServiceTypes();g(e);const r=t||i.A.getServiceType();a(r);const s=n.getConfig();f(s.lastUsedDirectories),p(!!s.selectedDirectory),m(r)},[t]);const m=e=>{const r=i.A.getServiceCapabilities(e);h(r)},b=async e=>{try{const t=i.A.switchToService(e);a(e),m(e),n.setPreferredServiceType(e),r&&r(t,e)}catch(t){console.error("Failed to switch service:",t),alert("Failed to switch to ".concat(e," service: ").concat(t.message))}},w=e=>{let{capability:r,label:t,enabled:s}=e;return(0,c.jsxs)("span",{className:"inline-block px-2 py-1 rounded-full text-xs font-medium mr-2 mb-1 ".concat(s?"bg-green-100 text-green-800 border border-green-200":"bg-gray-100 text-gray-600 border border-gray-200"),title:"".concat(t,s?" is supported":" is not supported"),children:[s?"\u2713":"\u2717"," ",t]})};return(0,c.jsxs)("div",{className:"repository-service-selector bg-white border border-gray-200 rounded-lg p-6 shadow-sm",children:[(0,c.jsx)("h3",{className:"text-lg font-semibold text-gray-900 mb-4",children:"Repository Service Selection"}),(0,c.jsxs)("div",{className:"mb-6",children:[(0,c.jsx)("label",{className:"block text-sm font-medium text-gray-700 mb-3",children:"Choose Repository Source:"}),(0,c.jsxs)("div",{className:"space-y-3",children:[l.includes("github")&&(0,c.jsxs)("label",{className:"flex items-center",children:[(0,c.jsx)("input",{type:"radio",name:"service-type",value:"github",checked:"github"===o,onChange:()=>b("github"),className:"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"}),(0,c.jsxs)("span",{className:"ml-3 flex items-center",children:[(0,c.jsx)("span",{className:"text-sm font-medium text-gray-900",children:"GitHub (Remote)"}),(0,c.jsx)("span",{className:"ml-2 text-xs text-gray-500",children:"Access repositories hosted on GitHub"})]})]}),l.includes("local")&&(0,c.jsxs)("label",{className:"flex items-center",children:[(0,c.jsx)("input",{type:"radio",name:"service-type",value:"local",checked:"local"===o,onChange:()=>b("local"),className:"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"}),(0,c.jsxs)("span",{className:"ml-3 flex items-center",children:[(0,c.jsx)("span",{className:"text-sm font-medium text-gray-900",children:"Local Repositories"}),(0,c.jsx)("span",{className:"ml-2 text-xs text-gray-500",children:"Access git repositories on your computer"}),!d&&(0,c.jsx)("span",{className:"ml-2 text-xs text-amber-600 font-medium",children:"(No directory selected)"})]})]})]}),1===l.length&&"github"===l[0]&&(0,c.jsx)("div",{className:"mt-3 p-3 bg-amber-50 border border-amber-200 rounded-md",children:(0,c.jsxs)("p",{className:"text-sm text-amber-800",children:[(0,c.jsx)("strong",{children:"Note:"})," Local repository access requires a browser that supports the File System Access API (Chrome, Edge, Opera). Your browser only supports GitHub repositories."]})})]}),"local"===o&&(0,c.jsxs)("div",{className:"mb-6 p-4 bg-blue-50 border border-blue-200 rounded-md",children:[(0,c.jsx)("h4",{className:"text-sm font-medium text-blue-900 mb-3",children:"Local Repository Configuration"}),(0,c.jsx)("button",{onClick:async()=>{try{const e=i.A.createLocalService();if(await e.authenticate()){p(!0);const e=n.getConfig();f(e.lastUsedDirectories),"local"!==o&&await b("local")}else alert("Failed to select local directory. Please ensure your browser supports the File System Access API and you have given permission.")}catch(e){console.error("Failed to select local directory:",e),alert("Failed to select local directory: ".concat(e.message))}},className:"inline-flex items-center px-4 py-2 border border-blue-300 text-sm font-medium rounded-md text-blue-700 bg-blue-50 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500",children:"\ud83d\udcc1 Select Local Directory"}),y.length>0&&(0,c.jsxs)("div",{className:"mt-3",children:[(0,c.jsx)("p",{className:"text-xs text-blue-700 mb-2",children:"Recently used directories:"}),(0,c.jsx)("ul",{className:"text-xs text-blue-600 space-y-1",children:y.slice(0,3).map((e,r)=>(0,c.jsxs)("li",{className:"truncate",children:["\ud83d\udcc2 ",e]},r))})]})]}),(0,c.jsxs)("div",{className:"mb-4",children:[(0,c.jsxs)("h4",{className:"text-sm font-medium text-gray-700 mb-3",children:["github"===o?"GitHub Service":"Local Service"," Capabilities:"]}),(0,c.jsxs)("div",{className:"flex flex-wrap",children:[(0,c.jsx)(w,{capability:"authentication",label:"Authentication",enabled:u.hasAuthentication}),(0,c.jsx)(w,{capability:"organizations",label:"Organizations",enabled:u.hasOrganizations}),(0,c.jsx)(w,{capability:"collaboration",label:"Collaboration",enabled:u.hasCollaboration}),(0,c.jsx)(w,{capability:"issues",label:"Issues",enabled:u.hasIssues}),(0,c.jsx)(w,{capability:"pullRequests",label:"Pull Requests",enabled:u.hasPullRequests}),(0,c.jsx)(w,{capability:"privateRepos",label:"Private Repos",enabled:u.supportsPrivateRepos}),u.hasFileSystemAccess&&(0,c.jsx)(w,{capability:"fileSystemAccess",label:"File System Access",enabled:!0}),u.hasLocalBranching&&(0,c.jsx)(w,{capability:"localBranching",label:"Local Branching",enabled:!0})]})]}),(0,c.jsx)("div",{className:"pt-4 border-t border-gray-200",children:(0,c.jsxs)("div",{className:"flex items-center justify-between",children:[(0,c.jsxs)("span",{className:"text-sm text-gray-600",children:["Current Service: ",(0,c.jsx)("strong",{children:"github"===o?"GitHub":"Local Repositories"})]}),(0,c.jsxs)("div",{className:"flex items-center",children:[(0,c.jsx)("div",{className:"w-2 h-2 rounded-full mr-2 ".concat("github"===o?"bg-blue-500":d?"bg-green-500":"bg-amber-500")}),(0,c.jsx)("span",{className:"text-xs text-gray-500",children:"github"===o?"Ready for GitHub operations":d?"Ready for local operations":"Directory selection required"})]})]})})]})}},94074:(e,r,t)=>{t.d(r,{A:()=>c});var s=t(29946);function i(e){var r,t,s,i=2;for("undefined"!=typeof Symbol&&(t=Symbol.asyncIterator,s=Symbol.iterator);i--;){if(t&&null!=(r=e[t]))return r.call(e);if(s&&null!=(r=e[s]))return new o(r.call(e));t="@@asyncIterator",s="@@iterator"}throw new TypeError("Object is not async iterable")}function o(e){function r(e){if(Object(e)!==e)return Promise.reject(new TypeError(e+" is not an object."));var r=e.done;return Promise.resolve(e.value).then(function(e){return{value:e,done:r}})}return o=function(e){this.s=e,this.n=e.next},o.prototype={s:null,n:null,next:function(){return r(this.n.apply(this.s,arguments))},return:function(e){var t=this.s.return;return void 0===t?Promise.resolve({value:e,done:!0}):r(t.apply(this.s,arguments))},throw:function(e){var t=this.s.return;return void 0===t?Promise.reject(e):r(t.apply(this.s,arguments))}},new o(e)}var a=t(85571);const n=class{constructor(){this.workingDirectoryHandle=null,this.workingDirectoryPath=null,this.discoveredRepositories=new Map,this.logger=void 0,this.isInitialized=!1,this.logger=a.A.getLogger("GitLocalService"),this.logger.debug("GitLocalService instance created")}get isFileSystemAccessSupported(){return"showDirectoryPicker"in window}get serviceType(){return"local"}get serviceName(){return"Local Git Repository Service"}get authenticated(){return this.isInitialized&&null!==this.workingDirectoryHandle}async authenticate(e){this.logger.debug("Authenticating local service",{directoryPath:e});try{var r;if(!this.isFileSystemAccessSupported)return this.logger.error("File System Access API not supported in this browser"),!1;if(!e){const e=window.showDirectoryPicker;if(!e)return this.logger.error("Directory picker not available"),!1;if(this.workingDirectoryHandle=await e({mode:"readwrite"}),!this.workingDirectoryHandle)return!1;this.workingDirectoryPath=this.workingDirectoryHandle.name}return this.isInitialized=!0,this.logger.debug("Local service authenticated successfully",{directoryName:null===(r=this.workingDirectoryHandle)||void 0===r?void 0:r.name}),await this.scanCurrentDirectory(),!0}catch(t){const e=t instanceof Error?t.message:"Unknown error";return this.logger.error("Failed to authenticate local service",{error:e}),!1}}signOut(){this.logger.debug("Signing out from local service"),this.workingDirectoryHandle=null,this.workingDirectoryPath=null,this.discoveredRepositories.clear(),this.isInitialized=!1}async setWorkingDirectory(e){this.logger.debug("Setting working directory",{directoryPath:e});try{return this.workingDirectoryPath=e,{success:!0,data:void 0}}catch(r){return{success:!1,error:r instanceof Error?r.message:"Failed to set working directory"}}}getWorkingDirectory(){return this.workingDirectoryPath}async scanLocalDirectory(e){this.logger.debug("Scanning local directory for repositories",{directoryPath:e});try{if(!this.workingDirectoryHandle)return{success:!1,error:"No working directory selected. Please authenticate first."};const e=await this.scanDirectoryForRepos(this.workingDirectoryHandle);return e.forEach(e=>{this.discoveredRepositories.set("".concat(e.owner.login,"/").concat(e.name),e)}),this.logger.debug("Found ".concat(e.length," repositories"),{repositories:e.map(e=>e.full_name)}),{success:!0,data:e}}catch(r){const e=r instanceof Error?r.message:"Unknown error";return this.logger.error("Failed to scan local directory",{error:e}),{success:!1,error:e}}}async scanCurrentDirectory(){this.workingDirectoryHandle&&await this.scanLocalDirectory(this.workingDirectoryHandle.name)}async scanDirectoryForRepos(e){const r=[];try{var t,s=!1,o=!1;try{for(var a,n=i(e.entries());s=!(a=await n.next()).done;s=!1){const[e,t]=a.value;if("directory"===t.kind){const e=t;if(await this.isGitRepository(e)){const t=await this.createRepositoryFromDirectory(e);t&&r.push(t)}else{const t=await this.scanDirectoryForRepos(e);r.push(...t)}}}}catch(c){o=!0,t=c}finally{try{s&&null!=n.return&&await n.return()}finally{if(o)throw t}}}catch(l){const e=l instanceof Error?l.message:"Unknown error";this.logger.warn("Error scanning directory",{error:e})}return r}async isGitRepository(e){try{return await e.getDirectoryHandle(".git"),!0}catch(r){return!1}}async createRepositoryFromDirectory(e){try{const r=(new Date).toISOString(),t=await this.getRepositoryOwner(e)||"local-user";return{id:Math.floor(1e6*Math.random()),node_id:"local_".concat(e.name),name:e.name,full_name:"".concat(t,"/").concat(e.name),private:!1,owner:{login:t,id:1,node_id:"local_user_".concat(t),avatar_url:"/sgex/cat-paw-icon.svg",gravatar_id:"",url:"",html_url:"",followers_url:"",following_url:"",gists_url:"",starred_url:"",subscriptions_url:"",organizations_url:"",repos_url:"",events_url:"",received_events_url:"",type:"User",site_admin:!1,public_repos:0,public_gists:0,followers:0,following:0,created_at:r,updated_at:r},html_url:"file:///".concat(e.name),description:"Local repository: ".concat(e.name),fork:!1,url:"",archive_url:"",assignees_url:"",blobs_url:"",branches_url:"",collaborators_url:"",comments_url:"",commits_url:"",compare_url:"",contents_url:"",contributors_url:"",deployments_url:"",downloads_url:"",events_url:"",forks_url:"",git_commits_url:"",git_refs_url:"",git_tags_url:"",git_url:"",issue_comment_url:"",issue_events_url:"",issues_url:"",keys_url:"",labels_url:"",languages_url:"",merges_url:"",milestones_url:"",notifications_url:"",pulls_url:"",releases_url:"",ssh_url:"",stargazers_url:"",statuses_url:"",subscribers_url:"",subscription_url:"",tags_url:"",teams_url:"",trees_url:"",clone_url:"",mirror_url:void 0,hooks_url:"",svn_url:"",homepage:void 0,language:void 0,forks_count:0,stargazers_count:0,watchers_count:0,size:0,default_branch:"main",open_issues_count:0,is_template:!1,topics:[],has_issues:!1,has_projects:!1,has_wiki:!1,has_pages:!1,has_downloads:!1,archived:!1,disabled:!1,visibility:"public",pushed_at:r,created_at:r,updated_at:r,permissions:{admin:!0,push:!0,pull:!0}}}catch(r){const t=r instanceof Error?r.message:"Unknown error";return this.logger.error("Failed to create repository from directory",{directory:e.name,error:t}),null}}async getRepositoryOwner(e){try{const r=await e.getDirectoryHandle(".git"),t=await r.getFileHandle("config"),s=await t.getFile(),i=(await s.text()).match(/\[user\][\s\S]*?name\s*=\s*(.+)/i);if(i&&i[1])return i[1].trim().replace(/"/g,"")}catch(r){const e=r instanceof Error?r.message:"Unknown error";this.logger.debug("Could not read git config",{error:e})}return null}async getCurrentUser(){return{success:!0,data:{login:"local-user",id:1,node_id:"local_user",avatar_url:"/sgex/cat-paw-icon.svg",gravatar_id:"",url:"",html_url:"",followers_url:"",following_url:"",gists_url:"",starred_url:"",subscriptions_url:"",organizations_url:"",repos_url:"",events_url:"",received_events_url:"",type:"User",site_admin:!1,public_repos:0,public_gists:0,followers:0,following:0,created_at:(new Date).toISOString(),updated_at:(new Date).toISOString()}}}async listRepositories(e,r){const t=Array.from(this.discoveredRepositories.values()).filter(r=>r.owner.login===e);return{success:!0,data:{repositories:t,totalCount:t.length,hasMore:!1}}}async getRepository(e,r){const t="".concat(e,"/").concat(r),s=this.discoveredRepositories.get(t);return s?{success:!0,data:s}:{success:!1,error:"Repository ".concat(t," not found in local repositories")}}async validateDAKRepository(e,r){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"main";try{const s=(await this.getFileContent(e,r,"sushi-config.yaml",t)).includes("smart.who.int.base");return{isDak:s,validationError:s?void 0:"No smart.who.int.base dependency found"}}catch(s){const e=s instanceof Error?s.message:"Unknown error";return{isDak:!1,validationError:"Could not read sushi-config.yaml: ".concat(e)}}}async getBranches(e,r){if(this.logger.debug("Getting repository branches",{owner:e,repo:r}),!this.workingDirectoryHandle)return{success:!1,error:"No working directory selected"};try{await this.workingDirectoryHandle.getDirectoryHandle(r);const e=[{name:"main",commit:{sha:"local-main-sha",url:""},protected:!1}];return this.logger.debug("Found ".concat(e.length," branches"),{branches:e.map(e=>e.name)}),{success:!0,data:e}}catch(t){const e=t instanceof Error?t.message:"Unknown error";return this.logger.error("Failed to get branches",{error:e}),{success:!1,error:"Failed to get branches: ".concat(e)}}}async getFileContent(e,r,t){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"main";if(this.logger.debug("Getting file content",{owner:e,repo:r,path:t,ref:s}),!this.workingDirectoryHandle)throw new Error("No working directory selected");try{const e=await this.workingDirectoryHandle.getDirectoryHandle(r),s=t.split("/").filter(e=>e.length>0);let i=e;for(let r=0;r<s.length-1;r++){if("directory"!==i.kind)throw new Error("Path component '".concat(s[r],"' is not a directory"));i=await i.getDirectoryHandle(s[r])}const o=s[s.length-1],a=await i.getFileHandle(o),n=await a.getFile(),c=await n.text();return this.logger.debug("Successfully read file content",{path:t,contentLength:c.length}),c}catch(i){const s=i instanceof Error?i.message:"Unknown error";throw this.logger.error("Failed to read file content",{owner:e,repo:r,path:t,error:s}),new Error("Failed to read file ".concat(t,": ").concat(s))}}async listFiles(e,r){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"main";if(this.logger.debug("Listing files",{owner:e,repo:r,path:t,ref:s}),!this.workingDirectoryHandle)return{success:!1,error:"No working directory selected"};try{let e=await this.workingDirectoryHandle.getDirectoryHandle(r);if(t){const r=t.split("/").filter(e=>e.length>0);for(const t of r)e=await e.getDirectoryHandle(t)}const s=[];var o,a=!1,n=!1;try{for(var c,l=i(e.entries());a=!(c=await l.next()).done;a=!1){const[e,r]=c.value;{const i=t?"".concat(t,"/").concat(e):e;if("file"===r.kind){const t=r,o=await t.getFile();s.push({name:e,path:i,type:"file",size:o.size})}else"directory"===r.kind&&s.push({name:e,path:i,type:"dir"})}}}catch(g){n=!0,o=g}finally{try{a&&null!=l.return&&await l.return()}finally{if(n)throw o}}return this.logger.debug("Listed ".concat(s.length," entries"),{path:t,entryCount:s.length}),{success:!0,data:s}}catch(u){const e=u instanceof Error?u.message:"Unknown error";return this.logger.error("Failed to list files",{path:t,error:e}),{success:!1,error:"Failed to list files: ".concat(e)}}}async stageFile(e,r,t,s){this.logger.debug("Staging file",{owner:e,repo:r,path:t});try{const i=await this.createFile(e,r,t,s);return i.success?(this.logger.debug("File staged successfully",{path:t}),{success:!0,data:void 0}):i}catch(i){const e=i instanceof Error?i.message:"Unknown error";return this.logger.error("Failed to stage file",{path:t,error:e}),{success:!1,error:"Failed to stage file: ".concat(e)}}}async unstageFile(e,r,t){return this.logger.debug("Unstaging file",{owner:e,repo:r,path:t}),{success:!1,error:"Unstaging files not yet fully implemented"}}async commit(e,r,t){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"main";if(this.logger.debug("Creating commit",{owner:e,repo:r,message:t,branch:s}),!this.workingDirectoryHandle)return{success:!1,error:"No working directory selected"};try{await this.workingDirectoryHandle.getDirectoryHandle(r);const e={sha:"local-".concat(Date.now()),message:t,author:{name:"Local User",email:"local@sgex.local",date:(new Date).toISOString()},url:"file:///".concat(r)};return this.logger.debug("Commit created (simulated)",{commitInfo:e}),{success:!0,data:e}}catch(i){const e=i instanceof Error?i.message:"Unknown error";return this.logger.error("Failed to create commit",{error:e}),{success:!1,error:"Failed to create commit: ".concat(e)}}}async createFile(e,r,t,s){if(this.logger.debug("Creating file",{owner:e,repo:r,path:t}),!this.workingDirectoryHandle)return{success:!1,error:"No working directory selected"};try{const e=await this.workingDirectoryHandle.getDirectoryHandle(r),o=t.split("/").filter(e=>e.length>0);let a=e;for(let r=0;r<o.length-1;r++)try{a=await a.getDirectoryHandle(o[r])}catch(i){a=await a.getDirectoryHandle(o[r],{create:!0})}const n=o[o.length-1],c=await a.getFileHandle(n,{create:!0}),l=await c.createWritable();return await l.write(s),await l.close(),this.logger.debug("File created successfully",{path:t}),{success:!0,data:void 0}}catch(i){const e=i instanceof Error?i.message:"Unknown error";return this.logger.error("Failed to create file",{path:t,error:e}),{success:!1,error:"Failed to create file: ".concat(e)}}}async deleteFile(e,r,t){if(this.logger.debug("Deleting file",{owner:e,repo:r,path:t}),!this.workingDirectoryHandle)return{success:!1,error:"No working directory selected"};try{const e=await this.workingDirectoryHandle.getDirectoryHandle(r),s=t.split("/").filter(e=>e.length>0);let i=e;for(let r=0;r<s.length-1;r++)i=await i.getDirectoryHandle(s[r]);s[s.length-1];return{success:!1,error:"File deletion not supported by current File System Access API implementation"}}catch(s){const e=s instanceof Error?s.message:"Unknown error";return this.logger.error("Failed to delete file",{path:t,error:e}),{success:!1,error:"Failed to delete file: ".concat(e)}}}async renameFile(e,r,t,s){this.logger.debug("Renaming file",{owner:e,repo:r,oldPath:t,newPath:s});try{const i=await this.getFileContent(e,r,t),o=await this.createFile(e,r,s,i);if(!o.success)return o;const a=await this.deleteFile(e,r,t);return a.success?(this.logger.debug("File renamed successfully",{oldPath:t,newPath:s}),{success:!0,data:void 0}):(await this.deleteFile(e,r,s),a)}catch(i){const e=i instanceof Error?i.message:"Unknown error";return this.logger.error("Failed to rename file",{oldPath:t,newPath:s,error:e}),{success:!1,error:"Failed to rename file: ".concat(e)}}}async getGitStatus(e,r){if(this.logger.debug("Getting git status",{owner:e,repo:r}),!this.workingDirectoryHandle)return{success:!1,error:"No working directory selected"};try{await this.workingDirectoryHandle.getDirectoryHandle(r);const e=[];return this.logger.debug("Git status retrieved (simplified)",{statusLength:e.length}),{success:!0,data:e}}catch(t){const e=t instanceof Error?t.message:"Unknown error";return this.logger.error("Failed to get git status",{error:e}),{success:!1,error:"Failed to get git status: ".concat(e)}}}async resetChanges(e,r,t){if(this.logger.debug("Resetting changes",{owner:e,repo:r,path:t}),!this.workingDirectoryHandle)return{success:!1,error:"No working directory selected"};try{await this.workingDirectoryHandle.getDirectoryHandle(r);return t?(this.logger.warn("Resetting specific file not yet fully implemented",{path:t}),{success:!1,error:"Resetting specific files not yet supported"}):(this.logger.warn("Resetting all changes not yet fully implemented"),{success:!1,error:"Resetting all changes not yet supported"})}catch(s){const e=s instanceof Error?s.message:"Unknown error";return this.logger.error("Failed to reset changes",{error:e}),{success:!1,error:"Failed to reset changes: ".concat(e)}}}async getRepositoryStats(e,r){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"main";if(this.logger.debug("Getting repository statistics",{owner:e,repo:r,branch:t}),!this.workingDirectoryHandle)return{success:!1,error:"No working directory selected"};try{await this.workingDirectoryHandle.getDirectoryHandle(r);const e={commits:1,branches:1,contributors:1,lastCommit:{sha:"local-".concat(Date.now()),message:"Local repository access",author:{name:"Local User",email:"local@sgex.local",date:(new Date).toISOString()},url:"file:///".concat(r)}};return this.logger.debug("Repository statistics retrieved",{stats:e}),{success:!0,data:e}}catch(s){const e=s instanceof Error?s.message:"Unknown error";return this.logger.error("Failed to get repository statistics",{error:e}),{success:!1,error:"Failed to get repository statistics: ".concat(e)}}}};const c=new class{constructor(){this.githubService=null,this.localService=null,this.currentService=null,this.currentServiceType="github",this.logger=void 0,this.logger=a.A.getLogger("RepoServiceFactory"),this.logger.debug("RepoServiceFactory instance created")}createGitHubService(){return this.githubService||(this.githubService=s.A,this.logger.debug("GitHub service created")),this.githubService}createLocalService(){return this.localService||(this.localService=new n,this.logger.debug("Local service created")),this.localService}getCurrentService(){return this.currentService||(this.currentService=this.createGitHubService(),this.currentServiceType="github"),this.currentService}switchToService(e){if(this.logger.debug("Switching to service",{serviceType:e,current:this.currentServiceType}),e===this.currentServiceType&&this.currentService)return this.logger.debug("Already using requested service type"),this.currentService;switch(e){case"github":this.currentService=this.createGitHubService();break;case"local":this.currentService=this.createLocalService();break;default:throw this.logger.error("Unknown service type",{serviceType:e}),new Error("Unknown service type: ".concat(e))}return this.currentServiceType=e,this.logger.debug("Switched to service",{serviceType:e,serviceName:this.currentService.serviceName}),this.currentService}getServiceType(){return this.currentServiceType}getServiceCapabilities(e){switch(e||this.currentServiceType){case"github":return{hasAuthentication:!0,hasOrganizations:!0,hasCollaboration:!0,hasRemoteOperations:!0,hasIssues:!0,hasPullRequests:!0,hasActions:!0,hasWebInterface:!0,requiresToken:!0,supportsPrivateRepos:!0};case"local":return{hasAuthentication:!1,hasOrganizations:!1,hasCollaboration:!1,hasRemoteOperations:!1,hasIssues:!1,hasPullRequests:!1,hasActions:!1,hasWebInterface:!1,requiresToken:!1,supportsPrivateRepos:!0,hasFileSystemAccess:!0,hasLocalBranching:!0,hasLocalCommits:!0};default:return{}}}isServiceTypeSupported(e){switch(e){case"github":return!0;case"local":return"showDirectoryPicker"in window;default:return!1}}getAvailableServiceTypes(){const e=[];return this.isServiceTypeSupported("github")&&e.push("github"),this.isServiceTypeSupported("local")&&e.push("local"),e}reset(){this.logger.debug("Resetting all services"),this.githubService&&this.githubService.signOut(),this.localService&&this.localService.signOut(),this.githubService=null,this.localService=null,this.currentService=null,this.currentServiceType="github"}}}}]);