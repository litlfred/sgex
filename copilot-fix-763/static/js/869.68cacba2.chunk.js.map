{"version":3,"file":"static/js/869.68cacba2.chunk.js","mappings":"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","sources":["components/DocumentationViewer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { PageLayout } from './framework';\n\n// Dynamically generate documentation files structure\nconst generateDocFiles = () => {\n\n  const files = {\n    'overview': { file: 'README.md', title: 'Documentation Overview', category: 'root' },\n    'bpmn-integration': { file: 'bpmn-integration.md', title: 'BPMN Integration', category: 'root' },\n    'dak-components': { file: 'dak-components.md', title: 'DAK Components', category: 'root' },\n    'decision-table-editor': { file: 'decision-table-editor.md', title: 'Decision Table Editor', category: 'root' },\n    'framework-developer-guide': { file: 'framework-developer-guide.md', title: 'Framework Developer Guide', category: 'root' },\n    'page-framework': { file: 'page-framework.md', title: 'Page Framework', category: 'root' },\n    'page-inventory': { file: 'page-inventory.md', title: 'Page Inventory', category: 'root' },\n    'project-plan': { file: 'project-plan.md', title: 'Project Plan', category: 'root' },\n    'qa-testing': { file: 'qa-testing.md', title: 'QA Testing', category: 'root' },\n    'requirements': { file: 'requirements.md', title: 'Requirements', category: 'root' },\n    'solution-architecture': { file: 'solution-architecture.md', title: 'Solution Architecture', category: 'root' },\n    'ui-styling-requirements': { file: 'UI_STYLING_REQUIREMENTS.md', title: 'UI Styling Requirements', category: 'root' },\n    'who-cors-workaround': { file: 'WHO_CORS_WORKAROUND.md', title: 'WHO CORS Workaround', category: 'root' },\n    'workflows-overview': { file: 'workflows/README.md', title: 'Workflows Overview', category: 'workflows' }\n  };\n\n  return files;\n};\n\nconst docFiles = generateDocFiles();\n\nconst DocumentationViewer = () => {\n  const { docId } = useParams();\n  const navigate = useNavigate();\n  const [content, setContent] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadDocumentation = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const docInfo = docFiles[docId] || docFiles['overview'];\n\n        // For HTML files, open in a new tab to avoid navigation conflicts\n        if (docInfo.isHtml) {\n          // Check if file exists first\n          try {\n            const checkResponse = await fetch(`${process.env.PUBLIC_URL}/docs/${docInfo.file}`, { method: 'HEAD' });\n            if (checkResponse.ok) {\n              // File exists, open in new tab to avoid server conflicts\n              window.open(`${process.env.PUBLIC_URL}/docs/${docInfo.file}`, '_blank');\n              // Show message in current tab\n              setContent(`# ${docInfo.title}\\n\\nThe QA report has been opened in a new tab.\\n\\nIf it didn't open automatically, you can access it here: [${docInfo.file}](${process.env.PUBLIC_URL}/docs/${docInfo.file})`);\n              setLoading(false);\n              return;\n            } else {\n              // File doesn't exist, show helpful message\n              setContent(`# ${docInfo.title}\\n\\nThe QA report is generated during deployment and is available on the live site at: [${docInfo.file}](/docs/${docInfo.file})\\n\\nIf you're viewing this locally, the report will be available after the next deployment to GitHub Pages.`);\n              setLoading(false);\n              return;\n            }\n          } catch (htmlCheckError) {\n            // If check fails, show helpful message\n            setContent(`# ${docInfo.title}\\n\\nThe QA report is generated during deployment and is available on the live site.\\n\\nIf you're viewing this locally, the report will be available after the next deployment to GitHub Pages.`);\n            setLoading(false);\n            return;\n          }\n        }\n\n        // Fetch the markdown file from the docs folder\n        const response = await fetch(`${process.env.PUBLIC_URL}/docs/${docInfo.file}`);\n        \n        if (!response.ok) {\n          throw new Error(`Failed to load documentation: ${response.status}`);\n        }\n\n        const text = await response.text();\n        setContent(text);\n      } catch (err) {\n        console.error('Error loading documentation:', err);\n        setError('Failed to load documentation. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadDocumentation();\n  }, [docId]);\n\n  const renderMarkdown = (markdown) => {\n    // Simple markdown to HTML conversion for basic formatting\n    let html = markdown;\n\n    // Process tables first (before paragraph processing)\n    html = html.replace(/(\\|[^\\n]+\\|\\n\\|[-\\s|:]+\\|\\n(?:\\|[^\\n]+\\|\\n?)*)/gm, (match) => {\n      const lines = match.trim().split('\\n');\n      const headers = lines[0].split('|').slice(1, -1).map(h => h.trim());\n      const rows = lines.slice(2).map(row => row.split('|').slice(1, -1).map(cell => cell.trim()));\n      \n      let tableHtml = '<table class=\"doc-table\">\\n<thead>\\n<tr>\\n';\n      headers.forEach(header => {\n        tableHtml += `<th>${header}</th>\\n`;\n      });\n      tableHtml += '</tr>\\n</thead>\\n<tbody>\\n';\n      \n      rows.forEach(row => {\n        tableHtml += '<tr>\\n';\n        row.forEach(cell => {\n          tableHtml += `<td>${cell}</td>\\n`;\n        });\n        tableHtml += '</tr>\\n';\n      });\n      \n      tableHtml += '</tbody>\\n</table>\\n';\n      return tableHtml;\n    });\n\n    // Apply other markdown formatting\n    return html\n      .replace(/^# (.*$)/gim, '<h1>$1</h1>')\n      .replace(/^## (.*$)/gim, '<h2>$1</h2>')\n      .replace(/^### (.*$)/gim, '<h3>$1</h3>')\n      .replace(/^#### (.*$)/gim, '<h4>$1</h4>')\n      .replace(/\\*\\*(.*)\\*\\*/gim, '<strong>$1</strong>')\n      .replace(/\\*(.*)\\*/gim, '<em>$1</em>')\n      .replace(/!\\[([^\\]]*)\\]\\(([^)]*)\\)/gim, '<img alt=\"$1\" src=\"$2\" />')\n      .replace(/\\[([^\\]]*)\\]\\(([^)]*)\\)/gim, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>')\n      .replace(/`([^`]*)`/gim, '<code>$1</code>')\n      .replace(/^- (.*$)/gim, '<li>$1</li>')\n      .replace(/^(\\d+)\\. (.*$)/gim, '<li>$2</li>')\n      .replace(/\\n\\n/gim, '</p><p>')\n      .replace(/^\\n/gim, '<p>')\n      .replace(/\\n$/gim, '</p>');\n  };\n\n  if (loading) {\n    return (\n      <PageLayout pageName=\"documentation-viewer\">\n        <div className=\"documentation-viewer\">\n          <div className=\"doc-content\">\n            <div className=\"loading\">\n              <div className=\"spinner\"></div>\n              <p>Loading documentation...</p>\n            </div>\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  if (error) {\n    return (\n      <PageLayout pageName=\"documentation-viewer\">\n        <div className=\"documentation-viewer\">\n          <div className=\"doc-content\">\n            <div className=\"error-state\">\n              <h2>Error</h2>\n              <p>{error}</p>\n              <button onClick={() => window.location.reload()} className=\"retry-btn\">\n                Try Again\n              </button>\n            </div>\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  return (\n    <PageLayout pageName=\"documentation-viewer\">\n      <div className=\"documentation-viewer\">\n        <div className=\"doc-content\">\n        <div className=\"doc-sidebar\">\n          <h3>Documentation</h3>\n          <nav className=\"doc-menu\">\n            {(() => {\n              // Group files by category\n              const grouped = {};\n              Object.entries(docFiles).forEach(([key, doc]) => {\n                if (!grouped[doc.category]) {\n                  grouped[doc.category] = [];\n                }\n                grouped[doc.category].push({ key, ...doc });\n              });\n\n              // Sort within each category\n              Object.keys(grouped).forEach(category => {\n                grouped[category].sort((a, b) => a.title.localeCompare(b.title));\n              });\n\n              // Render sections\n              return Object.entries(grouped)\n                .sort(([a], [b]) => a === 'root' ? -1 : b === 'root' ? 1 : a.localeCompare(b))\n                .map(([category, items]) => (\n                  <div key={category} className=\"doc-category\">\n                    {category !== 'root' && (\n                      <div className=\"doc-category-header\">\n                        {category.charAt(0).toUpperCase() + category.slice(1)}\n                      </div>\n                    )}\n                    {items.map(({ key, title }) => (\n                      <button\n                        key={key}\n                        className={`doc-menu-item ${docId === key ? 'active' : ''} ${category !== 'root' ? 'doc-menu-item-nested' : ''}`}\n                        onClick={() => navigate(`/docs/${key}`)}\n                      >\n                        {title}\n                      </button>\n                    ))}\n                  </div>\n                ));\n            })()}\n          </nav>\n        </div>\n\n        <div className=\"doc-main\">\n          <article \n            className=\"doc-article\"\n            dangerouslySetInnerHTML={{ \n              __html: renderMarkdown(content)\n            }}\n          />\n        </div>\n      </div>\n      \n      </div>\n    </PageLayout>\n  );\n};\n\nexport default DocumentationViewer;"],"names":["docFiles","file","title","category","DocumentationViewer","docId","useParams","navigate","useNavigate","content","setContent","useState","loading","setLoading","error","setError","useEffect","async","docInfo","isHtml","fetch","concat","process","method","ok","window","open","htmlCheckError","response","Error","status","text","err","console","loadDocumentation","_jsx","PageLayout","pageName","children","className","_jsxs","onClick","location","reload","grouped","Object","entries","forEach","_ref","key","doc","push","_objectSpread","keys","sort","a","b","localeCompare","_ref2","_ref3","map","_ref4","items","charAt","toUpperCase","slice","_ref5","dangerouslySetInnerHTML","__html","markdown","html","replace","match","lines","trim","split","headers","h","rows","row","cell","tableHtml","header","renderMarkdown"],"sourceRoot":""}