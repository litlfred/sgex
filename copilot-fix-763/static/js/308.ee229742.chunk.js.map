{"version":3,"file":"static/js/308.ee229742.chunk.js","mappings":"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","sources":["utils/navigationUtils.js","components/ForkStatusBar.js","services/dakComplianceService.js","components/SaveDialog.js","components/StagingGround.js","components/Publications.js"],"sourcesContent":["/**\n * Utility functions for handling navigation with command-click support\n */\n\n/**\n * Detects if a click event should open in a new tab\n * @param {MouseEvent} event - The click event\n * @returns {boolean} - True if should open in new tab (Ctrl/Cmd+click)\n */\nexport const shouldOpenInNewTab = (event) => {\n  return !!(event?.ctrlKey || event?.metaKey); // Ctrl on Windows/Linux, Cmd on Mac\n};\n\n/**\n * Constructs a full URL from a relative path using the current base URL\n * @param {string} relativePath - The relative path (e.g., '/dashboard/user/repo')\n * @returns {string} - The full URL\n */\nexport const constructFullUrl = (relativePath) => {\n  const basePath = process.env.PUBLIC_URL || '';\n  const baseUrl = window.location.origin;\n  \n  // Remove leading slash from relativePath if present to avoid double slashes\n  const cleanPath = relativePath.startsWith('/') ? relativePath.slice(1) : relativePath;\n  \n  // Only add basePath if it's not empty\n  if (!basePath) {\n    return `${baseUrl}/${cleanPath}`;\n  }\n  \n  // Ensure basePath ends with slash for proper joining\n  const cleanBasePath = basePath.endsWith('/') ? basePath : basePath + '/';\n  \n  return `${baseUrl}${cleanBasePath}${cleanPath}`;\n};\n\n/**\n * Handles navigation with command-click support\n * @param {MouseEvent} event - The click event\n * @param {string} path - The navigation path\n * @param {Function} navigate - React Router navigate function\n * @param {Object} state - Optional state to pass with navigation\n */\nexport const handleNavigationClick = (event, path, navigate, state = null) => {\n  if (shouldOpenInNewTab(event)) {\n    // Open in new tab\n    const fullUrl = constructFullUrl(path);\n    window.open(fullUrl, '_blank', 'noopener,noreferrer');\n  } else {\n    // Navigate in same tab\n    if (state) {\n      navigate(path, { state });\n    } else {\n      navigate(path);\n    }\n  }\n};\n\n/**\n * Creates a click handler that supports command-click for new tabs\n * @param {string} path - The navigation path\n * @param {Function} navigate - React Router navigate function\n * @param {Object} state - Optional state to pass with navigation\n * @returns {Function} - Click handler function\n */\nexport const createNavigationClickHandler = (path, navigate, state = null) => {\n  return (event) => {\n    handleNavigationClick(event, path, navigate, state);\n  };\n};","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport { handleNavigationClick } from '../utils/navigationUtils';\n\nconst ForkStatusBar = ({ profile, repository, selectedBranch }) => {\n  const navigate = useNavigate();\n  \n  const [isExpanded, setIsExpanded] = useState(false);\n  const [forks, setForks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [parentRepository, setParentRepository] = useState(null);\n\n  // Get session storage key for this repository\n  const getStorageKey = React.useCallback(() => {\n    if (!repository) return null;\n    return `sgex_fork_status_${repository.full_name}`;\n  }, [repository]);\n\n  // Load expansion state from session storage\n  useEffect(() => {\n    const storageKey = getStorageKey();\n    if (storageKey) {\n      const savedState = sessionStorage.getItem(storageKey);\n      if (savedState !== null) {\n        setIsExpanded(JSON.parse(savedState));\n      }\n    }\n  }, [getStorageKey]);\n\n  // Save expansion state to session storage\n  const toggleExpansion = () => {\n    const newState = !isExpanded;\n    setIsExpanded(newState);\n    \n    const storageKey = getStorageKey();\n    if (storageKey) {\n      sessionStorage.setItem(storageKey, JSON.stringify(newState));\n    }\n  };\n\n  // Fetch forks and parent repository info when component mounts\n  useEffect(() => {\n    const fetchRepositoryInfo = async () => {\n      if (!repository) return;\n      \n      setLoading(true);\n      setError(null);\n      \n      try {\n        // Check if we need to fetch full repository details to get parent info\n        let fullRepository = repository;\n        if (!repository.parent && (repository.fork === true || repository.fork === undefined)) {\n          // Fetch full repository details to get parent information\n          try {\n            fullRepository = await githubService.getRepository(repository.owner.login, repository.name);\n          } catch (repoErr) {\n            console.warn('Could not fetch full repository details:', repoErr);\n            // Continue with existing repository data\n          }\n        }\n        \n        // Set parent repository if this is a fork\n        if (fullRepository.fork && fullRepository.parent) {\n          setParentRepository(fullRepository.parent);\n        }\n        \n        // Fetch forks for the current repository being viewed\n        const forks = await githubService.getRepositoryForks(repository.owner.login, repository.name);\n        setForks(forks);\n      } catch (err) {\n        console.error('Error fetching repository information:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRepositoryInfo();\n  }, [repository]);\n\n  // Generate DAK dashboard URL for a fork\n  const getForkDashboardUrl = (fork) => {\n    const owner = fork.owner.login;\n    const repoName = fork.name;\n    const branch = fork.default_branch || 'main';\n    return `/dashboard/${owner}/${repoName}/${branch}`;\n  };\n\n  // Handle parent repository navigation\n  const handleParentClick = (event) => {\n    if (!parentRepository) return;\n    \n    const dashboardUrl = getForkDashboardUrl(parentRepository);\n    const navigationState = {\n      profile: {\n        login: parentRepository.owner.login,\n        name: parentRepository.owner.login,\n        avatar_url: parentRepository.owner.avatar_url,\n        type: parentRepository.owner.type\n      },\n      repository: parentRepository,\n      selectedBranch: parentRepository.default_branch || 'main'\n    };\n    \n    handleNavigationClick(event, dashboardUrl, navigate, navigationState);\n  };\n\n  // Handle fork navigation\n  const handleForkClick = (event, fork) => {\n    const dashboardUrl = getForkDashboardUrl(fork);\n    const navigationState = {\n      profile: {\n        login: fork.owner.login,\n        name: fork.owner.login,\n        avatar_url: fork.owner.avatar_url,\n        type: fork.owner.type\n      },\n      repository: fork,\n      selectedBranch: fork.default_branch || 'main'\n    };\n    \n    handleNavigationClick(event, dashboardUrl, navigate, navigationState);\n  };\n\n  if (!repository || loading) {\n    return (\n      <div className=\"fork-status-bar loading\">\n        <div className=\"fork-status-header\">\n          <div className=\"fork-badge-placeholder\">\n            <span className=\"fork-icon\">🍴</span>\n            <span className=\"fork-count\">...</span>\n          </div>\n          <span className=\"fork-status-title\">Loading repository info...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"fork-status-bar error\">\n        <div className=\"fork-status-header\">\n          <div className=\"fork-badge\">\n            <span className=\"fork-icon\">🍴</span>\n            <span className=\"fork-count\">?</span>\n          </div>\n          <span className=\"fork-status-title\">Unable to load repository info</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`fork-status-bar ${isExpanded ? 'expanded' : 'collapsed'}`}>\n      <div className=\"fork-status-header\" onClick={toggleExpansion}>\n        <div className=\"fork-badge\">\n          <span className=\"fork-icon\">🍴</span>\n          <span className=\"fork-count\">{forks.length}</span>\n        </div>\n        <span className=\"fork-status-title\">\n          {parentRepository ? (\n            <>\n              Fork of{' '}\n              <span \n                className=\"parent-repo-link\" \n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleParentClick(e);\n                }}\n              >\n                {parentRepository.owner.login}/{parentRepository.name}\n              </span>\n              {forks.length > 0 && (\n                <> • {forks.length} fork{forks.length !== 1 ? 's' : ''}</>\n              )}\n            </>\n          ) : (\n            <>\n              {forks.length} fork{forks.length !== 1 ? 's' : ''} of {repository?.name || 'repository'}\n            </>\n          )}\n        </span>\n        <button className=\"fork-toggle-btn\" aria-label={isExpanded ? 'Collapse' : 'Expand'}>\n          <span className={`toggle-icon ${isExpanded ? 'expanded' : ''}`}>▼</span>\n        </button>\n      </div>\n      \n      {isExpanded && (\n        <div className=\"fork-list\">\n          {parentRepository && (\n            <div className=\"parent-section\">\n              <h4 className=\"section-title\">Parent Repository</h4>\n              <div \n                className=\"fork-item parent-item\"\n                onClick={(event) => handleParentClick(event)}\n              >\n                <div className=\"fork-avatar\">\n                  <img \n                    src={parentRepository.owner.avatar_url} \n                    alt={parentRepository.owner.login}\n                    className=\"fork-owner-avatar\"\n                  />\n                </div>\n                <div className=\"fork-info\">\n                  <div className=\"fork-name\">\n                    <strong>{parentRepository.owner.login}/{parentRepository.name}</strong>\n                    <span className=\"parent-badge\">Parent</span>\n                  </div>\n                  <div className=\"fork-description\">\n                    {parentRepository.description || 'No description available'}\n                  </div>\n                  <div className=\"fork-stats\">\n                    <span className=\"fork-stat\">\n                      ⭐ {parentRepository.stargazers_count}\n                    </span>\n                    <span className=\"fork-stat\">\n                      📝 {parentRepository.open_issues_count} issues\n                    </span>\n                    <span className=\"fork-stat\">\n                      📅 Updated {new Date(parentRepository.updated_at).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"fork-actions\">\n                  <span className=\"fork-link-hint\">Click to view DAK →</span>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {forks.length === 0 ? (\n            !parentRepository && (\n              <div className=\"no-forks\">\n                <p>No forks found for this repository.</p>\n              </div>\n            )\n          ) : (\n            <div className=\"forks-section\">\n              {parentRepository && <h4 className=\"section-title\">Forks ({forks.length})</h4>}\n              <div className=\"fork-items\">\n                {forks.map((fork) => (\n                  <div \n                    key={fork.id} \n                    className=\"fork-item\"\n                    onClick={(event) => handleForkClick(event, fork)}\n                  >\n                    <div className=\"fork-avatar\">\n                      <img \n                        src={fork.owner.avatar_url} \n                        alt={fork.owner.login}\n                        className=\"fork-owner-avatar\"\n                      />\n                    </div>\n                    <div className=\"fork-info\">\n                      <div className=\"fork-name\">\n                        <strong>{fork.owner.login}/{fork.name}</strong>\n                      </div>\n                      <div className=\"fork-description\">\n                        {fork.description || 'No description available'}\n                      </div>\n                      <div className=\"fork-stats\">\n                        <span className=\"fork-stat\">\n                          ⭐ {fork.stargazers_count}\n                        </span>\n                        <span className=\"fork-stat\">\n                          📝 {fork.open_issues_count} issues\n                        </span>\n                        <span className=\"fork-stat\">\n                          📅 Updated {new Date(fork.updated_at).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"fork-actions\">\n                      <span className=\"fork-link-hint\">Click to view DAK →</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ForkStatusBar;","/**\n * DAK Compliance Service\n * \n * Provides comprehensive validation for DAK components with support for error, warning, and info levels.\n * Designed to work in multiple environments: React client-side, command-line, and IDE integration.\n */\n\nimport { lazyLoadAjv, lazyLoadAjvFormats, lazyLoadYaml } from '../utils/lazyRouteUtils';\n\n// Import schema as a module\nconst sushiConfigSchema = require('../schemas/sushi-config.json');\n\nclass DAKComplianceService {\n  constructor() {\n    this.validators = new Map();\n    this.initializeSchemaValidator();\n    this.initializeDefaultValidators();\n  }\n\n  /**\n   * Initialize AJV schema validator for sushi-config.yaml\n   */\n  async initializeSchemaValidator() {\n    const Ajv = await lazyLoadAjv();\n    const addFormats = await lazyLoadAjvFormats();\n    \n    this.ajv = new Ajv({ allErrors: true, verbose: true });\n    addFormats(this.ajv);\n    this.sushiConfigValidator = this.ajv.compile(sushiConfigSchema);\n  }\n\n  /**\n   * Initialize default validators for common DAK file types\n   */\n  initializeDefaultValidators() {\n    // XML file validators (general)\n    this.addValidator('xml', 'xml-well-formed', {\n      level: 'error',\n      description: 'XML files must be well-formed',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    // BPMN file validators\n    this.addValidator('bpmn', 'xml-well-formed', {\n      level: 'error',\n      description: 'BPMN files must be well-formed XML',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    this.addValidator('bpmn', 'bpmn-namespace', {\n      level: 'error',\n      description: 'BPMN files must use correct BPMN 2.0 namespace',\n      validator: this.validateBPMNNamespace.bind(this)\n    });\n\n    this.addValidator('bpmn', 'has-start-event', {\n      level: 'warning',\n      description: 'BPMN process should have at least one start event',\n      validator: this.validateBPMNStartEvent.bind(this)\n    });\n\n    // DMN file validators\n    this.addValidator('dmn', 'xml-well-formed', {\n      level: 'error',\n      description: 'DMN files must be well-formed XML',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    this.addValidator('dmn', 'dmn-namespace', {\n      level: 'error',\n      description: 'DMN files must use correct DMN 1.3 namespace',\n      validator: this.validateDMNNamespace.bind(this)\n    });\n\n    // JSON file validators\n    this.addValidator('json', 'json-valid', {\n      level: 'error',\n      description: 'JSON files must be valid JSON',\n      validator: this.validateJSONSyntax.bind(this)\n    });\n\n    // FHIR resource validators\n    this.addValidator('json', 'fhir-resource-type', {\n      level: 'info',\n      description: 'FHIR resources should have valid resourceType',\n      validator: this.validateFHIRResourceType.bind(this)\n    });\n\n    // General file validators\n    this.addValidator('*', 'file-size-limit', {\n      level: 'warning',\n      description: 'Files should be under 1MB for optimal performance',\n      validator: this.validateFileSize.bind(this)\n    });\n\n    this.addValidator('*', 'filename-conventions', {\n      level: 'info',\n      description: 'Files should follow naming conventions',\n      validator: this.validateFilenameConventions.bind(this)\n    });\n\n    // WHO SMART Guidelines specific validators\n    this.addValidator('yaml', 'sushi-config-valid', {\n      level: 'error',\n      description: 'sushi-config.yaml must be valid and contain required fields',\n      validator: this.validateSushiConfig.bind(this)\n    });\n  }\n\n  /**\n   * Add a new validator\n   */\n  addValidator(fileType, validatorId, config) {\n    if (!this.validators.has(fileType)) {\n      this.validators.set(fileType, new Map());\n    }\n    this.validators.get(fileType).set(validatorId, config);\n  }\n\n  /**\n   * Remove a validator\n   */\n  removeValidator(fileType, validatorId) {\n    if (this.validators.has(fileType)) {\n      this.validators.get(fileType).delete(validatorId);\n    }\n  }\n\n  /**\n   * Validate a single file\n   */\n  async validateFile(filePath, content) {\n    const results = [];\n    const fileExtension = this.getFileExtension(filePath);\n    const fileName = this.getFileName(filePath);\n\n    // Get validators for this file type and universal validators\n    const typeValidators = this.validators.get(fileExtension) || new Map();\n    const universalValidators = this.validators.get('*') || new Map();\n\n    // Run type-specific validators\n    for (const [validatorId, config] of typeValidators) {\n      try {\n        const result = await config.validator(filePath, content, fileName);\n        if (result) {\n          results.push({\n            validatorId,\n            level: config.level,\n            description: config.description,\n            ...result\n          });\n        }\n      } catch (error) {\n        results.push({\n          validatorId,\n          level: 'error',\n          description: 'Validator execution failed',\n          message: error.message,\n          filePath\n        });\n      }\n    }\n\n    // Run universal validators\n    for (const [validatorId, config] of universalValidators) {\n      try {\n        const result = await config.validator(filePath, content, fileName);\n        if (result) {\n          results.push({\n            validatorId,\n            level: config.level,\n            description: config.description,\n            ...result\n          });\n        }\n      } catch (error) {\n        results.push({\n          validatorId,\n          level: 'error',\n          description: 'Validator execution failed',\n          message: error.message,\n          filePath\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Validate entire staging ground\n   */\n  async validateStagingGround(stagingGround) {\n    const results = {\n      summary: { error: 0, warning: 0, info: 0 },\n      files: {},\n      validatedAt: Date.now()\n    };\n\n    for (const file of stagingGround.files) {\n      const fileResults = await this.validateFile(file.path, file.content);\n      results.files[file.path] = fileResults;\n\n      // Update summary counts\n      fileResults.forEach(result => {\n        if (result.level === 'error') results.summary.error++;\n        else if (result.level === 'warning') results.summary.warning++;\n        else if (result.level === 'info') results.summary.info++;\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Check if staging ground can be saved (no error-level violations)\n   */\n  async canSave(stagingGround) {\n    const validation = await this.validateStagingGround(stagingGround);\n    return validation.summary.error === 0;\n  }\n\n  // Validator implementations\n\n  async validateXMLWellFormed(filePath, content) {\n    try {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, 'text/xml');\n      const parserError = doc.querySelector('parsererror');\n      \n      if (parserError) {\n        return {\n          message: 'XML is not well-formed: ' + parserError.textContent,\n          filePath\n        };\n      }\n      return null;\n    } catch (error) {\n      return {\n        message: 'Failed to parse XML: ' + error.message,\n        filePath\n      };\n    }\n  }\n\n  async validateBPMNNamespace(filePath, content) {\n    if (!content.includes('xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"')) {\n      return {\n        message: 'BPMN file missing correct BPMN 2.0 namespace declaration',\n        filePath,\n        suggestion: 'Add xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" to root element'\n      };\n    }\n    return null;\n  }\n\n  async validateBPMNStartEvent(filePath, content) {\n    if (!content.includes('<startEvent') && !content.includes('<bpmn:startEvent')) {\n      return {\n        message: 'BPMN process should contain at least one start event',\n        filePath,\n        suggestion: 'Add a start event to begin the process flow'\n      };\n    }\n    return null;\n  }\n\n  async validateDMNNamespace(filePath, content) {\n    if (!content.includes('xmlns:dmn=\"https://www.omg.org/spec/DMN/20191111/MODEL/\"')) {\n      return {\n        message: 'DMN file missing correct DMN 1.3 namespace declaration',\n        filePath,\n        suggestion: 'Add xmlns:dmn=\"https://www.omg.org/spec/DMN/20191111/MODEL/\" to root element'\n      };\n    }\n    return null;\n  }\n\n  async validateJSONSyntax(filePath, content) {\n    try {\n      JSON.parse(content);\n      return null;\n    } catch (error) {\n      return {\n        message: 'Invalid JSON syntax: ' + error.message,\n        filePath\n      };\n    }\n  }\n\n  async validateFHIRResourceType(filePath, content) {\n    try {\n      const json = JSON.parse(content);\n      const validResourceTypes = [\n        'StructureDefinition', 'ValueSet', 'CodeSystem', 'ConceptMap',\n        'Questionnaire', 'PlanDefinition', 'ActivityDefinition', 'Measure',\n        'Library', 'ImplementationGuide', 'Bundle', 'Patient', 'Practitioner'\n      ];\n\n      if (json.resourceType && !validResourceTypes.includes(json.resourceType)) {\n        return {\n          message: `Unknown FHIR resourceType: ${json.resourceType}`,\n          filePath,\n          suggestion: 'Verify the resourceType is correct for FHIR R4'\n        };\n      }\n      return null;\n    } catch (error) {\n      // Not JSON, skip this validator\n      return null;\n    }\n  }\n\n  async validateFileSize(filePath, content) {\n    const sizeInBytes = new Blob([content]).size;\n    const maxSize = 1024 * 1024; // 1MB\n\n    if (sizeInBytes > maxSize) {\n      return {\n        message: `File size (${(sizeInBytes / 1024 / 1024).toFixed(1)}MB) exceeds recommended limit of 1MB`,\n        filePath,\n        suggestion: 'Consider breaking large files into smaller components'\n      };\n    }\n    return null;\n  }\n\n  async validateFilenameConventions(filePath, content) {\n    const fileName = this.getFileName(filePath);\n    const issues = [];\n\n    // Check for spaces in filename\n    if (fileName.includes(' ')) {\n      issues.push('avoid spaces in filenames');\n    }\n\n    // Check for special characters\n    if (/[<>:\"|?*]/.test(fileName)) {\n      issues.push('avoid special characters (<>:\"|?*)');\n    }\n\n    // Check for very long names\n    if (fileName.length > 100) {\n      issues.push('filename is very long (>100 characters)');\n    }\n\n    if (issues.length > 0) {\n      return {\n        message: `Filename convention issues: ${issues.join(', ')}`,\n        filePath,\n        suggestion: 'Use lowercase letters, numbers, hyphens, and underscores'\n      };\n    }\n    return null;\n  }\n\n  async validateSushiConfig(filePath, content) {\n    if (!filePath.endsWith('sushi-config.yaml')) {\n      return null;\n    }\n\n    try {\n      // Parse YAML content\n      let parsedConfig;\n      try {\n        // Lazy load js-yaml to improve initial page responsiveness\n        const yaml = await lazyLoadYaml();\n        parsedConfig = yaml.load(content);\n      } catch (yamlError) {\n        return {\n          message: `Invalid YAML syntax: ${yamlError.message}`,\n          filePath,\n          suggestion: 'Fix YAML syntax errors and ensure proper indentation'\n        };\n      }\n\n      if (!parsedConfig || typeof parsedConfig !== 'object') {\n        return {\n          message: 'sushi-config.yaml must contain a valid YAML object',\n          filePath,\n          suggestion: 'Ensure the file contains proper YAML object structure'\n        };\n      }\n\n      // Validate against JSON schema\n      const isValid = this.sushiConfigValidator(parsedConfig);\n      \n      if (!isValid) {\n        const errors = this.sushiConfigValidator.errors;\n        const errorMessages = errors.map(error => {\n          const field = error.instancePath ? error.instancePath.replace('/', '') : error.params?.missingProperty || 'root';\n          let message = `${field}: ${error.message}`;\n          \n          if (error.params?.allowedValues) {\n            message += ` (allowed: ${error.params.allowedValues.join(', ')})`;\n          }\n          \n          return message;\n        });\n\n        return {\n          message: `sushi-config.yaml validation errors: ${errorMessages.join('; ')}`,\n          filePath,\n          suggestion: 'Review the sushi-config.yaml specification at https://fshschool.org/docs/sushi/configuration/',\n          details: errors\n        };\n      }\n\n      // Additional WHO SMART Guidelines specific validation\n      const whoValidation = this.validateWHOSmartGuidelines(parsedConfig);\n      if (whoValidation) {\n        return whoValidation;\n      }\n\n      return null;\n    } catch (error) {\n      return {\n        message: 'Failed to validate sushi-config.yaml: ' + error.message,\n        filePath,\n        suggestion: 'Check file format and content structure'\n      };\n    }\n  }\n\n  /**\n   * Additional validation for WHO SMART Guidelines compliance\n   */\n  validateWHOSmartGuidelines(config) {\n    const issues = [];\n\n    // Check for smart.who.int.base dependency\n    if (!config.dependencies || !config.dependencies['smart.who.int.base']) {\n      issues.push('missing smart.who.int.base dependency (required for WHO DAK compliance)');\n    }\n\n    // Check canonical URL pattern for WHO guidelines\n    if (config.canonical && config.canonical.includes('smart.who.int')) {\n      if (!config.id.startsWith('smart.who.int')) {\n        issues.push('id should start with \"smart.who.int\" when using WHO canonical URL');\n      }\n    }\n\n    // Check for required WHO metadata\n    if (config.canonical && config.canonical.includes('smart.who.int')) {\n      if (!config.publisher || !config.publisher.toLowerCase().includes('world health organization')) {\n        issues.push('publisher should include \"World Health Organization\" for WHO guidelines');\n      }\n\n      if (!config.jurisdiction || !Array.isArray(config.jurisdiction)) {\n        issues.push('jurisdiction should be specified for WHO guidelines');\n      }\n    }\n\n    if (issues.length > 0) {\n      return {\n        message: `WHO SMART Guidelines compliance issues: ${issues.join(', ')}`,\n        filePath: 'sushi-config.yaml',\n        suggestion: 'Ensure compliance with WHO SMART Guidelines requirements'\n      };\n    }\n\n    return null;\n  }\n\n  // Utility methods\n\n  getFileExtension(filePath) {\n    const parts = filePath.split('.');\n    return parts.length > 1 ? parts[parts.length - 1].toLowerCase() : '';\n  }\n\n  getFileName(filePath) {\n    return filePath.split('/').pop() || filePath;\n  }\n\n  /**\n   * Format validation results for display\n   */\n  formatValidationResults(validation) {\n    const formatted = {\n      canSave: validation.summary.error === 0,\n      summary: validation.summary,\n      files: []\n    };\n\n    Object.entries(validation.files).forEach(([filePath, results]) => {\n      if (results.length > 0) {\n        formatted.files.push({\n          path: filePath,\n          issues: results.map(result => ({\n            level: result.level,\n            message: result.message,\n            description: result.description,\n            suggestion: result.suggestion\n          }))\n        });\n      }\n    });\n\n    return formatted;\n  }\n\n  /**\n   * Get validation summary for UI display\n   */\n  getValidationSummary(validation) {\n    return {\n      error: validation.summary.error,\n      warning: validation.summary.warning,\n      info: validation.summary.info,\n      canSave: validation.summary.error === 0,\n      hasIssues: validation.summary.error + validation.summary.warning + validation.summary.info > 0\n    };\n  }\n}\n\n// Create singleton instance\nconst dakComplianceService = new DAKComplianceService();\n\nexport default dakComplianceService;","import React, { useState, useEffect } from 'react';\nimport githubService from '../services/githubService';\nimport dakComplianceService from '../services/dakComplianceService';\nimport stagingGroundService from '../services/stagingGroundService';\n\nconst SaveDialog = ({ \n  isOpen, \n  onClose, \n  stagingGround, \n  validation, \n  repository, \n  selectedBranch,\n  hasWriteAccess,\n  onSaveSuccess \n}) => {\n  const [commitMessage, setCommitMessage] = useState('');\n  const [overrideValidation, setOverrideValidation] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [showValidationDetails, setShowValidationDetails] = useState(false);\n\n  // Reset state when dialog opens\n  useEffect(() => {\n    if (isOpen) {\n      setCommitMessage(stagingGround?.message || '');\n      setOverrideValidation(false);\n      setIsSaving(false);\n      setError(null);\n      setShowValidationDetails(false);\n    }\n  }, [isOpen, stagingGround]);\n\n  if (!isOpen) return null;\n\n  const validationSummary = validation ? dakComplianceService.getValidationSummary(validation) : null;\n  const canSave = validationSummary ? (validationSummary.canSave || overrideValidation) : true;\n  const hasErrors = validationSummary ? validationSummary.error > 0 : false;\n\n  const handleSave = async () => {\n    if (!commitMessage.trim()) {\n      setError('Commit message is required');\n      return;\n    }\n\n    if (!hasWriteAccess) {\n      setError('You need write permissions to save changes');\n      return;\n    }\n\n    if (hasErrors && !overrideValidation) {\n      setError('Cannot save with validation errors. Enable override option to proceed anyway.');\n      return;\n    }\n\n    setIsSaving(true);\n    setError(null);\n\n    try {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      \n      if (repository.isDemo || (repository.owner && repository.owner.login === 'demo-user')) {\n        // Simulate save in demo mode\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        onSaveSuccess({\n          sha: 'demo-commit-sha',\n          message: commitMessage,\n          url: `https://github.com/${repository.full_name}/commit/demo-commit-sha`\n        });\n        return;\n      }\n\n      // Create commit with multiple files\n      const result = await githubService.createCommit(\n        owner,\n        repository.name,\n        selectedBranch,\n        commitMessage.trim(),\n        stagingGround.files\n      );\n\n      onSaveSuccess({\n        sha: result.sha,\n        message: commitMessage,\n        url: result.html_url\n      });\n\n    } catch (err) {\n      console.error('Error saving changes:', err);\n      setError(getErrorMessage(err));\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const getErrorMessage = (error) => {\n    if (error.status === 409) {\n      return 'Conflict detected. The branch has been updated since you started. Please refresh and try again.';\n    } else if (error.status === 403) {\n      return 'Permission denied. Check that your token has write access to this repository.';\n    } else if (error.status === 404) {\n      return 'Repository or branch not found. Please verify the repository exists and you have access.';\n    } else if (error.message) {\n      return error.message;\n    } else {\n      return 'An unexpected error occurred while saving. Please try again.';\n    }\n  };\n\n  const formatValidationIcon = (level) => {\n    switch (level) {\n      case 'error': return '🔴';\n      case 'warning': return '🟡';\n      case 'info': return '🟢';\n      default: return '❓';\n    }\n  };\n\n  // Handle removing individual file\n  const handleRemoveFile = (filePath) => {\n    if (window.confirm(`Are you sure you want to remove \"${filePath}\" from staging? This cannot be undone.`)) {\n      stagingGroundService.removeFile(filePath);\n    }\n  };\n\n  return (\n    <div className=\"save-dialog-overlay\">\n      <div className=\"save-dialog\">\n        <div className=\"dialog-header\">\n          <h3>💾 Save Changes</h3>\n          <button \n            className=\"dialog-close\"\n            onClick={onClose}\n            disabled={isSaving}\n          >\n            ×\n          </button>\n        </div>\n\n        <div className=\"dialog-content\">\n          {/* Files Summary */}\n          <div className=\"save-summary\">\n            <h4>Files to be committed ({stagingGround?.files?.length || 0}):</h4>\n            <div className=\"files-list\">\n              {stagingGround?.files?.map((file, index) => (\n                <div key={index} className=\"file-item\">\n                  <span className=\"file-icon\">📄</span>\n                  <span className=\"file-path\">{file.path}</span>\n                  <span className=\"file-size\">\n                    {(new Blob([file.content]).size / 1024).toFixed(1)} KB\n                  </span>\n                  <button\n                    className=\"remove-file-btn\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleRemoveFile(file.path);\n                    }}\n                    title={`Remove ${file.path} from staging`}\n                    disabled={isSaving}\n                  >\n                    🗑️\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Validation Status */}\n          {validationSummary && (\n            <div className=\"validation-section\">\n              <div \n                className={`validation-summary ${validationSummary.hasIssues ? 'has-issues' : 'clean'}`}\n                onClick={() => setShowValidationDetails(!showValidationDetails)}\n              >\n                <div className=\"validation-header\">\n                  <h4>🚦 Validation Status</h4>\n                  <div className=\"validation-badges\">\n                    {validationSummary.error > 0 && (\n                      <span className=\"validation-badge error\">\n                        🔴 {validationSummary.error}\n                      </span>\n                    )}\n                    {validationSummary.warning > 0 && (\n                      <span className=\"validation-badge warning\">\n                        🟡 {validationSummary.warning}\n                      </span>\n                    )}\n                    {validationSummary.info > 0 && (\n                      <span className=\"validation-badge info\">\n                        🟢 {validationSummary.info}\n                      </span>\n                    )}\n                    {!validationSummary.hasIssues && (\n                      <span className=\"validation-badge success\">\n                        ✅ All clear\n                      </span>\n                    )}\n                  </div>\n                  <span className={`expand-icon ${showValidationDetails ? 'expanded' : ''}`}>\n                    ▼\n                  </span>\n                </div>\n              </div>\n\n              {showValidationDetails && validation && (\n                <div className=\"validation-details\">\n                  {Object.entries(validation.files).map(([filePath, results]) => (\n                    results.length > 0 && (\n                      <div key={filePath} className=\"file-validation\">\n                        <h5>📄 {filePath}</h5>\n                        <div className=\"validation-issues\">\n                          {results.map((result, index) => (\n                            <div key={index} className={`validation-issue ${result.level}`}>\n                              <span className=\"issue-icon\">{formatValidationIcon(result.level)}</span>\n                              <div className=\"issue-content\">\n                                <div className=\"issue-message\">{result.message}</div>\n                                {result.suggestion && (\n                                  <div className=\"issue-suggestion\">💡 {result.suggestion}</div>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n\n              {/* Override option for errors */}\n              {hasErrors && (\n                <div className=\"override-section\">\n                  <label className=\"override-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      checked={overrideValidation}\n                      onChange={(e) => setOverrideValidation(e.target.checked)}\n                    />\n                    <span className=\"checkmark\"></span>\n                    Override validation errors and save anyway\n                  </label>\n                  <p className=\"override-warning\">\n                    ⚠️ Saving with validation errors may cause issues with your DAK.\n                    Only enable this if you're sure about your changes.\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Commit Message */}\n          <div className=\"commit-message-section\">\n            <label htmlFor=\"commit-message\">\n              <h4>✍️ Commit Message</h4>\n            </label>\n            <textarea\n              id=\"commit-message\"\n              className=\"commit-message-input\"\n              value={commitMessage}\n              onChange={(e) => setCommitMessage(e.target.value)}\n              placeholder=\"Describe your changes...\"\n              rows={3}\n              disabled={isSaving}\n              required\n            />\n            <div className=\"commit-tips\">\n              <p>💡 <strong>Tip:</strong> Write a clear, descriptive message about what you changed and why.</p>\n            </div>\n          </div>\n\n          {/* Error Display */}\n          {error && (\n            <div className=\"error-section\">\n              <div className=\"error-message\">\n                <span className=\"error-icon\">❌</span>\n                {error}\n              </div>\n            </div>\n          )}\n\n          {/* Repository Info */}\n          <div className=\"repo-info\">\n            <div className=\"info-item\">\n              <span className=\"info-label\">Repository:</span>\n              <span className=\"info-value\">{repository?.full_name}</span>\n            </div>\n            <div className=\"info-item\">\n              <span className=\"info-label\">Branch:</span>\n              <span className=\"info-value\">{selectedBranch}</span>\n            </div>\n            <div className=\"info-item\">\n              <span className=\"info-label\">Access:</span>\n              <span className={`info-value ${hasWriteAccess ? 'write' : 'read'}`}>\n                {hasWriteAccess ? '✏️ Write' : '👁️ Read-only'}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"dialog-actions\">\n          <button\n            className=\"action-btn secondary\"\n            onClick={onClose}\n            disabled={isSaving}\n          >\n            Cancel\n          </button>\n          <button\n            className=\"action-btn primary\"\n            onClick={handleSave}\n            disabled={!canSave || !commitMessage.trim() || isSaving || !hasWriteAccess}\n          >\n            {isSaving ? (\n              <>\n                <span className=\"saving-spinner\">⏳</span>\n                Saving...\n              </>\n            ) : (\n              <>💾 Save Changes</>\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SaveDialog;","import React, { useState, useEffect, useCallback } from 'react';\nimport stagingGroundService from '../services/stagingGroundService';\nimport dakComplianceService from '../services/dakComplianceService';\nimport SaveDialog from './SaveDialog';\n\nconst StagingGround = ({ repository, selectedBranch, hasWriteAccess, profile }) => {\n  const [stagingGround, setStagingGround] = useState(null);\n  const [validation, setValidation] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n\n  // Load staging ground data\n  const loadStagingGroundData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const currentStagingGround = stagingGroundService.getStagingGround();\n      setStagingGround(currentStagingGround);\n      \n      if (currentStagingGround.files.length > 0) {\n        await validateStagingGround(currentStagingGround);\n      }\n    } catch (err) {\n      setError('Failed to load staging ground data');\n      console.error('Error loading staging ground:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Initialize staging ground service\n  useEffect(() => {\n    if (repository && selectedBranch) {\n      stagingGroundService.initialize(repository, selectedBranch);\n      loadStagingGroundData();\n\n      // Subscribe to staging ground changes\n      const unsubscribe = stagingGroundService.addListener((updatedStagingGround) => {\n        setStagingGround(updatedStagingGround);\n        validateStagingGround(updatedStagingGround);\n      });\n\n      return unsubscribe;\n    }\n  }, [repository, selectedBranch, loadStagingGroundData]);\n\n  // Validate staging ground\n  const validateStagingGround = async (stagingGroundData) => {\n    if (!stagingGroundData || stagingGroundData.files.length === 0) {\n      setValidation(null);\n      return;\n    }\n\n    try {\n      const validationResult = await dakComplianceService.validateStagingGround(stagingGroundData);\n      setValidation(validationResult);\n    } catch (err) {\n      console.error('Error validating staging ground:', err);\n      setValidation(null);\n    }\n  };\n\n  // Handle saving changes\n  const handleSave = () => {\n    if (!hasWriteAccess) {\n      alert('You need write permissions to save changes to this repository.');\n      return;\n    }\n    \n    setShowSaveDialog(true);\n  };\n\n  // Handle successful save\n  const handleSaveSuccess = (result) => {\n    setShowSaveDialog(false);\n    \n    // Clear staging ground after successful save\n    stagingGroundService.clearStagingGround();\n    \n    // Show success message\n    alert(`Changes saved successfully! Commit: ${result.sha.substring(0, 7)}`);\n  };\n\n  // Handle clearing staging ground\n  const handleClearChanges = () => {\n    if (window.confirm('Are you sure you want to discard all changes? This cannot be undone.')) {\n      stagingGroundService.clearStagingGround();\n    }\n  };\n\n  // Handle removing individual file\n  const handleRemoveFile = (filePath) => {\n    if (window.confirm(`Are you sure you want to remove \"${filePath}\" from staging? This cannot be undone.`)) {\n      stagingGroundService.removeFile(filePath);\n    }\n  };\n\n  // Get validation summary for display\n  const getValidationSummary = () => {\n    if (!validation) {\n      return { error: 0, warning: 0, info: 0, canSave: true };\n    }\n    return dakComplianceService.getValidationSummary(validation);\n  };\n\n  // Format file list for display\n  const formatFileList = () => {\n    if (!stagingGround || !stagingGround.files) return [];\n    \n    return stagingGround.files.map(file => ({\n      path: file.path,\n      size: new Blob([file.content]).size,\n      lastModified: file.timestamp\n    }));\n  };\n\n  const validationSummary = getValidationSummary();\n  const hasChanges = stagingGround && stagingGround.files.length > 0;\n  const filesCount = stagingGround ? stagingGround.files.length : 0;\n\n  return (\n    <div className=\"staging-ground-section\">\n      <div className=\"section-header\">\n        <h3 className=\"section-title\">\n          <span className=\"section-icon\">📝</span>\n          Staging Ground\n          {hasChanges && (\n            <span className=\"files-badge\">\n              {filesCount} file{filesCount !== 1 ? 's' : ''}\n            </span>\n          )}\n        </h3>\n        <p className=\"section-description\">\n          Changes made through DAK component editors are staged here before being committed to the repository.\n          Review and commit your changes when ready.\n        </p>\n      </div>\n\n      <div className=\"staging-content\">\n        {loading ? (\n          <div className=\"loading-indicator\">\n            <span className=\"loading-spinner\">⏳</span>\n            Loading staging ground...\n          </div>\n        ) : error ? (\n          <div className=\"error-message\">\n            <span className=\"error-icon\">⚠️</span>\n            {error}\n          </div>\n        ) : (\n          <>\n            {/* Staging Status Bar */}\n            <div className=\"staging-status-bar\">\n              <div className=\"status-indicators\">\n                {/* Validation stoplight */}\n                <div className=\"validation-stoplight\">\n                  <div className={`stoplight-indicator error ${validationSummary.error === 0 ? 'lit' : ''}`}>\n                    🔴\n                    {validationSummary.error > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.error}</span>\n                    )}\n                  </div>\n                  <div className={`stoplight-indicator warning ${validationSummary.warning === 0 ? 'lit' : ''}`}>\n                    🟡\n                    {validationSummary.warning > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.warning}</span>\n                    )}\n                  </div>\n                  <div className={`stoplight-indicator info ${validationSummary.info === 0 ? 'lit' : ''}`}>\n                    🟢\n                    {validationSummary.info > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.info}</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Save button */}\n              <button\n                className={`save-btn ${!hasChanges || !validationSummary.canSave ? 'disabled' : ''}`}\n                onClick={handleSave}\n                disabled={!hasChanges || !hasWriteAccess}\n                title={\n                  !hasChanges ? 'No changes to save' :\n                  !hasWriteAccess ? 'Write access required' :\n                  !validationSummary.canSave ? 'Fix validation errors first' :\n                  'Save changes to repository'\n                }\n              >\n                💾 Save Changes\n              </button>\n            </div>\n\n            {/* Changed Files Section */}\n            <div className=\"staging-files-section\">\n              <h4>📁 Changed Files</h4>\n              {hasChanges ? (\n                <div className=\"changed-files\">\n                  {formatFileList().map((file, index) => (\n                    <div key={index} className=\"file-item\">\n                      <div className=\"file-info\">\n                        <span className=\"file-icon\">📄</span>\n                        <span className=\"file-path\">{file.path}</span>\n                      </div>\n                      <div className=\"file-meta\">\n                        <span className=\"file-size\">\n                          {(file.size / 1024).toFixed(1)} KB\n                        </span>\n                        <span className=\"file-time\">\n                          {new Date(file.lastModified).toLocaleTimeString()}\n                        </span>\n                        <button\n                          className=\"remove-file-btn\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleRemoveFile(file.path);\n                          }}\n                          title={`Remove ${file.path} from staging`}\n                        >\n                          🗑️\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"file-actions\">\n                    <button\n                      className=\"action-btn secondary small\"\n                      onClick={handleClearChanges}\n                    >\n                      🗑️ Clear All Changes\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"no-changes\">\n                  <p>No changes in staging ground</p>\n                  <p className=\"help-text\">\n                    Changes made through DAK component editors will appear here before being saved to the repository.\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {/* Commit Message Preview */}\n            {hasChanges && stagingGround.message && (\n              <div className=\"commit-message-section\">\n                <h4>✍️ Commit Message</h4>\n                <div className=\"commit-preview\">\n                  <p>{stagingGround.message}</p>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Save Dialog */}\n      <SaveDialog\n        isOpen={showSaveDialog}\n        onClose={() => setShowSaveDialog(false)}\n        stagingGround={stagingGround}\n        validation={validation}\n        repository={repository}\n        selectedBranch={selectedBranch}\n        hasWriteAccess={hasWriteAccess}\n        onSaveSuccess={handleSaveSuccess}\n      />\n    </div>\n  );\n};\n\nexport default StagingGround;","import React, { useState, useEffect } from 'react';\nimport githubService from '../services/githubService';\nimport StagingGround from './StagingGround';\n\nconst Publications = ({ profile, repository, selectedBranch, hasWriteAccess }) => {\n  const [branches, setBranches] = useState([]);\n  const [workflows, setWorkflows] = useState([]);\n  const [workflowRuns, setWorkflowRuns] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const owner = repository.owner?.login || repository.full_name.split('/')[0];\n  const repoName = repository.name;\n\n  useEffect(() => {\n    const fetchPublicationData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Handle demo mode - provide mock data\n        if (profile?.isDemo) {\n          const mockBranches = [\n            { name: 'main', commit: { sha: 'abc123' } },\n            { name: 'feature/updates', commit: { sha: 'def456' } },\n            { name: 'dev', commit: { sha: 'ghi789' } }\n          ];\n          setBranches(mockBranches);\n\n          const mockWorkflows = [\n            { id: 'pages-build', name: 'Deploy to GitHub Pages', triggers: ['push', 'manual'] }\n          ];\n          setWorkflows(mockWorkflows);\n\n          // Mock workflow runs\n          const mockWorkflowRuns = {\n            'main': { \n              status: 'completed', \n              conclusion: 'success', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123456`,\n              updated_at: new Date().toISOString()\n            },\n            'feature/updates': { \n              status: 'completed', \n              conclusion: 'action_required', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123457`,\n              updated_at: new Date().toISOString()\n            },\n            'dev': { \n              status: 'completed', \n              conclusion: 'failure', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123458`,\n              updated_at: new Date().toISOString()\n            }\n          };\n          setWorkflowRuns(mockWorkflowRuns);\n          setLoading(false);\n          return;\n        }\n\n        // Fetch branches (excluding gh-pages)\n        const branchesData = await githubService.getBranches(owner, repoName);\n        const filteredBranches = branchesData.filter(branch => branch.name !== 'gh-pages');\n        setBranches(filteredBranches);\n\n        // Fetch workflows to find ghbuild workflow\n        const workflowsData = await githubService.getWorkflows(owner, repoName);\n        setWorkflows(workflowsData);\n\n        // Find the ghbuild workflow (look for workflow with 'build' or 'publish' in name)\n        const ghbuildWorkflow = workflowsData.find(workflow => \n          workflow.name.toLowerCase().includes('build') || \n          workflow.name.toLowerCase().includes('publish') ||\n          workflow.name.toLowerCase().includes('pages')\n        );\n\n        // Fetch recent workflow runs for each branch if ghbuild workflow exists and has valid ID\n        if (ghbuildWorkflow && ghbuildWorkflow.id) {\n          const runsByBranch = {};\n          for (const branch of filteredBranches) {\n            try {\n              const runs = await githubService.getWorkflowRunsForWorkflow(\n                owner, \n                repoName, \n                ghbuildWorkflow.id,\n                { branch: branch.name, per_page: 1 }\n              );\n              if (runs.length > 0) {\n                runsByBranch[branch.name] = runs[0];\n              }\n            } catch (err) {\n              console.warn(`Could not fetch workflow runs for branch ${branch.name}:`, err);\n            }\n          }\n          setWorkflowRuns(runsByBranch);\n        } else if (ghbuildWorkflow && !ghbuildWorkflow.id) {\n          console.warn('Found workflow but missing ID:', ghbuildWorkflow);\n        }\n\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching publication data:', err);\n        setError('Failed to load publication data');\n        setLoading(false);\n      }\n    };\n\n    fetchPublicationData();\n  }, [owner, repoName, profile?.isDemo]);\n\n  const getPublicationUrl = (branchName) => {\n    if (branchName === repository.default_branch || branchName === 'main') {\n      return `https://${owner}.github.io/${repoName}/`;\n    } else {\n      return `https://${owner}.github.io/${repoName}/branches/${branchName}/`;\n    }\n  };\n\n  const getWorkflowStatusIcon = (branchName) => {\n    const run = workflowRuns[branchName];\n    if (!run) return { icon: '⚪', title: 'No recent workflow runs', link: null };\n\n    const status = run.status;\n    const conclusion = run.conclusion;\n\n    if (status === 'in_progress' || status === 'queued') {\n      return { \n        icon: '🔄', \n        title: 'Workflow running', \n        link: run.html_url,\n        className: 'running' \n      };\n    } else if (conclusion === 'success') {\n      return { \n        icon: '✅', \n        title: 'Last build successful', \n        link: run.html_url,\n        className: 'success' \n      };\n    } else if (conclusion === 'failure') {\n      return { \n        icon: '❌', \n        title: 'Last build failed', \n        link: run.html_url,\n        className: 'failure' \n      };\n    } else if (conclusion === 'action_required') {\n      return { \n        icon: '⏳', \n        title: 'Workflow requires approval', \n        link: run.html_url,\n        className: 'approval-required' \n      };\n    } else {\n      return { \n        icon: '⚠️', \n        title: `Build ${conclusion || status}`, \n        link: run.html_url,\n        className: 'warning' \n      };\n    }\n  };\n\n  const handleRestartWorkflow = async (branchName) => {\n    // Handle demo mode\n    if (profile?.isDemo) {\n      alert(`Demo Mode: Workflow restart simulated for branch: ${branchName}`);\n      return;\n    }\n\n    const ghbuildWorkflow = workflows.find(workflow => \n      workflow.name.toLowerCase().includes('build') || \n      workflow.name.toLowerCase().includes('publish') ||\n      workflow.name.toLowerCase().includes('pages')\n    );\n\n    if (!ghbuildWorkflow) {\n      alert('No suitable workflow found to restart');\n      return;\n    }\n\n    if (!ghbuildWorkflow.id) {\n      alert('Workflow found but missing ID - cannot restart');\n      console.warn('Workflow missing ID:', ghbuildWorkflow);\n      return;\n    }\n\n    try {\n      await githubService.triggerWorkflow(owner, repoName, ghbuildWorkflow.id, branchName);\n      alert(`Workflow restarted for branch: ${branchName}`);\n      \n      // Refresh workflow runs after a delay\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    } catch (err) {\n      console.error('Error restarting workflow:', err);\n      alert('Failed to restart workflow. Please check your permissions.');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"publications-loading\">\n        <div className=\"loading-content\">\n          <h3>Loading Publications...</h3>\n          <p>Fetching branch and workflow information...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"publications-error\">\n        <div className=\"error-content\">\n          <h3>Error Loading Publications</h3>\n          <p>{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"publications-section\">\n      {/* Staging Ground Section */}\n      <StagingGround\n        repository={repository}\n        selectedBranch={selectedBranch}\n        hasWriteAccess={hasWriteAccess}\n        profile={profile}\n      />\n      \n      <div className=\"section-header\">\n        <h3 className=\"section-title\">Published DAK Content</h3>\n        <p className=\"section-description\">\n          Access published Implementation Guide content for this DAK repository. Each branch is published \n          automatically via GitHub Actions to GitHub Pages.\n        </p>\n      </div>\n\n      <div className=\"publications-grid\">\n        {branches.map((branch) => {\n          const isMainBranch = branch.name === repository.default_branch || branch.name === 'main';\n          const publicationUrl = getPublicationUrl(branch.name);\n          const workflowStatus = getWorkflowStatusIcon(branch.name);\n\n          return (\n            <div key={branch.name} className={`publication-card ${isMainBranch ? 'main-branch' : ''}`}>\n              <div className=\"publication-header\">\n                <div className=\"branch-info\">\n                  <span className=\"branch-icon\">🌿</span>\n                  <span className=\"branch-name\">{branch.name}</span>\n                  {isMainBranch && <span className=\"main-badge\">MAIN</span>}\n                </div>\n                <div className=\"workflow-status\">\n                  {workflowStatus.link ? (\n                    <a \n                      href={workflowStatus.link} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className={`status-icon ${workflowStatus.className || ''}`}\n                      title={workflowStatus.title}\n                    >\n                      {workflowStatus.icon}\n                    </a>\n                  ) : (\n                    <span \n                      className={`status-icon ${workflowStatus.className || ''}`}\n                      title={workflowStatus.title}\n                    >\n                      {workflowStatus.icon}\n                    </span>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"publication-content\">\n                <div className=\"publication-url\">\n                  <label>Published at:</label>\n                  <a \n                    href={publicationUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"publication-link\"\n                  >\n                    {publicationUrl}\n                    <span className=\"external-link\">↗</span>\n                  </a>\n                </div>\n\n                <div className=\"publication-actions\">\n                  <button\n                    className=\"restart-workflow-btn\"\n                    onClick={() => handleRestartWorkflow(branch.name)}\n                    disabled={!hasWriteAccess}\n                    title={hasWriteAccess ? 'Restart build workflow for this branch' : 'Write permissions required'}\n                  >\n                    🔄 Rebuild\n                  </button>\n                  \n                  <a \n                    href={`https://github.com/${owner}/${repoName}/tree/${branch.name}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"view-source-btn\"\n                    title=\"View source code for this branch\"\n                  >\n                    👁️ View Source\n                  </a>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {branches.length === 0 && (\n        <div className=\"no-branches\">\n          <p>No publishable branches found (excluding gh-pages).</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Publications;"],"names":["handleNavigationClick","event","path","navigate","state","arguments","length","undefined","ctrlKey","metaKey","shouldOpenInNewTab","fullUrl","relativePath","basePath","process","baseUrl","window","location","origin","cleanPath","startsWith","slice","concat","cleanBasePath","endsWith","constructFullUrl","open","_ref","profile","repository","selectedBranch","useNavigate","isExpanded","setIsExpanded","useState","forks","setForks","loading","setLoading","error","setError","parentRepository","setParentRepository","getStorageKey","React","full_name","useEffect","storageKey","savedState","sessionStorage","getItem","JSON","parse","async","fullRepository","parent","fork","githubService","getRepository","owner","login","name","repoErr","console","warn","getRepositoryForks","err","message","fetchRepositoryInfo","getForkDashboardUrl","repoName","branch","default_branch","handleParentClick","dashboardUrl","navigationState","avatar_url","type","_jsx","className","children","_jsxs","onClick","toggleExpansion","newState","setItem","stringify","_Fragment","e","stopPropagation","src","alt","description","stargazers_count","open_issues_count","Date","updated_at","toLocaleDateString","map","handleForkClick","id","sushiConfigSchema","require","constructor","this","validators","Map","initializeSchemaValidator","initializeDefaultValidators","Ajv","lazyLoadAjv","addFormats","lazyLoadAjvFormats","ajv","allErrors","verbose","sushiConfigValidator","compile","addValidator","level","validator","validateXMLWellFormed","bind","validateBPMNNamespace","validateBPMNStartEvent","validateDMNNamespace","validateJSONSyntax","validateFHIRResourceType","validateFileSize","validateFilenameConventions","validateSushiConfig","fileType","validatorId","config","has","set","get","removeValidator","delete","validateFile","filePath","content","results","fileExtension","getFileExtension","fileName","getFileName","typeValidators","universalValidators","result","push","_objectSpread","validateStagingGround","stagingGround","summary","warning","info","files","validatedAt","now","file","fileResults","forEach","canSave","parser","DOMParser","parserError","parseFromString","querySelector","textContent","includes","suggestion","json","validResourceTypes","resourceType","sizeInBytes","Blob","size","toFixed","issues","test","join","parsedConfig","lazyLoadYaml","load","yamlError","errors","errorMessages","_error$params","_error$params2","field","instancePath","replace","params","missingProperty","allowedValues","details","whoValidation","validateWHOSmartGuidelines","dependencies","canonical","publisher","toLowerCase","jurisdiction","Array","isArray","parts","split","pop","formatValidationResults","validation","formatted","Object","entries","getValidationSummary","hasIssues","_stagingGround$files","_stagingGround$files2","isOpen","onClose","hasWriteAccess","onSaveSuccess","commitMessage","setCommitMessage","overrideValidation","setOverrideValidation","isSaving","setIsSaving","showValidationDetails","setShowValidationDetails","validationSummary","dakComplianceService","hasErrors","getErrorMessage","status","formatValidationIcon","disabled","index","confirm","stagingGroundService","removeFile","title","_ref2","checked","onChange","target","htmlFor","value","placeholder","rows","required","trim","_repository$owner","isDemo","Promise","resolve","setTimeout","sha","url","createCommit","html_url","setStagingGround","setValidation","showSaveDialog","setShowSaveDialog","loadStagingGroundData","useCallback","currentStagingGround","getStagingGround","initialize","addListener","updatedStagingGround","stagingGroundData","validationResult","hasChanges","filesCount","handleSave","alert","lastModified","timestamp","toLocaleTimeString","handleClearChanges","clearStagingGround","SaveDialog","substring","branches","setBranches","workflows","setWorkflows","workflowRuns","setWorkflowRuns","commit","triggers","mockWorkflowRuns","conclusion","toISOString","filteredBranches","getBranches","filter","workflowsData","getWorkflows","ghbuildWorkflow","find","workflow","runsByBranch","runs","getWorkflowRunsForWorkflow","per_page","fetchPublicationData","StagingGround","isMainBranch","publicationUrl","branchName","workflowStatus","run","icon","link","getWorkflowStatusIcon","href","rel","triggerWorkflow","reload","handleRestartWorkflow"],"sourceRoot":""}