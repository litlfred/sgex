{"version":3,"file":"static/js/997.94a68fd8.chunk.js","mappings":"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","sources":["components/LandingPage.js","components/SAMLAuthModal.js","components/PATLogin.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport githubService from '../services/githubService';\nimport repositoryCacheService from '../services/repositoryCacheService';\nimport secureTokenStorage from '../services/secureTokenStorage';\nimport samlAuthService from '../services/samlAuthService';\nimport PATLogin from './PATLogin';\nimport SAMLAuthModal from './SAMLAuthModal';\nimport { PageLayout } from './framework';\nimport { handleNavigationClick } from '../utils/navigationUtils';\n\nconst LandingPage = () => {\n  const { t } = useTranslation();\n  const [user, setUser] = useState(null);\n  const [organizations, setOrganizations] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [dakCounts, setDakCounts] = useState({});\n  const [warningMessage, setWarningMessage] = useState(null);\n  const [samlModalOpen, setSamlModalOpen] = useState(false);\n  const [samlModalInfo, setSamlModalInfo] = useState(null);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Load cached DAK counts without initiating any scanning\n  const loadCachedDakCounts = useCallback((userData, orgsData) => {\n    if (!githubService.isAuth()) {\n      return;\n    }\n\n    const counts = {};\n    \n    // Check cache for user's personal repositories\n    if (userData) {\n      const userCache = repositoryCacheService.getCachedRepositories(userData.login, 'user');\n      if (userCache && userCache.repositories) {\n        counts[`user-${userData.login}`] = userCache.repositories.length;\n      }\n    }\n    \n    // Check cache for organization repositories\n    orgsData.forEach(org => {\n      const orgCache = repositoryCacheService.getCachedRepositories(org.login, 'org');\n      if (orgCache && orgCache.repositories) {\n        counts[`org-${org.login}`] = orgCache.repositories.length;\n      }\n    });\n    \n    setDakCounts(counts);\n  }, []);\n\n  const fetchUserData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Check token permissions first\n      await githubService.checkTokenPermissions();\n      \n      // Fetch user data using GitHub service\n      const userData = await githubService.getCurrentUser();\n      setUser(userData);\n      \n      // Fetch organizations inline\n      let orgsData = [];\n      \n      if (githubService.isAuth()) {\n        try {\n          orgsData = await githubService.getUserOrganizations();\n        } catch (error) {\n          console.error('Error fetching organizations:', error);\n          orgsData = [];\n        }\n      }\n      \n      // Always ensure WHO organization is included\n      try {\n        const whoOrganization = await githubService.getWHOOrganization();\n        \n        // Check if WHO organization is already in the list\n        const whoIndex = orgsData.findIndex(org => org.login === 'WorldHealthOrganization');\n        \n        if (whoIndex >= 0) {\n          // Replace existing WHO org with fresh data and ensure isWHO flag\n          orgsData[whoIndex] = { ...orgsData[whoIndex], ...whoOrganization, isWHO: true };\n        } else {\n          // Add WHO organization at the beginning of the list\n          orgsData.unshift(whoOrganization);\n        }\n      } catch (whoError) {\n        console.warn('Could not fetch WHO organization data, using fallback:', whoError);\n        \n        // Fallback to hardcoded WHO organization\n        const whoOrganization = {\n          id: 'who-organization',\n          login: 'WorldHealthOrganization',\n          name: 'World Health Organization',\n          description: 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n          avatar_url: 'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',\n          html_url: 'https://github.com/WorldHealthOrganization',\n          type: 'Organization',\n          isWHO: true\n        };\n        \n        // Check if WHO organization is already in the list\n        const hasWHO = orgsData.some(org => org.login === 'WorldHealthOrganization');\n        \n        if (!hasWHO) {\n          // Add WHO organization at the beginning of the list\n          orgsData.unshift(whoOrganization);\n        } else {\n          // Ensure existing WHO organization has the isWHO flag\n          orgsData = orgsData.map(org => \n            org.login === 'WorldHealthOrganization' \n              ? { ...org, isWHO: true }\n              : org\n          );\n        }\n      }\n      \n      setOrganizations(orgsData);\n      \n      // Load cached DAK counts (if available)\n      loadCachedDakCounts(userData, orgsData);\n      \n    } catch (error) {\n      console.error('Error fetching user data:', error);\n      setError('Failed to fetch user data. Please check your connection and try again.');\n      setIsAuthenticated(false);\n      githubService.logout(); // Use secure logout method\n    } finally {\n      setLoading(false);\n    }\n  }, [loadCachedDakCounts]); // Remove dependencies to prevent circular re-renders\n\n  // Initial authentication check - runs once on mount\n  useEffect(() => {\n    const initializeAuth = () => {\n      // Try to initialize from securely stored token\n      const success = githubService.initializeFromStoredToken();\n      if (success) {\n        setIsAuthenticated(true);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // Register SAML modal callback - runs once on mount\n  useEffect(() => {\n    samlAuthService.registerModalCallback((samlInfo) => {\n      setSamlModalInfo(samlInfo);\n      setSamlModalOpen(true);\n    });\n  }, []);\n\n  // Handle warning message from navigation state\n  useEffect(() => {\n    if (location.state?.warningMessage) {\n      setWarningMessage(location.state.warningMessage);\n      // Clear the warning message from navigation state to prevent it from persisting\n      navigate(location.pathname, { replace: true, state: {} });\n    }\n  }, [location.state, navigate, location.pathname]);\n\n  // Fetch user data when authentication state changes\n  useEffect(() => {\n    if (isAuthenticated && !user) {\n      fetchUserData();\n    }\n  }, [isAuthenticated, user, fetchUserData]);\n\n  const handleAuthSuccess = (token, octokitInstance) => {\n    // Use the provided Octokit instance directly\n    githubService.authenticateWithOctokit(octokitInstance);\n    \n    // Also authenticate with token to ensure secure storage\n    githubService.authenticate(token);\n    \n    setIsAuthenticated(true);\n    setError(null);\n    fetchUserData();\n  };\n\n  const handleProfileSelect = (event, profile) => {\n    const navigationState = { profile };\n    handleNavigationClick(event, `/dak-action/${profile.login}`, navigate, navigationState);\n  };\n\n  const handleDemoMode = (event) => {\n    // Create a mock profile for demonstration purposes\n    const demoProfile = {\n      login: 'demo-user',\n      name: 'Demo User',\n      avatar_url: 'https://github.com/github.png',\n      type: 'User',\n      isDemo: true\n    };\n    \n    // Navigate directly to DAK selection with edit action to show enhanced scanning\n    const navigationState = {\n      profile: demoProfile,\n      action: 'edit'\n    };\n    \n    handleNavigationClick(event, `/dak-selection/${demoProfile.login}`, navigate, navigationState);\n  };\n\n  const handleDismissWarning = () => {\n    setWarningMessage(null);\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <PageLayout pageName=\"landing-unauthenticated\">\n        <div className=\"landing-content\">\n          {warningMessage && (\n            <div className=\"warning-message\">\n              <div className=\"warning-content\">\n                <span className=\"warning-icon\">⚠️</span>\n                <span className=\"warning-text\">{warningMessage}</span>\n                <button \n                  className=\"warning-dismiss\" \n                  onClick={handleDismissWarning}\n                  aria-label=\"Dismiss warning\"\n                >\n                  ×\n                </button>\n              </div>\n            </div>\n          )}\n          <div className=\"welcome-section\">\n            <h2>{t('landing.welcome')}</h2>\n            <p>\n              {t('app.description')}\n            </p>\n            \n            <div className=\"auth-section\">\n              <p>{t('auth.signInWithPAT')}:</p>\n              <PATLogin \n                onAuthSuccess={handleAuthSuccess}\n              />\n              \n              {error && (\n                <div className=\"error-message\">\n                  {error}\n                </div>\n              )}\n            </div>\n            \n            <div className=\"demo-section\">\n              <p>Want to try without authentication?</p>\n              <button \n                onClick={handleDemoMode}\n                className=\"demo-mode-btn\"\n              >\n                🎭 Try Demo Mode\n              </button>\n              <p className=\"demo-note\">\n                Demo mode showcases the enhanced DAK scanning display with mock data.\n              </p>\n            </div>\n            \n            <div className=\"info-section\">\n              <p>\n                Need help getting started? Use the help mascot (bottom-right corner) to access comprehensive documentation and learn more about SGEX Workbench and DAK components.\n              </p>\n            </div>\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  return (\n    <PageLayout pageName=\"landing-authenticated\">\n      <div className=\"landing-content\">\n        {warningMessage && (\n          <div className=\"warning-message\">\n            <div className=\"warning-content\">\n              <span className=\"warning-icon\">⚠️</span>\n              <span className=\"warning-text\">{warningMessage}</span>\n              <button \n                className=\"warning-dismiss\" \n                onClick={handleDismissWarning}\n                aria-label=\"Dismiss warning\"\n              >\n                ×\n              </button>\n            </div>\n          </div>\n        )}\n        {loading ? (\n          <div className=\"loading-section\">\n            <div className=\"spinner\"></div>\n            <p>Loading profile data...</p>\n          </div>\n        ) : (\n          <div className=\"profile-selection\">\n            <h2>{t('organization.select')}</h2>\n            <p>{t('organization.personal')}:</p>\n            \n            {error && <div className=\"error-message\">{error}</div>}\n            \n            <div className=\"profile-grid\">\n              {/* Personal Profile */}\n              <div \n                className=\"profile-card\"\n                onClick={(event) => handleProfileSelect(event, { type: 'user', ...user })}\n              >\n                <div className=\"profile-card-header\">\n                  <img src={user?.avatar_url} alt=\"Personal profile\" />\n                  {dakCounts[`user-${user?.login}`] > 0 && (\n                    <div className=\"dak-count-badge\">\n                      {dakCounts[`user-${user?.login}`]}\n                    </div>\n                  )}\n                </div>\n                <h3>{user?.name || user?.login}</h3>\n                <p>Personal repositories</p>\n                <div className=\"profile-badges\">\n                  <span className=\"profile-type\">Personal</span>\n                </div>\n              </div>\n              \n              {/* Organization Profiles */}\n              {organizations.map((org) => (\n                <div \n                  key={org.login}\n                  className={`profile-card ${org.isWHO ? 'who-org' : ''}`}\n                  onClick={(event) => handleProfileSelect(event, { type: 'org', ...org })}\n                >\n                  <div className=\"profile-card-header\">\n                    <img \n                      src={org.avatar_url || `https://github.com/${org.login}.png`} \n                      alt={`${org.name || org.login} organization`} \n                    />\n                    {dakCounts[`org-${org.login}`] > 0 && (\n                      <div className=\"dak-count-badge\">\n                        {dakCounts[`org-${org.login}`]}\n                      </div>\n                    )}\n                  </div>\n                  <h3>{org.name || org.login}</h3>\n                  <p>@{org.login}</p>\n                  <div className=\"profile-badges\">\n                    <span className=\"profile-type\">{t('organization.organizations')}</span>\n                    {org.isWHO && <span className=\"who-badge\">WHO Official</span>}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* SAML Authorization Modal */}\n      <SAMLAuthModal\n        isOpen={samlModalOpen}\n        onClose={() => {\n          setSamlModalOpen(false);\n          setSamlModalInfo(null);\n        }}\n        samlInfo={samlModalInfo}\n      />\n    </PageLayout>\n  );\n};\n\nexport default LandingPage;","import React, { useEffect } from 'react';\nimport logger from '../utils/logger';\nimport './SAMLAuthModal.css';\n\n/**\n * SAMLAuthModal Component\n * \n * Modal dialog that guides users through GitHub SAML SSO authorization process.\n * Displayed when a Personal Access Token needs SAML SSO authorization for an organization.\n */\nconst SAMLAuthModal = ({ isOpen, onClose, samlInfo }) => {\n  const componentLogger = logger.getLogger('SAMLAuthModal');\n\n  useEffect(() => {\n    if (isOpen && samlInfo) {\n      componentLogger.componentMount({ \n        organization: samlInfo.organization,\n        repository: samlInfo.repository \n      });\n    }\n    return () => {\n      if (isOpen) {\n        componentLogger.componentUnmount();\n      }\n    };\n  }, [componentLogger, isOpen, samlInfo]);\n\n  if (!isOpen || !samlInfo) {\n    return null;\n  }\n\n  const { organization, repository, authorizationUrl } = samlInfo;\n\n  const handleAuthorize = () => {\n    componentLogger.userAction('Authorize SAML clicked', { \n      organization,\n      authorizationUrl \n    });\n    \n    // Open GitHub SAML authorization page in new tab\n    window.open(authorizationUrl, '_blank', 'noopener,noreferrer');\n    \n    // Log instruction for user\n    componentLogger.info('SAML authorization page opened', {\n      organization,\n      instruction: 'User should authorize their PAT on GitHub and then refresh'\n    });\n  };\n\n  const handleClose = () => {\n    componentLogger.userAction('SAML modal closed', { organization });\n    onClose();\n  };\n\n  return (\n    <div \n      className=\"saml-modal-overlay\" \n      onClick={handleClose}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"saml-modal-title\"\n    >\n      <div \n        className=\"saml-modal\" \n        onClick={(e) => e.stopPropagation()}\n        role=\"document\"\n      >\n        <div className=\"saml-modal-header\">\n          <h2 id=\"saml-modal-title\">🔐 SAML SSO Authorization Required</h2>\n          <button \n            onClick={handleClose}\n            className=\"close-button\"\n            aria-label=\"Close\"\n          >\n            ×\n          </button>\n        </div>\n        \n        <div className=\"saml-modal-content\">\n          <div className=\"saml-info-section\">\n            <div className=\"saml-icon\">\n              <span role=\"img\" aria-label=\"lock\">🔒</span>\n            </div>\n            \n            <h3>Organization Access Required</h3>\n            <p className=\"saml-description\">\n              Your Personal Access Token needs SAML SSO authorization to access the{' '}\n              <strong>{organization}</strong> organization{repository ? ` and the ${repository} repository` : ''}.\n            </p>\n          </div>\n\n          <div className=\"saml-steps-section\">\n            <h4>How to authorize your token:</h4>\n            <ol className=\"saml-steps\">\n              <li>\n                <strong>Click \"Authorize on GitHub\"</strong> below to open the authorization page\n              </li>\n              <li>\n                <strong>Review the permissions</strong> requested by the organization\n              </li>\n              <li>\n                <strong>Click \"Authorize\"</strong> to grant your token access\n              </li>\n              <li>\n                <strong>Return to this page</strong> and refresh or try your action again\n              </li>\n            </ol>\n          </div>\n\n          <div className=\"saml-note\">\n            <span className=\"note-icon\">ℹ️</span>\n            <p>\n              This is a GitHub security feature for organizations using SAML SSO.\n              You only need to authorize once per organization per token.\n            </p>\n          </div>\n\n          <div className=\"saml-modal-actions\">\n            <button \n              onClick={handleAuthorize}\n              className=\"saml-authorize-btn\"\n            >\n              🔓 Authorize on GitHub\n            </button>\n            <button \n              onClick={handleClose}\n              className=\"saml-cancel-btn\"\n            >\n              Later\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SAMLAuthModal;\n","import React, { useState } from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport logger from \"../utils/logger\";\n\nconst PATLogin = ({ onAuthSuccess }) => {\n  const { t } = useTranslation();\n  const [token, setToken] = useState(\"\");\n  const [tokenName, setTokenName] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const componentLogger = logger.getLogger('PATLogin');\n\n  React.useEffect(() => {\n    componentLogger.componentMount({ hasOnAuthSuccess: !!onAuthSuccess });\n    return () => componentLogger.componentUnmount();\n  }, [componentLogger, onAuthSuccess]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    componentLogger.userAction('PAT login attempt', { tokenProvided: !!token.trim() });\n    \n    if (!token.trim()) {\n      const errorMsg = \"Please enter a GitHub Personal Access Token\";\n      setError(errorMsg);\n      componentLogger.warn('PAT login failed - no token provided');\n      return;\n    }\n\n    setLoading(true);\n    setError(\"\");\n    const startTime = Date.now();\n    componentLogger.auth('Starting PAT authentication');\n    \n    try {\n      // Test the token by creating an Octokit instance and making a test request\n      const { Octokit } = await import('@octokit/rest');\n      const octokit = new Octokit({ auth: token.trim() });\n      componentLogger.debug('Octokit instance created for PAT validation');\n      \n      // Test the token by fetching user info\n      componentLogger.apiCall('GET', '/user', null);\n      const userResponse = await octokit.rest.users.getAuthenticated();\n      const duration = Date.now() - startTime;\n      componentLogger.apiResponse('GET', '/user', userResponse.status, duration);\n      \n      componentLogger.auth('PAT authentication successful', { \n        username: userResponse.data.login,\n        duration \n      });\n      \n      // Call success callback with token and octokit instance\n      onAuthSuccess(token.trim(), octokit);\n    } catch (err) {\n      const duration = Date.now() - startTime;\n      componentLogger.apiError('GET', '/user', err);\n      componentLogger.auth('PAT authentication failed', { \n        status: err.status, \n        message: err.message,\n        duration \n      });\n      console.error('PAT authentication failed:', err);\n      \n      if (err.status === 401) {\n        setError(\"Invalid Personal Access Token. Please check your token and try again.\");\n      } else if (err.status === 403) {\n        setError(\"Token doesn't have sufficient permissions. Please ensure your token has 'repo' and 'read:org' scopes.\");\n      } else {\n        setError(\"Authentication failed. Please check your connection and try again.\");\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTokenChange = (e) => {\n    setToken(e.target.value);\n    if (error) setError(\"\"); // Clear error when user starts typing\n  };\n\n  const handleTokenNameChange = (e) => {\n    setTokenName(e.target.value);\n    if (error) setError(\"\"); // Clear error when user starts typing\n  };\n\n  return (\n    <div className=\"pat-login\">\n      <div className=\"pat-login-section\">\n        <form onSubmit={handleSubmit} className=\"pat-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"token-name\">Token Name (optional):</label>\n            <input\n              id=\"token-name\"\n              type=\"text\"\n              value={tokenName}\n              onChange={handleTokenNameChange}\n              placeholder=\"e.g., SGEX Access Token\"\n              className=\"token-name-input\"\n              disabled={loading}\n              autoComplete=\"username\"\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"pat-token\">{t('auth.setupToken')}:</label>\n            <input\n              id=\"pat-token\"\n              type=\"password\"\n              value={token}\n              onChange={handleTokenChange}\n              placeholder=\"ghp_xxxxxxxxxxxxxxxxxxxx\"\n              className={`token-input ${error ? 'error' : ''}`}\n              disabled={loading}\n              autoComplete=\"current-password\"\n            />\n          </div>\n          \n          <button \n            type=\"submit\" \n            className=\"github-login-btn\" \n            disabled={loading || !token.trim()}\n          >\n            {loading ? (\n              <>\n                <span className=\"spinner small\"></span>\n                {t('common.loading')}...\n              </>\n            ) : (\n              <>\n                <span className=\"github-icon\">🔑</span>\n                {t('auth.signInWithPAT')}\n              </>\n            )}\n          </button>\n        </form>\n        \n        {error && <div className=\"error-message\">{error}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default PATLogin;"],"names":["LandingPage","t","useTranslation","user","setUser","useState","organizations","setOrganizations","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","dakCounts","setDakCounts","warningMessage","setWarningMessage","samlModalOpen","setSamlModalOpen","samlModalInfo","setSamlModalInfo","navigate","useNavigate","location","useLocation","loadCachedDakCounts","useCallback","userData","orgsData","githubService","isAuth","counts","userCache","repositoryCacheService","getCachedRepositories","login","repositories","concat","length","forEach","org","orgCache","fetchUserData","async","checkTokenPermissions","getCurrentUser","getUserOrganizations","console","whoOrganization","getWHOOrganization","whoIndex","findIndex","_objectSpread","isWHO","unshift","whoError","warn","id","name","description","avatar_url","html_url","type","some","map","logout","useEffect","initializeFromStoredToken","samlAuthService","registerModalCallback","samlInfo","_location$state","state","pathname","replace","handleAuthSuccess","token","octokitInstance","authenticateWithOctokit","authenticate","handleProfileSelect","event","profile","navigationState","handleNavigationClick","handleDemoMode","demoProfile","isDemo","action","handleDismissWarning","_jsxs","PageLayout","pageName","children","className","_jsx","onClick","src","alt","SAMLAuthModal","isOpen","onClose","PATLogin","onAuthSuccess","_ref","componentLogger","logger","getLogger","componentMount","organization","repository","componentUnmount","authorizationUrl","handleClose","userAction","role","e","stopPropagation","handleAuthorize","window","open","info","instruction","setToken","tokenName","setTokenName","React","hasOnAuthSuccess","onSubmit","preventDefault","tokenProvided","trim","startTime","Date","now","auth","Octokit","octokit","debug","apiCall","userResponse","rest","users","getAuthenticated","duration","apiResponse","status","username","data","err","apiError","message","htmlFor","value","onChange","target","placeholder","disabled","autoComplete","_Fragment"],"sourceRoot":""}