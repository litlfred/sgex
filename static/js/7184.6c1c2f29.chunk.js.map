{"version":3,"file":"static/js/7184.6c1c2f29.chunk.js","mappings":"+LAaO,MA+BMA,EAAuBC,GA/BUC,MAE5C,GAAsB,qBAAXC,QAA0BA,OAAOC,mBAAoB,CAC9D,MAAMC,EAASF,OAAOC,qBACtB,GAAIC,EACF,OAAOA,EAAOC,sBAElB,CAKA,OADAC,QAAQC,KAAK,0DACN,CACL,YACA,iBACA,8BACA,uBACA,eACA,6BACA,cACA,cACA,cACA,2BAUsBN,GACDO,SAASR,G,eCxClC,MAqEA,EArEiBS,KACf,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAyDjB,OAvDAC,EAAAA,EAAAA,WAAU,KA6BR,IA5BuBC,MACrB,MAAMC,ED0CgBC,KAC1B,MAAMC,EAAeD,EAASE,MAAM,KAAKC,OAAOC,SAGhD,GAAIH,EAAaI,QAAU,EAAG,CAC5B,MAAOtB,EAAWuB,EAAMC,EAAMC,KAAWC,GAAaR,EAEtD,GAAInB,EAAoBC,IAAcuB,GAAQC,EAC5C,MAAO,CACLxB,YACAuB,OACAC,OACAC,SACAC,YACAC,SAAS,EAGf,CAEA,OAAO,MC7DgBC,CAAYhB,EAASK,UAExC,GAAID,GAAcA,EAAWW,QAAS,CACpC,MAAM,UAAE3B,EAAS,KAAEuB,EAAI,KAAEC,EAAI,OAAEC,EAAM,UAAEC,GAAcV,EAErDV,QAAQuB,IAAI,mDAAoD,CAC9D7B,YAAWuB,OAAMC,OAAMC,SAAQC,cAIjC,IAAII,EAAU,IAAAC,OAAO/B,EAAS,KAAA+B,OAAIR,EAAI,KAAAQ,OAAIP,GAU1C,OATIC,IACFK,GAAU,IAAAC,OAAQN,GACdC,EAAUJ,OAAS,IACrBQ,GAAU,IAAAC,OAAQL,EAAUM,KAAK,QAIrC1B,QAAQuB,IAAI,6CAA8CC,GAC1DpB,EAASoB,EAAY,CAAEG,SAAS,KACzB,CACT,CAEA,OAAO,GAIJlB,GAAkB,CAErB,GAA0B,gBAAtBH,EAASK,SAGX,OAFAX,QAAQuB,IAAI,4EACZnB,EAAS,IAAK,CAAEuB,SAAS,IAK3B,MAAMC,EAAkBC,EAAAA,EAAcC,SAGhCC,EAAgC,aAAAN,OACrBnB,EAASK,SADHiB,EACW,kEACA,6EAElC5B,QAAQuB,IAAI,0EAEZnB,EAAS,IAAK,CACZuB,SAAS,EACTK,MAAO,CAAED,mBAEb,GACC,CAAC3B,EAAUE,EAASK,YAIrBsB,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,SAAS,YAAWC,UAC9BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBF,SAAA,EAC7BH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,oBACJH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,qC","sources":["utils/routeUtils.js","components/NotFound.js"],"sourcesContent":["/**\n * Utility functions for extracting route information from React Router routes\n * This is now a compatibility layer for the new lazy loading system\n */\nimport React from 'react';\n\n/**\n * Extract valid DAK component names from the shared route configuration\n * This function reads from the global SGEX route configuration that is shared\n * between App.js and 404.html to ensure consistency.\n * \n * @returns {Array} Array of valid DAK component names\n */\nexport const extractDAKComponentsFromRoutes = () => {\n  // In browser environment, try to get from global config first\n  if (typeof window !== 'undefined' && window.getSGEXRouteConfig) {\n    const config = window.getSGEXRouteConfig();\n    if (config) {\n      return config.getDAKComponentNames();\n    }\n  }\n  \n  // Fallback for server-side rendering or if config not loaded\n  // This should match the configuration in public/routes-config.json\n  console.warn('SGEX route configuration not available, using fallback');\n  return [\n    'dashboard',                    \n    'testing-viewer',              \n    'core-data-dictionary-viewer', \n    'health-interventions',        \n    'actor-editor',               \n    'business-process-selection',  \n    'bpmn-editor',                \n    'bpmn-viewer',                \n    'bpmn-source',                \n    'decision-support-logic'       \n  ];\n};\n\n/**\n * Check if a given component name is a valid DAK component\n * @param {string} component - Component name to validate\n * @returns {boolean} True if component is valid DAK component\n */\nexport const isValidDAKComponent = (component) => {\n  const validComponents = extractDAKComponentsFromRoutes();\n  return validComponents.includes(component);\n};\n\n/**\n * Parse a URL path to extract DAK component information\n * @param {string} pathname - URL pathname to parse\n * @returns {Object|null} Parsed DAK URL info or null if not a valid DAK URL\n */\nexport const parseDAKUrl = (pathname) => {\n  const pathSegments = pathname.split('/').filter(Boolean);\n  \n  // Valid DAK component routes have at least 3 segments: [component, user, repo]\n  if (pathSegments.length >= 3) {\n    const [component, user, repo, branch, ...assetPath] = pathSegments;\n    \n    if (isValidDAKComponent(component) && user && repo) {\n      return {\n        component,\n        user,\n        repo,\n        branch,\n        assetPath,\n        isValid: true\n      };\n    }\n  }\n  \n  return null;\n};\n\n/**\n * Generate React Router Route objects for all DAK components\n * This is now a legacy function kept for compatibility.\n * The new lazy loading system uses generateLazyRoutes() from lazyRouteUtils.js\n * \n * @param {Object} importedComponents - Object containing all imported React components\n * @returns {Array} Array of route objects for React Router\n */\nexport const generateDAKRoutes = (importedComponents) => {\n  console.warn('generateDAKRoutes() is deprecated. Use generateLazyRoutes() from lazyRouteUtils.js instead.');\n  \n  const routes = [];\n  \n  // Get configuration \n  const config = (typeof window !== 'undefined' && window.getSGEXRouteConfig) \n    ? window.getSGEXRouteConfig() \n    : null;\n  \n  if (!config) {\n    console.warn('SGEX route configuration not available for dynamic route generation');\n    return routes;\n  }\n  \n  // Generate routes for each DAK component using old system\n  const componentNames = config.getDAKComponentNames();\n  \n  componentNames.forEach(componentName => {\n    const dakComponent = config.dakComponents[componentName];\n    const reactComponentName = dakComponent.component || dakComponent;\n    \n    // Smart component lookup - find the imported component by name\n    const ReactComponentClass = importedComponents[reactComponentName];\n    \n    if (!ReactComponentClass) {\n      console.warn(`React component ${reactComponentName} not found in imported components for DAK component ${componentName}`);\n      console.warn('Available components:', Object.keys(importedComponents));\n      return;\n    }\n    \n    // Create React element from the component class\n    const ReactElement = React.createElement(ReactComponentClass);\n    \n    // Generate the standard DAK route patterns\n    routes.push(\n      {\n        path: `/${componentName}`,\n        element: ReactElement,\n        key: `${componentName}-base`\n      },\n      {\n        path: `/${componentName}/:user/:repo`,\n        element: ReactElement,\n        key: `${componentName}-user-repo`\n      },\n      {\n        path: `/${componentName}/:user/:repo/:branch`,\n        element: ReactElement,\n        key: `${componentName}-user-repo-branch`\n      },\n      {\n        path: `/${componentName}/:user/:repo/:branch/*`,\n        element: ReactElement,\n        key: `${componentName}-user-repo-branch-asset`\n      }\n    );\n  });\n  \n  return routes;\n};","import { useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { PageLayout } from './framework';\nimport githubService from '../services/githubService';\nimport { parseDAKUrl } from '../utils/routeUtils';\n\nconst NotFound = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    const tryParseDAKUrl = () => {\n      const dakUrlInfo = parseDAKUrl(location.pathname);\n      \n      if (dakUrlInfo && dakUrlInfo.isValid) {\n        const { component, user, repo, branch, assetPath } = dakUrlInfo;\n        \n        console.log('NotFound: Attempting to parse potential DAK URL:', {\n          component, user, repo, branch, assetPath\n        });\n        \n        // Try to navigate to the parsed route\n        let targetPath = `/${component}/${user}/${repo}`;\n        if (branch) {\n          targetPath += `/${branch}`;\n          if (assetPath.length > 0) {\n            targetPath += `/${assetPath.join('/')}`;\n          }\n        }\n        \n        console.log('NotFound: Redirecting to parsed DAK route:', targetPath);\n        navigate(targetPath, { replace: true });\n        return true; // Successfully parsed and redirected\n      }\n      \n      return false; // Could not parse as DAK URL\n    };\n\n    // First try to parse as a DAK URL\n    if (!tryParseDAKUrl()) {\n      // Special case: index.html should silently redirect to welcome page\n      if (location.pathname === '/index.html') {\n        console.log('NotFound: index.html accessed, silently redirecting to welcome page');\n        navigate('/', { replace: true });\n        return;\n      }\n      \n      // Fall back to original behavior if URL doesn't match DAK patterns\n      const isAuthenticated = githubService.isAuth();\n      \n      // Create appropriate warning message\n      const warningMessage = isAuthenticated\n        ? `The page \"${location.pathname}\" could not be found. You've been redirected to the home page.`\n        : `The page \"${location.pathname}\" could not be found. Please sign in or try the demo mode to get started.`;\n\n      console.log('NotFound: Could not parse as DAK URL, redirecting to home with warning');\n      // Redirect to landing page with warning message\n      navigate('/', {\n        replace: true,\n        state: { warningMessage }\n      });\n    }\n  }, [navigate, location.pathname]);\n\n  // Show temporary message while redirecting\n  return (\n    <PageLayout pageName=\"not-found\">\n      <div className=\"not-found-page\">\n        <h1>Page Not Found</h1>\n        <p>Redirecting to home page...</p>\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default NotFound;"],"names":["isValidDAKComponent","component","extractDAKComponentsFromRoutes","window","getSGEXRouteConfig","config","getDAKComponentNames","console","warn","includes","NotFound","navigate","useNavigate","location","useLocation","useEffect","tryParseDAKUrl","dakUrlInfo","pathname","pathSegments","split","filter","Boolean","length","user","repo","branch","assetPath","isValid","parseDAKUrl","log","targetPath","concat","join","replace","isAuthenticated","githubService","isAuth","warningMessage","state","_jsx","PageLayout","pageName","children","_jsxs","className"],"sourceRoot":""}