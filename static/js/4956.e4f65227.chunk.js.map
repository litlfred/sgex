{"version":3,"file":"static/js/4956.e4f65227.chunk.js","mappings":"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","sources":["services/documentationService.js","components/DocumentationViewer.js"],"sourcesContent":["/**\n * Documentation Service - Manages documentation file discovery and organization\n * \n * Provides functionality to:\n * - Dynamically scan public/docs directory structure\n * - Organize documentation by categories and subdirectories  \n * - Support breadcrumb navigation for subdirectories\n * - Manage JSON schema access\n * - Integrate with i18n for documentation titles and descriptions\n */\nclass DocumentationService {\n  constructor() {\n    this.baseUrl = `${process.env.PUBLIC_URL}/docs`;\n    this.cache = new Map();\n    this.cacheTimeout = 5 * 60 * 1000; // 5 minutes\n  }\n\n  /**\n   * Get all available documentation files and organize by category\n   * @returns {Promise<Object>} Organized documentation structure\n   */\n  async getDocumentationStructure() {\n    const cacheKey = 'doc-structure';\n    const cached = this.cache.get(cacheKey);\n    \n    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {\n      return cached.data;\n    }\n\n    try {\n      const structure = await this.scanDocumentationFiles();\n      this.cache.set(cacheKey, {\n        data: structure,\n        timestamp: Date.now()\n      });\n      return structure;\n    } catch (error) {\n      console.error('Error loading documentation structure:', error);\n      return this.getFallbackStructure();\n    }\n  }\n\n  /**\n   * Scan the docs directory for files and subdirectories\n   */\n  async scanDocumentationFiles() {\n    const structure = {\n      categories: {},\n      schemas: {\n        title: 'JSON Schemas',\n        description: 'Generated JSON schemas for SGEX types and interfaces',\n        files: []\n      },\n      breadcrumbs: new Map()\n    };\n\n    // Core documentation files (root level)\n    const coreFiles = [\n      { file: 'README.md', title: 'Documentation Overview', category: 'overview' },\n      { file: 'requirements.md', title: 'Requirements', category: 'architecture' },\n      { file: 'solution-architecture.md', title: 'Solution Architecture', category: 'architecture' },\n      { file: 'dak-components.md', title: 'DAK Components', category: 'architecture' },\n      { file: 'page-framework.md', title: 'Page Framework', category: 'development' },\n      { file: 'framework-developer-guide.md', title: 'Framework Developer Guide', category: 'development' },\n      { file: 'page-inventory.md', title: 'Page Inventory', category: 'development' },\n      { file: 'UI_STYLING_REQUIREMENTS.md', title: 'UI Styling Requirements', category: 'development' },\n      { file: 'bpmn-integration.md', title: 'BPMN Integration', category: 'features' },\n      { file: 'decision-table-editor.md', title: 'Decision Table Editor', category: 'features' },\n      { file: 'bookmark-system.md', title: 'Bookmark System', category: 'features' },\n      { file: 'tutorial-framework.md', title: 'Tutorial Framework', category: 'features' },\n      { file: 'qa-testing.md', title: 'QA Testing', category: 'testing' },\n      { file: 'compliance-framework.md', title: 'Compliance Framework', category: 'testing' },\n      { file: 'runtime-validation.md', title: 'Runtime Validation', category: 'testing' },\n      { file: 'project-plan.md', title: 'Project Plan', category: 'planning' },\n      { file: 'WHO_CORS_WORKAROUND.md', title: 'WHO CORS Workaround', category: 'technical' },\n      { file: 'security-headers.md', title: 'Security Headers', category: 'technical' },\n      { file: 'build-process-integration.md', title: 'Build Process Integration', category: 'technical' }\n    ];\n\n    // Add core files to categories\n    coreFiles.forEach(doc => {\n      if (!structure.categories[doc.category]) {\n        structure.categories[doc.category] = {\n          title: this.getCategoryTitle(doc.category),\n          files: []\n        };\n      }\n      structure.categories[doc.category].files.push({\n        id: this.getDocumentId(doc.file),\n        file: doc.file,\n        title: doc.title,\n        path: '',\n        url: `${this.baseUrl}/${doc.file}`\n      });\n    });\n\n    // Add workflows subdirectory\n    structure.categories['workflows'] = {\n      title: 'Workflows & Processes',\n      files: [\n        {\n          id: 'workflows-overview',\n          file: 'workflows/README.md',\n          title: 'Workflows Overview',\n          path: 'workflows',\n          url: `${this.baseUrl}/workflows/README.md`\n        }\n      ]\n    };\n\n    // Set up breadcrumbs for subdirectories\n    structure.breadcrumbs.set('workflows-overview', [\n      { label: 'Documentation', path: '/docs/overview' },\n      { label: 'Workflows', path: '/docs/workflows-overview', current: true }\n    ]);\n\n    // Add JSON schemas\n    const schemaFiles = [\n      {\n        id: 'schemas-tjs',\n        file: 'schemas/generated-schemas-tjs.json',\n        title: 'TypeScript JSON Schema Generated Schemas',\n        description: 'Schemas generated using typescript-json-schema tool',\n        url: `${this.baseUrl}/schemas/generated-schemas-tjs.json`\n      },\n      {\n        id: 'schemas-tsjsg',\n        file: 'schemas/generated-schemas-tsjsg.json', \n        title: 'TS JSON Schema Generator Schemas',\n        description: 'Schemas generated using ts-json-schema-generator tool',\n        url: `${this.baseUrl}/schemas/generated-schemas-tsjsg.json`\n      }\n    ];\n\n    structure.schemas.files = schemaFiles;\n\n    return structure;\n  }\n\n  /**\n   * Get a fallback structure when scanning fails\n   */\n  getFallbackStructure() {\n    return {\n      categories: {\n        overview: {\n          title: 'Overview',\n          files: [{\n            id: 'overview',\n            file: 'README.md',\n            title: 'Documentation Overview',\n            path: '',\n            url: `${this.baseUrl}/README.md`\n          }]\n        }\n      },\n      schemas: {\n        title: 'JSON Schemas',\n        description: 'Generated JSON schemas for SGEX types and interfaces',\n        files: []\n      },\n      breadcrumbs: new Map()\n    };\n  }\n\n  /**\n   * Get category title for i18n\n   */\n  getCategoryTitle(category) {\n    const titles = {\n      overview: 'Overview',\n      architecture: 'Architecture & Design',\n      development: 'Development Guidelines',\n      features: 'Features & Components',\n      testing: 'Testing & Validation',\n      planning: 'Planning & Management',\n      technical: 'Technical Guides',\n      workflows: 'Workflows & Processes'\n    };\n    return titles[category] || category.charAt(0).toUpperCase() + category.slice(1);\n  }\n\n  /**\n   * Generate document ID from file path\n   */\n  getDocumentId(filePath) {\n    let id = filePath\n      .replace(/\\.md$/, '')\n      .replace(/\\//g, '-')\n      .toLowerCase()\n      .replace(/[^a-z0-9-]/g, '-')\n      .replace(/-+/g, '-')\n      .replace(/^-|-$/g, '');\n    \n    // Convert README to overview\n    if (id === 'readme' || id === '') {\n      id = 'overview';\n    }\n    \n    return id;\n  }\n\n  /**\n   * Get specific document content\n   * @param {string} docId - Document identifier\n   * @returns {Promise<Object>} Document content and metadata\n   */\n  async getDocument(docId) {\n    const structure = await this.getDocumentationStructure();\n    \n    // Search through all categories\n    for (const category of Object.values(structure.categories)) {\n      const doc = category.files.find(f => f.id === docId);\n      if (doc) {\n        const content = await this.fetchDocumentContent(doc.url);\n        return {\n          ...doc,\n          content,\n          breadcrumbs: structure.breadcrumbs.get(docId) || this.generateBreadcrumbs(doc)\n        };\n      }\n    }\n\n    // Check schemas\n    const schema = structure.schemas.files.find(f => f.id === docId);\n    if (schema) {\n      const content = await this.fetchSchemaContent(schema.url);\n      return {\n        ...schema,\n        content,\n        isSchema: true,\n        breadcrumbs: [\n          { label: 'Documentation', path: '/docs/overview' },\n          { label: 'JSON Schemas', path: '/docs/schemas-overview' },\n          { label: schema.title, current: true }\n        ]\n      };\n    }\n\n    throw new Error(`Document not found: ${docId}`);\n  }\n\n  /**\n   * Fetch document content from URL\n   */\n  async fetchDocumentContent(url) {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Failed to load document: ${response.status}`);\n    }\n    return await response.text();\n  }\n\n  /**\n   * Fetch and format schema content\n   */\n  async fetchSchemaContent(url) {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Failed to load schema: ${response.status}`);\n    }\n    const json = await response.json();\n    return JSON.stringify(json, null, 2);\n  }\n\n  /**\n   * Generate breadcrumbs for a document\n   */\n  generateBreadcrumbs(doc) {\n    const breadcrumbs = [{ label: 'Documentation', path: '/docs/overview' }];\n    \n    if (doc.path) {\n      // Add path segments as breadcrumbs\n      const pathSegments = doc.path.split('/').filter(Boolean);\n      pathSegments.forEach((segment, index) => {\n        const path = pathSegments.slice(0, index + 1).join('-');\n        breadcrumbs.push({\n          label: segment.charAt(0).toUpperCase() + segment.slice(1),\n          path: `/docs/${path}`\n        });\n      });\n    }\n    \n    breadcrumbs.push({ label: doc.title, current: true });\n    return breadcrumbs;\n  }\n\n  /**\n   * Get navigation menu structure for sidebar\n   */\n  async getNavigationMenu() {\n    const structure = await this.getDocumentationStructure();\n    \n    const menu = [];\n    \n    // Add category sections\n    Object.entries(structure.categories).forEach(([key, category]) => {\n      menu.push({\n        type: 'category',\n        id: key,\n        title: category.title,\n        items: category.files.map(file => ({\n          type: 'document',\n          id: file.id,\n          title: file.title,\n          path: `/docs/${file.id}`,\n          hasSubpath: !!file.path\n        }))\n      });\n    });\n\n    // Add schemas section\n    if (structure.schemas.files.length > 0) {\n      menu.push({\n        type: 'category',\n        id: 'schemas',\n        title: structure.schemas.title,\n        description: structure.schemas.description,\n        items: structure.schemas.files.map(file => ({\n          type: 'schema',\n          id: file.id,\n          title: file.title,\n          path: `/docs/${file.id}`,\n          description: file.description\n        }))\n      });\n    }\n\n    return menu;\n  }\n\n  /**\n   * Clear cache\n   */\n  clearCache() {\n    this.cache.clear();\n  }\n}\n\n// Export singleton instance\nconst documentationService = new DocumentationService();\nexport default documentationService;","import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { PageLayout } from './framework';\nimport documentationService from '../services/documentationService';\nimport bookmarkService from '../services/bookmarkService';\n\nconst DocumentationViewer = () => {\n  const { docId } = useParams();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const [content, setContent] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [navigationMenu, setNavigationMenu] = useState([]);\n  const [currentDoc, setCurrentDoc] = useState(null);\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\n\n  useEffect(() => {\n    const loadNavigationMenu = async () => {\n      try {\n        const menu = await documentationService.getNavigationMenu();\n        setNavigationMenu(menu);\n      } catch (err) {\n        console.error('Error loading navigation menu:', err);\n      }\n    };\n    \n    loadNavigationMenu();\n  }, []);\n\n  useEffect(() => {\n    const loadDocumentation = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const currentDocId = docId || 'overview';\n        const document = await documentationService.getDocument(currentDocId);\n        \n        setCurrentDoc(document);\n        setContent(document.content);\n        setBreadcrumbs(document.breadcrumbs || []);\n        \n        // Update document title for better UX\n        document.title = `${document.title} - ${t('documentation.title', 'Documentation')}`;\n        \n      } catch (err) {\n        console.error('Error loading documentation:', err);\n        setError(t('documentation.errors.loadFailed', 'Failed to load documentation. Please try again later.'));\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadDocumentation();\n  }, [docId, t]);\n\n  const renderMarkdown = (markdown) => {\n    // Simple markdown to HTML conversion for basic formatting\n    let html = markdown;\n\n    // For JSON schemas, wrap in code block\n    if (currentDoc?.isSchema) {\n      return `<pre class=\"schema-content\"><code>${html}</code></pre>`;\n    }\n\n    // Process tables first (before paragraph processing)\n    html = html.replace(/(\\|[^\\n]+\\|\\n\\|[-\\s|:]+\\|\\n(?:\\|[^\\n]+\\|\\n?)*)/gm, (match) => {\n      const lines = match.trim().split('\\n');\n      const headers = lines[0].split('|').slice(1, -1).map(h => h.trim());\n      const rows = lines.slice(2).map(row => row.split('|').slice(1, -1).map(cell => cell.trim()));\n      \n      let tableHtml = '<table class=\"doc-table\">\\n<thead>\\n<tr>\\n';\n      headers.forEach(header => {\n        tableHtml += `<th>${header}</th>\\n`;\n      });\n      tableHtml += '</tr>\\n</thead>\\n<tbody>\\n';\n      \n      rows.forEach(row => {\n        tableHtml += '<tr>\\n';\n        row.forEach(cell => {\n          tableHtml += `<td>${cell}</td>\\n`;\n        });\n        tableHtml += '</tr>\\n';\n      });\n      \n      tableHtml += '</tbody>\\n</table>\\n';\n      return tableHtml;\n    });\n\n    // Apply other markdown formatting\n    return html\n      .replace(/^# (.*$)/gim, '<h1>$1</h1>')\n      .replace(/^## (.*$)/gim, '<h2>$1</h2>')\n      .replace(/^### (.*$)/gim, '<h3>$1</h3>')\n      .replace(/^#### (.*$)/gim, '<h4>$1</h4>')\n      .replace(/\\*\\*(.*)\\*\\*/gim, '<strong>$1</strong>')\n      .replace(/\\*(.*)\\*/gim, '<em>$1</em>')\n      .replace(/!\\[([^\\]]*)\\]\\(([^)]*)\\)/gim, '<img alt=\"$1\" src=\"$2\" />')\n      .replace(/\\[([^\\]]*)\\]\\(([^)]*)\\)/gim, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>')\n      .replace(/`([^`]*)`/gim, '<code>$1</code>')\n      .replace(/^- (.*$)/gim, '<li>$1</li>')\n      .replace(/^(\\d+)\\. (.*$)/gim, '<li>$2</li>')\n      .replace(/\\n\\n/gim, '</p><p>')\n      .replace(/^\\n/gim, '<p>')\n      .replace(/\\n$/gim, '</p>');\n  };\n\n  const handleBookmark = () => {\n    if (!currentDoc) return;\n    \n    const context = {\n      docId: currentDoc.id,\n      title: currentDoc.title,\n      path: currentDoc.path || ''\n    };\n    \n    try {\n      bookmarkService.addBookmark(\n        'documentation',\n        window.location.pathname,\n        context\n      );\n      // Could add a toast notification here\n    } catch (error) {\n      console.error('Error adding bookmark:', error);\n    }\n  };\n\n  const isBookmarked = currentDoc ? \n    bookmarkService.isBookmarked(window.location.pathname) : false;\n\n  if (loading) {\n    return (\n      <PageLayout pageName=\"documentation-viewer\">\n        <div className=\"documentation-viewer\">\n          <div className=\"doc-content\">\n            <div className=\"loading\">\n              <div className=\"spinner\"></div>\n              <p>{t('documentation.loading', 'Loading documentation...')}</p>\n            </div>\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  if (error) {\n    return (\n      <PageLayout pageName=\"documentation-viewer\">\n        <div className=\"documentation-viewer\">\n          <div className=\"doc-content\">\n            <div className=\"error-state\">\n              <h2>{t('common.error', 'Error')}</h2>\n              <p>{error}</p>\n              <button onClick={() => window.location.reload()} className=\"retry-btn\">\n                {t('common.tryAgain', 'Try Again')}\n              </button>\n            </div>\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  return (\n    <PageLayout pageName=\"documentation-viewer\">\n      <div className=\"documentation-viewer\">\n        <div className=\"doc-content\">\n          {/* Breadcrumbs */}\n          {breadcrumbs.length > 1 && (\n            <nav className=\"doc-breadcrumbs\" aria-label={t('navigation.breadcrumbs', 'Breadcrumb navigation')}>\n              <ol className=\"breadcrumb-list\">\n                {breadcrumbs.map((crumb, index) => (\n                  <li key={index} className=\"breadcrumb-item\">\n                    {!crumb.current ? (\n                      <>\n                        <button \n                          className=\"breadcrumb-link\" \n                          onClick={() => navigate(crumb.path)}\n                          type=\"button\"\n                        >\n                          {crumb.label}\n                        </button>\n                        <span className=\"breadcrumb-separator\" aria-hidden=\"true\">›</span>\n                      </>\n                    ) : (\n                      <span className=\"breadcrumb-current\" aria-current=\"page\">\n                        {crumb.label}\n                      </span>\n                    )}\n                  </li>\n                ))}\n              </ol>\n            </nav>\n          )}\n\n          <div className=\"doc-sidebar\">\n            <div className=\"doc-sidebar-header\">\n              <h3>{t('documentation.title', 'Documentation')}</h3>\n              {currentDoc && (\n                <button \n                  className={`bookmark-btn ${isBookmarked ? 'bookmarked' : ''}`}\n                  onClick={handleBookmark}\n                  title={isBookmarked ? \n                    t('bookmarks.removeBookmark', 'Remove bookmark') : \n                    t('bookmarks.addBookmark', 'Add bookmark')\n                  }\n                  type=\"button\"\n                >\n                  {isBookmarked ? '★' : '☆'}\n                </button>\n              )}\n            </div>\n            \n            <nav className=\"doc-menu\">\n              {navigationMenu.map((section) => (\n                <div key={section.id} className=\"doc-category\">\n                  <div className=\"doc-category-header\">\n                    {section.title}\n                    {section.description && (\n                      <div className=\"doc-category-description\">\n                        {section.description}\n                      </div>\n                    )}\n                  </div>\n                  \n                  {section.items.map((item) => (\n                    <button\n                      key={item.id}\n                      className={`doc-menu-item ${docId === item.id || (!docId && item.id === 'overview') ? 'active' : ''} ${item.hasSubpath ? 'has-subpath' : ''} ${item.type === 'schema' ? 'schema-item' : ''}`}\n                      onClick={() => navigate(item.path)}\n                      type=\"button\"\n                    >\n                      <span className=\"doc-menu-title\">{item.title}</span>\n                      {item.description && (\n                        <span className=\"doc-menu-description\">{item.description}</span>\n                      )}\n                    </button>\n                  ))}\n                </div>\n              ))}\n            </nav>\n          </div>\n\n          <div className=\"doc-main\">\n            <article \n              className={`doc-article ${currentDoc?.isSchema ? 'schema-article' : ''}`}\n              dangerouslySetInnerHTML={{ \n                __html: renderMarkdown(content)\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default DocumentationViewer;"],"names":["constructor","this","baseUrl","concat","process","cache","Map","cacheTimeout","getDocumentationStructure","cacheKey","cached","get","Date","now","timestamp","data","structure","scanDocumentationFiles","set","error","console","getFallbackStructure","categories","schemas","title","description","files","breadcrumbs","file","category","forEach","doc","getCategoryTitle","push","id","getDocumentId","path","url","label","current","schemaFiles","overview","architecture","development","features","testing","planning","technical","workflows","charAt","toUpperCase","slice","filePath","replace","toLowerCase","getDocument","docId","Object","values","find","f","content","fetchDocumentContent","_objectSpread","generateBreadcrumbs","schema","fetchSchemaContent","isSchema","Error","response","fetch","ok","status","text","json","JSON","stringify","pathSegments","split","filter","Boolean","segment","index","join","getNavigationMenu","menu","entries","_ref","key","type","items","map","hasSubpath","length","clearCache","clear","DocumentationViewer","useParams","navigate","useNavigate","t","useTranslation","setContent","useState","loading","setLoading","setError","navigationMenu","setNavigationMenu","currentDoc","setCurrentDoc","setBreadcrumbs","useEffect","async","documentationService","err","loadNavigationMenu","currentDocId","document","loadDocumentation","isBookmarked","bookmarkService","window","location","pathname","_jsx","PageLayout","pageName","children","className","_jsxs","onClick","reload","crumb","_Fragment","handleBookmark","context","addBookmark","section","item","dangerouslySetInnerHTML","__html","markdown","html","match","lines","trim","headers","h","rows","row","cell","tableHtml","header","renderMarkdown"],"sourceRoot":""}