{"version":3,"file":"static/js/997.29f72842.chunk.js","mappings":"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","sources":["components/LandingPage.js","components/PATLogin.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport githubService from '../services/githubService';\nimport repositoryCacheService from '../services/repositoryCacheService';\nimport secureTokenStorage from '../services/secureTokenStorage';\nimport PATLogin from './PATLogin';\nimport { PageLayout } from './framework';\nimport { handleNavigationClick } from '../utils/navigationUtils';\n\nconst LandingPage = () => {\n  const { t } = useTranslation();\n  const [user, setUser] = useState(null);\n  const [organizations, setOrganizations] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [dakCounts, setDakCounts] = useState({});\n  const [warningMessage, setWarningMessage] = useState(null);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Load cached DAK counts without initiating any scanning\n  const loadCachedDakCounts = useCallback((userData, orgsData) => {\n    if (!githubService.isAuth()) {\n      return;\n    }\n\n    const counts = {};\n    \n    // Check cache for user's personal repositories\n    if (userData) {\n      const userCache = repositoryCacheService.getCachedRepositories(userData.login, 'user');\n      if (userCache && userCache.repositories) {\n        counts[`user-${userData.login}`] = userCache.repositories.length;\n      }\n    }\n    \n    // Check cache for organization repositories\n    orgsData.forEach(org => {\n      const orgCache = repositoryCacheService.getCachedRepositories(org.login, 'org');\n      if (orgCache && orgCache.repositories) {\n        counts[`org-${org.login}`] = orgCache.repositories.length;\n      }\n    });\n    \n    setDakCounts(counts);\n  }, []);\n\n  const fetchUserData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Check token permissions first\n      await githubService.checkTokenPermissions();\n      \n      // Fetch user data using GitHub service\n      const userData = await githubService.getCurrentUser();\n      setUser(userData);\n      \n      // Fetch organizations inline\n      let orgsData = [];\n      \n      if (githubService.isAuth()) {\n        try {\n          orgsData = await githubService.getUserOrganizations();\n        } catch (error) {\n          console.error('Error fetching organizations:', error);\n          orgsData = [];\n        }\n      }\n      \n      // Always ensure WHO organization is included\n      try {\n        const whoOrganization = await githubService.getWHOOrganization();\n        \n        // Check if WHO organization is already in the list\n        const whoIndex = orgsData.findIndex(org => org.login === 'WorldHealthOrganization');\n        \n        if (whoIndex >= 0) {\n          // Replace existing WHO org with fresh data and ensure isWHO flag\n          orgsData[whoIndex] = { ...orgsData[whoIndex], ...whoOrganization, isWHO: true };\n        } else {\n          // Add WHO organization at the beginning of the list\n          orgsData.unshift(whoOrganization);\n        }\n      } catch (whoError) {\n        console.warn('Could not fetch WHO organization data, using fallback:', whoError);\n        \n        // Fallback to hardcoded WHO organization\n        const whoOrganization = {\n          id: 'who-organization',\n          login: 'WorldHealthOrganization',\n          name: 'World Health Organization',\n          description: 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n          avatar_url: 'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',\n          html_url: 'https://github.com/WorldHealthOrganization',\n          type: 'Organization',\n          isWHO: true\n        };\n        \n        // Check if WHO organization is already in the list\n        const hasWHO = orgsData.some(org => org.login === 'WorldHealthOrganization');\n        \n        if (!hasWHO) {\n          // Add WHO organization at the beginning of the list\n          orgsData.unshift(whoOrganization);\n        } else {\n          // Ensure existing WHO organization has the isWHO flag\n          orgsData = orgsData.map(org => \n            org.login === 'WorldHealthOrganization' \n              ? { ...org, isWHO: true }\n              : org\n          );\n        }\n      }\n      \n      setOrganizations(orgsData);\n      \n      // Load cached DAK counts (if available)\n      loadCachedDakCounts(userData, orgsData);\n      \n    } catch (error) {\n      console.error('Error fetching user data:', error);\n      setError('Failed to fetch user data. Please check your connection and try again.');\n      setIsAuthenticated(false);\n      githubService.logout(); // Use secure logout method\n    } finally {\n      setLoading(false);\n    }\n  }, [loadCachedDakCounts]); // Remove dependencies to prevent circular re-renders\n\n  // Initial authentication check - runs once on mount\n  useEffect(() => {\n    const initializeAuth = () => {\n      // Try to initialize from securely stored token\n      const success = githubService.initializeFromStoredToken();\n      if (success) {\n        setIsAuthenticated(true);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // Handle warning message from navigation state\n  useEffect(() => {\n    if (location.state?.warningMessage) {\n      setWarningMessage(location.state.warningMessage);\n      // Clear the warning message from navigation state to prevent it from persisting\n      navigate(location.pathname, { replace: true, state: {} });\n    }\n  }, [location.state, navigate, location.pathname]);\n\n  // Fetch user data when authentication state changes\n  useEffect(() => {\n    if (isAuthenticated && !user) {\n      fetchUserData();\n    }\n  }, [isAuthenticated, user, fetchUserData]);\n\n  const handleAuthSuccess = (token, octokitInstance) => {\n    // Use the provided Octokit instance directly\n    githubService.authenticateWithOctokit(octokitInstance);\n    \n    // Also authenticate with token to ensure secure storage\n    githubService.authenticate(token);\n    \n    setIsAuthenticated(true);\n    setError(null);\n    fetchUserData();\n  };\n\n  const handleProfileSelect = (event, profile) => {\n    const navigationState = { profile };\n    handleNavigationClick(event, `/dak-action/${profile.login}`, navigate, navigationState);\n  };\n\n  const handleDemoMode = (event) => {\n    // Create a mock profile for demonstration purposes\n    const demoProfile = {\n      login: 'demo-user',\n      name: 'Demo User',\n      avatar_url: 'https://github.com/github.png',\n      type: 'User',\n      isDemo: true\n    };\n    \n    // Navigate directly to DAK selection with edit action to show enhanced scanning\n    const navigationState = {\n      profile: demoProfile,\n      action: 'edit'\n    };\n    \n    handleNavigationClick(event, `/dak-selection/${demoProfile.login}`, navigate, navigationState);\n  };\n\n  const handleDismissWarning = () => {\n    setWarningMessage(null);\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <PageLayout pageName=\"landing-unauthenticated\">\n        <div className=\"landing-content\">\n          {warningMessage && (\n            <div className=\"warning-message\">\n              <div className=\"warning-content\">\n                <span className=\"warning-icon\">⚠️</span>\n                <span className=\"warning-text\">{warningMessage}</span>\n                <button \n                  className=\"warning-dismiss\" \n                  onClick={handleDismissWarning}\n                  aria-label=\"Dismiss warning\"\n                >\n                  ×\n                </button>\n              </div>\n            </div>\n          )}\n          <div className=\"welcome-section\">\n            <h2>{t('landing.welcome')}</h2>\n            <p>\n              {t('app.description')}\n            </p>\n            \n            <div className=\"auth-section\">\n              <p>{t('auth.signInWithPAT')}:</p>\n              <PATLogin \n                onAuthSuccess={handleAuthSuccess}\n              />\n              \n              {error && (\n                <div className=\"error-message\">\n                  {error}\n                </div>\n              )}\n            </div>\n            \n            <div className=\"demo-section\">\n              <p>Want to try without authentication?</p>\n              <button \n                onClick={handleDemoMode}\n                className=\"demo-mode-btn\"\n              >\n                🎭 Try Demo Mode\n              </button>\n              <p className=\"demo-note\">\n                Demo mode showcases the enhanced DAK scanning display with mock data.\n              </p>\n            </div>\n            \n            <div className=\"info-section\">\n              <p>\n                Need help getting started? Use the help mascot (bottom-right corner) to access comprehensive documentation and learn more about SGEX Workbench and DAK components.\n              </p>\n            </div>\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  return (\n    <PageLayout pageName=\"landing-authenticated\">\n      <div className=\"landing-content\">\n        {warningMessage && (\n          <div className=\"warning-message\">\n            <div className=\"warning-content\">\n              <span className=\"warning-icon\">⚠️</span>\n              <span className=\"warning-text\">{warningMessage}</span>\n              <button \n                className=\"warning-dismiss\" \n                onClick={handleDismissWarning}\n                aria-label=\"Dismiss warning\"\n              >\n                ×\n              </button>\n            </div>\n          </div>\n        )}\n        {loading ? (\n          <div className=\"loading-section\">\n            <div className=\"spinner\"></div>\n            <p>Loading profile data...</p>\n          </div>\n        ) : (\n          <div className=\"profile-selection\">\n            <h2>{t('organization.select')}</h2>\n            <p>{t('organization.personal')}:</p>\n            \n            {error && <div className=\"error-message\">{error}</div>}\n            \n            <div className=\"profile-grid\">\n              {/* Personal Profile */}\n              <div \n                className=\"profile-card\"\n                onClick={(event) => handleProfileSelect(event, { type: 'user', ...user })}\n              >\n                <div className=\"profile-card-header\">\n                  <img src={user?.avatar_url} alt=\"Personal profile\" />\n                  {dakCounts[`user-${user?.login}`] > 0 && (\n                    <div className=\"dak-count-badge\">\n                      {dakCounts[`user-${user?.login}`]}\n                    </div>\n                  )}\n                </div>\n                <h3>{user?.name || user?.login}</h3>\n                <p>Personal repositories</p>\n                <div className=\"profile-badges\">\n                  <span className=\"profile-type\">Personal</span>\n                </div>\n              </div>\n              \n              {/* Organization Profiles */}\n              {organizations.map((org) => (\n                <div \n                  key={org.login}\n                  className={`profile-card ${org.isWHO ? 'who-org' : ''}`}\n                  onClick={(event) => handleProfileSelect(event, { type: 'org', ...org })}\n                >\n                  <div className=\"profile-card-header\">\n                    <img \n                      src={org.avatar_url || `https://github.com/${org.login}.png`} \n                      alt={`${org.name || org.login} organization`} \n                    />\n                    {dakCounts[`org-${org.login}`] > 0 && (\n                      <div className=\"dak-count-badge\">\n                        {dakCounts[`org-${org.login}`]}\n                      </div>\n                    )}\n                  </div>\n                  <h3>{org.name || org.login}</h3>\n                  <p>@{org.login}</p>\n                  <div className=\"profile-badges\">\n                    <span className=\"profile-type\">{t('organization.organizations')}</span>\n                    {org.isWHO && <span className=\"who-badge\">WHO Official</span>}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default LandingPage;","import React, { useState } from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport logger from \"../utils/logger\";\n\nconst PATLogin = ({ onAuthSuccess }) => {\n  const { t } = useTranslation();\n  const [token, setToken] = useState(\"\");\n  const [tokenName, setTokenName] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const componentLogger = logger.getLogger('PATLogin');\n\n  React.useEffect(() => {\n    componentLogger.componentMount({ hasOnAuthSuccess: !!onAuthSuccess });\n    return () => componentLogger.componentUnmount();\n  }, [componentLogger, onAuthSuccess]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    componentLogger.userAction('PAT login attempt', { tokenProvided: !!token.trim() });\n    \n    if (!token.trim()) {\n      const errorMsg = \"Please enter a GitHub Personal Access Token\";\n      setError(errorMsg);\n      componentLogger.warn('PAT login failed - no token provided');\n      return;\n    }\n\n    setLoading(true);\n    setError(\"\");\n    const startTime = Date.now();\n    componentLogger.auth('Starting PAT authentication');\n    \n    try {\n      // Test the token by creating an Octokit instance and making a test request\n      const { Octokit } = await import('@octokit/rest');\n      const octokit = new Octokit({ auth: token.trim() });\n      componentLogger.debug('Octokit instance created for PAT validation');\n      \n      // Test the token by fetching user info\n      componentLogger.apiCall('GET', '/user', null);\n      const userResponse = await octokit.rest.users.getAuthenticated();\n      const duration = Date.now() - startTime;\n      componentLogger.apiResponse('GET', '/user', userResponse.status, duration);\n      \n      componentLogger.auth('PAT authentication successful', { \n        username: userResponse.data.login,\n        duration \n      });\n      \n      // Call success callback with token and octokit instance\n      onAuthSuccess(token.trim(), octokit);\n    } catch (err) {\n      const duration = Date.now() - startTime;\n      componentLogger.apiError('GET', '/user', err);\n      componentLogger.auth('PAT authentication failed', { \n        status: err.status, \n        message: err.message,\n        duration \n      });\n      console.error('PAT authentication failed:', err);\n      \n      if (err.status === 401) {\n        setError(\"Invalid Personal Access Token. Please check your token and try again.\");\n      } else if (err.status === 403) {\n        setError(\"Token doesn't have sufficient permissions. Please ensure your token has 'repo' and 'read:org' scopes.\");\n      } else {\n        setError(\"Authentication failed. Please check your connection and try again.\");\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTokenChange = (e) => {\n    setToken(e.target.value);\n    if (error) setError(\"\"); // Clear error when user starts typing\n  };\n\n  const handleTokenNameChange = (e) => {\n    setTokenName(e.target.value);\n    if (error) setError(\"\"); // Clear error when user starts typing\n  };\n\n  return (\n    <div className=\"pat-login\">\n      <div className=\"pat-login-section\">\n        <form onSubmit={handleSubmit} className=\"pat-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"token-name\">Token Name (optional):</label>\n            <input\n              id=\"token-name\"\n              type=\"text\"\n              value={tokenName}\n              onChange={handleTokenNameChange}\n              placeholder=\"e.g., SGEX Access Token\"\n              className=\"token-name-input\"\n              disabled={loading}\n              autoComplete=\"username\"\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"pat-token\">{t('auth.setupToken')}:</label>\n            <input\n              id=\"pat-token\"\n              type=\"password\"\n              value={token}\n              onChange={handleTokenChange}\n              placeholder=\"ghp_xxxxxxxxxxxxxxxxxxxx\"\n              className={`token-input ${error ? 'error' : ''}`}\n              disabled={loading}\n              autoComplete=\"current-password\"\n            />\n          </div>\n          \n          <button \n            type=\"submit\" \n            className=\"github-login-btn\" \n            disabled={loading || !token.trim()}\n          >\n            {loading ? (\n              <>\n                <span className=\"spinner small\"></span>\n                {t('common.loading')}...\n              </>\n            ) : (\n              <>\n                <span className=\"github-icon\">🔑</span>\n                {t('auth.signInWithPAT')}\n              </>\n            )}\n          </button>\n        </form>\n        \n        {error && <div className=\"error-message\">{error}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default PATLogin;"],"names":["LandingPage","t","useTranslation","user","setUser","useState","organizations","setOrganizations","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","dakCounts","setDakCounts","warningMessage","setWarningMessage","navigate","useNavigate","location","useLocation","loadCachedDakCounts","useCallback","userData","orgsData","githubService","isAuth","counts","userCache","repositoryCacheService","getCachedRepositories","login","repositories","concat","length","forEach","org","orgCache","fetchUserData","async","checkTokenPermissions","getCurrentUser","getUserOrganizations","console","whoOrganization","getWHOOrganization","whoIndex","findIndex","_objectSpread","isWHO","unshift","whoError","warn","id","name","description","avatar_url","html_url","type","some","map","logout","useEffect","initializeFromStoredToken","_location$state","state","pathname","replace","handleAuthSuccess","token","octokitInstance","authenticateWithOctokit","authenticate","handleProfileSelect","event","profile","navigationState","handleNavigationClick","handleDemoMode","demoProfile","isDemo","action","handleDismissWarning","_jsx","PageLayout","pageName","children","_jsxs","className","onClick","src","alt","PATLogin","onAuthSuccess","_ref","setToken","tokenName","setTokenName","componentLogger","logger","getLogger","React","componentMount","hasOnAuthSuccess","componentUnmount","onSubmit","e","preventDefault","userAction","tokenProvided","trim","startTime","Date","now","auth","Octokit","octokit","debug","apiCall","userResponse","rest","users","getAuthenticated","duration","apiResponse","status","username","data","err","apiError","message","htmlFor","value","onChange","target","placeholder","disabled","autoComplete","_Fragment"],"sourceRoot":""}