{"version":3,"file":"static/js/1990.3f3368a0.chunk.js","mappings":"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","sources":["components/BranchListingPage.js","components/PATLogin.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageLayout } from './framework';\nimport PATLogin from './PATLogin';\nimport githubService from '../services/githubService';\nimport useThemeImage from '../hooks/useThemeImage';\nimport { ALT_TEXT_KEYS, getAltText, getAvatarAltText } from '../utils/imageAltTextHelper';\n\nconst BranchListingPage = () => {\n    const { t } = useTranslation();\n    // Track authentication status for dependency arrays\n    const isAuthenticatedForDeps = githubService.isAuth();\n    \n    const [pullRequests, setPullRequests] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [prPage, setPrPage] = useState(1);\n    const [prSearchTerm, setPrSearchTerm] = useState('');\n    const [prSortBy, setPrSortBy] = useState('updated');\n    const [prSortOrder, setPrSortOrder] = useState('desc');\n    const [deploymentStatuses, setDeploymentStatuses] = useState({});\n    const [prFilter, setPrFilter] = useState('open');\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const [prComments, setPrComments] = useState({});\n    const [loadingComments] = useState(false); // Removed setLoadingComments as it's not used\n    const [commentInputs, setCommentInputs] = useState({});\n    const [submittingComments, setSubmittingComments] = useState({});\n    const [expandedDiscussions, setExpandedDiscussions] = useState({});\n    const [discussionSummaries, setDiscussionSummaries] = useState({});\n    const [loadingSummaries, setLoadingSummaries] = useState(false);\n\n    const ITEMS_PER_PAGE = 10;\n\n    // Theme-aware image paths\n    const mascotImage = useThemeImage('sgex-mascot.png');\n\n    // GitHub authentication functions\n    const handleAuthSuccess = (token) => {\n        // Authenticate using githubService which will handle secure storage\n        const success = githubService.authenticate(token);\n        if (success) {\n            setIsAuthenticated(true);\n        }\n    };\n\n\n    // Logout function\n    const handleLogout = () => {\n        setIsAuthenticated(false);\n        githubService.logout(); // Use secure logout method\n        setPrComments({});\n    };\n\n\n    // Function to fetch PR comments summary\n    const fetchPRCommentsSummary = async (prNumber) => {\n        try {\n            // Use githubService if authenticated, otherwise make a public API call\n            if (githubService.isAuth()) {\n                const comments = await githubService.getPullRequestIssueComments('litlfred', 'sgex', prNumber);\n                \n                if (comments.length === 0) {\n                    return { count: 0, lastComment: null };\n                }\n                \n                const lastComment = comments[comments.length - 1];\n                return {\n                    count: comments.length,\n                    lastComment: {\n                        author: lastComment.user.login,\n                        created_at: new Date(lastComment.created_at),\n                        avatar_url: lastComment.user.avatar_url\n                    }\n                };\n            } else {\n                // For unauthenticated requests, use githubService which handles rate limiting gracefully\n                try {\n                    const comments = await githubService.getPullRequestIssueComments('litlfred', 'sgex', prNumber);\n                    \n                    if (comments.length === 0) {\n                        return { count: 0, lastComment: null };\n                    }\n                    \n                    const lastComment = comments[comments.length - 1];\n                    return {\n                        count: comments.length,\n                        lastComment: {\n                            author: lastComment.user.login,\n                            created_at: new Date(lastComment.created_at),\n                            avatar_url: lastComment.user.avatar_url\n                        }\n                    };\n                } catch (error) {\n                    console.warn(`Failed to fetch comments for PR ${prNumber}: ${error.message}`);\n                    return { count: 0, lastComment: null, error: true };\n                }\n            }\n        } catch (error) {\n            console.warn(`Error fetching comment summary for PR ${prNumber}:`, error);\n            return { count: 0, lastComment: null, error: true };\n        }\n    };\n\n    // Function to fetch all PR comments (for expanded view)\n    const fetchAllPRComments = async (prNumber) => {\n        try {\n            // Use githubService if authenticated, otherwise make a public API call\n            if (githubService.isAuth()) {\n                const comments = await githubService.getPullRequestIssueComments('litlfred', 'sgex', prNumber);\n                return comments\n                    .map(comment => ({\n                        id: comment.id,\n                        author: comment.user.login,\n                        body: comment.body,\n                        created_at: new Date(comment.created_at).toLocaleDateString(),\n                        created_at_raw: new Date(comment.created_at),\n                        avatar_url: comment.user.avatar_url\n                    }))\n                    .sort((a, b) => b.created_at_raw - a.created_at_raw); // Sort newest first\n            } else {\n                // For unauthenticated requests, use githubService which handles rate limiting gracefully\n                try {\n                    const comments = await githubService.getPullRequestIssueComments('litlfred', 'sgex', prNumber);\n                    return comments\n                        .map(comment => ({\n                            id: comment.id,\n                            author: comment.user.login,\n                            body: comment.body,\n                            created_at: new Date(comment.created_at).toLocaleDateString(),\n                            created_at_raw: new Date(comment.created_at),\n                            avatar_url: comment.user.avatar_url\n                        }))\n                        .sort((a, b) => b.created_at_raw - a.created_at_raw); // Sort newest first\n                } catch (error) {\n                    console.warn(`Failed to fetch comments for PR ${prNumber}: ${error.message}`);\n                    return [];\n                }\n            }\n        } catch (error) {\n            console.warn(`Error fetching all comments for PR ${prNumber}:`, error);\n            return [];\n        }\n    };\n\n    // Function to load discussion summaries for visible PRs\n    const loadDiscussionSummaries = useCallback(async (prs) => {\n        if (prs.length === 0) return;\n        \n        setLoadingSummaries(true);\n        const summaries = {};\n        \n        for (const pr of prs) {\n            summaries[pr.number] = await fetchPRCommentsSummary(pr.number);\n        }\n        \n        setDiscussionSummaries(summaries);\n        setLoadingSummaries(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isAuthenticatedForDeps]);\n\n    // Function to toggle discussion expansion\n    const toggleDiscussion = async (prNumber) => {\n        const isExpanded = expandedDiscussions[prNumber];\n        \n        if (!isExpanded) {\n            // Load all comments when expanding\n            const comments = await fetchAllPRComments(prNumber);\n            setPrComments(prev => ({ ...prev, [prNumber]: comments }));\n        }\n        \n        setExpandedDiscussions(prev => ({\n            ...prev,\n            [prNumber]: !isExpanded\n        }));\n    };\n\n    // Function to get discussion summary text\n    const getDiscussionSummaryText = (prNumber) => {\n        const summary = discussionSummaries[prNumber];\n        \n        if (loadingSummaries) {\n            return \"Loading discussion...\";\n        }\n        \n        if (!summary) {\n            return \"No comments yet\";\n        }\n        \n        if (summary.error) {\n            return \"Unable to load comments\";\n        }\n        \n        if (summary.count === 0) {\n            return \"No comments yet\";\n        }\n        \n        const { count, lastComment } = summary;\n        const timeAgo = lastComment ? getTimeAgo(lastComment.created_at) : '';\n        \n        return `${count} comment${count > 1 ? 's' : ''}, last by ${lastComment.author} ${timeAgo}`;\n    };\n\n    // Helper function to get relative time\n    const getTimeAgo = (date) => {\n        const now = new Date();\n        const diffMs = now - date;\n        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n        \n        if (diffDays === 0) return 'today';\n        if (diffDays === 1) return '1 day ago';\n        if (diffDays < 7) return `${diffDays} days ago`;\n        if (diffDays < 30) return `${Math.floor(diffDays / 7)} week${Math.floor(diffDays / 7) > 1 ? 's' : ''} ago`;\n        return `${Math.floor(diffDays / 30)} month${Math.floor(diffDays / 30) > 1 ? 's' : ''} ago`;\n    };\n\n    // Function to submit a comment\n    const submitComment = async (prNumber, commentText) => {\n        if (!githubService.isAuth() || !commentText.trim()) return false;\n        \n        setSubmittingComments(prev => ({ ...prev, [prNumber]: true }));\n        \n        try {\n            await githubService.createPullRequestComment('litlfred', 'sgex', prNumber, commentText);\n            \n            setCommentInputs(prev => ({ ...prev, [prNumber]: '' }));\n            \n            // Refresh both full comments (if expanded) and summary\n            if (expandedDiscussions[prNumber]) {\n                const updatedComments = await fetchAllPRComments(prNumber);\n                setPrComments(prev => ({ ...prev, [prNumber]: updatedComments }));\n            }\n            \n            // Refresh the discussion summary\n            const updatedSummary = await fetchPRCommentsSummary(prNumber);\n            setDiscussionSummaries(prev => ({ ...prev, [prNumber]: updatedSummary }));\n            \n            return true;\n        } catch (error) {\n            console.error(`Error submitting comment for PR ${prNumber}:`, error);\n            return false;\n        } finally {\n            setSubmittingComments(prev => ({ ...prev, [prNumber]: false }));\n        }\n    };\n\n    // Function to check deployment status for a branch\n    const checkDeploymentStatus = async (safeBranchName) => {\n        try {\n            // Use githubService if authenticated, otherwise make a public API call\n            if (githubService.isAuth()) {\n                try {\n                    const workflowRuns = await githubService.getWorkflowRuns('litlfred', 'sgex', {\n                        branch: safeBranchName,\n                        workflow_id: 'deploy.yml',\n                        per_page: 1\n                    });\n                    \n                    if (workflowRuns.workflow_runs && workflowRuns.workflow_runs.length > 0) {\n                        const latestRun = workflowRuns.workflow_runs[0];\n                        return {\n                            status: latestRun.status,\n                            conclusion: latestRun.conclusion,\n                            html_url: latestRun.html_url,\n                            created_at: latestRun.created_at\n                        };\n                    }\n                    \n                    return { status: 'unknown', conclusion: null };\n                } catch (authError) {\n                    console.warn(`Authenticated workflow check failed for ${safeBranchName}:`, authError);\n                    return { status: 'unknown', conclusion: null };\n                }\n            } else {\n                // For unauthenticated requests, use githubService which handles rate limiting gracefully\n                try {\n                    const workflowRuns = await githubService.getWorkflowRuns('litlfred', 'sgex', {\n                        branch: safeBranchName,\n                        workflow_id: 'deploy.yml',\n                        per_page: 1\n                    });\n                    \n                    if (workflowRuns.workflow_runs && workflowRuns.workflow_runs.length > 0) {\n                        const latestRun = workflowRuns.workflow_runs[0];\n                        return {\n                            status: latestRun.status,\n                            conclusion: latestRun.conclusion,\n                            html_url: latestRun.html_url,\n                            created_at: latestRun.created_at\n                        };\n                    }\n                    \n                    return { status: 'unknown', conclusion: null };\n                } catch (error) {\n                    console.warn(`Failed to fetch deployment status for ${safeBranchName}: ${error.message}`);\n                    // Rate limited - return unknown status instead of error\n                    return { status: 'unknown', conclusion: null };\n                }\n            }\n        } catch (error) {\n            console.warn(`Error checking deployment status for ${safeBranchName}:`, error);\n            return { status: 'unknown', conclusion: null };\n        }\n    };\n\n    // Function to update deployment statuses for visible PRs\n    const updateDeploymentStatuses = useCallback(async (prs) => {\n        if (prs.length === 0) return;\n        \n        const statuses = {};\n        for (const pr of prs) {\n            statuses[pr.safeBranchName] = await checkDeploymentStatus(pr.safeBranchName);\n        }\n        \n        setDeploymentStatuses(prev => ({ ...prev, ...statuses }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isAuthenticatedForDeps]);\n\n    // Function to get deployment status display info\n    const getDeploymentStatusInfo = (safeBranchName) => {\n        const status = deploymentStatuses[safeBranchName];\n        if (!status) return { text: 'Checking...', class: 'unknown' };\n        \n        if (status.status === 'completed' && status.conclusion === 'success') {\n            return { text: '✅ Deployed', class: 'success' };\n        } else if (status.status === 'completed' && status.conclusion === 'failure') {\n            return { text: '❌ Failed', class: 'failed' };\n        } else if (status.status === 'in_progress') {\n            return { text: '🔄 Deploying', class: 'in-progress' };\n        } else if (status.status === 'queued') {\n            return { text: '⏳ Queued', class: 'queued' };\n        } else if (status.status === 'error') {\n            return { text: '⚠️ Error', class: 'error' };\n        } else {\n            return { text: '❓ Unknown', class: 'unknown' };\n        }\n    };\n\n    // Sorting functions\n    const sortPRs = (prs, sortBy, sortOrder = 'desc') => {\n        return [...prs].sort((a, b) => {\n            let comparison = 0;\n            switch (sortBy) {\n                case 'number':\n                    comparison = b.number - a.number;\n                    break;\n                case 'alphabetical':\n                    comparison = a.title.localeCompare(b.title);\n                    break;\n                case 'updated':\n                default:\n                    const dateA = new Date(a.updatedAt);\n                    const dateB = new Date(b.updatedAt);\n                    comparison = dateB - dateA;\n                    break;\n            }\n            \n            // Reverse comparison for ascending order\n            return sortOrder === 'asc' ? -comparison : comparison;\n        });\n    };\n\n    // Check for existing authentication on component mount\n    useEffect(() => {\n        const success = githubService.initializeFromStoredToken();\n        if (success) {\n            const tokenInfo = githubService.getStoredTokenInfo();\n            if (tokenInfo) {\n                setIsAuthenticated(true);\n            }\n        }\n    }, []);\n\n    // Fetch data\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                setLoading(true);\n                \n                const owner = 'litlfred';\n                const repo = 'sgex';\n                \n                const prState = prFilter === 'all' ? 'all' : prFilter;\n                \n                // Use githubService instead of direct fetch to handle authentication properly\n                const prData = await githubService.getPullRequests(owner, repo, {\n                    state: prState,\n                    sort: 'updated', \n                    per_page: 100\n                });\n                \n                const formattedPRs = prData.map(pr => {\n                    const safeBranchName = pr.head.ref.replace(/\\//g, '-');\n                    return {\n                        id: pr.id,\n                        number: pr.number,\n                        title: pr.title,\n                        state: pr.state,\n                        author: pr.user.login,\n                        branchName: pr.head.ref,\n                        safeBranchName: safeBranchName,\n                        url: `./${safeBranchName}/index.html`,\n                        prUrl: pr.html_url,\n                        updatedAt: new Date(pr.updated_at).toLocaleDateString(),\n                        createdAt: new Date(pr.created_at).toLocaleDateString()\n                    };\n                });\n                \n                setPullRequests(formattedPRs);\n                \n                // Always try to load discussion summaries\n                await loadDiscussionSummaries(formattedPRs.slice(0, ITEMS_PER_PAGE));\n            } catch (err) {\n                console.error('Error fetching data:', err);\n                setError(err.message);\n                \n                // Fallback mock data\n                if (err.message.includes('Failed to fetch') || err.message.includes('rate limit')) {\n                    console.log('Using fallback mock data...');\n                    const mockPRs = [\n                        {\n                            id: 1,\n                            number: 460,\n                            title: 'Improve multi-page selector landing page for GitHub deployment',\n                            state: 'open',\n                            author: 'copilot',\n                            branchName: 'copilot/fix-459',\n                            safeBranchName: 'copilot-fix-459',\n                            url: './sgex/copilot-fix-459/index.html',\n                            prUrl: 'https://github.com/litlfred/sgex/pull/460',\n                            updatedAt: new Date().toLocaleDateString(),\n                            createdAt: new Date(Date.now() - 86400000).toLocaleDateString()\n                        },\n                        {\n                            id: 2,\n                            number: 459,\n                            title: 'Add enhanced PR preview functionality',\n                            state: 'open',\n                            author: 'developer',\n                            branchName: 'feature/pr-preview',\n                            safeBranchName: 'feature-pr-preview',\n                            url: './sgex/feature-pr-preview/index.html',\n                            prUrl: 'https://github.com/litlfred/sgex/pull/459',\n                            updatedAt: new Date(Date.now() - 172800000).toLocaleDateString(),\n                            createdAt: new Date(Date.now() - 345600000).toLocaleDateString()\n                        }\n                    ];\n                    setPullRequests(mockPRs);\n                    // Keep the error for display but don't block functionality\n                    if (err.message.includes('Failed to fetch')) {\n                        setError('API rate limit exceeded for 136.47.145.179. (But here\\'s the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.) - https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting');\n                    }\n                }\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, [prFilter, isAuthenticatedForDeps, loadDiscussionSummaries]);\n\n    // Poll deployment statuses every 7 seconds for visible PRs\n    useEffect(() => {\n        if (pullRequests.length === 0) return;\n        \n        const filtered = pullRequests.filter(pr => \n            pr.title.toLowerCase().includes(prSearchTerm.toLowerCase()) ||\n            pr.author.toLowerCase().includes(prSearchTerm.toLowerCase()) ||\n            pr.branchName.toLowerCase().includes(prSearchTerm.toLowerCase())\n        );\n        const sorted = sortPRs(filtered, prSortBy, prSortOrder);\n        const paginated = sorted.slice((prPage - 1) * ITEMS_PER_PAGE, prPage * ITEMS_PER_PAGE);\n        \n        // Initial status check\n        updateDeploymentStatuses(paginated);\n        \n        // Set up polling every 7 seconds\n        const interval = setInterval(() => {\n            updateDeploymentStatuses(paginated);\n        }, 7000);\n        \n        return () => clearInterval(interval);\n    }, [pullRequests, prSearchTerm, prSortBy, prSortOrder, prPage, updateDeploymentStatuses]);\n\n    // Load comments when pagination changes\n    useEffect(() => {\n        if (pullRequests.length > 0) {\n            const filtered = pullRequests.filter(pr => \n                pr.title.toLowerCase().includes(prSearchTerm.toLowerCase()) ||\n                pr.author.toLowerCase().includes(prSearchTerm.toLowerCase()) ||\n                pr.branchName.toLowerCase().includes(prSearchTerm.toLowerCase())\n            );\n            const sorted = sortPRs(filtered, prSortBy, prSortOrder);\n            const paginated = sorted.slice((prPage - 1) * ITEMS_PER_PAGE, prPage * ITEMS_PER_PAGE);\n            loadDiscussionSummaries(paginated);\n        }\n    }, [prPage, prSearchTerm, prSortBy, prSortOrder, pullRequests, loadDiscussionSummaries]);\n\n    // Filter and sort PRs\n    const filteredPRs = pullRequests.filter(pr => \n        pr.title.toLowerCase().includes(prSearchTerm.toLowerCase()) ||\n        pr.author.toLowerCase().includes(prSearchTerm.toLowerCase()) ||\n        pr.branchName.toLowerCase().includes(prSearchTerm.toLowerCase())\n    );\n    const sortedPRs = sortPRs(filteredPRs, prSortBy, prSortOrder);\n    const paginatedPRs = sortedPRs.slice((prPage - 1) * ITEMS_PER_PAGE, prPage * ITEMS_PER_PAGE);\n    const totalPRPages = Math.ceil(sortedPRs.length / ITEMS_PER_PAGE);\n\n    return (\n        <PageLayout pageName=\"branch-listing\" showBreadcrumbs={false}>\n            <div className=\"branch-listing-content\">\n                {loading ? (\n                    <>\n                        <div className=\"branch-listing-header\">\n                            <h1><img src={mascotImage} alt={getAltText(t, ALT_TEXT_KEYS.ICON_SGEX, 'SGEX Icon')} className=\"sgex-icon\" /> SGEX</h1>\n                            <p className=\"subtitle\">a collaborative workbench for WHO SMART Guidelines</p>\n                            <div className=\"loading\">Loading previews...</div>\n                            \n                            <div className=\"prominent-info\">\n                                <p className=\"info-text\">\n                                    🐾 While previews load, you can access the main SGEX workbench and login below.\n                                </p>\n                            </div>\n                        </div>\n\n                        <div className=\"action-cards\">\n                            <div className=\"action-card main-site-card\">\n                                <a \n                                    href=\"/sgex/main/\"\n                                    className=\"card-link\"\n                                >\n                                    <div className=\"card-content\">\n                                        <img src={mascotImage} alt={getAltText(t, ALT_TEXT_KEYS.MASCOT_HELPER, 'SGEX Mascot')} className=\"card-icon\" />\n                                        <div className=\"card-text\">\n                                            <h3>View Main Site</h3>\n                                            <p>Access the main SGEX workbench</p>\n                                        </div>\n                                    </div>\n                                </a>\n                            </div>\n                            \n                            {!isAuthenticated ? (\n                                <div className=\"action-card login-card\">\n                                    <div className=\"card-content\">\n                                        <div className=\"login-icon\">🔐</div>\n                                        <div className=\"card-text\">\n                                            <h3>GitHub Login</h3>\n                                            <p>Login to get higher API rate limits and view comments</p>\n                                            <PATLogin onAuthSuccess={handleAuthSuccess} />\n                                        </div>\n                                    </div>\n                                </div>\n                            ) : (\n                                <div className=\"action-card logout-card\">\n                                    <div className=\"card-content\">\n                                        <div className=\"login-icon\">✅</div>\n                                        <div className=\"card-text\">\n                                            <h3>Logged In</h3>\n                                            <p>You can now view and add comments</p>\n                                            <button onClick={handleLogout} className=\"logout-btn\">\n                                                🚪 Logout\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                    </>\n                ) : error && pullRequests.length === 0 ? (\n                    <>\n                        <header className=\"branch-listing-header\">\n                            <h1><img src={mascotImage} alt={getAltText(t, ALT_TEXT_KEYS.ICON_SGEX, 'SGEX Icon')} className=\"sgex-icon\" /> SGEX</h1>\n                            <p className=\"subtitle\">a collaborative workbench for WHO SMART Guidelines</p>\n                            \n                            <div className=\"error-banner\">\n                                <div className=\"error-content\">\n                                    <span className=\"error-icon\">⚠️</span>\n                                    <div className=\"error-text\">\n                                        <p><strong>Failed to load previews:</strong> {error}</p>\n                                        <p className=\"error-help\">\n                                            GitHub API rate limit exceeded. \n                                            {!isAuthenticated && ' Try logging in with a Personal Access Token for higher rate limits, or'}\n                                            {' '}try refreshing the page in a few minutes.\n                                        </p>\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div className=\"prominent-info\">\n                                <p className=\"info-text\">\n                                    🐾 You can still access the main SGEX workbench and login below.\n                                </p>\n                            </div>\n                        </header>\n\n                        <div className=\"action-cards\">\n                            <div className=\"action-card main-site-card\">\n                                <a \n                                    href=\"/sgex/main/\"\n                                    className=\"card-link\"\n                                >\n                                    <div className=\"card-content\">\n                                        <img src={mascotImage} alt={getAltText(t, ALT_TEXT_KEYS.MASCOT_HELPER, 'SGEX Mascot')} className=\"card-icon\" />\n                                        <div className=\"card-text\">\n                                            <h3>View Main Site</h3>\n                                            <p>Access the main SGEX workbench</p>\n                                        </div>\n                                    </div>\n                                </a>\n                            </div>\n                            \n                            {!isAuthenticated ? (\n                                <div className=\"action-card login-card\">\n                                    <div className=\"card-content\">\n                                        <div className=\"login-icon\">🔐</div>\n                                        <div className=\"card-text\">\n                                            <h3>GitHub Login</h3>\n                                            <p>Login to get higher API rate limits and view comments</p>\n                                            <PATLogin onAuthSuccess={handleAuthSuccess} />\n                                        </div>\n                                    </div>\n                                </div>\n                            ) : (\n                                <div className=\"action-card logout-card\">\n                                    <div className=\"card-content\">\n                                        <div className=\"login-icon\">✅</div>\n                                        <div className=\"card-text\">\n                                            <h3>Logged In</h3>\n                                            <p>You can now view and add comments</p>\n                                            <button onClick={handleLogout} className=\"logout-btn\">\n                                                🚪 Logout\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        <header className=\"branch-listing-header\">\n                    <h1><img src={mascotImage} alt={getAltText(t, ALT_TEXT_KEYS.ICON_SGEX, 'SGEX Icon')} className=\"sgex-icon\" /> SGEX</h1>\n                    <p className=\"subtitle\">a collaborative workbench for WHO SMART Guidelines</p>\n                    \n                    {error && (\n                        <div className=\"error-banner\">\n                            <div className=\"error-content\">\n                                <span className=\"error-icon\">⚠️</span>\n                                <div className=\"error-text\">\n                                    <p><strong>Failed to load previews:</strong> {error}</p>\n                                    <p className=\"error-help\">\n                                        GitHub API rate limit exceeded. \n                                        {!isAuthenticated && ' Try logging in with a Personal Access Token for higher rate limits, or'}\n                                        {' '}try refreshing the page in a few minutes.\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    \n                    <div className=\"prominent-info\">\n                        <p className=\"info-text\">\n                            🐾 This landing page lists all available previews. \n                            Each branch and PR is automatically deployed to its own preview environment.\n                        </p>\n                    </div>\n                </header>\n\n                <div className=\"action-cards\">\n                    <div className=\"action-card main-site-card\">\n                        <a \n                            href=\"/sgex/main/\"\n                            className=\"card-link\"\n                        >\n                            <div className=\"card-content\">\n                                <img src={mascotImage} alt={getAltText(t, ALT_TEXT_KEYS.MASCOT_HELPER, 'SGEX Mascot')} className=\"card-icon\" />\n                                <div className=\"card-text\">\n                                    <h3>View Main Site</h3>\n                                    <p>Access the main SGEX workbench</p>\n                                </div>\n                            </div>\n                        </a>\n                    </div>\n                    \n                    {!isAuthenticated ? (\n                        <div className=\"action-card login-card\">\n                            <div className=\"card-content\">\n                                <div className=\"login-icon\">🔐</div>\n                                <div className=\"card-text\">\n                                    <h3>GitHub Login</h3>\n                                    <p>Login to view and add comments{error ? ' and get higher API rate limits' : ''}</p>\n                                    <PATLogin onAuthSuccess={handleAuthSuccess} />\n                                </div>\n                            </div>\n                        </div>\n                    ) : (\n                        <div className=\"action-card logout-card\">\n                            <div className=\"card-content\">\n                                <div className=\"login-icon\">✅</div>\n                                <div className=\"card-text\">\n                                    <h3>Logged In</h3>\n                                    <p>You can now view and add comments</p>\n                                    <button onClick={handleLogout} className=\"logout-btn\">\n                                        🚪 Logout\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n\n                <div className=\"preview-tabs\">\n                    <button className=\"tab-button active\">\n                        🔄 Pull Request Previews ({sortedPRs.length})\n                    </button>\n                </div>\n\n                <div className=\"pr-section\">\n                    <div className=\"pr-controls\">\n                        <div className=\"pr-filter-section\">\n                            <label htmlFor=\"pr-filter\">Filter PRs:</label>\n                            <select\n                                id=\"pr-filter\"\n                                value={prFilter}\n                                onChange={(e) => {\n                                    setPrFilter(e.target.value);\n                                    setPrPage(1);\n                                }}\n                                className=\"filter-select\"\n                            >\n                                <option value=\"open\">Open PRs Only</option>\n                                <option value=\"closed\">Closed PRs Only</option>\n                                <option value=\"all\">All PRs</option>\n                            </select>\n                        </div>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search pull requests by title, author, or branch name...\"\n                            value={prSearchTerm}\n                            onChange={(e) => {\n                                setPrSearchTerm(e.target.value);\n                                setPrPage(1);\n                            }}\n                            className=\"pr-search\"\n                        />\n                        <select\n                            value={prSortBy}\n                            onChange={(e) => {\n                                setPrSortBy(e.target.value);\n                                setPrPage(1);\n                            }}\n                            className=\"sort-select\"\n                        >\n                            <option value=\"updated\">Sort by Recent Updates</option>\n                            <option value=\"number\">Sort by PR Number</option>\n                            <option value=\"alphabetical\">Sort Alphabetically</option>\n                        </select>\n                        <select\n                            value={prSortOrder}\n                            onChange={(e) => {\n                                setPrSortOrder(e.target.value);\n                                setPrPage(1);\n                            }}\n                            className=\"sort-select\"\n                        >\n                            <option value=\"desc\">Descending</option>\n                            <option value=\"asc\">Ascending</option>\n                        </select>\n                    </div>\n\n                    <div className=\"pr-cards\">\n                        {paginatedPRs.length === 0 ? (\n                            <div className=\"no-items\">\n                                {prSearchTerm ? (\n                                    <p>No pull requests match your search \"{prSearchTerm}\".</p>\n                                ) : (\n                                    <p>No pull request previews available at the moment.</p>\n                                )}\n                            </div>\n                        ) : (\n                            paginatedPRs.map((pr) => (\n                                <div key={pr.id} className=\"preview-card pr-card\">\n                                    <div className=\"card-header\">\n                                        <h3 className=\"item-name\">#{pr.number}: {pr.title}</h3>\n                                        <div className=\"card-badges\">\n                                            <span className={`state-badge ${pr.state}`}>\n                                                {pr.state === 'open' ? '🟢' : '🔴'} {pr.state}\n                                            </span>\n                                            <span className={`deployment-status ${getDeploymentStatusInfo(pr.safeBranchName).class}`}>\n                                                {getDeploymentStatusInfo(pr.safeBranchName).text}\n                                            </span>\n                                        </div>\n                                    </div>\n                                    \n                                    <div className=\"card-body\">\n                                        <p className=\"pr-meta\">\n                                            <strong>Branch:</strong> {pr.branchName} • <strong>Author:</strong> {pr.author}\n                                        </p>\n                                        <p className=\"item-date\">\n                                            Created: {pr.createdAt} • Updated: {pr.updatedAt}\n                                        </p>\n                                        \n                                        {/* Discussion Summary Status Bar - Always show */}\n                                        <div \n                                            className=\"discussion-summary-bar\"\n                                            onClick={() => toggleDiscussion(pr.number)}\n                                        >\n                                            <div className=\"discussion-summary-text\">\n                                                <span className=\"discussion-summary-icon\">💬</span>\n                                                {getDiscussionSummaryText(pr.number)}\n                                            </div>\n                                            <span className={`discussion-expand-icon ${expandedDiscussions[pr.number] ? 'expanded' : ''}`}>\n                                                ▶\n                                            </span>\n                                        </div>\n\n                                        {/* Expanded Discussion Section */}\n                                        {expandedDiscussions[pr.number] && (\n                                            <div className=\"discussion-expanded-section\">\n                                                <div className=\"discussion-header\">\n                                                    <h4 className=\"discussion-title\">Discussion</h4>\n                                                    <div className=\"discussion-actions\">\n                                                        <a \n                                                            href={`https://github.com/litlfred/sgex/pull/${pr.number}/files`}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                            className=\"discussion-action-btn\"\n                                                        >\n                                                            📁 View Files\n                                                        </a>\n                                                        <a \n                                                            href={pr.prUrl}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                            className=\"discussion-action-btn secondary\"\n                                                        >\n                                                            🔗 View PR\n                                                        </a>\n                                                    </div>\n                                                </div>\n                                                \n                                                {/* Comment Input at Top - Only for authenticated users */}\n                                                {githubService.isAuth() && (\n                                                    <div className=\"comment-input-section\">\n                                                        <textarea\n                                                            value={commentInputs[pr.number] || ''}\n                                                            onChange={(e) => setCommentInputs(prev => ({\n                                                                ...prev,\n                                                                [pr.number]: e.target.value\n                                                            }))}\n                                                            placeholder=\"Add a comment...\"\n                                                            className=\"comment-input\"\n                                                            rows={3}\n                                                        />\n                                                        <button\n                                                            onClick={() => submitComment(pr.number, commentInputs[pr.number])}\n                                                            disabled={!commentInputs[pr.number]?.trim() || submittingComments[pr.number]}\n                                                            className=\"submit-comment-btn\"\n                                                        >\n                                                            {submittingComments[pr.number] ? 'Submitting...' : 'Add Comment'}\n                                                        </button>\n                                                    </div>\n                                                )}\n                                                \n                                                {/* Scrollable Comments Area - Show for everyone */}\n                                                <div className=\"discussion-scroll-area\">\n                                                    {loadingComments ? (\n                                                        <div className=\"comments-loading\">Loading full discussion...</div>\n                                                    ) : prComments[pr.number] && prComments[pr.number].length > 0 ? (\n                                                        <div className=\"comments-list\">\n                                                            {prComments[pr.number].slice(0, 5).map((comment) => (\n                                                                <div key={comment.id} className=\"comment-item\">\n                                                                    <div className=\"comment-header\">\n                                                                        <img \n                                                                            src={comment.avatar_url} \n                                                                            alt={getAvatarAltText(t, { name: comment.author }, 'user')} \n                                                                            className=\"comment-avatar\"\n                                                                        />\n                                                                        <span className=\"comment-author\">{comment.author}</span>\n                                                                        <span className=\"comment-date\">{comment.created_at}</span>\n                                                                    </div>\n                                                                    <div className=\"comment-body\">\n                                                                        {comment.body.length > 200 ? \n                                                                            `${comment.body.substring(0, 200)}...` : \n                                                                            comment.body\n                                                                        }\n                                                                    </div>\n                                                                </div>\n                                                            ))}\n                                                        </div>\n                                                    ) : (\n                                                        <div className=\"no-comments\">\n                                                            {!githubService.isAuth() ? \n                                                                \"No comments yet. Login to add the first comment!\" :\n                                                                \"No comments yet. Be the first to comment!\"\n                                                            }\n                                                        </div>\n                                                    )}\n                                                </div>\n                                            </div>\n                                        )}\n                                        \n                                        <div className=\"pr-actions\">\n                                            <a \n                                                href={pr.url} \n                                                className=\"preview-link\"\n                                                target=\"_blank\"\n                                                rel=\"noopener noreferrer\"\n                                            >\n                                                <span>🚀 View Preview</span>\n                                            </a>\n                                            \n                                            <a \n                                                href={pr.prUrl} \n                                                className=\"pr-link\"\n                                                target=\"_blank\"\n                                                rel=\"noopener noreferrer\"\n                                            >\n                                                <span>📋 View PR</span>\n                                            </a>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"card-footer\">\n                                        <small className=\"preview-path\">\n                                            Preview URL: {pr.url}\n                                        </small>\n                                    </div>\n                                </div>\n                            ))\n                        )}\n                    </div>\n\n                    {totalPRPages > 1 && (\n                        <div className=\"pagination\">\n                            <button \n                                className=\"pagination-btn\"\n                                onClick={() => setPrPage(Math.max(1, prPage - 1))}\n                                disabled={prPage === 1}\n                            >\n                                ← Previous\n                            </button>\n                            <span className=\"pagination-info\">\n                                Page {prPage} of {totalPRPages} ({sortedPRs.length} total)\n                            </span>\n                            <button \n                                className=\"pagination-btn\"\n                                onClick={() => setPrPage(Math.min(totalPRPages, prPage + 1))}\n                                disabled={prPage === totalPRPages}\n                            >\n                                Next →\n                            </button>\n                        </div>\n                    )}\n                    </div>\n                    </>\n                )}\n            </div>\n        </PageLayout>\n    );\n};\n\nexport default BranchListingPage;\n","import React, { useState } from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport logger from \"../utils/logger\";\n\nconst PATLogin = ({ onAuthSuccess }) => {\n  const { t } = useTranslation();\n  const [token, setToken] = useState(\"\");\n  const [tokenName, setTokenName] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const componentLogger = logger.getLogger('PATLogin');\n\n  React.useEffect(() => {\n    componentLogger.componentMount({ hasOnAuthSuccess: !!onAuthSuccess });\n    return () => componentLogger.componentUnmount();\n  }, [componentLogger, onAuthSuccess]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    componentLogger.userAction('PAT login attempt', { tokenProvided: !!token.trim() });\n    \n    if (!token.trim()) {\n      const errorMsg = \"Please enter a GitHub Personal Access Token\";\n      setError(errorMsg);\n      componentLogger.warn('PAT login failed - no token provided');\n      return;\n    }\n\n    setLoading(true);\n    setError(\"\");\n    const startTime = Date.now();\n    componentLogger.auth('Starting PAT authentication');\n    \n    try {\n      // Test the token by creating an Octokit instance and making a test request\n      const { Octokit } = await import('@octokit/rest');\n      const octokit = new Octokit({ auth: token.trim() });\n      componentLogger.debug('Octokit instance created for PAT validation');\n      \n      // Test the token by fetching user info\n      componentLogger.apiCall('GET', '/user', null);\n      const userResponse = await octokit.rest.users.getAuthenticated();\n      const duration = Date.now() - startTime;\n      componentLogger.apiResponse('GET', '/user', userResponse.status, duration);\n      \n      componentLogger.auth('PAT authentication successful', { \n        username: userResponse.data.login,\n        duration \n      });\n      \n      // Call success callback with token and octokit instance\n      onAuthSuccess(token.trim(), octokit);\n    } catch (err) {\n      const duration = Date.now() - startTime;\n      componentLogger.apiError('GET', '/user', err);\n      componentLogger.auth('PAT authentication failed', { \n        status: err.status, \n        message: err.message,\n        duration \n      });\n      console.error('PAT authentication failed:', err);\n      \n      if (err.status === 401) {\n        setError(\"Invalid Personal Access Token. Please check your token and try again.\");\n      } else if (err.status === 403) {\n        setError(\"Token doesn't have sufficient permissions. Please ensure your token has 'repo' and 'read:org' scopes.\");\n      } else {\n        setError(\"Authentication failed. Please check your connection and try again.\");\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTokenChange = (e) => {\n    setToken(e.target.value);\n    if (error) setError(\"\"); // Clear error when user starts typing\n  };\n\n  const handleTokenNameChange = (e) => {\n    setTokenName(e.target.value);\n    if (error) setError(\"\"); // Clear error when user starts typing\n  };\n\n  return (\n    <div className=\"pat-login\">\n      <div className=\"pat-login-section\">\n        <form onSubmit={handleSubmit} className=\"pat-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"token-name\">Token Name (optional):</label>\n            <input\n              id=\"token-name\"\n              type=\"text\"\n              value={tokenName}\n              onChange={handleTokenNameChange}\n              placeholder=\"e.g., SGEX Access Token\"\n              className=\"token-name-input\"\n              disabled={loading}\n              autoComplete=\"username\"\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"pat-token\">{t('auth.setupToken')}:</label>\n            <input\n              id=\"pat-token\"\n              type=\"password\"\n              value={token}\n              onChange={handleTokenChange}\n              placeholder=\"ghp_xxxxxxxxxxxxxxxxxxxx\"\n              className={`token-input ${error ? 'error' : ''}`}\n              disabled={loading}\n              autoComplete=\"current-password\"\n            />\n          </div>\n          \n          <button \n            type=\"submit\" \n            className=\"github-login-btn\" \n            disabled={loading || !token.trim()}\n          >\n            {loading ? (\n              <>\n                <span className=\"spinner small\"></span>\n                {t('common.loading')}...\n              </>\n            ) : (\n              <>\n                <span className=\"github-icon\">🔑</span>\n                {t('auth.signInWithPAT')}\n              </>\n            )}\n          </button>\n        </form>\n        \n        {error && <div className=\"error-message\">{error}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default PATLogin;"],"names":["BranchListingPage","t","useTranslation","isAuthenticatedForDeps","githubService","isAuth","pullRequests","setPullRequests","useState","loading","setLoading","error","setError","prPage","setPrPage","prSearchTerm","setPrSearchTerm","prSortBy","setPrSortBy","prSortOrder","setPrSortOrder","deploymentStatuses","setDeploymentStatuses","prFilter","setPrFilter","isAuthenticated","setIsAuthenticated","prComments","setPrComments","loadingComments","commentInputs","setCommentInputs","submittingComments","setSubmittingComments","expandedDiscussions","setExpandedDiscussions","discussionSummaries","setDiscussionSummaries","loadingSummaries","setLoadingSummaries","ITEMS_PER_PAGE","mascotImage","useThemeImage","handleAuthSuccess","token","authenticate","handleLogout","logout","fetchPRCommentsSummary","async","comments","getPullRequestIssueComments","prNumber","length","count","lastComment","author","user","login","created_at","Date","avatar_url","console","warn","concat","message","fetchAllPRComments","map","comment","id","body","toLocaleDateString","created_at_raw","sort","a","b","loadDiscussionSummaries","useCallback","prs","summaries","pr","number","getDiscussionSummaryText","summary","timeAgo","getTimeAgo","date","diffMs","diffDays","Math","floor","checkDeploymentStatus","workflowRuns","getWorkflowRuns","branch","safeBranchName","workflow_id","per_page","workflow_runs","latestRun","status","conclusion","html_url","authError","updateDeploymentStatuses","statuses","prev","_objectSpread","getDeploymentStatusInfo","text","class","sortPRs","sortBy","sortOrder","arguments","undefined","comparison","title","localeCompare","dateA","updatedAt","useEffect","initializeFromStoredToken","getStoredTokenInfo","owner","repo","prState","formattedPRs","getPullRequests","state","head","ref","replace","branchName","url","prUrl","updated_at","createdAt","slice","err","includes","log","mockPRs","now","fetchData","filtered","filter","toLowerCase","paginated","interval","setInterval","clearInterval","filteredPRs","sortedPRs","paginatedPRs","totalPRPages","ceil","_jsx","PageLayout","pageName","showBreadcrumbs","children","className","_jsxs","_Fragment","src","alt","getAltText","ALT_TEXT_KEYS","ICON_SGEX","href","MASCOT_HELPER","onClick","PATLogin","onAuthSuccess","htmlFor","value","onChange","e","target","type","placeholder","_commentInputs$pr$num","isExpanded","toggleDiscussion","rel","rows","commentText","trim","createPullRequestComment","updatedComments","updatedSummary","submitComment","disabled","getAvatarAltText","name","substring","max","min","_ref","setToken","tokenName","setTokenName","componentLogger","logger","getLogger","React","componentMount","hasOnAuthSuccess","componentUnmount","onSubmit","preventDefault","userAction","tokenProvided","startTime","auth","Octokit","octokit","debug","apiCall","userResponse","rest","users","getAuthenticated","duration","apiResponse","username","data","apiError","autoComplete"],"sourceRoot":""}