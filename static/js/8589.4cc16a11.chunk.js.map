{"version":3,"file":"static/js/8589.4cc16a11.chunk.js","mappings":"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","sources":["components/PersonaViewer.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport githubService from '../services/githubService';\nimport { PageLayout, usePage } from './framework';\nimport './PersonaViewer.css';\n\nconst PersonaViewer = () => {\n  return (\n    <PageLayout pageName=\"persona-viewer\">\n      <PersonaViewerContent />\n    </PageLayout>\n  );\n};\n\nconst PersonaViewerContent = () => {\n  const pageContext = usePage();\n  \n  // All hooks must be called before any early returns\n  const [actors, setActors] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [scanStatus, setScanStatus] = useState('');\n  \n  // Get data from page framework (with null-safe access)\n  const profile = pageContext?.profile;\n  const repository = pageContext?.repository;\n  const branch = pageContext?.branch;\n  const user = profile?.login;\n  const repo = repository?.name;\n  const selectedBranch = branch || repository?.default_branch || 'main';\n\n  // Helper function to parse FSH file content for actor definitions\n  const parseFshFileForActors = useCallback((filePath, content) => {\n    const actors = [];\n    const lines = content.split('\\n');\n    \n    let currentActor = null;\n    let inActorDefinition = false;\n    \n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      \n      // Look for Profile definitions that could be actors\n      if (line.startsWith('Profile:') || line.startsWith('Instance:')) {\n        const id = line.split(':')[1]?.trim();\n        if (id) {\n          // Generous assumption: any instance ID could be an actor\n          currentActor = {\n            id,\n            name: id,\n            description: '',\n            type: 'FSH Profile/Instance',\n            source: {\n              type: 'fsh',\n              path: filePath,\n              lineNumber: i + 1\n            }\n          };\n          inActorDefinition = true;\n        }\n      }\n      \n      // Look for explicit actor-related keywords\n      if (line.includes('ActorDefinition') || line.includes('Actor') || \n          line.toLowerCase().includes('persona') || line.toLowerCase().includes('role')) {\n        if (!currentActor && line.includes(':')) {\n          const parts = line.split(':');\n          const id = parts[parts.length - 1]?.trim();\n          if (id) {\n            currentActor = {\n              id,\n              name: id,\n              description: 'Actor definition found',\n              type: 'FSH Actor',\n              source: {\n                type: 'fsh',\n                path: filePath,\n                lineNumber: i + 1\n              }\n            };\n            inActorDefinition = true;\n          }\n        }\n      }\n      \n      // Extract title and description\n      if (currentActor && inActorDefinition) {\n        if (line.startsWith('Title:')) {\n          currentActor.name = line.split(':')[1]?.trim().replace(/\"/g, '') || currentActor.id;\n        } else if (line.startsWith('Description:')) {\n          currentActor.description = line.split(':')[1]?.trim().replace(/\"/g, '') || '';\n        } else if (line.startsWith('Id:')) {\n          currentActor.id = line.split(':')[1]?.trim() || currentActor.id;\n        }\n        \n        // End of definition (empty line or new definition)\n        if (line === '' || line.startsWith('Profile:') || line.startsWith('Instance:')) {\n          if (currentActor.id && i > 0) {\n            actors.push(currentActor);\n            currentActor = null;\n            inActorDefinition = false;\n          }\n        }\n      }\n    }\n    \n    // Add the last actor if we ended the file while in a definition\n    if (currentActor && currentActor.id) {\n      actors.push(currentActor);\n    }\n    \n    return actors;\n  }, []);\n\n  // Helper function to parse JSON file content for actor definitions\n  const parseJsonFileForActors = useCallback((filePath, content) => {\n    const actors = [];\n    \n    try {\n      const jsonData = JSON.parse(content);\n      \n      // Function to recursively search for actor-like objects\n      const searchForActors = (obj, path = '') => {\n        if (typeof obj !== 'object' || obj === null) return;\n        \n        if (Array.isArray(obj)) {\n          obj.forEach((item, index) => searchForActors(item, `${path}[${index}]`));\n          return;\n        }\n        \n        // Check if this object looks like an actor definition\n        const resourceType = obj.resourceType;\n        const id = obj.id;\n        \n        if (resourceType && id) {\n          // Be generous with actor-like resource types\n          if (resourceType === 'ActorDefinition' || \n              resourceType === 'SGActorDefinition' ||\n              resourceType === 'Persona' ||\n              resourceType === 'SGPersona' ||\n              resourceType.toLowerCase().includes('actor') ||\n              resourceType.toLowerCase().includes('persona')) {\n            \n            actors.push({\n              id: id,\n              name: obj.name || obj.title || id,\n              description: obj.description || `${resourceType} resource`,\n              type: `JSON ${resourceType}`,\n              source: {\n                type: 'json',\n                path: filePath,\n                resourceType: resourceType,\n                fullPath: path\n              }\n            });\n          }\n        }\n        \n        // Recursively search nested objects\n        Object.keys(obj).forEach(key => {\n          searchForActors(obj[key], path ? `${path}.${key}` : key);\n        });\n      };\n      \n      searchForActors(jsonData);\n      \n    } catch (parseError) {\n      console.warn(`Failed to parse JSON file ${filePath}:`, parseError);\n    }\n    \n    return actors;\n  }, []);\n\n  // Scan the repository for actor definitions\n  const scanForActors = useCallback(async () => {\n    if (!githubService.isAuth() || !user || !repo) {\n      setError('GitHub authentication required and repository information needed');\n      setLoading(false);\n      return;\n    }\n\n    setScanStatus('Starting scan...');\n    setActors([]);\n    \n    try {\n      const allActors = [];\n      \n      // 1. Scan FSH files under input/fsh/actors\n      setScanStatus('Scanning FSH files in input/fsh/actors...');\n      try {\n        const actorsDir = await githubService.getDirectoryContents(user, repo, 'input/fsh/actors', selectedBranch);\n        \n        for (const file of actorsDir) {\n          if (file.type === 'file' && file.name.endsWith('.fsh')) {\n            setScanStatus(`Scanning FSH file: ${file.name}`);\n            try {\n              const content = await githubService.getFileContent(user, repo, file.path, selectedBranch);\n              const fshActors = parseFshFileForActors(file.path, content);\n              allActors.push(...fshActors);\n            } catch (fileError) {\n              console.warn(`Failed to read FSH file ${file.path}:`, fileError);\n            }\n          }\n        }\n      } catch (dirError) {\n        console.warn('No input/fsh/actors directory found or access denied:', dirError);\n      }\n      \n      // 2. Scan JSON files under inputs/resources\n      setScanStatus('Scanning JSON files in inputs/resources...');\n      try {\n        const resourcesDir = await githubService.getDirectoryContents(user, repo, 'inputs/resources', selectedBranch);\n        \n        for (const file of resourcesDir) {\n          if (file.type === 'file' && file.name.endsWith('.json')) {\n            setScanStatus(`Scanning JSON file: ${file.name}`);\n            try {\n              const content = await githubService.getFileContent(user, repo, file.path, selectedBranch);\n              const jsonActors = parseJsonFileForActors(file.path, content);\n              allActors.push(...jsonActors);\n            } catch (fileError) {\n              console.warn(`Failed to read JSON file ${file.path}:`, fileError);\n            }\n          }\n        }\n      } catch (dirError) {\n        console.warn('No inputs/resources directory found or access denied:', dirError);\n      }\n      \n      setScanStatus(`Scan complete. Found ${allActors.length} actors.`);\n      setActors(allActors);\n      setError(null);\n      \n    } catch (error) {\n      console.error('Error scanning for actors:', error);\n      setError(`Failed to scan repository: ${error.message}`);\n      setScanStatus('Scan failed');\n    } finally {\n      setLoading(false);\n    }\n  }, [user, repo, selectedBranch, parseFshFileForActors, parseJsonFileForActors]);\n\n  // Initial scan when component mounts\n  useEffect(() => {\n    if (user && repo) {\n      scanForActors();\n    } else {\n      setLoading(false);\n      setError('Repository information not available');\n    }\n  }, [user, repo, selectedBranch, scanForActors]);\n\n  // Helper function to generate source file link\n  const getSourceFileLink = useCallback((actor) => {\n    if (!user || !repo || !actor.source) return '#';\n    \n    const baseUrl = `https://github.com/${user}/${repo}/blob/${selectedBranch}/${actor.source.path}`;\n    \n    if (actor.source.lineNumber) {\n      return `${baseUrl}#L${actor.source.lineNumber}`;\n    }\n    \n    return baseUrl;\n  }, [user, repo, selectedBranch]);\n\n  // Handle case where PageProvider context might be null - AFTER all hooks\n  if (!pageContext) {\n    return (\n      <div className=\"persona-viewer\">\n        <div className=\"page-header\">\n          <h1>Generic Personas & Actor Definitions</h1>\n          <p className=\"page-description\">\n            Initializing page context...\n          </p>\n        </div>\n        <div className=\"main-content\">\n          <div className=\"error-message\">\n            <h2>Loading</h2>\n            <p>Page framework is initializing. Please wait...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"persona-viewer\">\n        <div className=\"loading-state\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading user scenarios and personas...</p>\n          {scanStatus && <p className=\"scan-status\">{scanStatus}</p>}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"persona-viewer\">\n        <div className=\"error-state\">\n          <h2>Error</h2>\n          <p>{error}</p>\n          {user && repo && (\n            <button onClick={scanForActors} className=\"retry-button\">\n              Retry Scan\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"persona-viewer\">\n      <div className=\"page-header\">\n        <h1>Generic Personas & Actor Definitions</h1>\n        <p className=\"page-description\">\n          Actor definitions and personas found in this DAK repository for healthcare workflows.\n        </p>\n        {user && repo && (\n          <div className=\"repository-info\">\n            <strong>Repository:</strong> {user}/{repo} \n            <span className=\"branch-info\">(branch: {selectedBranch})</span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"scan-controls\">\n        <button onClick={scanForActors} className=\"rescan-button\" disabled={loading}>\n          {loading ? 'Scanning...' : 'Rescan Repository'}\n        </button>\n        {scanStatus && <p className=\"scan-status\">{scanStatus}</p>}\n      </div>\n\n      <div className=\"actors-summary\">\n        <h2>Found Personas & Actors ({actors.length})</h2>\n        {actors.length === 0 ? (\n          <div className=\"no-actors\">\n            <p>No actor definitions or personas found in this repository.</p>\n            <div className=\"search-info\">\n              <h3>Searched in:</h3>\n              <ul>\n                <li><code>input/fsh/actors/*.fsh</code> - FSH actor definitions (generous matching)</li>\n                <li><code>inputs/resources/*.json</code> - JSON ActorDefinition resources (strict matching)</li>\n              </ul>\n            </div>\n          </div>\n        ) : (\n          <div className=\"actors-list\">\n            {actors.map((actor, index) => (\n              <div key={index} className=\"actor-card\">\n                <div className=\"actor-header\">\n                  <h3 className=\"actor-name\">{actor.name}</h3>\n                  <span className={`actor-type ${actor.source.type}`}>\n                    {actor.type}\n                  </span>\n                </div>\n                \n                <div className=\"actor-details\">\n                  <p className=\"actor-id\"><strong>ID:</strong> {actor.id}</p>\n                  {actor.description && (\n                    <p className=\"actor-description\">{actor.description}</p>\n                  )}\n                </div>\n                \n                <div className=\"actor-source\">\n                  <p className=\"source-path\">\n                    <strong>Source:</strong> \n                    <a \n                      href={getSourceFileLink(actor)} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"source-link\"\n                    >\n                      {actor.source.path}\n                      {actor.source.lineNumber && ` (line ${actor.source.lineNumber})`}\n                    </a>\n                  </p>\n                  {actor.source.resourceType && (\n                    <p className=\"resource-type\">\n                      <strong>Resource Type:</strong> {actor.source.resourceType}\n                    </p>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PersonaViewer;"],"names":["PersonaViewerContent","pageContext","usePage","actors","setActors","useState","loading","setLoading","error","setError","scanStatus","setScanStatus","profile","repository","branch","user","login","repo","name","selectedBranch","default_branch","parseFshFileForActors","useCallback","filePath","content","lines","split","currentActor","inActorDefinition","i","length","line","trim","startsWith","_line$split$","id","description","type","source","path","lineNumber","includes","toLowerCase","_parts","parts","_line$split$2","replace","_line$split$3","_line$split$4","push","parseJsonFileForActors","jsonData","JSON","parse","searchForActors","obj","arguments","undefined","Array","isArray","forEach","item","index","concat","resourceType","title","fullPath","Object","keys","key","parseError","console","warn","scanForActors","async","githubService","isAuth","allActors","actorsDir","getDirectoryContents","file","endsWith","getFileContent","fshActors","fileError","dirError","resourcesDir","jsonActors","message","useEffect","getSourceFileLink","actor","baseUrl","_jsx","className","children","_jsxs","onClick","disabled","map","href","target","rel","PersonaViewer","PageLayout","pageName"],"sourceRoot":""}