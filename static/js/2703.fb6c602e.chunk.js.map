{"version":3,"file":"static/js/2703.fb6c602e.chunk.js","mappings":"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","sources":["dak/faq/questions/component/businessProcess/BusinessProcessWorkflowsQuestion.js"],"sourcesContent":["/**\n * Business Process Workflows Question Component\n * Scans BPMN diagrams and extracts workflow information\n */\n\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { QuestionDefinition, QuestionResult, CacheHint, QuestionLevel, ParameterDefinition } from '../../../types/QuestionDefinition.js';\n\n// Use browser DOMParser when available\nconst getDOMParser = () => {\n  if (typeof DOMParser !== 'undefined') {\n    return DOMParser;\n  } else {\n    throw new Error('DOMParser not available (browser environment required for BPMN parsing)');\n  }\n};\n\n// Question metadata\nexport const metadata = new QuestionDefinition({\n  id: 'business-process-workflows',\n  level: QuestionLevel.COMPONENT,\n  title: 'Business Process Workflows',\n  description: 'Scans BPMN diagrams and extracts workflow definitions with @name attributes',\n  parameters: [\n    new ParameterDefinition({\n      name: 'bpmnDirectory',\n      type: 'string',\n      required: false,\n      defaultValue: 'input/images',\n      description: 'Directory containing BPMN files'\n    }),\n    new ParameterDefinition({\n      name: 'includeSubprocesses',\n      type: 'boolean',\n      required: false,\n      defaultValue: true,\n      description: 'Whether to include subprocess definitions'\n    })\n  ],\n  tags: ['component', 'business-process', 'workflows', 'bpmn'],\n  version: '1.0.0',\n  componentTypes: ['businessProcess']\n});\n\n/**\n * Execute the business process workflows question\n * @param {Object} input - Question input parameters\n * @param {string} input.repository - Repository identifier\n * @param {string} input.locale - Locale for response\n * @param {string} input.branch - Git branch\n * @param {string} input.bpmnDirectory - Directory containing BPMN files\n * @param {boolean} input.includeSubprocesses - Whether to include subprocesses\n * @param {Storage} input.storage - Storage interface\n * @returns {Promise<QuestionResult>} - Question result\n */\nexport async function execute(input) {\n  const { \n    locale = 'en_US', \n    bpmnDirectory = 'input/images',\n    includeSubprocesses = true,\n    storage \n  } = input;\n  \n  const warnings = [];\n  const errors = [];\n  const workflows = [];\n\n  try {\n    // Find BPMN files in the specified directory\n    const bpmnFiles = await storage.listFiles(`${bpmnDirectory}/*.bpmn`);\n    \n    if (bpmnFiles.length === 0) {\n      warnings.push(getLocalizedError(locale, 'no_bpmn_files', { directory: bpmnDirectory }));\n    }\n\n    // Process each BPMN file\n    for (const bpmnFile of bpmnFiles) {\n      try {\n        const bpmnContent = await storage.readFile(bpmnFile);\n        const workflow = await parseBpmnWorkflow(bpmnContent.toString('utf-8'), bpmnFile, includeSubprocesses);\n        if (workflow) {\n          workflows.push(workflow);\n        }\n      } catch (error) {\n        errors.push(getLocalizedError(locale, 'parse_error', { file: bpmnFile, error: error.message }));\n      }\n    }\n\n    // Extract summary statistics\n    const stats = {\n      totalWorkflows: workflows.length,\n      totalProcesses: workflows.reduce((sum, w) => sum + (w.processes?.length || 0), 0),\n      totalSubprocesses: workflows.reduce((sum, w) => sum + (w.subprocesses?.length || 0), 0),\n      totalTasks: workflows.reduce((sum, w) => sum + (w.tasks?.length || 0), 0)\n    };\n\n    return new QuestionResult({\n      structured: { \n        workflows,\n        statistics: stats,\n        bpmnDirectory,\n        filesScanned: bpmnFiles.length\n      },\n      narrative: getLocalizedNarrative(locale, 'success', { workflows, stats }),\n      warnings,\n      errors,\n      meta: {\n        cacheHint: new CacheHint({\n          scope: 'repository',\n          key: `business-process-workflows-${bpmnDirectory}`,\n          ttl: 1800, // 30 minutes\n          dependencies: bpmnFiles\n        })\n      }\n    });\n\n  } catch (error) {\n    return new QuestionResult({\n      structured: { workflows: [], statistics: {} },\n      narrative: getLocalizedNarrative(locale, 'error'),\n      errors: [getLocalizedError(locale, 'general_error', { error: error.message })],\n      meta: {\n        cacheHint: new CacheHint({\n          scope: 'repository',\n          key: `business-process-workflows-${bpmnDirectory}`,\n          ttl: 60, // Short cache on error\n          dependencies: []\n        })\n      }\n    });\n  }\n}\n\n/**\n * Parse BPMN workflow from XML content\n * @param {string} bpmnContent - BPMN XML content\n * @param {string} fileName - File name for reference\n * @param {boolean} includeSubprocesses - Whether to include subprocesses\n * @returns {Object} - Parsed workflow information\n */\nasync function parseBpmnWorkflow(bpmnContent, fileName, includeSubprocesses) {\n  try {\n    const DOMParserClass = getDOMParser();\n    const parser = new DOMParserClass();\n    const doc = parser.parseFromString(bpmnContent, 'text/xml');\n    \n    // Check for parsing errors\n    const parseError = doc.getElementsByTagName('parsererror')[0];\n    if (parseError) {\n      throw new Error(`XML parsing error: ${parseError.textContent}`);\n    }\n\n    // Extract workflow information\n    const workflow = {\n      fileName,\n      processes: [],\n      subprocesses: [],\n      tasks: [],\n      name: null,\n      description: null\n    };\n\n    // Find all process elements\n    const processes = doc.getElementsByTagNameNS('*', 'process') || doc.getElementsByTagName('process');\n    for (let i = 0; i < processes.length; i++) {\n      const process = processes[i];\n      const processInfo = {\n        id: process.getAttribute('id'),\n        name: process.getAttribute('name') || extractNameFromDocumentation(process),\n        isExecutable: process.getAttribute('isExecutable') === 'true',\n        type: 'process'\n      };\n\n      if (processInfo.name && processInfo.name.includes('@name')) {\n        // Extract @name attribute value\n        const nameMatch = processInfo.name.match(/@name\\s*=\\s*[\"']([^\"']+)[\"']/);\n        if (nameMatch) {\n          processInfo.extractedName = nameMatch[1];\n        }\n      }\n\n      workflow.processes.push(processInfo);\n\n      // Set workflow name from first named process\n      if (!workflow.name && processInfo.name) {\n        workflow.name = processInfo.extractedName || processInfo.name;\n      }\n    }\n\n    // Find subprocess elements if requested\n    if (includeSubprocesses) {\n      const subprocesses = doc.getElementsByTagNameNS('*', 'subProcess') || doc.getElementsByTagName('subProcess');\n      for (let i = 0; i < subprocesses.length; i++) {\n        const subprocess = subprocesses[i];\n        const subprocessInfo = {\n          id: subprocess.getAttribute('id'),\n          name: subprocess.getAttribute('name') || extractNameFromDocumentation(subprocess),\n          type: 'subprocess'\n        };\n\n        if (subprocessInfo.name && subprocessInfo.name.includes('@name')) {\n          const nameMatch = subprocessInfo.name.match(/@name\\s*=\\s*[\"']([^\"']+)[\"']/);\n          if (nameMatch) {\n            subprocessInfo.extractedName = nameMatch[1];\n          }\n        }\n\n        workflow.subprocesses.push(subprocessInfo);\n      }\n    }\n\n    // Find task elements\n    const taskTypes = ['task', 'userTask', 'serviceTask', 'scriptTask', 'manualTask', 'businessRuleTask'];\n    for (const taskType of taskTypes) {\n      const tasks = doc.getElementsByTagNameNS('*', taskType) || doc.getElementsByTagName(taskType);\n      for (let i = 0; i < tasks.length; i++) {\n        const task = tasks[i];\n        const taskInfo = {\n          id: task.getAttribute('id'),\n          name: task.getAttribute('name') || extractNameFromDocumentation(task),\n          type: taskType\n        };\n\n        workflow.tasks.push(taskInfo);\n      }\n    }\n\n    return workflow;\n\n  } catch (error) {\n    throw new Error(`Failed to parse BPMN file ${fileName}: ${error.message}`);\n  }\n}\n\n/**\n * Extract name from documentation element\n * @param {Element} element - BPMN element\n * @returns {string|null} - Extracted name or null\n */\nfunction extractNameFromDocumentation(element) {\n  const documentation = element.getElementsByTagNameNS('*', 'documentation')[0] || \n                       element.getElementsByTagName('documentation')[0];\n  \n  if (documentation && documentation.textContent) {\n    const text = documentation.textContent.trim();\n    // Look for @name pattern in documentation\n    const nameMatch = text.match(/@name\\s*=\\s*[\"']([^\"']+)[\"']/);\n    if (nameMatch) {\n      return nameMatch[1];\n    }\n    return text.length > 0 ? text : null;\n  }\n  \n  return null;\n}\n\n/**\n * React component for rendering workflows narrative\n */\nexport function Render({ result, locale = 'en_US' }) {\n  const { t } = useTranslation();\n\n  if (!result || !result.structured) {\n    return <div className=\"faq-answer error\">{t('dak.faq.workflows.no_data')}</div>;\n  }\n\n  const { workflows, statistics, bpmnDirectory, filesScanned } = result.structured;\n\n  return (\n    <div className=\"faq-answer success\">\n      <h4>{t('dak.faq.workflows.title')}</h4>\n      \n      <div className=\"workflow-summary\">\n        <p>\n          <strong>{t('dak.faq.workflows.scanned_files')}: </strong>\n          {filesScanned} files in <code>{bpmnDirectory}</code>\n        </p>\n        \n        {statistics && (\n          <div className=\"workflow-stats\">\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">{t('dak.faq.workflows.total_workflows')}: </span>\n              <span className=\"stat-value\">{statistics.totalWorkflows}</span>\n            </div>\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">{t('dak.faq.workflows.total_processes')}: </span>\n              <span className=\"stat-value\">{statistics.totalProcesses}</span>\n            </div>\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">{t('dak.faq.workflows.total_subprocesses')}: </span>\n              <span className=\"stat-value\">{statistics.totalSubprocesses}</span>\n            </div>\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">{t('dak.faq.workflows.total_tasks')}: </span>\n              <span className=\"stat-value\">{statistics.totalTasks}</span>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {workflows.length > 0 && (\n        <div className=\"workflows-list\">\n          <h5>{t('dak.faq.workflows.workflows_found')}</h5>\n          {workflows.map((workflow, index) => (\n            <div key={index} className=\"workflow-item\">\n              <div className=\"workflow-header\">\n                <strong>{workflow.name || workflow.fileName}</strong>\n                <small className=\"file-name\">({workflow.fileName})</small>\n              </div>\n              \n              {workflow.processes.length > 0 && (\n                <div className=\"workflow-processes\">\n                  <strong>{t('dak.faq.workflows.processes')}: </strong>\n                  <ul>\n                    {workflow.processes.map((process, pIndex) => (\n                      <li key={pIndex}>\n                        {process.extractedName || process.name || process.id}\n                        {process.isExecutable && <span className=\"executable-badge\">Executable</span>}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              {workflow.subprocesses.length > 0 && (\n                <div className=\"workflow-subprocesses\">\n                  <strong>{t('dak.faq.workflows.subprocesses')}: </strong>\n                  <ul>\n                    {workflow.subprocesses.map((subprocess, sIndex) => (\n                      <li key={sIndex}>\n                        {subprocess.extractedName || subprocess.name || subprocess.id}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {result.warnings?.map((warning, index) => (\n        <div key={index} className=\"warning-message\">{warning}</div>\n      ))}\n      \n      {result.errors?.map((error, index) => (\n        <div key={index} className=\"error-message\">{error}</div>\n      ))}\n    </div>\n  );\n}\n\n/**\n * Get localized narrative text\n */\nfunction getLocalizedNarrative(locale, type, params = {}) {\n  const narratives = {\n    en_US: {\n      success: (() => {\n        const { workflows, stats } = params;\n        let html = `<h4>Business Process Workflows</h4>`;\n        \n        if (workflows.length === 0) {\n          html += `<p>No workflows found in BPMN files.</p>`;\n        } else {\n          html += `<p>Found <strong>${workflows.length}</strong> workflow(s) with <strong>${stats.totalProcesses}</strong> process(es).</p>`;\n          html += `<ul>`;\n          workflows.forEach(workflow => {\n            html += `<li><strong>${workflow.name || workflow.fileName}</strong> - ${workflow.processes.length} process(es)</li>`;\n          });\n          html += `</ul>`;\n        }\n        \n        return html;\n      })(),\n      error: `<h4>Business Process Workflows</h4><p class=\"error\">An error occurred while scanning BPMN files.</p>`\n    },\n    fr_FR: {\n      success: (() => {\n        const { workflows, stats } = params;\n        let html = `<h4>Flux de processus métier</h4>`;\n        \n        if (workflows.length === 0) {\n          html += `<p>Aucun flux de travail trouvé dans les fichiers BPMN.</p>`;\n        } else {\n          html += `<p>Trouvé <strong>${workflows.length}</strong> flux de travail avec <strong>${stats.totalProcesses}</strong> processus.</p>`;\n          html += `<ul>`;\n          workflows.forEach(workflow => {\n            html += `<li><strong>${workflow.name || workflow.fileName}</strong> - ${workflow.processes.length} processus</li>`;\n          });\n          html += `</ul>`;\n        }\n        \n        return html;\n      })(),\n      error: `<h4>Flux de processus métier</h4><p class=\"error\">Une erreur s'est produite lors de l'analyse des fichiers BPMN.</p>`\n    },\n    es_ES: {\n      success: (() => {\n        const { workflows, stats } = params;\n        let html = `<h4>Flujos de procesos de negocio</h4>`;\n        \n        if (workflows.length === 0) {\n          html += `<p>No se encontraron flujos de trabajo en los archivos BPMN.</p>`;\n        } else {\n          html += `<p>Se encontraron <strong>${workflows.length}</strong> flujo(s) de trabajo con <strong>${stats.totalProcesses}</strong> proceso(s).</p>`;\n          html += `<ul>`;\n          workflows.forEach(workflow => {\n            html += `<li><strong>${workflow.name || workflow.fileName}</strong> - ${workflow.processes.length} proceso(s)</li>`;\n          });\n          html += `</ul>`;\n        }\n        \n        return html;\n      })(),\n      error: `<h4>Flujos de procesos de negocio</h4><p class=\"error\">Ocurrió un error al escanear los archivos BPMN.</p>`\n    }\n  };\n\n  const localeData = narratives[locale] || narratives['en_US'];\n  return localeData[type] || localeData.error;\n}\n\n/**\n * Get localized error message\n */\nfunction getLocalizedError(locale, type, params = {}) {\n  const errors = {\n    en_US: {\n      no_bpmn_files: `No BPMN files found in directory: ${params.directory}`,\n      parse_error: `Failed to parse BPMN file ${params.file}: ${params.error}`,\n      general_error: `Error scanning business processes: ${params.error}`\n    },\n    fr_FR: {\n      no_bpmn_files: `Aucun fichier BPMN trouvé dans le répertoire: ${params.directory}`,\n      parse_error: `Échec de l'analyse du fichier BPMN ${params.file}: ${params.error}`,\n      general_error: `Erreur lors de l'analyse des processus métier: ${params.error}`\n    },\n    es_ES: {\n      no_bpmn_files: `No se encontraron archivos BPMN en el directorio: ${params.directory}`,\n      parse_error: `Error al analizar el archivo BPMN ${params.file}: ${params.error}`,\n      general_error: `Error al escanear procesos de negocio: ${params.error}`\n    }\n  };\n\n  const localeData = errors[locale] || errors['en_US'];\n  return localeData[type] || `Unknown error: ${type}`;\n}"],"names":["getDOMParser","DOMParser","Error","metadata","QuestionDefinition","id","level","QuestionLevel","COMPONENT","title","description","parameters","ParameterDefinition","name","type","required","defaultValue","tags","version","componentTypes","async","execute","input","locale","bpmnDirectory","includeSubprocesses","storage","warnings","errors","workflows","bpmnFiles","listFiles","concat","length","push","getLocalizedError","directory","bpmnFile","bpmnContent","readFile","workflow","parseBpmnWorkflow","toString","error","file","message","stats","totalWorkflows","totalProcesses","reduce","sum","w","_w$processes","processes","totalSubprocesses","_w$subprocesses","subprocesses","totalTasks","_w$tasks","tasks","QuestionResult","structured","statistics","filesScanned","narrative","getLocalizedNarrative","meta","cacheHint","CacheHint","scope","key","ttl","dependencies","fileName","DOMParserClass","doc","parseFromString","parseError","getElementsByTagName","textContent","getElementsByTagNameNS","i","process","processInfo","getAttribute","extractNameFromDocumentation","isExecutable","includes","nameMatch","match","extractedName","subprocess","subprocessInfo","taskTypes","taskType","task","taskInfo","element","documentation","text","trim","Render","_ref","_result$warnings","_result$errors","result","t","useTranslation","_jsx","className","children","_jsxs","map","index","pIndex","sIndex","warning","params","arguments","undefined","narratives","en_US","success","html","forEach","fr_FR","es_ES","localeData","no_bpmn_files","parse_error","general_error"],"sourceRoot":""}