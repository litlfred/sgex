{"version":3,"file":"static/js/9634.ffe4a3f0.chunk.js","mappings":"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","sources":["components/OrganizationSelection.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport { PageLayout } from './framework';\n\nconst OrganizationSelection = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [organizations, setOrganizations] = useState([]);\n  const [selectedOrganization, setSelectedOrganization] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [includePersonal, setIncludePersonal] = useState(true);\n  \n  const { profile, sourceRepository, action } = location.state || {};\n\n  const getActionConfig = () => {\n    switch (action) {\n      case 'fork':\n        return {\n          title: 'Select Destination for Fork',\n          description: `Choose where to create a fork of \"${sourceRepository?.name}\".`,\n          buttonText: 'Fork Repository',\n          nextRoute: '/dashboard'\n        };\n      case 'create':\n        return {\n          title: 'Select Destination for New DAK',\n          description: `Choose where to create your new DAK based on \"${sourceRepository?.name}\".`,\n          buttonText: 'Continue to Configuration',\n          nextRoute: '/dak-configuration'\n        };\n      default:\n        return {\n          title: 'Select Organization',\n          description: 'Choose an organization for your DAK.',\n          buttonText: 'Continue',\n          nextRoute: '/dashboard'\n        };\n    }\n  };\n\n  const fetchOrganizations = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      let orgsData = [];\n      \n      if (githubService.isAuth()) {\n        orgsData = await githubService.getUserOrganizations();\n      } else {\n        // Fallback to mock organizations for demonstration\n        orgsData = await getMockOrganizations();\n      }\n      \n      // Always ensure WHO organization is included with fresh data\n      try {\n        const whoOrganization = await githubService.getWHOOrganization();\n        \n        // Check if WHO organization is already in the list\n        const whoIndex = orgsData.findIndex(org => org.login === 'WorldHealthOrganization');\n        \n        if (whoIndex >= 0) {\n          // Replace existing WHO org with fresh data\n          orgsData[whoIndex] = { ...orgsData[whoIndex], ...whoOrganization };\n        } else {\n          // Add WHO organization at the beginning of the list\n          orgsData.unshift(whoOrganization);\n        }\n      } catch (whoError) {\n        console.warn('Could not fetch WHO organization data, using fallback:', whoError);\n        \n        // Fallback to hardcoded WHO organization\n        const whoOrganization = {\n          id: 'who-organization',\n          login: 'WorldHealthOrganization',\n          display_name: 'World Health Organization',\n          description: 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n          avatar_url: 'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',\n          html_url: 'https://github.com/WorldHealthOrganization',\n          type: 'Organization',\n          permissions: {\n            can_create_repositories: true,\n            can_create_private_repositories: true\n          },\n          plan: {\n            name: 'Organization',\n            private_repos: 'unlimited'\n          },\n          isWHO: true\n        };\n        \n        // Check if WHO organization is already in the list\n        const hasWHO = orgsData.some(org => org.login === 'WorldHealthOrganization');\n        \n        if (!hasWHO) {\n          // Add WHO organization at the beginning of the list\n          orgsData.unshift(whoOrganization);\n        }\n      }\n      \n      setOrganizations(orgsData);\n    } catch (error) {\n      console.error('Error fetching organizations:', error);\n      setError('Failed to fetch organizations. Please check your connection and try again.');\n      // Fallback to mock data for demonstration (which includes WHO)\n      try {\n        const mockOrgs = await getMockOrganizations();\n        setOrganizations(mockOrgs);\n      } catch (mockError) {\n        // Ultimate fallback with hardcoded data\n        setOrganizations([{\n          id: 'who-organization',\n          login: 'WorldHealthOrganization',\n          display_name: 'World Health Organization',\n          description: 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n          avatar_url: 'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',\n          html_url: 'https://github.com/WorldHealthOrganization',\n          type: 'Organization',\n          permissions: {\n            can_create_repositories: true,\n            can_create_private_repositories: true\n          },\n          plan: {\n            name: 'Organization',\n            private_repos: 'unlimited'\n          },\n          isWHO: true\n        }]);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const getMockOrganizations = async () => {\n    try {\n      // Try to get fresh WHO data even in mock mode\n      const whoOrganization = await githubService.getWHOOrganization();\n      \n      return [\n        whoOrganization,\n        {\n          id: 1,\n          login: 'my-health-org',\n          display_name: 'My Health Organization',\n          description: 'Healthcare technology organization focused on digital health solutions',\n          avatar_url: 'https://avatars.githubusercontent.com/u/1?s=200&v=4',\n          html_url: 'https://github.com/my-health-org',\n          type: 'Organization',\n          permissions: {\n            can_create_repositories: true,\n            can_create_private_repositories: true\n          },\n          plan: {\n            name: 'Team',\n            private_repos: 10\n          }\n        },\n        {\n          id: 2,\n          login: 'global-health-initiative',\n          display_name: 'Global Health Initiative',\n          description: 'International organization working on global health standards',\n          avatar_url: 'https://avatars.githubusercontent.com/u/2?s=200&v=4',\n          html_url: 'https://github.com/global-health-initiative',\n          type: 'Organization',\n          permissions: {\n            can_create_repositories: true,\n            can_create_private_repositories: false\n          },\n          plan: {\n            name: 'Free',\n            private_repos: 0\n          }\n        }\n      ];\n    } catch (error) {\n      console.warn('Could not fetch WHO data for mock organizations, using fallback:', error);\n      // Return original hardcoded mock data\n      return [\n        {\n          id: 'who-organization',\n          login: 'WorldHealthOrganization',\n          display_name: 'World Health Organization',\n          description: 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n          avatar_url: 'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',\n          html_url: 'https://github.com/WorldHealthOrganization',\n          type: 'Organization',\n          permissions: {\n            can_create_repositories: true,\n            can_create_private_repositories: true\n          },\n          plan: {\n            name: 'Organization',\n            private_repos: 'unlimited'\n          },\n          isWHO: true\n        },\n        {\n          id: 1,\n          login: 'my-health-org',\n          display_name: 'My Health Organization',\n          description: 'Healthcare technology organization focused on digital health solutions',\n          avatar_url: 'https://avatars.githubusercontent.com/u/1?s=200&v=4',\n          html_url: 'https://github.com/my-health-org',\n          type: 'Organization',\n          permissions: {\n            can_create_repositories: true,\n            can_create_private_repositories: true\n          },\n          plan: {\n            name: 'Team',\n            private_repos: 10\n          }\n        },\n        {\n          id: 2,\n          login: 'global-health-initiative',\n          display_name: 'Global Health Initiative',\n          description: 'International organization working on global health standards',\n          avatar_url: 'https://avatars.githubusercontent.com/u/2?s=200&v=4',\n          html_url: 'https://github.com/global-health-initiative',\n          type: 'Organization',\n          permissions: {\n            can_create_repositories: true,\n            can_create_private_repositories: false\n          },\n          plan: {\n            name: 'Free',\n            private_repos: 0\n          }\n        }\n      ];\n    }\n  };\n\n  useEffect(() => {\n    if (!profile || !sourceRepository || !action) {\n      navigate('/');\n      return;\n    }\n    \n    fetchOrganizations();\n  }, [profile, sourceRepository, action, navigate, fetchOrganizations]);\n\n  const handleOrganizationSelect = (org) => {\n    setSelectedOrganization(org);\n  };\n\n  const handleContinue = () => {\n    if (!selectedOrganization) {\n      alert('Please select an organization to continue');\n      return;\n    }\n\n    const config = getActionConfig();\n    \n    if (action === 'fork') {\n      // For fork, go directly to dashboard after forking\n      navigate(config.nextRoute, {\n        state: {\n          profile,\n          repository: {\n            ...sourceRepository,\n            // Update repository info to reflect the fork destination\n            full_name: `${selectedOrganization.login}/${sourceRepository.name}`,\n            html_url: `https://github.com/${selectedOrganization.login}/${sourceRepository.name}`,\n            owner: selectedOrganization\n          },\n          sourceRepository,\n          destinationOrganization: selectedOrganization,\n          action\n        }\n      });\n    } else if (action === 'create') {\n      // For create, go to DAK configuration\n      navigate(config.nextRoute, {\n        state: {\n          profile,\n          templateRepository: sourceRepository,\n          destinationOrganization: selectedOrganization,\n          action\n        }\n      });\n    }\n  };\n\n  const handleBack = () => {\n    navigate(`/dak-selection/${profile.login}`, { \n      state: { profile, action } \n    });\n  };\n\n  const config = getActionConfig();\n  \n  // Create combined list of options\n  const allOptions = [];\n  \n  if (includePersonal) {\n    allOptions.push({\n      ...profile,\n      type: 'User',\n      display_name: profile.name || profile.login,\n      description: 'Your personal GitHub account',\n      permissions: {\n        can_create_repositories: true,\n        can_create_private_repositories: true\n      },\n      isPersonal: true\n    });\n  }\n  \n  allOptions.push(...organizations);\n\n  return (\n    <PageLayout pageName=\"organization-selection\">\n      {!profile || !sourceRepository || !action ? (\n        <div>Redirecting...</div>\n      ) : (\n        <div className=\"org-content\">\n        <div className=\"breadcrumb\">\n          <button onClick={() => navigate('/')} className=\"breadcrumb-link\">\n            Select Profile\n          </button>\n          <span className=\"breadcrumb-separator\">›</span>\n          <button onClick={() => navigate('/dak-action', { state: { profile } })} className=\"breadcrumb-link\">\n            Choose DAK Action\n          </button>\n          <span className=\"breadcrumb-separator\">›</span>\n          <button onClick={handleBack} className=\"breadcrumb-link\">\n            Select DAK\n          </button>\n          <span className=\"breadcrumb-separator\">›</span>\n          <span className=\"breadcrumb-current\">Select Organization</span>\n        </div>\n\n        <div className=\"org-main\">\n          <div className=\"org-intro\">\n            <h2>{config.title}</h2>\n            <p>{config.description}</p>\n            \n            {sourceRepository && (\n              <div className=\"source-repo-info\">\n                <span className=\"repo-label\">Source Repository:</span>\n                <div className=\"repo-badge\">\n                  <span className=\"repo-name\">{sourceRepository.name}</span>\n                  <span className=\"repo-owner\">@{sourceRepository.full_name?.split('/')[0]}</span>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"options-section\">\n            <div className=\"include-personal\">\n              <label className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  checked={includePersonal}\n                  onChange={(e) => setIncludePersonal(e.target.checked)}\n                />\n                <span>Include my personal account as an option</span>\n              </label>\n            </div>\n\n            {loading ? (\n              <div className=\"loading\">\n                <div className=\"spinner\"></div>\n                <p>Loading organizations...</p>\n              </div>\n            ) : error ? (\n              <div className=\"error-state\">\n                <h3>Error loading organizations</h3>\n                <p>{error}</p>\n                <button onClick={fetchOrganizations} className=\"retry-btn\">\n                  Try Again\n                </button>\n              </div>\n            ) : allOptions.length === 0 ? (\n              <div className=\"empty-state\">\n                <h3>No organizations available</h3>\n                <p>Enable personal account option or join organizations to see options here.</p>\n              </div>\n            ) : (\n              <>\n                <div className=\"org-grid\">\n                  {allOptions.map((org) => (\n                    <div \n                      key={`${org.type}-${org.id}`}\n                      className={`org-card ${selectedOrganization?.id === org.id && selectedOrganization?.type === org.type ? 'selected' : ''} ${org.isPersonal ? 'personal' : ''} ${org.isWHO ? 'who-org' : ''}`}\n                      onClick={() => handleOrganizationSelect(org)}\n                    >\n                      <div className=\"org-header-info\">\n                        <img \n                          src={org.avatar_url || `https://github.com/${org.login}.png`} \n                          alt={`${org.display_name || org.login} avatar`}\n                          className=\"org-avatar\"\n                        />\n                        <div className=\"org-details\">\n                          <h3>{org.display_name || org.login}</h3>\n                          <p className=\"org-login\">@{org.login}</p>\n                          {org.isPersonal && <span className=\"personal-badge\">Personal</span>}\n                          {org.isWHO && <span className=\"who-badge\">WHO Official</span>}\n                        </div>\n                      </div>\n                      \n                      <p className=\"org-description\">{org.description || 'No description available'}</p>\n                      \n                      <div className=\"org-permissions\">\n                        <div className=\"permission-item\">\n                          <span className={`permission-icon ${org.permissions?.can_create_repositories ? 'allowed' : 'denied'}`}>\n                            {org.permissions?.can_create_repositories ? '✓' : '✗'}\n                          </span>\n                          <span>Create repositories</span>\n                        </div>\n                        <div className=\"permission-item\">\n                          <span className={`permission-icon ${org.permissions?.can_create_private_repositories ? 'allowed' : 'denied'}`}>\n                            {org.permissions?.can_create_private_repositories ? '✓' : '✗'}\n                          </span>\n                          <span>Create private repositories</span>\n                        </div>\n                      </div>\n\n                      {org.plan && (\n                        <div className=\"org-plan\">\n                          <span className=\"plan-name\">{org.plan.name} Plan</span>\n                          {org.plan.private_repos !== undefined && (\n                            <span className=\"plan-repos\">{org.plan.private_repos} private repos</span>\n                          )}\n                        </div>\n                      )}\n\n                      {selectedOrganization?.id === org.id && selectedOrganization?.type === org.type && (\n                        <div className=\"selection-indicator\">\n                          <span>✓ Selected</span>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"org-footer\">\n                  <button \n                    className=\"continue-btn\"\n                    onClick={handleContinue}\n                    disabled={!selectedOrganization}\n                  >\n                    {config.buttonText}\n                  </button>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n        </div>\n      )}\n    </PageLayout>\n  );\n};\n\nexport default OrganizationSelection;"],"names":["OrganizationSelection","_sourceRepository$ful","location","useLocation","navigate","useNavigate","organizations","setOrganizations","useState","selectedOrganization","setSelectedOrganization","loading","setLoading","error","setError","includePersonal","setIncludePersonal","profile","sourceRepository","action","state","getActionConfig","title","description","concat","name","buttonText","nextRoute","fetchOrganizations","useCallback","async","orgsData","githubService","isAuth","getUserOrganizations","getMockOrganizations","whoOrganization","getWHOOrganization","whoIndex","findIndex","org","login","_objectSpread","unshift","whoError","console","warn","id","display_name","avatar_url","html_url","type","permissions","can_create_repositories","can_create_private_repositories","plan","private_repos","isWHO","some","mockOrgs","mockError","useEffect","config","allOptions","push","isPersonal","_jsx","PageLayout","pageName","children","_jsxs","className","onClick","handleBack","full_name","split","checked","onChange","e","target","length","_Fragment","map","_org$permissions","_org$permissions2","_org$permissions3","_org$permissions4","handleOrganizationSelect","src","alt","undefined","handleContinue","alert","repository","owner","destinationOrganization","templateRepository","disabled"],"sourceRoot":""}