{"version":3,"file":"static/js/70.2d84033c.chunk.js","mappings":"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","sources":["components/DAKDashboardWithFramework.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { PageLayout, useDAKParams } from './framework';\nimport githubService from '../services/githubService';\nimport branchContextService from '../services/branchContextService';\nimport DAKStatusBox from './DAKStatusBox';\nimport Publications from './Publications';\nimport ForkStatusBar from './ForkStatusBar';\n\nconst DAKDashboardWithFramework = () => {\n  return (\n    <PageLayout pageName=\"dashboard\">\n      <DAKDashboardContent />\n    </PageLayout>\n  );\n};\n\nconst DAKDashboardContent = () => {\n  const { profile, repository, branch, navigate } = useDAKParams();\n  \n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n  const [showPermissionDialog, setShowPermissionDialog] = useState(false);\n  const [activeTab, setActiveTab] = useState('core'); // 'core', 'additional', or 'publications'\n  const [issueCounts, setIssueCounts] = useState({});\n\n  // Check write permissions\n  useEffect(() => {\n    const checkWritePermissions = async () => {\n      if (!repository || !githubService.isAuth()) {\n        setHasWriteAccess(false);\n        return;\n      }\n\n      try {\n        // Check repository permissions\n        const hasPermission = await githubService.checkRepositoryWritePermissions(repository.owner.login, repository.name);\n        setHasWriteAccess(hasPermission);\n      } catch (error) {\n        console.error('Error checking repository permissions:', error);\n        setHasWriteAccess(false);\n      }\n    };\n\n    checkWritePermissions();\n  }, [repository]);\n\n  // Set branch context\n  useEffect(() => {\n    if (profile && repository && branch) {\n      branchContextService.setBranchContext(profile.login, repository.name, branch);\n    }\n  }, [profile, repository, branch]);\n\n  // Fetch issue counts for repository (if authenticated)\n  useEffect(() => {\n    const fetchIssueCounts = async () => {\n      if (!repository || !githubService.isAuth()) {\n        return;\n      }\n\n      try {\n        const issues = await githubService.getIssues(repository.owner.login, repository.name);\n        \n        // Count issues by label\n        const counts = {};\n        issues.forEach(issue => {\n          issue.labels.forEach(label => {\n            counts[label.name] = (counts[label.name] || 0) + 1;\n          });\n        });\n        \n        setIssueCounts(counts);\n      } catch (error) {\n        console.warn('Could not fetch issue counts:', error);\n      }\n    };\n\n    fetchIssueCounts();\n  }, [repository]);\n\n  const handleComponentNavigate = (componentPath) => {\n    if (profile && repository) {\n      navigate(`/${componentPath}/${profile.login}/${repository.name}/${branch}`, {\n        state: {\n          profile,\n          repository,\n          selectedBranch: branch\n        }\n      });\n    }\n  };\n\n  const handlePublicationNavigate = () => {\n    if (profile && repository) {\n      navigate(`/publications/${profile.login}/${repository.name}/${branch}`, {\n        state: {\n          profile,\n          repository,\n          selectedBranch: branch\n        }\n      });\n    }\n  };\n\n  // Define the 9 core DAK components based on WHO SMART Guidelines documentation\n  const dakComponents = [\n    // Core Components (Level 2)\n    {\n      id: 'health-interventions',\n      title: 'Health Interventions and Recommendations',\n      description: 'Clinical guidelines and health intervention specifications that define evidence-based care recommendations',\n      icon: 'üìñ',\n      path: 'health-interventions',\n      level: 'Level 2: Core Components',\n      color: '#0078d4'\n    },\n    {\n      id: 'generic-personas',\n      title: 'Generic Personas',\n      description: 'Standardized user roles and actor definitions that represent different types of healthcare workers and patients',\n      icon: 'üë•',\n      path: 'actor-editor',\n      level: 'Level 2: Core Components',\n      color: '#107c10'\n    },\n    {\n      id: 'user-scenarios',\n      title: 'User Scenarios',\n      description: 'Narrative descriptions of how different personas interact with the system in specific healthcare contexts',\n      icon: 'üìù',\n      path: 'user-scenarios',\n      level: 'Level 2: Core Components',\n      color: '#881798'\n    },\n    {\n      id: 'business-processes',\n      title: 'Generic Business Processes and Workflows',\n      description: 'BPMN workflows and business process definitions that model clinical workflows and care pathways',\n      icon: 'üîÑ',\n      path: 'business-process-selection',\n      level: 'Level 2: Core Components',\n      color: '#d13438'\n    },\n    {\n      id: 'core-data-elements',\n      title: 'Core Data Elements',\n      description: 'Essential data structures and terminology needed for clinical data capture and exchange',\n      icon: 'üóÉÔ∏è',\n      path: 'core-data-dictionary-viewer',\n      level: 'Level 2: Core Components',\n      color: '#ff8c00'\n    },\n    {\n      id: 'decision-support',\n      title: 'Decision-Support Logic',\n      description: 'DMN decision tables and clinical decision support rules that encode clinical logic',\n      icon: 'üéØ',\n      path: 'decision-support-logic',\n      level: 'Level 2: Core Components',\n      color: '#00bcf2'\n    },\n    {\n      id: 'program-indicators',\n      title: 'Program Indicators',\n      description: 'Performance indicators and measurement definitions for monitoring and evaluation',\n      icon: 'üìä',\n      path: 'program-indicators',\n      level: 'Level 2: Core Components',\n      color: '#498205'\n    },\n    {\n      id: 'functional-requirements',\n      title: 'Functional and Non-Functional Requirements',\n      description: 'System requirements specifications that define capabilities and constraints',\n      icon: '‚öôÔ∏è',\n      path: 'functional-requirements',\n      level: 'Level 2: Core Components',\n      color: '#6b69d6'\n    },\n    {\n      id: 'testing',\n      title: 'Testing',\n      description: 'Feature files and test scenarios for validating the DAK implementation',\n      icon: 'üß™',\n      path: 'testing-viewer',\n      level: 'Level 2: Core Components',\n      color: '#8b5cf6'\n    },\n    // Additional Components (Level 3)\n    {\n      id: 'terminology',\n      title: 'Terminology',\n      description: 'Code systems, value sets, and concept maps',\n      icon: 'üè∑Ô∏è',\n      path: 'terminology',\n      level: 'Level 3: Technical Implementation',\n      color: '#ff8c00'\n    },\n    {\n      id: 'profiles',\n      title: 'FHIR Profiles',\n      description: 'FHIR resource profiles and constraints',\n      icon: 'üîß',\n      path: 'profiles',\n      level: 'Level 3: Technical Implementation',\n      color: '#00bcf2'\n    },\n    {\n      id: 'extensions',\n      title: 'FHIR Extensions',\n      description: 'Custom FHIR extensions and modifications',\n      icon: 'üß©',\n      path: 'extensions',\n      level: 'Level 3: Technical Implementation',\n      color: '#498205'\n    },\n    {\n      id: 'test-data',\n      title: 'Test Data & Examples',\n      description: 'Sample data and testing resources',\n      icon: 'üß™',\n      path: 'test-data',\n      level: 'Level 3: Technical Implementation',\n      color: '#8b5cf6'\n    },\n    {\n      id: 'questionnaire-editor',\n      title: 'FHIR Questionnaires',\n      description: 'Structured questionnaires and forms for data collection using FHIR standard',\n      icon: 'üìã',\n      path: 'questionnaire-editor',\n      level: 'Level 3: Technical Implementation',\n      color: '#17a2b8'\n    }\n  ];\n\n  const coreComponents = dakComponents.filter(comp => comp.level.includes('Level 2: Core Components'));\n  const additionalComponents = dakComponents.filter(comp => comp.level.includes('Level 3: Technical Implementation'));\n\n  return (\n    <div className=\"dak-dashboard\">\n        <div className=\"dashboard-header\">\n          <div className=\"dashboard-title\">\n            <h1>{repository?.name} Dashboard</h1>\n            <p className=\"dashboard-subtitle\">\n              Digital Adaptation Kit for {profile?.name || profile?.login}\n            </p>\n          </div>\n        </div>\n\n        {/* Fork Status Bar - shows forks of sgex repository */}\n        <ForkStatusBar \n          profile={profile}\n          repository={repository}\n          selectedBranch={branch}\n        />\n\n        {repository && (\n          <DAKStatusBox \n            repository={repository}\n            profile={profile}\n            selectedBranch={branch}\n            issueCounts={issueCounts}\n          />\n        )}\n\n        <div className=\"tab-navigation\">\n          <button \n            className={`tab-button ${activeTab === 'core' ? 'active' : ''}`}\n            onClick={() => setActiveTab('core')}\n          >\n            <span className=\"tab-icon\">‚≠ê</span>\n            <span className=\"tab-text\">9 Core Components</span>\n          </button>\n          <button \n            className={`tab-button ${activeTab === 'additional' ? 'active' : ''}`}\n            onClick={() => setActiveTab('additional')}\n          >\n            <span className=\"tab-icon\">üîß</span>\n            <span className=\"tab-text\">Additional Components ({additionalComponents.length})</span>\n          </button>\n          <button \n            className={`tab-button ${activeTab === 'publications' ? 'active' : ''}`}\n            onClick={() => setActiveTab('publications')}\n          >\n            <span className=\"tab-icon\">üìö</span>\n            <span className=\"tab-text\">Publications</span>\n          </button>\n        </div>\n\n        <div className=\"dashboard-content\">\n          {activeTab === 'core' && (\n            <div className=\"components-grid core-components\">\n              {coreComponents.map(component => (\n                <div \n                  key={component.id}\n                  className=\"component-card\"\n                  onClick={() => handleComponentNavigate(component.path)}\n                >\n                  <div className=\"component-icon\">{component.icon}</div>\n                  <h3>{component.title}</h3>\n                  <p>{component.description}</p>\n                  {issueCounts[component.id] > 0 && (\n                    <div className=\"issue-badge\">\n                      {issueCounts[component.id]} issues\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n\n          {activeTab === 'additional' && (\n            <div className=\"components-grid additional-components\">\n              {additionalComponents.map(component => (\n                <div \n                  key={component.id}\n                  className=\"component-card\"\n                  onClick={() => handleComponentNavigate(component.path)}\n                >\n                  <div className=\"component-icon\">{component.icon}</div>\n                  <h3>{component.title}</h3>\n                  <p>{component.description}</p>\n                  {issueCounts[component.id] > 0 && (\n                    <div className=\"issue-badge\">\n                      {issueCounts[component.id]} issues\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n\n          {activeTab === 'publications' && (\n            <div className=\"publications-section\">\n              <Publications \n                repository={repository}\n                profile={profile}\n                selectedBranch={branch}\n                onNavigate={handlePublicationNavigate}\n              />\n            </div>\n          )}\n        </div>\n\n        {showPermissionDialog && (\n          <div className=\"permission-dialog\">\n            <div className=\"dialog-overlay\" onClick={() => setShowPermissionDialog(false)}></div>\n            <div className=\"dialog-content\">\n              <h3>Repository Permissions</h3>\n              <p>\n                You have {hasWriteAccess ? 'write' : 'read-only'} access to this repository.\n                {!hasWriteAccess && ' You can view content but cannot make changes.'}\n              </p>\n              <button onClick={() => setShowPermissionDialog(false)}>\n                Got it\n              </button>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default DAKDashboardWithFramework;"],"names":["DAKDashboardContent","profile","repository","branch","navigate","useDAKParams","hasWriteAccess","setHasWriteAccess","useState","showPermissionDialog","setShowPermissionDialog","activeTab","setActiveTab","issueCounts","setIssueCounts","useEffect","async","githubService","isAuth","hasPermission","checkRepositoryWritePermissions","owner","login","name","error","console","checkWritePermissions","branchContextService","setBranchContext","issues","getIssues","counts","forEach","issue","labels","label","warn","fetchIssueCounts","handleComponentNavigate","componentPath","concat","state","selectedBranch","dakComponents","id","title","description","icon","path","level","color","coreComponents","filter","comp","includes","additionalComponents","_jsxs","className","children","_jsx","ForkStatusBar","DAKStatusBox","onClick","length","map","component","Publications","onNavigate","handlePublicationNavigate","DAKDashboardWithFramework","PageLayout","pageName"],"sourceRoot":""}