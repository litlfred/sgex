{"version":3,"file":"static/js/529.3ebc5899.chunk.js","mappings":"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","sources":["services/actorDefinitionService.js","components/ActorEditor.js"],"sourcesContent":["/**\n * Actor Definition Service\n * \n * Manages actor definitions based on FHIR Persona logical model.\n * Handles conversion to FSH (FHIR Shorthand) format and integration with staging ground.\n */\n\nimport stagingGroundService from './stagingGroundService';\n\nclass ActorDefinitionService {\n  constructor() {\n    this.actorSchema = null;\n    this.loadSchema();\n  }\n\n  /**\n   * Load the actor definition JSON schema\n   */\n  async loadSchema() {\n    try {\n      const response = await fetch(`${process.env.PUBLIC_URL || ''}/schemas/actor-definition.json`);\n      this.actorSchema = await response.json();\n    } catch (error) {\n      console.warn('Could not load actor definition schema:', error);\n    }\n  }\n\n  /**\n   * Convert actor definition to FSH format\n   */\n  generateFSH(actorDefinition) {\n    if (!actorDefinition || !actorDefinition.id) {\n      throw new Error('Invalid actor definition: missing required fields');\n    }\n\n    const fsh = [];\n    \n    // Profile header\n    fsh.push(`Profile: ${actorDefinition.id}`);\n    fsh.push(`Parent: ActorDefinition`);\n    fsh.push(`Id: ${actorDefinition.id}`);\n    fsh.push(`Title: \"${this.escapeFSHString(actorDefinition.name)}\"`);\n    fsh.push(`Description: \"${this.escapeFSHString(actorDefinition.description)}\"`);\n    \n    if (actorDefinition.metadata?.status) {\n      fsh.push(`* status = #${actorDefinition.metadata.status}`);\n    }\n    \n    // Actor type\n    if (actorDefinition.type) {\n      fsh.push(`* type = #${actorDefinition.type}`);\n    }\n    \n    // Roles\n    if (actorDefinition.roles && actorDefinition.roles.length > 0) {\n      actorDefinition.roles.forEach((role, index) => {\n        if (role.system) {\n          fsh.push(`* role[${index}].coding.system = \"${role.system}\"`);\n        }\n        fsh.push(`* role[${index}].coding.code = #${role.code}`);\n        fsh.push(`* role[${index}].coding.display = \"${this.escapeFSHString(role.display)}\"`);\n      });\n    }\n    \n    // Qualifications\n    if (actorDefinition.qualifications && actorDefinition.qualifications.length > 0) {\n      actorDefinition.qualifications.forEach((qual, index) => {\n        fsh.push(`* qualification[${index}].code.coding.code = #${qual.code}`);\n        fsh.push(`* qualification[${index}].code.coding.display = \"${this.escapeFSHString(qual.display)}\"`);\n        if (qual.issuer) {\n          fsh.push(`* qualification[${index}].issuer.display = \"${this.escapeFSHString(qual.issuer)}\"`);\n        }\n      });\n    }\n    \n    // Specialties\n    if (actorDefinition.specialties && actorDefinition.specialties.length > 0) {\n      actorDefinition.specialties.forEach((specialty, index) => {\n        if (specialty.system) {\n          fsh.push(`* specialty[${index}].coding.system = \"${specialty.system}\"`);\n        }\n        fsh.push(`* specialty[${index}].coding.code = #${specialty.code}`);\n        fsh.push(`* specialty[${index}].coding.display = \"${this.escapeFSHString(specialty.display)}\"`);\n      });\n    }\n    \n    // Location context\n    if (actorDefinition.location) {\n      if (actorDefinition.location.type) {\n        fsh.push(`* location.type = #${actorDefinition.location.type}`);\n      }\n      if (actorDefinition.location.description) {\n        fsh.push(`* location.description = \"${this.escapeFSHString(actorDefinition.location.description)}\"`);\n      }\n    }\n    \n    // Access level as extension\n    if (actorDefinition.accessLevel) {\n      fsh.push(`* extension[accessLevel].valueCode = #${actorDefinition.accessLevel}`);\n    }\n    \n    // Interactions as extensions\n    if (actorDefinition.interactions && actorDefinition.interactions.length > 0) {\n      actorDefinition.interactions.forEach((interaction, index) => {\n        fsh.push(`* extension[interaction][${index}].extension[type].valueCode = #${interaction.type}`);\n        fsh.push(`* extension[interaction][${index}].extension[target].valueString = \"${this.escapeFSHString(interaction.target)}\"`);\n        if (interaction.description) {\n          fsh.push(`* extension[interaction][${index}].extension[description].valueString = \"${this.escapeFSHString(interaction.description)}\"`);\n        }\n      });\n    }\n    \n    // Add metadata\n    if (actorDefinition.metadata) {\n      if (actorDefinition.metadata.version) {\n        fsh.push(`* version = \"${actorDefinition.metadata.version}\"`);\n      }\n      if (actorDefinition.metadata.publisher) {\n        fsh.push(`* publisher = \"${this.escapeFSHString(actorDefinition.metadata.publisher)}\"`);\n      }\n      if (actorDefinition.metadata.contact && actorDefinition.metadata.contact.length > 0) {\n        actorDefinition.metadata.contact.forEach((contact, index) => {\n          if (contact.name) {\n            fsh.push(`* contact[${index}].name = \"${this.escapeFSHString(contact.name)}\"`);\n          }\n          if (contact.email) {\n            fsh.push(`* contact[${index}].telecom.system = #email`);\n            fsh.push(`* contact[${index}].telecom.value = \"${contact.email}\"`);\n          }\n        });\n      }\n    }\n    \n    return fsh.join('\\n');\n  }\n\n  /**\n   * Escape special characters in FSH strings\n   */\n  escapeFSHString(str) {\n    if (!str) return '';\n    return str.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n');\n  }\n\n  /**\n   * Parse FSH content back to actor definition (basic implementation)\n   */\n  parseFSH(fshContent) {\n    // This is a simplified parser - a full implementation would need a proper FSH parser\n    const lines = fshContent.split('\\n').map(line => line.trim()).filter(line => line);\n    const actorDefinition = {\n      roles: [],\n      qualifications: [],\n      specialties: [],\n      interactions: [],\n      metadata: {}\n    };\n\n    for (const line of lines) {\n      if (line.startsWith('Profile:')) {\n        actorDefinition.id = line.split(':')[1].trim();\n      } else if (line.startsWith('Id:')) {\n        actorDefinition.id = line.split(':')[1].trim();\n      } else if (line.startsWith('Title:')) {\n        actorDefinition.name = line.split(':')[1].trim().replace(/\"/g, '');\n      } else if (line.startsWith('Description:')) {\n        actorDefinition.description = line.split(':')[1].trim().replace(/\"/g, '');\n      } else if (line.includes('type = #')) {\n        actorDefinition.type = line.split('#')[1].trim();\n      }\n      // Add more parsing logic as needed\n    }\n\n    return actorDefinition;\n  }\n\n  /**\n   * Validate actor definition against schema\n   */\n  validateActorDefinition(actorDefinition) {\n    const errors = [];\n    \n    // Basic validation\n    if (!actorDefinition.id || !actorDefinition.id.match(/^[a-zA-Z][a-zA-Z0-9_-]*$/)) {\n      errors.push('ID must start with a letter and contain only letters, numbers, underscores, and hyphens');\n    }\n    \n    if (!actorDefinition.name || actorDefinition.name.trim().length === 0) {\n      errors.push('Name is required');\n    }\n    \n    if (!actorDefinition.description || actorDefinition.description.trim().length === 0) {\n      errors.push('Description is required');\n    }\n    \n    if (!actorDefinition.type) {\n      errors.push('Actor type is required');\n    }\n    \n    if (!actorDefinition.roles || actorDefinition.roles.length === 0) {\n      errors.push('At least one role is required');\n    } else {\n      actorDefinition.roles.forEach((role, index) => {\n        if (!role.code || !role.display) {\n          errors.push(`Role ${index + 1} must have both code and display name`);\n        }\n      });\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Save actor definition to staging ground as FSH\n   */\n  async saveToStagingGround(actorDefinition) {\n    try {\n      // Validate first\n      const validation = this.validateActorDefinition(actorDefinition);\n      if (!validation.isValid) {\n        throw new Error(`Validation failed: ${validation.errors.join(', ')}`);\n      }\n\n      // Generate FSH content\n      const fshContent = this.generateFSH(actorDefinition);\n      \n      // Create file path in staging ground structure\n      const filePath = `input/fsh/actors/${actorDefinition.id}.fsh`;\n      \n      // Save to staging ground\n      const success = stagingGroundService.updateFile(filePath, fshContent, {\n        type: 'actor-definition',\n        actorId: actorDefinition.id,\n        actorName: actorDefinition.name,\n        lastModified: Date.now(),\n        source: 'actor-editor'\n      });\n      \n      if (!success) {\n        throw new Error('Failed to save to staging ground');\n      }\n      \n      return {\n        success: true,\n        filePath,\n        content: fshContent\n      };\n      \n    } catch (error) {\n      console.error('Error saving actor definition:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Load actor definition from staging ground\n   */\n  getFromStagingGround(actorId) {\n    try {\n      const stagingGround = stagingGroundService.getStagingGround();\n      const filePath = `input/fsh/actors/${actorId}.fsh`;\n      \n      const file = stagingGround.files.find(f => f.path === filePath);\n      if (!file) {\n        return null;\n      }\n      \n      // Parse FSH back to actor definition\n      const actorDefinition = this.parseFSH(file.content);\n      \n      return {\n        actorDefinition,\n        metadata: file.metadata,\n        lastModified: file.timestamp\n      };\n      \n    } catch (error) {\n      console.error('Error loading actor definition from staging ground:', error);\n      return null;\n    }\n  }\n\n  /**\n   * List all actor definitions in staging ground\n   */\n  listStagedActors() {\n    try {\n      const stagingGround = stagingGroundService.getStagingGround();\n      \n      return stagingGround.files\n        .filter(file => \n          file.path.startsWith('input/fsh/actors/') && \n          file.path.endsWith('.fsh') &&\n          file.metadata?.type === 'actor-definition'\n        )\n        .map(file => ({\n          id: file.metadata?.actorId || file.path.split('/').pop().replace('.fsh', ''),\n          name: file.metadata?.actorName || 'Unknown Actor',\n          filePath: file.path,\n          lastModified: file.timestamp,\n          metadata: file.metadata\n        }))\n        .sort((a, b) => b.lastModified - a.lastModified);\n        \n    } catch (error) {\n      console.error('Error listing staged actors:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Remove actor definition from staging ground\n   */\n  removeFromStagingGround(actorId) {\n    try {\n      const filePath = `input/fsh/actors/${actorId}.fsh`;\n      return stagingGroundService.removeFile(filePath);\n    } catch (error) {\n      console.error('Error removing actor definition:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Create a new empty actor definition with defaults\n   */\n  createEmptyActorDefinition() {\n    return {\n      id: '',\n      name: '',\n      description: '',\n      type: 'person',\n      roles: [\n        {\n          code: '',\n          display: '',\n          system: 'http://snomed.info/sct'\n        }\n      ],\n      qualifications: [],\n      specialties: [],\n      location: {\n        type: 'facility',\n        description: ''\n      },\n      accessLevel: 'standard',\n      interactions: [],\n      constraints: {\n        availability: '',\n        jurisdiction: '',\n        limitations: []\n      },\n      metadata: {\n        version: '1.0.0',\n        status: 'draft',\n        publisher: '',\n        contact: [],\n        tags: []\n      }\n    };\n  }\n\n  /**\n   * Get predefined actor templates\n   */\n  getActorTemplates() {\n    return [\n      {\n        id: 'clinician-template',\n        name: 'Healthcare Clinician',\n        description: 'A qualified healthcare practitioner who provides direct patient care',\n        type: 'practitioner',\n        roles: [\n          {\n            code: '158965000',\n            display: 'Medical practitioner',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Healthcare facility or clinic'\n        },\n        accessLevel: 'standard'\n      },\n      {\n        id: 'nurse-template',\n        name: 'Registered Nurse',\n        description: 'Licensed nursing professional providing patient care and health education',\n        type: 'practitioner',\n        roles: [\n          {\n            code: '224535009',\n            display: 'Registered nurse',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Hospital ward, clinic, or community health center'\n        },\n        accessLevel: 'standard'\n      },\n      {\n        id: 'patient-template',\n        name: 'Patient',\n        description: 'Individual receiving healthcare services',\n        type: 'patient',\n        roles: [\n          {\n            code: '116154003',\n            display: 'Patient',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Any healthcare setting where patient receives care'\n        },\n        accessLevel: 'read-only'\n      },\n      {\n        id: 'admin-template',\n        name: 'Healthcare Administrator',\n        description: 'Administrative staff managing healthcare operations and data',\n        type: 'person',\n        roles: [\n          {\n            code: '394738000',\n            display: 'Other related persons',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Administrative offices within healthcare organization'\n        },\n        accessLevel: 'administrative'\n      }\n    ];\n  }\n}\n\n// Create singleton instance\nconst actorDefinitionService = new ActorDefinitionService();\n\nexport default actorDefinitionService;","import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport actorDefinitionService from '../services/actorDefinitionService';\nimport { PageLayout, useDAKParams } from './framework';\n\nconst ActorEditor = () => {\n  const navigate = useNavigate();\n  const { profile, repository, branch } = useDAKParams();\n  \n  // For now, we'll set editActorId to null since it's not in URL params\n  // This could be enhanced later to support URL-based actor editing\n  const editActorId = null;\n\n  // State management\n  const [actorDefinition, setActorDefinition] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [showPreview, setShowPreview] = useState(false);\n  const [fshPreview, setFshPreview] = useState('');\n  const [stagedActors, setStagedActors] = useState([]);\n  const [showActorList, setShowActorList] = useState(false);\n  const [activeTab, setActiveTab] = useState('basic');\n\n  // Initialize component\n  useEffect(() => {\n    const initializeEditor = async () => {\n      setLoading(true);\n      \n      try {\n        if (editActorId) {\n          // Load existing actor from staging ground\n          const result = actorDefinitionService.getFromStagingGround(editActorId);\n          if (result) {\n            setActorDefinition(result.actorDefinition);\n          } else {\n            // Actor not found, create new one\n            setActorDefinition(actorDefinitionService.createEmptyActorDefinition());\n          }\n        } else {\n          // Create new actor\n          setActorDefinition(actorDefinitionService.createEmptyActorDefinition());\n        }\n        \n        // Load list of staged actors\n        setStagedActors(actorDefinitionService.listStagedActors());\n        \n      } catch (error) {\n        console.error('Error initializing actor editor:', error);\n        setErrors({ general: 'Failed to initialize editor' });\n      }\n      \n      setLoading(false);\n    };\n\n    initializeEditor();\n  }, [editActorId]);\n\n  // Handle form field changes\n  const handleFieldChange = useCallback((field, value) => {\n    setActorDefinition(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    \n    // Clear field-specific errors\n    if (errors[field]) {\n      setErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n  }, [errors]);\n\n  // Handle nested field changes\n  const handleNestedFieldChange = useCallback((parentField, index, field, value) => {\n    setActorDefinition(prev => {\n      const newDefinition = { ...prev };\n      if (!newDefinition[parentField]) {\n        newDefinition[parentField] = [];\n      }\n      \n      if (!newDefinition[parentField][index]) {\n        newDefinition[parentField][index] = {};\n      }\n      \n      newDefinition[parentField][index][field] = value;\n      return newDefinition;\n    });\n  }, []);\n\n  // Add new item to array fields\n  const addArrayItem = useCallback((field, defaultItem = {}) => {\n    setActorDefinition(prev => ({\n      ...prev,\n      [field]: [...(prev[field] || []), defaultItem]\n    }));\n  }, []);\n\n  // Remove item from array fields\n  const removeArrayItem = useCallback((field, index) => {\n    setActorDefinition(prev => ({\n      ...prev,\n      [field]: prev[field].filter((_, i) => i !== index)\n    }));\n  }, []);\n\n  // Validate form\n  const validateForm = useCallback(() => {\n    if (!actorDefinition) return false;\n    \n    const validation = actorDefinitionService.validateActorDefinition(actorDefinition);\n    \n    if (!validation.isValid) {\n      const fieldErrors = {};\n      validation.errors.forEach(error => {\n        if (error.includes('ID')) fieldErrors.id = error;\n        else if (error.includes('Name')) fieldErrors.name = error;\n        else if (error.includes('Description')) fieldErrors.description = error;\n        else if (error.includes('type')) fieldErrors.type = error;\n        else if (error.includes('role')) fieldErrors.roles = error;\n        else fieldErrors.general = error;\n      });\n      setErrors(fieldErrors);\n      return false;\n    }\n    \n    setErrors({});\n    return true;\n  }, [actorDefinition]);\n\n  // Save actor definition\n  const handleSave = async () => {\n    if (!validateForm()) {\n      return;\n    }\n    \n    setSaving(true);\n    \n    try {\n      const result = await actorDefinitionService.saveToStagingGround(actorDefinition);\n      \n      if (result.success) {\n        // Refresh staged actors list\n        setStagedActors(actorDefinitionService.listStagedActors());\n        \n        // Show success message (could be a toast notification)\n        alert('Actor definition saved to staging ground successfully!');\n        \n        // Update the URL to reflect we're now editing this actor\n        if (!editActorId) {\n          navigate(`/actor-editor/${profile?.login}/${repository?.name}${branch && branch !== 'main' ? `/${branch}` : ''}`);\n        }\n      } else {\n        setErrors({ general: result.error });\n      }\n    } catch (error) {\n      console.error('Error saving actor definition:', error);\n      setErrors({ general: 'Failed to save actor definition' });\n    }\n    \n    setSaving(false);\n  };\n\n  // Generate FSH preview\n  const generatePreview = useCallback(() => {\n    if (!actorDefinition) return;\n    \n    try {\n      const fsh = actorDefinitionService.generateFSH(actorDefinition);\n      setFshPreview(fsh);\n      setShowPreview(true);\n    } catch (error) {\n      console.error('Error generating FSH preview:', error);\n      setErrors({ general: 'Failed to generate FSH preview' });\n    }\n  }, [actorDefinition]);\n\n  // Load actor template\n  const loadTemplate = (template) => {\n    setActorDefinition({\n      ...actorDefinitionService.createEmptyActorDefinition(),\n      ...template,\n      metadata: {\n        ...actorDefinitionService.createEmptyActorDefinition().metadata,\n        ...template.metadata\n      }\n    });\n    setErrors({});\n  };\n\n  // Load existing staged actor\n  const loadStagedActor = (actorId) => {\n    const result = actorDefinitionService.getFromStagingGround(actorId);\n    if (result) {\n      setActorDefinition(result.actorDefinition);\n      setErrors({});\n      setShowActorList(false);\n      \n      // Update URL\n      navigate(`/actor-editor/${profile?.login}/${repository?.name}${branch && branch !== 'main' ? `/${branch}` : ''}`);\n    }\n  };\n\n  // Delete staged actor\n  const deleteStagedActor = (actorId) => {\n    if (window.confirm(`Are you sure you want to delete the actor \"${actorId}\"?`)) {\n      const success = actorDefinitionService.removeFromStagingGround(actorId);\n      if (success) {\n        setStagedActors(actorDefinitionService.listStagedActors());\n        \n        // If we're currently editing this actor, create a new one\n        if (editActorId === actorId) {\n          setActorDefinition(actorDefinitionService.createEmptyActorDefinition());\n          navigate(`/actor-editor/${profile?.login}/${repository?.name}${branch && branch !== 'main' ? `/${branch}` : ''}`);\n        }\n      }\n    }\n  };\n\n\n\n  // Redirect if missing required context - use useEffect to avoid render issues\n  useEffect(() => {\n    if (!profile || !repository) {\n      navigate('/');\n    }\n  }, [profile, repository, navigate]);\n\n  return (\n    <PageLayout pageName=\"actor-editor\">\n      <div className=\"actor-editor\">\n        {!profile || !repository ? (\n          <div className=\"redirecting-state\">\n            <h2>Redirecting...</h2>\n            <p>Missing required context. Redirecting to home page...</p>\n          </div>\n        ) : loading ? (\n          <div className=\"loading-state\">\n            <div className=\"loading-content\">\n              <h2>Loading Actor Editor...</h2>\n              <p>Initializing editor and loading data...</p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"editor-content\">\n\n        <div className=\"editor-toolbar\">\n          <div className=\"toolbar-left\">\n            <button \n              onClick={() => setShowActorList(!showActorList)}\n              className=\"toolbar-btn\"\n              title=\"Browse staged actors\"\n            >\n              📋 Staged Actors ({stagedActors.length})\n            </button>\n            <button \n              onClick={generatePreview}\n              className=\"toolbar-btn\"\n              disabled={!actorDefinition?.id}\n              title=\"Preview FSH output\"\n            >\n              👁️ Preview FSH\n            </button>\n          </div>\n          <div className=\"toolbar-right\">\n            <button \n              onClick={handleSave}\n              disabled={saving || !actorDefinition?.id}\n              className=\"toolbar-btn primary\"\n              title=\"Save to staging ground\"\n            >\n              {saving ? '💾 Saving...' : '💾 Save'}\n            </button>\n          </div>\n        </div>\n\n        {errors.general && (\n          <div className=\"error-message\">\n            <strong>Error:</strong> {errors.general}\n          </div>\n        )}\n\n        <div className=\"editor-layout\">\n          {/* Staged Actors Sidebar */}\n          {showActorList && (\n            <div className=\"actor-list-sidebar\">\n              <div className=\"sidebar-header\">\n                <h3>Staged Actors</h3>\n                <button \n                  onClick={() => setShowActorList(false)}\n                  className=\"close-btn\"\n                >\n                  ✕\n                </button>\n              </div>\n              <div className=\"sidebar-content\">\n                <div className=\"templates-section\">\n                  <h4>Templates</h4>\n                  {actorDefinitionService.getActorTemplates().map(template => (\n                    <div key={template.id} className=\"template-item\">\n                      <span className=\"template-name\">{template.name}</span>\n                      <button \n                        onClick={() => loadTemplate(template)}\n                        className=\"load-btn\"\n                      >\n                        Use\n                      </button>\n                    </div>\n                  ))}\n                </div>\n                \n                {stagedActors.length > 0 && (\n                  <div className=\"staged-actors-section\">\n                    <h4>Staged Actors</h4>\n                    {stagedActors.map(actor => (\n                      <div key={actor.id} className=\"staged-actor-item\">\n                        <div className=\"actor-info\">\n                          <span className=\"actor-name\">{actor.name}</span>\n                          <span className=\"actor-id\">{actor.id}</span>\n                          <span className=\"actor-modified\">\n                            {new Date(actor.lastModified).toLocaleDateString()}\n                          </span>\n                        </div>\n                        <div className=\"actor-actions\">\n                          <button \n                            onClick={() => loadStagedActor(actor.id)}\n                            className=\"load-btn\"\n                          >\n                            Edit\n                          </button>\n                          <button \n                            onClick={() => deleteStagedActor(actor.id)}\n                            className=\"delete-btn\"\n                          >\n                            🗑️\n                          </button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Main Editor */}\n          <div className={`main-editor ${showActorList ? 'with-sidebar' : ''}`}>\n            {actorDefinition && (\n              <>\n                <div className=\"editor-tabs\">\n                  <button \n                    className={`tab ${activeTab === 'basic' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('basic')}\n                  >\n                    Basic Info\n                  </button>\n                  <button \n                    className={`tab ${activeTab === 'roles' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('roles')}\n                  >\n                    Roles & Qualifications\n                  </button>\n                  <button \n                    className={`tab ${activeTab === 'context' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('context')}\n                  >\n                    Context & Access\n                  </button>\n                  <button \n                    className={`tab ${activeTab === 'metadata' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('metadata')}\n                  >\n                    Metadata\n                  </button>\n                </div>\n\n                <div className=\"tab-content\">\n                  {activeTab === 'basic' && (\n                    <BasicInfoTab\n                      actorDefinition={actorDefinition}\n                      errors={errors}\n                      onFieldChange={handleFieldChange}\n                    />\n                  )}\n                  \n                  {activeTab === 'roles' && (\n                    <RolesTab\n                      actorDefinition={actorDefinition}\n                      errors={errors}\n                      onNestedFieldChange={handleNestedFieldChange}\n                      onAddItem={addArrayItem}\n                      onRemoveItem={removeArrayItem}\n                    />\n                  )}\n                  \n                  {activeTab === 'context' && (\n                    <ContextTab\n                      actorDefinition={actorDefinition}\n                      errors={errors}\n                      onFieldChange={handleFieldChange}\n                      onNestedFieldChange={handleNestedFieldChange}\n                      onAddItem={addArrayItem}\n                      onRemoveItem={removeArrayItem}\n                    />\n                  )}\n                  \n                  {activeTab === 'metadata' && (\n                    <MetadataTab\n                      actorDefinition={actorDefinition}\n                      errors={errors}\n                      onFieldChange={handleFieldChange}\n                      onNestedFieldChange={handleNestedFieldChange}\n                      onAddItem={addArrayItem}\n                      onRemoveItem={removeArrayItem}\n                    />\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n        )}\n\n        {/* FSH Preview Modal */}\n        {showPreview && (\n          <div \n            className=\"modal-overlay\" \n            onClick={() => setShowPreview(false)}\n            role=\"presentation\"\n          >\n            <div \n              className=\"modal-content\" \n              onClick={e => e.stopPropagation()}\n              role=\"dialog\"\n              aria-labelledby=\"fsh-preview-title\"\n              aria-modal=\"true\"\n            >\n              <div className=\"modal-header\">\n                <h3 id=\"fsh-preview-title\">FSH Preview</h3>\n                <button \n                  onClick={() => setShowPreview(false)}\n                  className=\"close-btn\"\n                >\n                  ✕\n                </button>\n              </div>\n              <div className=\"modal-body\">\n                <pre className=\"fsh-preview\">{fshPreview}</pre>\n              </div>\n              <div className=\"modal-footer\">\n                <button \n                  onClick={() => {\n                    navigator.clipboard.writeText(fshPreview);\n                    alert('FSH copied to clipboard!');\n                  }}\n                  className=\"copy-btn\"\n                >\n                  📋 Copy to Clipboard\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </PageLayout>\n  );\n};\n\n// Basic Info Tab Component\nconst BasicInfoTab = ({ actorDefinition, errors, onFieldChange }) => (\n  <div className=\"form-section\">\n    <h3>Basic Information</h3>\n    \n    <div className=\"form-group\">\n      <label htmlFor=\"id\">Actor ID *</label>\n      <input\n        type=\"text\"\n        id=\"id\"\n        value={actorDefinition.id}\n        onChange={(e) => onFieldChange('id', e.target.value)}\n        className={errors.id ? 'error' : ''}\n        placeholder=\"e.g., primary-care-physician\"\n        pattern=\"[a-zA-Z][a-zA-Z0-9_-]*\"\n      />\n      {errors.id && <span className=\"error-text\">{errors.id}</span>}\n      <span className=\"help-text\">Unique identifier (letters, numbers, underscores, hyphens only)</span>\n    </div>\n\n    <div className=\"form-group\">\n      <label htmlFor=\"name\">Display Name *</label>\n      <input\n        type=\"text\"\n        id=\"name\"\n        value={actorDefinition.name}\n        onChange={(e) => onFieldChange('name', e.target.value)}\n        className={errors.name ? 'error' : ''}\n        placeholder=\"e.g., Primary Care Physician\"\n      />\n      {errors.name && <span className=\"error-text\">{errors.name}</span>}\n    </div>\n\n    <div className=\"form-group\">\n      <label htmlFor=\"description\">Description *</label>\n      <textarea\n        id=\"description\"\n        value={actorDefinition.description}\n        onChange={(e) => onFieldChange('description', e.target.value)}\n        className={errors.description ? 'error' : ''}\n        placeholder=\"Detailed description of the actor's role and responsibilities...\"\n        rows={4}\n      />\n      {errors.description && <span className=\"error-text\">{errors.description}</span>}\n    </div>\n\n    <div className=\"form-group\">\n      <label htmlFor=\"type\">Actor Type *</label>\n      <select\n        id=\"type\"\n        value={actorDefinition.type}\n        onChange={(e) => onFieldChange('type', e.target.value)}\n        className={errors.type ? 'error' : ''}\n      >\n        <option value=\"person\">Person</option>\n        <option value=\"practitioner\">Practitioner</option>\n        <option value=\"patient\">Patient</option>\n        <option value=\"relatedperson\">Related Person</option>\n        <option value=\"organization\">Organization</option>\n        <option value=\"device\">Device</option>\n        <option value=\"system\">System</option>\n      </select>\n      {errors.type && <span className=\"error-text\">{errors.type}</span>}\n    </div>\n  </div>\n);\n\n// Roles Tab Component\nconst RolesTab = ({ actorDefinition, errors, onNestedFieldChange, onAddItem, onRemoveItem }) => (\n  <div className=\"form-section\">\n    <h3>Roles & Qualifications</h3>\n    \n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Roles *</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('roles', { code: '', display: '', system: 'http://snomed.info/sct' })}\n          className=\"add-btn\"\n        >\n          + Add Role\n        </button>\n      </div>\n      {errors.roles && <span className=\"error-text\">{errors.roles}</span>}\n      \n      {actorDefinition.roles && actorDefinition.roles.map((role, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Role {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => onRemoveItem('roles', index)}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor={`role-code-${index}`}>Code</label>\n              <input\n                id={`role-code-${index}`}\n                type=\"text\"\n                value={role.code}\n                onChange={(e) => onNestedFieldChange('roles', index, 'code', e.target.value)}\n                placeholder=\"Role code\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor={`role-display-${index}`}>Display Name</label>\n              <input\n                id={`role-display-${index}`}\n                type=\"text\"\n                value={role.display}\n                onChange={(e) => onNestedFieldChange('roles', index, 'display', e.target.value)}\n                placeholder=\"Human-readable role name\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor={`role-system-${index}`}>Code System</label>\n            <input\n              id={`role-system-${index}`}\n              type=\"text\"\n              value={role.system || ''}\n              onChange={(e) => onNestedFieldChange('roles', index, 'system', e.target.value)}\n              placeholder=\"http://snomed.info/sct\"\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Qualifications</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('qualifications', { code: '', display: '', issuer: '' })}\n          className=\"add-btn\"\n        >\n          + Add Qualification\n        </button>\n      </div>\n      \n      {actorDefinition.qualifications && actorDefinition.qualifications.map((qual, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Qualification {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => onRemoveItem('qualifications', index)}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor={`qualification-code-${index}`}>Code</label>\n              <input\n                id={`qualification-code-${index}`}\n                type=\"text\"\n                value={qual.code}\n                onChange={(e) => onNestedFieldChange('qualifications', index, 'code', e.target.value)}\n                placeholder=\"Qualification code\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor={`qualification-display-${index}`}>Display Name</label>\n              <input\n                id={`qualification-display-${index}`}\n                type=\"text\"\n                value={qual.display}\n                onChange={(e) => onNestedFieldChange('qualifications', index, 'display', e.target.value)}\n                placeholder=\"Qualification name\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor={`qualification-issuer-${index}`}>Issuing Organization</label>\n            <input\n              id={`qualification-issuer-${index}`}\n              type=\"text\"\n              value={qual.issuer || ''}\n              onChange={(e) => onNestedFieldChange('qualifications', index, 'issuer', e.target.value)}\n              placeholder=\"Organization that issued this qualification\"\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Specialties</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('specialties', { code: '', display: '', system: 'http://snomed.info/sct' })}\n          className=\"add-btn\"\n        >\n          + Add Specialty\n        </button>\n      </div>\n      \n      {actorDefinition.specialties && actorDefinition.specialties.map((specialty, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Specialty {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => onRemoveItem('specialties', index)}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor={`specialty-code-${index}`}>Code</label>\n              <input\n                id={`specialty-code-${index}`}\n                type=\"text\"\n                value={specialty.code}\n                onChange={(e) => onNestedFieldChange('specialties', index, 'code', e.target.value)}\n                placeholder=\"Specialty code\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor={`specialty-display-${index}`}>Display Name</label>\n              <input\n                id={`specialty-display-${index}`}\n                type=\"text\"\n                value={specialty.display}\n                onChange={(e) => onNestedFieldChange('specialties', index, 'display', e.target.value)}\n                placeholder=\"Specialty name\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor={`specialty-system-${index}`}>Code System</label>\n            <input\n              id={`specialty-system-${index}`}\n              type=\"text\"\n              value={specialty.system || ''}\n              onChange={(e) => onNestedFieldChange('specialties', index, 'system', e.target.value)}\n              placeholder=\"http://snomed.info/sct\"\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\n// Context Tab Component\nconst ContextTab = ({ actorDefinition, errors, onFieldChange, onNestedFieldChange, onAddItem, onRemoveItem }) => (\n  <div className=\"form-section\">\n    <h3>Context & Access</h3>\n    \n    <div className=\"subsection\">\n      <h4>Typical Location</h4>\n      <div className=\"form-row\">\n        <div className=\"form-group\">\n          <label htmlFor=\"location-type\">Location Type</label>\n          <select\n            id=\"location-type\"\n            value={actorDefinition.location?.type || ''}\n            onChange={(e) => onFieldChange('location', { ...actorDefinition.location, type: e.target.value })}\n          >\n            <option value=\"facility\">Healthcare Facility</option>\n            <option value=\"community\">Community</option>\n            <option value=\"home\">Home</option>\n            <option value=\"mobile\">Mobile</option>\n            <option value=\"virtual\">Virtual/Remote</option>\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"location-description\">Description</label>\n          <input\n            id=\"location-description\"\n            type=\"text\"\n            value={actorDefinition.location?.description || ''}\n            onChange={(e) => onFieldChange('location', { ...actorDefinition.location, description: e.target.value })}\n            placeholder=\"Describe the typical location\"\n          />\n        </div>\n      </div>\n    </div>\n\n    <div className=\"subsection\">\n      <h4>System Access Level</h4>\n      <div className=\"form-group\">\n        <select\n          value={actorDefinition.accessLevel || 'standard'}\n          onChange={(e) => onFieldChange('accessLevel', e.target.value)}\n        >\n          <option value=\"read-only\">Read-Only</option>\n          <option value=\"standard\">Standard</option>\n          <option value=\"administrative\">Administrative</option>\n          <option value=\"system\">System</option>\n        </select>\n      </div>\n    </div>\n\n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Key Interactions</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('interactions', { type: 'reads', target: '', description: '' })}\n          className=\"add-btn\"\n        >\n          + Add Interaction\n        </button>\n      </div>\n      \n      {actorDefinition.interactions && actorDefinition.interactions.map((interaction, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Interaction {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => onRemoveItem('interactions', index)}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label>Type</label>\n              <select\n                value={interaction.type}\n                onChange={(e) => onNestedFieldChange('interactions', index, 'type', e.target.value)}\n              >\n                <option value=\"creates\">Creates</option>\n                <option value=\"reads\">Reads</option>\n                <option value=\"updates\">Updates</option>\n                <option value=\"deletes\">Deletes</option>\n                <option value=\"approves\">Approves</option>\n                <option value=\"reviews\">Reviews</option>\n                <option value=\"monitors\">Monitors</option>\n              </select>\n            </div>\n            <div className=\"form-group\">\n              <label>Target</label>\n              <input\n                type=\"text\"\n                value={interaction.target}\n                onChange={(e) => onNestedFieldChange('interactions', index, 'target', e.target.value)}\n                placeholder=\"What the actor interacts with\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label>Description</label>\n            <input\n              type=\"text\"\n              value={interaction.description || ''}\n              onChange={(e) => onNestedFieldChange('interactions', index, 'description', e.target.value)}\n              placeholder=\"Describe this interaction\"\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\n// Metadata Tab Component\nconst MetadataTab = ({ actorDefinition, errors, onFieldChange, onNestedFieldChange, onAddItem, onRemoveItem }) => (\n  <div className=\"form-section\">\n    <h3>Metadata</h3>\n    \n    <div className=\"form-row\">\n      <div className=\"form-group\">\n        <label>Version</label>\n        <input\n          type=\"text\"\n          value={actorDefinition.metadata?.version || ''}\n          onChange={(e) => onFieldChange('metadata', { ...actorDefinition.metadata, version: e.target.value })}\n          placeholder=\"1.0.0\"\n        />\n      </div>\n      <div className=\"form-group\">\n        <label>Status</label>\n        <select\n          value={actorDefinition.metadata?.status || 'draft'}\n          onChange={(e) => onFieldChange('metadata', { ...actorDefinition.metadata, status: e.target.value })}\n        >\n          <option value=\"draft\">Draft</option>\n          <option value=\"active\">Active</option>\n          <option value=\"retired\">Retired</option>\n        </select>\n      </div>\n    </div>\n\n    <div className=\"form-group\">\n      <label>Publisher</label>\n      <input\n        type=\"text\"\n        value={actorDefinition.metadata?.publisher || ''}\n        onChange={(e) => onFieldChange('metadata', { ...actorDefinition.metadata, publisher: e.target.value })}\n        placeholder=\"Organization or person responsible\"\n      />\n    </div>\n\n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Contact Information</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('metadata.contact', { name: '', email: '' })}\n          className=\"add-btn\"\n        >\n          + Add Contact\n        </button>\n      </div>\n      \n      {actorDefinition.metadata?.contact && actorDefinition.metadata.contact.map((contact, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Contact {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => {\n                const newContacts = [...(actorDefinition.metadata.contact || [])];\n                newContacts.splice(index, 1);\n                onFieldChange('metadata', { ...actorDefinition.metadata, contact: newContacts });\n              }}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label>Name</label>\n              <input\n                type=\"text\"\n                value={contact.name || ''}\n                onChange={(e) => {\n                  const newContacts = [...(actorDefinition.metadata.contact || [])];\n                  newContacts[index] = { ...contact, name: e.target.value };\n                  onFieldChange('metadata', { ...actorDefinition.metadata, contact: newContacts });\n                }}\n                placeholder=\"Contact name\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Email</label>\n              <input\n                type=\"email\"\n                value={contact.email || ''}\n                onChange={(e) => {\n                  const newContacts = [...(actorDefinition.metadata.contact || [])];\n                  newContacts[index] = { ...contact, email: e.target.value };\n                  onFieldChange('metadata', { ...actorDefinition.metadata, contact: newContacts });\n                }}\n                placeholder=\"contact@example.com\"\n              />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"form-group\">\n      <label>Tags</label>\n      <input\n        type=\"text\"\n        value={actorDefinition.metadata?.tags?.join(', ') || ''}\n        onChange={(e) => onFieldChange('metadata', { \n          ...actorDefinition.metadata, \n          tags: e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag) \n        })}\n        placeholder=\"Enter tags separated by commas\"\n      />\n      <span className=\"help-text\">Comma-separated tags for categorization</span>\n    </div>\n  </div>\n);\n\nexport default ActorEditor;"],"names":["constructor","this","actorSchema","loadSchema","response","fetch","concat","process","json","error","console","warn","generateFSH","actorDefinition","_actorDefinition$meta","id","Error","fsh","push","escapeFSHString","name","description","metadata","status","type","roles","length","forEach","role","index","system","code","display","qualifications","qual","issuer","specialties","specialty","location","accessLevel","interactions","interaction","target","version","publisher","contact","email","join","str","replace","parseFSH","fshContent","lines","split","map","line","trim","filter","startsWith","includes","validateActorDefinition","errors","match","isValid","saveToStagingGround","validation","filePath","stagingGroundService","updateFile","actorId","actorName","lastModified","Date","now","source","success","content","message","getFromStagingGround","stagingGround","getStagingGround","file","files","find","f","path","timestamp","listStagedActors","_file$metadata","endsWith","_file$metadata2","_file$metadata3","pop","sort","a","b","removeFromStagingGround","removeFile","createEmptyActorDefinition","constraints","availability","jurisdiction","limitations","tags","getActorTemplates","BasicInfoTab","_ref","onFieldChange","_jsxs","className","children","_jsx","htmlFor","value","onChange","e","placeholder","pattern","rows","RolesTab","_ref2","onNestedFieldChange","onAddItem","onRemoveItem","onClick","ContextTab","_ref3","_actorDefinition$loca","_actorDefinition$loca2","_objectSpread","MetadataTab","_ref4","_actorDefinition$meta2","_actorDefinition$meta3","_actorDefinition$meta4","_actorDefinition$meta5","_actorDefinition$meta6","newContacts","splice","tag","ActorEditor","navigate","useNavigate","profile","repository","branch","useDAKParams","editActorId","setActorDefinition","useState","loading","setLoading","saving","setSaving","setErrors","showPreview","setShowPreview","fshPreview","setFshPreview","stagedActors","setStagedActors","showActorList","setShowActorList","activeTab","setActiveTab","useEffect","async","actorDefinitionService","general","initializeEditor","handleFieldChange","useCallback","field","prev","newErrors","handleNestedFieldChange","parentField","newDefinition","addArrayItem","defaultItem","arguments","undefined","removeArrayItem","_","i","validateForm","fieldErrors","generatePreview","PageLayout","pageName","title","disabled","result","alert","login","template","loadTemplate","actor","toLocaleDateString","loadStagedActor","deleteStagedActor","window","confirm","_Fragment","stopPropagation","navigator","clipboard","writeText"],"sourceRoot":""}