{"version":3,"file":"static/js/3166.ebe30205.chunk.js","mappings":"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","sources":["components/BPMNViewer.js","services/lazyFactoryService.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport { PageLayout, usePage } from './framework';\nimport { createLazyBpmnViewer } from '../services/lazyFactoryService';\n\nconst BPMNViewerComponent = () => {\n  return (\n    <PageLayout pageName=\"bpmn-viewer\">\n      <BPMNViewerContent />\n    </PageLayout>\n  );\n};\n\nconst BPMNViewerContent = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const viewerRef = useRef(null);\n  const containerRef = useRef(null);\n  \n  // Get page data from framework\n  const { profile, repository, branch, asset, loading: pageLoading, error: pageError } = usePage();\n  \n  console.log('BPMNViewer: Page framework data:', { profile: !!profile, repository: !!repository, branch, asset });\n  console.log('BPMNViewer: Location state (legacy):', location.state);\n  \n  // Legacy support for location.state (backward compatibility)\n  const { component, selectedFile, selectedBranch } = location.state || {};\n  \n  // Use framework data as primary source, fall back to location state\n  const currentProfile = profile || location.state?.profile;\n  const currentRepository = repository || location.state?.repository;\n  const currentBranch = branch || selectedBranch;\n  \n  console.log('BPMNViewer: Final computed values:', {\n    currentProfile: !!currentProfile,\n    currentRepository: !!currentRepository,\n    currentBranch,\n    asset\n  });\n  \n  // Create selectedFile from asset path or use legacy selectedFile\n  const currentSelectedFile = useMemo(() => {\n    return asset ? {\n      name: asset.split('/').pop(),\n      path: asset\n    } : selectedFile;\n  }, [asset, selectedFile]);\n  \n  const [loading, setLoading] = useState(true);\n  const [loadingStep, setLoadingStep] = useState('initializing');\n  const [error, setError] = useState(null);\n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n  const [enhancedFullwidth, setEnhancedFullwidth] = useState(false);\n  const [autoHide, setAutoHide] = useState(false);\n\n  // Check write permissions\n  useEffect(() => {\n    const checkPermissions = async () => {\n      if (currentRepository && currentProfile) {\n        try {\n          // Simple permission check - in real app, this would use githubService\n          const writeAccess = currentProfile.token && currentRepository.permissions?.push;\n          setHasWriteAccess(writeAccess || false);\n        } catch (error) {\n          console.warn('Could not check write permissions:', error);\n          setHasWriteAccess(false);\n        }\n      }\n    };\n\n    checkPermissions();\n  }, [currentRepository, currentProfile]);\n\n  // Load BPMN file content with enhanced loading states\n  const loadBpmnContent = useCallback(async () => {\n    console.log('🚀 BPMNViewer: loadBpmnContent called with:', {\n      hasViewer: !!viewerRef.current,\n      selectedFile: currentSelectedFile,\n      repository: currentRepository ? {\n        name: currentRepository.name,\n        owner: currentRepository.owner\n      } : null\n    });\n\n    if (!viewerRef.current || !currentSelectedFile || !currentRepository) {\n      console.warn('❌ BPMNViewer: Missing required parameters for loadBpmnContent:', {\n        hasViewer: !!viewerRef.current,\n        hasSelectedFile: !!currentSelectedFile,\n        hasRepository: !!currentRepository\n      });\n      return;\n    }\n\n    // Declare variables outside try block so they're accessible in catch block\n    const owner = currentRepository.owner?.login || currentRepository.full_name.split('/')[0];\n    const repoName = currentRepository.name;\n    const ref = currentBranch || 'main';\n    try {\n      setLoading(true);\n      setError(null);\n      setLoadingStep('initializing');\n\n      console.log('🔍 BPMNViewer: Repository and file analysis:', {\n        repository: {\n          name: currentRepository.name,\n          full_name: currentRepository.full_name,\n          owner: currentRepository.owner,\n          isDemo: currentRepository.isDemo,\n          default_branch: currentRepository.default_branch\n        },\n        selectedFile: {\n          name: currentSelectedFile.name,\n          path: currentSelectedFile.path,\n          size: currentSelectedFile.size\n        },\n        derivedOwner: owner,\n        repoName: repoName,\n        ref: ref,\n        githubServiceAuthenticated: githubService.isAuth()\n      });\n\n      setLoadingStep('fetching');\n      console.log(`📂 BPMNViewer: Preparing to load BPMN content from ${owner}/${repoName}:${currentSelectedFile.path} (ref: ${ref})`);\n      console.log('📋 BPMNViewer: Full selected file object:', JSON.stringify(currentSelectedFile, null, 2));\n\n      let bpmnXml;\n      const isDemo = currentSelectedFile.path?.includes('demo/') || currentSelectedFile.sha?.startsWith('demo-');\n      \n      if (isDemo) {\n        // For demo files, generate BPMN XML locally\n        console.log('🎭 BPMNViewer: Demo file detected, generating BPMN content locally');\n        setLoadingStep('generating');\n        const processName = currentSelectedFile.name.replace('.bpmn', '').replace(/[-_]/g, ' ');\n        bpmnXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn:definitions xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" \n                  xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" \n                  xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" \n                  xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" \n                  id=\"Definitions_1\" targetNamespace=\"http://bpmn.io/schema/bpmn\">\n  <bpmn:process id=\"Process_${currentSelectedFile.name.replace(/[^a-zA-Z0-9]/g, '_')}\" isExecutable=\"false\">\n    <bpmn:startEvent id=\"StartEvent_1\" name=\"Start\">\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:task id=\"Task_1\" name=\"${processName}\">\n      <bpmn:incoming>Flow_1</bpmn:incoming>\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\n    </bpmn:task>\n    <bpmn:endEvent id=\"EndEvent_1\" name=\"End\">\n      <bpmn:incoming>Flow_2</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id=\"Flow_1\" sourceRef=\"StartEvent_1\" targetRef=\"Task_1\" />\n    <bpmn:sequenceFlow id=\"Flow_2\" sourceRef=\"Task_1\" targetRef=\"EndEvent_1\" />\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_${currentSelectedFile.name.replace(/[^a-zA-Z0-9]/g, '_')}\">\n      <bpmndi:BPMNShape id=\"StartEvent_1_di\" bpmnElement=\"StartEvent_1\">\n        <dc:Bounds x=\"152\" y=\"82\" width=\"36\" height=\"36\" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x=\"158\" y=\"125\" width=\"24\" height=\"14\" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Task_1_di\" bpmnElement=\"Task_1\">\n        <dc:Bounds x=\"250\" y=\"60\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"EndEvent_1_di\" bpmnElement=\"EndEvent_1\">\n        <dc:Bounds x=\"402\" y=\"82\" width=\"36\" height=\"36\" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x=\"410\" y=\"125\" width=\"20\" height=\"14\" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id=\"Flow_1_di\" bpmnElement=\"Flow_1\">\n        <di:waypoint x=\"188\" y=\"100\" />\n        <di:waypoint x=\"250\" y=\"100\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_2_di\" bpmnElement=\"Flow_2\">\n        <di:waypoint x=\"350\" y=\"100\" />\n        <di:waypoint x=\"402\" y=\"100\" />\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>`;\n      } else {\n        // For real files, use githubService to fetch file content\n        setLoadingStep('downloading');\n        bpmnXml = await githubService.getFileContent(owner, repoName, currentSelectedFile.path, ref);\n      }\n      \n      // Validate BPMN content\n      setLoadingStep('validating');\n      if (!bpmnXml || !bpmnXml.trim()) {\n        throw new Error('Empty or invalid BPMN file content');\n      }\n      \n      if (!bpmnXml.includes('bpmn:definitions') && !bpmnXml.includes('<definitions')) {\n        throw new Error('File does not appear to contain valid BPMN XML content');\n      }\n\n      // Import XML into viewer\n      setLoadingStep('importing');\n      console.log('🎨 BPMNViewer: Importing XML into BPMN viewer...');\n      await viewerRef.current.importXML(bpmnXml);\n      \n      // Center the diagram\n      setLoadingStep('centering');\n      try {\n        const canvas = viewerRef.current.get('canvas');\n        \n        // Defer zoom to ensure container dimensions are available\n        setTimeout(() => {\n          try {\n            canvas.zoom('fit-viewport');\n            console.log('✅ BPMNViewer: Applied fit-viewport zoom');\n          } catch (error) {\n            console.error('❌ BPMNViewer: Error applying zoom:', error);\n          }\n        }, 0);\n        \n        // Force canvas update to ensure diagram is immediately visible\n        // This prevents the issue where diagram requires a drag/mouse interaction to appear\n        // Use multiple strategies to ensure rendering\n        const forceCanvasUpdate = () => {\n          if (viewerRef.current) {\n            try {\n              const canvas = viewerRef.current.get('canvas');\n              // Trigger a canvas update by getting the viewbox\n              canvas.viewbox();\n              // Force a repaint by slightly adjusting zoom and resetting\n              const currentZoom = canvas.zoom();\n              canvas.zoom(currentZoom);\n              \n              // Also trigger a scroll event which can force repaints\n              const container = containerRef.current;\n              if (container) {\n                container.scrollTop = container.scrollTop;\n              }\n            } catch (canvasError) {\n              console.warn('⚠️ BPMNViewer: Could not force canvas update:', canvasError);\n            }\n          }\n        };\n        \n        // Apply multiple times with increasing delays to ensure it works\n        setTimeout(forceCanvasUpdate, 50);\n        setTimeout(forceCanvasUpdate, 150);\n        setTimeout(forceCanvasUpdate, 300);\n        \n        console.log('✅ BPMNViewer: Successfully loaded and centered BPMN diagram');\n      } catch (centerError) {\n        console.warn('⚠️ BPMNViewer: Could not center diagram:', centerError);\n      }\n      \n      setLoadingStep('complete');\n      setLoading(false);\n    } catch (err) {\n      console.error('💥 BPMNViewer: Error loading BPMN file:', err);\n      console.error('🔍 BPMNViewer: Full error details:', {\n        message: err.message,\n        status: err.status,\n        stack: err.stack,\n        repository: {\n          owner: owner,\n          name: repoName,\n          ref: ref\n        },\n        file: {\n          name: currentSelectedFile.name,\n          path: currentSelectedFile.path\n        }\n      });\n      \n      setLoadingStep('error');\n      // Provide specific error messages\n      if (err.status === 404) {\n        setError('BPMN file not found in the repository.');\n      } else if (err.status === 403) {\n        setError('Access denied. This repository may be private and require authentication.');\n      } else if (err.message.includes('Empty or invalid BPMN')) {\n        setError('The selected file appears to be empty or corrupted.');\n      } else if (err.message.includes('does not appear to contain valid BPMN')) {\n        setError('The selected file does not appear to contain valid BPMN XML content.');\n      } else {\n        setError(`Failed to load BPMN diagram: ${err.message}`);\n      }\n      \n      setLoading(false);\n    }\n  }, [currentSelectedFile, currentRepository, currentBranch]);\n\n  const cleanupContainer = useCallback(() => {\n    if (containerRef.current) {\n      containerRef.current.innerHTML = '';\n      console.log('🧹 BPMNViewer: Container cleaned up');\n    }\n  }, []);\n\n  // Initialize BPMN viewer - simplified to avoid race conditions\n  useEffect(() => {\n    const initializeViewer = async () => {\n      console.log('🛠️ BPMNViewer: initializeViewer called with:', {\n        hasContainer: !!containerRef.current,\n        hasViewer: !!viewerRef.current,\n        selectedFile: currentSelectedFile ? currentSelectedFile.name : 'none',\n        containerRefCurrent: containerRef.current,\n        viewerRefCurrent: viewerRef.current\n      });\n\n      if (containerRef.current && !viewerRef.current && currentSelectedFile) {\n        try {\n          // Clean the container before creating a new viewer\n          cleanupContainer();\n          \n          console.log('🔧 BPMNViewer: Creating new BPMN viewer...');\n          console.log('🔧 BPMNViewer: Container element details:', {\n            tagName: containerRef.current.tagName,\n            className: containerRef.current.className,\n            clientWidth: containerRef.current.clientWidth,\n            clientHeight: containerRef.current.clientHeight,\n            innerHTML: containerRef.current.innerHTML.length\n          });\n          \n          // Lazy load BPMN.js viewer to improve initial page responsiveness\n          viewerRef.current = await createLazyBpmnViewer({\n            container: containerRef.current\n          });\n          console.log('✅ BPMNViewer: BPMN viewer initialized successfully');\n          console.log('📞 BPMNViewer: About to call loadBpmnContent()...');\n          \n          loadBpmnContent();\n        } catch (error) {\n          console.error('❌ BPMNViewer: Failed to initialize BPMN viewer:', error);\n          console.error('🔍 BPMNViewer: Initialization error details:', {\n            message: error.message,\n            stack: error.stack,\n            containerExists: !!containerRef.current,\n            containerContent: containerRef.current ? containerRef.current.innerHTML : 'N/A'\n          });\n          \n          // If it's an \"element already exists\" error, try to clean up and retry once\n          if (error.message.includes('already exists')) {\n            console.log('🔄 BPMNViewer: Detected \"element already exists\" error, attempting cleanup and retry...');\n            cleanupContainer();\n            \n            // Wait a bit and try again\n            setTimeout(async () => {\n              if (containerRef.current && !viewerRef.current) {\n                try {\n                  console.log('🔄 BPMNViewer: Retrying viewer creation after cleanup...');\n                  // Lazy load BPMN.js viewer to improve initial page responsiveness\n                  viewerRef.current = await createLazyBpmnViewer({\n                    container: containerRef.current\n                  });\n                  console.log('✅ BPMNViewer: BPMN viewer initialized successfully on retry');\n                  loadBpmnContent();\n                } catch (retryError) {\n                  console.error('❌ BPMNViewer: Failed to initialize BPMN viewer on retry:', retryError);\n                  setError(`Failed to initialize BPMN viewer: ${retryError.message}`);\n                  setLoading(false);\n                }\n              }\n            }, 100);\n          } else {\n            setError(`Failed to initialize BPMN viewer: ${error.message}`);\n            setLoading(false);\n          }\n        }\n      } else {\n        console.log('⚠️ BPMNViewer: Skipping viewer initialization:', {\n          hasContainer: !!containerRef.current,\n          hasViewer: !!viewerRef.current,\n          hasSelectedFile: !!currentSelectedFile,\n          reason: !containerRef.current ? 'No container' : \n                  viewerRef.current ? 'Viewer already exists' : \n                  !currentSelectedFile ? 'No selected file' : 'Unknown'\n        });\n      }\n    };\n\n    const waitForContainer = (attempt = 0) => {\n      const maxAttempts = 50; // Try for up to 5 seconds (50 * 100ms)\n      \n      if (containerRef.current) {\n        console.log(`✅ BPMNViewer: Container found on attempt ${attempt + 1}`);\n        initializeViewer();\n      } else if (attempt < maxAttempts) {\n        console.log(`⏳ BPMNViewer: Container not ready, attempt ${attempt + 1}/${maxAttempts}, retrying in 100ms...`);\n        setTimeout(() => waitForContainer(attempt + 1), 100);\n      } else {\n        console.error('❌ BPMNViewer: Container never became available after maximum attempts');\n        setError('Failed to initialize BPMN viewer: container not available');\n        setLoading(false);\n      }\n    };\n\n    if (currentSelectedFile) {\n      console.log('⏰ BPMNViewer: Starting container readiness check for selectedFile:', currentSelectedFile.name);\n      waitForContainer();\n    } else {\n      console.log('❌ BPMNViewer: No currentSelectedFile, skipping viewer initialization');\n    }\n\n    return () => {\n      if (viewerRef.current) {\n        try {\n          viewerRef.current.destroy();\n        } catch (error) {\n          console.warn('Warning cleaning up BPMN viewer:', error);\n        }\n        viewerRef.current = null;\n      }\n      \n      // Clean up mutation observer\n      if (containerRef.current && containerRef.current._bpmnObserver) {\n        containerRef.current._bpmnObserver.disconnect();\n        delete containerRef.current._bpmnObserver;\n      }\n    };\n  }, [currentSelectedFile, loadBpmnContent, cleanupContainer]);\n\n  const handleEditMode = () => {\n    if (!hasWriteAccess) {\n      alert('You need write permissions to edit BPMN files. Please check your GitHub token permissions.');\n      return;\n    }\n\n    const owner = currentRepository.owner?.login || currentRepository.full_name.split('/')[0];\n    const repoName = currentRepository.name;\n    const path = currentBranch \n      ? `/bpmn-editor/${owner}/${repoName}/${currentBranch}`\n      : `/bpmn-editor/${owner}/${repoName}`;\n\n    navigate(path, {\n      state: {\n        profile: currentProfile,\n        repository: currentRepository,\n        component,\n        selectedFile: currentSelectedFile,\n        selectedBranch: currentBranch,\n        mode: 'edit'\n      }\n    });\n  };\n\n  const handleBackToSelection = () => {\n    navigate('/business-process-selection', {\n      state: {\n        profile: currentProfile,\n        repository: currentRepository,\n        component,\n        selectedBranch: currentBranch\n      }\n    });\n  };\n\n  const handleToggleEnhancedFullwidth = () => {\n    const newState = !enhancedFullwidth;\n    setEnhancedFullwidth(newState);\n    \n    // Add/remove class on body for enhanced fullwidth mode\n    if (newState) {\n      document.body.classList.add('enhanced-fullwidth-active');\n    } else {\n      document.body.classList.remove('enhanced-fullwidth-active');\n    }\n  };\n\n  const handleToggleAutoHide = () => {\n    setAutoHide(!autoHide);\n  };\n\n  // Cleanup effect for enhanced fullwidth\n  useEffect(() => {\n    return () => {\n      // Clean up body class on unmount\n      document.body.classList.remove('enhanced-fullwidth-active');\n    };\n  }, []);\n\n  // Update body class when enhanced fullwidth changes\n  useEffect(() => {\n    if (enhancedFullwidth) {\n      document.body.classList.add('enhanced-fullwidth-active');\n    } else {\n      document.body.classList.remove('enhanced-fullwidth-active');\n    }\n    \n    return () => {\n      document.body.classList.remove('enhanced-fullwidth-active');\n    };\n  }, [enhancedFullwidth]);\n\n  // Handle redirect when data is missing\n  useEffect(() => {\n    // Check if we're on an asset URL pattern (has more than 5 path segments after /sgex)\n    const pathSegments = location.pathname.split('/').filter(segment => segment);\n    const isAssetURL = pathSegments.length > 5; // /sgex/bpmn-viewer/user/repo/branch/asset...\n    \n    // If we're on an asset URL, wait for framework to load before deciding to redirect\n    if (isAssetURL) {\n      // Only redirect if we have both no framework data AND no location state\n      if (!profile && !repository && !asset && \n          !currentProfile && !currentRepository && !currentSelectedFile) {\n        console.log('BPMNViewer: On asset URL but no data available from framework or location state, redirecting to home');\n        navigate('/');\n      }\n    } else {\n      // For non-asset URLs, use the original logic\n      if (!currentProfile || !currentRepository || !currentSelectedFile) {\n        console.log('BPMNViewer: Missing required data, redirecting to home:', {\n          hasProfile: !!currentProfile,\n          hasRepository: !!currentRepository,\n          hasSelectedFile: !!currentSelectedFile\n        });\n        navigate('/');\n      }\n    }\n  }, [currentProfile, currentRepository, currentSelectedFile, profile, repository, asset, location.pathname, navigate]);\n\n  // Don't render the component if we're missing required data, unless we're on asset URL and framework is loading\n  const pathSegments = location.pathname.split('/').filter(segment => segment);\n  const isAssetURL = pathSegments.length > 5;\n  \n  if (!currentProfile || !currentRepository || !currentSelectedFile) {\n    if (isAssetURL && (!profile || !repository || !asset)) {\n      // Framework might still be loading for asset URL\n      return <div>Loading framework data...</div>;\n    }\n    return <div>Loading or redirecting...</div>;\n  }\n\n  return (\n      <div className={`bpmn-viewer ${enhancedFullwidth ? 'enhanced-fullwidth' : ''} ${autoHide ? 'auto-hide' : ''}`}>\n      <div className=\"viewer-content\">\n\n        <div className=\"viewer-main\">\n          <div className=\"viewer-toolbar\">\n            <div className=\"toolbar-left\">\n              <h3>{currentSelectedFile.name}</h3>\n              <div className=\"artifact-badges\">\n                <span className=\"artifact-badge bpmn\">📊 BPMN</span>\n                <span className=\"dak-component-badge\">🔄 Business Process</span>\n              </div>\n              <span className=\"view-mode-badge\">👁️ Read-Only View</span>\n            </div>\n            <div className=\"toolbar-right\">\n              <button \n                className=\"action-btn secondary\"\n                onClick={handleToggleAutoHide}\n                title=\"Toggle auto-hide headers/footers\"\n              >\n                {autoHide ? '📌' : '👁️'} Auto-Hide\n              </button>\n              <button \n                className=\"action-btn secondary\"\n                onClick={handleToggleEnhancedFullwidth}\n                title=\"Toggle enhanced fullwidth mode\"\n              >\n                {enhancedFullwidth ? '🔳' : '⛶'} Full Container\n              </button>\n              <button \n                className=\"action-btn secondary\"\n                onClick={handleBackToSelection}\n              >\n                ← Back to List\n              </button>\n              {hasWriteAccess && (\n                <button \n                  className=\"action-btn primary\"\n                  onClick={handleEditMode}\n                >\n                  ✏️ Edit\n                </button>\n              )}\n            </div>\n          </div>\n\n          <div className=\"diagram-container\">\n            {loading ? (\n              <div className=\"loading-overlay\">\n                <div className=\"spinner\"></div>\n                <div className=\"loading-info\">\n                  <p>Loading BPMN diagram...</p>\n                  <p className=\"loading-details\">\n                    Fetching {currentSelectedFile.name} from {currentRepository.name}\n                  </p>\n                  <div className=\"loading-progress\">\n                    <div className={`loading-step ${loadingStep === 'initializing' ? 'active' : loadingStep === 'fetching' || loadingStep === 'downloading' || loadingStep === 'generating' || loadingStep === 'validating' || loadingStep === 'importing' || loadingStep === 'centering' || loadingStep === 'complete' ? 'complete' : ''}`}>\n                      Initializing viewer\n                    </div>\n                    <div className={`loading-step ${loadingStep === 'fetching' || loadingStep === 'downloading' || loadingStep === 'generating' ? 'active' : loadingStep === 'validating' || loadingStep === 'importing' || loadingStep === 'centering' || loadingStep === 'complete' ? 'complete' : ''}`}>\n                      {loadingStep === 'generating' ? 'Generating demo content' : 'Fetching BPMN file'}\n                    </div>\n                    <div className={`loading-step ${loadingStep === 'validating' ? 'active' : loadingStep === 'importing' || loadingStep === 'centering' || loadingStep === 'complete' ? 'complete' : ''}`}>\n                      Validating BPMN XML\n                    </div>\n                    <div className={`loading-step ${loadingStep === 'importing' ? 'active' : loadingStep === 'centering' || loadingStep === 'complete' ? 'complete' : ''}`}>\n                      Importing diagram\n                    </div>\n                    <div className={`loading-step ${loadingStep === 'centering' ? 'active' : loadingStep === 'complete' ? 'complete' : ''}`}>\n                      Centering view\n                    </div>\n                  </div>\n                  <p className=\"loading-hint\">\n                    This may take a few moments for large files or slow connections.\n                  </p>\n                </div>\n              </div>\n            ) : error ? (\n              <div className=\"error-overlay\">\n                <p>❌ {error}</p>\n                <div className=\"error-actions\">\n                  <button \n                    className=\"action-btn secondary\"\n                    onClick={() => loadBpmnContent()}\n                  >\n                    🔄 Retry\n                  </button>\n                  <button \n                    className=\"action-btn secondary\"\n                    onClick={() => navigate('/business-process-selection', {\n                      state: { profile: currentProfile, repository: currentRepository, component, selectedBranch: currentBranch }\n                    })}\n                  >\n                    ← Back to List\n                  </button>\n                </div>\n              </div>\n            ) : null}\n            \n            {/* Always render the BPMN container so the ref can be set */}\n            <div \n              className=\"bpmn-container\" \n              ref={containerRef}\n              style={{ \n                display: loading || error ? 'none' : 'block',\n                width: '100%',\n                height: '100%'\n              }}\n            ></div>\n          </div>\n\n          <div className=\"diagram-info\">\n            <div className=\"condensed-file-info\">\n              <div className=\"condensed-info-item\">\n                <span className=\"label\">📁</span>\n                <span className=\"value\">{currentSelectedFile?.name || 'No file'}</span>\n              </div>\n              <div className=\"condensed-info-item\">\n                <span className=\"label\">📏</span>\n                <span className=\"value\">{currentSelectedFile?.size ? `${(currentSelectedFile.size / 1024).toFixed(1)} KB` : 'N/A'}</span>\n              </div>\n              <div className=\"condensed-info-item\">\n                <span className=\"label\">🌿</span>\n                <span className=\"value\">{currentBranch || 'main'}</span>\n              </div>\n            </div>\n            <div className=\"condensed-view-mode\">\n              <span className={`condensed-access-badge ${hasWriteAccess ? 'write' : 'read'}`}>\n                {hasWriteAccess ? '✏️ Edit' : '👁️ Read'}\n              </span>\n              <span className=\"condensed-info-item\">\n                <span className=\"value\">\n                  {enhancedFullwidth ? '⛶ Full Container' : autoHide ? '👁️ Auto-Hide' : '📺 Fullwidth'}\n                </span>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      </div>\n  );\n};\n\nexport default BPMNViewerComponent;","/**\n * SGEX Lazy Factory Service\n * \n * Handles creation of configured instances for lazy-loaded libraries.\n * This service provides:\n * 1. Factory functions for creating pre-configured instances\n * 2. Instance configuration with sensible defaults\n * 3. Convenience functions for common use cases\n * \n * Split from lazyRouteUtils.js for better separation of concerns.\n */\n\nimport { \n  lazyLoadOctokit, \n  lazyLoadBpmnModeler, \n  lazyLoadBpmnViewer, \n  lazyLoadAjv, \n  lazyLoadAjvFormats \n} from './libraryLoaderService';\n\n/**\n * Create a lazy-loaded Octokit instance\n * @param {Object} options - Octokit configuration options\n * @returns {Promise<Octokit>} Configured Octokit instance\n */\nexport async function createLazyOctokit(options = {}) {\n  const Octokit = await lazyLoadOctokit();\n  return new Octokit(options);\n}\n\n/**\n * Create a lazy-loaded BPMN Modeler instance\n * @param {Object} options - BpmnModeler configuration options\n * @returns {Promise<BpmnModeler>} Configured BpmnModeler instance\n */\nexport async function createLazyBpmnModeler(options = {}) {\n  const BpmnModeler = await lazyLoadBpmnModeler();\n  return new BpmnModeler(options);\n}\n\n/**\n * Create a lazy-loaded BPMN Viewer instance\n * @param {Object} options - BpmnViewer configuration options\n * @returns {Promise<BpmnViewer>} Configured BpmnViewer instance\n */\nexport async function createLazyBpmnViewer(options = {}) {\n  const BpmnViewer = await lazyLoadBpmnViewer();\n  return new BpmnViewer(options);\n}\n\n/**\n * Create a lazy-loaded AJV instance with formats\n * @param {Object} options - AJV configuration options\n * @returns {Promise<Ajv>} Configured AJV instance with formats added\n */\nexport async function createLazyAjv(options = {}) {\n  const Ajv = await lazyLoadAjv();\n  const addFormats = await lazyLoadAjvFormats();\n  const ajv = new Ajv(options);\n  addFormats(ajv);\n  return ajv;\n}\n\n/**\n * Lazy factory utilities for unified access\n */\nconst LazyFactoryService = {\n  createLazyOctokit,\n  createLazyBpmnModeler,\n  createLazyBpmnViewer,\n  createLazyAjv\n};\n\nexport default LazyFactoryService;"],"names":["BPMNViewerContent","_location$state","_location$state2","location","useLocation","navigate","useNavigate","viewerRef","useRef","containerRef","profile","repository","branch","asset","loading","pageLoading","error","pageError","usePage","console","log","state","component","selectedFile","selectedBranch","currentProfile","currentRepository","currentBranch","currentSelectedFile","useMemo","name","split","pop","path","setLoading","useState","loadingStep","setLoadingStep","setError","hasWriteAccess","setHasWriteAccess","enhancedFullwidth","setEnhancedFullwidth","autoHide","setAutoHide","useEffect","async","_currentRepository$pe","writeAccess","token","permissions","push","warn","checkPermissions","loadBpmnContent","useCallback","_currentRepository$ow","hasViewer","current","owner","hasSelectedFile","hasRepository","login","full_name","repoName","ref","_currentSelectedFile$","_currentSelectedFile$2","bpmnXml","isDemo","default_branch","size","derivedOwner","githubServiceAuthenticated","githubService","isAuth","concat","JSON","stringify","includes","sha","startsWith","processName","replace","getFileContent","trim","Error","importXML","canvas","get","setTimeout","zoom","forceCanvasUpdate","viewbox","currentZoom","container","scrollTop","canvasError","centerError","err","message","status","stack","file","cleanupContainer","innerHTML","waitForContainer","attempt","arguments","length","undefined","hasContainer","containerRefCurrent","viewerRefCurrent","tagName","className","clientWidth","clientHeight","createLazyBpmnViewer","containerExists","containerContent","retryError","reason","initializeViewer","destroy","_bpmnObserver","disconnect","document","body","classList","remove","add","pathname","filter","segment","hasProfile","isAssetURL","_jsx","children","_jsxs","onClick","handleToggleAutoHide","title","handleToggleEnhancedFullwidth","newState","handleBackToSelection","handleEditMode","_currentRepository$ow2","alert","mode","style","display","width","height","toFixed","BPMNViewerComponent","PageLayout","pageName","createLazyOctokit","options","lazyLoadOctokit","createLazyBpmnModeler","lazyLoadBpmnModeler","lazyLoadBpmnViewer"],"sourceRoot":""}