{"version":3,"file":"static/js/3.8868cc36.chunk.js","mappings":"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","sources":["../node_modules/ajv/lib/compile/validate/applicability.ts","../node_modules/fast-deep-equal/index.js","../node_modules/ajv/lib/compile/validate/defaults.ts","../node_modules/ajv/lib/vocabularies/applicator/items.ts","../node_modules/fast-uri/lib/utils.js","../node_modules/ajv/lib/compile/validate/subschema.ts","../node_modules/ajv/lib/vocabularies/validation/limitNumber.ts","../node_modules/ajv/lib/vocabularies/core/ref.ts","../node_modules/ajv/lib/vocabularies/core/index.ts","../node_modules/ajv/lib/vocabularies/discriminator/types.ts","../node_modules/ajv/lib/vocabularies/format/format.ts","../node_modules/ajv/lib/runtime/ucs2length.ts","../node_modules/ajv/lib/runtime/validation_error.ts","../node_modules/ajv/lib/core.ts","../node_modules/ajv/lib/vocabularies/validation/limitLength.ts","../node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js","../node_modules/ajv/lib/compile/index.ts","../node_modules/ajv/lib/compile/rules.ts","../node_modules/ajv/lib/compile/codegen/scope.ts","../node_modules/ajv/lib/compile/codegen/index.ts","../node_modules/ajv/lib/compile/validate/keyword.ts","../node_modules/ajv/lib/vocabularies/code.ts","../node_modules/ajv/lib/vocabularies/applicator/additionalItems.ts","../node_modules/fast-uri/lib/schemes.js","../node_modules/ajv/lib/compile/resolve.ts","../node_modules/ajv/lib/vocabularies/core/id.ts","../node_modules/ajv/lib/vocabularies/applicator/index.ts","../node_modules/ajv/lib/compile/errors.ts","../node_modules/ajv/lib/vocabularies/validation/limitItems.ts","../node_modules/ajv/lib/compile/validate/boolSchema.ts","../node_modules/ajv/lib/compile/ref_error.ts","../node_modules/ajv/lib/runtime/equal.ts","../node_modules/ajv/lib/vocabularies/validation/uniqueItems.ts","../node_modules/fast-uri/lib/scopedChars.js","../node_modules/ajv/lib/vocabularies/applicator/items2020.ts","../node_modules/ajv/lib/vocabularies/applicator/contains.ts","../node_modules/ajv/lib/vocabularies/validation/limitProperties.ts","../node_modules/ajv/lib/vocabularies/validation/const.ts","../node_modules/ajv/lib/vocabularies/applicator/dependencies.ts","../node_modules/ajv/lib/vocabularies/applicator/propertyNames.ts","../node_modules/ajv/lib/compile/validate/index.ts","../node_modules/ajv/lib/compile/codegen/code.ts","../node_modules/ajv/lib/vocabularies/metadata.ts","../node_modules/ajv/lib/vocabularies/validation/enum.ts","../node_modules/ajv/lib/compile/validate/dataType.ts","../node_modules/ajv/lib/vocabularies/applicator/prefixItems.ts","../node_modules/ajv/lib/vocabularies/applicator/properties.ts","../node_modules/ajv/lib/runtime/uri.ts","../node_modules/ajv/lib/ajv.ts","../node_modules/json-schema-traverse/index.js","../node_modules/ajv/lib/vocabularies/applicator/additionalProperties.ts","../node_modules/ajv/lib/vocabularies/applicator/thenElse.ts","../node_modules/ajv/lib/vocabularies/applicator/anyOf.ts","../node_modules/fast-uri/index.js","../node_modules/ajv/lib/vocabularies/validation/required.ts","../node_modules/ajv/lib/vocabularies/applicator/patternProperties.ts","../node_modules/ajv/lib/vocabularies/applicator/allOf.ts","../node_modules/ajv/lib/vocabularies/validation/multipleOf.ts","../node_modules/ajv/lib/compile/util.ts","../node_modules/ajv/lib/vocabularies/discriminator/index.ts","../node_modules/ajv/lib/compile/names.ts","../node_modules/ajv/lib/vocabularies/validation/pattern.ts","../node_modules/ajv/lib/vocabularies/validation/index.ts","../node_modules/ajv/lib/vocabularies/applicator/if.ts","../node_modules/ajv/lib/vocabularies/applicator/oneOf.ts","../node_modules/ajv/lib/vocabularies/format/index.ts","../node_modules/ajv/lib/vocabularies/applicator/not.ts","../node_modules/ajv/lib/vocabularies/draft7.ts"],"sourcesContent":["import type {AnySchemaObject} from \"../../types\"\nimport type {SchemaObjCxt} from \"..\"\nimport type {JSONType, RuleGroup, Rule} from \"../rules\"\n\nexport function schemaHasRulesForType(\n  {schema, self}: SchemaObjCxt,\n  type: JSONType\n): boolean | undefined {\n  const group = self.RULES.types[type]\n  return group && group !== true && shouldUseGroup(schema, group)\n}\n\nexport function shouldUseGroup(schema: AnySchemaObject, group: RuleGroup): boolean {\n  return group.rules.some((rule) => shouldUseRule(schema, rule))\n}\n\nexport function shouldUseRule(schema: AnySchemaObject, rule: Rule): boolean | undefined {\n  return (\n    schema[rule.keyword] !== undefined ||\n    rule.definition.implements?.some((kwd) => schema[kwd] !== undefined)\n  )\n}\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","import type {SchemaObjCxt} from \"..\"\nimport {_, getProperty, stringify} from \"../codegen\"\nimport {checkStrictMode} from \"../util\"\n\nexport function assignDefaults(it: SchemaObjCxt, ty?: string): void {\n  const {properties, items} = it.schema\n  if (ty === \"object\" && properties) {\n    for (const key in properties) {\n      assignDefault(it, key, properties[key].default)\n    }\n  } else if (ty === \"array\" && Array.isArray(items)) {\n    items.forEach((sch, i: number) => assignDefault(it, i, sch.default))\n  }\n}\n\nfunction assignDefault(it: SchemaObjCxt, prop: string | number, defaultValue: unknown): void {\n  const {gen, compositeRule, data, opts} = it\n  if (defaultValue === undefined) return\n  const childData = _`${data}${getProperty(prop)}`\n  if (compositeRule) {\n    checkStrictMode(it, `default is ignored for: ${childData}`)\n    return\n  }\n\n  let condition = _`${childData} === undefined`\n  if (opts.useDefaults === \"empty\") {\n    condition = _`${condition} || ${childData} === null || ${childData} === \"\"`\n  }\n  // `${childData} === undefined` +\n  // (opts.useDefaults === \"empty\" ? ` || ${childData} === null || ${childData} === \"\"` : \"\")\n  gen.if(condition, _`${childData} = ${stringify(defaultValue)}`)\n}\n","import type {CodeKeywordDefinition, AnySchema, AnySchemaObject} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_} from \"../../compile/codegen\"\nimport {alwaysValidSchema, mergeEvaluated, checkStrictMode} from \"../../compile/util\"\nimport {validateArray} from \"../code\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"items\",\n  type: \"array\",\n  schemaType: [\"object\", \"array\", \"boolean\"],\n  before: \"uniqueItems\",\n  code(cxt: KeywordCxt) {\n    const {schema, it} = cxt\n    if (Array.isArray(schema)) return validateTuple(cxt, \"additionalItems\", schema)\n    it.items = true\n    if (alwaysValidSchema(it, schema)) return\n    cxt.ok(validateArray(cxt))\n  },\n}\n\nexport function validateTuple(\n  cxt: KeywordCxt,\n  extraItems: string,\n  schArr: AnySchema[] = cxt.schema\n): void {\n  const {gen, parentSchema, data, keyword, it} = cxt\n  checkStrictTuple(parentSchema)\n  if (it.opts.unevaluated && schArr.length && it.items !== true) {\n    it.items = mergeEvaluated.items(gen, schArr.length, it.items)\n  }\n  const valid = gen.name(\"valid\")\n  const len = gen.const(\"len\", _`${data}.length`)\n  schArr.forEach((sch: AnySchema, i: number) => {\n    if (alwaysValidSchema(it, sch)) return\n    gen.if(_`${len} > ${i}`, () =>\n      cxt.subschema(\n        {\n          keyword,\n          schemaProp: i,\n          dataProp: i,\n        },\n        valid\n      )\n    )\n    cxt.ok(valid)\n  })\n\n  function checkStrictTuple(sch: AnySchemaObject): void {\n    const {opts, errSchemaPath} = it\n    const l = schArr.length\n    const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false)\n    if (opts.strictTuples && !fullTuple) {\n      const msg = `\"${keyword}\" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path \"${errSchemaPath}\"`\n      checkStrictMode(it, msg, opts.strictTuples)\n    }\n  }\n}\n\nexport default def\n","'use strict'\n\nconst { HEX } = require('./scopedChars')\n\nconst IPV4_REG = /^(?:(?:25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]\\d|\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]\\d|\\d)$/u\n\nfunction normalizeIPv4 (host) {\n  if (findToken(host, '.') < 3) { return { host, isIPV4: false } }\n  const matches = host.match(IPV4_REG) || []\n  const [address] = matches\n  if (address) {\n    return { host: stripLeadingZeros(address, '.'), isIPV4: true }\n  } else {\n    return { host, isIPV4: false }\n  }\n}\n\n/**\n * @param {string[]} input\n * @param {boolean} [keepZero=false]\n * @returns {string|undefined}\n */\nfunction stringArrayToHexStripped (input, keepZero = false) {\n  let acc = ''\n  let strip = true\n  for (const c of input) {\n    if (HEX[c] === undefined) return undefined\n    if (c !== '0' && strip === true) strip = false\n    if (!strip) acc += c\n  }\n  if (keepZero && acc.length === 0) acc = '0'\n  return acc\n}\n\nfunction getIPV6 (input) {\n  let tokenCount = 0\n  const output = { error: false, address: '', zone: '' }\n  const address = []\n  const buffer = []\n  let isZone = false\n  let endipv6Encountered = false\n  let endIpv6 = false\n\n  function consume () {\n    if (buffer.length) {\n      if (isZone === false) {\n        const hex = stringArrayToHexStripped(buffer)\n        if (hex !== undefined) {\n          address.push(hex)\n        } else {\n          output.error = true\n          return false\n        }\n      }\n      buffer.length = 0\n    }\n    return true\n  }\n\n  for (let i = 0; i < input.length; i++) {\n    const cursor = input[i]\n    if (cursor === '[' || cursor === ']') { continue }\n    if (cursor === ':') {\n      if (endipv6Encountered === true) {\n        endIpv6 = true\n      }\n      if (!consume()) { break }\n      tokenCount++\n      address.push(':')\n      if (tokenCount > 7) {\n        // not valid\n        output.error = true\n        break\n      }\n      if (i - 1 >= 0 && input[i - 1] === ':') {\n        endipv6Encountered = true\n      }\n      continue\n    } else if (cursor === '%') {\n      if (!consume()) { break }\n      // switch to zone detection\n      isZone = true\n    } else {\n      buffer.push(cursor)\n      continue\n    }\n  }\n  if (buffer.length) {\n    if (isZone) {\n      output.zone = buffer.join('')\n    } else if (endIpv6) {\n      address.push(buffer.join(''))\n    } else {\n      address.push(stringArrayToHexStripped(buffer))\n    }\n  }\n  output.address = address.join('')\n  return output\n}\n\nfunction normalizeIPv6 (host) {\n  if (findToken(host, ':') < 2) { return { host, isIPV6: false } }\n  const ipv6 = getIPV6(host)\n\n  if (!ipv6.error) {\n    let newHost = ipv6.address\n    let escapedHost = ipv6.address\n    if (ipv6.zone) {\n      newHost += '%' + ipv6.zone\n      escapedHost += '%25' + ipv6.zone\n    }\n    return { host: newHost, escapedHost, isIPV6: true }\n  } else {\n    return { host, isIPV6: false }\n  }\n}\n\nfunction stripLeadingZeros (str, token) {\n  let out = ''\n  let skip = true\n  const l = str.length\n  for (let i = 0; i < l; i++) {\n    const c = str[i]\n    if (c === '0' && skip) {\n      if ((i + 1 <= l && str[i + 1] === token) || i + 1 === l) {\n        out += c\n        skip = false\n      }\n    } else {\n      if (c === token) {\n        skip = true\n      } else {\n        skip = false\n      }\n      out += c\n    }\n  }\n  return out\n}\n\nfunction findToken (str, token) {\n  let ind = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === token) ind++\n  }\n  return ind\n}\n\nconst RDS1 = /^\\.\\.?\\//u\nconst RDS2 = /^\\/\\.(?:\\/|$)/u\nconst RDS3 = /^\\/\\.\\.(?:\\/|$)/u\nconst RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/u\n\nfunction removeDotSegments (input) {\n  const output = []\n\n  while (input.length) {\n    if (input.match(RDS1)) {\n      input = input.replace(RDS1, '')\n    } else if (input.match(RDS2)) {\n      input = input.replace(RDS2, '/')\n    } else if (input.match(RDS3)) {\n      input = input.replace(RDS3, '/')\n      output.pop()\n    } else if (input === '.' || input === '..') {\n      input = ''\n    } else {\n      const im = input.match(RDS5)\n      if (im) {\n        const s = im[0]\n        input = input.slice(s.length)\n        output.push(s)\n      } else {\n        throw new Error('Unexpected dot segment condition')\n      }\n    }\n  }\n  return output.join('')\n}\n\nfunction normalizeComponentEncoding (components, esc) {\n  const func = esc !== true ? escape : unescape\n  if (components.scheme !== undefined) {\n    components.scheme = func(components.scheme)\n  }\n  if (components.userinfo !== undefined) {\n    components.userinfo = func(components.userinfo)\n  }\n  if (components.host !== undefined) {\n    components.host = func(components.host)\n  }\n  if (components.path !== undefined) {\n    components.path = func(components.path)\n  }\n  if (components.query !== undefined) {\n    components.query = func(components.query)\n  }\n  if (components.fragment !== undefined) {\n    components.fragment = func(components.fragment)\n  }\n  return components\n}\n\nfunction recomposeAuthority (components) {\n  const uriTokens = []\n\n  if (components.userinfo !== undefined) {\n    uriTokens.push(components.userinfo)\n    uriTokens.push('@')\n  }\n\n  if (components.host !== undefined) {\n    let host = unescape(components.host)\n    const ipV4res = normalizeIPv4(host)\n\n    if (ipV4res.isIPV4) {\n      host = ipV4res.host\n    } else {\n      const ipV6res = normalizeIPv6(ipV4res.host)\n      if (ipV6res.isIPV6 === true) {\n        host = `[${ipV6res.escapedHost}]`\n      } else {\n        host = components.host\n      }\n    }\n    uriTokens.push(host)\n  }\n\n  if (typeof components.port === 'number' || typeof components.port === 'string') {\n    uriTokens.push(':')\n    uriTokens.push(String(components.port))\n  }\n\n  return uriTokens.length ? uriTokens.join('') : undefined\n};\n\nmodule.exports = {\n  recomposeAuthority,\n  normalizeComponentEncoding,\n  removeDotSegments,\n  normalizeIPv4,\n  normalizeIPv6,\n  stringArrayToHexStripped\n}\n","import type {AnySchema} from \"../../types\"\nimport type {SchemaObjCxt} from \"..\"\nimport {_, str, getProperty, Code, Name} from \"../codegen\"\nimport {escapeFragment, getErrorPath, Type} from \"../util\"\nimport type {JSONType} from \"../rules\"\n\nexport interface SubschemaContext {\n  // TODO use Optional? align with SchemCxt property types\n  schema: AnySchema\n  schemaPath: Code\n  errSchemaPath: string\n  topSchemaRef?: Code\n  errorPath?: Code\n  dataLevel?: number\n  dataTypes?: JSONType[]\n  data?: Name\n  parentData?: Name\n  parentDataProperty?: Code | number\n  dataNames?: Name[]\n  dataPathArr?: (Code | number)[]\n  propertyName?: Name\n  jtdDiscriminator?: string\n  jtdMetadata?: boolean\n  compositeRule?: true\n  createErrors?: boolean\n  allErrors?: boolean\n}\n\nexport type SubschemaArgs = Partial<{\n  keyword: string\n  schemaProp: string | number\n  schema: AnySchema\n  schemaPath: Code\n  errSchemaPath: string\n  topSchemaRef: Code\n  data: Name | Code\n  dataProp: Code | string | number\n  dataTypes: JSONType[]\n  definedProperties: Set<string>\n  propertyName: Name\n  dataPropType: Type\n  jtdDiscriminator: string\n  jtdMetadata: boolean\n  compositeRule: true\n  createErrors: boolean\n  allErrors: boolean\n}>\n\nexport function getSubschema(\n  it: SchemaObjCxt,\n  {keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef}: SubschemaArgs\n): SubschemaContext {\n  if (keyword !== undefined && schema !== undefined) {\n    throw new Error('both \"keyword\" and \"schema\" passed, only one allowed')\n  }\n\n  if (keyword !== undefined) {\n    const sch = it.schema[keyword]\n    return schemaProp === undefined\n      ? {\n          schema: sch,\n          schemaPath: _`${it.schemaPath}${getProperty(keyword)}`,\n          errSchemaPath: `${it.errSchemaPath}/${keyword}`,\n        }\n      : {\n          schema: sch[schemaProp],\n          schemaPath: _`${it.schemaPath}${getProperty(keyword)}${getProperty(schemaProp)}`,\n          errSchemaPath: `${it.errSchemaPath}/${keyword}/${escapeFragment(schemaProp)}`,\n        }\n  }\n\n  if (schema !== undefined) {\n    if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {\n      throw new Error('\"schemaPath\", \"errSchemaPath\" and \"topSchemaRef\" are required with \"schema\"')\n    }\n    return {\n      schema,\n      schemaPath,\n      topSchemaRef,\n      errSchemaPath,\n    }\n  }\n\n  throw new Error('either \"keyword\" or \"schema\" must be passed')\n}\n\nexport function extendSubschemaData(\n  subschema: SubschemaContext,\n  it: SchemaObjCxt,\n  {dataProp, dataPropType: dpType, data, dataTypes, propertyName}: SubschemaArgs\n): void {\n  if (data !== undefined && dataProp !== undefined) {\n    throw new Error('both \"data\" and \"dataProp\" passed, only one allowed')\n  }\n\n  const {gen} = it\n\n  if (dataProp !== undefined) {\n    const {errorPath, dataPathArr, opts} = it\n    const nextData = gen.let(\"data\", _`${it.data}${getProperty(dataProp)}`, true)\n    dataContextProps(nextData)\n    subschema.errorPath = str`${errorPath}${getErrorPath(dataProp, dpType, opts.jsPropertySyntax)}`\n    subschema.parentDataProperty = _`${dataProp}`\n    subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty]\n  }\n\n  if (data !== undefined) {\n    const nextData = data instanceof Name ? data : gen.let(\"data\", data, true) // replaceable if used once?\n    dataContextProps(nextData)\n    if (propertyName !== undefined) subschema.propertyName = propertyName\n    // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr\n  }\n\n  if (dataTypes) subschema.dataTypes = dataTypes\n\n  function dataContextProps(_nextData: Name): void {\n    subschema.data = _nextData\n    subschema.dataLevel = it.dataLevel + 1\n    subschema.dataTypes = []\n    it.definedProperties = new Set<string>()\n    subschema.parentData = it.data\n    subschema.dataNames = [...it.dataNames, _nextData]\n  }\n}\n\nexport function extendSubschemaMode(\n  subschema: SubschemaContext,\n  {jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors}: SubschemaArgs\n): void {\n  if (compositeRule !== undefined) subschema.compositeRule = compositeRule\n  if (createErrors !== undefined) subschema.createErrors = createErrors\n  if (allErrors !== undefined) subschema.allErrors = allErrors\n  subschema.jtdDiscriminator = jtdDiscriminator // not inherited\n  subschema.jtdMetadata = jtdMetadata // not inherited\n}\n","import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, operators, Code} from \"../../compile/codegen\"\n\nconst ops = operators\n\ntype Kwd = \"maximum\" | \"minimum\" | \"exclusiveMaximum\" | \"exclusiveMinimum\"\n\ntype Comparison = \"<=\" | \">=\" | \"<\" | \">\"\n\nconst KWDs: {[K in Kwd]: {okStr: Comparison; ok: Code; fail: Code}} = {\n  maximum: {okStr: \"<=\", ok: ops.LTE, fail: ops.GT},\n  minimum: {okStr: \">=\", ok: ops.GTE, fail: ops.LT},\n  exclusiveMaximum: {okStr: \"<\", ok: ops.LT, fail: ops.GTE},\n  exclusiveMinimum: {okStr: \">\", ok: ops.GT, fail: ops.LTE},\n}\n\nexport type LimitNumberError = ErrorObject<\n  Kwd,\n  {limit: number; comparison: Comparison},\n  number | {$data: string}\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({keyword, schemaCode}) => str`must be ${KWDs[keyword as Kwd].okStr} ${schemaCode}`,\n  params: ({keyword, schemaCode}) =>\n    _`{comparison: ${KWDs[keyword as Kwd].okStr}, limit: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: Object.keys(KWDs),\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {keyword, data, schemaCode} = cxt\n    cxt.fail$data(_`${data} ${KWDs[keyword as Kwd].fail} ${schemaCode} || isNaN(${data})`)\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition, AnySchema} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport MissingRefError from \"../../compile/ref_error\"\nimport {callValidateCode} from \"../code\"\nimport {_, nil, stringify, Code, Name} from \"../../compile/codegen\"\nimport N from \"../../compile/names\"\nimport {SchemaEnv, resolveRef} from \"../../compile\"\nimport {mergeEvaluated} from \"../../compile/util\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"$ref\",\n  schemaType: \"string\",\n  code(cxt: KeywordCxt): void {\n    const {gen, schema: $ref, it} = cxt\n    const {baseId, schemaEnv: env, validateName, opts, self} = it\n    const {root} = env\n    if (($ref === \"#\" || $ref === \"#/\") && baseId === root.baseId) return callRootRef()\n    const schOrEnv = resolveRef.call(self, root, baseId, $ref)\n    if (schOrEnv === undefined) throw new MissingRefError(it.opts.uriResolver, baseId, $ref)\n    if (schOrEnv instanceof SchemaEnv) return callValidate(schOrEnv)\n    return inlineRefSchema(schOrEnv)\n\n    function callRootRef(): void {\n      if (env === root) return callRef(cxt, validateName, env, env.$async)\n      const rootName = gen.scopeValue(\"root\", {ref: root})\n      return callRef(cxt, _`${rootName}.validate`, root, root.$async)\n    }\n\n    function callValidate(sch: SchemaEnv): void {\n      const v = getValidate(cxt, sch)\n      callRef(cxt, v, sch, sch.$async)\n    }\n\n    function inlineRefSchema(sch: AnySchema): void {\n      const schName = gen.scopeValue(\n        \"schema\",\n        opts.code.source === true ? {ref: sch, code: stringify(sch)} : {ref: sch}\n      )\n      const valid = gen.name(\"valid\")\n      const schCxt = cxt.subschema(\n        {\n          schema: sch,\n          dataTypes: [],\n          schemaPath: nil,\n          topSchemaRef: schName,\n          errSchemaPath: $ref,\n        },\n        valid\n      )\n      cxt.mergeEvaluated(schCxt)\n      cxt.ok(valid)\n    }\n  },\n}\n\nexport function getValidate(cxt: KeywordCxt, sch: SchemaEnv): Code {\n  const {gen} = cxt\n  return sch.validate\n    ? gen.scopeValue(\"validate\", {ref: sch.validate})\n    : _`${gen.scopeValue(\"wrapper\", {ref: sch})}.validate`\n}\n\nexport function callRef(cxt: KeywordCxt, v: Code, sch?: SchemaEnv, $async?: boolean): void {\n  const {gen, it} = cxt\n  const {allErrors, schemaEnv: env, opts} = it\n  const passCxt = opts.passContext ? N.this : nil\n  if ($async) callAsyncRef()\n  else callSyncRef()\n\n  function callAsyncRef(): void {\n    if (!env.$async) throw new Error(\"async schema referenced by sync schema\")\n    const valid = gen.let(\"valid\")\n    gen.try(\n      () => {\n        gen.code(_`await ${callValidateCode(cxt, v, passCxt)}`)\n        addEvaluatedFrom(v) // TODO will not work with async, it has to be returned with the result\n        if (!allErrors) gen.assign(valid, true)\n      },\n      (e) => {\n        gen.if(_`!(${e} instanceof ${it.ValidationError as Name})`, () => gen.throw(e))\n        addErrorsFrom(e)\n        if (!allErrors) gen.assign(valid, false)\n      }\n    )\n    cxt.ok(valid)\n  }\n\n  function callSyncRef(): void {\n    cxt.result(\n      callValidateCode(cxt, v, passCxt),\n      () => addEvaluatedFrom(v),\n      () => addErrorsFrom(v)\n    )\n  }\n\n  function addErrorsFrom(source: Code): void {\n    const errs = _`${source}.errors`\n    gen.assign(N.vErrors, _`${N.vErrors} === null ? ${errs} : ${N.vErrors}.concat(${errs})`) // TODO tagged\n    gen.assign(N.errors, _`${N.vErrors}.length`)\n  }\n\n  function addEvaluatedFrom(source: Code): void {\n    if (!it.opts.unevaluated) return\n    const schEvaluated = sch?.validate?.evaluated\n    // TODO refactor\n    if (it.props !== true) {\n      if (schEvaluated && !schEvaluated.dynamicProps) {\n        if (schEvaluated.props !== undefined) {\n          it.props = mergeEvaluated.props(gen, schEvaluated.props, it.props)\n        }\n      } else {\n        const props = gen.var(\"props\", _`${source}.evaluated.props`)\n        it.props = mergeEvaluated.props(gen, props, it.props, Name)\n      }\n    }\n    if (it.items !== true) {\n      if (schEvaluated && !schEvaluated.dynamicItems) {\n        if (schEvaluated.items !== undefined) {\n          it.items = mergeEvaluated.items(gen, schEvaluated.items, it.items)\n        }\n      } else {\n        const items = gen.var(\"items\", _`${source}.evaluated.items`)\n        it.items = mergeEvaluated.items(gen, items, it.items, Name)\n      }\n    }\n  }\n}\n\nexport default def\n","import type {Vocabulary} from \"../../types\"\nimport idKeyword from \"./id\"\nimport refKeyword from \"./ref\"\n\nconst core: Vocabulary = [\n  \"$schema\",\n  \"$id\",\n  \"$defs\",\n  \"$vocabulary\",\n  {keyword: \"$comment\"},\n  \"definitions\",\n  idKeyword,\n  refKeyword,\n]\n\nexport default core\n","import type {ErrorObject} from \"../../types\"\n\nexport enum DiscrError {\n  Tag = \"tag\",\n  Mapping = \"mapping\",\n}\n\nexport type DiscrErrorObj<E extends DiscrError> = ErrorObject<\n  \"discriminator\",\n  {error: E; tag: string; tagValue: unknown},\n  string\n>\n","import type {\n  AddedFormat,\n  FormatValidator,\n  AsyncFormatValidator,\n  CodeKeywordDefinition,\n  KeywordErrorDefinition,\n  ErrorObject,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, nil, or, Code, getProperty, regexpCode} from \"../../compile/codegen\"\n\ntype FormatValidate =\n  | FormatValidator<string>\n  | FormatValidator<number>\n  | AsyncFormatValidator<string>\n  | AsyncFormatValidator<number>\n  | RegExp\n  | string\n  | true\n\nexport type FormatError = ErrorObject<\"format\", {format: string}, string | {$data: string}>\n\nconst error: KeywordErrorDefinition = {\n  message: ({schemaCode}) => str`must match format \"${schemaCode}\"`,\n  params: ({schemaCode}) => _`{format: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"format\",\n  type: [\"number\", \"string\"],\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt, ruleType?: string) {\n    const {gen, data, $data, schema, schemaCode, it} = cxt\n    const {opts, errSchemaPath, schemaEnv, self} = it\n    if (!opts.validateFormats) return\n\n    if ($data) validate$DataFormat()\n    else validateFormat()\n\n    function validate$DataFormat(): void {\n      const fmts = gen.scopeValue(\"formats\", {\n        ref: self.formats,\n        code: opts.code.formats,\n      })\n      const fDef = gen.const(\"fDef\", _`${fmts}[${schemaCode}]`)\n      const fType = gen.let(\"fType\")\n      const format = gen.let(\"format\")\n      // TODO simplify\n      gen.if(\n        _`typeof ${fDef} == \"object\" && !(${fDef} instanceof RegExp)`,\n        () => gen.assign(fType, _`${fDef}.type || \"string\"`).assign(format, _`${fDef}.validate`),\n        () => gen.assign(fType, _`\"string\"`).assign(format, fDef)\n      )\n      cxt.fail$data(or(unknownFmt(), invalidFmt()))\n\n      function unknownFmt(): Code {\n        if (opts.strictSchema === false) return nil\n        return _`${schemaCode} && !${format}`\n      }\n\n      function invalidFmt(): Code {\n        const callFormat = schemaEnv.$async\n          ? _`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`\n          : _`${format}(${data})`\n        const validData = _`(typeof ${format} == \"function\" ? ${callFormat} : ${format}.test(${data}))`\n        return _`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`\n      }\n    }\n\n    function validateFormat(): void {\n      const formatDef: AddedFormat | undefined = self.formats[schema]\n      if (!formatDef) {\n        unknownFormat()\n        return\n      }\n      if (formatDef === true) return\n      const [fmtType, format, fmtRef] = getFormat(formatDef)\n      if (fmtType === ruleType) cxt.pass(validCondition())\n\n      function unknownFormat(): void {\n        if (opts.strictSchema === false) {\n          self.logger.warn(unknownMsg())\n          return\n        }\n        throw new Error(unknownMsg())\n\n        function unknownMsg(): string {\n          return `unknown format \"${schema as string}\" ignored in schema at path \"${errSchemaPath}\"`\n        }\n      }\n\n      function getFormat(fmtDef: AddedFormat): [string, FormatValidate, Code] {\n        const code =\n          fmtDef instanceof RegExp\n            ? regexpCode(fmtDef)\n            : opts.code.formats\n            ? _`${opts.code.formats}${getProperty(schema)}`\n            : undefined\n        const fmt = gen.scopeValue(\"formats\", {key: schema, ref: fmtDef, code})\n        if (typeof fmtDef == \"object\" && !(fmtDef instanceof RegExp)) {\n          return [fmtDef.type || \"string\", fmtDef.validate, _`${fmt}.validate`]\n        }\n\n        return [\"string\", fmtDef, fmt]\n      }\n\n      function validCondition(): Code {\n        if (typeof formatDef == \"object\" && !(formatDef instanceof RegExp) && formatDef.async) {\n          if (!schemaEnv.$async) throw new Error(\"async format in sync schema\")\n          return _`await ${fmtRef}(${data})`\n        }\n        return typeof format == \"function\" ? _`${fmtRef}(${data})` : _`${fmtRef}.test(${data})`\n      }\n    }\n  },\n}\n\nexport default def\n","// https://mathiasbynens.be/notes/javascript-encoding\n// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode\nexport default function ucs2length(str: string): number {\n  const len = str.length\n  let length = 0\n  let pos = 0\n  let value: number\n  while (pos < len) {\n    length++\n    value = str.charCodeAt(pos++)\n    if (value >= 0xd800 && value <= 0xdbff && pos < len) {\n      // high surrogate, and there is a next character\n      value = str.charCodeAt(pos)\n      if ((value & 0xfc00) === 0xdc00) pos++ // low surrogate\n    }\n  }\n  return length\n}\n\nucs2length.code = 'require(\"ajv/dist/runtime/ucs2length\").default'\n","import type {ErrorObject} from \"../types\"\n\nexport default class ValidationError extends Error {\n  readonly errors: Partial<ErrorObject>[]\n  readonly ajv: true\n  readonly validation: true\n\n  constructor(errors: Partial<ErrorObject>[]) {\n    super(\"validation failed\")\n    this.errors = errors\n    this.ajv = this.validation = true\n  }\n}\n","export {\n  Format,\n  FormatDefinition,\n  AsyncFormatDefinition,\n  KeywordDefinition,\n  KeywordErrorDefinition,\n  CodeKeywordDefinition,\n  MacroKeywordDefinition,\n  FuncKeywordDefinition,\n  Vocabulary,\n  Schema,\n  SchemaObject,\n  AnySchemaObject,\n  AsyncSchema,\n  AnySchema,\n  ValidateFunction,\n  AsyncValidateFunction,\n  AnyValidateFunction,\n  ErrorObject,\n  ErrorNoParams,\n} from \"./types\"\n\nexport {SchemaCxt, SchemaObjCxt} from \"./compile\"\nexport interface Plugin<Opts> {\n  (ajv: Ajv, options?: Opts): Ajv\n  [prop: string]: any\n}\n\nexport {KeywordCxt} from \"./compile/validate\"\nexport {DefinedError} from \"./vocabularies/errors\"\nexport {JSONType} from \"./compile/rules\"\nexport {JSONSchemaType} from \"./types/json-schema\"\nexport {JTDSchemaType, SomeJTDSchemaType, JTDDataType} from \"./types/jtd-schema\"\nexport {_, str, stringify, nil, Name, Code, CodeGen, CodeGenOptions} from \"./compile/codegen\"\n\nimport type {\n  Schema,\n  AnySchema,\n  AnySchemaObject,\n  SchemaObject,\n  AsyncSchema,\n  Vocabulary,\n  KeywordDefinition,\n  AddedKeywordDefinition,\n  AnyValidateFunction,\n  ValidateFunction,\n  AsyncValidateFunction,\n  ErrorObject,\n  Format,\n  AddedFormat,\n  RegExpEngine,\n  UriResolver,\n} from \"./types\"\nimport type {JSONSchemaType} from \"./types/json-schema\"\nimport type {JTDSchemaType, SomeJTDSchemaType, JTDDataType} from \"./types/jtd-schema\"\nimport ValidationError from \"./runtime/validation_error\"\nimport MissingRefError from \"./compile/ref_error\"\nimport {getRules, ValidationRules, Rule, RuleGroup, JSONType} from \"./compile/rules\"\nimport {SchemaEnv, compileSchema, resolveSchema} from \"./compile\"\nimport {Code, ValueScope} from \"./compile/codegen\"\nimport {normalizeId, getSchemaRefs} from \"./compile/resolve\"\nimport {getJSONTypes} from \"./compile/validate/dataType\"\nimport {eachItem} from \"./compile/util\"\nimport * as $dataRefSchema from \"./refs/data.json\"\n\nimport DefaultUriResolver from \"./runtime/uri\"\n\nconst defaultRegExp: RegExpEngine = (str, flags) => new RegExp(str, flags)\ndefaultRegExp.code = \"new RegExp\"\n\nconst META_IGNORE_OPTIONS: (keyof Options)[] = [\"removeAdditional\", \"useDefaults\", \"coerceTypes\"]\nconst EXT_SCOPE_NAMES = new Set([\n  \"validate\",\n  \"serialize\",\n  \"parse\",\n  \"wrapper\",\n  \"root\",\n  \"schema\",\n  \"keyword\",\n  \"pattern\",\n  \"formats\",\n  \"validate$data\",\n  \"func\",\n  \"obj\",\n  \"Error\",\n])\n\nexport type Options = CurrentOptions & DeprecatedOptions\n\nexport interface CurrentOptions {\n  // strict mode options (NEW)\n  strict?: boolean | \"log\"\n  strictSchema?: boolean | \"log\"\n  strictNumbers?: boolean | \"log\"\n  strictTypes?: boolean | \"log\"\n  strictTuples?: boolean | \"log\"\n  strictRequired?: boolean | \"log\"\n  allowMatchingProperties?: boolean // disables a strict mode restriction\n  allowUnionTypes?: boolean\n  validateFormats?: boolean\n  // validation and reporting options:\n  $data?: boolean\n  allErrors?: boolean\n  verbose?: boolean\n  discriminator?: boolean\n  unicodeRegExp?: boolean\n  timestamp?: \"string\" | \"date\" // JTD only\n  parseDate?: boolean // JTD only\n  allowDate?: boolean // JTD only\n  $comment?:\n    | true\n    | ((comment: string, schemaPath?: string, rootSchema?: AnySchemaObject) => unknown)\n  formats?: {[Name in string]?: Format}\n  keywords?: Vocabulary\n  schemas?: AnySchema[] | {[Key in string]?: AnySchema}\n  logger?: Logger | false\n  loadSchema?: (uri: string) => Promise<AnySchemaObject>\n  // options to modify validated data:\n  removeAdditional?: boolean | \"all\" | \"failing\"\n  useDefaults?: boolean | \"empty\"\n  coerceTypes?: boolean | \"array\"\n  // advanced options:\n  next?: boolean // NEW\n  unevaluated?: boolean // NEW\n  dynamicRef?: boolean // NEW\n  schemaId?: \"id\" | \"$id\"\n  jtd?: boolean // NEW\n  meta?: SchemaObject | boolean\n  defaultMeta?: string | AnySchemaObject\n  validateSchema?: boolean | \"log\"\n  addUsedSchema?: boolean\n  inlineRefs?: boolean | number\n  passContext?: boolean\n  loopRequired?: number\n  loopEnum?: number // NEW\n  ownProperties?: boolean\n  multipleOfPrecision?: number\n  int32range?: boolean // JTD only\n  messages?: boolean\n  code?: CodeOptions // NEW\n  uriResolver?: UriResolver\n}\n\nexport interface CodeOptions {\n  es5?: boolean\n  esm?: boolean\n  lines?: boolean\n  optimize?: boolean | number\n  formats?: Code // code to require (or construct) map of available formats - for standalone code\n  source?: boolean\n  process?: (code: string, schema?: SchemaEnv) => string\n  regExp?: RegExpEngine\n}\n\ninterface InstanceCodeOptions extends CodeOptions {\n  regExp: RegExpEngine\n  optimize: number\n}\n\ninterface DeprecatedOptions {\n  /** @deprecated */\n  ignoreKeywordsWithRef?: boolean\n  /** @deprecated */\n  jsPropertySyntax?: boolean // added instead of jsonPointers\n  /** @deprecated */\n  unicode?: boolean\n}\n\ninterface RemovedOptions {\n  format?: boolean\n  errorDataPath?: \"object\" | \"property\"\n  nullable?: boolean // \"nullable\" keyword is supported by default\n  jsonPointers?: boolean\n  extendRefs?: true | \"ignore\" | \"fail\"\n  missingRefs?: true | \"ignore\" | \"fail\"\n  processCode?: (code: string, schema?: SchemaEnv) => string\n  sourceCode?: boolean\n  strictDefaults?: boolean\n  strictKeywords?: boolean\n  uniqueItems?: boolean\n  unknownFormats?: true | string[] | \"ignore\"\n  cache?: any\n  serialize?: (schema: AnySchema) => unknown\n  ajvErrors?: boolean\n}\n\ntype OptionsInfo<T extends RemovedOptions | DeprecatedOptions> = {\n  [K in keyof T]-?: string | undefined\n}\n\nconst removedOptions: OptionsInfo<RemovedOptions> = {\n  errorDataPath: \"\",\n  format: \"`validateFormats: false` can be used instead.\",\n  nullable: '\"nullable\" keyword is supported by default.',\n  jsonPointers: \"Deprecated jsPropertySyntax can be used instead.\",\n  extendRefs: \"Deprecated ignoreKeywordsWithRef can be used instead.\",\n  missingRefs: \"Pass empty schema with $id that should be ignored to ajv.addSchema.\",\n  processCode: \"Use option `code: {process: (code, schemaEnv: object) => string}`\",\n  sourceCode: \"Use option `code: {source: true}`\",\n  strictDefaults: \"It is default now, see option `strict`.\",\n  strictKeywords: \"It is default now, see option `strict`.\",\n  uniqueItems: '\"uniqueItems\" keyword is always validated.',\n  unknownFormats: \"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).\",\n  cache: \"Map is used as cache, schema object as key.\",\n  serialize: \"Map is used as cache, schema object as key.\",\n  ajvErrors: \"It is default now.\",\n}\n\nconst deprecatedOptions: OptionsInfo<DeprecatedOptions> = {\n  ignoreKeywordsWithRef: \"\",\n  jsPropertySyntax: \"\",\n  unicode: '\"minLength\"/\"maxLength\" account for unicode characters by default.',\n}\n\ntype RequiredInstanceOptions = {\n  [K in\n    | \"strictSchema\"\n    | \"strictNumbers\"\n    | \"strictTypes\"\n    | \"strictTuples\"\n    | \"strictRequired\"\n    | \"inlineRefs\"\n    | \"loopRequired\"\n    | \"loopEnum\"\n    | \"meta\"\n    | \"messages\"\n    | \"schemaId\"\n    | \"addUsedSchema\"\n    | \"validateSchema\"\n    | \"validateFormats\"\n    | \"int32range\"\n    | \"unicodeRegExp\"\n    | \"uriResolver\"]: NonNullable<Options[K]>\n} & {code: InstanceCodeOptions}\n\nexport type InstanceOptions = Options & RequiredInstanceOptions\n\nconst MAX_EXPRESSION = 200\n\n// eslint-disable-next-line complexity\nfunction requiredOptions(o: Options): RequiredInstanceOptions {\n  const s = o.strict\n  const _optz = o.code?.optimize\n  const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0\n  const regExp = o.code?.regExp ?? defaultRegExp\n  const uriResolver = o.uriResolver ?? DefaultUriResolver\n  return {\n    strictSchema: o.strictSchema ?? s ?? true,\n    strictNumbers: o.strictNumbers ?? s ?? true,\n    strictTypes: o.strictTypes ?? s ?? \"log\",\n    strictTuples: o.strictTuples ?? s ?? \"log\",\n    strictRequired: o.strictRequired ?? s ?? false,\n    code: o.code ? {...o.code, optimize, regExp} : {optimize, regExp},\n    loopRequired: o.loopRequired ?? MAX_EXPRESSION,\n    loopEnum: o.loopEnum ?? MAX_EXPRESSION,\n    meta: o.meta ?? true,\n    messages: o.messages ?? true,\n    inlineRefs: o.inlineRefs ?? true,\n    schemaId: o.schemaId ?? \"$id\",\n    addUsedSchema: o.addUsedSchema ?? true,\n    validateSchema: o.validateSchema ?? true,\n    validateFormats: o.validateFormats ?? true,\n    unicodeRegExp: o.unicodeRegExp ?? true,\n    int32range: o.int32range ?? true,\n    uriResolver: uriResolver,\n  }\n}\n\nexport interface Logger {\n  log(...args: unknown[]): unknown\n  warn(...args: unknown[]): unknown\n  error(...args: unknown[]): unknown\n}\n\nexport default class Ajv {\n  opts: InstanceOptions\n  errors?: ErrorObject[] | null // errors from the last validation\n  logger: Logger\n  // shared external scope values for compiled functions\n  readonly scope: ValueScope\n  readonly schemas: {[Key in string]?: SchemaEnv} = {}\n  readonly refs: {[Ref in string]?: SchemaEnv | string} = {}\n  readonly formats: {[Name in string]?: AddedFormat} = {}\n  readonly RULES: ValidationRules\n  readonly _compilations: Set<SchemaEnv> = new Set()\n  private readonly _loading: {[Ref in string]?: Promise<AnySchemaObject>} = {}\n  private readonly _cache: Map<AnySchema, SchemaEnv> = new Map()\n  private readonly _metaOpts: InstanceOptions\n\n  static ValidationError = ValidationError\n  static MissingRefError = MissingRefError\n\n  constructor(opts: Options = {}) {\n    opts = this.opts = {...opts, ...requiredOptions(opts)}\n    const {es5, lines} = this.opts.code\n\n    this.scope = new ValueScope({scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines})\n    this.logger = getLogger(opts.logger)\n    const formatOpt = opts.validateFormats\n    opts.validateFormats = false\n\n    this.RULES = getRules()\n    checkOptions.call(this, removedOptions, opts, \"NOT SUPPORTED\")\n    checkOptions.call(this, deprecatedOptions, opts, \"DEPRECATED\", \"warn\")\n    this._metaOpts = getMetaSchemaOptions.call(this)\n\n    if (opts.formats) addInitialFormats.call(this)\n    this._addVocabularies()\n    this._addDefaultMetaSchema()\n    if (opts.keywords) addInitialKeywords.call(this, opts.keywords)\n    if (typeof opts.meta == \"object\") this.addMetaSchema(opts.meta)\n    addInitialSchemas.call(this)\n    opts.validateFormats = formatOpt\n  }\n\n  _addVocabularies(): void {\n    this.addKeyword(\"$async\")\n  }\n\n  _addDefaultMetaSchema(): void {\n    const {$data, meta, schemaId} = this.opts\n    let _dataRefSchema: SchemaObject = $dataRefSchema\n    if (schemaId === \"id\") {\n      _dataRefSchema = {...$dataRefSchema}\n      _dataRefSchema.id = _dataRefSchema.$id\n      delete _dataRefSchema.$id\n    }\n    if (meta && $data) this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false)\n  }\n\n  defaultMeta(): string | AnySchemaObject | undefined {\n    const {meta, schemaId} = this.opts\n    return (this.opts.defaultMeta = typeof meta == \"object\" ? meta[schemaId] || meta : undefined)\n  }\n\n  // Validate data using schema\n  // AnySchema will be compiled and cached using schema itself as a key for Map\n  validate(schema: Schema | string, data: unknown): boolean\n  validate(schemaKeyRef: AnySchema | string, data: unknown): boolean | Promise<unknown>\n  validate<T>(schema: Schema | JSONSchemaType<T> | string, data: unknown): data is T\n  // Separated for type inference to work\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  validate<T>(schema: JTDSchemaType<T>, data: unknown): data is T\n  // This overload is only intended for typescript inference, the first\n  // argument prevents manual type annotation from matching this overload\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  validate<N extends never, T extends SomeJTDSchemaType>(\n    schema: T,\n    data: unknown\n  ): data is JTDDataType<T>\n  // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n  validate<T>(schema: AsyncSchema, data: unknown | T): Promise<T>\n  validate<T>(schemaKeyRef: AnySchema | string, data: unknown): data is T | Promise<T>\n  validate<T>(\n    schemaKeyRef: AnySchema | string, // key, ref or schema object\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n    data: unknown | T // to be validated\n  ): boolean | Promise<T> {\n    let v: AnyValidateFunction | undefined\n    if (typeof schemaKeyRef == \"string\") {\n      v = this.getSchema<T>(schemaKeyRef)\n      if (!v) throw new Error(`no schema with key or ref \"${schemaKeyRef}\"`)\n    } else {\n      v = this.compile<T>(schemaKeyRef)\n    }\n\n    const valid = v(data)\n    if (!(\"$async\" in v)) this.errors = v.errors\n    return valid\n  }\n\n  // Create validation function for passed schema\n  // _meta: true if schema is a meta-schema. Used internally to compile meta schemas of user-defined keywords.\n  compile<T = unknown>(schema: Schema | JSONSchemaType<T>, _meta?: boolean): ValidateFunction<T>\n  // Separated for type inference to work\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  compile<T = unknown>(schema: JTDSchemaType<T>, _meta?: boolean): ValidateFunction<T>\n  // This overload is only intended for typescript inference, the first\n  // argument prevents manual type annotation from matching this overload\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  compile<N extends never, T extends SomeJTDSchemaType>(\n    schema: T,\n    _meta?: boolean\n  ): ValidateFunction<JTDDataType<T>>\n  compile<T = unknown>(schema: AsyncSchema, _meta?: boolean): AsyncValidateFunction<T>\n  compile<T = unknown>(schema: AnySchema, _meta?: boolean): AnyValidateFunction<T>\n  compile<T = unknown>(schema: AnySchema, _meta?: boolean): AnyValidateFunction<T> {\n    const sch = this._addSchema(schema, _meta)\n    return (sch.validate || this._compileSchemaEnv(sch)) as AnyValidateFunction<T>\n  }\n\n  // Creates validating function for passed schema with asynchronous loading of missing schemas.\n  // `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\n  // TODO allow passing schema URI\n  // meta - optional true to compile meta-schema\n  compileAsync<T = unknown>(\n    schema: SchemaObject | JSONSchemaType<T>,\n    _meta?: boolean\n  ): Promise<ValidateFunction<T>>\n  // Separated for type inference to work\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  compileAsync<T = unknown>(schema: JTDSchemaType<T>, _meta?: boolean): Promise<ValidateFunction<T>>\n  compileAsync<T = unknown>(schema: AsyncSchema, meta?: boolean): Promise<AsyncValidateFunction<T>>\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  compileAsync<T = unknown>(\n    schema: AnySchemaObject,\n    meta?: boolean\n  ): Promise<AnyValidateFunction<T>>\n  compileAsync<T = unknown>(\n    schema: AnySchemaObject,\n    meta?: boolean\n  ): Promise<AnyValidateFunction<T>> {\n    if (typeof this.opts.loadSchema != \"function\") {\n      throw new Error(\"options.loadSchema should be a function\")\n    }\n    const {loadSchema} = this.opts\n    return runCompileAsync.call(this, schema, meta)\n\n    async function runCompileAsync(\n      this: Ajv,\n      _schema: AnySchemaObject,\n      _meta?: boolean\n    ): Promise<AnyValidateFunction> {\n      await loadMetaSchema.call(this, _schema.$schema)\n      const sch = this._addSchema(_schema, _meta)\n      return sch.validate || _compileAsync.call(this, sch)\n    }\n\n    async function loadMetaSchema(this: Ajv, $ref?: string): Promise<void> {\n      if ($ref && !this.getSchema($ref)) {\n        await runCompileAsync.call(this, {$ref}, true)\n      }\n    }\n\n    async function _compileAsync(this: Ajv, sch: SchemaEnv): Promise<AnyValidateFunction> {\n      try {\n        return this._compileSchemaEnv(sch)\n      } catch (e) {\n        if (!(e instanceof MissingRefError)) throw e\n        checkLoaded.call(this, e)\n        await loadMissingSchema.call(this, e.missingSchema)\n        return _compileAsync.call(this, sch)\n      }\n    }\n\n    function checkLoaded(this: Ajv, {missingSchema: ref, missingRef}: MissingRefError): void {\n      if (this.refs[ref]) {\n        throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`)\n      }\n    }\n\n    async function loadMissingSchema(this: Ajv, ref: string): Promise<void> {\n      const _schema = await _loadSchema.call(this, ref)\n      if (!this.refs[ref]) await loadMetaSchema.call(this, _schema.$schema)\n      if (!this.refs[ref]) this.addSchema(_schema, ref, meta)\n    }\n\n    async function _loadSchema(this: Ajv, ref: string): Promise<AnySchemaObject> {\n      const p = this._loading[ref]\n      if (p) return p\n      try {\n        return await (this._loading[ref] = loadSchema(ref))\n      } finally {\n        delete this._loading[ref]\n      }\n    }\n  }\n\n  // Adds schema to the instance\n  addSchema(\n    schema: AnySchema | AnySchema[], // If array is passed, `key` will be ignored\n    key?: string, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n    _meta?: boolean, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n    _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.\n  ): Ajv {\n    if (Array.isArray(schema)) {\n      for (const sch of schema) this.addSchema(sch, undefined, _meta, _validateSchema)\n      return this\n    }\n    let id: string | undefined\n    if (typeof schema === \"object\") {\n      const {schemaId} = this.opts\n      id = schema[schemaId]\n      if (id !== undefined && typeof id != \"string\") {\n        throw new Error(`schema ${schemaId} must be string`)\n      }\n    }\n    key = normalizeId(key || id)\n    this._checkUnique(key)\n    this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true)\n    return this\n  }\n\n  // Add schema that will be used to validate other schemas\n  // options in META_IGNORE_OPTIONS are alway set to false\n  addMetaSchema(\n    schema: AnySchemaObject,\n    key?: string, // schema key\n    _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema\n  ): Ajv {\n    this.addSchema(schema, key, true, _validateSchema)\n    return this\n  }\n\n  //  Validate schema against its meta-schema\n  validateSchema(schema: AnySchema, throwOrLogError?: boolean): boolean | Promise<unknown> {\n    if (typeof schema == \"boolean\") return true\n    let $schema: string | AnySchemaObject | undefined\n    $schema = schema.$schema\n    if ($schema !== undefined && typeof $schema != \"string\") {\n      throw new Error(\"$schema must be a string\")\n    }\n    $schema = $schema || this.opts.defaultMeta || this.defaultMeta()\n    if (!$schema) {\n      this.logger.warn(\"meta-schema not available\")\n      this.errors = null\n      return true\n    }\n    const valid = this.validate($schema, schema)\n    if (!valid && throwOrLogError) {\n      const message = \"schema is invalid: \" + this.errorsText()\n      if (this.opts.validateSchema === \"log\") this.logger.error(message)\n      else throw new Error(message)\n    }\n    return valid\n  }\n\n  // Get compiled schema by `key` or `ref`.\n  // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)\n  getSchema<T = unknown>(keyRef: string): AnyValidateFunction<T> | undefined {\n    let sch\n    while (typeof (sch = getSchEnv.call(this, keyRef)) == \"string\") keyRef = sch\n    if (sch === undefined) {\n      const {schemaId} = this.opts\n      const root = new SchemaEnv({schema: {}, schemaId})\n      sch = resolveSchema.call(this, root, keyRef)\n      if (!sch) return\n      this.refs[keyRef] = sch\n    }\n    return (sch.validate || this._compileSchemaEnv(sch)) as AnyValidateFunction<T> | undefined\n  }\n\n  // Remove cached schema(s).\n  // If no parameter is passed all schemas but meta-schemas are removed.\n  // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n  // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n  removeSchema(schemaKeyRef?: AnySchema | string | RegExp): Ajv {\n    if (schemaKeyRef instanceof RegExp) {\n      this._removeAllSchemas(this.schemas, schemaKeyRef)\n      this._removeAllSchemas(this.refs, schemaKeyRef)\n      return this\n    }\n    switch (typeof schemaKeyRef) {\n      case \"undefined\":\n        this._removeAllSchemas(this.schemas)\n        this._removeAllSchemas(this.refs)\n        this._cache.clear()\n        return this\n      case \"string\": {\n        const sch = getSchEnv.call(this, schemaKeyRef)\n        if (typeof sch == \"object\") this._cache.delete(sch.schema)\n        delete this.schemas[schemaKeyRef]\n        delete this.refs[schemaKeyRef]\n        return this\n      }\n      case \"object\": {\n        const cacheKey = schemaKeyRef\n        this._cache.delete(cacheKey)\n        let id = schemaKeyRef[this.opts.schemaId]\n        if (id) {\n          id = normalizeId(id)\n          delete this.schemas[id]\n          delete this.refs[id]\n        }\n        return this\n      }\n      default:\n        throw new Error(\"ajv.removeSchema: invalid parameter\")\n    }\n  }\n\n  // add \"vocabulary\" - a collection of keywords\n  addVocabulary(definitions: Vocabulary): Ajv {\n    for (const def of definitions) this.addKeyword(def)\n    return this\n  }\n\n  addKeyword(\n    kwdOrDef: string | KeywordDefinition,\n    def?: KeywordDefinition // deprecated\n  ): Ajv {\n    let keyword: string | string[]\n    if (typeof kwdOrDef == \"string\") {\n      keyword = kwdOrDef\n      if (typeof def == \"object\") {\n        this.logger.warn(\"these parameters are deprecated, see docs for addKeyword\")\n        def.keyword = keyword\n      }\n    } else if (typeof kwdOrDef == \"object\" && def === undefined) {\n      def = kwdOrDef\n      keyword = def.keyword\n      if (Array.isArray(keyword) && !keyword.length) {\n        throw new Error(\"addKeywords: keyword must be string or non-empty array\")\n      }\n    } else {\n      throw new Error(\"invalid addKeywords parameters\")\n    }\n\n    checkKeyword.call(this, keyword, def)\n    if (!def) {\n      eachItem(keyword, (kwd) => addRule.call(this, kwd))\n      return this\n    }\n    keywordMetaschema.call(this, def)\n    const definition: AddedKeywordDefinition = {\n      ...def,\n      type: getJSONTypes(def.type),\n      schemaType: getJSONTypes(def.schemaType),\n    }\n    eachItem(\n      keyword,\n      definition.type.length === 0\n        ? (k) => addRule.call(this, k, definition)\n        : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t))\n    )\n    return this\n  }\n\n  getKeyword(keyword: string): AddedKeywordDefinition | boolean {\n    const rule = this.RULES.all[keyword]\n    return typeof rule == \"object\" ? rule.definition : !!rule\n  }\n\n  // Remove keyword\n  removeKeyword(keyword: string): Ajv {\n    // TODO return type should be Ajv\n    const {RULES} = this\n    delete RULES.keywords[keyword]\n    delete RULES.all[keyword]\n    for (const group of RULES.rules) {\n      const i = group.rules.findIndex((rule) => rule.keyword === keyword)\n      if (i >= 0) group.rules.splice(i, 1)\n    }\n    return this\n  }\n\n  // Add format\n  addFormat(name: string, format: Format): Ajv {\n    if (typeof format == \"string\") format = new RegExp(format)\n    this.formats[name] = format\n    return this\n  }\n\n  errorsText(\n    errors: ErrorObject[] | null | undefined = this.errors, // optional array of validation errors\n    {separator = \", \", dataVar = \"data\"}: ErrorsTextOptions = {} // optional options with properties `separator` and `dataVar`\n  ): string {\n    if (!errors || errors.length === 0) return \"No errors\"\n    return errors\n      .map((e) => `${dataVar}${e.instancePath} ${e.message}`)\n      .reduce((text, msg) => text + separator + msg)\n  }\n\n  $dataMetaSchema(metaSchema: AnySchemaObject, keywordsJsonPointers: string[]): AnySchemaObject {\n    const rules = this.RULES.all\n    metaSchema = JSON.parse(JSON.stringify(metaSchema))\n    for (const jsonPointer of keywordsJsonPointers) {\n      const segments = jsonPointer.split(\"/\").slice(1) // first segment is an empty string\n      let keywords = metaSchema\n      for (const seg of segments) keywords = keywords[seg] as AnySchemaObject\n\n      for (const key in rules) {\n        const rule = rules[key]\n        if (typeof rule != \"object\") continue\n        const {$data} = rule.definition\n        const schema = keywords[key] as AnySchemaObject | undefined\n        if ($data && schema) keywords[key] = schemaOrData(schema)\n      }\n    }\n\n    return metaSchema\n  }\n\n  private _removeAllSchemas(schemas: {[Ref in string]?: SchemaEnv | string}, regex?: RegExp): void {\n    for (const keyRef in schemas) {\n      const sch = schemas[keyRef]\n      if (!regex || regex.test(keyRef)) {\n        if (typeof sch == \"string\") {\n          delete schemas[keyRef]\n        } else if (sch && !sch.meta) {\n          this._cache.delete(sch.schema)\n          delete schemas[keyRef]\n        }\n      }\n    }\n  }\n\n  _addSchema(\n    schema: AnySchema,\n    meta?: boolean,\n    baseId?: string,\n    validateSchema = this.opts.validateSchema,\n    addSchema = this.opts.addUsedSchema\n  ): SchemaEnv {\n    let id: string | undefined\n    const {schemaId} = this.opts\n    if (typeof schema == \"object\") {\n      id = schema[schemaId]\n    } else {\n      if (this.opts.jtd) throw new Error(\"schema must be object\")\n      else if (typeof schema != \"boolean\") throw new Error(\"schema must be object or boolean\")\n    }\n    let sch = this._cache.get(schema)\n    if (sch !== undefined) return sch\n\n    baseId = normalizeId(id || baseId)\n    const localRefs = getSchemaRefs.call(this, schema, baseId)\n    sch = new SchemaEnv({schema, schemaId, meta, baseId, localRefs})\n    this._cache.set(sch.schema, sch)\n    if (addSchema && !baseId.startsWith(\"#\")) {\n      // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)\n      if (baseId) this._checkUnique(baseId)\n      this.refs[baseId] = sch\n    }\n    if (validateSchema) this.validateSchema(schema, true)\n    return sch\n  }\n\n  private _checkUnique(id: string): void {\n    if (this.schemas[id] || this.refs[id]) {\n      throw new Error(`schema with key or id \"${id}\" already exists`)\n    }\n  }\n\n  private _compileSchemaEnv(sch: SchemaEnv): AnyValidateFunction {\n    if (sch.meta) this._compileMetaSchema(sch)\n    else compileSchema.call(this, sch)\n\n    /* istanbul ignore if */\n    if (!sch.validate) throw new Error(\"ajv implementation error\")\n    return sch.validate\n  }\n\n  private _compileMetaSchema(sch: SchemaEnv): void {\n    const currentOpts = this.opts\n    this.opts = this._metaOpts\n    try {\n      compileSchema.call(this, sch)\n    } finally {\n      this.opts = currentOpts\n    }\n  }\n}\n\nexport interface ErrorsTextOptions {\n  separator?: string\n  dataVar?: string\n}\n\nfunction checkOptions(\n  this: Ajv,\n  checkOpts: OptionsInfo<RemovedOptions | DeprecatedOptions>,\n  options: Options & RemovedOptions,\n  msg: string,\n  log: \"warn\" | \"error\" = \"error\"\n): void {\n  for (const key in checkOpts) {\n    const opt = key as keyof typeof checkOpts\n    if (opt in options) this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`)\n  }\n}\n\nfunction getSchEnv(this: Ajv, keyRef: string): SchemaEnv | string | undefined {\n  keyRef = normalizeId(keyRef) // TODO tests fail without this line\n  return this.schemas[keyRef] || this.refs[keyRef]\n}\n\nfunction addInitialSchemas(this: Ajv): void {\n  const optsSchemas = this.opts.schemas\n  if (!optsSchemas) return\n  if (Array.isArray(optsSchemas)) this.addSchema(optsSchemas)\n  else for (const key in optsSchemas) this.addSchema(optsSchemas[key] as AnySchema, key)\n}\n\nfunction addInitialFormats(this: Ajv): void {\n  for (const name in this.opts.formats) {\n    const format = this.opts.formats[name]\n    if (format) this.addFormat(name, format)\n  }\n}\n\nfunction addInitialKeywords(\n  this: Ajv,\n  defs: Vocabulary | {[K in string]?: KeywordDefinition}\n): void {\n  if (Array.isArray(defs)) {\n    this.addVocabulary(defs)\n    return\n  }\n  this.logger.warn(\"keywords option as map is deprecated, pass array\")\n  for (const keyword in defs) {\n    const def = defs[keyword] as KeywordDefinition\n    if (!def.keyword) def.keyword = keyword\n    this.addKeyword(def)\n  }\n}\n\nfunction getMetaSchemaOptions(this: Ajv): InstanceOptions {\n  const metaOpts = {...this.opts}\n  for (const opt of META_IGNORE_OPTIONS) delete metaOpts[opt]\n  return metaOpts\n}\n\nconst noLogs = {log() {}, warn() {}, error() {}}\n\nfunction getLogger(logger?: Partial<Logger> | false): Logger {\n  if (logger === false) return noLogs\n  if (logger === undefined) return console\n  if (logger.log && logger.warn && logger.error) return logger as Logger\n  throw new Error(\"logger must implement log, warn and error methods\")\n}\n\nconst KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i\n\nfunction checkKeyword(this: Ajv, keyword: string | string[], def?: KeywordDefinition): void {\n  const {RULES} = this\n  eachItem(keyword, (kwd) => {\n    if (RULES.keywords[kwd]) throw new Error(`Keyword ${kwd} is already defined`)\n    if (!KEYWORD_NAME.test(kwd)) throw new Error(`Keyword ${kwd} has invalid name`)\n  })\n  if (!def) return\n  if (def.$data && !(\"code\" in def || \"validate\" in def)) {\n    throw new Error('$data keyword must have \"code\" or \"validate\" function')\n  }\n}\n\nfunction addRule(\n  this: Ajv,\n  keyword: string,\n  definition?: AddedKeywordDefinition,\n  dataType?: JSONType\n): void {\n  const post = definition?.post\n  if (dataType && post) throw new Error('keyword with \"post\" flag cannot have \"type\"')\n  const {RULES} = this\n  let ruleGroup = post ? RULES.post : RULES.rules.find(({type: t}) => t === dataType)\n  if (!ruleGroup) {\n    ruleGroup = {type: dataType, rules: []}\n    RULES.rules.push(ruleGroup)\n  }\n  RULES.keywords[keyword] = true\n  if (!definition) return\n\n  const rule: Rule = {\n    keyword,\n    definition: {\n      ...definition,\n      type: getJSONTypes(definition.type),\n      schemaType: getJSONTypes(definition.schemaType),\n    },\n  }\n  if (definition.before) addBeforeRule.call(this, ruleGroup, rule, definition.before)\n  else ruleGroup.rules.push(rule)\n  RULES.all[keyword] = rule\n  definition.implements?.forEach((kwd) => this.addKeyword(kwd))\n}\n\nfunction addBeforeRule(this: Ajv, ruleGroup: RuleGroup, rule: Rule, before: string): void {\n  const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before)\n  if (i >= 0) {\n    ruleGroup.rules.splice(i, 0, rule)\n  } else {\n    ruleGroup.rules.push(rule)\n    this.logger.warn(`rule ${before} is not defined`)\n  }\n}\n\nfunction keywordMetaschema(this: Ajv, def: KeywordDefinition): void {\n  let {metaSchema} = def\n  if (metaSchema === undefined) return\n  if (def.$data && this.opts.$data) metaSchema = schemaOrData(metaSchema)\n  def.validateSchema = this.compile(metaSchema, true)\n}\n\nconst $dataRef = {\n  $ref: \"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\",\n}\n\nfunction schemaOrData(schema: AnySchema): AnySchemaObject {\n  return {anyOf: [schema, $dataRef]}\n}\n","import type {CodeKeywordDefinition, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, operators} from \"../../compile/codegen\"\nimport {useFunc} from \"../../compile/util\"\nimport ucs2length from \"../../runtime/ucs2length\"\n\nconst error: KeywordErrorDefinition = {\n  message({keyword, schemaCode}) {\n    const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\"\n    return str`must NOT have ${comp} than ${schemaCode} characters`\n  },\n  params: ({schemaCode}) => _`{limit: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: [\"maxLength\", \"minLength\"],\n  type: \"string\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {keyword, data, schemaCode, it} = cxt\n    const op = keyword === \"maxLength\" ? operators.GT : operators.LT\n    const len =\n      it.opts.unicode === false ? _`${data}.length` : _`${useFunc(cxt.gen, ucs2length)}(${data})`\n    cxt.fail$data(_`${len} ${op} ${schemaCode}`)\n  },\n}\n\nexport default def\n","function _taggedTemplateLiteral(e, t) {\n  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, {\n    raw: {\n      value: Object.freeze(t)\n    }\n  }));\n}\nmodule.exports = _taggedTemplateLiteral, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import type {\n  AnySchema,\n  AnySchemaObject,\n  AnyValidateFunction,\n  AsyncValidateFunction,\n  EvaluatedProperties,\n  EvaluatedItems,\n} from \"../types\"\nimport type Ajv from \"../core\"\nimport type {InstanceOptions} from \"../core\"\nimport {CodeGen, _, nil, stringify, Name, Code, ValueScopeName} from \"./codegen\"\nimport ValidationError from \"../runtime/validation_error\"\nimport N from \"./names\"\nimport {LocalRefs, getFullPath, _getFullPath, inlineRef, normalizeId, resolveUrl} from \"./resolve\"\nimport {schemaHasRulesButRef, unescapeFragment} from \"./util\"\nimport {validateFunctionCode} from \"./validate\"\nimport {URIComponent} from \"fast-uri\"\nimport {JSONType} from \"./rules\"\n\nexport type SchemaRefs = {\n  [Ref in string]?: SchemaEnv | AnySchema\n}\n\nexport interface SchemaCxt {\n  readonly gen: CodeGen\n  readonly allErrors?: boolean // validation mode - whether to collect all errors or break on error\n  readonly data: Name // Name with reference to the current part of data instance\n  readonly parentData: Name // should be used in keywords modifying data\n  readonly parentDataProperty: Code | number // should be used in keywords modifying data\n  readonly dataNames: Name[]\n  readonly dataPathArr: (Code | number)[]\n  readonly dataLevel: number // the level of the currently validated data,\n  // it can be used to access both the property names and the data on all levels from the top.\n  dataTypes: JSONType[] // data types applied to the current part of data instance\n  definedProperties: Set<string> // set of properties to keep track of for required checks\n  readonly topSchemaRef: Code\n  readonly validateName: Name\n  evaluated?: Name\n  readonly ValidationError?: Name\n  readonly schema: AnySchema // current schema object - equal to parentSchema passed via KeywordCxt\n  readonly schemaEnv: SchemaEnv\n  readonly rootId: string\n  baseId: string // the current schema base URI that should be used as the base for resolving URIs in references (\\$ref)\n  readonly schemaPath: Code // the run-time expression that evaluates to the property name of the current schema\n  readonly errSchemaPath: string // this is actual string, should not be changed to Code\n  readonly errorPath: Code\n  readonly propertyName?: Name\n  readonly compositeRule?: boolean // true indicates that the current schema is inside the compound keyword,\n  // where failing some rule doesn't mean validation failure (`anyOf`, `oneOf`, `not`, `if`).\n  // This flag is used to determine whether you can return validation result immediately after any error in case the option `allErrors` is not `true.\n  // You only need to use it if you have many steps in your keywords and potentially can define multiple errors.\n  props?: EvaluatedProperties | Name // properties evaluated by this schema - used by parent schema or assigned to validation function\n  items?: EvaluatedItems | Name // last item evaluated by this schema - used by parent schema or assigned to validation function\n  jtdDiscriminator?: string\n  jtdMetadata?: boolean\n  readonly createErrors?: boolean\n  readonly opts: InstanceOptions // Ajv instance option.\n  readonly self: Ajv // current Ajv instance\n}\n\nexport interface SchemaObjCxt extends SchemaCxt {\n  readonly schema: AnySchemaObject\n}\ninterface SchemaEnvArgs {\n  readonly schema: AnySchema\n  readonly schemaId?: \"$id\" | \"id\"\n  readonly root?: SchemaEnv\n  readonly baseId?: string\n  readonly schemaPath?: string\n  readonly localRefs?: LocalRefs\n  readonly meta?: boolean\n}\n\nexport class SchemaEnv implements SchemaEnvArgs {\n  readonly schema: AnySchema\n  readonly schemaId?: \"$id\" | \"id\"\n  readonly root: SchemaEnv\n  baseId: string // TODO possibly, it should be readonly\n  schemaPath?: string\n  localRefs?: LocalRefs\n  readonly meta?: boolean\n  readonly $async?: boolean // true if the current schema is asynchronous.\n  readonly refs: SchemaRefs = {}\n  readonly dynamicAnchors: {[Ref in string]?: true} = {}\n  validate?: AnyValidateFunction\n  validateName?: ValueScopeName\n  serialize?: (data: unknown) => string\n  serializeName?: ValueScopeName\n  parse?: (data: string) => unknown\n  parseName?: ValueScopeName\n\n  constructor(env: SchemaEnvArgs) {\n    let schema: AnySchemaObject | undefined\n    if (typeof env.schema == \"object\") schema = env.schema\n    this.schema = env.schema\n    this.schemaId = env.schemaId\n    this.root = env.root || this\n    this.baseId = env.baseId ?? normalizeId(schema?.[env.schemaId || \"$id\"])\n    this.schemaPath = env.schemaPath\n    this.localRefs = env.localRefs\n    this.meta = env.meta\n    this.$async = schema?.$async\n    this.refs = {}\n  }\n}\n\n// let codeSize = 0\n// let nodeCount = 0\n\n// Compiles schema in SchemaEnv\nexport function compileSchema(this: Ajv, sch: SchemaEnv): SchemaEnv {\n  // TODO refactor - remove compilations\n  const _sch = getCompilingSchema.call(this, sch)\n  if (_sch) return _sch\n  const rootId = getFullPath(this.opts.uriResolver, sch.root.baseId) // TODO if getFullPath removed 1 tests fails\n  const {es5, lines} = this.opts.code\n  const {ownProperties} = this.opts\n  const gen = new CodeGen(this.scope, {es5, lines, ownProperties})\n  let _ValidationError\n  if (sch.$async) {\n    _ValidationError = gen.scopeValue(\"Error\", {\n      ref: ValidationError,\n      code: _`require(\"ajv/dist/runtime/validation_error\").default`,\n    })\n  }\n\n  const validateName = gen.scopeName(\"validate\")\n  sch.validateName = validateName\n\n  const schemaCxt: SchemaCxt = {\n    gen,\n    allErrors: this.opts.allErrors,\n    data: N.data,\n    parentData: N.parentData,\n    parentDataProperty: N.parentDataProperty,\n    dataNames: [N.data],\n    dataPathArr: [nil], // TODO can its length be used as dataLevel if nil is removed?\n    dataLevel: 0,\n    dataTypes: [],\n    definedProperties: new Set<string>(),\n    topSchemaRef: gen.scopeValue(\n      \"schema\",\n      this.opts.code.source === true\n        ? {ref: sch.schema, code: stringify(sch.schema)}\n        : {ref: sch.schema}\n    ),\n    validateName,\n    ValidationError: _ValidationError,\n    schema: sch.schema,\n    schemaEnv: sch,\n    rootId,\n    baseId: sch.baseId || rootId,\n    schemaPath: nil,\n    errSchemaPath: sch.schemaPath || (this.opts.jtd ? \"\" : \"#\"),\n    errorPath: _`\"\"`,\n    opts: this.opts,\n    self: this,\n  }\n\n  let sourceCode: string | undefined\n  try {\n    this._compilations.add(sch)\n    validateFunctionCode(schemaCxt)\n    gen.optimize(this.opts.code.optimize)\n    // gen.optimize(1)\n    const validateCode = gen.toString()\n    sourceCode = `${gen.scopeRefs(N.scope)}return ${validateCode}`\n    // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))\n    if (this.opts.code.process) sourceCode = this.opts.code.process(sourceCode, sch)\n    // console.log(\"\\n\\n\\n *** \\n\", sourceCode)\n    const makeValidate = new Function(`${N.self}`, `${N.scope}`, sourceCode)\n    const validate: AnyValidateFunction = makeValidate(this, this.scope.get())\n    this.scope.value(validateName, {ref: validate})\n\n    validate.errors = null\n    validate.schema = sch.schema\n    validate.schemaEnv = sch\n    if (sch.$async) (validate as AsyncValidateFunction).$async = true\n    if (this.opts.code.source === true) {\n      validate.source = {validateName, validateCode, scopeValues: gen._values}\n    }\n    if (this.opts.unevaluated) {\n      const {props, items} = schemaCxt\n      validate.evaluated = {\n        props: props instanceof Name ? undefined : props,\n        items: items instanceof Name ? undefined : items,\n        dynamicProps: props instanceof Name,\n        dynamicItems: items instanceof Name,\n      }\n      if (validate.source) validate.source.evaluated = stringify(validate.evaluated)\n    }\n    sch.validate = validate\n    return sch\n  } catch (e) {\n    delete sch.validate\n    delete sch.validateName\n    if (sourceCode) this.logger.error(\"Error compiling schema, function code:\", sourceCode)\n    // console.log(\"\\n\\n\\n *** \\n\", sourceCode, this.opts)\n    throw e\n  } finally {\n    this._compilations.delete(sch)\n  }\n}\n\nexport function resolveRef(\n  this: Ajv,\n  root: SchemaEnv,\n  baseId: string,\n  ref: string\n): AnySchema | SchemaEnv | undefined {\n  ref = resolveUrl(this.opts.uriResolver, baseId, ref)\n  const schOrFunc = root.refs[ref]\n  if (schOrFunc) return schOrFunc\n\n  let _sch = resolve.call(this, root, ref)\n  if (_sch === undefined) {\n    const schema = root.localRefs?.[ref] // TODO maybe localRefs should hold SchemaEnv\n    const {schemaId} = this.opts\n    if (schema) _sch = new SchemaEnv({schema, schemaId, root, baseId})\n  }\n\n  if (_sch === undefined) return\n  return (root.refs[ref] = inlineOrCompile.call(this, _sch))\n}\n\nfunction inlineOrCompile(this: Ajv, sch: SchemaEnv): AnySchema | SchemaEnv {\n  if (inlineRef(sch.schema, this.opts.inlineRefs)) return sch.schema\n  return sch.validate ? sch : compileSchema.call(this, sch)\n}\n\n// Index of schema compilation in the currently compiled list\nexport function getCompilingSchema(this: Ajv, schEnv: SchemaEnv): SchemaEnv | void {\n  for (const sch of this._compilations) {\n    if (sameSchemaEnv(sch, schEnv)) return sch\n  }\n}\n\nfunction sameSchemaEnv(s1: SchemaEnv, s2: SchemaEnv): boolean {\n  return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId\n}\n\n// resolve and compile the references ($ref)\n// TODO returns AnySchemaObject (if the schema can be inlined) or validation function\nfunction resolve(\n  this: Ajv,\n  root: SchemaEnv, // information about the root schema for the current schema\n  ref: string // reference to resolve\n): SchemaEnv | undefined {\n  let sch\n  while (typeof (sch = this.refs[ref]) == \"string\") ref = sch\n  return sch || this.schemas[ref] || resolveSchema.call(this, root, ref)\n}\n\n// Resolve schema, its root and baseId\nexport function resolveSchema(\n  this: Ajv,\n  root: SchemaEnv, // root object with properties schema, refs TODO below SchemaEnv is assigned to it\n  ref: string // reference to resolve\n): SchemaEnv | undefined {\n  const p = this.opts.uriResolver.parse(ref)\n  const refPath = _getFullPath(this.opts.uriResolver, p)\n  let baseId = getFullPath(this.opts.uriResolver, root.baseId, undefined)\n  // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests\n  if (Object.keys(root.schema).length > 0 && refPath === baseId) {\n    return getJsonPointer.call(this, p, root)\n  }\n\n  const id = normalizeId(refPath)\n  const schOrRef = this.refs[id] || this.schemas[id]\n  if (typeof schOrRef == \"string\") {\n    const sch = resolveSchema.call(this, root, schOrRef)\n    if (typeof sch?.schema !== \"object\") return\n    return getJsonPointer.call(this, p, sch)\n  }\n\n  if (typeof schOrRef?.schema !== \"object\") return\n  if (!schOrRef.validate) compileSchema.call(this, schOrRef)\n  if (id === normalizeId(ref)) {\n    const {schema} = schOrRef\n    const {schemaId} = this.opts\n    const schId = schema[schemaId]\n    if (schId) baseId = resolveUrl(this.opts.uriResolver, baseId, schId)\n    return new SchemaEnv({schema, schemaId, root, baseId})\n  }\n  return getJsonPointer.call(this, p, schOrRef)\n}\n\nconst PREVENT_SCOPE_CHANGE = new Set([\n  \"properties\",\n  \"patternProperties\",\n  \"enum\",\n  \"dependencies\",\n  \"definitions\",\n])\n\nfunction getJsonPointer(\n  this: Ajv,\n  parsedRef: URIComponent,\n  {baseId, schema, root}: SchemaEnv\n): SchemaEnv | undefined {\n  if (parsedRef.fragment?.[0] !== \"/\") return\n  for (const part of parsedRef.fragment.slice(1).split(\"/\")) {\n    if (typeof schema === \"boolean\") return\n    const partSchema = schema[unescapeFragment(part)]\n    if (partSchema === undefined) return\n    schema = partSchema\n    // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?\n    const schId = typeof schema === \"object\" && schema[this.opts.schemaId]\n    if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {\n      baseId = resolveUrl(this.opts.uriResolver, baseId, schId)\n    }\n  }\n  let env: SchemaEnv | undefined\n  if (typeof schema != \"boolean\" && schema.$ref && !schemaHasRulesButRef(schema, this.RULES)) {\n    const $ref = resolveUrl(this.opts.uriResolver, baseId, schema.$ref)\n    env = resolveSchema.call(this, root, $ref)\n  }\n  // even though resolution failed we need to return SchemaEnv to throw exception\n  // so that compileAsync loads missing schema.\n  const {schemaId} = this.opts\n  env = env || new SchemaEnv({schema, schemaId, root, baseId})\n  if (env.schema !== env.root.schema) return env\n  return undefined\n}\n","import type {AddedKeywordDefinition} from \"../types\"\n\nconst _jsonTypes = [\"string\", \"number\", \"integer\", \"boolean\", \"null\", \"object\", \"array\"] as const\n\nexport type JSONType = (typeof _jsonTypes)[number]\n\nconst jsonTypes: Set<string> = new Set(_jsonTypes)\n\nexport function isJSONType(x: unknown): x is JSONType {\n  return typeof x == \"string\" && jsonTypes.has(x)\n}\n\ntype ValidationTypes = {\n  [K in JSONType]: boolean | RuleGroup | undefined\n}\n\nexport interface ValidationRules {\n  rules: RuleGroup[]\n  post: RuleGroup\n  all: {[Key in string]?: boolean | Rule} // rules that have to be validated\n  keywords: {[Key in string]?: boolean} // all known keywords (superset of \"all\")\n  types: ValidationTypes\n}\n\nexport interface RuleGroup {\n  type?: JSONType\n  rules: Rule[]\n}\n\n// This interface wraps KeywordDefinition because definition can have multiple keywords\nexport interface Rule {\n  keyword: string\n  definition: AddedKeywordDefinition\n}\n\nexport function getRules(): ValidationRules {\n  const groups: Record<\"number\" | \"string\" | \"array\" | \"object\", RuleGroup> = {\n    number: {type: \"number\", rules: []},\n    string: {type: \"string\", rules: []},\n    array: {type: \"array\", rules: []},\n    object: {type: \"object\", rules: []},\n  }\n  return {\n    types: {...groups, integer: true, boolean: true, null: true},\n    rules: [{rules: []}, groups.number, groups.string, groups.array, groups.object],\n    post: {rules: []},\n    all: {},\n    keywords: {},\n  }\n}\n","import {_, nil, Code, Name} from \"./code\"\n\ninterface NameGroup {\n  prefix: string\n  index: number\n}\n\nexport interface NameValue {\n  ref: ValueReference // this is the reference to any value that can be referred to from generated code via `globals` var in the closure\n  key?: unknown // any key to identify a global to avoid duplicates, if not passed ref is used\n  code?: Code // this is the code creating the value needed for standalone code wit_out closure - can be a primitive value, function or import (`require`)\n}\n\nexport type ValueReference = unknown // possibly make CodeGen parameterized type on this type\n\nclass ValueError extends Error {\n  readonly value?: NameValue\n  constructor(name: ValueScopeName) {\n    super(`CodeGen: \"code\" for ${name} not defined`)\n    this.value = name.value\n  }\n}\n\ninterface ScopeOptions {\n  prefixes?: Set<string>\n  parent?: Scope\n}\n\ninterface ValueScopeOptions extends ScopeOptions {\n  scope: ScopeStore\n  es5?: boolean\n  lines?: boolean\n}\n\nexport type ScopeStore = Record<string, ValueReference[] | undefined>\n\ntype ScopeValues = {\n  [Prefix in string]?: Map<unknown, ValueScopeName>\n}\n\nexport type ScopeValueSets = {\n  [Prefix in string]?: Set<ValueScopeName>\n}\n\nexport enum UsedValueState {\n  Started,\n  Completed,\n}\n\nexport type UsedScopeValues = {\n  [Prefix in string]?: Map<ValueScopeName, UsedValueState | undefined>\n}\n\nexport const varKinds = {\n  const: new Name(\"const\"),\n  let: new Name(\"let\"),\n  var: new Name(\"var\"),\n}\n\nexport class Scope {\n  protected readonly _names: {[Prefix in string]?: NameGroup} = {}\n  protected readonly _prefixes?: Set<string>\n  protected readonly _parent?: Scope\n\n  constructor({prefixes, parent}: ScopeOptions = {}) {\n    this._prefixes = prefixes\n    this._parent = parent\n  }\n\n  toName(nameOrPrefix: Name | string): Name {\n    return nameOrPrefix instanceof Name ? nameOrPrefix : this.name(nameOrPrefix)\n  }\n\n  name(prefix: string): Name {\n    return new Name(this._newName(prefix))\n  }\n\n  protected _newName(prefix: string): string {\n    const ng = this._names[prefix] || this._nameGroup(prefix)\n    return `${prefix}${ng.index++}`\n  }\n\n  private _nameGroup(prefix: string): NameGroup {\n    if (this._parent?._prefixes?.has(prefix) || (this._prefixes && !this._prefixes.has(prefix))) {\n      throw new Error(`CodeGen: prefix \"${prefix}\" is not allowed in this scope`)\n    }\n    return (this._names[prefix] = {prefix, index: 0})\n  }\n}\n\ninterface ScopePath {\n  property: string\n  itemIndex: number\n}\n\nexport class ValueScopeName extends Name {\n  readonly prefix: string\n  value?: NameValue\n  scopePath?: Code\n\n  constructor(prefix: string, nameStr: string) {\n    super(nameStr)\n    this.prefix = prefix\n  }\n\n  setValue(value: NameValue, {property, itemIndex}: ScopePath): void {\n    this.value = value\n    this.scopePath = _`.${new Name(property)}[${itemIndex}]`\n  }\n}\n\ninterface VSOptions extends ValueScopeOptions {\n  _n: Code\n}\n\nconst line = _`\\n`\n\nexport class ValueScope extends Scope {\n  protected readonly _values: ScopeValues = {}\n  protected readonly _scope: ScopeStore\n  readonly opts: VSOptions\n\n  constructor(opts: ValueScopeOptions) {\n    super(opts)\n    this._scope = opts.scope\n    this.opts = {...opts, _n: opts.lines ? line : nil}\n  }\n\n  get(): ScopeStore {\n    return this._scope\n  }\n\n  name(prefix: string): ValueScopeName {\n    return new ValueScopeName(prefix, this._newName(prefix))\n  }\n\n  value(nameOrPrefix: ValueScopeName | string, value: NameValue): ValueScopeName {\n    if (value.ref === undefined) throw new Error(\"CodeGen: ref must be passed in value\")\n    const name = this.toName(nameOrPrefix) as ValueScopeName\n    const {prefix} = name\n    const valueKey = value.key ?? value.ref\n    let vs = this._values[prefix]\n    if (vs) {\n      const _name = vs.get(valueKey)\n      if (_name) return _name\n    } else {\n      vs = this._values[prefix] = new Map()\n    }\n    vs.set(valueKey, name)\n\n    const s = this._scope[prefix] || (this._scope[prefix] = [])\n    const itemIndex = s.length\n    s[itemIndex] = value.ref\n    name.setValue(value, {property: prefix, itemIndex})\n    return name\n  }\n\n  getValue(prefix: string, keyOrRef: unknown): ValueScopeName | undefined {\n    const vs = this._values[prefix]\n    if (!vs) return\n    return vs.get(keyOrRef)\n  }\n\n  scopeRefs(scopeName: Name, values: ScopeValues | ScopeValueSets = this._values): Code {\n    return this._reduceValues(values, (name: ValueScopeName) => {\n      if (name.scopePath === undefined) throw new Error(`CodeGen: name \"${name}\" has no value`)\n      return _`${scopeName}${name.scopePath}`\n    })\n  }\n\n  scopeCode(\n    values: ScopeValues | ScopeValueSets = this._values,\n    usedValues?: UsedScopeValues,\n    getCode?: (n: ValueScopeName) => Code | undefined\n  ): Code {\n    return this._reduceValues(\n      values,\n      (name: ValueScopeName) => {\n        if (name.value === undefined) throw new Error(`CodeGen: name \"${name}\" has no value`)\n        return name.value.code\n      },\n      usedValues,\n      getCode\n    )\n  }\n\n  private _reduceValues(\n    values: ScopeValues | ScopeValueSets,\n    valueCode: (n: ValueScopeName) => Code | undefined,\n    usedValues: UsedScopeValues = {},\n    getCode?: (n: ValueScopeName) => Code | undefined\n  ): Code {\n    let code: Code = nil\n    for (const prefix in values) {\n      const vs = values[prefix]\n      if (!vs) continue\n      const nameSet = (usedValues[prefix] = usedValues[prefix] || new Map())\n      vs.forEach((name: ValueScopeName) => {\n        if (nameSet.has(name)) return\n        nameSet.set(name, UsedValueState.Started)\n        let c = valueCode(name)\n        if (c) {\n          const def = this.opts.es5 ? varKinds.var : varKinds.const\n          code = _`${code}${def} ${name} = ${c};${this.opts._n}`\n        } else if ((c = getCode?.(name))) {\n          code = _`${code}${c}${this.opts._n}`\n        } else {\n          throw new ValueError(name)\n        }\n        nameSet.set(name, UsedValueState.Completed)\n      })\n    }\n    return code\n  }\n}\n","import type {ScopeValueSets, NameValue, ValueScope, ValueScopeName} from \"./scope\"\nimport {_, nil, _Code, Code, Name, UsedNames, CodeItem, addCodeArg, _CodeOrName} from \"./code\"\nimport {Scope, varKinds} from \"./scope\"\n\nexport {_, str, strConcat, nil, getProperty, stringify, regexpCode, Name, Code} from \"./code\"\nexport {Scope, ScopeStore, ValueScope, ValueScopeName, ScopeValueSets, varKinds} from \"./scope\"\n\n// type for expressions that can be safely inserted in code without quotes\nexport type SafeExpr = Code | number | boolean | null\n\n// type that is either Code of function that adds code to CodeGen instance using its methods\nexport type Block = Code | (() => void)\n\nexport const operators = {\n  GT: new _Code(\">\"),\n  GTE: new _Code(\">=\"),\n  LT: new _Code(\"<\"),\n  LTE: new _Code(\"<=\"),\n  EQ: new _Code(\"===\"),\n  NEQ: new _Code(\"!==\"),\n  NOT: new _Code(\"!\"),\n  OR: new _Code(\"||\"),\n  AND: new _Code(\"&&\"),\n  ADD: new _Code(\"+\"),\n}\n\nabstract class Node {\n  abstract readonly names: UsedNames\n\n  optimizeNodes(): this | ChildNode | ChildNode[] | undefined {\n    return this\n  }\n\n  optimizeNames(_names: UsedNames, _constants: Constants): this | undefined {\n    return this\n  }\n\n  // get count(): number {\n  //   return 1\n  // }\n}\n\nclass Def extends Node {\n  constructor(\n    private readonly varKind: Name,\n    private readonly name: Name,\n    private rhs?: SafeExpr\n  ) {\n    super()\n  }\n\n  render({es5, _n}: CGOptions): string {\n    const varKind = es5 ? varKinds.var : this.varKind\n    const rhs = this.rhs === undefined ? \"\" : ` = ${this.rhs}`\n    return `${varKind} ${this.name}${rhs};` + _n\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    if (!names[this.name.str]) return\n    if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    return this.rhs instanceof _CodeOrName ? this.rhs.names : {}\n  }\n}\n\nclass Assign extends Node {\n  constructor(\n    readonly lhs: Code,\n    public rhs: SafeExpr,\n    private readonly sideEffects?: boolean\n  ) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    return `${this.lhs} = ${this.rhs};` + _n\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    if (this.lhs instanceof Name && !names[this.lhs.str] && !this.sideEffects) return\n    this.rhs = optimizeExpr(this.rhs, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    const names = this.lhs instanceof Name ? {} : {...this.lhs.names}\n    return addExprNames(names, this.rhs)\n  }\n}\n\nclass AssignOp extends Assign {\n  constructor(\n    lhs: Code,\n    private readonly op: Code,\n    rhs: SafeExpr,\n    sideEffects?: boolean\n  ) {\n    super(lhs, rhs, sideEffects)\n  }\n\n  render({_n}: CGOptions): string {\n    return `${this.lhs} ${this.op}= ${this.rhs};` + _n\n  }\n}\n\nclass Label extends Node {\n  readonly names: UsedNames = {}\n  constructor(readonly label: Name) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    return `${this.label}:` + _n\n  }\n}\n\nclass Break extends Node {\n  readonly names: UsedNames = {}\n  constructor(readonly label?: Code) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    const label = this.label ? ` ${this.label}` : \"\"\n    return `break${label};` + _n\n  }\n}\n\nclass Throw extends Node {\n  constructor(readonly error: Code) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    return `throw ${this.error};` + _n\n  }\n\n  get names(): UsedNames {\n    return this.error.names\n  }\n}\n\nclass AnyCode extends Node {\n  constructor(private code: SafeExpr) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    return `${this.code};` + _n\n  }\n\n  optimizeNodes(): this | undefined {\n    return `${this.code}` ? this : undefined\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this {\n    this.code = optimizeExpr(this.code, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    return this.code instanceof _CodeOrName ? this.code.names : {}\n  }\n}\n\nabstract class ParentNode extends Node {\n  constructor(readonly nodes: ChildNode[] = []) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    return this.nodes.reduce((code, n) => code + n.render(opts), \"\")\n  }\n\n  optimizeNodes(): this | ChildNode | ChildNode[] | undefined {\n    const {nodes} = this\n    let i = nodes.length\n    while (i--) {\n      const n = nodes[i].optimizeNodes()\n      if (Array.isArray(n)) nodes.splice(i, 1, ...n)\n      else if (n) nodes[i] = n\n      else nodes.splice(i, 1)\n    }\n    return nodes.length > 0 ? this : undefined\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    const {nodes} = this\n    let i = nodes.length\n    while (i--) {\n      // iterating backwards improves 1-pass optimization\n      const n = nodes[i]\n      if (n.optimizeNames(names, constants)) continue\n      subtractNames(names, n.names)\n      nodes.splice(i, 1)\n    }\n    return nodes.length > 0 ? this : undefined\n  }\n\n  get names(): UsedNames {\n    return this.nodes.reduce((names: UsedNames, n) => addNames(names, n.names), {})\n  }\n\n  // get count(): number {\n  //   return this.nodes.reduce((c, n) => c + n.count, 1)\n  // }\n}\n\nabstract class BlockNode extends ParentNode {\n  render(opts: CGOptions): string {\n    return \"{\" + opts._n + super.render(opts) + \"}\" + opts._n\n  }\n}\n\nclass Root extends ParentNode {}\n\nclass Else extends BlockNode {\n  static readonly kind = \"else\"\n}\n\nclass If extends BlockNode {\n  static readonly kind = \"if\"\n  else?: If | Else\n  constructor(\n    private condition: Code | boolean,\n    nodes?: ChildNode[]\n  ) {\n    super(nodes)\n  }\n\n  render(opts: CGOptions): string {\n    let code = `if(${this.condition})` + super.render(opts)\n    if (this.else) code += \"else \" + this.else.render(opts)\n    return code\n  }\n\n  optimizeNodes(): If | ChildNode[] | undefined {\n    super.optimizeNodes()\n    const cond = this.condition\n    if (cond === true) return this.nodes // else is ignored here\n    let e = this.else\n    if (e) {\n      const ns = e.optimizeNodes()\n      e = this.else = Array.isArray(ns) ? new Else(ns) : (ns as Else | undefined)\n    }\n    if (e) {\n      if (cond === false) return e instanceof If ? e : e.nodes\n      if (this.nodes.length) return this\n      return new If(not(cond), e instanceof If ? [e] : e.nodes)\n    }\n    if (cond === false || !this.nodes.length) return undefined\n    return this\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    this.else = this.else?.optimizeNames(names, constants)\n    if (!(super.optimizeNames(names, constants) || this.else)) return\n    this.condition = optimizeExpr(this.condition, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    const names = super.names\n    addExprNames(names, this.condition)\n    if (this.else) addNames(names, this.else.names)\n    return names\n  }\n\n  // get count(): number {\n  //   return super.count + (this.else?.count || 0)\n  // }\n}\n\nabstract class For extends BlockNode {\n  static readonly kind = \"for\"\n}\n\nclass ForLoop extends For {\n  constructor(private iteration: Code) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    return `for(${this.iteration})` + super.render(opts)\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    if (!super.optimizeNames(names, constants)) return\n    this.iteration = optimizeExpr(this.iteration, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    return addNames(super.names, this.iteration.names)\n  }\n}\n\nclass ForRange extends For {\n  constructor(\n    private readonly varKind: Name,\n    private readonly name: Name,\n    private readonly from: SafeExpr,\n    private readonly to: SafeExpr\n  ) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    const varKind = opts.es5 ? varKinds.var : this.varKind\n    const {name, from, to} = this\n    return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts)\n  }\n\n  get names(): UsedNames {\n    const names = addExprNames(super.names, this.from)\n    return addExprNames(names, this.to)\n  }\n}\n\nclass ForIter extends For {\n  constructor(\n    private readonly loop: \"of\" | \"in\",\n    private readonly varKind: Name,\n    private readonly name: Name,\n    private iterable: Code\n  ) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts)\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    if (!super.optimizeNames(names, constants)) return\n    this.iterable = optimizeExpr(this.iterable, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    return addNames(super.names, this.iterable.names)\n  }\n}\n\nclass Func extends BlockNode {\n  static readonly kind = \"func\"\n  constructor(\n    public name: Name,\n    public args: Code,\n    public async?: boolean\n  ) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    const _async = this.async ? \"async \" : \"\"\n    return `${_async}function ${this.name}(${this.args})` + super.render(opts)\n  }\n}\n\nclass Return extends ParentNode {\n  static readonly kind = \"return\"\n\n  render(opts: CGOptions): string {\n    return \"return \" + super.render(opts)\n  }\n}\n\nclass Try extends BlockNode {\n  catch?: Catch\n  finally?: Finally\n\n  render(opts: CGOptions): string {\n    let code = \"try\" + super.render(opts)\n    if (this.catch) code += this.catch.render(opts)\n    if (this.finally) code += this.finally.render(opts)\n    return code\n  }\n\n  optimizeNodes(): this {\n    super.optimizeNodes()\n    this.catch?.optimizeNodes() as Catch | undefined\n    this.finally?.optimizeNodes() as Finally | undefined\n    return this\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this {\n    super.optimizeNames(names, constants)\n    this.catch?.optimizeNames(names, constants)\n    this.finally?.optimizeNames(names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    const names = super.names\n    if (this.catch) addNames(names, this.catch.names)\n    if (this.finally) addNames(names, this.finally.names)\n    return names\n  }\n\n  // get count(): number {\n  //   return super.count + (this.catch?.count || 0) + (this.finally?.count || 0)\n  // }\n}\n\nclass Catch extends BlockNode {\n  static readonly kind = \"catch\"\n  constructor(readonly error: Name) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    return `catch(${this.error})` + super.render(opts)\n  }\n}\n\nclass Finally extends BlockNode {\n  static readonly kind = \"finally\"\n  render(opts: CGOptions): string {\n    return \"finally\" + super.render(opts)\n  }\n}\n\ntype StartBlockNode = If | For | Func | Return | Try\n\ntype LeafNode = Def | Assign | Label | Break | Throw | AnyCode\n\ntype ChildNode = StartBlockNode | LeafNode\n\ntype EndBlockNodeType =\n  | typeof If\n  | typeof Else\n  | typeof For\n  | typeof Func\n  | typeof Return\n  | typeof Catch\n  | typeof Finally\n\ntype Constants = Record<string, SafeExpr | undefined>\n\nexport interface CodeGenOptions {\n  es5?: boolean\n  lines?: boolean\n  ownProperties?: boolean\n}\n\ninterface CGOptions extends CodeGenOptions {\n  _n: \"\\n\" | \"\"\n}\n\nexport class CodeGen {\n  readonly _scope: Scope\n  readonly _extScope: ValueScope\n  readonly _values: ScopeValueSets = {}\n  private readonly _nodes: ParentNode[]\n  private readonly _blockStarts: number[] = []\n  private readonly _constants: Constants = {}\n  private readonly opts: CGOptions\n\n  constructor(extScope: ValueScope, opts: CodeGenOptions = {}) {\n    this.opts = {...opts, _n: opts.lines ? \"\\n\" : \"\"}\n    this._extScope = extScope\n    this._scope = new Scope({parent: extScope})\n    this._nodes = [new Root()]\n  }\n\n  toString(): string {\n    return this._root.render(this.opts)\n  }\n\n  // returns unique name in the internal scope\n  name(prefix: string): Name {\n    return this._scope.name(prefix)\n  }\n\n  // reserves unique name in the external scope\n  scopeName(prefix: string): ValueScopeName {\n    return this._extScope.name(prefix)\n  }\n\n  // reserves unique name in the external scope and assigns value to it\n  scopeValue(prefixOrName: ValueScopeName | string, value: NameValue): Name {\n    const name = this._extScope.value(prefixOrName, value)\n    const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set())\n    vs.add(name)\n    return name\n  }\n\n  getScopeValue(prefix: string, keyOrRef: unknown): ValueScopeName | undefined {\n    return this._extScope.getValue(prefix, keyOrRef)\n  }\n\n  // return code that assigns values in the external scope to the names that are used internally\n  // (same names that were returned by gen.scopeName or gen.scopeValue)\n  scopeRefs(scopeName: Name): Code {\n    return this._extScope.scopeRefs(scopeName, this._values)\n  }\n\n  scopeCode(): Code {\n    return this._extScope.scopeCode(this._values)\n  }\n\n  private _def(\n    varKind: Name,\n    nameOrPrefix: Name | string,\n    rhs?: SafeExpr,\n    constant?: boolean\n  ): Name {\n    const name = this._scope.toName(nameOrPrefix)\n    if (rhs !== undefined && constant) this._constants[name.str] = rhs\n    this._leafNode(new Def(varKind, name, rhs))\n    return name\n  }\n\n  // `const` declaration (`var` in es5 mode)\n  const(nameOrPrefix: Name | string, rhs: SafeExpr, _constant?: boolean): Name {\n    return this._def(varKinds.const, nameOrPrefix, rhs, _constant)\n  }\n\n  // `let` declaration with optional assignment (`var` in es5 mode)\n  let(nameOrPrefix: Name | string, rhs?: SafeExpr, _constant?: boolean): Name {\n    return this._def(varKinds.let, nameOrPrefix, rhs, _constant)\n  }\n\n  // `var` declaration with optional assignment\n  var(nameOrPrefix: Name | string, rhs?: SafeExpr, _constant?: boolean): Name {\n    return this._def(varKinds.var, nameOrPrefix, rhs, _constant)\n  }\n\n  // assignment code\n  assign(lhs: Code, rhs: SafeExpr, sideEffects?: boolean): CodeGen {\n    return this._leafNode(new Assign(lhs, rhs, sideEffects))\n  }\n\n  // `+=` code\n  add(lhs: Code, rhs: SafeExpr): CodeGen {\n    return this._leafNode(new AssignOp(lhs, operators.ADD, rhs))\n  }\n\n  // appends passed SafeExpr to code or executes Block\n  code(c: Block | SafeExpr): CodeGen {\n    if (typeof c == \"function\") c()\n    else if (c !== nil) this._leafNode(new AnyCode(c))\n    return this\n  }\n\n  // returns code for object literal for the passed argument list of key-value pairs\n  object(...keyValues: [Name | string, SafeExpr | string][]): _Code {\n    const code: CodeItem[] = [\"{\"]\n    for (const [key, value] of keyValues) {\n      if (code.length > 1) code.push(\",\")\n      code.push(key)\n      if (key !== value || this.opts.es5) {\n        code.push(\":\")\n        addCodeArg(code, value)\n      }\n    }\n    code.push(\"}\")\n    return new _Code(code)\n  }\n\n  // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n  if(condition: Code | boolean, thenBody?: Block, elseBody?: Block): CodeGen {\n    this._blockNode(new If(condition))\n\n    if (thenBody && elseBody) {\n      this.code(thenBody).else().code(elseBody).endIf()\n    } else if (thenBody) {\n      this.code(thenBody).endIf()\n    } else if (elseBody) {\n      throw new Error('CodeGen: \"else\" body without \"then\" body')\n    }\n    return this\n  }\n\n  // `else if` clause - invalid without `if` or after `else` clauses\n  elseIf(condition: Code | boolean): CodeGen {\n    return this._elseNode(new If(condition))\n  }\n\n  // `else` clause - only valid after `if` or `else if` clauses\n  else(): CodeGen {\n    return this._elseNode(new Else())\n  }\n\n  // end `if` statement (needed if gen.if was used only with condition)\n  endIf(): CodeGen {\n    return this._endBlockNode(If, Else)\n  }\n\n  private _for(node: For, forBody?: Block): CodeGen {\n    this._blockNode(node)\n    if (forBody) this.code(forBody).endFor()\n    return this\n  }\n\n  // a generic `for` clause (or statement if `forBody` is passed)\n  for(iteration: Code, forBody?: Block): CodeGen {\n    return this._for(new ForLoop(iteration), forBody)\n  }\n\n  // `for` statement for a range of values\n  forRange(\n    nameOrPrefix: Name | string,\n    from: SafeExpr,\n    to: SafeExpr,\n    forBody: (index: Name) => void,\n    varKind: Code = this.opts.es5 ? varKinds.var : varKinds.let\n  ): CodeGen {\n    const name = this._scope.toName(nameOrPrefix)\n    return this._for(new ForRange(varKind, name, from, to), () => forBody(name))\n  }\n\n  // `for-of` statement (in es5 mode replace with a normal for loop)\n  forOf(\n    nameOrPrefix: Name | string,\n    iterable: Code,\n    forBody: (item: Name) => void,\n    varKind: Code = varKinds.const\n  ): CodeGen {\n    const name = this._scope.toName(nameOrPrefix)\n    if (this.opts.es5) {\n      const arr = iterable instanceof Name ? iterable : this.var(\"_arr\", iterable)\n      return this.forRange(\"_i\", 0, _`${arr}.length`, (i) => {\n        this.var(name, _`${arr}[${i}]`)\n        forBody(name)\n      })\n    }\n    return this._for(new ForIter(\"of\", varKind, name, iterable), () => forBody(name))\n  }\n\n  // `for-in` statement.\n  // With option `ownProperties` replaced with a `for-of` loop for object keys\n  forIn(\n    nameOrPrefix: Name | string,\n    obj: Code,\n    forBody: (item: Name) => void,\n    varKind: Code = this.opts.es5 ? varKinds.var : varKinds.const\n  ): CodeGen {\n    if (this.opts.ownProperties) {\n      return this.forOf(nameOrPrefix, _`Object.keys(${obj})`, forBody)\n    }\n    const name = this._scope.toName(nameOrPrefix)\n    return this._for(new ForIter(\"in\", varKind, name, obj), () => forBody(name))\n  }\n\n  // end `for` loop\n  endFor(): CodeGen {\n    return this._endBlockNode(For)\n  }\n\n  // `label` statement\n  label(label: Name): CodeGen {\n    return this._leafNode(new Label(label))\n  }\n\n  // `break` statement\n  break(label?: Code): CodeGen {\n    return this._leafNode(new Break(label))\n  }\n\n  // `return` statement\n  return(value: Block | SafeExpr): CodeGen {\n    const node = new Return()\n    this._blockNode(node)\n    this.code(value)\n    if (node.nodes.length !== 1) throw new Error('CodeGen: \"return\" should have one node')\n    return this._endBlockNode(Return)\n  }\n\n  // `try` statement\n  try(tryBody: Block, catchCode?: (e: Name) => void, finallyCode?: Block): CodeGen {\n    if (!catchCode && !finallyCode) throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"')\n    const node = new Try()\n    this._blockNode(node)\n    this.code(tryBody)\n    if (catchCode) {\n      const error = this.name(\"e\")\n      this._currNode = node.catch = new Catch(error)\n      catchCode(error)\n    }\n    if (finallyCode) {\n      this._currNode = node.finally = new Finally()\n      this.code(finallyCode)\n    }\n    return this._endBlockNode(Catch, Finally)\n  }\n\n  // `throw` statement\n  throw(error: Code): CodeGen {\n    return this._leafNode(new Throw(error))\n  }\n\n  // start self-balancing block\n  block(body?: Block, nodeCount?: number): CodeGen {\n    this._blockStarts.push(this._nodes.length)\n    if (body) this.code(body).endBlock(nodeCount)\n    return this\n  }\n\n  // end the current self-balancing block\n  endBlock(nodeCount?: number): CodeGen {\n    const len = this._blockStarts.pop()\n    if (len === undefined) throw new Error(\"CodeGen: not in self-balancing block\")\n    const toClose = this._nodes.length - len\n    if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {\n      throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`)\n    }\n    this._nodes.length = len\n    return this\n  }\n\n  // `function` heading (or definition if funcBody is passed)\n  func(name: Name, args: Code = nil, async?: boolean, funcBody?: Block): CodeGen {\n    this._blockNode(new Func(name, args, async))\n    if (funcBody) this.code(funcBody).endFunc()\n    return this\n  }\n\n  // end function definition\n  endFunc(): CodeGen {\n    return this._endBlockNode(Func)\n  }\n\n  optimize(n = 1): void {\n    while (n-- > 0) {\n      this._root.optimizeNodes()\n      this._root.optimizeNames(this._root.names, this._constants)\n    }\n  }\n\n  private _leafNode(node: LeafNode): CodeGen {\n    this._currNode.nodes.push(node)\n    return this\n  }\n\n  private _blockNode(node: StartBlockNode): void {\n    this._currNode.nodes.push(node)\n    this._nodes.push(node)\n  }\n\n  private _endBlockNode(N1: EndBlockNodeType, N2?: EndBlockNodeType): CodeGen {\n    const n = this._currNode\n    if (n instanceof N1 || (N2 && n instanceof N2)) {\n      this._nodes.pop()\n      return this\n    }\n    throw new Error(`CodeGen: not in block \"${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}\"`)\n  }\n\n  private _elseNode(node: If | Else): CodeGen {\n    const n = this._currNode\n    if (!(n instanceof If)) {\n      throw new Error('CodeGen: \"else\" without \"if\"')\n    }\n    this._currNode = n.else = node\n    return this\n  }\n\n  private get _root(): Root {\n    return this._nodes[0] as Root\n  }\n\n  private get _currNode(): ParentNode {\n    const ns = this._nodes\n    return ns[ns.length - 1]\n  }\n\n  private set _currNode(node: ParentNode) {\n    const ns = this._nodes\n    ns[ns.length - 1] = node\n  }\n\n  // get nodeCount(): number {\n  //   return this._root.count\n  // }\n}\n\nfunction addNames(names: UsedNames, from: UsedNames): UsedNames {\n  for (const n in from) names[n] = (names[n] || 0) + (from[n] || 0)\n  return names\n}\n\nfunction addExprNames(names: UsedNames, from: SafeExpr): UsedNames {\n  return from instanceof _CodeOrName ? addNames(names, from.names) : names\n}\n\nfunction optimizeExpr<T extends SafeExpr | Code>(expr: T, names: UsedNames, constants: Constants): T\nfunction optimizeExpr(expr: SafeExpr, names: UsedNames, constants: Constants): SafeExpr {\n  if (expr instanceof Name) return replaceName(expr)\n  if (!canOptimize(expr)) return expr\n  return new _Code(\n    expr._items.reduce((items: CodeItem[], c: SafeExpr | string) => {\n      if (c instanceof Name) c = replaceName(c)\n      if (c instanceof _Code) items.push(...c._items)\n      else items.push(c)\n      return items\n    }, [])\n  )\n\n  function replaceName(n: Name): SafeExpr {\n    const c = constants[n.str]\n    if (c === undefined || names[n.str] !== 1) return n\n    delete names[n.str]\n    return c\n  }\n\n  function canOptimize(e: SafeExpr): e is _Code {\n    return (\n      e instanceof _Code &&\n      e._items.some(\n        (c) => c instanceof Name && names[c.str] === 1 && constants[c.str] !== undefined\n      )\n    )\n  }\n}\n\nfunction subtractNames(names: UsedNames, from: UsedNames): void {\n  for (const n in from) names[n] = (names[n] || 0) - (from[n] || 0)\n}\n\nexport function not<T extends Code | SafeExpr>(x: T): T\nexport function not(x: Code | SafeExpr): Code | SafeExpr {\n  return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : _`!${par(x)}`\n}\n\nconst andCode = mappend(operators.AND)\n\n// boolean AND (&&) expression with the passed arguments\nexport function and(...args: Code[]): Code {\n  return args.reduce(andCode)\n}\n\nconst orCode = mappend(operators.OR)\n\n// boolean OR (||) expression with the passed arguments\nexport function or(...args: Code[]): Code {\n  return args.reduce(orCode)\n}\n\ntype MAppend = (x: Code, y: Code) => Code\n\nfunction mappend(op: Code): MAppend {\n  return (x, y) => (x === nil ? y : y === nil ? x : _`${par(x)} ${op} ${par(y)}`)\n}\n\nfunction par(x: Code): Code {\n  return x instanceof Name ? x : _`(${x})`\n}\n","import type {KeywordCxt} from \".\"\nimport type {\n  AnySchema,\n  SchemaValidateFunction,\n  AnyValidateFunction,\n  AddedKeywordDefinition,\n  MacroKeywordDefinition,\n  FuncKeywordDefinition,\n} from \"../../types\"\nimport type {SchemaObjCxt} from \"..\"\nimport {_, nil, not, stringify, Code, Name, CodeGen} from \"../codegen\"\nimport N from \"../names\"\nimport type {JSONType} from \"../rules\"\nimport {callValidateCode} from \"../../vocabularies/code\"\nimport {extendErrors} from \"../errors\"\n\ntype KeywordCompilationResult = AnySchema | SchemaValidateFunction | AnyValidateFunction\n\nexport function macroKeywordCode(cxt: KeywordCxt, def: MacroKeywordDefinition): void {\n  const {gen, keyword, schema, parentSchema, it} = cxt\n  const macroSchema = def.macro.call(it.self, schema, parentSchema, it)\n  const schemaRef = useKeyword(gen, keyword, macroSchema)\n  if (it.opts.validateSchema !== false) it.self.validateSchema(macroSchema, true)\n\n  const valid = gen.name(\"valid\")\n  cxt.subschema(\n    {\n      schema: macroSchema,\n      schemaPath: nil,\n      errSchemaPath: `${it.errSchemaPath}/${keyword}`,\n      topSchemaRef: schemaRef,\n      compositeRule: true,\n    },\n    valid\n  )\n  cxt.pass(valid, () => cxt.error(true))\n}\n\nexport function funcKeywordCode(cxt: KeywordCxt, def: FuncKeywordDefinition): void {\n  const {gen, keyword, schema, parentSchema, $data, it} = cxt\n  checkAsyncKeyword(it, def)\n  const validate =\n    !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate\n  const validateRef = useKeyword(gen, keyword, validate)\n  const valid = gen.let(\"valid\")\n  cxt.block$data(valid, validateKeyword)\n  cxt.ok(def.valid ?? valid)\n\n  function validateKeyword(): void {\n    if (def.errors === false) {\n      assignValid()\n      if (def.modifying) modifyData(cxt)\n      reportErrs(() => cxt.error())\n    } else {\n      const ruleErrs = def.async ? validateAsync() : validateSync()\n      if (def.modifying) modifyData(cxt)\n      reportErrs(() => addErrs(cxt, ruleErrs))\n    }\n  }\n\n  function validateAsync(): Name {\n    const ruleErrs = gen.let(\"ruleErrs\", null)\n    gen.try(\n      () => assignValid(_`await `),\n      (e) =>\n        gen.assign(valid, false).if(\n          _`${e} instanceof ${it.ValidationError as Name}`,\n          () => gen.assign(ruleErrs, _`${e}.errors`),\n          () => gen.throw(e)\n        )\n    )\n    return ruleErrs\n  }\n\n  function validateSync(): Code {\n    const validateErrs = _`${validateRef}.errors`\n    gen.assign(validateErrs, null)\n    assignValid(nil)\n    return validateErrs\n  }\n\n  function assignValid(_await: Code = def.async ? _`await ` : nil): void {\n    const passCxt = it.opts.passContext ? N.this : N.self\n    const passSchema = !((\"compile\" in def && !$data) || def.schema === false)\n    gen.assign(\n      valid,\n      _`${_await}${callValidateCode(cxt, validateRef, passCxt, passSchema)}`,\n      def.modifying\n    )\n  }\n\n  function reportErrs(errors: () => void): void {\n    gen.if(not(def.valid ?? valid), errors)\n  }\n}\n\nfunction modifyData(cxt: KeywordCxt): void {\n  const {gen, data, it} = cxt\n  gen.if(it.parentData, () => gen.assign(data, _`${it.parentData}[${it.parentDataProperty}]`))\n}\n\nfunction addErrs(cxt: KeywordCxt, errs: Code): void {\n  const {gen} = cxt\n  gen.if(\n    _`Array.isArray(${errs})`,\n    () => {\n      gen\n        .assign(N.vErrors, _`${N.vErrors} === null ? ${errs} : ${N.vErrors}.concat(${errs})`)\n        .assign(N.errors, _`${N.vErrors}.length`)\n      extendErrors(cxt)\n    },\n    () => cxt.error()\n  )\n}\n\nfunction checkAsyncKeyword({schemaEnv}: SchemaObjCxt, def: FuncKeywordDefinition): void {\n  if (def.async && !schemaEnv.$async) throw new Error(\"async keyword in sync schema\")\n}\n\nfunction useKeyword(gen: CodeGen, keyword: string, result?: KeywordCompilationResult): Name {\n  if (result === undefined) throw new Error(`keyword \"${keyword}\" failed to compile`)\n  return gen.scopeValue(\n    \"keyword\",\n    typeof result == \"function\" ? {ref: result} : {ref: result, code: stringify(result)}\n  )\n}\n\nexport function validSchemaType(\n  schema: unknown,\n  schemaType: JSONType[],\n  allowUndefined = false\n): boolean {\n  // TODO add tests\n  return (\n    !schemaType.length ||\n    schemaType.some((st) =>\n      st === \"array\"\n        ? Array.isArray(schema)\n        : st === \"object\"\n        ? schema && typeof schema == \"object\" && !Array.isArray(schema)\n        : typeof schema == st || (allowUndefined && typeof schema == \"undefined\")\n    )\n  )\n}\n\nexport function validateKeywordUsage(\n  {schema, opts, self, errSchemaPath}: SchemaObjCxt,\n  def: AddedKeywordDefinition,\n  keyword: string\n): void {\n  /* istanbul ignore if */\n  if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {\n    throw new Error(\"ajv implementation error\")\n  }\n\n  const deps = def.dependencies\n  if (deps?.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {\n    throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(\",\")}`)\n  }\n\n  if (def.validateSchema) {\n    const valid = def.validateSchema(schema[keyword])\n    if (!valid) {\n      const msg =\n        `keyword \"${keyword}\" value is invalid at path \"${errSchemaPath}\": ` +\n        self.errorsText(def.validateSchema.errors)\n      if (opts.validateSchema === \"log\") self.logger.error(msg)\n      else throw new Error(msg)\n    }\n  }\n}\n","import type {AnySchema, SchemaMap} from \"../types\"\nimport type {SchemaCxt} from \"../compile\"\nimport type {KeywordCxt} from \"../compile/validate\"\nimport {CodeGen, _, and, or, not, nil, strConcat, getProperty, Code, Name} from \"../compile/codegen\"\nimport {alwaysValidSchema, Type} from \"../compile/util\"\nimport N from \"../compile/names\"\nimport {useFunc} from \"../compile/util\"\nexport function checkReportMissingProp(cxt: KeywordCxt, prop: string): void {\n  const {gen, data, it} = cxt\n  gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {\n    cxt.setParams({missingProperty: _`${prop}`}, true)\n    cxt.error()\n  })\n}\n\nexport function checkMissingProp(\n  {gen, data, it: {opts}}: KeywordCxt,\n  properties: string[],\n  missing: Name\n): Code {\n  return or(\n    ...properties.map((prop) =>\n      and(noPropertyInData(gen, data, prop, opts.ownProperties), _`${missing} = ${prop}`)\n    )\n  )\n}\n\nexport function reportMissingProp(cxt: KeywordCxt, missing: Name): void {\n  cxt.setParams({missingProperty: missing}, true)\n  cxt.error()\n}\n\nexport function hasPropFunc(gen: CodeGen): Name {\n  return gen.scopeValue(\"func\", {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    ref: Object.prototype.hasOwnProperty,\n    code: _`Object.prototype.hasOwnProperty`,\n  })\n}\n\nexport function isOwnProperty(gen: CodeGen, data: Name, property: Name | string): Code {\n  return _`${hasPropFunc(gen)}.call(${data}, ${property})`\n}\n\nexport function propertyInData(\n  gen: CodeGen,\n  data: Name,\n  property: Name | string,\n  ownProperties?: boolean\n): Code {\n  const cond = _`${data}${getProperty(property)} !== undefined`\n  return ownProperties ? _`${cond} && ${isOwnProperty(gen, data, property)}` : cond\n}\n\nexport function noPropertyInData(\n  gen: CodeGen,\n  data: Name,\n  property: Name | string,\n  ownProperties?: boolean\n): Code {\n  const cond = _`${data}${getProperty(property)} === undefined`\n  return ownProperties ? or(cond, not(isOwnProperty(gen, data, property))) : cond\n}\n\nexport function allSchemaProperties(schemaMap?: SchemaMap): string[] {\n  return schemaMap ? Object.keys(schemaMap).filter((p) => p !== \"__proto__\") : []\n}\n\nexport function schemaProperties(it: SchemaCxt, schemaMap: SchemaMap): string[] {\n  return allSchemaProperties(schemaMap).filter(\n    (p) => !alwaysValidSchema(it, schemaMap[p] as AnySchema)\n  )\n}\n\nexport function callValidateCode(\n  {schemaCode, data, it: {gen, topSchemaRef, schemaPath, errorPath}, it}: KeywordCxt,\n  func: Code,\n  context: Code,\n  passSchema?: boolean\n): Code {\n  const dataAndSchema = passSchema ? _`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data\n  const valCxt: [Name, Code | number][] = [\n    [N.instancePath, strConcat(N.instancePath, errorPath)],\n    [N.parentData, it.parentData],\n    [N.parentDataProperty, it.parentDataProperty],\n    [N.rootData, N.rootData],\n  ]\n  if (it.opts.dynamicRef) valCxt.push([N.dynamicAnchors, N.dynamicAnchors])\n  const args = _`${dataAndSchema}, ${gen.object(...valCxt)}`\n  return context !== nil ? _`${func}.call(${context}, ${args})` : _`${func}(${args})`\n}\n\nconst newRegExp = _`new RegExp`\n\nexport function usePattern({gen, it: {opts}}: KeywordCxt, pattern: string): Name {\n  const u = opts.unicodeRegExp ? \"u\" : \"\"\n  const {regExp} = opts.code\n  const rx = regExp(pattern, u)\n\n  return gen.scopeValue(\"pattern\", {\n    key: rx.toString(),\n    ref: rx,\n    code: _`${regExp.code === \"new RegExp\" ? newRegExp : useFunc(gen, regExp)}(${pattern}, ${u})`,\n  })\n}\n\nexport function validateArray(cxt: KeywordCxt): Name {\n  const {gen, data, keyword, it} = cxt\n  const valid = gen.name(\"valid\")\n  if (it.allErrors) {\n    const validArr = gen.let(\"valid\", true)\n    validateItems(() => gen.assign(validArr, false))\n    return validArr\n  }\n  gen.var(valid, true)\n  validateItems(() => gen.break())\n  return valid\n\n  function validateItems(notValid: () => void): void {\n    const len = gen.const(\"len\", _`${data}.length`)\n    gen.forRange(\"i\", 0, len, (i) => {\n      cxt.subschema(\n        {\n          keyword,\n          dataProp: i,\n          dataPropType: Type.Num,\n        },\n        valid\n      )\n      gen.if(not(valid), notValid)\n    })\n  }\n}\n\nexport function validateUnion(cxt: KeywordCxt): void {\n  const {gen, schema, keyword, it} = cxt\n  /* istanbul ignore if */\n  if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\")\n  const alwaysValid = schema.some((sch: AnySchema) => alwaysValidSchema(it, sch))\n  if (alwaysValid && !it.opts.unevaluated) return\n\n  const valid = gen.let(\"valid\", false)\n  const schValid = gen.name(\"_valid\")\n\n  gen.block(() =>\n    schema.forEach((_sch: AnySchema, i: number) => {\n      const schCxt = cxt.subschema(\n        {\n          keyword,\n          schemaProp: i,\n          compositeRule: true,\n        },\n        schValid\n      )\n      gen.assign(valid, _`${valid} || ${schValid}`)\n      const merged = cxt.mergeValidEvaluated(schCxt, schValid)\n      // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)\n      // or if all properties and items were evaluated (it.props === true && it.items === true)\n      if (!merged) gen.if(not(valid))\n    })\n  )\n\n  cxt.result(\n    valid,\n    () => cxt.reset(),\n    () => cxt.error(true)\n  )\n}\n","import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, not, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema, checkStrictMode, Type} from \"../../compile/util\"\n\nexport type AdditionalItemsError = ErrorObject<\"additionalItems\", {limit: number}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {len}}) => str`must NOT have more than ${len} items`,\n  params: ({params: {len}}) => _`{limit: ${len}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"additionalItems\" as const,\n  type: \"array\",\n  schemaType: [\"boolean\", \"object\"],\n  before: \"uniqueItems\",\n  error,\n  code(cxt: KeywordCxt) {\n    const {parentSchema, it} = cxt\n    const {items} = parentSchema\n    if (!Array.isArray(items)) {\n      checkStrictMode(it, '\"additionalItems\" is ignored when \"items\" is not an array of schemas')\n      return\n    }\n    validateAdditionalItems(cxt, items)\n  },\n}\n\nexport function validateAdditionalItems(cxt: KeywordCxt, items: AnySchema[]): void {\n  const {gen, schema, data, keyword, it} = cxt\n  it.items = true\n  const len = gen.const(\"len\", _`${data}.length`)\n  if (schema === false) {\n    cxt.setParams({len: items.length})\n    cxt.pass(_`${len} <= ${items.length}`)\n  } else if (typeof schema == \"object\" && !alwaysValidSchema(it, schema)) {\n    const valid = gen.var(\"valid\", _`${len} <= ${items.length}`) // TODO var\n    gen.if(not(valid), () => validateItems(valid))\n    cxt.ok(valid)\n  }\n\n  function validateItems(valid: Name): void {\n    gen.forRange(\"i\", items.length, len, (i) => {\n      cxt.subschema({keyword, dataProp: i, dataPropType: Type.Num}, valid)\n      if (!it.allErrors) gen.if(not(valid), () => gen.break())\n    })\n  }\n}\n\nexport default def\n","'use strict'\n\nconst UUID_REG = /^[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/iu\nconst URN_REG = /([\\da-z][\\d\\-a-z]{0,31}):((?:[\\w!$'()*+,\\-.:;=@]|%[\\da-f]{2})+)/iu\n\nfunction isSecure (wsComponents) {\n  return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === 'wss'\n}\n\nfunction httpParse (components) {\n  if (!components.host) {\n    components.error = components.error || 'HTTP URIs must have a host.'\n  }\n\n  return components\n}\n\nfunction httpSerialize (components) {\n  const secure = String(components.scheme).toLowerCase() === 'https'\n\n  // normalize the default port\n  if (components.port === (secure ? 443 : 80) || components.port === '') {\n    components.port = undefined\n  }\n\n  // normalize the empty path\n  if (!components.path) {\n    components.path = '/'\n  }\n\n  // NOTE: We do not parse query strings for HTTP URIs\n  // as WWW Form Url Encoded query strings are part of the HTML4+ spec,\n  // and not the HTTP spec.\n\n  return components\n}\n\nfunction wsParse (wsComponents) {\n// indicate if the secure flag is set\n  wsComponents.secure = isSecure(wsComponents)\n\n  // construct resouce name\n  wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '')\n  wsComponents.path = undefined\n  wsComponents.query = undefined\n\n  return wsComponents\n}\n\nfunction wsSerialize (wsComponents) {\n// normalize the default port\n  if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === '') {\n    wsComponents.port = undefined\n  }\n\n  // ensure scheme matches secure flag\n  if (typeof wsComponents.secure === 'boolean') {\n    wsComponents.scheme = (wsComponents.secure ? 'wss' : 'ws')\n    wsComponents.secure = undefined\n  }\n\n  // reconstruct path from resource name\n  if (wsComponents.resourceName) {\n    const [path, query] = wsComponents.resourceName.split('?')\n    wsComponents.path = (path && path !== '/' ? path : undefined)\n    wsComponents.query = query\n    wsComponents.resourceName = undefined\n  }\n\n  // forbid fragment component\n  wsComponents.fragment = undefined\n\n  return wsComponents\n}\n\nfunction urnParse (urnComponents, options) {\n  if (!urnComponents.path) {\n    urnComponents.error = 'URN can not be parsed'\n    return urnComponents\n  }\n  const matches = urnComponents.path.match(URN_REG)\n  if (matches) {\n    const scheme = options.scheme || urnComponents.scheme || 'urn'\n    urnComponents.nid = matches[1].toLowerCase()\n    urnComponents.nss = matches[2]\n    const urnScheme = `${scheme}:${options.nid || urnComponents.nid}`\n    const schemeHandler = SCHEMES[urnScheme]\n    urnComponents.path = undefined\n\n    if (schemeHandler) {\n      urnComponents = schemeHandler.parse(urnComponents, options)\n    }\n  } else {\n    urnComponents.error = urnComponents.error || 'URN can not be parsed.'\n  }\n\n  return urnComponents\n}\n\nfunction urnSerialize (urnComponents, options) {\n  const scheme = options.scheme || urnComponents.scheme || 'urn'\n  const nid = urnComponents.nid.toLowerCase()\n  const urnScheme = `${scheme}:${options.nid || nid}`\n  const schemeHandler = SCHEMES[urnScheme]\n\n  if (schemeHandler) {\n    urnComponents = schemeHandler.serialize(urnComponents, options)\n  }\n\n  const uriComponents = urnComponents\n  const nss = urnComponents.nss\n  uriComponents.path = `${nid || options.nid}:${nss}`\n\n  options.skipEscape = true\n  return uriComponents\n}\n\nfunction urnuuidParse (urnComponents, options) {\n  const uuidComponents = urnComponents\n  uuidComponents.uuid = uuidComponents.nss\n  uuidComponents.nss = undefined\n\n  if (!options.tolerant && (!uuidComponents.uuid || !UUID_REG.test(uuidComponents.uuid))) {\n    uuidComponents.error = uuidComponents.error || 'UUID is not valid.'\n  }\n\n  return uuidComponents\n}\n\nfunction urnuuidSerialize (uuidComponents) {\n  const urnComponents = uuidComponents\n  // normalize UUID\n  urnComponents.nss = (uuidComponents.uuid || '').toLowerCase()\n  return urnComponents\n}\n\nconst http = {\n  scheme: 'http',\n  domainHost: true,\n  parse: httpParse,\n  serialize: httpSerialize\n}\n\nconst https = {\n  scheme: 'https',\n  domainHost: http.domainHost,\n  parse: httpParse,\n  serialize: httpSerialize\n}\n\nconst ws = {\n  scheme: 'ws',\n  domainHost: true,\n  parse: wsParse,\n  serialize: wsSerialize\n}\n\nconst wss = {\n  scheme: 'wss',\n  domainHost: ws.domainHost,\n  parse: ws.parse,\n  serialize: ws.serialize\n}\n\nconst urn = {\n  scheme: 'urn',\n  parse: urnParse,\n  serialize: urnSerialize,\n  skipNormalize: true\n}\n\nconst urnuuid = {\n  scheme: 'urn:uuid',\n  parse: urnuuidParse,\n  serialize: urnuuidSerialize,\n  skipNormalize: true\n}\n\nconst SCHEMES = {\n  http,\n  https,\n  ws,\n  wss,\n  urn,\n  'urn:uuid': urnuuid\n}\n\nmodule.exports = SCHEMES\n","import type {AnySchema, AnySchemaObject, UriResolver} from \"../types\"\nimport type Ajv from \"../ajv\"\nimport type {URIComponent} from \"fast-uri\"\nimport {eachItem} from \"./util\"\nimport * as equal from \"fast-deep-equal\"\nimport * as traverse from \"json-schema-traverse\"\n\n// the hash of local references inside the schema (created by getSchemaRefs), used for inline resolution\nexport type LocalRefs = {[Ref in string]?: AnySchemaObject}\n\n// TODO refactor to use keyword definitions\nconst SIMPLE_INLINED = new Set([\n  \"type\",\n  \"format\",\n  \"pattern\",\n  \"maxLength\",\n  \"minLength\",\n  \"maxProperties\",\n  \"minProperties\",\n  \"maxItems\",\n  \"minItems\",\n  \"maximum\",\n  \"minimum\",\n  \"uniqueItems\",\n  \"multipleOf\",\n  \"required\",\n  \"enum\",\n  \"const\",\n])\n\nexport function inlineRef(schema: AnySchema, limit: boolean | number = true): boolean {\n  if (typeof schema == \"boolean\") return true\n  if (limit === true) return !hasRef(schema)\n  if (!limit) return false\n  return countKeys(schema) <= limit\n}\n\nconst REF_KEYWORDS = new Set([\n  \"$ref\",\n  \"$recursiveRef\",\n  \"$recursiveAnchor\",\n  \"$dynamicRef\",\n  \"$dynamicAnchor\",\n])\n\nfunction hasRef(schema: AnySchemaObject): boolean {\n  for (const key in schema) {\n    if (REF_KEYWORDS.has(key)) return true\n    const sch = schema[key]\n    if (Array.isArray(sch) && sch.some(hasRef)) return true\n    if (typeof sch == \"object\" && hasRef(sch)) return true\n  }\n  return false\n}\n\nfunction countKeys(schema: AnySchemaObject): number {\n  let count = 0\n  for (const key in schema) {\n    if (key === \"$ref\") return Infinity\n    count++\n    if (SIMPLE_INLINED.has(key)) continue\n    if (typeof schema[key] == \"object\") {\n      eachItem(schema[key], (sch) => (count += countKeys(sch)))\n    }\n    if (count === Infinity) return Infinity\n  }\n  return count\n}\n\nexport function getFullPath(resolver: UriResolver, id = \"\", normalize?: boolean): string {\n  if (normalize !== false) id = normalizeId(id)\n  const p = resolver.parse(id)\n  return _getFullPath(resolver, p)\n}\n\nexport function _getFullPath(resolver: UriResolver, p: URIComponent): string {\n  const serialized = resolver.serialize(p)\n  return serialized.split(\"#\")[0] + \"#\"\n}\n\nconst TRAILING_SLASH_HASH = /#\\/?$/\nexport function normalizeId(id: string | undefined): string {\n  return id ? id.replace(TRAILING_SLASH_HASH, \"\") : \"\"\n}\n\nexport function resolveUrl(resolver: UriResolver, baseId: string, id: string): string {\n  id = normalizeId(id)\n  return resolver.resolve(baseId, id)\n}\n\nconst ANCHOR = /^[a-z_][-a-z0-9._]*$/i\n\nexport function getSchemaRefs(this: Ajv, schema: AnySchema, baseId: string): LocalRefs {\n  if (typeof schema == \"boolean\") return {}\n  const {schemaId, uriResolver} = this.opts\n  const schId = normalizeId(schema[schemaId] || baseId)\n  const baseIds: {[JsonPtr in string]?: string} = {\"\": schId}\n  const pathPrefix = getFullPath(uriResolver, schId, false)\n  const localRefs: LocalRefs = {}\n  const schemaRefs: Set<string> = new Set()\n\n  traverse(schema, {allKeys: true}, (sch, jsonPtr, _, parentJsonPtr) => {\n    if (parentJsonPtr === undefined) return\n    const fullPath = pathPrefix + jsonPtr\n    let innerBaseId = baseIds[parentJsonPtr]\n    if (typeof sch[schemaId] == \"string\") innerBaseId = addRef.call(this, sch[schemaId])\n    addAnchor.call(this, sch.$anchor)\n    addAnchor.call(this, sch.$dynamicAnchor)\n    baseIds[jsonPtr] = innerBaseId\n\n    function addRef(this: Ajv, ref: string): string {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const _resolve = this.opts.uriResolver.resolve\n      ref = normalizeId(innerBaseId ? _resolve(innerBaseId, ref) : ref)\n      if (schemaRefs.has(ref)) throw ambiguos(ref)\n      schemaRefs.add(ref)\n      let schOrRef = this.refs[ref]\n      if (typeof schOrRef == \"string\") schOrRef = this.refs[schOrRef]\n      if (typeof schOrRef == \"object\") {\n        checkAmbiguosRef(sch, schOrRef.schema, ref)\n      } else if (ref !== normalizeId(fullPath)) {\n        if (ref[0] === \"#\") {\n          checkAmbiguosRef(sch, localRefs[ref], ref)\n          localRefs[ref] = sch\n        } else {\n          this.refs[ref] = fullPath\n        }\n      }\n      return ref\n    }\n\n    function addAnchor(this: Ajv, anchor: unknown): void {\n      if (typeof anchor == \"string\") {\n        if (!ANCHOR.test(anchor)) throw new Error(`invalid anchor \"${anchor}\"`)\n        addRef.call(this, `#${anchor}`)\n      }\n    }\n  })\n\n  return localRefs\n\n  function checkAmbiguosRef(sch1: AnySchema, sch2: AnySchema | undefined, ref: string): void {\n    if (sch2 !== undefined && !equal(sch1, sch2)) throw ambiguos(ref)\n  }\n\n  function ambiguos(ref: string): Error {\n    return new Error(`reference \"${ref}\" resolves to more than one schema`)\n  }\n}\n","import type {CodeKeywordDefinition} from \"../../types\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"id\",\n  code() {\n    throw new Error('NOT SUPPORTED: keyword \"id\", use \"$id\" for schema ID')\n  },\n}\n\nexport default def\n","import type {ErrorNoParams, Vocabulary} from \"../../types\"\nimport additionalItems, {AdditionalItemsError} from \"./additionalItems\"\nimport prefixItems from \"./prefixItems\"\nimport items from \"./items\"\nimport items2020, {ItemsError} from \"./items2020\"\nimport contains, {ContainsError} from \"./contains\"\nimport dependencies, {DependenciesError} from \"./dependencies\"\nimport propertyNames, {PropertyNamesError} from \"./propertyNames\"\nimport additionalProperties, {AdditionalPropertiesError} from \"./additionalProperties\"\nimport properties from \"./properties\"\nimport patternProperties from \"./patternProperties\"\nimport notKeyword, {NotKeywordError} from \"./not\"\nimport anyOf, {AnyOfError} from \"./anyOf\"\nimport oneOf, {OneOfError} from \"./oneOf\"\nimport allOf from \"./allOf\"\nimport ifKeyword, {IfKeywordError} from \"./if\"\nimport thenElse from \"./thenElse\"\n\nexport default function getApplicator(draft2020 = false): Vocabulary {\n  const applicator = [\n    // any\n    notKeyword,\n    anyOf,\n    oneOf,\n    allOf,\n    ifKeyword,\n    thenElse,\n    // object\n    propertyNames,\n    additionalProperties,\n    dependencies,\n    properties,\n    patternProperties,\n  ]\n  // array\n  if (draft2020) applicator.push(prefixItems, items2020)\n  else applicator.push(additionalItems, items)\n  applicator.push(contains)\n  return applicator\n}\n\nexport type ApplicatorKeywordError =\n  | ErrorNoParams<\"false schema\">\n  | AdditionalItemsError\n  | ItemsError\n  | ContainsError\n  | AdditionalPropertiesError\n  | DependenciesError\n  | IfKeywordError\n  | AnyOfError\n  | OneOfError\n  | NotKeywordError\n  | PropertyNamesError\n","import type {KeywordErrorCxt, KeywordErrorDefinition} from \"../types\"\nimport type {SchemaCxt} from \"./index\"\nimport {CodeGen, _, str, strConcat, Code, Name} from \"./codegen\"\nimport {SafeExpr} from \"./codegen/code\"\nimport {getErrorPath, Type} from \"./util\"\nimport N from \"./names\"\n\nexport const keywordError: KeywordErrorDefinition = {\n  message: ({keyword}) => str`must pass \"${keyword}\" keyword validation`,\n}\n\nexport const keyword$DataError: KeywordErrorDefinition = {\n  message: ({keyword, schemaType}) =>\n    schemaType\n      ? str`\"${keyword}\" keyword must be ${schemaType} ($data)`\n      : str`\"${keyword}\" keyword is invalid ($data)`,\n}\n\nexport interface ErrorPaths {\n  instancePath?: Code\n  schemaPath?: string\n  parentSchema?: boolean\n}\n\nexport function reportError(\n  cxt: KeywordErrorCxt,\n  error: KeywordErrorDefinition = keywordError,\n  errorPaths?: ErrorPaths,\n  overrideAllErrors?: boolean\n): void {\n  const {it} = cxt\n  const {gen, compositeRule, allErrors} = it\n  const errObj = errorObjectCode(cxt, error, errorPaths)\n  if (overrideAllErrors ?? (compositeRule || allErrors)) {\n    addError(gen, errObj)\n  } else {\n    returnErrors(it, _`[${errObj}]`)\n  }\n}\n\nexport function reportExtraError(\n  cxt: KeywordErrorCxt,\n  error: KeywordErrorDefinition = keywordError,\n  errorPaths?: ErrorPaths\n): void {\n  const {it} = cxt\n  const {gen, compositeRule, allErrors} = it\n  const errObj = errorObjectCode(cxt, error, errorPaths)\n  addError(gen, errObj)\n  if (!(compositeRule || allErrors)) {\n    returnErrors(it, N.vErrors)\n  }\n}\n\nexport function resetErrorsCount(gen: CodeGen, errsCount: Name): void {\n  gen.assign(N.errors, errsCount)\n  gen.if(_`${N.vErrors} !== null`, () =>\n    gen.if(\n      errsCount,\n      () => gen.assign(_`${N.vErrors}.length`, errsCount),\n      () => gen.assign(N.vErrors, null)\n    )\n  )\n}\n\nexport function extendErrors({\n  gen,\n  keyword,\n  schemaValue,\n  data,\n  errsCount,\n  it,\n}: KeywordErrorCxt): void {\n  /* istanbul ignore if */\n  if (errsCount === undefined) throw new Error(\"ajv implementation error\")\n  const err = gen.name(\"err\")\n  gen.forRange(\"i\", errsCount, N.errors, (i) => {\n    gen.const(err, _`${N.vErrors}[${i}]`)\n    gen.if(_`${err}.instancePath === undefined`, () =>\n      gen.assign(_`${err}.instancePath`, strConcat(N.instancePath, it.errorPath))\n    )\n    gen.assign(_`${err}.schemaPath`, str`${it.errSchemaPath}/${keyword}`)\n    if (it.opts.verbose) {\n      gen.assign(_`${err}.schema`, schemaValue)\n      gen.assign(_`${err}.data`, data)\n    }\n  })\n}\n\nfunction addError(gen: CodeGen, errObj: Code): void {\n  const err = gen.const(\"err\", errObj)\n  gen.if(\n    _`${N.vErrors} === null`,\n    () => gen.assign(N.vErrors, _`[${err}]`),\n    _`${N.vErrors}.push(${err})`\n  )\n  gen.code(_`${N.errors}++`)\n}\n\nfunction returnErrors(it: SchemaCxt, errs: Code): void {\n  const {gen, validateName, schemaEnv} = it\n  if (schemaEnv.$async) {\n    gen.throw(_`new ${it.ValidationError as Name}(${errs})`)\n  } else {\n    gen.assign(_`${validateName}.errors`, errs)\n    gen.return(false)\n  }\n}\n\nconst E = {\n  keyword: new Name(\"keyword\"),\n  schemaPath: new Name(\"schemaPath\"), // also used in JTD errors\n  params: new Name(\"params\"),\n  propertyName: new Name(\"propertyName\"),\n  message: new Name(\"message\"),\n  schema: new Name(\"schema\"),\n  parentSchema: new Name(\"parentSchema\"),\n}\n\nfunction errorObjectCode(\n  cxt: KeywordErrorCxt,\n  error: KeywordErrorDefinition,\n  errorPaths?: ErrorPaths\n): Code {\n  const {createErrors} = cxt.it\n  if (createErrors === false) return _`{}`\n  return errorObject(cxt, error, errorPaths)\n}\n\nfunction errorObject(\n  cxt: KeywordErrorCxt,\n  error: KeywordErrorDefinition,\n  errorPaths: ErrorPaths = {}\n): Code {\n  const {gen, it} = cxt\n  const keyValues: [Name, SafeExpr | string][] = [\n    errorInstancePath(it, errorPaths),\n    errorSchemaPath(cxt, errorPaths),\n  ]\n  extraErrorProps(cxt, error, keyValues)\n  return gen.object(...keyValues)\n}\n\nfunction errorInstancePath({errorPath}: SchemaCxt, {instancePath}: ErrorPaths): [Name, Code] {\n  const instPath = instancePath\n    ? str`${errorPath}${getErrorPath(instancePath, Type.Str)}`\n    : errorPath\n  return [N.instancePath, strConcat(N.instancePath, instPath)]\n}\n\nfunction errorSchemaPath(\n  {keyword, it: {errSchemaPath}}: KeywordErrorCxt,\n  {schemaPath, parentSchema}: ErrorPaths\n): [Name, string | Code] {\n  let schPath = parentSchema ? errSchemaPath : str`${errSchemaPath}/${keyword}`\n  if (schemaPath) {\n    schPath = str`${schPath}${getErrorPath(schemaPath, Type.Str)}`\n  }\n  return [E.schemaPath, schPath]\n}\n\nfunction extraErrorProps(\n  cxt: KeywordErrorCxt,\n  {params, message}: KeywordErrorDefinition,\n  keyValues: [Name, SafeExpr | string][]\n): void {\n  const {keyword, data, schemaValue, it} = cxt\n  const {opts, propertyName, topSchemaRef, schemaPath} = it\n  keyValues.push(\n    [E.keyword, keyword],\n    [E.params, typeof params == \"function\" ? params(cxt) : params || _`{}`]\n  )\n  if (opts.messages) {\n    keyValues.push([E.message, typeof message == \"function\" ? message(cxt) : message])\n  }\n  if (opts.verbose) {\n    keyValues.push(\n      [E.schema, schemaValue],\n      [E.parentSchema, _`${topSchemaRef}${schemaPath}`],\n      [N.data, data]\n    )\n  }\n  if (propertyName) keyValues.push([E.propertyName, propertyName])\n}\n","import type {CodeKeywordDefinition, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, operators} from \"../../compile/codegen\"\n\nconst error: KeywordErrorDefinition = {\n  message({keyword, schemaCode}) {\n    const comp = keyword === \"maxItems\" ? \"more\" : \"fewer\"\n    return str`must NOT have ${comp} than ${schemaCode} items`\n  },\n  params: ({schemaCode}) => _`{limit: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: [\"maxItems\", \"minItems\"],\n  type: \"array\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {keyword, data, schemaCode} = cxt\n    const op = keyword === \"maxItems\" ? operators.GT : operators.LT\n    cxt.fail$data(_`${data}.length ${op} ${schemaCode}`)\n  },\n}\n\nexport default def\n","import type {KeywordErrorDefinition, KeywordErrorCxt} from \"../../types\"\nimport type {SchemaCxt} from \"..\"\nimport {reportError} from \"../errors\"\nimport {_, Name} from \"../codegen\"\nimport N from \"../names\"\n\nconst boolError: KeywordErrorDefinition = {\n  message: \"boolean schema is false\",\n}\n\nexport function topBoolOrEmptySchema(it: SchemaCxt): void {\n  const {gen, schema, validateName} = it\n  if (schema === false) {\n    falseSchemaError(it, false)\n  } else if (typeof schema == \"object\" && schema.$async === true) {\n    gen.return(N.data)\n  } else {\n    gen.assign(_`${validateName}.errors`, null)\n    gen.return(true)\n  }\n}\n\nexport function boolOrEmptySchema(it: SchemaCxt, valid: Name): void {\n  const {gen, schema} = it\n  if (schema === false) {\n    gen.var(valid, false) // TODO var\n    falseSchemaError(it)\n  } else {\n    gen.var(valid, true) // TODO var\n  }\n}\n\nfunction falseSchemaError(it: SchemaCxt, overrideAllErrors?: boolean): void {\n  const {gen, data} = it\n  // TODO maybe some other interface should be used for non-keyword validation errors...\n  const cxt: KeywordErrorCxt = {\n    gen,\n    keyword: \"false schema\",\n    data,\n    schema: false,\n    schemaCode: false,\n    schemaValue: false,\n    params: {},\n    it,\n  }\n  reportError(cxt, boolError, undefined, overrideAllErrors)\n}\n","import {resolveUrl, normalizeId, getFullPath} from \"./resolve\"\nimport type {UriResolver} from \"../types\"\n\nexport default class MissingRefError extends Error {\n  readonly missingRef: string\n  readonly missingSchema: string\n\n  constructor(resolver: UriResolver, baseId: string, ref: string, msg?: string) {\n    super(msg || `can't resolve reference ${ref} from id ${baseId}`)\n    this.missingRef = resolveUrl(resolver, baseId, ref)\n    this.missingSchema = normalizeId(getFullPath(resolver, this.missingRef))\n  }\n}\n","// https://github.com/ajv-validator/ajv/issues/889\nimport * as equal from \"fast-deep-equal\"\n\ntype Equal = typeof equal & {code: string}\n;(equal as Equal).code = 'require(\"ajv/dist/runtime/equal\").default'\n\nexport default equal as Equal\n","import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {checkDataTypes, getSchemaTypes, DataType} from \"../../compile/validate/dataType\"\nimport {_, str, Name} from \"../../compile/codegen\"\nimport {useFunc} from \"../../compile/util\"\nimport equal from \"../../runtime/equal\"\n\nexport type UniqueItemsError = ErrorObject<\n  \"uniqueItems\",\n  {i: number; j: number},\n  boolean | {$data: string}\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {i, j}}) =>\n    str`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,\n  params: ({params: {i, j}}) => _`{i: ${i}, j: ${j}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"uniqueItems\",\n  type: \"array\",\n  schemaType: \"boolean\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, $data, schema, parentSchema, schemaCode, it} = cxt\n    if (!$data && !schema) return\n    const valid = gen.let(\"valid\")\n    const itemTypes = parentSchema.items ? getSchemaTypes(parentSchema.items) : []\n    cxt.block$data(valid, validateUniqueItems, _`${schemaCode} === false`)\n    cxt.ok(valid)\n\n    function validateUniqueItems(): void {\n      const i = gen.let(\"i\", _`${data}.length`)\n      const j = gen.let(\"j\")\n      cxt.setParams({i, j})\n      gen.assign(valid, true)\n      gen.if(_`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j))\n    }\n\n    function canOptimize(): boolean {\n      return itemTypes.length > 0 && !itemTypes.some((t) => t === \"object\" || t === \"array\")\n    }\n\n    function loopN(i: Name, j: Name): void {\n      const item = gen.name(\"item\")\n      const wrongType = checkDataTypes(itemTypes, item, it.opts.strictNumbers, DataType.Wrong)\n      const indices = gen.const(\"indices\", _`{}`)\n      gen.for(_`;${i}--;`, () => {\n        gen.let(item, _`${data}[${i}]`)\n        gen.if(wrongType, _`continue`)\n        if (itemTypes.length > 1) gen.if(_`typeof ${item} == \"string\"`, _`${item} += \"_\"`)\n        gen\n          .if(_`typeof ${indices}[${item}] == \"number\"`, () => {\n            gen.assign(j, _`${indices}[${item}]`)\n            cxt.error()\n            gen.assign(valid, false).break()\n          })\n          .code(_`${indices}[${item}] = ${i}`)\n      })\n    }\n\n    function loopN2(i: Name, j: Name): void {\n      const eql = useFunc(gen, equal)\n      const outer = gen.name(\"outer\")\n      gen.label(outer).for(_`;${i}--;`, () =>\n        gen.for(_`${j} = ${i}; ${j}--;`, () =>\n          gen.if(_`${eql}(${data}[${i}], ${data}[${j}])`, () => {\n            cxt.error()\n            gen.assign(valid, false).break(outer)\n          })\n        )\n      )\n    }\n  },\n}\n\nexport default def\n","'use strict'\n\nconst HEX = {\n  0: 0,\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9,\n  a: 10,\n  A: 10,\n  b: 11,\n  B: 11,\n  c: 12,\n  C: 12,\n  d: 13,\n  D: 13,\n  e: 14,\n  E: 14,\n  f: 15,\n  F: 15\n}\n\nmodule.exports = {\n  HEX\n}\n","import type {\n  CodeKeywordDefinition,\n  KeywordErrorDefinition,\n  ErrorObject,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str} from \"../../compile/codegen\"\nimport {alwaysValidSchema} from \"../../compile/util\"\nimport {validateArray} from \"../code\"\nimport {validateAdditionalItems} from \"./additionalItems\"\n\nexport type ItemsError = ErrorObject<\"items\", {limit: number}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {len}}) => str`must NOT have more than ${len} items`,\n  params: ({params: {len}}) => _`{limit: ${len}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"items\",\n  type: \"array\",\n  schemaType: [\"object\", \"boolean\"],\n  before: \"uniqueItems\",\n  error,\n  code(cxt: KeywordCxt) {\n    const {schema, parentSchema, it} = cxt\n    const {prefixItems} = parentSchema\n    it.items = true\n    if (alwaysValidSchema(it, schema)) return\n    if (prefixItems) validateAdditionalItems(cxt, prefixItems)\n    else cxt.ok(validateArray(cxt))\n  },\n}\n\nexport default def\n","import type {\n  CodeKeywordDefinition,\n  KeywordErrorDefinition,\n  ErrorObject,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema, checkStrictMode, Type} from \"../../compile/util\"\n\nexport type ContainsError = ErrorObject<\n  \"contains\",\n  {minContains: number; maxContains?: number},\n  AnySchema\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {min, max}}) =>\n    max === undefined\n      ? str`must contain at least ${min} valid item(s)`\n      : str`must contain at least ${min} and no more than ${max} valid item(s)`,\n  params: ({params: {min, max}}) =>\n    max === undefined ? _`{minContains: ${min}}` : _`{minContains: ${min}, maxContains: ${max}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"contains\",\n  type: \"array\",\n  schemaType: [\"object\", \"boolean\"],\n  before: \"uniqueItems\",\n  trackErrors: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, parentSchema, data, it} = cxt\n    let min: number\n    let max: number | undefined\n    const {minContains, maxContains} = parentSchema\n    if (it.opts.next) {\n      min = minContains === undefined ? 1 : minContains\n      max = maxContains\n    } else {\n      min = 1\n    }\n    const len = gen.const(\"len\", _`${data}.length`)\n    cxt.setParams({min, max})\n    if (max === undefined && min === 0) {\n      checkStrictMode(it, `\"minContains\" == 0 without \"maxContains\": \"contains\" keyword ignored`)\n      return\n    }\n    if (max !== undefined && min > max) {\n      checkStrictMode(it, `\"minContains\" > \"maxContains\" is always invalid`)\n      cxt.fail()\n      return\n    }\n    if (alwaysValidSchema(it, schema)) {\n      let cond = _`${len} >= ${min}`\n      if (max !== undefined) cond = _`${cond} && ${len} <= ${max}`\n      cxt.pass(cond)\n      return\n    }\n\n    it.items = true\n    const valid = gen.name(\"valid\")\n    if (max === undefined && min === 1) {\n      validateItems(valid, () => gen.if(valid, () => gen.break()))\n    } else if (min === 0) {\n      gen.let(valid, true)\n      if (max !== undefined) gen.if(_`${data}.length > 0`, validateItemsWithCount)\n    } else {\n      gen.let(valid, false)\n      validateItemsWithCount()\n    }\n    cxt.result(valid, () => cxt.reset())\n\n    function validateItemsWithCount(): void {\n      const schValid = gen.name(\"_valid\")\n      const count = gen.let(\"count\", 0)\n      validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)))\n    }\n\n    function validateItems(_valid: Name, block: () => void): void {\n      gen.forRange(\"i\", 0, len, (i) => {\n        cxt.subschema(\n          {\n            keyword: \"contains\",\n            dataProp: i,\n            dataPropType: Type.Num,\n            compositeRule: true,\n          },\n          _valid\n        )\n        block()\n      })\n    }\n\n    function checkLimits(count: Name): void {\n      gen.code(_`${count}++`)\n      if (max === undefined) {\n        gen.if(_`${count} >= ${min}`, () => gen.assign(valid, true).break())\n      } else {\n        gen.if(_`${count} > ${max}`, () => gen.assign(valid, false).break())\n        if (min === 1) gen.assign(valid, true)\n        else gen.if(_`${count} >= ${min}`, () => gen.assign(valid, true))\n      }\n    }\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, operators} from \"../../compile/codegen\"\n\nconst error: KeywordErrorDefinition = {\n  message({keyword, schemaCode}) {\n    const comp = keyword === \"maxProperties\" ? \"more\" : \"fewer\"\n    return str`must NOT have ${comp} than ${schemaCode} properties`\n  },\n  params: ({schemaCode}) => _`{limit: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: [\"maxProperties\", \"minProperties\"],\n  type: \"object\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {keyword, data, schemaCode} = cxt\n    const op = keyword === \"maxProperties\" ? operators.GT : operators.LT\n    cxt.fail$data(_`Object.keys(${data}).length ${op} ${schemaCode}`)\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_} from \"../../compile/codegen\"\nimport {useFunc} from \"../../compile/util\"\nimport equal from \"../../runtime/equal\"\n\nexport type ConstError = ErrorObject<\"const\", {allowedValue: any}>\n\nconst error: KeywordErrorDefinition = {\n  message: \"must be equal to constant\",\n  params: ({schemaCode}) => _`{allowedValue: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"const\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, $data, schemaCode, schema} = cxt\n    if ($data || (schema && typeof schema == \"object\")) {\n      cxt.fail$data(_`!${useFunc(gen, equal)}(${data}, ${schemaCode})`)\n    } else {\n      cxt.fail(_`${schema} !== ${data}`)\n    }\n  },\n}\n\nexport default def\n","import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  SchemaMap,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str} from \"../../compile/codegen\"\nimport {alwaysValidSchema} from \"../../compile/util\"\nimport {checkReportMissingProp, checkMissingProp, reportMissingProp, propertyInData} from \"../code\"\n\nexport type PropertyDependencies = {[K in string]?: string[]}\n\nexport interface DependenciesErrorParams {\n  property: string\n  missingProperty: string\n  depsCount: number\n  deps: string // TODO change to string[]\n}\n\ntype SchemaDependencies = SchemaMap\n\nexport type DependenciesError = ErrorObject<\n  \"dependencies\",\n  DependenciesErrorParams,\n  {[K in string]?: string[] | AnySchema}\n>\n\nexport const error: KeywordErrorDefinition = {\n  message: ({params: {property, depsCount, deps}}) => {\n    const property_ies = depsCount === 1 ? \"property\" : \"properties\"\n    return str`must have ${property_ies} ${deps} when property ${property} is present`\n  },\n  params: ({params: {property, depsCount, deps, missingProperty}}) =>\n    _`{property: ${property},\n    missingProperty: ${missingProperty},\n    depsCount: ${depsCount},\n    deps: ${deps}}`, // TODO change to reference\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"dependencies\",\n  type: \"object\",\n  schemaType: \"object\",\n  error,\n  code(cxt: KeywordCxt) {\n    const [propDeps, schDeps] = splitDependencies(cxt)\n    validatePropertyDeps(cxt, propDeps)\n    validateSchemaDeps(cxt, schDeps)\n  },\n}\n\nfunction splitDependencies({schema}: KeywordCxt): [PropertyDependencies, SchemaDependencies] {\n  const propertyDeps: PropertyDependencies = {}\n  const schemaDeps: SchemaDependencies = {}\n  for (const key in schema) {\n    if (key === \"__proto__\") continue\n    const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps\n    deps[key] = schema[key]\n  }\n  return [propertyDeps, schemaDeps]\n}\n\nexport function validatePropertyDeps(\n  cxt: KeywordCxt,\n  propertyDeps: {[K in string]?: string[]} = cxt.schema\n): void {\n  const {gen, data, it} = cxt\n  if (Object.keys(propertyDeps).length === 0) return\n  const missing = gen.let(\"missing\")\n  for (const prop in propertyDeps) {\n    const deps = propertyDeps[prop] as string[]\n    if (deps.length === 0) continue\n    const hasProperty = propertyInData(gen, data, prop, it.opts.ownProperties)\n    cxt.setParams({\n      property: prop,\n      depsCount: deps.length,\n      deps: deps.join(\", \"),\n    })\n    if (it.allErrors) {\n      gen.if(hasProperty, () => {\n        for (const depProp of deps) {\n          checkReportMissingProp(cxt, depProp)\n        }\n      })\n    } else {\n      gen.if(_`${hasProperty} && (${checkMissingProp(cxt, deps, missing)})`)\n      reportMissingProp(cxt, missing)\n      gen.else()\n    }\n  }\n}\n\nexport function validateSchemaDeps(cxt: KeywordCxt, schemaDeps: SchemaMap = cxt.schema): void {\n  const {gen, data, keyword, it} = cxt\n  const valid = gen.name(\"valid\")\n  for (const prop in schemaDeps) {\n    if (alwaysValidSchema(it, schemaDeps[prop] as AnySchema)) continue\n    gen.if(\n      propertyInData(gen, data, prop, it.opts.ownProperties),\n      () => {\n        const schCxt = cxt.subschema({keyword, schemaProp: prop}, valid)\n        cxt.mergeValidEvaluated(schCxt, valid)\n      },\n      () => gen.var(valid, true) // TODO var\n    )\n    cxt.ok(valid)\n  }\n}\n\nexport default def\n","import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, not} from \"../../compile/codegen\"\nimport {alwaysValidSchema} from \"../../compile/util\"\n\nexport type PropertyNamesError = ErrorObject<\"propertyNames\", {propertyName: string}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: \"property name must be valid\",\n  params: ({params}) => _`{propertyName: ${params.propertyName}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"propertyNames\",\n  type: \"object\",\n  schemaType: [\"object\", \"boolean\"],\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, data, it} = cxt\n    if (alwaysValidSchema(it, schema)) return\n    const valid = gen.name(\"valid\")\n\n    gen.forIn(\"key\", data, (key) => {\n      cxt.setParams({propertyName: key})\n      cxt.subschema(\n        {\n          keyword: \"propertyNames\",\n          data: key,\n          dataTypes: [\"string\"],\n          propertyName: key,\n          compositeRule: true,\n        },\n        valid\n      )\n      gen.if(not(valid), () => {\n        cxt.error(true)\n        if (!it.allErrors) gen.break()\n      })\n    })\n\n    cxt.ok(valid)\n  },\n}\n\nexport default def\n","import type {\n  AddedKeywordDefinition,\n  AnySchema,\n  AnySchemaObject,\n  KeywordErrorCxt,\n  KeywordCxtParams,\n} from \"../../types\"\nimport type {SchemaCxt, SchemaObjCxt} from \"..\"\nimport type {InstanceOptions} from \"../../core\"\nimport {boolOrEmptySchema, topBoolOrEmptySchema} from \"./boolSchema\"\nimport {coerceAndCheckDataType, getSchemaTypes} from \"./dataType\"\nimport {shouldUseGroup, shouldUseRule} from \"./applicability\"\nimport {checkDataType, checkDataTypes, reportTypeError, DataType} from \"./dataType\"\nimport {assignDefaults} from \"./defaults\"\nimport {funcKeywordCode, macroKeywordCode, validateKeywordUsage, validSchemaType} from \"./keyword\"\nimport {getSubschema, extendSubschemaData, SubschemaArgs, extendSubschemaMode} from \"./subschema\"\nimport {_, nil, str, or, not, getProperty, Block, Code, Name, CodeGen} from \"../codegen\"\nimport N from \"../names\"\nimport {resolveUrl} from \"../resolve\"\nimport {\n  schemaRefOrVal,\n  schemaHasRulesButRef,\n  checkUnknownRules,\n  checkStrictMode,\n  unescapeJsonPointer,\n  mergeEvaluated,\n} from \"../util\"\nimport type {JSONType, Rule, RuleGroup} from \"../rules\"\nimport {\n  ErrorPaths,\n  reportError,\n  reportExtraError,\n  resetErrorsCount,\n  keyword$DataError,\n} from \"../errors\"\n\n// schema compilation - generates validation function, subschemaCode (below) is used for subschemas\nexport function validateFunctionCode(it: SchemaCxt): void {\n  if (isSchemaObj(it)) {\n    checkKeywords(it)\n    if (schemaCxtHasRules(it)) {\n      topSchemaObjCode(it)\n      return\n    }\n  }\n  validateFunction(it, () => topBoolOrEmptySchema(it))\n}\n\nfunction validateFunction(\n  {gen, validateName, schema, schemaEnv, opts}: SchemaCxt,\n  body: Block\n): void {\n  if (opts.code.es5) {\n    gen.func(validateName, _`${N.data}, ${N.valCxt}`, schemaEnv.$async, () => {\n      gen.code(_`\"use strict\"; ${funcSourceUrl(schema, opts)}`)\n      destructureValCxtES5(gen, opts)\n      gen.code(body)\n    })\n  } else {\n    gen.func(validateName, _`${N.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () =>\n      gen.code(funcSourceUrl(schema, opts)).code(body)\n    )\n  }\n}\n\nfunction destructureValCxt(opts: InstanceOptions): Code {\n  return _`{${N.instancePath}=\"\", ${N.parentData}, ${N.parentDataProperty}, ${N.rootData}=${\n    N.data\n  }${opts.dynamicRef ? _`, ${N.dynamicAnchors}={}` : nil}}={}`\n}\n\nfunction destructureValCxtES5(gen: CodeGen, opts: InstanceOptions): void {\n  gen.if(\n    N.valCxt,\n    () => {\n      gen.var(N.instancePath, _`${N.valCxt}.${N.instancePath}`)\n      gen.var(N.parentData, _`${N.valCxt}.${N.parentData}`)\n      gen.var(N.parentDataProperty, _`${N.valCxt}.${N.parentDataProperty}`)\n      gen.var(N.rootData, _`${N.valCxt}.${N.rootData}`)\n      if (opts.dynamicRef) gen.var(N.dynamicAnchors, _`${N.valCxt}.${N.dynamicAnchors}`)\n    },\n    () => {\n      gen.var(N.instancePath, _`\"\"`)\n      gen.var(N.parentData, _`undefined`)\n      gen.var(N.parentDataProperty, _`undefined`)\n      gen.var(N.rootData, N.data)\n      if (opts.dynamicRef) gen.var(N.dynamicAnchors, _`{}`)\n    }\n  )\n}\n\nfunction topSchemaObjCode(it: SchemaObjCxt): void {\n  const {schema, opts, gen} = it\n  validateFunction(it, () => {\n    if (opts.$comment && schema.$comment) commentKeyword(it)\n    checkNoDefault(it)\n    gen.let(N.vErrors, null)\n    gen.let(N.errors, 0)\n    if (opts.unevaluated) resetEvaluated(it)\n    typeAndKeywords(it)\n    returnResults(it)\n  })\n  return\n}\n\nfunction resetEvaluated(it: SchemaObjCxt): void {\n  // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated\n  const {gen, validateName} = it\n  it.evaluated = gen.const(\"evaluated\", _`${validateName}.evaluated`)\n  gen.if(_`${it.evaluated}.dynamicProps`, () => gen.assign(_`${it.evaluated}.props`, _`undefined`))\n  gen.if(_`${it.evaluated}.dynamicItems`, () => gen.assign(_`${it.evaluated}.items`, _`undefined`))\n}\n\nfunction funcSourceUrl(schema: AnySchema, opts: InstanceOptions): Code {\n  const schId = typeof schema == \"object\" && schema[opts.schemaId]\n  return schId && (opts.code.source || opts.code.process) ? _`/*# sourceURL=${schId} */` : nil\n}\n\n// schema compilation - this function is used recursively to generate code for sub-schemas\nfunction subschemaCode(it: SchemaCxt, valid: Name): void {\n  if (isSchemaObj(it)) {\n    checkKeywords(it)\n    if (schemaCxtHasRules(it)) {\n      subSchemaObjCode(it, valid)\n      return\n    }\n  }\n  boolOrEmptySchema(it, valid)\n}\n\nfunction schemaCxtHasRules({schema, self}: SchemaCxt): boolean {\n  if (typeof schema == \"boolean\") return !schema\n  for (const key in schema) if (self.RULES.all[key]) return true\n  return false\n}\n\nfunction isSchemaObj(it: SchemaCxt): it is SchemaObjCxt {\n  return typeof it.schema != \"boolean\"\n}\n\nfunction subSchemaObjCode(it: SchemaObjCxt, valid: Name): void {\n  const {schema, gen, opts} = it\n  if (opts.$comment && schema.$comment) commentKeyword(it)\n  updateContext(it)\n  checkAsyncSchema(it)\n  const errsCount = gen.const(\"_errs\", N.errors)\n  typeAndKeywords(it, errsCount)\n  // TODO var\n  gen.var(valid, _`${errsCount} === ${N.errors}`)\n}\n\nfunction checkKeywords(it: SchemaObjCxt): void {\n  checkUnknownRules(it)\n  checkRefsAndKeywords(it)\n}\n\nfunction typeAndKeywords(it: SchemaObjCxt, errsCount?: Name): void {\n  if (it.opts.jtd) return schemaKeywords(it, [], false, errsCount)\n  const types = getSchemaTypes(it.schema)\n  const checkedTypes = coerceAndCheckDataType(it, types)\n  schemaKeywords(it, types, !checkedTypes, errsCount)\n}\n\nfunction checkRefsAndKeywords(it: SchemaObjCxt): void {\n  const {schema, errSchemaPath, opts, self} = it\n  if (schema.$ref && opts.ignoreKeywordsWithRef && schemaHasRulesButRef(schema, self.RULES)) {\n    self.logger.warn(`$ref: keywords ignored in schema at path \"${errSchemaPath}\"`)\n  }\n}\n\nfunction checkNoDefault(it: SchemaObjCxt): void {\n  const {schema, opts} = it\n  if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {\n    checkStrictMode(it, \"default is ignored in the schema root\")\n  }\n}\n\nfunction updateContext(it: SchemaObjCxt): void {\n  const schId = it.schema[it.opts.schemaId]\n  if (schId) it.baseId = resolveUrl(it.opts.uriResolver, it.baseId, schId)\n}\n\nfunction checkAsyncSchema(it: SchemaObjCxt): void {\n  if (it.schema.$async && !it.schemaEnv.$async) throw new Error(\"async schema in sync schema\")\n}\n\nfunction commentKeyword({gen, schemaEnv, schema, errSchemaPath, opts}: SchemaObjCxt): void {\n  const msg = schema.$comment\n  if (opts.$comment === true) {\n    gen.code(_`${N.self}.logger.log(${msg})`)\n  } else if (typeof opts.$comment == \"function\") {\n    const schemaPath = str`${errSchemaPath}/$comment`\n    const rootName = gen.scopeValue(\"root\", {ref: schemaEnv.root})\n    gen.code(_`${N.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`)\n  }\n}\n\nfunction returnResults(it: SchemaCxt): void {\n  const {gen, schemaEnv, validateName, ValidationError, opts} = it\n  if (schemaEnv.$async) {\n    // TODO assign unevaluated\n    gen.if(\n      _`${N.errors} === 0`,\n      () => gen.return(N.data),\n      () => gen.throw(_`new ${ValidationError as Name}(${N.vErrors})`)\n    )\n  } else {\n    gen.assign(_`${validateName}.errors`, N.vErrors)\n    if (opts.unevaluated) assignEvaluated(it)\n    gen.return(_`${N.errors} === 0`)\n  }\n}\n\nfunction assignEvaluated({gen, evaluated, props, items}: SchemaCxt): void {\n  if (props instanceof Name) gen.assign(_`${evaluated}.props`, props)\n  if (items instanceof Name) gen.assign(_`${evaluated}.items`, items)\n}\n\nfunction schemaKeywords(\n  it: SchemaObjCxt,\n  types: JSONType[],\n  typeErrors: boolean,\n  errsCount?: Name\n): void {\n  const {gen, schema, data, allErrors, opts, self} = it\n  const {RULES} = self\n  if (schema.$ref && (opts.ignoreKeywordsWithRef || !schemaHasRulesButRef(schema, RULES))) {\n    gen.block(() => keywordCode(it, \"$ref\", (RULES.all.$ref as Rule).definition)) // TODO typecast\n    return\n  }\n  if (!opts.jtd) checkStrictTypes(it, types)\n  gen.block(() => {\n    for (const group of RULES.rules) groupKeywords(group)\n    groupKeywords(RULES.post)\n  })\n\n  function groupKeywords(group: RuleGroup): void {\n    if (!shouldUseGroup(schema, group)) return\n    if (group.type) {\n      gen.if(checkDataType(group.type, data, opts.strictNumbers))\n      iterateKeywords(it, group)\n      if (types.length === 1 && types[0] === group.type && typeErrors) {\n        gen.else()\n        reportTypeError(it)\n      }\n      gen.endIf()\n    } else {\n      iterateKeywords(it, group)\n    }\n    // TODO make it \"ok\" call?\n    if (!allErrors) gen.if(_`${N.errors} === ${errsCount || 0}`)\n  }\n}\n\nfunction iterateKeywords(it: SchemaObjCxt, group: RuleGroup): void {\n  const {\n    gen,\n    schema,\n    opts: {useDefaults},\n  } = it\n  if (useDefaults) assignDefaults(it, group.type)\n  gen.block(() => {\n    for (const rule of group.rules) {\n      if (shouldUseRule(schema, rule)) {\n        keywordCode(it, rule.keyword, rule.definition, group.type)\n      }\n    }\n  })\n}\n\nfunction checkStrictTypes(it: SchemaObjCxt, types: JSONType[]): void {\n  if (it.schemaEnv.meta || !it.opts.strictTypes) return\n  checkContextTypes(it, types)\n  if (!it.opts.allowUnionTypes) checkMultipleTypes(it, types)\n  checkKeywordTypes(it, it.dataTypes)\n}\n\nfunction checkContextTypes(it: SchemaObjCxt, types: JSONType[]): void {\n  if (!types.length) return\n  if (!it.dataTypes.length) {\n    it.dataTypes = types\n    return\n  }\n  types.forEach((t) => {\n    if (!includesType(it.dataTypes, t)) {\n      strictTypesError(it, `type \"${t}\" not allowed by context \"${it.dataTypes.join(\",\")}\"`)\n    }\n  })\n  narrowSchemaTypes(it, types)\n}\n\nfunction checkMultipleTypes(it: SchemaObjCxt, ts: JSONType[]): void {\n  if (ts.length > 1 && !(ts.length === 2 && ts.includes(\"null\"))) {\n    strictTypesError(it, \"use allowUnionTypes to allow union type keyword\")\n  }\n}\n\nfunction checkKeywordTypes(it: SchemaObjCxt, ts: JSONType[]): void {\n  const rules = it.self.RULES.all\n  for (const keyword in rules) {\n    const rule = rules[keyword]\n    if (typeof rule == \"object\" && shouldUseRule(it.schema, rule)) {\n      const {type} = rule.definition\n      if (type.length && !type.some((t) => hasApplicableType(ts, t))) {\n        strictTypesError(it, `missing type \"${type.join(\",\")}\" for keyword \"${keyword}\"`)\n      }\n    }\n  }\n}\n\nfunction hasApplicableType(schTs: JSONType[], kwdT: JSONType): boolean {\n  return schTs.includes(kwdT) || (kwdT === \"number\" && schTs.includes(\"integer\"))\n}\n\nfunction includesType(ts: JSONType[], t: JSONType): boolean {\n  return ts.includes(t) || (t === \"integer\" && ts.includes(\"number\"))\n}\n\nfunction narrowSchemaTypes(it: SchemaObjCxt, withTypes: JSONType[]): void {\n  const ts: JSONType[] = []\n  for (const t of it.dataTypes) {\n    if (includesType(withTypes, t)) ts.push(t)\n    else if (withTypes.includes(\"integer\") && t === \"number\") ts.push(\"integer\")\n  }\n  it.dataTypes = ts\n}\n\nfunction strictTypesError(it: SchemaObjCxt, msg: string): void {\n  const schemaPath = it.schemaEnv.baseId + it.errSchemaPath\n  msg += ` at \"${schemaPath}\" (strictTypes)`\n  checkStrictMode(it, msg, it.opts.strictTypes)\n}\n\nexport class KeywordCxt implements KeywordErrorCxt {\n  readonly gen: CodeGen\n  readonly allErrors?: boolean\n  readonly keyword: string\n  readonly data: Name // Name referencing the current level of the data instance\n  readonly $data?: string | false\n  schema: any // keyword value in the schema\n  readonly schemaValue: Code | number | boolean // Code reference to keyword schema value or primitive value\n  readonly schemaCode: Code | number | boolean // Code reference to resolved schema value (different if schema is $data)\n  readonly schemaType: JSONType[] // allowed type(s) of keyword value in the schema\n  readonly parentSchema: AnySchemaObject\n  readonly errsCount?: Name // Name reference to the number of validation errors collected before this keyword,\n  // requires option trackErrors in keyword definition\n  params: KeywordCxtParams // object to pass parameters to error messages from keyword code\n  readonly it: SchemaObjCxt // schema compilation context (schema is guaranteed to be an object, not boolean)\n  readonly def: AddedKeywordDefinition\n\n  constructor(it: SchemaObjCxt, def: AddedKeywordDefinition, keyword: string) {\n    validateKeywordUsage(it, def, keyword)\n    this.gen = it.gen\n    this.allErrors = it.allErrors\n    this.keyword = keyword\n    this.data = it.data\n    this.schema = it.schema[keyword]\n    this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data\n    this.schemaValue = schemaRefOrVal(it, this.schema, keyword, this.$data)\n    this.schemaType = def.schemaType\n    this.parentSchema = it.schema\n    this.params = {}\n    this.it = it\n    this.def = def\n\n    if (this.$data) {\n      this.schemaCode = it.gen.const(\"vSchema\", getData(this.$data, it))\n    } else {\n      this.schemaCode = this.schemaValue\n      if (!validSchemaType(this.schema, def.schemaType, def.allowUndefined)) {\n        throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`)\n      }\n    }\n\n    if (\"code\" in def ? def.trackErrors : def.errors !== false) {\n      this.errsCount = it.gen.const(\"_errs\", N.errors)\n    }\n  }\n\n  result(condition: Code, successAction?: () => void, failAction?: () => void): void {\n    this.failResult(not(condition), successAction, failAction)\n  }\n\n  failResult(condition: Code, successAction?: () => void, failAction?: () => void): void {\n    this.gen.if(condition)\n    if (failAction) failAction()\n    else this.error()\n    if (successAction) {\n      this.gen.else()\n      successAction()\n      if (this.allErrors) this.gen.endIf()\n    } else {\n      if (this.allErrors) this.gen.endIf()\n      else this.gen.else()\n    }\n  }\n\n  pass(condition: Code, failAction?: () => void): void {\n    this.failResult(not(condition), undefined, failAction)\n  }\n\n  fail(condition?: Code): void {\n    if (condition === undefined) {\n      this.error()\n      if (!this.allErrors) this.gen.if(false) // this branch will be removed by gen.optimize\n      return\n    }\n    this.gen.if(condition)\n    this.error()\n    if (this.allErrors) this.gen.endIf()\n    else this.gen.else()\n  }\n\n  fail$data(condition: Code): void {\n    if (!this.$data) return this.fail(condition)\n    const {schemaCode} = this\n    this.fail(_`${schemaCode} !== undefined && (${or(this.invalid$data(), condition)})`)\n  }\n\n  error(append?: boolean, errorParams?: KeywordCxtParams, errorPaths?: ErrorPaths): void {\n    if (errorParams) {\n      this.setParams(errorParams)\n      this._error(append, errorPaths)\n      this.setParams({})\n      return\n    }\n    this._error(append, errorPaths)\n  }\n\n  private _error(append?: boolean, errorPaths?: ErrorPaths): void {\n    ;(append ? reportExtraError : reportError)(this, this.def.error, errorPaths)\n  }\n\n  $dataError(): void {\n    reportError(this, this.def.$dataError || keyword$DataError)\n  }\n\n  reset(): void {\n    if (this.errsCount === undefined) throw new Error('add \"trackErrors\" to keyword definition')\n    resetErrorsCount(this.gen, this.errsCount)\n  }\n\n  ok(cond: Code | boolean): void {\n    if (!this.allErrors) this.gen.if(cond)\n  }\n\n  setParams(obj: KeywordCxtParams, assign?: true): void {\n    if (assign) Object.assign(this.params, obj)\n    else this.params = obj\n  }\n\n  block$data(valid: Name, codeBlock: () => void, $dataValid: Code = nil): void {\n    this.gen.block(() => {\n      this.check$data(valid, $dataValid)\n      codeBlock()\n    })\n  }\n\n  check$data(valid: Name = nil, $dataValid: Code = nil): void {\n    if (!this.$data) return\n    const {gen, schemaCode, schemaType, def} = this\n    gen.if(or(_`${schemaCode} === undefined`, $dataValid))\n    if (valid !== nil) gen.assign(valid, true)\n    if (schemaType.length || def.validateSchema) {\n      gen.elseIf(this.invalid$data())\n      this.$dataError()\n      if (valid !== nil) gen.assign(valid, false)\n    }\n    gen.else()\n  }\n\n  invalid$data(): Code {\n    const {gen, schemaCode, schemaType, def, it} = this\n    return or(wrong$DataType(), invalid$DataSchema())\n\n    function wrong$DataType(): Code {\n      if (schemaType.length) {\n        /* istanbul ignore if */\n        if (!(schemaCode instanceof Name)) throw new Error(\"ajv implementation error\")\n        const st = Array.isArray(schemaType) ? schemaType : [schemaType]\n        return _`${checkDataTypes(st, schemaCode, it.opts.strictNumbers, DataType.Wrong)}`\n      }\n      return nil\n    }\n\n    function invalid$DataSchema(): Code {\n      if (def.validateSchema) {\n        const validateSchemaRef = gen.scopeValue(\"validate$data\", {ref: def.validateSchema}) // TODO value.code for standalone\n        return _`!${validateSchemaRef}(${schemaCode})`\n      }\n      return nil\n    }\n  }\n\n  subschema(appl: SubschemaArgs, valid: Name): SchemaCxt {\n    const subschema = getSubschema(this.it, appl)\n    extendSubschemaData(subschema, this.it, appl)\n    extendSubschemaMode(subschema, appl)\n    const nextContext = {...this.it, ...subschema, items: undefined, props: undefined}\n    subschemaCode(nextContext, valid)\n    return nextContext\n  }\n\n  mergeEvaluated(schemaCxt: SchemaCxt, toName?: typeof Name): void {\n    const {it, gen} = this\n    if (!it.opts.unevaluated) return\n    if (it.props !== true && schemaCxt.props !== undefined) {\n      it.props = mergeEvaluated.props(gen, schemaCxt.props, it.props, toName)\n    }\n    if (it.items !== true && schemaCxt.items !== undefined) {\n      it.items = mergeEvaluated.items(gen, schemaCxt.items, it.items, toName)\n    }\n  }\n\n  mergeValidEvaluated(schemaCxt: SchemaCxt, valid: Name): boolean | void {\n    const {it, gen} = this\n    if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {\n      gen.if(valid, () => this.mergeEvaluated(schemaCxt, Name))\n      return true\n    }\n  }\n}\n\nfunction keywordCode(\n  it: SchemaObjCxt,\n  keyword: string,\n  def: AddedKeywordDefinition,\n  ruleType?: JSONType\n): void {\n  const cxt = new KeywordCxt(it, def, keyword)\n  if (\"code\" in def) {\n    def.code(cxt, ruleType)\n  } else if (cxt.$data && def.validate) {\n    funcKeywordCode(cxt, def)\n  } else if (\"macro\" in def) {\n    macroKeywordCode(cxt, def)\n  } else if (def.compile || def.validate) {\n    funcKeywordCode(cxt, def)\n  }\n}\n\nconst JSON_POINTER = /^\\/(?:[^~]|~0|~1)*$/\nconst RELATIVE_JSON_POINTER = /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/\nexport function getData(\n  $data: string,\n  {dataLevel, dataNames, dataPathArr}: SchemaCxt\n): Code | number {\n  let jsonPointer\n  let data: Code\n  if ($data === \"\") return N.rootData\n  if ($data[0] === \"/\") {\n    if (!JSON_POINTER.test($data)) throw new Error(`Invalid JSON-pointer: ${$data}`)\n    jsonPointer = $data\n    data = N.rootData\n  } else {\n    const matches = RELATIVE_JSON_POINTER.exec($data)\n    if (!matches) throw new Error(`Invalid JSON-pointer: ${$data}`)\n    const up: number = +matches[1]\n    jsonPointer = matches[2]\n    if (jsonPointer === \"#\") {\n      if (up >= dataLevel) throw new Error(errorMsg(\"property/index\", up))\n      return dataPathArr[dataLevel - up]\n    }\n    if (up > dataLevel) throw new Error(errorMsg(\"data\", up))\n    data = dataNames[dataLevel - up]\n    if (!jsonPointer) return data\n  }\n\n  let expr = data\n  const segments = jsonPointer.split(\"/\")\n  for (const segment of segments) {\n    if (segment) {\n      data = _`${data}${getProperty(unescapeJsonPointer(segment))}`\n      expr = _`${expr} && ${data}`\n    }\n  }\n  return expr\n\n  function errorMsg(pointerType: string, up: number): string {\n    return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`\n  }\n}\n","// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport abstract class _CodeOrName {\n  abstract readonly str: string\n  abstract readonly names: UsedNames\n  abstract toString(): string\n  abstract emptyStr(): boolean\n}\n\nexport const IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i\n\nexport class Name extends _CodeOrName {\n  readonly str: string\n  constructor(s: string) {\n    super()\n    if (!IDENTIFIER.test(s)) throw new Error(\"CodeGen: name must be a valid identifier\")\n    this.str = s\n  }\n\n  toString(): string {\n    return this.str\n  }\n\n  emptyStr(): boolean {\n    return false\n  }\n\n  get names(): UsedNames {\n    return {[this.str]: 1}\n  }\n}\n\nexport class _Code extends _CodeOrName {\n  readonly _items: readonly CodeItem[]\n  private _str?: string\n  private _names?: UsedNames\n\n  constructor(code: string | readonly CodeItem[]) {\n    super()\n    this._items = typeof code === \"string\" ? [code] : code\n  }\n\n  toString(): string {\n    return this.str\n  }\n\n  emptyStr(): boolean {\n    if (this._items.length > 1) return false\n    const item = this._items[0]\n    return item === \"\" || item === '\"\"'\n  }\n\n  get str(): string {\n    return (this._str ??= this._items.reduce((s: string, c: CodeItem) => `${s}${c}`, \"\"))\n  }\n\n  get names(): UsedNames {\n    return (this._names ??= this._items.reduce((names: UsedNames, c) => {\n      if (c instanceof Name) names[c.str] = (names[c.str] || 0) + 1\n      return names\n    }, {}))\n  }\n}\n\nexport type CodeItem = Name | string | number | boolean | null\n\nexport type UsedNames = Record<string, number | undefined>\n\nexport type Code = _Code | Name\n\nexport type SafeExpr = Code | number | boolean | null\n\nexport const nil = new _Code(\"\")\n\ntype CodeArg = SafeExpr | string | undefined\n\nexport function _(strs: TemplateStringsArray, ...args: CodeArg[]): _Code {\n  const code: CodeItem[] = [strs[0]]\n  let i = 0\n  while (i < args.length) {\n    addCodeArg(code, args[i])\n    code.push(strs[++i])\n  }\n  return new _Code(code)\n}\n\nconst plus = new _Code(\"+\")\n\nexport function str(strs: TemplateStringsArray, ...args: (CodeArg | string[])[]): _Code {\n  const expr: CodeItem[] = [safeStringify(strs[0])]\n  let i = 0\n  while (i < args.length) {\n    expr.push(plus)\n    addCodeArg(expr, args[i])\n    expr.push(plus, safeStringify(strs[++i]))\n  }\n  optimize(expr)\n  return new _Code(expr)\n}\n\nexport function addCodeArg(code: CodeItem[], arg: CodeArg | string[]): void {\n  if (arg instanceof _Code) code.push(...arg._items)\n  else if (arg instanceof Name) code.push(arg)\n  else code.push(interpolate(arg))\n}\n\nfunction optimize(expr: CodeItem[]): void {\n  let i = 1\n  while (i < expr.length - 1) {\n    if (expr[i] === plus) {\n      const res = mergeExprItems(expr[i - 1], expr[i + 1])\n      if (res !== undefined) {\n        expr.splice(i - 1, 3, res)\n        continue\n      }\n      expr[i++] = \"+\"\n    }\n    i++\n  }\n}\n\nfunction mergeExprItems(a: CodeItem, b: CodeItem): CodeItem | undefined {\n  if (b === '\"\"') return a\n  if (a === '\"\"') return b\n  if (typeof a == \"string\") {\n    if (b instanceof Name || a[a.length - 1] !== '\"') return\n    if (typeof b != \"string\") return `${a.slice(0, -1)}${b}\"`\n    if (b[0] === '\"') return a.slice(0, -1) + b.slice(1)\n    return\n  }\n  if (typeof b == \"string\" && b[0] === '\"' && !(a instanceof Name)) return `\"${a}${b.slice(1)}`\n  return\n}\n\nexport function strConcat(c1: Code, c2: Code): Code {\n  return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`\n}\n\n// TODO do not allow arrays here\nfunction interpolate(x?: string | string[] | number | boolean | null): SafeExpr | string {\n  return typeof x == \"number\" || typeof x == \"boolean\" || x === null\n    ? x\n    : safeStringify(Array.isArray(x) ? x.join(\",\") : x)\n}\n\nexport function stringify(x: unknown): Code {\n  return new _Code(safeStringify(x))\n}\n\nexport function safeStringify(x: unknown): string {\n  return JSON.stringify(x)\n    .replace(/\\u2028/g, \"\\\\u2028\")\n    .replace(/\\u2029/g, \"\\\\u2029\")\n}\n\nexport function getProperty(key: Code | string | number): Code {\n  return typeof key == \"string\" && IDENTIFIER.test(key) ? new _Code(`.${key}`) : _`[${key}]`\n}\n\n//Does best effort to format the name properly\nexport function getEsmExportName(key: Code | string | number): Code {\n  if (typeof key == \"string\" && IDENTIFIER.test(key)) {\n    return new _Code(`${key}`)\n  }\n  throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`)\n}\n\nexport function regexpCode(rx: RegExp): Code {\n  return new _Code(rx.toString())\n}\n","import type {Vocabulary} from \"../types\"\n\nexport const metadataVocabulary: Vocabulary = [\n  \"title\",\n  \"description\",\n  \"default\",\n  \"deprecated\",\n  \"readOnly\",\n  \"writeOnly\",\n  \"examples\",\n]\n\nexport const contentVocabulary: Vocabulary = [\n  \"contentMediaType\",\n  \"contentEncoding\",\n  \"contentSchema\",\n]\n","import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, or, Name, Code} from \"../../compile/codegen\"\nimport {useFunc} from \"../../compile/util\"\nimport equal from \"../../runtime/equal\"\n\nexport type EnumError = ErrorObject<\"enum\", {allowedValues: any[]}, any[] | {$data: string}>\n\nconst error: KeywordErrorDefinition = {\n  message: \"must be equal to one of the allowed values\",\n  params: ({schemaCode}) => _`{allowedValues: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"enum\",\n  schemaType: \"array\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, $data, schema, schemaCode, it} = cxt\n    if (!$data && schema.length === 0) throw new Error(\"enum must have non-empty array\")\n    const useLoop = schema.length >= it.opts.loopEnum\n    let eql: Name | undefined\n    const getEql = (): Name => (eql ??= useFunc(gen, equal))\n\n    let valid: Code\n    if (useLoop || $data) {\n      valid = gen.let(\"valid\")\n      cxt.block$data(valid, loopEnum)\n    } else {\n      /* istanbul ignore if */\n      if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\")\n      const vSchema = gen.const(\"vSchema\", schemaCode)\n      valid = or(...schema.map((_x: unknown, i: number) => equalCode(vSchema, i)))\n    }\n    cxt.pass(valid)\n\n    function loopEnum(): void {\n      gen.assign(valid, false)\n      gen.forOf(\"v\", schemaCode as Code, (v) =>\n        gen.if(_`${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break())\n      )\n    }\n\n    function equalCode(vSchema: Name, i: number): Code {\n      const sch = schema[i]\n      return typeof sch === \"object\" && sch !== null\n        ? _`${getEql()}(${data}, ${vSchema}[${i}])`\n        : _`${data} === ${sch}`\n    }\n  },\n}\n\nexport default def\n","import type {\n  KeywordErrorDefinition,\n  KeywordErrorCxt,\n  ErrorObject,\n  AnySchemaObject,\n} from \"../../types\"\nimport type {SchemaObjCxt} from \"..\"\nimport {isJSONType, JSONType} from \"../rules\"\nimport {schemaHasRulesForType} from \"./applicability\"\nimport {reportError} from \"../errors\"\nimport {_, nil, and, not, operators, Code, Name} from \"../codegen\"\nimport {toHash, schemaRefOrVal} from \"../util\"\n\nexport enum DataType {\n  Correct,\n  Wrong,\n}\n\nexport function getSchemaTypes(schema: AnySchemaObject): JSONType[] {\n  const types = getJSONTypes(schema.type)\n  const hasNull = types.includes(\"null\")\n  if (hasNull) {\n    if (schema.nullable === false) throw new Error(\"type: null contradicts nullable: false\")\n  } else {\n    if (!types.length && schema.nullable !== undefined) {\n      throw new Error('\"nullable\" cannot be used without \"type\"')\n    }\n    if (schema.nullable === true) types.push(\"null\")\n  }\n  return types\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport function getJSONTypes(ts: unknown | unknown[]): JSONType[] {\n  const types: unknown[] = Array.isArray(ts) ? ts : ts ? [ts] : []\n  if (types.every(isJSONType)) return types\n  throw new Error(\"type must be JSONType or JSONType[]: \" + types.join(\",\"))\n}\n\nexport function coerceAndCheckDataType(it: SchemaObjCxt, types: JSONType[]): boolean {\n  const {gen, data, opts} = it\n  const coerceTo = coerceToTypes(types, opts.coerceTypes)\n  const checkTypes =\n    types.length > 0 &&\n    !(coerceTo.length === 0 && types.length === 1 && schemaHasRulesForType(it, types[0]))\n  if (checkTypes) {\n    const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong)\n    gen.if(wrongType, () => {\n      if (coerceTo.length) coerceData(it, types, coerceTo)\n      else reportTypeError(it)\n    })\n  }\n  return checkTypes\n}\n\nconst COERCIBLE: Set<JSONType> = new Set([\"string\", \"number\", \"integer\", \"boolean\", \"null\"])\nfunction coerceToTypes(types: JSONType[], coerceTypes?: boolean | \"array\"): JSONType[] {\n  return coerceTypes\n    ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === \"array\" && t === \"array\"))\n    : []\n}\n\nfunction coerceData(it: SchemaObjCxt, types: JSONType[], coerceTo: JSONType[]): void {\n  const {gen, data, opts} = it\n  const dataType = gen.let(\"dataType\", _`typeof ${data}`)\n  const coerced = gen.let(\"coerced\", _`undefined`)\n  if (opts.coerceTypes === \"array\") {\n    gen.if(_`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () =>\n      gen\n        .assign(data, _`${data}[0]`)\n        .assign(dataType, _`typeof ${data}`)\n        .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data))\n    )\n  }\n  gen.if(_`${coerced} !== undefined`)\n  for (const t of coerceTo) {\n    if (COERCIBLE.has(t) || (t === \"array\" && opts.coerceTypes === \"array\")) {\n      coerceSpecificType(t)\n    }\n  }\n  gen.else()\n  reportTypeError(it)\n  gen.endIf()\n\n  gen.if(_`${coerced} !== undefined`, () => {\n    gen.assign(data, coerced)\n    assignParentData(it, coerced)\n  })\n\n  function coerceSpecificType(t: string): void {\n    switch (t) {\n      case \"string\":\n        gen\n          .elseIf(_`${dataType} == \"number\" || ${dataType} == \"boolean\"`)\n          .assign(coerced, _`\"\" + ${data}`)\n          .elseIf(_`${data} === null`)\n          .assign(coerced, _`\"\"`)\n        return\n      case \"number\":\n        gen\n          .elseIf(\n            _`${dataType} == \"boolean\" || ${data} === null\n              || (${dataType} == \"string\" && ${data} && ${data} == +${data})`\n          )\n          .assign(coerced, _`+${data}`)\n        return\n      case \"integer\":\n        gen\n          .elseIf(\n            _`${dataType} === \"boolean\" || ${data} === null\n              || (${dataType} === \"string\" && ${data} && ${data} == +${data} && !(${data} % 1))`\n          )\n          .assign(coerced, _`+${data}`)\n        return\n      case \"boolean\":\n        gen\n          .elseIf(_`${data} === \"false\" || ${data} === 0 || ${data} === null`)\n          .assign(coerced, false)\n          .elseIf(_`${data} === \"true\" || ${data} === 1`)\n          .assign(coerced, true)\n        return\n      case \"null\":\n        gen.elseIf(_`${data} === \"\" || ${data} === 0 || ${data} === false`)\n        gen.assign(coerced, null)\n        return\n\n      case \"array\":\n        gen\n          .elseIf(\n            _`${dataType} === \"string\" || ${dataType} === \"number\"\n              || ${dataType} === \"boolean\" || ${data} === null`\n          )\n          .assign(coerced, _`[${data}]`)\n    }\n  }\n}\n\nfunction assignParentData({gen, parentData, parentDataProperty}: SchemaObjCxt, expr: Name): void {\n  // TODO use gen.property\n  gen.if(_`${parentData} !== undefined`, () =>\n    gen.assign(_`${parentData}[${parentDataProperty}]`, expr)\n  )\n}\n\nexport function checkDataType(\n  dataType: JSONType,\n  data: Name,\n  strictNums?: boolean | \"log\",\n  correct = DataType.Correct\n): Code {\n  const EQ = correct === DataType.Correct ? operators.EQ : operators.NEQ\n  let cond: Code\n  switch (dataType) {\n    case \"null\":\n      return _`${data} ${EQ} null`\n    case \"array\":\n      cond = _`Array.isArray(${data})`\n      break\n    case \"object\":\n      cond = _`${data} && typeof ${data} == \"object\" && !Array.isArray(${data})`\n      break\n    case \"integer\":\n      cond = numCond(_`!(${data} % 1) && !isNaN(${data})`)\n      break\n    case \"number\":\n      cond = numCond()\n      break\n    default:\n      return _`typeof ${data} ${EQ} ${dataType}`\n  }\n  return correct === DataType.Correct ? cond : not(cond)\n\n  function numCond(_cond: Code = nil): Code {\n    return and(_`typeof ${data} == \"number\"`, _cond, strictNums ? _`isFinite(${data})` : nil)\n  }\n}\n\nexport function checkDataTypes(\n  dataTypes: JSONType[],\n  data: Name,\n  strictNums?: boolean | \"log\",\n  correct?: DataType\n): Code {\n  if (dataTypes.length === 1) {\n    return checkDataType(dataTypes[0], data, strictNums, correct)\n  }\n  let cond: Code\n  const types = toHash(dataTypes)\n  if (types.array && types.object) {\n    const notObj = _`typeof ${data} != \"object\"`\n    cond = types.null ? notObj : _`!${data} || ${notObj}`\n    delete types.null\n    delete types.array\n    delete types.object\n  } else {\n    cond = nil\n  }\n  if (types.number) delete types.integer\n  for (const t in types) cond = and(cond, checkDataType(t as JSONType, data, strictNums, correct))\n  return cond\n}\n\nexport type TypeError = ErrorObject<\"type\", {type: string}>\n\nconst typeError: KeywordErrorDefinition = {\n  message: ({schema}) => `must be ${schema}`,\n  params: ({schema, schemaValue}) =>\n    typeof schema == \"string\" ? _`{type: ${schema}}` : _`{type: ${schemaValue}}`,\n}\n\nexport function reportTypeError(it: SchemaObjCxt): void {\n  const cxt = getTypeErrorContext(it)\n  reportError(cxt, typeError)\n}\n\nfunction getTypeErrorContext(it: SchemaObjCxt): KeywordErrorCxt {\n  const {gen, data, schema} = it\n  const schemaCode = schemaRefOrVal(it, schema, \"type\")\n  return {\n    gen,\n    keyword: \"type\",\n    data,\n    schema: schema.type,\n    schemaCode,\n    schemaValue: schemaCode,\n    parentSchema: schema,\n    params: {},\n    it,\n  }\n}\n","import type {CodeKeywordDefinition} from \"../../types\"\nimport {validateTuple} from \"./items\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"prefixItems\",\n  type: \"array\",\n  schemaType: [\"array\"],\n  before: \"uniqueItems\",\n  code: (cxt) => validateTuple(cxt, \"items\"),\n}\n\nexport default def\n","import type {CodeKeywordDefinition} from \"../../types\"\nimport {KeywordCxt} from \"../../compile/validate\"\nimport {propertyInData, allSchemaProperties} from \"../code\"\nimport {alwaysValidSchema, toHash, mergeEvaluated} from \"../../compile/util\"\nimport apDef from \"./additionalProperties\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"properties\",\n  type: \"object\",\n  schemaType: \"object\",\n  code(cxt: KeywordCxt) {\n    const {gen, schema, parentSchema, data, it} = cxt\n    if (it.opts.removeAdditional === \"all\" && parentSchema.additionalProperties === undefined) {\n      apDef.code(new KeywordCxt(it, apDef, \"additionalProperties\"))\n    }\n    const allProps = allSchemaProperties(schema)\n    for (const prop of allProps) {\n      it.definedProperties.add(prop)\n    }\n    if (it.opts.unevaluated && allProps.length && it.props !== true) {\n      it.props = mergeEvaluated.props(gen, toHash(allProps), it.props)\n    }\n    const properties = allProps.filter((p) => !alwaysValidSchema(it, schema[p]))\n    if (properties.length === 0) return\n    const valid = gen.name(\"valid\")\n\n    for (const prop of properties) {\n      if (hasDefault(prop)) {\n        applyPropertySchema(prop)\n      } else {\n        gen.if(propertyInData(gen, data, prop, it.opts.ownProperties))\n        applyPropertySchema(prop)\n        if (!it.allErrors) gen.else().var(valid, true)\n        gen.endIf()\n      }\n      cxt.it.definedProperties.add(prop)\n      cxt.ok(valid)\n    }\n\n    function hasDefault(prop: string): boolean | undefined {\n      return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined\n    }\n\n    function applyPropertySchema(prop: string): void {\n      cxt.subschema(\n        {\n          keyword: \"properties\",\n          schemaProp: prop,\n          dataProp: prop,\n        },\n        valid\n      )\n    }\n  },\n}\n\nexport default def\n","import * as uri from \"fast-uri\"\n\ntype URI = typeof uri & {code: string}\n;(uri as URI).code = 'require(\"ajv/dist/runtime/uri\").default'\n\nexport default uri as URI\n","import type {AnySchemaObject} from \"./types\"\nimport AjvCore from \"./core\"\nimport draft7Vocabularies from \"./vocabularies/draft7\"\nimport discriminator from \"./vocabularies/discriminator\"\nimport * as draft7MetaSchema from \"./refs/json-schema-draft-07.json\"\n\nconst META_SUPPORT_DATA = [\"/properties\"]\n\nconst META_SCHEMA_ID = \"http://json-schema.org/draft-07/schema\"\n\nexport class Ajv extends AjvCore {\n  _addVocabularies(): void {\n    super._addVocabularies()\n    draft7Vocabularies.forEach((v) => this.addVocabulary(v))\n    if (this.opts.discriminator) this.addKeyword(discriminator)\n  }\n\n  _addDefaultMetaSchema(): void {\n    super._addDefaultMetaSchema()\n    if (!this.opts.meta) return\n    const metaSchema = this.opts.$data\n      ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)\n      : draft7MetaSchema\n    this.addMetaSchema(metaSchema, META_SCHEMA_ID, false)\n    this.refs[\"http://json-schema.org/schema\"] = META_SCHEMA_ID\n  }\n\n  defaultMeta(): string | AnySchemaObject | undefined {\n    return (this.opts.defaultMeta =\n      super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined))\n  }\n}\n\nmodule.exports = exports = Ajv\nmodule.exports.Ajv = Ajv\nObject.defineProperty(exports, \"__esModule\", {value: true})\n\nexport default Ajv\n\nexport {\n  Format,\n  FormatDefinition,\n  AsyncFormatDefinition,\n  KeywordDefinition,\n  KeywordErrorDefinition,\n  CodeKeywordDefinition,\n  MacroKeywordDefinition,\n  FuncKeywordDefinition,\n  Vocabulary,\n  Schema,\n  SchemaObject,\n  AnySchemaObject,\n  AsyncSchema,\n  AnySchema,\n  ValidateFunction,\n  AsyncValidateFunction,\n  SchemaValidateFunction,\n  ErrorObject,\n  ErrorNoParams,\n} from \"./types\"\n\nexport {Plugin, Options, CodeOptions, InstanceOptions, Logger, ErrorsTextOptions} from \"./core\"\nexport {SchemaCxt, SchemaObjCxt} from \"./compile\"\nexport {KeywordCxt} from \"./compile/validate\"\nexport {DefinedError} from \"./vocabularies/errors\"\nexport {JSONType} from \"./compile/rules\"\nexport {JSONSchemaType} from \"./types/json-schema\"\nexport {_, str, stringify, nil, Name, Code, CodeGen, CodeGenOptions} from \"./compile/codegen\"\nexport {default as ValidationError} from \"./runtime/validation_error\"\nexport {default as MissingRefError} from \"./compile/ref_error\"\n","'use strict';\n\nvar traverse = module.exports = function (schema, opts, cb) {\n  // Legacy support for v0.3.1 and earlier.\n  if (typeof opts == 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  cb = opts.cb || cb;\n  var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};\n  var post = cb.post || function() {};\n\n  _traverse(opts, pre, post, schema, '', schema);\n};\n\n\ntraverse.keywords = {\n  additionalItems: true,\n  items: true,\n  contains: true,\n  additionalProperties: true,\n  propertyNames: true,\n  not: true,\n  if: true,\n  then: true,\n  else: true\n};\n\ntraverse.arrayKeywords = {\n  items: true,\n  allOf: true,\n  anyOf: true,\n  oneOf: true\n};\n\ntraverse.propsKeywords = {\n  $defs: true,\n  definitions: true,\n  properties: true,\n  patternProperties: true,\n  dependencies: true\n};\n\ntraverse.skipKeywords = {\n  default: true,\n  enum: true,\n  const: true,\n  required: true,\n  maximum: true,\n  minimum: true,\n  exclusiveMaximum: true,\n  exclusiveMinimum: true,\n  multipleOf: true,\n  maxLength: true,\n  minLength: true,\n  pattern: true,\n  format: true,\n  maxItems: true,\n  minItems: true,\n  uniqueItems: true,\n  maxProperties: true,\n  minProperties: true\n};\n\n\nfunction _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {\n    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n    for (var key in schema) {\n      var sch = schema[key];\n      if (Array.isArray(sch)) {\n        if (key in traverse.arrayKeywords) {\n          for (var i=0; i<sch.length; i++)\n            _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);\n        }\n      } else if (key in traverse.propsKeywords) {\n        if (sch && typeof sch == 'object') {\n          for (var prop in sch)\n            _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);\n        }\n      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {\n        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);\n      }\n    }\n    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n  }\n}\n\n\nfunction escapeJsonPtr(str) {\n  return str.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\n","import type {\n  CodeKeywordDefinition,\n  AddedKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport {allSchemaProperties, usePattern, isOwnProperty} from \"../code\"\nimport {_, nil, or, not, Code, Name} from \"../../compile/codegen\"\nimport N from \"../../compile/names\"\nimport type {SubschemaArgs} from \"../../compile/validate/subschema\"\nimport {alwaysValidSchema, schemaRefOrVal, Type} from \"../../compile/util\"\n\nexport type AdditionalPropertiesError = ErrorObject<\n  \"additionalProperties\",\n  {additionalProperty: string},\n  AnySchema\n>\n\nconst error: KeywordErrorDefinition = {\n  message: \"must NOT have additional properties\",\n  params: ({params}) => _`{additionalProperty: ${params.additionalProperty}}`,\n}\n\nconst def: CodeKeywordDefinition & AddedKeywordDefinition = {\n  keyword: \"additionalProperties\",\n  type: [\"object\"],\n  schemaType: [\"boolean\", \"object\"],\n  allowUndefined: true,\n  trackErrors: true,\n  error,\n  code(cxt) {\n    const {gen, schema, parentSchema, data, errsCount, it} = cxt\n    /* istanbul ignore if */\n    if (!errsCount) throw new Error(\"ajv implementation error\")\n    const {allErrors, opts} = it\n    it.props = true\n    if (opts.removeAdditional !== \"all\" && alwaysValidSchema(it, schema)) return\n    const props = allSchemaProperties(parentSchema.properties)\n    const patProps = allSchemaProperties(parentSchema.patternProperties)\n    checkAdditionalProperties()\n    cxt.ok(_`${errsCount} === ${N.errors}`)\n\n    function checkAdditionalProperties(): void {\n      gen.forIn(\"key\", data, (key: Name) => {\n        if (!props.length && !patProps.length) additionalPropertyCode(key)\n        else gen.if(isAdditional(key), () => additionalPropertyCode(key))\n      })\n    }\n\n    function isAdditional(key: Name): Code {\n      let definedProp: Code\n      if (props.length > 8) {\n        // TODO maybe an option instead of hard-coded 8?\n        const propsSchema = schemaRefOrVal(it, parentSchema.properties, \"properties\")\n        definedProp = isOwnProperty(gen, propsSchema as Code, key)\n      } else if (props.length) {\n        definedProp = or(...props.map((p) => _`${key} === ${p}`))\n      } else {\n        definedProp = nil\n      }\n      if (patProps.length) {\n        definedProp = or(definedProp, ...patProps.map((p) => _`${usePattern(cxt, p)}.test(${key})`))\n      }\n      return not(definedProp)\n    }\n\n    function deleteAdditional(key: Name): void {\n      gen.code(_`delete ${data}[${key}]`)\n    }\n\n    function additionalPropertyCode(key: Name): void {\n      if (opts.removeAdditional === \"all\" || (opts.removeAdditional && schema === false)) {\n        deleteAdditional(key)\n        return\n      }\n\n      if (schema === false) {\n        cxt.setParams({additionalProperty: key})\n        cxt.error()\n        if (!allErrors) gen.break()\n        return\n      }\n\n      if (typeof schema == \"object\" && !alwaysValidSchema(it, schema)) {\n        const valid = gen.name(\"valid\")\n        if (opts.removeAdditional === \"failing\") {\n          applyAdditionalSchema(key, valid, false)\n          gen.if(not(valid), () => {\n            cxt.reset()\n            deleteAdditional(key)\n          })\n        } else {\n          applyAdditionalSchema(key, valid)\n          if (!allErrors) gen.if(not(valid), () => gen.break())\n        }\n      }\n    }\n\n    function applyAdditionalSchema(key: Name, valid: Name, errors?: false): void {\n      const subschema: SubschemaArgs = {\n        keyword: \"additionalProperties\",\n        dataProp: key,\n        dataPropType: Type.Str,\n      }\n      if (errors === false) {\n        Object.assign(subschema, {\n          compositeRule: true,\n          createErrors: false,\n          allErrors: false,\n        })\n      }\n      cxt.subschema(subschema, valid)\n    }\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {checkStrictMode} from \"../../compile/util\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: [\"then\", \"else\"],\n  schemaType: [\"object\", \"boolean\"],\n  code({keyword, parentSchema, it}: KeywordCxt) {\n    if (parentSchema.if === undefined) checkStrictMode(it, `\"${keyword}\" without \"if\" is ignored`)\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition, ErrorNoParams, AnySchema} from \"../../types\"\nimport {validateUnion} from \"../code\"\n\nexport type AnyOfError = ErrorNoParams<\"anyOf\", AnySchema[]>\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"anyOf\",\n  schemaType: \"array\",\n  trackErrors: true,\n  code: validateUnion,\n  error: {message: \"must match a schema in anyOf\"},\n}\n\nexport default def\n","'use strict'\n\nconst { normalizeIPv6, normalizeIPv4, removeDotSegments, recomposeAuthority, normalizeComponentEncoding } = require('./lib/utils')\nconst SCHEMES = require('./lib/schemes')\n\nfunction normalize (uri, options) {\n  if (typeof uri === 'string') {\n    uri = serialize(parse(uri, options), options)\n  } else if (typeof uri === 'object') {\n    uri = parse(serialize(uri, options), options)\n  }\n  return uri\n}\n\nfunction resolve (baseURI, relativeURI, options) {\n  const schemelessOptions = Object.assign({ scheme: 'null' }, options)\n  const resolved = resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true)\n  return serialize(resolved, { ...schemelessOptions, skipEscape: true })\n}\n\nfunction resolveComponents (base, relative, options, skipNormalization) {\n  const target = {}\n  if (!skipNormalization) {\n    base = parse(serialize(base, options), options) // normalize base components\n    relative = parse(serialize(relative, options), options) // normalize relative components\n  }\n  options = options || {}\n\n  if (!options.tolerant && relative.scheme) {\n    target.scheme = relative.scheme\n    // target.authority = relative.authority;\n    target.userinfo = relative.userinfo\n    target.host = relative.host\n    target.port = relative.port\n    target.path = removeDotSegments(relative.path || '')\n    target.query = relative.query\n  } else {\n    if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n      // target.authority = relative.authority;\n      target.userinfo = relative.userinfo\n      target.host = relative.host\n      target.port = relative.port\n      target.path = removeDotSegments(relative.path || '')\n      target.query = relative.query\n    } else {\n      if (!relative.path) {\n        target.path = base.path\n        if (relative.query !== undefined) {\n          target.query = relative.query\n        } else {\n          target.query = base.query\n        }\n      } else {\n        if (relative.path.charAt(0) === '/') {\n          target.path = removeDotSegments(relative.path)\n        } else {\n          if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n            target.path = '/' + relative.path\n          } else if (!base.path) {\n            target.path = relative.path\n          } else {\n            target.path = base.path.slice(0, base.path.lastIndexOf('/') + 1) + relative.path\n          }\n          target.path = removeDotSegments(target.path)\n        }\n        target.query = relative.query\n      }\n      // target.authority = base.authority;\n      target.userinfo = base.userinfo\n      target.host = base.host\n      target.port = base.port\n    }\n    target.scheme = base.scheme\n  }\n\n  target.fragment = relative.fragment\n\n  return target\n}\n\nfunction equal (uriA, uriB, options) {\n  if (typeof uriA === 'string') {\n    uriA = unescape(uriA)\n    uriA = serialize(normalizeComponentEncoding(parse(uriA, options), true), { ...options, skipEscape: true })\n  } else if (typeof uriA === 'object') {\n    uriA = serialize(normalizeComponentEncoding(uriA, true), { ...options, skipEscape: true })\n  }\n\n  if (typeof uriB === 'string') {\n    uriB = unescape(uriB)\n    uriB = serialize(normalizeComponentEncoding(parse(uriB, options), true), { ...options, skipEscape: true })\n  } else if (typeof uriB === 'object') {\n    uriB = serialize(normalizeComponentEncoding(uriB, true), { ...options, skipEscape: true })\n  }\n\n  return uriA.toLowerCase() === uriB.toLowerCase()\n}\n\nfunction serialize (cmpts, opts) {\n  const components = {\n    host: cmpts.host,\n    scheme: cmpts.scheme,\n    userinfo: cmpts.userinfo,\n    port: cmpts.port,\n    path: cmpts.path,\n    query: cmpts.query,\n    nid: cmpts.nid,\n    nss: cmpts.nss,\n    uuid: cmpts.uuid,\n    fragment: cmpts.fragment,\n    reference: cmpts.reference,\n    resourceName: cmpts.resourceName,\n    secure: cmpts.secure,\n    error: ''\n  }\n  const options = Object.assign({}, opts)\n  const uriTokens = []\n\n  // find scheme handler\n  const schemeHandler = SCHEMES[(options.scheme || components.scheme || '').toLowerCase()]\n\n  // perform scheme specific serialization\n  if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options)\n\n  if (components.path !== undefined) {\n    if (!options.skipEscape) {\n      components.path = escape(components.path)\n\n      if (components.scheme !== undefined) {\n        components.path = components.path.split('%3A').join(':')\n      }\n    } else {\n      components.path = unescape(components.path)\n    }\n  }\n\n  if (options.reference !== 'suffix' && components.scheme) {\n    uriTokens.push(components.scheme, ':')\n  }\n\n  const authority = recomposeAuthority(components)\n  if (authority !== undefined) {\n    if (options.reference !== 'suffix') {\n      uriTokens.push('//')\n    }\n\n    uriTokens.push(authority)\n\n    if (components.path && components.path.charAt(0) !== '/') {\n      uriTokens.push('/')\n    }\n  }\n  if (components.path !== undefined) {\n    let s = components.path\n\n    if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n      s = removeDotSegments(s)\n    }\n\n    if (authority === undefined) {\n      s = s.replace(/^\\/\\//u, '/%2F') // don't allow the path to start with \"//\"\n    }\n\n    uriTokens.push(s)\n  }\n\n  if (components.query !== undefined) {\n    uriTokens.push('?', components.query)\n  }\n\n  if (components.fragment !== undefined) {\n    uriTokens.push('#', components.fragment)\n  }\n  return uriTokens.join('')\n}\n\nconst hexLookUp = Array.from({ length: 127 }, (_v, k) => /[^!\"$&'()*+,\\-.;=_`a-z{}~]/u.test(String.fromCharCode(k)))\n\nfunction nonSimpleDomain (value) {\n  let code = 0\n  for (let i = 0, len = value.length; i < len; ++i) {\n    code = value.charCodeAt(i)\n    if (code > 126 || hexLookUp[code]) {\n      return true\n    }\n  }\n  return false\n}\n\nconst URI_PARSE = /^(?:([^#/:?]+):)?(?:\\/\\/((?:([^#/?@]*)@)?(\\[[^#/?\\]]+\\]|[^#/:?]*)(?::(\\d*))?))?([^#?]*)(?:\\?([^#]*))?(?:#((?:.|[\\n\\r])*))?/u\n\nfunction parse (uri, opts) {\n  const options = Object.assign({}, opts)\n  const parsed = {\n    scheme: undefined,\n    userinfo: undefined,\n    host: '',\n    port: undefined,\n    path: '',\n    query: undefined,\n    fragment: undefined\n  }\n  const gotEncoding = uri.indexOf('%') !== -1\n  let isIP = false\n  if (options.reference === 'suffix') uri = (options.scheme ? options.scheme + ':' : '') + '//' + uri\n\n  const matches = uri.match(URI_PARSE)\n\n  if (matches) {\n    // store each component\n    parsed.scheme = matches[1]\n    parsed.userinfo = matches[3]\n    parsed.host = matches[4]\n    parsed.port = parseInt(matches[5], 10)\n    parsed.path = matches[6] || ''\n    parsed.query = matches[7]\n    parsed.fragment = matches[8]\n\n    // fix port number\n    if (isNaN(parsed.port)) {\n      parsed.port = matches[5]\n    }\n    if (parsed.host) {\n      const ipv4result = normalizeIPv4(parsed.host)\n      if (ipv4result.isIPV4 === false) {\n        const ipv6result = normalizeIPv6(ipv4result.host)\n        parsed.host = ipv6result.host.toLowerCase()\n        isIP = ipv6result.isIPV6\n      } else {\n        parsed.host = ipv4result.host\n        isIP = true\n      }\n    }\n    if (parsed.scheme === undefined && parsed.userinfo === undefined && parsed.host === undefined && parsed.port === undefined && parsed.query === undefined && !parsed.path) {\n      parsed.reference = 'same-document'\n    } else if (parsed.scheme === undefined) {\n      parsed.reference = 'relative'\n    } else if (parsed.fragment === undefined) {\n      parsed.reference = 'absolute'\n    } else {\n      parsed.reference = 'uri'\n    }\n\n    // check for reference errors\n    if (options.reference && options.reference !== 'suffix' && options.reference !== parsed.reference) {\n      parsed.error = parsed.error || 'URI is not a ' + options.reference + ' reference.'\n    }\n\n    // find scheme handler\n    const schemeHandler = SCHEMES[(options.scheme || parsed.scheme || '').toLowerCase()]\n\n    // check if scheme can't handle IRIs\n    if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n      // if host component is a domain name\n      if (parsed.host && (options.domainHost || (schemeHandler && schemeHandler.domainHost)) && isIP === false && nonSimpleDomain(parsed.host)) {\n        // convert Unicode IDN -> ASCII IDN\n        try {\n          parsed.host = URL.domainToASCII(parsed.host.toLowerCase())\n        } catch (e) {\n          parsed.error = parsed.error || \"Host's domain name can not be converted to ASCII: \" + e\n        }\n      }\n      // convert IRI -> URI\n    }\n\n    if (!schemeHandler || (schemeHandler && !schemeHandler.skipNormalize)) {\n      if (gotEncoding && parsed.scheme !== undefined) {\n        parsed.scheme = unescape(parsed.scheme)\n      }\n      if (gotEncoding && parsed.host !== undefined) {\n        parsed.host = unescape(parsed.host)\n      }\n      if (parsed.path) {\n        parsed.path = escape(unescape(parsed.path))\n      }\n      if (parsed.fragment) {\n        parsed.fragment = encodeURI(decodeURIComponent(parsed.fragment))\n      }\n    }\n\n    // perform scheme specific parsing\n    if (schemeHandler && schemeHandler.parse) {\n      schemeHandler.parse(parsed, options)\n    }\n  } else {\n    parsed.error = parsed.error || 'URI can not be parsed.'\n  }\n  return parsed\n}\n\nconst fastUri = {\n  SCHEMES,\n  normalize,\n  resolve,\n  resolveComponents,\n  equal,\n  serialize,\n  parse\n}\n\nmodule.exports = fastUri\nmodule.exports.default = fastUri\nmodule.exports.fastUri = fastUri\n","import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {\n  checkReportMissingProp,\n  checkMissingProp,\n  reportMissingProp,\n  propertyInData,\n  noPropertyInData,\n} from \"../code\"\nimport {_, str, nil, not, Name, Code} from \"../../compile/codegen\"\nimport {checkStrictMode} from \"../../compile/util\"\n\nexport type RequiredError = ErrorObject<\n  \"required\",\n  {missingProperty: string},\n  string[] | {$data: string}\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {missingProperty}}) => str`must have required property '${missingProperty}'`,\n  params: ({params: {missingProperty}}) => _`{missingProperty: ${missingProperty}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"required\",\n  type: \"object\",\n  schemaType: \"array\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, schemaCode, data, $data, it} = cxt\n    const {opts} = it\n    if (!$data && schema.length === 0) return\n    const useLoop = schema.length >= opts.loopRequired\n    if (it.allErrors) allErrorsMode()\n    else exitOnErrorMode()\n\n    if (opts.strictRequired) {\n      const props = cxt.parentSchema.properties\n      const {definedProperties} = cxt.it\n      for (const requiredKey of schema) {\n        if (props?.[requiredKey] === undefined && !definedProperties.has(requiredKey)) {\n          const schemaPath = it.schemaEnv.baseId + it.errSchemaPath\n          const msg = `required property \"${requiredKey}\" is not defined at \"${schemaPath}\" (strictRequired)`\n          checkStrictMode(it, msg, it.opts.strictRequired)\n        }\n      }\n    }\n\n    function allErrorsMode(): void {\n      if (useLoop || $data) {\n        cxt.block$data(nil, loopAllRequired)\n      } else {\n        for (const prop of schema) {\n          checkReportMissingProp(cxt, prop)\n        }\n      }\n    }\n\n    function exitOnErrorMode(): void {\n      const missing = gen.let(\"missing\")\n      if (useLoop || $data) {\n        const valid = gen.let(\"valid\", true)\n        cxt.block$data(valid, () => loopUntilMissing(missing, valid))\n        cxt.ok(valid)\n      } else {\n        gen.if(checkMissingProp(cxt, schema, missing))\n        reportMissingProp(cxt, missing)\n        gen.else()\n      }\n    }\n\n    function loopAllRequired(): void {\n      gen.forOf(\"prop\", schemaCode as Code, (prop) => {\n        cxt.setParams({missingProperty: prop})\n        gen.if(noPropertyInData(gen, data, prop, opts.ownProperties), () => cxt.error())\n      })\n    }\n\n    function loopUntilMissing(missing: Name, valid: Name): void {\n      cxt.setParams({missingProperty: missing})\n      gen.forOf(\n        missing,\n        schemaCode as Code,\n        () => {\n          gen.assign(valid, propertyInData(gen, data, missing, opts.ownProperties))\n          gen.if(not(valid), () => {\n            cxt.error()\n            gen.break()\n          })\n        },\n        nil\n      )\n    }\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {allSchemaProperties, usePattern} from \"../code\"\nimport {_, not, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema, checkStrictMode} from \"../../compile/util\"\nimport {evaluatedPropsToName, Type} from \"../../compile/util\"\nimport {AnySchema} from \"../../types\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"patternProperties\",\n  type: \"object\",\n  schemaType: \"object\",\n  code(cxt: KeywordCxt) {\n    const {gen, schema, data, parentSchema, it} = cxt\n    const {opts} = it\n    const patterns = allSchemaProperties(schema)\n    const alwaysValidPatterns = patterns.filter((p) =>\n      alwaysValidSchema(it, schema[p] as AnySchema)\n    )\n\n    if (\n      patterns.length === 0 ||\n      (alwaysValidPatterns.length === patterns.length &&\n        (!it.opts.unevaluated || it.props === true))\n    ) {\n      return\n    }\n\n    const checkProperties =\n      opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties\n    const valid = gen.name(\"valid\")\n    if (it.props !== true && !(it.props instanceof Name)) {\n      it.props = evaluatedPropsToName(gen, it.props)\n    }\n    const {props} = it\n    validatePatternProperties()\n\n    function validatePatternProperties(): void {\n      for (const pat of patterns) {\n        if (checkProperties) checkMatchingProperties(pat)\n        if (it.allErrors) {\n          validateProperties(pat)\n        } else {\n          gen.var(valid, true) // TODO var\n          validateProperties(pat)\n          gen.if(valid)\n        }\n      }\n    }\n\n    function checkMatchingProperties(pat: string): void {\n      for (const prop in checkProperties) {\n        if (new RegExp(pat).test(prop)) {\n          checkStrictMode(\n            it,\n            `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`\n          )\n        }\n      }\n    }\n\n    function validateProperties(pat: string): void {\n      gen.forIn(\"key\", data, (key) => {\n        gen.if(_`${usePattern(cxt, pat)}.test(${key})`, () => {\n          const alwaysValid = alwaysValidPatterns.includes(pat)\n          if (!alwaysValid) {\n            cxt.subschema(\n              {\n                keyword: \"patternProperties\",\n                schemaProp: pat,\n                dataProp: key,\n                dataPropType: Type.Str,\n              },\n              valid\n            )\n          }\n\n          if (it.opts.unevaluated && props !== true) {\n            gen.assign(_`${props}[${key}]`, true)\n          } else if (!alwaysValid && !it.allErrors) {\n            // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)\n            // or if all properties were evaluated (props === true)\n            gen.if(not(valid), () => gen.break())\n          }\n        })\n      })\n    }\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition, AnySchema} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {alwaysValidSchema} from \"../../compile/util\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"allOf\",\n  schemaType: \"array\",\n  code(cxt: KeywordCxt) {\n    const {gen, schema, it} = cxt\n    /* istanbul ignore if */\n    if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\")\n    const valid = gen.name(\"valid\")\n    schema.forEach((sch: AnySchema, i: number) => {\n      if (alwaysValidSchema(it, sch)) return\n      const schCxt = cxt.subschema({keyword: \"allOf\", schemaProp: i}, valid)\n      cxt.ok(valid)\n      cxt.mergeEvaluated(schCxt)\n    })\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str} from \"../../compile/codegen\"\n\nexport type MultipleOfError = ErrorObject<\n  \"multipleOf\",\n  {multipleOf: number},\n  number | {$data: string}\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({schemaCode}) => str`must be multiple of ${schemaCode}`,\n  params: ({schemaCode}) => _`{multipleOf: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"multipleOf\",\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, schemaCode, it} = cxt\n    // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n    const prec = it.opts.multipleOfPrecision\n    const res = gen.let(\"res\")\n    const invalid = prec\n      ? _`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`\n      : _`${res} !== parseInt(${res})`\n    cxt.fail$data(_`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`)\n  },\n}\n\nexport default def\n","import type {AnySchema, EvaluatedProperties, EvaluatedItems} from \"../types\"\nimport type {SchemaCxt, SchemaObjCxt} from \".\"\nimport {_, getProperty, Code, Name, CodeGen} from \"./codegen\"\nimport {_Code} from \"./codegen/code\"\nimport type {Rule, ValidationRules} from \"./rules\"\n\n// TODO refactor to use Set\nexport function toHash<T extends string = string>(arr: T[]): {[K in T]?: true} {\n  const hash: {[K in T]?: true} = {}\n  for (const item of arr) hash[item] = true\n  return hash\n}\n\nexport function alwaysValidSchema(it: SchemaCxt, schema: AnySchema): boolean | void {\n  if (typeof schema == \"boolean\") return schema\n  if (Object.keys(schema).length === 0) return true\n  checkUnknownRules(it, schema)\n  return !schemaHasRules(schema, it.self.RULES.all)\n}\n\nexport function checkUnknownRules(it: SchemaCxt, schema: AnySchema = it.schema): void {\n  const {opts, self} = it\n  if (!opts.strictSchema) return\n  if (typeof schema === \"boolean\") return\n  const rules = self.RULES.keywords\n  for (const key in schema) {\n    if (!rules[key]) checkStrictMode(it, `unknown keyword: \"${key}\"`)\n  }\n}\n\nexport function schemaHasRules(\n  schema: AnySchema,\n  rules: {[Key in string]?: boolean | Rule}\n): boolean {\n  if (typeof schema == \"boolean\") return !schema\n  for (const key in schema) if (rules[key]) return true\n  return false\n}\n\nexport function schemaHasRulesButRef(schema: AnySchema, RULES: ValidationRules): boolean {\n  if (typeof schema == \"boolean\") return !schema\n  for (const key in schema) if (key !== \"$ref\" && RULES.all[key]) return true\n  return false\n}\n\nexport function schemaRefOrVal(\n  {topSchemaRef, schemaPath}: SchemaObjCxt,\n  schema: unknown,\n  keyword: string,\n  $data?: string | false\n): Code | number | boolean {\n  if (!$data) {\n    if (typeof schema == \"number\" || typeof schema == \"boolean\") return schema\n    if (typeof schema == \"string\") return _`${schema}`\n  }\n  return _`${topSchemaRef}${schemaPath}${getProperty(keyword)}`\n}\n\nexport function unescapeFragment(str: string): string {\n  return unescapeJsonPointer(decodeURIComponent(str))\n}\n\nexport function escapeFragment(str: string | number): string {\n  return encodeURIComponent(escapeJsonPointer(str))\n}\n\nexport function escapeJsonPointer(str: string | number): string {\n  if (typeof str == \"number\") return `${str}`\n  return str.replace(/~/g, \"~0\").replace(/\\//g, \"~1\")\n}\n\nexport function unescapeJsonPointer(str: string): string {\n  return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\")\n}\n\nexport function eachItem<T>(xs: T | T[], f: (x: T) => void): void {\n  if (Array.isArray(xs)) {\n    for (const x of xs) f(x)\n  } else {\n    f(xs)\n  }\n}\n\ntype SomeEvaluated = EvaluatedProperties | EvaluatedItems\n\ntype MergeEvaluatedFunc<T extends SomeEvaluated> = (\n  gen: CodeGen,\n  from: Name | T,\n  to: Name | Exclude<T, true> | undefined,\n  toName?: typeof Name\n) => Name | T\n\ninterface MakeMergeFuncArgs<T extends SomeEvaluated> {\n  mergeNames: (gen: CodeGen, from: Name, to: Name) => void\n  mergeToName: (gen: CodeGen, from: T, to: Name) => void\n  mergeValues: (from: T, to: Exclude<T, true>) => T\n  resultToName: (gen: CodeGen, res?: T) => Name\n}\n\nfunction makeMergeEvaluated<T extends SomeEvaluated>({\n  mergeNames,\n  mergeToName,\n  mergeValues,\n  resultToName,\n}: MakeMergeFuncArgs<T>): MergeEvaluatedFunc<T> {\n  return (gen, from, to, toName) => {\n    const res =\n      to === undefined\n        ? from\n        : to instanceof Name\n        ? (from instanceof Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to)\n        : from instanceof Name\n        ? (mergeToName(gen, to, from), from)\n        : mergeValues(from, to)\n    return toName === Name && !(res instanceof Name) ? resultToName(gen, res) : res\n  }\n}\n\ninterface MergeEvaluated {\n  props: MergeEvaluatedFunc<EvaluatedProperties>\n  items: MergeEvaluatedFunc<EvaluatedItems>\n}\n\nexport const mergeEvaluated: MergeEvaluated = {\n  props: makeMergeEvaluated({\n    mergeNames: (gen, from, to) =>\n      gen.if(_`${to} !== true && ${from} !== undefined`, () => {\n        gen.if(\n          _`${from} === true`,\n          () => gen.assign(to, true),\n          () => gen.assign(to, _`${to} || {}`).code(_`Object.assign(${to}, ${from})`)\n        )\n      }),\n    mergeToName: (gen, from, to) =>\n      gen.if(_`${to} !== true`, () => {\n        if (from === true) {\n          gen.assign(to, true)\n        } else {\n          gen.assign(to, _`${to} || {}`)\n          setEvaluated(gen, to, from)\n        }\n      }),\n    mergeValues: (from, to) => (from === true ? true : {...from, ...to}),\n    resultToName: evaluatedPropsToName,\n  }),\n  items: makeMergeEvaluated({\n    mergeNames: (gen, from, to) =>\n      gen.if(_`${to} !== true && ${from} !== undefined`, () =>\n        gen.assign(to, _`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)\n      ),\n    mergeToName: (gen, from, to) =>\n      gen.if(_`${to} !== true`, () =>\n        gen.assign(to, from === true ? true : _`${to} > ${from} ? ${to} : ${from}`)\n      ),\n    mergeValues: (from, to) => (from === true ? true : Math.max(from, to)),\n    resultToName: (gen, items) => gen.var(\"items\", items),\n  }),\n}\n\nexport function evaluatedPropsToName(gen: CodeGen, ps?: EvaluatedProperties): Name {\n  if (ps === true) return gen.var(\"props\", true)\n  const props = gen.var(\"props\", _`{}`)\n  if (ps !== undefined) setEvaluated(gen, props, ps)\n  return props\n}\n\nexport function setEvaluated(gen: CodeGen, props: Name, ps: {[K in string]?: true}): void {\n  Object.keys(ps).forEach((p) => gen.assign(_`${props}${getProperty(p)}`, true))\n}\n\nconst snippets: {[S in string]?: _Code} = {}\n\nexport function useFunc(gen: CodeGen, f: {code: string}): Name {\n  return gen.scopeValue(\"func\", {\n    ref: f,\n    code: snippets[f.code] || (snippets[f.code] = new _Code(f.code)),\n  })\n}\n\nexport enum Type {\n  Num,\n  Str,\n}\n\nexport function getErrorPath(\n  dataProp: Name | string | number,\n  dataPropType?: Type,\n  jsPropertySyntax?: boolean\n): Code | string {\n  // let path\n  if (dataProp instanceof Name) {\n    const isNumber = dataPropType === Type.Num\n    return jsPropertySyntax\n      ? isNumber\n        ? _`\"[\" + ${dataProp} + \"]\"`\n        : _`\"['\" + ${dataProp} + \"']\"`\n      : isNumber\n      ? _`\"/\" + ${dataProp}`\n      : _`\"/\" + ${dataProp}.replace(/~/g, \"~0\").replace(/\\\\//g, \"~1\")` // TODO maybe use global escapePointer\n  }\n  return jsPropertySyntax ? getProperty(dataProp).toString() : \"/\" + escapeJsonPointer(dataProp)\n}\n\nexport function checkStrictMode(\n  it: SchemaCxt,\n  msg: string,\n  mode: boolean | \"log\" = it.opts.strictSchema\n): void {\n  if (!mode) return\n  msg = `strict mode: ${msg}`\n  if (mode === true) throw new Error(msg)\n  it.self.logger.warn(msg)\n}\n","import type {CodeKeywordDefinition, AnySchemaObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, getProperty, Name} from \"../../compile/codegen\"\nimport {DiscrError, DiscrErrorObj} from \"../discriminator/types\"\nimport {resolveRef, SchemaEnv} from \"../../compile\"\nimport MissingRefError from \"../../compile/ref_error\"\nimport {schemaHasRulesButRef} from \"../../compile/util\"\n\nexport type DiscriminatorError = DiscrErrorObj<DiscrError.Tag> | DiscrErrorObj<DiscrError.Mapping>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {discrError, tagName}}) =>\n    discrError === DiscrError.Tag\n      ? `tag \"${tagName}\" must be string`\n      : `value of tag \"${tagName}\" must be in oneOf`,\n  params: ({params: {discrError, tag, tagName}}) =>\n    _`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"discriminator\",\n  type: \"object\",\n  schemaType: \"object\",\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, schema, parentSchema, it} = cxt\n    const {oneOf} = parentSchema\n    if (!it.opts.discriminator) {\n      throw new Error(\"discriminator: requires discriminator option\")\n    }\n    const tagName = schema.propertyName\n    if (typeof tagName != \"string\") throw new Error(\"discriminator: requires propertyName\")\n    if (schema.mapping) throw new Error(\"discriminator: mapping is not supported\")\n    if (!oneOf) throw new Error(\"discriminator: requires oneOf keyword\")\n    const valid = gen.let(\"valid\", false)\n    const tag = gen.const(\"tag\", _`${data}${getProperty(tagName)}`)\n    gen.if(\n      _`typeof ${tag} == \"string\"`,\n      () => validateMapping(),\n      () => cxt.error(false, {discrError: DiscrError.Tag, tag, tagName})\n    )\n    cxt.ok(valid)\n\n    function validateMapping(): void {\n      const mapping = getMapping()\n      gen.if(false)\n      for (const tagValue in mapping) {\n        gen.elseIf(_`${tag} === ${tagValue}`)\n        gen.assign(valid, applyTagSchema(mapping[tagValue]))\n      }\n      gen.else()\n      cxt.error(false, {discrError: DiscrError.Mapping, tag, tagName})\n      gen.endIf()\n    }\n\n    function applyTagSchema(schemaProp?: number): Name {\n      const _valid = gen.name(\"valid\")\n      const schCxt = cxt.subschema({keyword: \"oneOf\", schemaProp}, _valid)\n      cxt.mergeEvaluated(schCxt, Name)\n      return _valid\n    }\n\n    function getMapping(): {[T in string]?: number} {\n      const oneOfMapping: {[T in string]?: number} = {}\n      const topRequired = hasRequired(parentSchema)\n      let tagRequired = true\n      for (let i = 0; i < oneOf.length; i++) {\n        let sch = oneOf[i]\n        if (sch?.$ref && !schemaHasRulesButRef(sch, it.self.RULES)) {\n          const ref = sch.$ref\n          sch = resolveRef.call(it.self, it.schemaEnv.root, it.baseId, ref)\n          if (sch instanceof SchemaEnv) sch = sch.schema\n          if (sch === undefined) throw new MissingRefError(it.opts.uriResolver, it.baseId, ref)\n        }\n        const propSch = sch?.properties?.[tagName]\n        if (typeof propSch != \"object\") {\n          throw new Error(\n            `discriminator: oneOf subschemas (or referenced schemas) must have \"properties/${tagName}\"`\n          )\n        }\n        tagRequired = tagRequired && (topRequired || hasRequired(sch))\n        addMappings(propSch, i)\n      }\n      if (!tagRequired) throw new Error(`discriminator: \"${tagName}\" must be required`)\n      return oneOfMapping\n\n      function hasRequired({required}: AnySchemaObject): boolean {\n        return Array.isArray(required) && required.includes(tagName)\n      }\n\n      function addMappings(sch: AnySchemaObject, i: number): void {\n        if (sch.const) {\n          addMapping(sch.const, i)\n        } else if (sch.enum) {\n          for (const tagValue of sch.enum) {\n            addMapping(tagValue, i)\n          }\n        } else {\n          throw new Error(`discriminator: \"properties/${tagName}\" must have \"const\" or \"enum\"`)\n        }\n      }\n\n      function addMapping(tagValue: unknown, i: number): void {\n        if (typeof tagValue != \"string\" || tagValue in oneOfMapping) {\n          throw new Error(`discriminator: \"${tagName}\" values must be unique strings`)\n        }\n        oneOfMapping[tagValue] = i\n      }\n    }\n  },\n}\n\nexport default def\n","import {Name} from \"./codegen\"\n\nconst names = {\n  // validation function arguments\n  data: new Name(\"data\"), // data passed to validation function\n  // args passed from referencing schema\n  valCxt: new Name(\"valCxt\"), // validation/data context - should not be used directly, it is destructured to the names below\n  instancePath: new Name(\"instancePath\"),\n  parentData: new Name(\"parentData\"),\n  parentDataProperty: new Name(\"parentDataProperty\"),\n  rootData: new Name(\"rootData\"), // root data - same as the data passed to the first/top validation function\n  dynamicAnchors: new Name(\"dynamicAnchors\"), // used to support recursiveRef and dynamicRef\n  // function scoped variables\n  vErrors: new Name(\"vErrors\"), // null or array of validation errors\n  errors: new Name(\"errors\"), // counter of validation errors\n  this: new Name(\"this\"),\n  // \"globals\"\n  self: new Name(\"self\"),\n  scope: new Name(\"scope\"),\n  // JTD serialize/parse name for JSON string and position\n  json: new Name(\"json\"),\n  jsonPos: new Name(\"jsonPos\"),\n  jsonLen: new Name(\"jsonLen\"),\n  jsonPart: new Name(\"jsonPart\"),\n}\n\nexport default names\n","import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {usePattern} from \"../code\"\nimport {_, str} from \"../../compile/codegen\"\n\nexport type PatternError = ErrorObject<\"pattern\", {pattern: string}, string | {$data: string}>\n\nconst error: KeywordErrorDefinition = {\n  message: ({schemaCode}) => str`must match pattern \"${schemaCode}\"`,\n  params: ({schemaCode}) => _`{pattern: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"pattern\",\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {data, $data, schema, schemaCode, it} = cxt\n    // TODO regexp should be wrapped in try/catchs\n    const u = it.opts.unicodeRegExp ? \"u\" : \"\"\n    const regExp = $data ? _`(new RegExp(${schemaCode}, ${u}))` : usePattern(cxt, schema)\n    cxt.fail$data(_`!${regExp}.test(${data})`)\n  },\n}\n\nexport default def\n","import type {ErrorObject, Vocabulary} from \"../../types\"\nimport limitNumber, {LimitNumberError} from \"./limitNumber\"\nimport multipleOf, {MultipleOfError} from \"./multipleOf\"\nimport limitLength from \"./limitLength\"\nimport pattern, {PatternError} from \"./pattern\"\nimport limitProperties from \"./limitProperties\"\nimport required, {RequiredError} from \"./required\"\nimport limitItems from \"./limitItems\"\nimport uniqueItems, {UniqueItemsError} from \"./uniqueItems\"\nimport constKeyword, {ConstError} from \"./const\"\nimport enumKeyword, {EnumError} from \"./enum\"\n\nconst validation: Vocabulary = [\n  // number\n  limitNumber,\n  multipleOf,\n  // string\n  limitLength,\n  pattern,\n  // object\n  limitProperties,\n  required,\n  // array\n  limitItems,\n  uniqueItems,\n  // any\n  {keyword: \"type\", schemaType: [\"string\", \"array\"]},\n  {keyword: \"nullable\", schemaType: \"boolean\"},\n  constKeyword,\n  enumKeyword,\n]\n\nexport default validation\n\ntype LimitError = ErrorObject<\n  \"maxItems\" | \"minItems\" | \"minProperties\" | \"maxProperties\" | \"minLength\" | \"maxLength\",\n  {limit: number},\n  number | {$data: string}\n>\n\nexport type ValidationKeywordError =\n  | LimitError\n  | LimitNumberError\n  | MultipleOfError\n  | PatternError\n  | RequiredError\n  | UniqueItemsError\n  | ConstError\n  | EnumError\n","import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {SchemaObjCxt} from \"../../compile\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, not, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema, checkStrictMode} from \"../../compile/util\"\n\nexport type IfKeywordError = ErrorObject<\"if\", {failingKeyword: string}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params}) => str`must match \"${params.ifClause}\" schema`,\n  params: ({params}) => _`{failingKeyword: ${params.ifClause}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"if\",\n  schemaType: [\"object\", \"boolean\"],\n  trackErrors: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, parentSchema, it} = cxt\n    if (parentSchema.then === undefined && parentSchema.else === undefined) {\n      checkStrictMode(it, '\"if\" without \"then\" and \"else\" is ignored')\n    }\n    const hasThen = hasSchema(it, \"then\")\n    const hasElse = hasSchema(it, \"else\")\n    if (!hasThen && !hasElse) return\n\n    const valid = gen.let(\"valid\", true)\n    const schValid = gen.name(\"_valid\")\n    validateIf()\n    cxt.reset()\n\n    if (hasThen && hasElse) {\n      const ifClause = gen.let(\"ifClause\")\n      cxt.setParams({ifClause})\n      gen.if(schValid, validateClause(\"then\", ifClause), validateClause(\"else\", ifClause))\n    } else if (hasThen) {\n      gen.if(schValid, validateClause(\"then\"))\n    } else {\n      gen.if(not(schValid), validateClause(\"else\"))\n    }\n\n    cxt.pass(valid, () => cxt.error(true))\n\n    function validateIf(): void {\n      const schCxt = cxt.subschema(\n        {\n          keyword: \"if\",\n          compositeRule: true,\n          createErrors: false,\n          allErrors: false,\n        },\n        schValid\n      )\n      cxt.mergeEvaluated(schCxt)\n    }\n\n    function validateClause(keyword: string, ifClause?: Name): () => void {\n      return () => {\n        const schCxt = cxt.subschema({keyword}, schValid)\n        gen.assign(valid, schValid)\n        cxt.mergeValidEvaluated(schCxt, valid)\n        if (ifClause) gen.assign(ifClause, _`${keyword}`)\n        else cxt.setParams({ifClause: keyword})\n      }\n    }\n  },\n}\n\nfunction hasSchema(it: SchemaObjCxt, keyword: string): boolean {\n  const schema = it.schema[keyword]\n  return schema !== undefined && !alwaysValidSchema(it, schema)\n}\n\nexport default def\n","import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema} from \"../../compile/util\"\nimport {SchemaCxt} from \"../../compile\"\n\nexport type OneOfError = ErrorObject<\n  \"oneOf\",\n  {passingSchemas: [number, number] | null},\n  AnySchema[]\n>\n\nconst error: KeywordErrorDefinition = {\n  message: \"must match exactly one schema in oneOf\",\n  params: ({params}) => _`{passingSchemas: ${params.passing}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"oneOf\",\n  schemaType: \"array\",\n  trackErrors: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, parentSchema, it} = cxt\n    /* istanbul ignore if */\n    if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\")\n    if (it.opts.discriminator && parentSchema.discriminator) return\n    const schArr: AnySchema[] = schema\n    const valid = gen.let(\"valid\", false)\n    const passing = gen.let(\"passing\", null)\n    const schValid = gen.name(\"_valid\")\n    cxt.setParams({passing})\n    // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas\n\n    gen.block(validateOneOf)\n\n    cxt.result(\n      valid,\n      () => cxt.reset(),\n      () => cxt.error(true)\n    )\n\n    function validateOneOf(): void {\n      schArr.forEach((sch: AnySchema, i: number) => {\n        let schCxt: SchemaCxt | undefined\n        if (alwaysValidSchema(it, sch)) {\n          gen.var(schValid, true)\n        } else {\n          schCxt = cxt.subschema(\n            {\n              keyword: \"oneOf\",\n              schemaProp: i,\n              compositeRule: true,\n            },\n            schValid\n          )\n        }\n\n        if (i > 0) {\n          gen\n            .if(_`${schValid} && ${valid}`)\n            .assign(valid, false)\n            .assign(passing, _`[${passing}, ${i}]`)\n            .else()\n        }\n\n        gen.if(schValid, () => {\n          gen.assign(valid, true)\n          gen.assign(passing, i)\n          if (schCxt) cxt.mergeEvaluated(schCxt, Name)\n        })\n      })\n    }\n  },\n}\n\nexport default def\n","import type {Vocabulary} from \"../../types\"\nimport formatKeyword from \"./format\"\n\nconst format: Vocabulary = [formatKeyword]\n\nexport default format\n","import type {CodeKeywordDefinition, ErrorNoParams, AnySchema} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {alwaysValidSchema} from \"../../compile/util\"\n\nexport type NotKeywordError = ErrorNoParams<\"not\", AnySchema>\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"not\",\n  schemaType: [\"object\", \"boolean\"],\n  trackErrors: true,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, it} = cxt\n    if (alwaysValidSchema(it, schema)) {\n      cxt.fail()\n      return\n    }\n\n    const valid = gen.name(\"valid\")\n    cxt.subschema(\n      {\n        keyword: \"not\",\n        compositeRule: true,\n        createErrors: false,\n        allErrors: false,\n      },\n      valid\n    )\n\n    cxt.failResult(\n      valid,\n      () => cxt.reset(),\n      () => cxt.error()\n    )\n  },\n  error: {message: \"must NOT be valid\"},\n}\n\nexport default def\n","import type {Vocabulary} from \"../types\"\nimport coreVocabulary from \"./core\"\nimport validationVocabulary from \"./validation\"\nimport getApplicatorVocabulary from \"./applicator\"\nimport formatVocabulary from \"./format\"\nimport {metadataVocabulary, contentVocabulary} from \"./metadata\"\n\nconst draft7Vocabularies: Vocabulary[] = [\n  coreVocabulary,\n  validationVocabulary,\n  getApplicatorVocabulary(),\n  formatVocabulary,\n  metadataVocabulary,\n  contentVocabulary,\n]\n\nexport default draft7Vocabularies\n"],"names":["shouldUseGroup","schema","group","rules","some","rule","shouldUseRule","undefined","keyword","_a","definition","implements","kwd","exports","_ref","type","self","RULES","types","module","equal","a","b","constructor","length","i","keys","Array","isArray","RegExp","source","flags","valueOf","Object","prototype","toString","hasOwnProperty","call","key","codegen_1","require","util_1","assignDefault","it","prop","defaultValue","gen","compositeRule","data","opts","childData","_","_templateObject","_taggedTemplateLiteral","getProperty","checkStrictMode","concat","condition","_templateObject2","useDefaults","_templateObject3","if","_templateObject4","stringify","ty","properties","items","default","forEach","sch","code_1","def","schemaType","before","code","cxt","validateTuple","alwaysValidSchema","ok","validateArray","extraItems","schArr","arguments","parentSchema","errSchemaPath","l","fullTuple","minItems","maxItems","strictTuples","msg","checkStrictTuple","unevaluated","mergeEvaluated","valid","name","len","const","subschema","schemaProp","dataProp","HEX","IPV4_REG","normalizeIPv4","host","findToken","isIPV4","matches","match","address","stripLeadingZeros","stringArrayToHexStripped","input","keepZero","acc","strip","c","normalizeIPv6","isIPV6","ipv6","tokenCount","output","error","zone","buffer","isZone","endipv6Encountered","endIpv6","consume","hex","push","cursor","join","getIPV6","newHost","escapedHost","str","token","out","skip","ind","RDS1","RDS2","RDS3","RDS5","recomposeAuthority","components","uriTokens","userinfo","unescape","ipV4res","ipV6res","port","String","normalizeComponentEncoding","esc","func","escape","scheme","path","query","fragment","removeDotSegments","replace","pop","im","Error","s","slice","schemaPath","topSchemaRef","escapeFragment","_ref2","dataPropType","dpType","dataTypes","propertyName","errorPath","dataPathArr","dataContextProps","let","getErrorPath","jsPropertySyntax","parentDataProperty","_templateObject5","Name","_nextData","dataLevel","definedProperties","Set","parentData","dataNames","_ref3","jtdDiscriminator","jtdMetadata","createErrors","allErrors","ops","operators","KWDs","maximum","okStr","LTE","fail","GT","minimum","GTE","LT","exclusiveMaximum","exclusiveMinimum","message","schemaCode","params","$data","fail$data","ref_error_1","names_1","compile_1","$ref","baseId","schemaEnv","env","validateName","root","callRef","$async","rootName","scopeValue","ref","callRootRef","schOrEnv","resolveRef","uriResolver","SchemaEnv","v","getValidate","callValidate","schName","schCxt","nil","inlineRefSchema","validate","passCxt","passContext","this","addErrorsFrom","errs","assign","vErrors","_templateObject6","errors","_templateObject7","addEvaluatedFrom","schEvaluated","evaluated","props","dynamicProps","var","_templateObject8","dynamicItems","_templateObject9","try","callValidateCode","e","ValidationError","throw","callAsyncRef","result","id_1","ref_1","core","DiscrError","ruleType","validateFormats","fmts","formats","fDef","fType","format","or","strictSchema","callFormat","_templateObject0","validData","_templateObject1","_templateObject10","invalidFmt","validate$DataFormat","formatDef","logger","warn","unknownMsg","unknownFormat","fmtType","fmtRef","fmtDef","regexpCode","_templateObject11","fmt","_templateObject12","getFormat","pass","async","_templateObject13","_templateObject14","_templateObject15","validCondition","validateFormat","ucs2length","value","pos","charCodeAt","super","ajv","validation","validate_1","enumerable","get","KeywordCxt","CodeGen","validation_error_1","rules_1","codegen_2","resolve_1","dataType_1","$dataRefSchema","uri_1","defaultRegExp","META_IGNORE_OPTIONS","EXT_SCOPE_NAMES","removedOptions","errorDataPath","nullable","jsonPointers","extendRefs","missingRefs","processCode","sourceCode","strictDefaults","strictKeywords","uniqueItems","unknownFormats","cache","serialize","ajvErrors","deprecatedOptions","ignoreKeywordsWithRef","unicode","Ajv","schemas","refs","_compilations","_loading","_cache","Map","_objectSpread","o","strict","_optz","optimize","regExp","_c","_b","_d","_f","_e","strictNumbers","_h","_g","strictTypes","_k","_j","_m","_l","strictRequired","_p","_o","loopRequired","_q","loopEnum","_r","meta","_s","messages","_t","inlineRefs","_u","schemaId","_v","addUsedSchema","_w","validateSchema","_x","_y","unicodeRegExp","_z","int32range","_0","requiredOptions","es5","lines","scope","ValueScope","prefixes","noLogs","console","log","getLogger","formatOpt","getRules","checkOptions","_metaOpts","getMetaSchemaOptions","addInitialFormats","_addVocabularies","_addDefaultMetaSchema","keywords","addInitialKeywords","addMetaSchema","addInitialSchemas","addKeyword","_dataRefSchema","id","$id","defaultMeta","schemaKeyRef","getSchema","compile","_meta","_addSchema","_compileSchemaEnv","compileAsync","loadSchema","runCompileAsync","_schema","loadMetaSchema","$schema","_compileAsync","checkLoaded","loadMissingSchema","missingSchema","missingRef","_loadSchema","addSchema","p","_validateSchema","normalizeId","_checkUnique","throwOrLogError","errorsText","keyRef","getSchEnv","resolveSchema","removeSchema","_removeAllSchemas","clear","delete","cacheKey","addVocabulary","definitions","kwdOrDef","checkKeyword","eachItem","addRule","keywordMetaschema","getJSONTypes","k","t","getKeyword","all","removeKeyword","findIndex","splice","addFormat","separator","dataVar","map","instancePath","reduce","text","$dataMetaSchema","metaSchema","keywordsJsonPointers","JSON","parse","jsonPointer","segments","split","seg","schemaOrData","regex","test","jtd","localRefs","getSchemaRefs","set","startsWith","_compileMetaSchema","compileSchema","currentOpts","checkOpts","options","opt","optsSchemas","defs","metaOpts","MissingRefError","KEYWORD_NAME","dataType","post","ruleGroup","find","addBeforeRule","_rule","$dataRef","anyOf","ucs2length_1","comp","op","useFunc","freeze","defineProperties","raw","__esModule","dynamicAnchors","_sch","getCompilingSchema","rootId","getFullPath","ownProperties","_ValidationError","scopeName","schemaCxt","add","validateFunctionCode","validateCode","scopeRefs","process","Function","makeValidate","scopeValues","_values","inlineOrCompile","inlineRef","schEnv","sameSchemaEnv","s1","s2","resolve","refPath","_getFullPath","getJsonPointer","schOrRef","schId","resolveUrl","schOrFunc","PREVENT_SCOPE_CHANGE","parsedRef","part","partSchema","unescapeFragment","has","schemaHasRulesButRef","jsonTypes","x","groups","number","string","array","object","integer","boolean","null","ValueError","UsedValueState","Scope","parent","_names","_prefixes","_parent","toName","nameOrPrefix","prefix","_newName","ng","_nameGroup","index","ValueScopeName","nameStr","setValue","property","itemIndex","scopePath","line","_scope","_n","valueKey","vs","_name","getValue","keyOrRef","values","_reduceValues","scopeCode","usedValues","getCode","valueCode","nameSet","Started","varKinds","Completed","scope_1","code_2","strConcat","scope_2","_Code","EQ","NEQ","NOT","OR","AND","ADD","Node","optimizeNodes","optimizeNames","_constants","Def","varKind","rhs","render","names","constants","optimizeExpr","_CodeOrName","Assign","lhs","sideEffects","addExprNames","AssignOp","Label","label","_ref4","Break","_ref5","Throw","_ref6","AnyCode","_ref7","ParentNode","nodes","n","subtractNames","addNames","BlockNode","Root","Else","kind","If","else","cond","ns","not","For","ForLoop","iteration","ForRange","from","to","ForIter","loop","iterable","Func","args","_async","Return","Try","catch","finally","Catch","Finally","expr","replaceName","_items","par","extScope","_blockStarts","_extScope","_nodes","_root","prefixOrName","getScopeValue","_def","constant","_leafNode","_constant","_len","keyValues","_key","addCodeArg","thenBody","elseBody","_blockNode","endIf","elseIf","_elseNode","_endBlockNode","_for","node","forBody","endFor","for","forRange","forOf","arr","forIn","obj","break","return","tryBody","catchCode","finallyCode","_currNode","block","body","nodeCount","endBlock","toClose","funcBody","endFunc","N1","N2","andCode","mappend","_len2","_key2","orCode","y","_len3","_key3","errors_1","modifyData","useKeyword","macroSchema","macro","schemaRef","checkAsyncKeyword","validateRef","assignValid","_await","passSchema","modifying","reportErrs","block$data","ruleErrs","validateAsync","validateErrs","validateSync","extendErrors","addErrs","allowUndefined","st","includes","deps","dependencies","util_2","hasPropFunc","isOwnProperty","noPropertyInData","allSchemaProperties","schemaMap","filter","setParams","missingProperty","missing","and","context","dataAndSchema","valCxt","rootData","dynamicRef","newRegExp","pattern","u","rx","validArr","validateItems","notValid","Type","Num","schValid","mergeValidEvaluated","reset","validateAdditionalItems","UUID_REG","URN_REG","isSecure","wsComponents","secure","toLowerCase","httpParse","httpSerialize","http","domainHost","ws","resourceName","SCHEMES","https","wss","urn","urnComponents","nid","nss","urnScheme","schemeHandler","uriComponents","skipEscape","skipNormalize","uuidComponents","uuid","tolerant","traverse","SIMPLE_INLINED","limit","hasRef","countKeys","REF_KEYWORDS","count","Infinity","resolver","TRAILING_SLASH_HASH","ANCHOR","baseIds","pathPrefix","schemaRefs","allKeys","jsonPtr","parentJsonPtr","fullPath","innerBaseId","addRef","_resolve","ambiguos","checkAmbiguosRef","addAnchor","anchor","$anchor","$dynamicAnchor","sch1","sch2","additionalItems_1","prefixItems_1","items_1","items2020_1","contains_1","dependencies_1","propertyNames_1","additionalProperties_1","properties_1","patternProperties_1","not_1","anyOf_1","oneOf_1","allOf_1","if_1","thenElse_1","draft2020","applicator","addError","errObj","err","returnErrors","_templateObject16","_templateObject17","keywordError","errorPaths","overrideAllErrors","errorObjectCode","errsCount","schemaValue","verbose","E","_templateObject18","errorInstancePath","errorSchemaPath","_ref8","_templateObject22","_templateObject23","extraErrorProps","errorObject","instPath","_templateObject19","Str","schPath","_templateObject20","_templateObject21","boolError","falseSchemaError","reportError","equal_1","j","itemTypes","getSchemaTypes","loopN","item","wrongType","checkDataTypes","DataType","Wrong","indices","loopN2","eql","outer","A","B","C","d","D","f","F","prefixItems","trackErrors","min","max","minContains","maxContains","next","validateItemsWithCount","checkLimits","_valid","depsCount","property_ies","propDeps","schDeps","propertyDeps","schemaDeps","splitDependencies","validatePropertyDeps","validateSchemaDeps","hasProperty","propertyInData","depProp","checkReportMissingProp","checkMissingProp","reportMissingProp","boolSchema_1","applicability_1","dataType_2","defaults_1","keyword_1","subschema_1","validateFunction","funcSourceUrl","destructureValCxtES5","destructureValCxt","subschemaCode","isSchemaObj","checkKeywords","schemaCxtHasRules","$comment","commentKeyword","updateContext","checkAsyncSchema","typeAndKeywords","subSchemaObjCode","boolOrEmptySchema","checkUnknownRules","checkRefsAndKeywords","schemaKeywords","coerceAndCheckDataType","_templateObject24","typeErrors","groupKeywords","checkDataType","iterateKeywords","reportTypeError","_templateObject31","includesType","strictTypesError","withTypes","ts","narrowSchemaTypes","checkContextTypes","allowUnionTypes","checkMultipleTypes","hasApplicableType","checkKeywordTypes","checkStrictTypes","keywordCode","assignDefaults","schTs","kwdT","checkNoDefault","resetEvaluated","_templateObject25","_templateObject26","_templateObject27","_templateObject29","_templateObject30","assignEvaluated","_templateObject28","returnResults","topSchemaObjCode","topBoolOrEmptySchema","validateKeywordUsage","schemaRefOrVal","getData","validSchemaType","successAction","failAction","failResult","_templateObject32","invalid$data","append","errorParams","_error","reportExtraError","$dataError","keyword$DataError","resetErrorsCount","codeBlock","$dataValid","check$data","_templateObject33","_templateObject34","wrong$DataType","validateSchemaRef","_templateObject35","invalid$DataSchema","appl","getSubschema","extendSubschemaData","extendSubschemaMode","nextContext","funcKeywordCode","macroKeywordCode","JSON_POINTER","RELATIVE_JSON_POINTER","exec","up","errorMsg","segment","_templateObject36","unescapeJsonPointer","_templateObject37","pointerType","IDENTIFIER","emptyStr","_str","strs","plus","safeStringify","res","mergeExprItems","arg","c1","c2","useLoop","getEql","vSchema","equalCode","every","isJSONType","coerceTo","coerceTypes","COERCIBLE","coerceToTypes","checkTypes","schemaHasRulesForType","coerced","coerceSpecificType","assignParentData","coerceData","strictNums","correct","Correct","numCond","_cond","toHash","notObj","typeError","getTypeErrorContext","removeAdditional","additionalProperties","allProps","hasDefault","applyPropertySchema","uri","core_1","draft7_1","discriminator_1","draft7MetaSchema","META_SUPPORT_DATA","META_SCHEMA_ID","discriminator","defineProperty","cb","_traverse","pre","rootSchema","parentKeyword","keyIndex","arrayKeywords","propsKeywords","escapeJsonPtr","skipKeywords","additionalItems","contains","propertyNames","then","allOf","oneOf","$defs","patternProperties","enum","required","multipleOf","maxLength","minLength","maxProperties","minProperties","additionalProperty","patProps","deleteAdditional","additionalPropertyCode","applyAdditionalSchema","definedProp","propsSchema","usePattern","isAdditional","validateUnion","resolveComponents","base","relative","skipNormalization","target","charAt","lastIndexOf","cmpts","reference","authority","absolutePath","hexLookUp","fromCharCode","URI_PARSE","parsed","gotEncoding","indexOf","isIP","parseInt","isNaN","ipv4result","ipv6result","unicodeSupport","nonSimpleDomain","URL","domainToASCII","encodeURI","decodeURIComponent","fastUri","normalize","baseURI","relativeURI","schemelessOptions","uriA","uriB","loopAllRequired","allErrorsMode","loopUntilMissing","exitOnErrorMode","requiredKey","patterns","alwaysValidPatterns","checkProperties","allowMatchingProperties","evaluatedPropsToName","checkMatchingProperties","pat","validateProperties","alwaysValid","validatePatternProperties","prec","multipleOfPrecision","invalid","schemaHasRules","escapeJsonPointer","makeMergeEvaluated","mergeNames","mergeToName","mergeValues","resultToName","ps","setEvaluated","hash","encodeURIComponent","xs","Math","snippets","mode","isNumber","types_1","discrError","tagName","Tag","tag","mapping","applyTagSchema","oneOfMapping","topRequired","hasRequired","tagRequired","propSch","addMappings","addMapping","tagValue","getMapping","Mapping","validateMapping","json","jsonPos","jsonLen","jsonPart","limitNumber_1","multipleOf_1","limitLength_1","pattern_1","limitProperties_1","required_1","limitItems_1","uniqueItems_1","const_1","enum_1","ifClause","hasThen","hasSchema","hasElse","validateIf","validateClause","passing","validation_1","applicator_1","format_1","metadata_1","draft7Vocabularies","metadataVocabulary","contentVocabulary"],"sourceRoot":""}