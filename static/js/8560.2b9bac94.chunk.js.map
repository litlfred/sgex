{"version":3,"file":"static/js/8560.2b9bac94.chunk.js","mappings":"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","sources":["dak/faq/questions/asset/decisionSupportLogic/DecisionTableInputsQuestion.js"],"sourcesContent":["/**\n * Decision Table Inputs Question Component\n * Analyzes DMN files and extracts input requirements for decision tables\n */\n\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { QuestionDefinition, QuestionResult, CacheHint, QuestionLevel, ParameterDefinition } from '../../../types/QuestionDefinition.js';\n\n// Use browser DOMParser when available\nconst getDOMParser = () => {\n  if (typeof DOMParser !== 'undefined') {\n    return DOMParser;\n  } else {\n    throw new Error('DOMParser not available (browser environment required for DMN parsing)');\n  }\n};\n\n// Question metadata\nexport const metadata = new QuestionDefinition({\n  id: 'decision-table-inputs',\n  level: QuestionLevel.ASSET,\n  title: 'Decision Table Inputs',\n  description: 'What are the inputs required for this decision table?',\n  parameters: [\n    new ParameterDefinition({\n      name: 'assetFile',\n      type: 'string',\n      required: true,\n      description: 'Path to the DMN file to analyze'\n    })\n  ],\n  tags: ['asset', 'decision-support', 'dmn', 'inputs'],\n  version: '1.0.0',\n  assetTypes: ['dmn'],\n  isTemplate: true\n});\n\n/**\n * Execute the decision table inputs question\n * @param {Object} input - Question input parameters\n * @param {string} input.repository - Repository identifier\n * @param {string} input.locale - Locale for response\n * @param {string} input.branch - Git branch\n * @param {string} input.assetFile - Path to the DMN file\n * @param {Storage} input.storage - Storage interface\n * @returns {Promise<QuestionResult>} - Question result\n */\nexport async function execute(input) {\n  const { locale = 'en_US', assetFile, storage } = input;\n  const warnings = [];\n  const errors = [];\n\n  try {\n    // Check if the DMN file exists\n    const fileExists = await storage.fileExists(assetFile);\n    if (!fileExists) {\n      return new QuestionResult({\n        structured: { \n          inputs: [],\n          decisionTables: [],\n          fileName: assetFile\n        },\n        narrative: getLocalizedNarrative(locale, 'file_not_found', { fileName: assetFile }),\n        errors: [getLocalizedError(locale, 'file_not_found', { fileName: assetFile })],\n        meta: {\n          cacheHint: new CacheHint({\n            scope: 'file',\n            key: `decision-table-inputs-${assetFile}`,\n            ttl: 3600,\n            dependencies: [assetFile]\n          })\n        }\n      });\n    }\n\n    // Read and parse the DMN file\n    const dmnContent = await storage.readFile(assetFile);\n    const analysisResult = await analyzeDmnInputs(dmnContent.toString('utf-8'), assetFile);\n\n    if (analysisResult.inputs.length === 0) {\n      warnings.push(getLocalizedError(locale, 'no_inputs_found', { fileName: assetFile }));\n    }\n\n    return new QuestionResult({\n      structured: analysisResult,\n      narrative: getLocalizedNarrative(locale, 'success', analysisResult),\n      warnings,\n      errors,\n      meta: {\n        cacheHint: new CacheHint({\n          scope: 'file',\n          key: `decision-table-inputs-${assetFile}`,\n          ttl: 1800, // 30 minutes\n          dependencies: [assetFile]\n        })\n      }\n    });\n\n  } catch (error) {\n    return new QuestionResult({\n      structured: { \n        inputs: [],\n        decisionTables: [],\n        fileName: assetFile,\n        error: error.message\n      },\n      narrative: getLocalizedNarrative(locale, 'error', { fileName: assetFile }),\n      errors: [getLocalizedError(locale, 'parse_error', { fileName: assetFile, error: error.message })],\n      meta: {\n        cacheHint: new CacheHint({\n          scope: 'file',\n          key: `decision-table-inputs-${assetFile}`,\n          ttl: 60, // Short cache on error\n          dependencies: [assetFile]\n        })\n      }\n    });\n  }\n}\n\n/**\n * Analyze DMN file and extract input requirements\n * @param {string} dmnContent - DMN XML content\n * @param {string} fileName - File name for reference\n * @returns {Object} - Analysis result with inputs and decision tables\n */\nasync function analyzeDmnInputs(dmnContent, fileName) {\n  try {\n    const DOMParserClass = getDOMParser();\n    const parser = new DOMParserClass();\n    const doc = parser.parseFromString(dmnContent, 'text/xml');\n    \n    // Check for parsing errors\n    const parseError = doc.getElementsByTagName('parsererror')[0];\n    if (parseError) {\n      throw new Error(`XML parsing error: ${parseError.textContent}`);\n    }\n\n    const result = {\n      fileName,\n      inputs: [],\n      decisionTables: [],\n      decisions: [],\n      totalInputs: 0\n    };\n\n    // Find all decision elements\n    const decisions = doc.getElementsByTagNameNS('*', 'decision') || doc.getElementsByTagName('decision');\n    \n    for (let i = 0; i < decisions.length; i++) {\n      const decision = decisions[i];\n      const decisionInfo = {\n        id: decision.getAttribute('id'),\n        name: decision.getAttribute('name') || decision.getAttribute('label'),\n        question: null,\n        inputs: []\n      };\n\n      // Extract question from decision element\n      const questionElements = decision.getElementsByTagNameNS('*', 'question') || decision.getElementsByTagName('question');\n      if (questionElements.length > 0) {\n        decisionInfo.question = questionElements[0].textContent.trim();\n      }\n\n      result.decisions.push(decisionInfo);\n\n      // Find decision tables within this decision\n      const decisionTables = decision.getElementsByTagNameNS('*', 'decisionTable') || decision.getElementsByTagName('decisionTable');\n      \n      for (let j = 0; j < decisionTables.length; j++) {\n        const decisionTable = decisionTables[j];\n        const tableInfo = {\n          id: decisionTable.getAttribute('id'),\n          hitPolicy: decisionTable.getAttribute('hitPolicy') || 'UNIQUE',\n          aggregation: decisionTable.getAttribute('aggregation'),\n          decisionId: decisionInfo.id,\n          decisionName: decisionInfo.name,\n          inputs: [],\n          outputs: []\n        };\n\n        // Extract input columns\n        const inputs = decisionTable.getElementsByTagNameNS('*', 'input') || decisionTable.getElementsByTagName('input');\n        \n        for (let k = 0; k < inputs.length; k++) {\n          const input = inputs[k];\n          const inputInfo = {\n            id: input.getAttribute('id'),\n            label: input.getAttribute('label'),\n            typeRef: null,\n            expression: null,\n            description: null\n          };\n\n          // Get input expression\n          const inputExpressions = input.getElementsByTagNameNS('*', 'inputExpression') || input.getElementsByTagName('inputExpression');\n          if (inputExpressions.length > 0) {\n            const inputExpression = inputExpressions[0];\n            inputInfo.typeRef = inputExpression.getAttribute('typeRef');\n            \n            // Get the text content of the input expression\n            const textElements = inputExpression.getElementsByTagNameNS('*', 'text') || inputExpression.getElementsByTagName('text');\n            if (textElements.length > 0) {\n              inputInfo.expression = textElements[0].textContent.trim();\n            }\n          }\n\n          // Look for description in input expression\n          if (inputExpressions.length > 0) {\n            const descriptions = inputExpressions[0].getElementsByTagNameNS('*', 'description') || \n                               inputExpressions[0].getElementsByTagName('description');\n            if (descriptions.length > 0) {\n              inputInfo.description = descriptions[0].textContent.trim();\n            }\n          }\n\n          tableInfo.inputs.push(inputInfo);\n          \n          // Add to global inputs list if not already present\n          const existingInput = result.inputs.find(i => \n            i.label === inputInfo.label || \n            i.expression === inputInfo.expression\n          );\n          \n          if (!existingInput) {\n            result.inputs.push({\n              ...inputInfo,\n              usedInTables: [tableInfo.id || tableInfo.decisionId],\n              usedInDecisions: [decisionInfo.id]\n            });\n          } else {\n            // Add reference to this table/decision\n            if (!existingInput.usedInTables.includes(tableInfo.id || tableInfo.decisionId)) {\n              existingInput.usedInTables.push(tableInfo.id || tableInfo.decisionId);\n            }\n            if (!existingInput.usedInDecisions.includes(decisionInfo.id)) {\n              existingInput.usedInDecisions.push(decisionInfo.id);\n            }\n          }\n        }\n\n        // Extract output columns for completeness\n        const outputs = decisionTable.getElementsByTagNameNS('*', 'output') || decisionTable.getElementsByTagName('output');\n        \n        for (let k = 0; k < outputs.length; k++) {\n          const output = outputs[k];\n          const outputInfo = {\n            id: output.getAttribute('id'),\n            label: output.getAttribute('label'),\n            typeRef: output.getAttribute('typeRef'),\n            description: null\n          };\n\n          // Look for description\n          const descriptions = output.getElementsByTagNameNS('*', 'description') || output.getElementsByTagName('description');\n          if (descriptions.length > 0) {\n            outputInfo.description = descriptions[0].textContent.trim();\n          }\n\n          tableInfo.outputs.push(outputInfo);\n        }\n\n        result.decisionTables.push(tableInfo);\n      }\n    }\n\n    result.totalInputs = result.inputs.length;\n    \n    return result;\n\n  } catch (error) {\n    throw new Error(`Failed to parse DMN file ${fileName}: ${error.message}`);\n  }\n}\n\n/**\n * React component for rendering decision table inputs narrative\n */\nexport function Render({ result, locale = 'en_US' }) {\n  const { t } = useTranslation();\n\n  if (!result || !result.structured) {\n    return <div className=\"faq-answer error\">{t('dak.faq.decision_inputs.no_data')}</div>;\n  }\n\n  const { inputs, decisionTables, decisions, fileName, totalInputs } = result.structured;\n\n  if (inputs.length === 0) {\n    return (\n      <div className=\"faq-answer warning\">\n        <h4>{t('dak.faq.decision_inputs.title')}</h4>\n        <p>No inputs found in <code>{fileName}</code></p>\n        {result.errors?.map((error, index) => (\n          <div key={index} className=\"error-message\">{error}</div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"faq-answer success\">\n      <h4>{t('dak.faq.decision_inputs.title')}</h4>\n      \n      <div className=\"decision-summary\">\n        <p>\n          <strong>File: </strong><code>{fileName}</code>\n        </p>\n        <p>\n          <strong>Total Inputs Required: </strong><span className=\"highlight\">{totalInputs}</span>\n        </p>\n        <p>\n          <strong>Decision Tables: </strong>{decisionTables.length}\n        </p>\n        <p>\n          <strong>Decisions: </strong>{decisions.length}\n        </p>\n      </div>\n\n      <div className=\"inputs-list\">\n        <h5>Required Inputs</h5>\n        {inputs.map((input, index) => (\n          <div key={index} className=\"input-item\">\n            <div className=\"input-header\">\n              <strong>{input.label || input.id}</strong>\n              {input.typeRef && <span className=\"type-ref\">({input.typeRef})</span>}\n            </div>\n            \n            {input.expression && (\n              <div className=\"input-expression\">\n                <strong>Expression: </strong>\n                <code>{input.expression}</code>\n              </div>\n            )}\n            \n            {input.description && (\n              <div className=\"input-description\">\n                <strong>Description: </strong>\n                {input.description}\n              </div>\n            )}\n            \n            <div className=\"input-usage\">\n              <strong>Used in: </strong>\n              {input.usedInDecisions.length} decision(s), {input.usedInTables.length} table(s)\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {decisionTables.length > 0 && (\n        <div className=\"decision-tables-list\">\n          <h5>Decision Tables</h5>\n          {decisionTables.map((table, index) => (\n            <div key={index} className=\"table-item\">\n              <div className=\"table-header\">\n                <strong>{table.decisionName || table.decisionId}</strong>\n                <span className=\"hit-policy\">Hit Policy: {table.hitPolicy}</span>\n              </div>\n              \n              <div className=\"table-details\">\n                <div className=\"table-inputs\">\n                  <strong>Inputs ({table.inputs.length}): </strong>\n                  {table.inputs.map(input => input.label || input.id).join(', ')}\n                </div>\n                \n                <div className=\"table-outputs\">\n                  <strong>Outputs ({table.outputs.length}): </strong>\n                  {table.outputs.map(output => output.label || output.id).join(', ')}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {result.warnings?.map((warning, index) => (\n        <div key={index} className=\"warning-message\">{warning}</div>\n      ))}\n      \n      {result.errors?.map((error, index) => (\n        <div key={index} className=\"error-message\">{error}</div>\n      ))}\n    </div>\n  );\n}\n\n/**\n * Get localized narrative text\n */\nfunction getLocalizedNarrative(locale, type, params = {}) {\n  const narratives = {\n    en_US: {\n      success: (() => {\n        const { inputs, decisionTables, fileName, totalInputs } = params;\n        let html = `<h4>Decision Table Inputs</h4>`;\n        html += `<p>Analysis of <strong>${fileName}</strong>:</p>`;\n        \n        if (totalInputs === 0) {\n          html += `<p class=\"warning\">No inputs found in this decision table.</p>`;\n        } else {\n          html += `<p>This decision table requires <strong>${totalInputs}</strong> input(s):</p>`;\n          html += `<ul>`;\n          inputs.forEach(input => {\n            html += `<li><strong>${input.label || input.id}</strong>`;\n            if (input.typeRef) html += ` (${input.typeRef})`;\n            if (input.expression) html += ` - <code>${input.expression}</code>`;\n            html += `</li>`;\n          });\n          html += `</ul>`;\n          \n          if (decisionTables.length > 1) {\n            html += `<p>Found ${decisionTables.length} decision tables in this file.</p>`;\n          }\n        }\n        \n        return html;\n      })(),\n      file_not_found: `<h4>Decision Table Inputs</h4><p class=\"error\">The DMN file <code>${params.fileName}</code> was not found.</p>`,\n      error: `<h4>Decision Table Inputs</h4><p class=\"error\">An error occurred while analyzing the DMN file <code>${params.fileName}</code>.</p>`\n    },\n    fr_FR: {\n      success: (() => {\n        const { inputs, decisionTables, fileName, totalInputs } = params;\n        let html = `<h4>Entrées de table de décision</h4>`;\n        html += `<p>Analyse de <strong>${fileName}</strong>:</p>`;\n        \n        if (totalInputs === 0) {\n          html += `<p class=\"warning\">Aucune entrée trouvée dans cette table de décision.</p>`;\n        } else {\n          html += `<p>Cette table de décision nécessite <strong>${totalInputs}</strong> entrée(s):</p>`;\n          html += `<ul>`;\n          inputs.forEach(input => {\n            html += `<li><strong>${input.label || input.id}</strong>`;\n            if (input.typeRef) html += ` (${input.typeRef})`;\n            if (input.expression) html += ` - <code>${input.expression}</code>`;\n            html += `</li>`;\n          });\n          html += `</ul>`;\n          \n          if (decisionTables.length > 1) {\n            html += `<p>Trouvé ${decisionTables.length} tables de décision dans ce fichier.</p>`;\n          }\n        }\n        \n        return html;\n      })(),\n      file_not_found: `<h4>Entrées de table de décision</h4><p class=\"error\">Le fichier DMN <code>${params.fileName}</code> n'a pas été trouvé.</p>`,\n      error: `<h4>Entrées de table de décision</h4><p class=\"error\">Une erreur s'est produite lors de l'analyse du fichier DMN <code>${params.fileName}</code>.</p>`\n    },\n    es_ES: {\n      success: (() => {\n        const { inputs, decisionTables, fileName, totalInputs } = params;\n        let html = `<h4>Entradas de tabla de decisión</h4>`;\n        html += `<p>Análisis de <strong>${fileName}</strong>:</p>`;\n        \n        if (totalInputs === 0) {\n          html += `<p class=\"warning\">No se encontraron entradas en esta tabla de decisión.</p>`;\n        } else {\n          html += `<p>Esta tabla de decisión requiere <strong>${totalInputs}</strong> entrada(s):</p>`;\n          html += `<ul>`;\n          inputs.forEach(input => {\n            html += `<li><strong>${input.label || input.id}</strong>`;\n            if (input.typeRef) html += ` (${input.typeRef})`;\n            if (input.expression) html += ` - <code>${input.expression}</code>`;\n            html += `</li>`;\n          });\n          html += `</ul>`;\n          \n          if (decisionTables.length > 1) {\n            html += `<p>Se encontraron ${decisionTables.length} tablas de decisión en este archivo.</p>`;\n          }\n        }\n        \n        return html;\n      })(),\n      file_not_found: `<h4>Entradas de tabla de decisión</h4><p class=\"error\">El archivo DMN <code>${params.fileName}</code> no se encontró.</p>`,\n      error: `<h4>Entradas de tabla de decisión</h4><p class=\"error\">Ocurrió un error al analizar el archivo DMN <code>${params.fileName}</code>.</p>`\n    }\n  };\n\n  const localeData = narratives[locale] || narratives['en_US'];\n  return localeData[type] || localeData.error;\n}\n\n/**\n * Get localized error message\n */\nfunction getLocalizedError(locale, type, params = {}) {\n  const errors = {\n    en_US: {\n      file_not_found: `DMN file not found: ${params.fileName}`,\n      no_inputs_found: `No inputs found in DMN file: ${params.fileName}`,\n      parse_error: `Failed to parse DMN file ${params.fileName}: ${params.error}`\n    },\n    fr_FR: {\n      file_not_found: `Fichier DMN non trouvé: ${params.fileName}`,\n      no_inputs_found: `Aucune entrée trouvée dans le fichier DMN: ${params.fileName}`,\n      parse_error: `Échec de l'analyse du fichier DMN ${params.fileName}: ${params.error}`\n    },\n    es_ES: {\n      file_not_found: `Archivo DMN no encontrado: ${params.fileName}`,\n      no_inputs_found: `No se encontraron entradas en el archivo DMN: ${params.fileName}`,\n      parse_error: `Error al analizar el archivo DMN ${params.fileName}: ${params.error}`\n    }\n  };\n\n  const localeData = errors[locale] || errors['en_US'];\n  return localeData[type] || `Unknown error: ${type}`;\n}"],"names":["getDOMParser","DOMParser","Error","metadata","QuestionDefinition","id","level","QuestionLevel","ASSET","title","description","parameters","ParameterDefinition","name","type","required","tags","version","assetTypes","isTemplate","async","execute","input","locale","assetFile","storage","warnings","errors","fileExists","QuestionResult","structured","inputs","decisionTables","fileName","narrative","getLocalizedNarrative","getLocalizedError","meta","cacheHint","CacheHint","scope","key","concat","ttl","dependencies","dmnContent","readFile","analysisResult","DOMParserClass","doc","parseFromString","parseError","getElementsByTagName","textContent","result","decisions","totalInputs","getElementsByTagNameNS","i","length","decision","decisionInfo","getAttribute","question","questionElements","trim","push","j","decisionTable","tableInfo","hitPolicy","aggregation","decisionId","decisionName","outputs","k","inputInfo","label","typeRef","expression","inputExpressions","inputExpression","textElements","descriptions","existingInput","find","usedInTables","includes","usedInDecisions","_objectSpread","output","outputInfo","error","message","analyzeDmnInputs","toString","Render","_ref","_result$warnings","_result$errors2","t","useTranslation","_jsx","className","children","_result$errors","_jsxs","map","index","table","join","warning","params","arguments","undefined","narratives","en_US","success","html","forEach","file_not_found","fr_FR","es_ES","localeData","no_inputs_found","parse_error"],"sourceRoot":""}