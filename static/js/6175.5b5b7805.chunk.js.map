{"version":3,"file":"static/js/6175.5b5b7805.chunk.js","mappings":"sKAUA,MA+HA,EA/HsBA,IAAoC,IAAnC,OAAEC,EAAM,QAAEC,EAAO,SAAEC,GAAUH,EAClD,MAAMI,EAAkBC,EAAAA,EAAOC,UAAU,iBAgBzC,IAdAC,EAAAA,EAAAA,WAAU,KACJN,GAAUE,GACZC,EAAgBI,eAAe,CAC7BC,aAAcN,EAASM,aACvBC,WAAYP,EAASO,aAGlB,KACDT,GACFG,EAAgBO,qBAGnB,CAACP,EAAiBH,EAAQE,KAExBF,IAAWE,EACd,OAAO,KAGT,MAAM,aAAEM,EAAY,WAAEC,EAAU,iBAAEE,GAAqBT,EAkBjDU,EAAcA,KAClBT,EAAgBU,WAAW,oBAAqB,CAAEL,iBAClDP,KAGF,OACEa,EAAAA,EAAAA,KAAA,OACEC,UAAU,qBACVC,QAASJ,EACTK,KAAK,SACL,aAAW,OACX,kBAAgB,mBAAkBC,UAElCC,EAAAA,EAAAA,MAAA,OACEJ,UAAU,aACVC,QAAUI,GAAMA,EAAEC,kBAClBJ,KAAK,WAAUC,SAAA,EAEfC,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,oBAAmBG,SAAA,EAChCJ,EAAAA,EAAAA,KAAA,MAAIQ,GAAG,mBAAkBJ,SAAC,kDAC1BJ,EAAAA,EAAAA,KAAA,UACEE,QAASJ,EACTG,UAAU,eACV,aAAW,QAAOG,SACnB,aAKHC,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,qBAAoBG,SAAA,EACjCC,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,oBAAmBG,SAAA,EAChCJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWG,UACxBJ,EAAAA,EAAAA,KAAA,QAAMG,KAAK,MAAM,aAAW,OAAMC,SAAC,oBAGrCJ,EAAAA,EAAAA,KAAA,MAAAI,SAAI,kCACJC,EAAAA,EAAAA,MAAA,KAAGJ,UAAU,mBAAkBG,SAAA,CAAC,wEACwC,KACtEJ,EAAAA,EAAAA,KAAA,UAAAI,SAASV,IAAsB,gBAAcC,EAAU,YAAAc,OAAed,EAAU,eAAgB,GAAG,WAIvGU,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,qBAAoBG,SAAA,EACjCJ,EAAAA,EAAAA,KAAA,MAAAI,SAAI,kCACJC,EAAAA,EAAAA,MAAA,MAAIJ,UAAU,aAAYG,SAAA,EACxBC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,gCAAoC,4CAE9CC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,2BAA+B,qCAEzCC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,sBAA0B,kCAEpCC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,wBAA4B,kDAK1CC,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,YAAWG,SAAA,EACxBJ,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWG,SAAC,kBAC5BJ,EAAAA,EAAAA,KAAA,KAAAI,SAAG,wIAMLC,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,qBAAoBG,SAAA,EACjCJ,EAAAA,EAAAA,KAAA,UACEE,QAtFYQ,KACtBrB,EAAgBU,WAAW,yBAA0B,CACnDL,eACAG,qBAIFc,OAAOC,KAAKf,EAAkB,SAAU,uBAGxCR,EAAgBwB,KAAK,iCAAkC,CACrDnB,eACAoB,YAAa,gEA2ELb,UAAU,qBAAoBG,SAC/B,sCAGDJ,EAAAA,EAAAA,KAAA,UACEE,QAASJ,EACTG,UAAU,kBAAiBG,SAC5B,qB,6KCrHb,MAwTA,EAxT0BW,KACxB,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,OACPC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC1BC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,KAC5CG,EAAiBC,IAAsBJ,EAAAA,EAAAA,WAAS,IAChDK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,IAChCO,EAAOC,IAAYR,EAAAA,EAAAA,UAAS,OAC5BS,EAAWC,IAAgBV,EAAAA,EAAAA,UAAS,CAAC,IACrCW,EAAgBC,IAAqBZ,EAAAA,EAAAA,UAAS,OAC9Ca,EAAeC,IAAoBd,EAAAA,EAAAA,WAAS,IAC5Ce,EAAeC,IAAoBhB,EAAAA,EAAAA,UAAS,MAE7CiB,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAGXC,GAAsBC,EAAAA,EAAAA,aAAY,CAACC,EAAUC,KACjD,IAAKC,EAAAA,EAAcC,SACjB,OAGF,MAAMC,EAAS,CAAC,EAGhB,GAAIJ,EAAU,CACZ,MAAMK,EAAYC,EAAAA,EAAuBC,sBAAsBP,EAASQ,MAAO,QAC3EH,GAAaA,EAAUI,eACzBL,EAAO,QAADtC,OAASkC,EAASQ,QAAWH,EAAUI,aAAaC,OAE9D,CAGAT,EAASU,QAAQC,IACf,MAAMC,EAAWP,EAAAA,EAAuBC,sBAAsBK,EAAIJ,MAAO,OACrEK,GAAYA,EAASJ,eACvBL,EAAO,OAADtC,OAAQ8C,EAAIJ,QAAWK,EAASJ,aAAaC,UAIvDvB,EAAaiB,IACZ,IAEGU,GAAgBf,EAAAA,EAAAA,aAAYgB,UAChChC,GAAW,GACXE,EAAS,MAET,IACE,IAAIe,EAAW,KAEXpB,SAEIsB,EAAAA,EAAcc,wBAGpBhB,QAAiBE,EAAAA,EAAce,iBAC/BzC,EAAQwB,KAGRA,EAAW,KACXxB,EAAQ,OAIV,IAAIyB,EAAW,GAEf,GAAIrB,EACF,IACEqB,QAAiBC,EAAAA,EAAcgB,sBACjC,CAAE,MAAOlC,GACPmC,QAAQnC,MAAM,gCAAiCA,GAC/CiB,EAAW,EACb,CAIF,IACE,MAAMmB,QAAwBlB,EAAAA,EAAcmB,qBAGtCC,EAAWrB,EAASsB,UAAUX,GAAqB,4BAAdA,EAAIJ,OAE3Cc,GAAY,EAEdrB,EAASqB,IAASE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQvB,EAASqB,IAAcF,GAAe,IAAEK,OAAO,IAGzExB,EAASyB,QAAQN,EAErB,CAAE,MAAOO,GACPR,QAAQS,KAAK,yDAA0DD,GAGvE,MAAMP,EAAkB,CACtBvD,GAAI,mBACJ2C,MAAO,0BACPqB,KAAM,4BACNC,YAAa,2HACbC,WAAY,6DACZC,SAAU,6CACVC,KAAM,eACNR,OAAO,GAIMxB,EAASiC,KAAKtB,GAAqB,4BAAdA,EAAIJ,OAOtCP,EAAWA,EAASkC,IAAIvB,GACR,4BAAdA,EAAIJ,OAAmCgB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC9BZ,GAAG,IAAEa,OAAO,IACjBb,GANNX,EAASyB,QAAQN,EASrB,CAEAzC,EAAiBsB,GAGbrB,GACFkB,EAAoBE,EAAUC,EAGlC,CAAE,MAAOjB,GACPmC,QAAQnC,MAAM,4BAA6BA,GAEvCJ,GACFK,EAAS,0EACTJ,GAAmB,GACnBqB,EAAAA,EAAckC,UAGdnD,EAAS,iEAEb,CAAC,QACCF,GAAW,EACb,GACC,CAACe,EAAqBlB,KAGzB/B,EAAAA,EAAAA,WAAU,KACewF,MAErB,MAAMC,EAAUpC,EAAAA,EAAcqC,4BAE5B1D,IADEyD,IAQND,IACC,KAGHxF,EAAAA,EAAAA,WAAU,KACR2F,EAAAA,EAAgBC,sBAAuBhG,IACrCgD,EAAiBhD,GACjB8C,GAAiB,MAElB,KAGH1C,EAAAA,EAAAA,WAAU,KAAO,IAAD6F,EACI,QAAlBA,EAAI9C,EAAS+C,aAAK,IAAAD,GAAdA,EAAgBtD,iBAClBC,EAAkBO,EAAS+C,MAAMvD,gBAEjCM,EAASE,EAASgD,SAAU,CAAEC,SAAS,EAAMF,MAAO,CAAC,MAEtD,CAAC/C,EAAS+C,MAAOjD,EAAUE,EAASgD,YAGvC/F,EAAAA,EAAAA,WAAU,KAEH0B,GACHuC,KAED,CAACvC,EAAMuC,IAEV,MAAMgC,EAAsBA,CAACC,EAAOC,KAClC,MAAMC,EAAkB,CAAED,YAC1BE,EAAAA,EAAAA,IAAsBH,EAAM,eAADjF,OAAiBkF,EAAQxC,OAASd,EAAUuD,IAOzE,OACEvF,EAAAA,EAAAA,MAACyF,EAAAA,GAAU,CAACC,SAAS,iBAAgB3F,SAAA,CAClCqB,IAAYP,GACXb,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,kBAAiBG,SAAA,EAC9BJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aACfD,EAAAA,EAAAA,KAAA,KAAAI,SAAG,gCAGLC,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,yBAAwBG,SAAA,CACtC2B,IACC/B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBG,UAC9BC,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,kBAAiBG,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,iBAAgBG,SAAA,EAC7BJ,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcG,SAAC,kBAC/BJ,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcG,SAAE2B,QAElC/B,EAAAA,EAAAA,KAAA,UACEC,UAAU,kBACVC,QAtBe8F,KAC3BhE,EAAkB,OAsBN,aAAW,kBAAiB5B,SAC7B,uBAQLmB,IACAvB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBG,UAClCC,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,sBAAqBG,SAAA,EAClCJ,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mBAAkBG,SAAC,kBACnCJ,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mBAAkBG,SAAC,0JAOxCqB,GACCpB,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,kBAAiBG,SAAA,EAC9BJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aACfD,EAAAA,EAAAA,KAAA,KAAAI,SAAG,gCAGLC,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,oBAAmBG,SAAA,EAChCJ,EAAAA,EAAAA,KAAA,MAAAI,SAAKY,EAAE,0BACPX,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAIY,EAAE,yBAAyB,OAE9BW,IAAS3B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeG,SAAEuB,KAG1CtB,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,0BAAyBG,SAAA,CAErCmB,GAAmBL,IAClBb,EAAAA,EAAAA,MAAA,OACEJ,UAAU,eACVC,QAAUwF,GAAUD,EAAoBC,GAAKvB,EAAAA,EAAAA,GAAA,CAAIS,KAAM,QAAW1D,IAAQd,SAAA,EAE1EC,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,sBAAqBG,SAAA,EAClCJ,EAAAA,EAAAA,KAAA,OAAKiG,IAAS,OAAJ/E,QAAI,IAAJA,OAAI,EAAJA,EAAMwD,WAAYwB,IAAI,qBAC/BrE,EAAU,QAADpB,OAAa,OAAJS,QAAI,IAAJA,OAAI,EAAJA,EAAMiC,QAAW,IAClCnD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBG,SAC7ByB,EAAU,QAADpB,OAAa,OAAJS,QAAI,IAAJA,OAAI,EAAJA,EAAMiC,cAI/BnD,EAAAA,EAAAA,KAAA,MAAAI,UAAS,OAAJc,QAAI,IAAJA,OAAI,EAAJA,EAAMsD,QAAY,OAAJtD,QAAI,IAAJA,OAAI,EAAJA,EAAMiC,UACzBnD,EAAAA,EAAAA,KAAA,KAAAI,SAAG,2BACHJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBG,UAC7BJ,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcG,SAAC,kBAMpCiB,EAAcyD,IAAKvB,IAClBlD,EAAAA,EAAAA,MAAA,OAEEJ,UAAS,gBAAAQ,OAAkB8C,EAAIa,MAAQ,UAAY,IACnDlE,QAAUwF,GAAUD,EAAoBC,GAAKvB,EAAAA,EAAAA,GAAA,CAAIS,KAAM,OAAUrB,IAAOnD,SAAA,EAExEC,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,sBAAqBG,SAAA,EAClCJ,EAAAA,EAAAA,KAAA,OACEiG,IAAK1C,EAAImB,YAAU,sBAAAjE,OAA0B8C,EAAIJ,MAAK,QACtD+C,IAAG,GAAAzF,OAAK8C,EAAIiB,MAAQjB,EAAIJ,MAAK,mBAE9BtB,EAAU,OAADpB,OAAQ8C,EAAIJ,QAAW,IAC/BnD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBG,SAC7ByB,EAAU,OAADpB,OAAQ8C,EAAIJ,cAI5BnD,EAAAA,EAAAA,KAAA,MAAAI,SAAKmD,EAAIiB,MAAQjB,EAAIJ,SACrB9C,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,IAAEmD,EAAIJ,UACT9C,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,iBAAgBG,SAAA,EAC7BJ,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcG,SAAEY,EAAE,gCACjCuC,EAAIa,QAASpE,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWG,SAAC,sBAnBvCmD,EAAIJ,kBA8BrBnD,EAAAA,EAAAA,KAACmG,EAAAA,EAAa,CACZjH,OAAQ+C,EACR9C,QAASA,KACP+C,GAAiB,GACjBE,EAAiB,OAEnBhD,SAAU+C,O","sources":["components/SAMLAuthModal.js","components/SelectProfilePage.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport logger from '../utils/logger';\nimport './SAMLAuthModal.css';\n\n/**\n * SAMLAuthModal Component\n * \n * Modal dialog that guides users through GitHub SAML SSO authorization process.\n * Displayed when a Personal Access Token needs SAML SSO authorization for an organization.\n */\nconst SAMLAuthModal = ({ isOpen, onClose, samlInfo }) => {\n  const componentLogger = logger.getLogger('SAMLAuthModal');\n\n  useEffect(() => {\n    if (isOpen && samlInfo) {\n      componentLogger.componentMount({ \n        organization: samlInfo.organization,\n        repository: samlInfo.repository \n      });\n    }\n    return () => {\n      if (isOpen) {\n        componentLogger.componentUnmount();\n      }\n    };\n  }, [componentLogger, isOpen, samlInfo]);\n\n  if (!isOpen || !samlInfo) {\n    return null;\n  }\n\n  const { organization, repository, authorizationUrl } = samlInfo;\n\n  const handleAuthorize = () => {\n    componentLogger.userAction('Authorize SAML clicked', { \n      organization,\n      authorizationUrl \n    });\n    \n    // Open GitHub SAML authorization page in new tab\n    window.open(authorizationUrl, '_blank', 'noopener,noreferrer');\n    \n    // Log instruction for user\n    componentLogger.info('SAML authorization page opened', {\n      organization,\n      instruction: 'User should authorize their PAT on GitHub and then refresh'\n    });\n  };\n\n  const handleClose = () => {\n    componentLogger.userAction('SAML modal closed', { organization });\n    onClose();\n  };\n\n  return (\n    <div \n      className=\"saml-modal-overlay\" \n      onClick={handleClose}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"saml-modal-title\"\n    >\n      <div \n        className=\"saml-modal\" \n        onClick={(e) => e.stopPropagation()}\n        role=\"document\"\n      >\n        <div className=\"saml-modal-header\">\n          <h2 id=\"saml-modal-title\">üîê SAML SSO Authorization Required</h2>\n          <button \n            onClick={handleClose}\n            className=\"close-button\"\n            aria-label=\"Close\"\n          >\n            √ó\n          </button>\n        </div>\n        \n        <div className=\"saml-modal-content\">\n          <div className=\"saml-info-section\">\n            <div className=\"saml-icon\">\n              <span role=\"img\" aria-label=\"lock\">üîí</span>\n            </div>\n            \n            <h3>Organization Access Required</h3>\n            <p className=\"saml-description\">\n              Your Personal Access Token needs SAML SSO authorization to access the{' '}\n              <strong>{organization}</strong> organization{repository ? ` and the ${repository} repository` : ''}.\n            </p>\n          </div>\n\n          <div className=\"saml-steps-section\">\n            <h4>How to authorize your token:</h4>\n            <ol className=\"saml-steps\">\n              <li>\n                <strong>Click \"Authorize on GitHub\"</strong> below to open the authorization page\n              </li>\n              <li>\n                <strong>Review the permissions</strong> requested by the organization\n              </li>\n              <li>\n                <strong>Click \"Authorize\"</strong> to grant your token access\n              </li>\n              <li>\n                <strong>Return to this page</strong> and refresh or try your action again\n              </li>\n            </ol>\n          </div>\n\n          <div className=\"saml-note\">\n            <span className=\"note-icon\">‚ÑπÔ∏è</span>\n            <p>\n              This is a GitHub security feature for organizations using SAML SSO.\n              You only need to authorize once per organization per token.\n            </p>\n          </div>\n\n          <div className=\"saml-modal-actions\">\n            <button \n              onClick={handleAuthorize}\n              className=\"saml-authorize-btn\"\n            >\n              üîì Authorize on GitHub\n            </button>\n            <button \n              onClick={handleClose}\n              className=\"saml-cancel-btn\"\n            >\n              Later\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SAMLAuthModal;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport githubService from '../services/githubService';\nimport repositoryCacheService from '../services/repositoryCacheService';\nimport samlAuthService from '../services/samlAuthService';\nimport SAMLAuthModal from './SAMLAuthModal';\nimport { PageLayout } from './framework';\nimport { handleNavigationClick } from '../utils/navigationUtils';\n\nconst SelectProfilePage = () => {\n  const { t } = useTranslation();\n  const [user, setUser] = useState(null);\n  const [organizations, setOrganizations] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [dakCounts, setDakCounts] = useState({});\n  const [warningMessage, setWarningMessage] = useState(null);\n  const [samlModalOpen, setSamlModalOpen] = useState(false);\n  const [samlModalInfo, setSamlModalInfo] = useState(null);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Load cached DAK counts without initiating any scanning\n  const loadCachedDakCounts = useCallback((userData, orgsData) => {\n    if (!githubService.isAuth()) {\n      return;\n    }\n\n    const counts = {};\n    \n    // Check cache for user's personal repositories\n    if (userData) {\n      const userCache = repositoryCacheService.getCachedRepositories(userData.login, 'user');\n      if (userCache && userCache.repositories) {\n        counts[`user-${userData.login}`] = userCache.repositories.length;\n      }\n    }\n    \n    // Check cache for organization repositories\n    orgsData.forEach(org => {\n      const orgCache = repositoryCacheService.getCachedRepositories(org.login, 'org');\n      if (orgCache && orgCache.repositories) {\n        counts[`org-${org.login}`] = orgCache.repositories.length;\n      }\n    });\n    \n    setDakCounts(counts);\n  }, []);\n\n  const fetchUserData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      let userData = null;\n      \n      if (isAuthenticated) {\n        // Check token permissions first for authenticated users\n        await githubService.checkTokenPermissions();\n        \n        // Fetch user data using GitHub service\n        userData = await githubService.getCurrentUser();\n        setUser(userData);\n      } else {\n        // For unauthenticated users, don't create a user profile\n        userData = null;\n        setUser(null);\n      }\n      \n      // Fetch organizations inline\n      let orgsData = [];\n      \n      if (isAuthenticated) {\n        try {\n          orgsData = await githubService.getUserOrganizations();\n        } catch (error) {\n          console.error('Error fetching organizations:', error);\n          orgsData = [];\n        }\n      }\n      \n      // Always ensure WHO organization is included (using public API)\n      try {\n        const whoOrganization = await githubService.getWHOOrganization();\n        \n        // Check if WHO organization is already in the list\n        const whoIndex = orgsData.findIndex(org => org.login === 'WorldHealthOrganization');\n        \n        if (whoIndex >= 0) {\n          // Replace existing WHO org with fresh data and ensure isWHO flag\n          orgsData[whoIndex] = { ...orgsData[whoIndex], ...whoOrganization, isWHO: true };\n        } else {\n          // Add WHO organization at the beginning of the list\n          orgsData.unshift(whoOrganization);\n        }\n      } catch (whoError) {\n        console.warn('Could not fetch WHO organization data, using fallback:', whoError);\n        \n        // Fallback to hardcoded WHO organization\n        const whoOrganization = {\n          id: 'who-organization',\n          login: 'WorldHealthOrganization',\n          name: 'World Health Organization',\n          description: 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n          avatar_url: 'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',\n          html_url: 'https://github.com/WorldHealthOrganization',\n          type: 'Organization',\n          isWHO: true\n        };\n        \n        // Check if WHO organization is already in the list\n        const hasWHO = orgsData.some(org => org.login === 'WorldHealthOrganization');\n        \n        if (!hasWHO) {\n          // Add WHO organization at the beginning of the list\n          orgsData.unshift(whoOrganization);\n        } else {\n          // Ensure existing WHO organization has the isWHO flag\n          orgsData = orgsData.map(org => \n            org.login === 'WorldHealthOrganization' \n              ? { ...org, isWHO: true }\n              : org\n          );\n        }\n      }\n      \n      setOrganizations(orgsData);\n      \n      // Load cached DAK counts (if available and authenticated)\n      if (isAuthenticated) {\n        loadCachedDakCounts(userData, orgsData);\n      }\n      \n    } catch (error) {\n      console.error('Error fetching user data:', error);\n      \n      if (isAuthenticated) {\n        setError('Failed to fetch user data. Please check your connection and try again.');\n        setIsAuthenticated(false);\n        githubService.logout(); // Use secure logout method\n      } else {\n        // For unauthenticated users, show limited error message\n        setError('Unable to fetch additional data. Some features may be limited.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [loadCachedDakCounts, isAuthenticated]);\n\n  // Initial authentication check - don't redirect if not authenticated\n  useEffect(() => {\n    const initializeAuth = () => {\n      // Try to initialize from securely stored token\n      const success = githubService.initializeFromStoredToken();\n      if (success) {\n        setIsAuthenticated(true);\n      } else {\n        // Don't redirect - allow unauthenticated access\n        setIsAuthenticated(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // Register SAML modal callback on mount\n  useEffect(() => {\n    samlAuthService.registerModalCallback((samlInfo) => {\n      setSamlModalInfo(samlInfo);\n      setSamlModalOpen(true);\n    });\n  }, []);\n\n  // Handle warning message from navigation state\n  useEffect(() => {\n    if (location.state?.warningMessage) {\n      setWarningMessage(location.state.warningMessage);\n      // Clear the warning message from navigation state to prevent it from persisting\n      navigate(location.pathname, { replace: true, state: {} });\n    }\n  }, [location.state, navigate, location.pathname]);\n\n  // Fetch user data when component mounts or authentication state changes\n  useEffect(() => {\n    // Always fetch data regardless of authentication state\n    if (!user) {\n      fetchUserData();\n    }\n  }, [user, fetchUserData]);\n\n  const handleProfileSelect = (event, profile) => {\n    const navigationState = { profile };\n    handleNavigationClick(event, `/dak-action/${profile.login}`, navigate, navigationState);\n  };\n\n  const handleDismissWarning = () => {\n    setWarningMessage(null);\n  };\n\n  return (\n    <PageLayout pageName=\"select-profile\">\n      {loading && !user ? (\n        <div className=\"loading-section\">\n          <div className=\"spinner\"></div>\n          <p>Loading profile data...</p>\n        </div>\n      ) : (\n        <div className=\"select-profile-content\">\n        {warningMessage && (\n          <div className=\"warning-message\">\n            <div className=\"warning-content\">\n              <div className=\"warning-header\">\n                <span className=\"warning-icon\">‚ö†Ô∏è</span>\n                <span className=\"warning-text\">{warningMessage}</span>\n              </div>\n              <button \n                className=\"warning-dismiss\" \n                onClick={handleDismissWarning}\n                aria-label=\"Dismiss warning\"\n              >\n                √ó Dismiss\n              </button>\n            </div>\n          </div>\n        )}\n        \n        {/* Authentication Status Indicator */}\n        {!isAuthenticated && (\n          <div className=\"auth-status-message\">\n            <div className=\"auth-status-content\">\n              <span className=\"auth-status-icon\">üîì</span>\n              <span className=\"auth-status-text\">\n                You are browsing in unauthenticated mode. Some features like saving to GitHub will be disabled, but you can still explore and use local staging.\n              </span>\n            </div>\n          </div>\n        )}\n        \n        {loading ? (\n          <div className=\"loading-section\">\n            <div className=\"spinner\"></div>\n            <p>Loading profile data...</p>\n          </div>\n        ) : (\n          <div className=\"profile-selection\">\n            <h2>{t('organization.select')}</h2>\n            <p>{t('organization.personal')}:</p>\n            \n            {error && <div className=\"error-message\">{error}</div>}\n            \n            {/* Horizontal profile grid */}\n            <div className=\"profile-grid-horizontal\">\n              {/* Personal Profile - Show only for authenticated users */}\n              {isAuthenticated && user && (\n                <div \n                  className=\"profile-card\"\n                  onClick={(event) => handleProfileSelect(event, { type: 'user', ...user })}\n                >\n                  <div className=\"profile-card-header\">\n                    <img src={user?.avatar_url} alt=\"Personal profile\" />\n                    {dakCounts[`user-${user?.login}`] > 0 && (\n                      <div className=\"dak-count-badge\">\n                        {dakCounts[`user-${user?.login}`]}\n                      </div>\n                    )}\n                  </div>\n                  <h3>{user?.name || user?.login}</h3>\n                  <p>Personal repositories</p>\n                  <div className=\"profile-badges\">\n                    <span className=\"profile-type\">Personal</span>\n                  </div>\n                </div>\n              )}\n              \n              {/* Organization Profiles */}\n              {organizations.map((org) => (\n                <div \n                  key={org.login}\n                  className={`profile-card ${org.isWHO ? 'who-org' : ''}`}\n                  onClick={(event) => handleProfileSelect(event, { type: 'org', ...org })}\n                >\n                  <div className=\"profile-card-header\">\n                    <img \n                      src={org.avatar_url || `https://github.com/${org.login}.png`} \n                      alt={`${org.name || org.login} organization`} \n                    />\n                    {dakCounts[`org-${org.login}`] > 0 && (\n                      <div className=\"dak-count-badge\">\n                        {dakCounts[`org-${org.login}`]}\n                      </div>\n                    )}\n                  </div>\n                  <h3>{org.name || org.login}</h3>\n                  <p>@{org.login}</p>\n                  <div className=\"profile-badges\">\n                    <span className=\"profile-type\">{t('organization.organizations')}</span>\n                    {org.isWHO && <span className=\"who-badge\">WHO Official</span>}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        </div>\n      )}\n      \n      {/* SAML Authorization Modal */}\n      <SAMLAuthModal\n        isOpen={samlModalOpen}\n        onClose={() => {\n          setSamlModalOpen(false);\n          setSamlModalInfo(null);\n        }}\n        samlInfo={samlModalInfo}\n      />\n    </PageLayout>\n  );\n};\n\nexport default SelectProfilePage;"],"names":["_ref","isOpen","onClose","samlInfo","componentLogger","logger","getLogger","useEffect","componentMount","organization","repository","componentUnmount","authorizationUrl","handleClose","userAction","_jsx","className","onClick","role","children","_jsxs","e","stopPropagation","id","concat","handleAuthorize","window","open","info","instruction","SelectProfilePage","t","useTranslation","user","setUser","useState","organizations","setOrganizations","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","dakCounts","setDakCounts","warningMessage","setWarningMessage","samlModalOpen","setSamlModalOpen","samlModalInfo","setSamlModalInfo","navigate","useNavigate","location","useLocation","loadCachedDakCounts","useCallback","userData","orgsData","githubService","isAuth","counts","userCache","repositoryCacheService","getCachedRepositories","login","repositories","length","forEach","org","orgCache","fetchUserData","async","checkTokenPermissions","getCurrentUser","getUserOrganizations","console","whoOrganization","getWHOOrganization","whoIndex","findIndex","_objectSpread","isWHO","unshift","whoError","warn","name","description","avatar_url","html_url","type","some","map","logout","initializeAuth","success","initializeFromStoredToken","samlAuthService","registerModalCallback","_location$state","state","pathname","replace","handleProfileSelect","event","profile","navigationState","handleNavigationClick","PageLayout","pageName","handleDismissWarning","src","alt","SAMLAuthModal"],"sourceRoot":""}