{"version":3,"file":"static/js/9634.cb270e92.chunk.js","mappings":"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","sources":["components/SAMLAuthModal.js","components/OrganizationSelection.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport logger from '../utils/logger';\nimport './SAMLAuthModal.css';\n\n/**\n * SAMLAuthModal Component\n * \n * Modal dialog that guides users through GitHub SAML SSO authorization process.\n * Displayed when a Personal Access Token needs SAML SSO authorization for an organization.\n */\nconst SAMLAuthModal = ({ isOpen, onClose, samlInfo }) => {\n  const componentLogger = logger.getLogger('SAMLAuthModal');\n\n  useEffect(() => {\n    if (isOpen && samlInfo) {\n      componentLogger.componentMount({ \n        organization: samlInfo.organization,\n        repository: samlInfo.repository \n      });\n    }\n    return () => {\n      if (isOpen) {\n        componentLogger.componentUnmount();\n      }\n    };\n  }, [componentLogger, isOpen, samlInfo]);\n\n  if (!isOpen || !samlInfo) {\n    return null;\n  }\n\n  const { organization, repository, authorizationUrl } = samlInfo;\n\n  const handleAuthorize = () => {\n    componentLogger.userAction('Authorize SAML clicked', { \n      organization,\n      authorizationUrl \n    });\n    \n    // Open GitHub SAML authorization page in new tab\n    window.open(authorizationUrl, '_blank', 'noopener,noreferrer');\n    \n    // Log instruction for user\n    componentLogger.info('SAML authorization page opened', {\n      organization,\n      instruction: 'User should authorize their PAT on GitHub and then refresh'\n    });\n  };\n\n  const handleClose = () => {\n    componentLogger.userAction('SAML modal closed', { organization });\n    onClose();\n  };\n\n  return (\n    <div \n      className=\"saml-modal-overlay\" \n      onClick={handleClose}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"saml-modal-title\"\n    >\n      <div \n        className=\"saml-modal\" \n        onClick={(e) => e.stopPropagation()}\n        role=\"document\"\n      >\n        <div className=\"saml-modal-header\">\n          <h2 id=\"saml-modal-title\">🔐 SAML SSO Authorization Required</h2>\n          <button \n            onClick={handleClose}\n            className=\"close-button\"\n            aria-label=\"Close\"\n          >\n            ×\n          </button>\n        </div>\n        \n        <div className=\"saml-modal-content\">\n          <div className=\"saml-info-section\">\n            <div className=\"saml-icon\">\n              <span role=\"img\" aria-label=\"lock\">🔒</span>\n            </div>\n            \n            <h3>Organization Access Required</h3>\n            <p className=\"saml-description\">\n              Your Personal Access Token needs SAML SSO authorization to access the{' '}\n              <strong>{organization}</strong> organization{repository ? ` and the ${repository} repository` : ''}.\n            </p>\n          </div>\n\n          <div className=\"saml-steps-section\">\n            <h4>How to authorize your token:</h4>\n            <ol className=\"saml-steps\">\n              <li>\n                <strong>Click \"Authorize on GitHub\"</strong> below to open the authorization page\n              </li>\n              <li>\n                <strong>Review the permissions</strong> requested by the organization\n              </li>\n              <li>\n                <strong>Click \"Authorize\"</strong> to grant your token access\n              </li>\n              <li>\n                <strong>Return to this page</strong> and refresh or try your action again\n              </li>\n            </ol>\n          </div>\n\n          <div className=\"saml-note\">\n            <span className=\"note-icon\">ℹ️</span>\n            <p>\n              This is a GitHub security feature for organizations using SAML SSO.\n              You only need to authorize once per organization per token.\n            </p>\n          </div>\n\n          <div className=\"saml-modal-actions\">\n            <button \n              onClick={handleAuthorize}\n              className=\"saml-authorize-btn\"\n            >\n              🔓 Authorize on GitHub\n            </button>\n            <button \n              onClick={handleClose}\n              className=\"saml-cancel-btn\"\n            >\n              Later\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SAMLAuthModal;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport samlAuthService from '../services/samlAuthService';\nimport SAMLAuthModal from './SAMLAuthModal';\nimport { PageLayout } from './framework';\n\nconst OrganizationSelection = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [organizations, setOrganizations] = useState([]);\n  const [selectedOrganization, setSelectedOrganization] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [includePersonal, setIncludePersonal] = useState(true);\n  const [samlModalOpen, setSamlModalOpen] = useState(false);\n  const [samlModalInfo, setSamlModalInfo] = useState(null);\n  \n  const { profile, sourceRepository, action } = location.state || {};\n\n  const getActionConfig = () => {\n    switch (action) {\n      case 'fork':\n        return {\n          title: 'Select Destination for Fork',\n          description: `Choose where to create a fork of \"${sourceRepository?.name}\".`,\n          buttonText: 'Fork Repository',\n          nextRoute: '/dashboard'\n        };\n      case 'create':\n        return {\n          title: 'Select Destination for New DAK',\n          description: `Choose where to create your new DAK based on \"${sourceRepository?.name}\".`,\n          buttonText: 'Continue to Configuration',\n          nextRoute: '/dak-configuration'\n        };\n      default:\n        return {\n          title: 'Select Organization',\n          description: 'Choose an organization for your DAK.',\n          buttonText: 'Continue',\n          nextRoute: '/dashboard'\n        };\n    }\n  };\n\n  const fetchOrganizations = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      let orgsData = [];\n      \n      if (githubService.isAuth()) {\n        orgsData = await githubService.getUserOrganizations();\n      } else {\n        // Fallback to mock organizations for demonstration\n        orgsData = await getMockOrganizations();\n      }\n      \n      // Always ensure WHO organization is included with fresh data\n      try {\n        const whoOrganization = await githubService.getWHOOrganization();\n        \n        // Check if WHO organization is already in the list\n        const whoIndex = orgsData.findIndex(org => org.login === 'WorldHealthOrganization');\n        \n        if (whoIndex >= 0) {\n          // Replace existing WHO org with fresh data\n          orgsData[whoIndex] = { ...orgsData[whoIndex], ...whoOrganization };\n        } else {\n          // Add WHO organization at the beginning of the list\n          orgsData.unshift(whoOrganization);\n        }\n      } catch (whoError) {\n        console.warn('Could not fetch WHO organization data, using fallback:', whoError);\n        \n        // Fallback to hardcoded WHO organization\n        const whoOrganization = {\n          id: 'who-organization',\n          login: 'WorldHealthOrganization',\n          display_name: 'World Health Organization',\n          description: 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n          avatar_url: 'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',\n          html_url: 'https://github.com/WorldHealthOrganization',\n          type: 'Organization',\n          permissions: {\n            can_create_repositories: true,\n            can_create_private_repositories: true\n          },\n          plan: {\n            name: 'Organization',\n            private_repos: 'unlimited'\n          },\n          isWHO: true\n        };\n        \n        // Check if WHO organization is already in the list\n        const hasWHO = orgsData.some(org => org.login === 'WorldHealthOrganization');\n        \n        if (!hasWHO) {\n          // Add WHO organization at the beginning of the list\n          orgsData.unshift(whoOrganization);\n        }\n      }\n      \n      setOrganizations(orgsData);\n    } catch (error) {\n      console.error('Error fetching organizations:', error);\n      setError('Failed to fetch organizations. Please check your connection and try again.');\n      // Fallback to mock data for demonstration (which includes WHO)\n      try {\n        const mockOrgs = await getMockOrganizations();\n        setOrganizations(mockOrgs);\n      } catch (mockError) {\n        // Ultimate fallback with hardcoded data\n        setOrganizations([{\n          id: 'who-organization',\n          login: 'WorldHealthOrganization',\n          display_name: 'World Health Organization',\n          description: 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n          avatar_url: 'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',\n          html_url: 'https://github.com/WorldHealthOrganization',\n          type: 'Organization',\n          permissions: {\n            can_create_repositories: true,\n            can_create_private_repositories: true\n          },\n          plan: {\n            name: 'Organization',\n            private_repos: 'unlimited'\n          },\n          isWHO: true\n        }]);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const getMockOrganizations = async () => {\n    try {\n      // Try to get fresh WHO data even in mock mode\n      const whoOrganization = await githubService.getWHOOrganization();\n      \n      return [\n        whoOrganization,\n        {\n          id: 1,\n          login: 'my-health-org',\n          display_name: 'My Health Organization',\n          description: 'Healthcare technology organization focused on digital health solutions',\n          avatar_url: 'https://avatars.githubusercontent.com/u/1?s=200&v=4',\n          html_url: 'https://github.com/my-health-org',\n          type: 'Organization',\n          permissions: {\n            can_create_repositories: true,\n            can_create_private_repositories: true\n          },\n          plan: {\n            name: 'Team',\n            private_repos: 10\n          }\n        },\n        {\n          id: 2,\n          login: 'global-health-initiative',\n          display_name: 'Global Health Initiative',\n          description: 'International organization working on global health standards',\n          avatar_url: 'https://avatars.githubusercontent.com/u/2?s=200&v=4',\n          html_url: 'https://github.com/global-health-initiative',\n          type: 'Organization',\n          permissions: {\n            can_create_repositories: true,\n            can_create_private_repositories: false\n          },\n          plan: {\n            name: 'Free',\n            private_repos: 0\n          }\n        }\n      ];\n    } catch (error) {\n      console.warn('Could not fetch WHO data for mock organizations, using fallback:', error);\n      // Return original hardcoded mock data\n      return [\n        {\n          id: 'who-organization',\n          login: 'WorldHealthOrganization',\n          display_name: 'World Health Organization',\n          description: 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n          avatar_url: 'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',\n          html_url: 'https://github.com/WorldHealthOrganization',\n          type: 'Organization',\n          permissions: {\n            can_create_repositories: true,\n            can_create_private_repositories: true\n          },\n          plan: {\n            name: 'Organization',\n            private_repos: 'unlimited'\n          },\n          isWHO: true\n        },\n        {\n          id: 1,\n          login: 'my-health-org',\n          display_name: 'My Health Organization',\n          description: 'Healthcare technology organization focused on digital health solutions',\n          avatar_url: 'https://avatars.githubusercontent.com/u/1?s=200&v=4',\n          html_url: 'https://github.com/my-health-org',\n          type: 'Organization',\n          permissions: {\n            can_create_repositories: true,\n            can_create_private_repositories: true\n          },\n          plan: {\n            name: 'Team',\n            private_repos: 10\n          }\n        },\n        {\n          id: 2,\n          login: 'global-health-initiative',\n          display_name: 'Global Health Initiative',\n          description: 'International organization working on global health standards',\n          avatar_url: 'https://avatars.githubusercontent.com/u/2?s=200&v=4',\n          html_url: 'https://github.com/global-health-initiative',\n          type: 'Organization',\n          permissions: {\n            can_create_repositories: true,\n            can_create_private_repositories: false\n          },\n          plan: {\n            name: 'Free',\n            private_repos: 0\n          }\n        }\n      ];\n    }\n  };\n\n  useEffect(() => {\n    if (!profile || !sourceRepository || !action) {\n      navigate('/');\n      return;\n    }\n    \n    // Register SAML modal callback\n    samlAuthService.registerModalCallback((samlInfo) => {\n      setSamlModalInfo(samlInfo);\n      setSamlModalOpen(true);\n    });\n    \n    fetchOrganizations();\n  }, [profile, sourceRepository, action, navigate, fetchOrganizations]);\n\n  const handleOrganizationSelect = (org) => {\n    setSelectedOrganization(org);\n  };\n\n  const handleContinue = () => {\n    if (!selectedOrganization) {\n      alert('Please select an organization to continue');\n      return;\n    }\n\n    const config = getActionConfig();\n    \n    if (action === 'fork') {\n      // For fork, go directly to dashboard after forking\n      navigate(config.nextRoute, {\n        state: {\n          profile,\n          repository: {\n            ...sourceRepository,\n            // Update repository info to reflect the fork destination\n            full_name: `${selectedOrganization.login}/${sourceRepository.name}`,\n            html_url: `https://github.com/${selectedOrganization.login}/${sourceRepository.name}`,\n            owner: selectedOrganization\n          },\n          sourceRepository,\n          destinationOrganization: selectedOrganization,\n          action\n        }\n      });\n    } else if (action === 'create') {\n      // For create, go to DAK configuration\n      navigate(config.nextRoute, {\n        state: {\n          profile,\n          templateRepository: sourceRepository,\n          destinationOrganization: selectedOrganization,\n          action\n        }\n      });\n    }\n  };\n\n  const handleBack = () => {\n    navigate(`/dak-selection/${profile.login}`, { \n      state: { profile, action } \n    });\n  };\n\n  const config = getActionConfig();\n  \n  // Create combined list of options\n  const allOptions = [];\n  \n  if (includePersonal) {\n    allOptions.push({\n      ...profile,\n      type: 'User',\n      display_name: profile.name || profile.login,\n      description: 'Your personal GitHub account',\n      permissions: {\n        can_create_repositories: true,\n        can_create_private_repositories: true\n      },\n      isPersonal: true\n    });\n  }\n  \n  allOptions.push(...organizations);\n\n  return (\n    <PageLayout pageName=\"organization-selection\">\n      {!profile || !sourceRepository || !action ? (\n        <div>Redirecting...</div>\n      ) : (\n        <div className=\"org-content\">\n        <div className=\"breadcrumb\">\n          <button onClick={() => navigate('/')} className=\"breadcrumb-link\">\n            Select Profile\n          </button>\n          <span className=\"breadcrumb-separator\">›</span>\n          <button onClick={() => navigate('/dak-action', { state: { profile } })} className=\"breadcrumb-link\">\n            Choose DAK Action\n          </button>\n          <span className=\"breadcrumb-separator\">›</span>\n          <button onClick={handleBack} className=\"breadcrumb-link\">\n            Select DAK\n          </button>\n          <span className=\"breadcrumb-separator\">›</span>\n          <span className=\"breadcrumb-current\">Select Organization</span>\n        </div>\n\n        <div className=\"org-main\">\n          <div className=\"org-intro\">\n            <h2>{config.title}</h2>\n            <p>{config.description}</p>\n            \n            {sourceRepository && (\n              <div className=\"source-repo-info\">\n                <span className=\"repo-label\">Source Repository:</span>\n                <div className=\"repo-badge\">\n                  <span className=\"repo-name\">{sourceRepository.name}</span>\n                  <span className=\"repo-owner\">@{sourceRepository.full_name?.split('/')[0]}</span>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"options-section\">\n            <div className=\"include-personal\">\n              <label className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  checked={includePersonal}\n                  onChange={(e) => setIncludePersonal(e.target.checked)}\n                />\n                <span>Include my personal account as an option</span>\n              </label>\n            </div>\n\n            {loading ? (\n              <div className=\"loading\">\n                <div className=\"spinner\"></div>\n                <p>Loading organizations...</p>\n              </div>\n            ) : error ? (\n              <div className=\"error-state\">\n                <h3>Error loading organizations</h3>\n                <p>{error}</p>\n                <button onClick={fetchOrganizations} className=\"retry-btn\">\n                  Try Again\n                </button>\n              </div>\n            ) : allOptions.length === 0 ? (\n              <div className=\"empty-state\">\n                <h3>No organizations available</h3>\n                <p>Enable personal account option or join organizations to see options here.</p>\n              </div>\n            ) : (\n              <>\n                <div className=\"org-grid\">\n                  {allOptions.map((org) => (\n                    <div \n                      key={`${org.type}-${org.id}`}\n                      className={`org-card ${selectedOrganization?.id === org.id && selectedOrganization?.type === org.type ? 'selected' : ''} ${org.isPersonal ? 'personal' : ''} ${org.isWHO ? 'who-org' : ''}`}\n                      onClick={() => handleOrganizationSelect(org)}\n                    >\n                      <div className=\"org-header-info\">\n                        <img \n                          src={org.avatar_url || `https://github.com/${org.login}.png`} \n                          alt={`${org.display_name || org.login} avatar`}\n                          className=\"org-avatar\"\n                        />\n                        <div className=\"org-details\">\n                          <h3>{org.display_name || org.login}</h3>\n                          <p className=\"org-login\">@{org.login}</p>\n                          {org.isPersonal && <span className=\"personal-badge\">Personal</span>}\n                          {org.isWHO && <span className=\"who-badge\">WHO Official</span>}\n                        </div>\n                      </div>\n                      \n                      <p className=\"org-description\">{org.description || 'No description available'}</p>\n                      \n                      <div className=\"org-permissions\">\n                        <div className=\"permission-item\">\n                          <span className={`permission-icon ${org.permissions?.can_create_repositories ? 'allowed' : 'denied'}`}>\n                            {org.permissions?.can_create_repositories ? '✓' : '✗'}\n                          </span>\n                          <span>Create repositories</span>\n                        </div>\n                        <div className=\"permission-item\">\n                          <span className={`permission-icon ${org.permissions?.can_create_private_repositories ? 'allowed' : 'denied'}`}>\n                            {org.permissions?.can_create_private_repositories ? '✓' : '✗'}\n                          </span>\n                          <span>Create private repositories</span>\n                        </div>\n                      </div>\n\n                      {org.plan && (\n                        <div className=\"org-plan\">\n                          <span className=\"plan-name\">{org.plan.name} Plan</span>\n                          {org.plan.private_repos !== undefined && (\n                            <span className=\"plan-repos\">{org.plan.private_repos} private repos</span>\n                          )}\n                        </div>\n                      )}\n\n                      {selectedOrganization?.id === org.id && selectedOrganization?.type === org.type && (\n                        <div className=\"selection-indicator\">\n                          <span>✓ Selected</span>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"org-footer\">\n                  <button \n                    className=\"continue-btn\"\n                    onClick={handleContinue}\n                    disabled={!selectedOrganization}\n                  >\n                    {config.buttonText}\n                  </button>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n        </div>\n      )}\n      \n      {/* SAML Authorization Modal */}\n      <SAMLAuthModal\n        isOpen={samlModalOpen}\n        onClose={() => {\n          setSamlModalOpen(false);\n          setSamlModalInfo(null);\n        }}\n        samlInfo={samlModalInfo}\n      />\n    </PageLayout>\n  );\n};\n\nexport default OrganizationSelection;"],"names":["_ref","isOpen","onClose","samlInfo","componentLogger","logger","getLogger","useEffect","componentMount","organization","repository","componentUnmount","authorizationUrl","handleClose","userAction","_jsx","className","onClick","role","children","_jsxs","e","stopPropagation","id","concat","handleAuthorize","window","open","info","instruction","OrganizationSelection","_sourceRepository$ful","location","useLocation","navigate","useNavigate","organizations","setOrganizations","useState","selectedOrganization","setSelectedOrganization","loading","setLoading","error","setError","includePersonal","setIncludePersonal","samlModalOpen","setSamlModalOpen","samlModalInfo","setSamlModalInfo","profile","sourceRepository","action","state","getActionConfig","title","description","name","buttonText","nextRoute","fetchOrganizations","useCallback","async","orgsData","githubService","isAuth","getUserOrganizations","getMockOrganizations","whoOrganization","getWHOOrganization","whoIndex","findIndex","org","login","_objectSpread","unshift","whoError","console","warn","display_name","avatar_url","html_url","type","permissions","can_create_repositories","can_create_private_repositories","plan","private_repos","isWHO","some","mockOrgs","mockError","samlAuthService","registerModalCallback","config","allOptions","push","isPersonal","PageLayout","pageName","handleBack","full_name","split","checked","onChange","target","length","_Fragment","map","_org$permissions","_org$permissions2","_org$permissions3","_org$permissions4","handleOrganizationSelect","src","alt","undefined","handleContinue","alert","owner","destinationOrganization","templateRepository","disabled","SAMLAuthModal"],"sourceRoot":""}