{"version":3,"file":"static/js/554.ad718cad.chunk.js","mappings":"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","sources":["dak/faq/questions/dak/DakNameQuestion.js"],"sourcesContent":["/**\n * DAK Name Question Component\n * Returns the name of the DAK from sushi-config.yaml\n */\n\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { QuestionDefinition, QuestionResult, CacheHint, QuestionLevel } from '../../types/QuestionDefinition.js';\nimport yaml from 'js-yaml';\n\n// Question metadata\nexport const metadata = new QuestionDefinition({\n  id: 'dak-name',\n  level: QuestionLevel.DAK,\n  title: 'DAK Name',\n  description: 'Extracts the name of the DAK from sushi-config.yaml',\n  parameters: [],\n  tags: ['dak', 'metadata', 'name'],\n  version: '1.0.0'\n});\n\n/**\n * Execute the DAK name question\n * @param {Object} input - Question input parameters\n * @param {string} input.repository - Repository identifier\n * @param {string} input.locale - Locale for response\n * @param {string} input.branch - Git branch\n * @param {Storage} input.storage - Storage interface\n * @returns {Promise<QuestionResult>} - Question result\n */\nexport async function execute(input) {\n  const { locale = 'en_US', storage } = input;\n  const warnings = [];\n  const errors = [];\n\n  try {\n    // Check if sushi-config.yaml exists\n    const sushiConfigExists = await storage.fileExists('sushi-config.yaml');\n    if (!sushiConfigExists) {\n      return new QuestionResult({\n        structured: { name: null },\n        narrative: getLocalizedNarrative(locale, 'file_not_found'),\n        errors: [getLocalizedError(locale, 'sushi_config_missing')],\n        meta: {\n          cacheHint: new CacheHint({\n            scope: 'repository',\n            key: 'dak-name',\n            ttl: 3600,\n            dependencies: ['sushi-config.yaml']\n          })\n        }\n      });\n    }\n\n    // Read and parse sushi-config.yaml\n    const sushiConfigContent = await storage.readFile('sushi-config.yaml');\n    const sushiConfig = yaml.load(sushiConfigContent.toString('utf-8'));\n\n    // Extract DAK name\n    let dakName = null;\n    if (sushiConfig && typeof sushiConfig === 'object') {\n      dakName = sushiConfig.name || sushiConfig.title || sushiConfig.id;\n    }\n\n    if (!dakName) {\n      warnings.push(getLocalizedError(locale, 'name_not_found'));\n    }\n\n    return new QuestionResult({\n      structured: { \n        name: dakName,\n        id: sushiConfig?.id,\n        title: sushiConfig?.title,\n        version: sushiConfig?.version \n      },\n      narrative: getLocalizedNarrative(locale, 'success', { name: dakName }),\n      warnings,\n      errors,\n      meta: {\n        cacheHint: new CacheHint({\n          scope: 'repository',\n          key: 'dak-name',\n          ttl: 3600,\n          dependencies: ['sushi-config.yaml']\n        })\n      }\n    });\n\n  } catch (error) {\n    return new QuestionResult({\n      structured: { name: null },\n      narrative: getLocalizedNarrative(locale, 'error'),\n      errors: [getLocalizedError(locale, 'parse_error', { error: error.message })],\n      meta: {\n        cacheHint: new CacheHint({\n          scope: 'repository',\n          key: 'dak-name',\n          ttl: 60, // Short cache on error\n          dependencies: ['sushi-config.yaml']\n        })\n      }\n    });\n  }\n}\n\n/**\n * React component for rendering DAK name narrative\n */\nexport function Render({ result, locale = 'en_US' }) {\n  const { t } = useTranslation();\n\n  if (!result || !result.structured) {\n    return <div className=\"faq-answer error\">{t('dak.faq.name.no_data')}</div>;\n  }\n\n  const { name, id, title, version } = result.structured;\n\n  if (!name) {\n    return (\n      <div className=\"faq-answer warning\">\n        <h4>{t('dak.faq.name.title')}</h4>\n        <p>{t('dak.faq.name.not_found')}</p>\n        {result.errors?.map((error, index) => (\n          <div key={index} className=\"error-message\">{error}</div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"faq-answer success\">\n      <h4>{t('dak.faq.name.title')}</h4>\n      <div className=\"dak-metadata\">\n        <div className=\"dak-name\">\n          <strong>{t('dak.faq.name.name_label')}: </strong>\n          <span className=\"highlight\">{name}</span>\n        </div>\n        {id && id !== name && (\n          <div className=\"dak-id\">\n            <strong>{t('dak.faq.name.id_label')}: </strong>\n            <code>{id}</code>\n          </div>\n        )}\n        {title && title !== name && (\n          <div className=\"dak-title\">\n            <strong>{t('dak.faq.name.title_label')}: </strong>\n            {title}\n          </div>\n        )}\n        {version && (\n          <div className=\"dak-version\">\n            <strong>{t('dak.faq.name.version_label')}: </strong>\n            <code>{version}</code>\n          </div>\n        )}\n      </div>\n      {result.warnings?.map((warning, index) => (\n        <div key={index} className=\"warning-message\">{warning}</div>\n      ))}\n    </div>\n  );\n}\n\n/**\n * Get localized narrative text\n */\nfunction getLocalizedNarrative(locale, type, params = {}) {\n  const narratives = {\n    en_US: {\n      success: params.name ? \n        `<h4>DAK Name</h4><p>The name of this DAK is <strong>${params.name}</strong>.</p>` :\n        `<h4>DAK Name</h4><p>No name found in sushi-config.yaml.</p>`,\n      file_not_found: `<h4>DAK Name</h4><p class=\"error\">The sushi-config.yaml file was not found in this repository.</p>`,\n      error: `<h4>DAK Name</h4><p class=\"error\">An error occurred while reading the DAK configuration.</p>`\n    },\n    fr_FR: {\n      success: params.name ?\n        `<h4>Nom du DAK</h4><p>Le nom de ce DAK est <strong>${params.name}</strong>.</p>` :\n        `<h4>Nom du DAK</h4><p>Aucun nom trouvé dans sushi-config.yaml.</p>`,\n      file_not_found: `<h4>Nom du DAK</h4><p class=\"error\">Le fichier sushi-config.yaml n'a pas été trouvé dans ce référentiel.</p>`,\n      error: `<h4>Nom du DAK</h4><p class=\"error\">Une erreur s'est produite lors de la lecture de la configuration DAK.</p>`\n    },\n    es_ES: {\n      success: params.name ?\n        `<h4>Nombre del DAK</h4><p>El nombre de este DAK es <strong>${params.name}</strong>.</p>` :\n        `<h4>Nombre del DAK</h4><p>No se encontró nombre en sushi-config.yaml.</p>`,\n      file_not_found: `<h4>Nombre del DAK</h4><p class=\"error\">El archivo sushi-config.yaml no se encontró en este repositorio.</p>`,\n      error: `<h4>Nombre del DAK</h4><p class=\"error\">Ocurrió un error al leer la configuración del DAK.</p>`\n    }\n  };\n\n  const localeData = narratives[locale] || narratives['en_US'];\n  return localeData[type] || localeData.error;\n}\n\n/**\n * Get localized error message\n */\nfunction getLocalizedError(locale, type, params = {}) {\n  const errors = {\n    en_US: {\n      sushi_config_missing: 'sushi-config.yaml file not found',\n      name_not_found: 'No name field found in sushi-config.yaml',\n      parse_error: `Failed to parse sushi-config.yaml: ${params.error || 'Unknown error'}`\n    },\n    fr_FR: {\n      sushi_config_missing: 'Fichier sushi-config.yaml non trouvé',\n      name_not_found: 'Aucun champ nom trouvé dans sushi-config.yaml',\n      parse_error: `Échec de l'analyse de sushi-config.yaml: ${params.error || 'Erreur inconnue'}`\n    },\n    es_ES: {\n      sushi_config_missing: 'Archivo sushi-config.yaml no encontrado',\n      name_not_found: 'No se encontró campo de nombre en sushi-config.yaml',\n      parse_error: `Error al analizar sushi-config.yaml: ${params.error || 'Error desconocido'}`\n    }\n  };\n\n  const localeData = errors[locale] || errors['en_US'];\n  return localeData[type] || `Unknown error: ${type}`;\n}"],"names":["metadata","QuestionDefinition","id","level","QuestionLevel","DAK","title","description","parameters","tags","version","async","execute","input","locale","storage","warnings","errors","fileExists","QuestionResult","structured","name","narrative","getLocalizedNarrative","getLocalizedError","meta","cacheHint","CacheHint","scope","key","ttl","dependencies","sushiConfigContent","readFile","sushiConfig","yaml","toString","dakName","push","error","message","Render","_ref","_result$warnings","result","t","useTranslation","_jsx","className","children","_result$errors","_jsxs","map","warning","index","type","params","arguments","length","undefined","narratives","en_US","success","concat","file_not_found","fr_FR","es_ES","localeData","sushi_config_missing","name_not_found","parse_error"],"sourceRoot":""}