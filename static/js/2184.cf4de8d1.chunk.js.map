{"version":3,"file":"static/js/2184.cf4de8d1.chunk.js","mappings":"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","sources":["components/HelpButton.js","dak/faq/components/FAQAccordion.js","components/DAKDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport HelpModal from './HelpModal';\nimport useThemeImage from '../hooks/useThemeImage';\n\nconst HelpButton = ({ helpTopic, contextData = {} }) => {\n  const [showHelp, setShowHelp] = useState(false);\n\n  // Theme-aware mascot image\n  const mascotImage = useThemeImage('sgex-mascot.png');\n\n  const handleHelpClick = () => {\n    setShowHelp(true);\n  };\n\n  const handleCloseHelp = () => {\n    setShowHelp(false);\n  };\n\n  return (\n    <>\n      <button \n        className=\"help-button\"\n        onClick={handleHelpClick}\n        title=\"Get Help\"\n        aria-label=\"Get Help\"\n      >\n        <img \n          src={mascotImage} \n          alt=\"SGEX Helper\" \n          className=\"help-mascot-icon\"\n        />\n      </button>\n      \n      {showHelp && (\n        <HelpModal\n          topic={helpTopic}\n          contextData={contextData}\n          onClose={handleCloseHelp}\n        />\n      )}\n    </>\n  );\n};\n\nexport default HelpButton;","/**\n * FAQ Accordion Component\n * Displays FAQ questions in an expandable accordion format\n * Questions are only executed when the user expands them\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport faqExecutionEngine from '../engine/FAQExecutionEngine.js';\nimport DOMPurify from 'dompurify';\nimport './FAQAccordion.css';\n\nconst FAQAccordion = ({ \n  repository,\n  branch = 'main',\n  githubService,\n  filters = {},\n  className = ''\n}) => {\n  const { t, i18n } = useTranslation();\n  const [questions, setQuestions] = useState([]);\n  const [expandedQuestions, setExpandedQuestions] = useState(new Set());\n  const [questionResults, setQuestionResults] = useState(new Map());\n  const [loadingQuestions, setLoadingQuestions] = useState(new Set());\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load available questions\n  useEffect(() => {\n    const loadQuestions = async () => {\n      try {\n        setLoading(true);\n        await faqExecutionEngine.initialize();\n        const availableQuestions = faqExecutionEngine.getCatalog(filters);\n        setQuestions(availableQuestions);\n        setError(null);\n      } catch (err) {\n        console.error('Failed to load FAQ questions:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadQuestions();\n  }, [filters]);\n\n  // Toggle question expansion\n  const toggleQuestion = async (questionId) => {\n    const newExpanded = new Set(expandedQuestions);\n    \n    if (expandedQuestions.has(questionId)) {\n      // Collapse question\n      newExpanded.delete(questionId);\n    } else {\n      // Expand question and execute if not already executed\n      newExpanded.add(questionId);\n      \n      if (!questionResults.has(questionId)) {\n        await executeQuestion(questionId);\n      }\n    }\n    \n    setExpandedQuestions(newExpanded);\n  };\n\n  // Execute a specific question\n  const executeQuestion = async (questionId) => {\n    if (!githubService || !repository) {\n      return;\n    }\n\n    setLoadingQuestions(prev => new Set(prev).add(questionId));\n\n    try {\n      // Prepare request parameters\n      const request = {\n        questionId,\n        parameters: {\n          repository,\n          branch,\n          locale: i18n.language.replace('-', '_') || 'en_US'\n        }\n      };\n\n      // Execute question\n      const context = { githubService };\n      const result = await faqExecutionEngine.executeQuestion(request, context);\n      \n      setQuestionResults(prev => new Map(prev).set(questionId, result));\n    } catch (err) {\n      console.error(`Failed to execute question ${questionId}:`, err);\n      setQuestionResults(prev => new Map(prev).set(questionId, {\n        structured: {},\n        narrative: `<p class=\"error\">Error: ${err.message}</p>`,\n        errors: [err.message],\n        warnings: [],\n        meta: {}\n      }));\n    } finally {\n      setLoadingQuestions(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(questionId);\n        return newSet;\n      });\n    }\n  };\n\n  // Retry execution for a question\n  const retryQuestion = async (questionId) => {\n    setQuestionResults(prev => {\n      const newMap = new Map(prev);\n      newMap.delete(questionId);\n      return newMap;\n    });\n    await executeQuestion(questionId);\n  };\n\n  // Sanitize HTML content\n  const sanitizeHTML = (html) => {\n    return DOMPurify.sanitize(html, {\n      ALLOWED_TAGS: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'div', 'span', 'ul', 'ol', 'li', 'strong', 'em', 'code', 'pre', 'time', 'small'],\n      ALLOWED_ATTR: ['class', 'datetime']\n    });\n  };\n\n  // Render question result\n  const renderQuestionResult = (questionId) => {\n    const result = questionResults.get(questionId);\n    const isLoading = loadingQuestions.has(questionId);\n\n    if (isLoading) {\n      return (\n        <div className=\"faq-answer loading\">\n          <div className=\"faq-loading-spinner\"></div>\n          <p>{t('dak.faq.loading')}</p>\n        </div>\n      );\n    }\n\n    if (!result) {\n      return (\n        <div className=\"faq-answer empty\">\n          <p>{t('dak.faq.no_data')}</p>\n        </div>\n      );\n    }\n\n    if (result.errors && result.errors.length > 0) {\n      return (\n        <div className=\"faq-answer error\">\n          <div \n            className=\"faq-narrative\"\n            dangerouslySetInnerHTML={{ __html: sanitizeHTML(result.narrative || '') }}\n          />\n          <div className=\"faq-messages\">\n            {result.errors.map((error, index) => (\n              <div key={`error-${index}`} className=\"faq-message faq-error\">\n                <span className=\"faq-message-icon\">⚠️</span>\n                {error}\n              </div>\n            ))}\n          </div>\n          <button \n            onClick={() => retryQuestion(questionId)} \n            className=\"faq-retry-button\"\n          >\n            {t('dak.faq.retry')}\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"faq-answer success\">\n        <div \n          className=\"faq-narrative\"\n          dangerouslySetInnerHTML={{ __html: sanitizeHTML(result.narrative || '') }}\n        />\n        {result.warnings && result.warnings.length > 0 && (\n          <div className=\"faq-messages\">\n            {result.warnings.map((warning, index) => (\n              <div key={`warning-${index}`} className=\"faq-message faq-warning\">\n                <span className=\"faq-message-icon\">⚠️</span>\n                {warning}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className={`faq-accordion loading ${className}`}>\n        <div className=\"faq-loading\">\n          <div className=\"loading-spinner\"></div>\n          <p>{t('dak.faq.loading_questions')}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`faq-accordion error ${className}`}>\n        <div className=\"faq-error\">\n          <h4>{t('dak.faq.error_title')}</h4>\n          <p>{error}</p>\n          <button onClick={() => window.location.reload()} className=\"btn-secondary\">\n            {t('common.retry')}\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (questions.length === 0) {\n    return (\n      <div className={`faq-accordion empty ${className}`}>\n        <div className=\"faq-empty\">\n          <h4>{t('dak.faq.no_questions_title')}</h4>\n          <p>{t('dak.faq.no_questions_message')}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`faq-accordion ${className}`}>\n      <div className=\"faq-accordion-header\">\n        <h4>{t('dak.faq.available_questions', { count: questions.length })}</h4>\n        <p>{t('dak.faq.accordion_description')}</p>\n      </div>\n      \n      <div className=\"faq-accordion-list\">\n        {questions.map((question) => {\n          const isExpanded = expandedQuestions.has(question.id);\n          const isLoading = loadingQuestions.has(question.id);\n          \n          return (\n            <div \n              key={question.id} \n              className={`faq-accordion-item ${isExpanded ? 'expanded' : ''} ${isLoading ? 'loading' : ''}`}\n            >\n              <button\n                className=\"faq-accordion-toggle\"\n                onClick={() => toggleQuestion(question.id)}\n                aria-expanded={isExpanded}\n                aria-controls={`faq-content-${question.id}`}\n              >\n                <div className=\"faq-question-info\">\n                  <h5 className=\"faq-question-title\">{question.title}</h5>\n                  <p className=\"faq-question-description\">{question.description}</p>\n                  <div className=\"faq-question-meta\">\n                    <span className=\"faq-level\">{question.level}</span>\n                    {question.tags && question.tags.slice(0, 3).map(tag => (\n                      <span key={tag} className=\"faq-tag\">{tag}</span>\n                    ))}\n                  </div>\n                </div>\n                <div className=\"faq-accordion-icon\">\n                  {isLoading ? (\n                    <div className=\"faq-loading-icon\"></div>\n                  ) : (\n                    <span className={`faq-chevron ${isExpanded ? 'rotated' : ''}`}>\n                      ▼\n                    </span>\n                  )}\n                </div>\n              </button>\n              \n              {isExpanded && (\n                <div \n                  id={`faq-content-${question.id}`}\n                  className=\"faq-accordion-content\"\n                >\n                  {renderQuestionResult(question.id)}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default FAQAccordion;","import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport githubService from '../services/githubService';\nimport dakValidationService from '../services/dakValidationService';\nimport branchContextService from '../services/branchContextService';\nimport HelpButton from './HelpButton';\nimport DAKStatusBox from './DAKStatusBox';\nimport Publications from './Publications';\nimport ForkStatusBar from './ForkStatusBar';\nimport { PageLayout } from './framework';\nimport { handleNavigationClick } from '../utils/navigationUtils';\nimport useThemeImage from '../hooks/useThemeImage';\nimport FAQAccordion from '../dak/faq/components/FAQAccordion.js';\nimport { ALT_TEXT_KEYS, getAltText } from '../utils/imageAltTextHelper';\n\nconst DAKDashboard = () => {\n  return (\n    <PageLayout pageName=\"dak-dashboard\">\n      <DAKDashboardContent />\n    </PageLayout>\n  );\n};\n\nconst DAKDashboardContent = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user, repo, branch } = useParams();\n  \n  // Theme-aware mascot image for dialog\n  const mascotImage = useThemeImage('sgex-mascot.png');\n  \n  // Try to get data from location.state first, then from URL params\n  const [profile, setProfile] = useState(location.state?.profile || null);\n  const [repository, setRepository] = useState(location.state?.repository || null);\n  const [loading, setLoading] = useState(!profile || !repository);\n  const [error, setError] = useState(null);\n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n  const [showPermissionDialog, setShowPermissionDialog] = useState(false);\n  const [activeTab, setActiveTab] = useState('core'); // 'core', 'publications', 'other', or 'faq'\n  const [selectedBranch, setSelectedBranch] = useState(location.state?.selectedBranch || branch || null);\n  const [issueCounts, setIssueCounts] = useState({});\n  const [showUserMenu, setShowUserMenu] = useState(false);\n\n  // Component Card component defined within the dashboard\n  const ComponentCard = ({ component, handleComponentClick, t }) => {\n    const [imageLoaded, setImageLoaded] = useState(false);\n    const [imageError, setImageError] = useState(false);\n    \n    // Use the theme-aware image hook here instead of in the map function\n    const cardImagePath = useThemeImage(component.cardImage);\n\n    const handleImageLoad = () => {\n      setImageLoaded(true);\n      setImageError(false);\n    };\n\n    const handleImageError = () => {\n      setImageError(true);\n      setImageLoaded(false);\n    };\n\n    return (\n      <div \n        className={`component-card ${component.type.toLowerCase()} large-card ${imageLoaded ? 'image-loaded' : ''}`}\n        onClick={(event) => handleComponentClick(event, component)}\n        style={{ '--component-color': component.color }}\n        tabIndex={0}\n        role=\"button\"\n        aria-label={`${component.name} - ${component.description}`}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            handleComponentClick(event, component);\n          }\n        }}\n      >\n        <div className=\"component-main\">\n          <div className=\"component-header\">\n            <div className=\"component-image-container\">\n              <img \n                src={cardImagePath}\n                alt={getAltText(t, ALT_TEXT_KEYS.ICON_DAK_COMPONENT, component.name, { name: component.name })}\n                className=\"component-card-image\"\n                onLoad={handleImageLoad}\n                onError={handleImageError}\n                style={{ display: imageError ? 'none' : 'block' }}\n              />\n              {/* Fallback icon when image fails to load */}\n              {imageError && (\n                <div className=\"component-icon\" style={{ color: component.color }}>\n                  {component.icon}\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"component-content\">\n            <h4>\n              {component.name}\n            </h4>\n            <p>\n              {component.description}\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"component-meta-section\">\n          <div className=\"component-meta\">\n            <div className=\"file-types\">\n              {component.fileTypes.map((type) => (\n                <span key={type} className=\"file-type-tag\">{type}</span>\n              ))}\n            </div>\n            <div className=\"file-count\">\n              {component.count} files\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Fetch data from URL parameters if not available in location.state\n  useEffect(() => {\n    const fetchDataFromUrlParams = async () => {\n      if ((!profile || !repository) && user && repo) {\n        try {\n          setLoading(true);\n          setError(null);\n\n          // Check if githubService is authenticated\n          if (!githubService.isAuth()) {\n            // This is unauthenticated access to public repositories\n            const publicProfile = {\n              login: user,\n              name: user.charAt(0).toUpperCase() + user.slice(1),\n              avatar_url: `https://github.com/${user}.png`,\n              type: 'User'\n            };\n\n            const publicRepository = {\n              name: repo,\n              full_name: `${user}/${repo}`,\n              owner: { login: user },\n              default_branch: branch || 'main',\n              html_url: `https://github.com/${user}/${repo}`\n            };\n\n            setProfile(publicProfile);\n            setRepository(publicRepository);\n            setSelectedBranch(branch || 'main');\n            setLoading(false);\n            return;\n          }\n\n          // Fetch user profile\n          let userProfile = null;\n          try {\n            const userResponse = await githubService.getUser(user);\n            userProfile = userResponse;\n          } catch (err) {\n            console.error('Error fetching user:', err);\n            // Redirect to landing page with warning message\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. User '${user}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Fetch repository\n          let repoData = null;\n          try {\n            const repoResponse = await githubService.getRepository(user, repo);\n            repoData = repoResponse;\n          } catch (err) {\n            console.error('Error fetching repository:', err);\n            // Redirect to landing page with warning message\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Validate that this is actually a DAK repository\n          const isValidDAK = await dakValidationService.validateDAKRepository(user, repo, branch || repoData.default_branch);\n          \n          if (!isValidDAK) {\n            console.log(`Repository ${user}/${repo} is not a valid DAK repository`);\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Validate branch if specified\n          if (branch) {\n            try {\n              await githubService.getBranch(user, repo, branch);\n              setSelectedBranch(branch);\n            } catch (err) {\n              console.warn(`Branch '${branch}' not found, falling back to default branch`);\n              setSelectedBranch(repoData.default_branch);\n            }\n          } else {\n            setSelectedBranch(repoData.default_branch);\n          }\n\n          setProfile(userProfile);\n          setRepository(repoData);\n          setLoading(false);\n        } catch (err) {\n          console.error('Error fetching data from URL params:', err);\n          setError('Failed to load dashboard data. Please check the URL or try again.');\n          setLoading(false);\n        }\n      } else {\n        setLoading(false);\n      }\n    };\n\n    fetchDataFromUrlParams();\n  }, [user, repo, branch, profile, repository, navigate, t]);\n\n  // Initialize selected branch from session context\n  useEffect(() => {\n    if (repository) {\n      const storedBranch = branchContextService.getSelectedBranch(repository);\n      if (storedBranch) {\n        setSelectedBranch(storedBranch);\n      } else {\n        // Set a default branch\n        const defaultBranch = repository.default_branch || 'main';\n        setSelectedBranch(defaultBranch);\n        branchContextService.setSelectedBranch(repository, defaultBranch);\n      }\n    }\n  }, [repository, profile]);\n\n  // Load issue counts for repository\n  const loadIssueCounts = async () => {\n    if (!repository) return;\n    \n    try {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      \n      // Get all issues (includes pull requests in GitHub API)\n      const issues = await githubService.getIssues(owner, repoName, {\n        state: 'all',\n        per_page: 100\n      });\n      \n      // Filter out pull requests to get actual issues\n      const actualIssues = issues.filter(issue => !issue.pull_request);\n      \n      // Count issues by state\n      const openIssues = actualIssues.filter(issue => issue.state === 'open').length;\n      const closedIssues = actualIssues.filter(issue => issue.state === 'closed').length;\n      \n      setIssueCounts({\n        total: actualIssues.length,\n        open: openIssues,\n        closed: closedIssues\n      });\n    } catch (err) {\n      console.warn('Could not load issue counts:', err);\n      setIssueCounts({ total: 0, open: 0, closed: 0 });\n    }\n  };\n\n  // Load issue counts when repository changes\n  useEffect(() => {\n    if (repository && !loading) {\n      loadIssueCounts();\n    }\n  }, [repository, loading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Check write permissions on mount\n  useEffect(() => {\n    const checkPermissions = async () => {\n      if (repository && profile) {\n        try {\n          const writeAccess = await githubService.checkRepositoryWritePermissions(\n            repository.owner?.login || repository.full_name.split('/')[0],\n            repository.name\n          );\n          setHasWriteAccess(writeAccess);\n        } catch (error) {\n          console.warn('Could not check write permissions:', error);\n          setHasWriteAccess(false);\n        }\n      }\n      setLoading(false);\n    };\n\n    checkPermissions();\n  }, [repository, profile]);\n\n  // Close user menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (showUserMenu && !event.target.closest('.user-menu-container')) {\n        setShowUserMenu(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showUserMenu]);\n\n\n\n  // Define the 9 core DAK components based on WHO SMART Guidelines documentation\n  const coreDAKComponents = [\n    {\n      id: 'health-interventions',\n      name: t('dak.healthInterventions'),\n      description: 'Clinical guidelines and health intervention specifications that define evidence-based care recommendations',\n      icon: '📖',\n      cardImage: 'dashboard/dak_interventions.png',\n      type: 'L2',\n      color: '#0078d4',\n      fileTypes: ['IRIS', 'Publication'],\n      count: 5,\n      editor: 'Publication reference manager with IRIS integration'\n    },\n    {\n      id: 'generic-personas',\n      name: t('dak.genericPersonas'),\n      description: 'Standardized user roles and actor definitions that represent different types of healthcare workers and patients',\n      icon: '👥',\n      cardImage: 'dashboard/dak_personas.png',\n      type: 'L2',\n      color: '#107c10',\n      fileTypes: ['Actor', 'Role'],\n      count: 8,\n      editor: 'Persona definition editor with role-based access specifications'\n    },\n    {\n      id: 'user-scenarios',\n      name: t('dak.userScenarios'),\n      description: 'Narrative descriptions of how different personas interact with the system in specific healthcare contexts',\n      icon: '📝',\n      cardImage: 'dashboard/dak_user_scenarios.png',\n      type: 'L2',\n      color: '#881798',\n      fileTypes: ['Narrative', 'Use Case'],\n      count: 12,\n      editor: 'Scenario editor with workflow visualization'\n    },\n    {\n      id: 'business-processes',\n      name: t('dak.businessProcesses'),\n      description: 'BPMN workflows and business process definitions that model clinical workflows and care pathways',\n      icon: '🔄',\n      cardImage: 'dashboard/dak_business_processes.png',\n      type: 'L2',\n      color: '#d13438',\n      fileTypes: ['BPMN', 'XML'],\n      count: 15,\n      editor: 'Graphical BPMN editor with SVG visualization'\n    },\n    {\n      id: 'core-data-elements',\n      name: t('dak.coreDataElements'),\n      description: 'Essential data structures and terminology needed for clinical data capture and exchange (includes Terminology Services via OCL and Product Master Data via PCMT)',\n      icon: '🗃️',\n      cardImage: 'dashboard/dak_core_data_elements.png',\n      type: 'L2',\n      color: '#ff8c00',\n      fileTypes: ['OCL', 'Concept', 'PCMT', 'Product'],\n      count: issueCounts.total || 89,\n      editor: 'Data element editor with OCL and PCMT integration'\n    },\n    {\n      id: 'decision-support',\n      name: t('dak.decisionSupportLogic'),\n      description: 'DMN decision tables and clinical decision support rules that encode clinical logic',\n      icon: '🎯',\n      cardImage: 'dashboard/dak_decision_support_logic.png',\n      type: 'L2',\n      color: '#00bcf2',\n      fileTypes: ['DMN', 'XML'],\n      count: 24,\n      editor: 'DMN decision table editor with validation'\n    },\n    {\n      id: 'program-indicators',\n      name: t('dak.programIndicators'),\n      description: 'Performance indicators and measurement definitions for monitoring and evaluation',\n      icon: '📊',\n      cardImage: 'dashboard/dak_indicators.png',\n      type: 'L2',\n      color: '#498205',\n      fileTypes: ['Measure', 'Logic'],\n      count: 18,\n      editor: 'Indicator definition editor with measurement logic'\n    },\n    {\n      id: 'functional-requirements',\n      name: t('dak.requirements'),\n      description: 'System requirements specifications that define capabilities and constraints',\n      icon: '⚙️',\n      cardImage: 'dashboard/dak_requirements.png',\n      type: 'L2',\n      color: '#6b69d6',\n      fileTypes: ['Requirements', 'Specification'],\n      count: 32,\n      editor: 'Requirements editor with structured templates'\n    },\n    {\n      id: 'test-scenarios',\n      name: t('dak.testScenarios') || 'Test Scenarios',\n      description: 'Feature files and test scenarios for validating the DAK implementation',\n      icon: '🧪',\n      cardImage: 'dashboard/dak_testing.png',\n      type: 'L2',\n      color: '#8b5cf6',\n      fileTypes: ['Feature', 'Test'],\n      count: 0,\n      editor: 'Testing viewer with feature file browser'\n    }\n  ];\n\n\n\n  const handleComponentClick = (event, component) => {\n    const navigationState = {\n      profile,\n      repository,\n      component,\n      selectedBranch\n    };\n    \n    // For decision-support, always navigate to view page (no permission check needed)\n    if (component.id === 'decision-support') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/decision-support-logic/${owner}/${repoName}/${selectedBranch}`\n        : `/decision-support-logic/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For business processes, navigate to selection page without permission check\n    if (component.id === 'business-processes') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/business-process-selection/${owner}/${repoName}/${selectedBranch}`\n        : `/business-process-selection/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n\n\n    // For health-interventions (WHO Digital Library), allow access in read-only mode\n    if (component.id === 'health-interventions') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/health-interventions/${owner}/${repoName}/${selectedBranch}`\n        : `/health-interventions/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For core-data-elements (Component 2 Core Data Dictionary), navigate to viewer\n    if (component.id === 'core-data-elements') {\n      const owner = user || repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repo || repository.name;\n      const branchName = selectedBranch;\n      \n      const viewerPath = branchName ? \n        `/core-data-dictionary-viewer/${owner}/${repoName}/${branchName}` :\n        `/core-data-dictionary-viewer/${owner}/${repoName}`;\n        \n      handleNavigationClick(event, viewerPath, navigate, navigationState);\n      return;\n    }\n\n\n\n    // For generic-personas, navigate to actor editor\n    if (component.id === 'generic-personas') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/actor-editor/${owner}/${repoName}/${selectedBranch}`\n        : `/actor-editor/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For test-scenarios, navigate to testing viewer\n    if (component.id === 'test-scenarios') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/testing-viewer/${owner}/${repoName}/${selectedBranch}`\n        : `/testing-viewer/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For other components, check permissions before proceeding\n    if (!hasWriteAccess) {\n      // If command-click, still show permission dialog instead of opening new tab\n      // since the user needs to authenticate first\n      setShowPermissionDialog(true);\n      return;\n    }\n\n    // Navigate to component-specific routes for other components\n    const owner = repository.owner?.login || repository.full_name.split('/')[0];\n    const repoName = repository.name;\n    const path = selectedBranch \n      ? `/${component.id}/${owner}/${repoName}/${selectedBranch}`\n      : `/${component.id}/${owner}/${repoName}`;\n    \n    handleNavigationClick(event, path, navigate, navigationState);\n  };\n\n\n\n  if (loading) {\n    return (\n      <div className=\"dak-dashboard loading-state\">\n        <div className=\"loading-content\">\n          <h2>Loading Dashboard...</h2>\n          <p>Fetching repository and user data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dak-dashboard error-state\">\n        <div className=\"error-content\">\n          <h2>{t('dashboard.errorLoading')}</h2>\n          <p>{error}</p>\n          <div className=\"error-actions\">\n            <button onClick={() => navigate('/')} className=\"action-btn primary\">\n              {t('navigation.home')}\n            </button>\n            <button onClick={() => window.location.reload()} className=\"action-btn secondary\">\n              {t('common.retry')}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!profile || !repository) {\n    navigate('/');\n    return <div>Redirecting...</div>;\n  }\n\n  return (\n    <div className=\"dak-dashboard\">\n      <div className=\"dashboard-content\">\n        <div className=\"dashboard-main\">\n          <div className=\"dashboard-intro\">\n            <h2>{t('dak.components')}</h2>\n            <p>\n              Select a component to edit content for <strong>{repository.name}</strong>\n              {selectedBranch && (\n                <span> on branch <code className=\"branch-display\">{selectedBranch}</code></span>\n              )}. \n              Components are organized according to the WHO SMART Guidelines framework.\n            </p>\n          </div>\n\n          {/* Fork Status Bar - shows forks of sgex repository */}\n          <ForkStatusBar \n            profile={profile}\n            repository={repository}\n            selectedBranch={selectedBranch}\n          />\n\n          {/* DAK Status Box - only show when repository and branch are selected */}\n          {repository && selectedBranch && (\n            <DAKStatusBox \n              repository={repository}\n              selectedBranch={selectedBranch}\n              hasWriteAccess={hasWriteAccess}\n              profile={profile}\n            />\n          )}\n\n          {/* Tab Navigation - Full Width Toggle Buttons */}\n          <div className=\"tab-navigation-fullwidth\">\n            <button \n              className={`tab-button-fullwidth ${activeTab === 'core' ? 'active' : ''}`}\n              onClick={() => setActiveTab('core')}\n            >\n              <span className=\"tab-icon\">⭐</span>\n              <span className=\"tab-text\">9 Core Components</span>\n            </button>\n            <button\n              className={`tab-button-fullwidth ${activeTab === 'publications' ? 'active' : ''}`}\n              onClick={() => setActiveTab('publications')}\n            >\n              <span className=\"tab-icon\">📚</span>\n              <span className=\"tab-text\">Publications</span>\n            </button>\n            <button\n              className={`tab-button-fullwidth ${activeTab === 'other' ? 'active' : ''}`}\n              onClick={() => setActiveTab('other')}\n            >\n              <span className=\"tab-icon\">🔧</span>\n              <span className=\"tab-text\">Other DAK Components</span>\n            </button>\n            <button\n              className={`tab-button-fullwidth ${activeTab === 'faq' ? 'active' : ''}`}\n              onClick={() => setActiveTab('faq')}\n            >\n              <span className=\"tab-icon\">❓</span>\n              <span className=\"tab-text\">DAK FAQ</span>\n            </button>\n          </div>\n\n          {/* 9 Core DAK Components Section */}\n          {activeTab === 'core' && (\n            <div className=\"components-section active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">{t('dak.components')}</h3>\n                <p className=\"section-description\">\n                  Essential components that form the foundation of any WHO SMART Guidelines Digital Adaptation Kit\n                </p>\n              </div>\n\n              <div className=\"components-grid core-components\">\n                {coreDAKComponents.map((component) => {\n                  return (\n                    <ComponentCard\n                      key={component.id}\n                      component={component}\n                      handleComponentClick={handleComponentClick}\n                      t={t}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Other DAK Components Section */}\n          {activeTab === 'other' && (\n            <div className=\"components-section other-components active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">Other DAK Components</h3>\n                <p className=\"section-description\">\n                  Additional specialized components for advanced DAK functionality and implementation\n                </p>\n              </div>\n\n              <div className=\"components-grid other-components\">\n                <div \n                  className=\"component-card l3\"\n                  onClick={(event) => {\n                    const component = {\n                      id: 'questionnaire-editor',\n                      name: 'FHIR Questionnaires',\n                      description: 'Structured questionnaires and forms for data collection using FHIR standard'\n                    };\n                    const owner = repository.owner?.login || repository.full_name.split('/')[0];\n                    const repoName = repository.name;\n                    const path = selectedBranch \n                      ? `/questionnaire-editor/${owner}/${repoName}/${selectedBranch}`\n                      : `/questionnaire-editor/${owner}/${repoName}`;\n                    \n                    const navigationState = {\n                      profile,\n                      repository,\n                      component,\n                      selectedBranch\n                    };\n                    \n                    handleNavigationClick(event, path, navigate, navigationState);\n                  }}\n                  style={{ '--component-color': '#17a2b8' }}\n                >\n                  <div className=\"component-header\">\n                    <div className=\"component-icon\" style={{ color: '#17a2b8' }}>\n                      📋\n                    </div>\n                  </div>\n                  \n                  <div className=\"component-content\">\n                    <h4>FHIR Questionnaires</h4>\n                    <p>Structured questionnaires and forms for data collection using FHIR Questionnaire standard</p>\n                    \n                    <div className=\"component-meta\">\n                      <div className=\"file-types\">\n                        <span className=\"file-type-tag\">JSON</span>\n                        <span className=\"file-type-tag\">FHIR</span>\n                      </div>\n                      <div className=\"file-count\">\n                        questionnaires/\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Publications Section */}\n          {activeTab === 'publications' && (\n            <div className=\"components-section publications-section active\">\n              <Publications\n                profile={profile}\n                repository={repository}\n                selectedBranch={selectedBranch}\n                hasWriteAccess={hasWriteAccess}\n              />\n            </div>\n          )}\n\n          {/* DAK FAQ Section */}\n          {activeTab === 'faq' && (\n            <div className=\"components-section faq-section active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">DAK FAQ System</h3>\n                <p className=\"section-description\">\n                  Ask questions about this DAK and get automated answers based on repository analysis\n                </p>\n              </div>\n\n              <FAQAccordion\n                repository={`${user}/${repo}`}\n                branch={selectedBranch || 'main'}\n                githubService={githubService}\n                filters={{\n                  level: 'dak' // Start with DAK-level questions\n                }}\n                className=\"dak-faq-accordion\"\n              />\n\n              {/* MCP Server Info */}\n              <div className=\"mcp-info\" style={{ marginTop: '2rem', padding: '1rem', background: '#f8f9fa', borderRadius: '8px' }}>\n                <h4>MCP Server API</h4>\n                {window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' ? (\n                  <>\n                    <p>\n                      The FAQ system can also be accessed programmatically via the MCP server API:\n                    </p>\n                    <ul>\n                      <li><code>GET http://127.0.0.1:3001/faq/questions/catalog</code> - Get question catalog</li>\n                      <li><code>POST http://127.0.0.1:3001/faq/questions/execute</code> - Execute questions</li>\n                    </ul>\n                  </>\n                ) : (\n                  <>\n                    <p>\n                      For programmatic access to the FAQ system, you can install and run the MCP server locally:\n                    </p>\n                    <div style={{ background: '#e9ecef', padding: '1rem', borderRadius: '4px', marginBottom: '1rem' }}>\n                      <h5>Installation Instructions:</h5>\n                      <ol>\n                        <li>Clone the SGEX repository: <code>git clone https://github.com/litlfred/sgex.git</code></li>\n                        <li>Navigate to repository: <code>cd sgex</code></li>\n                        <li>Build MCP server: <code>npm run build-mcp</code></li>\n                        <li>Start MCP server: <code>npm run run-mcp</code></li>\n                      </ol>\n                      <p style={{ margin: '0.5rem 0', fontSize: '0.9em', color: '#6c757d' }}>\n                        <strong>Alternative:</strong> For manual setup, navigate to <code>services/dak-faq-mcp</code> and run <code>npm install && npm run build && npm start</code>\n                      </p>\n                    </div>\n                    <p>\n                      Once running, the MCP server will be available at:\n                    </p>\n                    <ul>\n                      <li><code>GET http://127.0.0.1:3001/faq/questions/catalog</code> - Get question catalog</li>\n                      <li><code>POST http://127.0.0.1:3001/faq/questions/execute</code> - Execute questions</li>\n                    </ul>\n                    <p>\n                      <strong>Note:</strong> The MCP server runs locally for security and provides full API access to the DAK FAQ system.\n                    </p>\n                  </>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Permission Upgrade Dialog */}\n      {showPermissionDialog && (\n        <div className=\"permission-dialog-overlay\">\n          <div className=\"permission-dialog\">\n            <div className=\"dialog-header\">\n              <h3>Edit Access Required</h3>\n              <button \n                className=\"dialog-close\"\n                onClick={() => setShowPermissionDialog(false)}\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"dialog-content\">\n              <div className=\"dialog-mascot\">\n                <img src={mascotImage} alt={getAltText(t, ALT_TEXT_KEYS.MASCOT_HELPER, 'SGEX Helper')} className=\"dialog-mascot-img\" />\n                <div className=\"mascot-message\">\n                  <p>You need edit permissions to modify DAK components!</p>\n                  <p>Your current token only provides read access to this repository.</p>\n                </div>\n              </div>\n              <div className=\"permission-options\">\n                <div className=\"option-card\">\n                  <h4>🔧 Upgrade Your Token</h4>\n                  <p>Create a new fine-grained token with write permissions for this repository.</p>\n                  <div className=\"option-buttons\">\n                    <a \n                      href=\"https://github.com/settings/personal-access-tokens/new\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"btn-primary\"\n                    >\n                      Create New Token\n                    </a>\n                    <HelpButton \n                      helpTopic=\"github-token\"\n                      contextData={{ \n                        repository: { owner: repository.owner?.login || repository.full_name.split('/')[0], name: repository.name },\n                        requiredScopes: ['Contents: Write', 'Metadata: Read', 'Pull requests: Write'],\n                        permissionMode: 'edit',\n                        upgradeMode: true\n                      }}\n                    />\n                  </div>\n                </div>\n                <div className=\"option-card\">\n                  <h4>👁️ Continue in Read-Only Mode</h4>\n                  <p>Browse and view DAK components without editing capabilities.</p>\n                  <button \n                    className=\"btn-secondary\"\n                    onClick={() => setShowPermissionDialog(false)}\n                  >\n                    Continue Read-Only\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DAKDashboard;"],"names":["_ref","helpTopic","contextData","showHelp","setShowHelp","useState","mascotImage","useThemeImage","_jsxs","_Fragment","children","_jsx","className","onClick","handleHelpClick","title","src","alt","HelpModal","topic","onClose","handleCloseHelp","repository","branch","githubService","filters","t","i18n","useTranslation","questions","setQuestions","expandedQuestions","setExpandedQuestions","Set","questionResults","setQuestionResults","Map","loadingQuestions","setLoadingQuestions","loading","setLoading","error","setError","useEffect","async","faqExecutionEngine","initialize","availableQuestions","getCatalog","err","console","message","loadQuestions","executeQuestion","prev","add","questionId","request","parameters","locale","language","replace","context","result","set","concat","structured","narrative","errors","warnings","meta","newSet","delete","sanitizeHTML","html","DOMPurify","sanitize","ALLOWED_TAGS","ALLOWED_ATTR","renderQuestionResult","get","has","length","dangerouslySetInnerHTML","__html","map","index","newMap","retryQuestion","warning","window","location","reload","count","question","isExpanded","id","isLoading","newExpanded","toggleQuestion","description","level","tags","slice","tag","DAKDashboardContent","_location$state","_location$state2","_location$state3","_repository$owner1","useLocation","navigate","useNavigate","user","repo","useParams","profile","setProfile","state","setRepository","hasWriteAccess","setHasWriteAccess","showPermissionDialog","setShowPermissionDialog","activeTab","setActiveTab","selectedBranch","setSelectedBranch","issueCounts","setIssueCounts","showUserMenu","setShowUserMenu","ComponentCard","component","handleComponentClick","imageLoaded","setImageLoaded","imageError","setImageError","cardImagePath","cardImage","type","toLowerCase","event","style","color","tabIndex","role","name","onKeyDown","key","preventDefault","getAltText","ALT_TEXT_KEYS","ICON_DAK_COMPONENT","onLoad","handleImageLoad","onError","handleImageError","display","icon","fileTypes","isAuth","publicProfile","login","charAt","toUpperCase","avatar_url","publicRepository","full_name","owner","default_branch","html_url","userProfile","getUser","warningMessage","repoData","getRepository","dakValidationService","validateDAKRepository","log","getBranch","warn","fetchDataFromUrlParams","storedBranch","branchContextService","getSelectedBranch","defaultBranch","_repository$owner","split","repoName","actualIssues","getIssues","per_page","filter","issue","pull_request","openIssues","closedIssues","total","open","closed","loadIssueCounts","_repository$owner2","writeAccess","checkRepositoryWritePermissions","checkPermissions","handleClickOutside","target","closest","document","addEventListener","removeEventListener","coreDAKComponents","editor","_repository$owner9","navigationState","_repository$owner3","path","handleNavigationClick","_repository$owner4","_repository$owner5","_repository$owner6","branchName","viewerPath","_repository$owner7","_repository$owner8","ForkStatusBar","DAKStatusBox","_repository$owner0","Publications","FAQAccordion","marginTop","padding","background","borderRadius","hostname","marginBottom","margin","fontSize","MASCOT_HELPER","href","rel","HelpButton","requiredScopes","permissionMode","upgradeMode","DAKDashboard","PageLayout","pageName"],"sourceRoot":""}