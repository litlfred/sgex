{"version":3,"file":"static/js/991.718b92e3.chunk.js","mappings":"kIASO,MAkCMA,EAAwB,SAACC,EAAOC,EAAMC,GAA4B,IAAlBC,EAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACnE,GAnCiCJ,OAClB,OAALA,QAAK,IAALA,GAAAA,EAAOO,SAAgB,OAALP,QAAK,IAALA,GAAAA,EAAOQ,SAkC/BC,CAAmBT,GAAQ,CAE7B,MAAMU,EA5BuBC,KAC/B,MAAMC,EAAWC,QACXC,EAAUC,OAAOC,SAASC,OAG1BC,EAAYP,EAAaQ,WAAW,KAAOR,EAAaS,MAAM,GAAKT,EAGzE,IAAKC,EACH,MAAM,GAANS,OAAUP,EAAO,KAAAO,OAAIH,GAIvB,MAAMI,EAAgBV,EAASW,SAAS,KAAOX,EAAWA,EAAW,IAErE,MAAM,GAANS,OAAUP,GAAOO,OAAGC,GAAaD,OAAGH,IAalBM,CAAiBvB,GACjCc,OAAOU,KAAKf,EAAS,SAAU,sBACjC,MAEMP,EACFD,EAASD,EAAM,CAAEE,UAEjBD,EAASD,EAGf,C,yIC/CA,MAQMyB,EAA4BA,KAAO,IAADC,EACtC,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,MACRb,GAAWc,EAAAA,EAAAA,MACX5B,GAAW6B,EAAAA,EAAAA,OACX,QAAEC,IAAYC,EAAAA,EAAAA,MAGdC,GAAeC,EAAAA,EAAAA,GAAc,eAC7BC,GAAeD,EAAAA,EAAAA,GAAc,eAC7BE,GAAcF,EAAAA,EAAAA,GAAc,cAG5BG,EAAmBN,IAAyB,QAAlBL,EAAIX,EAASb,aAAK,IAAAwB,OAAA,EAAdA,EAAgBK,SAK9CO,EAAa,CACjB,CACEC,GAAI,OACJC,MAAO,oBACPC,YAAa,uHACbC,KAAMT,EACNU,MAAO,WAET,CACEJ,GAAI,OACJC,MAAO,oBACPC,YAAa,qIACbC,KAAMP,EACNQ,MAAO,WAET,CACEJ,GAAI,SACJC,MAAO,iBACPC,YAAa,+IACbC,KAAMN,EACNO,MAAO,YAcX,OAAKN,GAKHO,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,UAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kBACJF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,kBAAiBC,SAAC,+KAGnCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAGfD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,SAC1BR,EAAWU,IAAKC,IACfF,EAAAA,EAAAA,MAAA,OAEEF,UAAS,cACTK,QAAUnD,GA/BKoD,EAACpD,EAAOqD,KAEjC,MAAMC,EAAkB,CACtBtB,QAASM,EACTY,OAAQG,IAGVtD,EAAAA,EAAAA,IAAsBC,EAAM,kBAADqB,OAAoBiB,EAAiBiB,OAASrD,EAAUoD,IAwBrDF,CAAmBpD,EAAOkD,EAAOV,IACrDgB,MAAO,CAAE,iBAAkBN,EAAON,OAAQG,SAAA,EAE1CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAcU,MAAO,CAAEZ,MAAOM,EAAON,OAAQG,UAC1DF,EAAAA,EAAAA,KAAA,OAAKY,IAAKP,EAAOP,KAAMe,KAAKC,EAAAA,EAAAA,IAAW/B,EAAGgC,EAAAA,GAAcC,YAAaX,EAAOT,MAAO,CAAEA,MAAOS,EAAOT,aAGrGI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBC,UACjCF,EAAAA,EAAAA,KAAA,KAAAE,SAAIG,EAAOR,iBAGbM,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,CACf,SAAdG,EAAOV,KACNQ,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,OAAMC,SAAC,mBACvBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,OAAMC,SAAC,0BAGZ,SAAdG,EAAOV,KACNQ,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,OAAMC,SAAC,0BACvBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,OAAMC,SAAC,2BACvBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,OAAMC,SAAC,0BAGZ,WAAdG,EAAOV,KACNQ,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,OAAMC,SAAC,wBACvBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,OAAMC,SAAC,2BACvBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,OAAMC,SAAC,sBACvBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,OAAMC,SAAC,+BAhCxBG,EAAOV,aAlBfK,EAAAA,EAAAA,KAAA,OAAAE,SAAK,oBA8DhB,EA1H2Be,KAEvBjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAU,CAACC,SAAS,uBAAsBjB,UACzCF,EAAAA,EAAAA,KAACnB,EAAyB,K","sources":["utils/navigationUtils.js","components/DAKActionSelection.js"],"sourcesContent":["/**\n * Utility functions for handling navigation with command-click support\n */\n\n/**\n * Detects if a click event should open in a new tab\n * @param {MouseEvent} event - The click event\n * @returns {boolean} - True if should open in new tab (Ctrl/Cmd+click)\n */\nexport const shouldOpenInNewTab = (event) => {\n  return !!(event?.ctrlKey || event?.metaKey); // Ctrl on Windows/Linux, Cmd on Mac\n};\n\n/**\n * Constructs a full URL from a relative path using the current base URL\n * @param {string} relativePath - The relative path (e.g., '/dashboard/user/repo')\n * @returns {string} - The full URL\n */\nexport const constructFullUrl = (relativePath) => {\n  const basePath = process.env.PUBLIC_URL || '';\n  const baseUrl = window.location.origin;\n  \n  // Remove leading slash from relativePath if present to avoid double slashes\n  const cleanPath = relativePath.startsWith('/') ? relativePath.slice(1) : relativePath;\n  \n  // Only add basePath if it's not empty\n  if (!basePath) {\n    return `${baseUrl}/${cleanPath}`;\n  }\n  \n  // Ensure basePath ends with slash for proper joining\n  const cleanBasePath = basePath.endsWith('/') ? basePath : basePath + '/';\n  \n  return `${baseUrl}${cleanBasePath}${cleanPath}`;\n};\n\n/**\n * Handles navigation with command-click support\n * @param {MouseEvent} event - The click event\n * @param {string} path - The navigation path\n * @param {Function} navigate - React Router navigate function\n * @param {Object} state - Optional state to pass with navigation\n */\nexport const handleNavigationClick = (event, path, navigate, state = null) => {\n  if (shouldOpenInNewTab(event)) {\n    // Open in new tab\n    const fullUrl = constructFullUrl(path);\n    window.open(fullUrl, '_blank', 'noopener,noreferrer');\n  } else {\n    // Navigate in same tab\n    if (state) {\n      navigate(path, { state });\n    } else {\n      navigate(path);\n    }\n  }\n};\n\n/**\n * Creates a click handler that supports command-click for new tabs\n * @param {string} path - The navigation path\n * @param {Function} navigate - React Router navigate function\n * @param {Object} state - Optional state to pass with navigation\n * @returns {Function} - Click handler function\n */\nexport const createNavigationClickHandler = (path, navigate, state = null) => {\n  return (event) => {\n    handleNavigationClick(event, path, navigate, state);\n  };\n};","import React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { PageLayout, usePageParams } from './framework';\nimport { handleNavigationClick } from '../utils/navigationUtils';\nimport useThemeImage from '../hooks/useThemeImage';\nimport { ALT_TEXT_KEYS, getAltText } from '../utils/imageAltTextHelper';\nimport './DAKActionSelection.css';\n\nconst DAKActionSelection = () => {\n  return (\n    <PageLayout pageName=\"dak-action-selection\">\n      <DAKActionSelectionContent />\n    </PageLayout>\n  );\n};\n\nconst DAKActionSelectionContent = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { profile } = usePageParams();\n  \n  // Theme-aware action images\n  const editingImage = useThemeImage('editing.png');\n  const forkingImage = useThemeImage('forking.png');\n  const createImage = useThemeImage('create.png');\n  \n  // Use profile from framework (PageProvider) or location state\n  const effectiveProfile = profile || location.state?.profile;\n\n  // Note: Profile validation is handled by PageLayout framework\n  // When accessing directly via URL, the framework will load the profile based on URL params\n\n  const dakActions = [\n    {\n      id: 'edit',\n      title: 'Edit Existing DAK',\n      description: 'Select and modify an existing DAK that you have permission to edit. Changes will be made directly to the repository.',\n      icon: editingImage,\n      color: '#0078d4'\n    },\n    {\n      id: 'fork', \n      title: 'Fork Existing DAK',\n      description: 'Create a copy of an existing DAK in your own organization or account. You will be able to modify the forked version independently.',\n      icon: forkingImage,\n      color: '#107c10'\n    },\n    {\n      id: 'create',\n      title: 'Create New DAK',\n      description: 'Create a new DAK from the WHO SMART Guidelines template (smart-ig-empty). You\\'ll configure basic parameters and start with a clean template.',\n      icon: createImage,\n      color: '#881798'\n    }\n  ];\n\n  const handleActionSelect = (event, actionId) => {\n    // Navigate directly to the DAK selection with the chosen action and user parameter\n    const navigationState = { \n      profile: effectiveProfile, \n      action: actionId \n    };\n    \n    handleNavigationClick(event, `/dak-selection/${effectiveProfile.login}`, navigate, navigationState);\n  };\n\n  if (!effectiveProfile) {\n    return <div>Redirecting...</div>;\n  }\n\n  return (\n    <div className=\"action-content\">\n      <div className=\"action-main\">\n        <div className=\"action-header\">\n          <div className=\"action-title\">\n            <h1>Manage a DAK</h1>\n            <p className=\"action-subtitle\">Choose how you would like to work with a WHO SMART Guidelines Digital Adaptation Kit (DAK). Each option provides different workflows for DAK management and editing.</p>\n          </div>\n        </div>\n        <div className=\"action-intro\">\n        </div>\n\n        <div className=\"actions-grid\">\n          {dakActions.map((action) => (\n            <div \n              key={action.id}\n              className={`action-card`}\n              onClick={(event) => handleActionSelect(event, action.id)}\n              style={{ '--action-color': action.color }}\n            >\n              <div className=\"action-icon\" style={{ color: action.color }}>\n                <img src={action.icon} alt={getAltText(t, ALT_TEXT_KEYS.ICON_ACTION, action.title, { title: action.title })} />\n              </div>\n              \n              <div className=\"action-description\">\n                <p>{action.description}</p>\n              </div>\n\n              <div className=\"action-workflow\">\n                {action.id === 'edit' && (\n                  <div className=\"workflow-steps\">\n                    <span className=\"step\">1. Select DAK</span>\n                    <span className=\"step\">2. Edit Components</span>\n                  </div>\n                )}\n                {action.id === 'fork' && (\n                  <div className=\"workflow-steps\">\n                    <span className=\"step\">1. Select Source DAK</span>\n                    <span className=\"step\">2. Select Destination</span>\n                    <span className=\"step\">3. Edit Components</span>\n                  </div>\n                )}\n                {action.id === 'create' && (\n                  <div className=\"workflow-steps\">\n                    <span className=\"step\">1. Select Template</span>\n                    <span className=\"step\">2. Select Destination</span>\n                    <span className=\"step\">3. Configure DAK</span>\n                    <span className=\"step\">4. Edit Components</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DAKActionSelection;"],"names":["handleNavigationClick","event","path","navigate","state","arguments","length","undefined","ctrlKey","metaKey","shouldOpenInNewTab","fullUrl","relativePath","basePath","process","baseUrl","window","location","origin","cleanPath","startsWith","slice","concat","cleanBasePath","endsWith","constructFullUrl","open","DAKActionSelectionContent","_location$state","t","useTranslation","useLocation","useNavigate","profile","usePageParams","editingImage","useThemeImage","forkingImage","createImage","effectiveProfile","dakActions","id","title","description","icon","color","_jsx","className","children","_jsxs","map","action","onClick","handleActionSelect","actionId","navigationState","login","style","src","alt","getAltText","ALT_TEXT_KEYS","ICON_ACTION","DAKActionSelection","PageLayout","pageName"],"sourceRoot":""}