{"version":3,"file":"static/js/7003.e2d50252.chunk.js","mappings":"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","sources":["../node_modules/ajv/lib/compile/validate/applicability.ts","../node_modules/fast-deep-equal/index.js","../node_modules/ajv/lib/vocabularies/applicator/items.ts","../node_modules/fast-uri/lib/utils.js","../node_modules/ajv/lib/compile/validate/subschema.ts","../node_modules/ajv/lib/vocabularies/validation/limitNumber.ts","../node_modules/ajv/lib/vocabularies/core/ref.ts","../node_modules/ajv/lib/vocabularies/core/index.ts","../node_modules/ajv/lib/vocabularies/discriminator/types.ts","../node_modules/ajv/lib/vocabularies/format/format.ts","../node_modules/ajv/lib/runtime/ucs2length.ts","../node_modules/ajv/lib/runtime/validation_error.ts","../node_modules/ajv/lib/core.ts","../node_modules/ajv/lib/vocabularies/validation/limitLength.ts","../node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js","../node_modules/ajv/lib/compile/index.ts","../node_modules/ajv/lib/compile/validate/defaults.ts","../node_modules/ajv/lib/compile/rules.ts","../node_modules/ajv/lib/compile/codegen/scope.ts","../node_modules/ajv/lib/compile/codegen/index.ts","../node_modules/ajv/lib/compile/validate/keyword.ts","../node_modules/ajv/lib/vocabularies/code.ts","../node_modules/ajv/lib/vocabularies/applicator/additionalItems.ts","../node_modules/fast-uri/lib/schemes.js","../node_modules/ajv/lib/compile/resolve.ts","../node_modules/ajv/lib/vocabularies/core/id.ts","../node_modules/ajv/lib/vocabularies/applicator/index.ts","../node_modules/ajv/lib/compile/errors.ts","../node_modules/ajv/lib/vocabularies/validation/limitItems.ts","../node_modules/ajv/lib/compile/validate/boolSchema.ts","../node_modules/ajv/lib/compile/ref_error.ts","../node_modules/ajv/lib/vocabularies/applicator/propertyNames.ts","../node_modules/ajv/lib/runtime/equal.ts","../node_modules/ajv/lib/vocabularies/validation/uniqueItems.ts","../node_modules/fast-uri/lib/scopedChars.js","../node_modules/ajv/lib/vocabularies/applicator/items2020.ts","../node_modules/ajv/lib/vocabularies/applicator/contains.ts","../node_modules/ajv/lib/vocabularies/validation/limitProperties.ts","../node_modules/ajv/lib/vocabularies/validation/const.ts","../node_modules/ajv/lib/vocabularies/applicator/dependencies.ts","../node_modules/ajv/lib/compile/validate/index.ts","../node_modules/ajv/lib/compile/codegen/code.ts","../node_modules/ajv/lib/vocabularies/metadata.ts","../node_modules/ajv/lib/vocabularies/validation/enum.ts","../node_modules/ajv/lib/compile/validate/dataType.ts","../node_modules/ajv/lib/vocabularies/applicator/prefixItems.ts","../node_modules/ajv/lib/vocabularies/applicator/properties.ts","../node_modules/ajv/lib/runtime/uri.ts","../node_modules/ajv/lib/ajv.ts","../node_modules/json-schema-traverse/index.js","../node_modules/ajv/lib/vocabularies/applicator/additionalProperties.ts","../node_modules/ajv/lib/vocabularies/applicator/thenElse.ts","../node_modules/ajv/lib/vocabularies/applicator/anyOf.ts","../node_modules/fast-uri/index.js","../node_modules/ajv/lib/vocabularies/validation/required.ts","../node_modules/ajv/lib/vocabularies/applicator/patternProperties.ts","../node_modules/ajv/lib/vocabularies/applicator/allOf.ts","../node_modules/ajv/lib/vocabularies/validation/multipleOf.ts","../node_modules/ajv/lib/compile/util.ts","../node_modules/ajv/lib/vocabularies/discriminator/index.ts","../node_modules/ajv/lib/compile/names.ts","../node_modules/ajv/lib/vocabularies/validation/pattern.ts","../node_modules/ajv/lib/vocabularies/validation/index.ts","../node_modules/ajv/lib/vocabularies/applicator/if.ts","../node_modules/ajv/lib/vocabularies/applicator/oneOf.ts","../node_modules/ajv/lib/vocabularies/format/index.ts","../node_modules/ajv/lib/vocabularies/applicator/not.ts","../node_modules/ajv/lib/vocabularies/draft7.ts"],"sourcesContent":["import type {AnySchemaObject} from \"../../types\"\nimport type {SchemaObjCxt} from \"..\"\nimport type {JSONType, RuleGroup, Rule} from \"../rules\"\n\nexport function schemaHasRulesForType(\n  {schema, self}: SchemaObjCxt,\n  type: JSONType\n): boolean | undefined {\n  const group = self.RULES.types[type]\n  return group && group !== true && shouldUseGroup(schema, group)\n}\n\nexport function shouldUseGroup(schema: AnySchemaObject, group: RuleGroup): boolean {\n  return group.rules.some((rule) => shouldUseRule(schema, rule))\n}\n\nexport function shouldUseRule(schema: AnySchemaObject, rule: Rule): boolean | undefined {\n  return (\n    schema[rule.keyword] !== undefined ||\n    rule.definition.implements?.some((kwd) => schema[kwd] !== undefined)\n  )\n}\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","import type {CodeKeywordDefinition, AnySchema, AnySchemaObject} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_} from \"../../compile/codegen\"\nimport {alwaysValidSchema, mergeEvaluated, checkStrictMode} from \"../../compile/util\"\nimport {validateArray} from \"../code\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"items\",\n  type: \"array\",\n  schemaType: [\"object\", \"array\", \"boolean\"],\n  before: \"uniqueItems\",\n  code(cxt: KeywordCxt) {\n    const {schema, it} = cxt\n    if (Array.isArray(schema)) return validateTuple(cxt, \"additionalItems\", schema)\n    it.items = true\n    if (alwaysValidSchema(it, schema)) return\n    cxt.ok(validateArray(cxt))\n  },\n}\n\nexport function validateTuple(\n  cxt: KeywordCxt,\n  extraItems: string,\n  schArr: AnySchema[] = cxt.schema\n): void {\n  const {gen, parentSchema, data, keyword, it} = cxt\n  checkStrictTuple(parentSchema)\n  if (it.opts.unevaluated && schArr.length && it.items !== true) {\n    it.items = mergeEvaluated.items(gen, schArr.length, it.items)\n  }\n  const valid = gen.name(\"valid\")\n  const len = gen.const(\"len\", _`${data}.length`)\n  schArr.forEach((sch: AnySchema, i: number) => {\n    if (alwaysValidSchema(it, sch)) return\n    gen.if(_`${len} > ${i}`, () =>\n      cxt.subschema(\n        {\n          keyword,\n          schemaProp: i,\n          dataProp: i,\n        },\n        valid\n      )\n    )\n    cxt.ok(valid)\n  })\n\n  function checkStrictTuple(sch: AnySchemaObject): void {\n    const {opts, errSchemaPath} = it\n    const l = schArr.length\n    const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false)\n    if (opts.strictTuples && !fullTuple) {\n      const msg = `\"${keyword}\" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path \"${errSchemaPath}\"`\n      checkStrictMode(it, msg, opts.strictTuples)\n    }\n  }\n}\n\nexport default def\n","'use strict'\n\nconst { HEX } = require('./scopedChars')\n\nconst IPV4_REG = /^(?:(?:25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]\\d|\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]\\d|\\d)$/u\n\nfunction normalizeIPv4 (host) {\n  if (findToken(host, '.') < 3) { return { host, isIPV4: false } }\n  const matches = host.match(IPV4_REG) || []\n  const [address] = matches\n  if (address) {\n    return { host: stripLeadingZeros(address, '.'), isIPV4: true }\n  } else {\n    return { host, isIPV4: false }\n  }\n}\n\n/**\n * @param {string[]} input\n * @param {boolean} [keepZero=false]\n * @returns {string|undefined}\n */\nfunction stringArrayToHexStripped (input, keepZero = false) {\n  let acc = ''\n  let strip = true\n  for (const c of input) {\n    if (HEX[c] === undefined) return undefined\n    if (c !== '0' && strip === true) strip = false\n    if (!strip) acc += c\n  }\n  if (keepZero && acc.length === 0) acc = '0'\n  return acc\n}\n\nfunction getIPV6 (input) {\n  let tokenCount = 0\n  const output = { error: false, address: '', zone: '' }\n  const address = []\n  const buffer = []\n  let isZone = false\n  let endipv6Encountered = false\n  let endIpv6 = false\n\n  function consume () {\n    if (buffer.length) {\n      if (isZone === false) {\n        const hex = stringArrayToHexStripped(buffer)\n        if (hex !== undefined) {\n          address.push(hex)\n        } else {\n          output.error = true\n          return false\n        }\n      }\n      buffer.length = 0\n    }\n    return true\n  }\n\n  for (let i = 0; i < input.length; i++) {\n    const cursor = input[i]\n    if (cursor === '[' || cursor === ']') { continue }\n    if (cursor === ':') {\n      if (endipv6Encountered === true) {\n        endIpv6 = true\n      }\n      if (!consume()) { break }\n      tokenCount++\n      address.push(':')\n      if (tokenCount > 7) {\n        // not valid\n        output.error = true\n        break\n      }\n      if (i - 1 >= 0 && input[i - 1] === ':') {\n        endipv6Encountered = true\n      }\n      continue\n    } else if (cursor === '%') {\n      if (!consume()) { break }\n      // switch to zone detection\n      isZone = true\n    } else {\n      buffer.push(cursor)\n      continue\n    }\n  }\n  if (buffer.length) {\n    if (isZone) {\n      output.zone = buffer.join('')\n    } else if (endIpv6) {\n      address.push(buffer.join(''))\n    } else {\n      address.push(stringArrayToHexStripped(buffer))\n    }\n  }\n  output.address = address.join('')\n  return output\n}\n\nfunction normalizeIPv6 (host) {\n  if (findToken(host, ':') < 2) { return { host, isIPV6: false } }\n  const ipv6 = getIPV6(host)\n\n  if (!ipv6.error) {\n    let newHost = ipv6.address\n    let escapedHost = ipv6.address\n    if (ipv6.zone) {\n      newHost += '%' + ipv6.zone\n      escapedHost += '%25' + ipv6.zone\n    }\n    return { host: newHost, escapedHost, isIPV6: true }\n  } else {\n    return { host, isIPV6: false }\n  }\n}\n\nfunction stripLeadingZeros (str, token) {\n  let out = ''\n  let skip = true\n  const l = str.length\n  for (let i = 0; i < l; i++) {\n    const c = str[i]\n    if (c === '0' && skip) {\n      if ((i + 1 <= l && str[i + 1] === token) || i + 1 === l) {\n        out += c\n        skip = false\n      }\n    } else {\n      if (c === token) {\n        skip = true\n      } else {\n        skip = false\n      }\n      out += c\n    }\n  }\n  return out\n}\n\nfunction findToken (str, token) {\n  let ind = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === token) ind++\n  }\n  return ind\n}\n\nconst RDS1 = /^\\.\\.?\\//u\nconst RDS2 = /^\\/\\.(?:\\/|$)/u\nconst RDS3 = /^\\/\\.\\.(?:\\/|$)/u\nconst RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/u\n\nfunction removeDotSegments (input) {\n  const output = []\n\n  while (input.length) {\n    if (input.match(RDS1)) {\n      input = input.replace(RDS1, '')\n    } else if (input.match(RDS2)) {\n      input = input.replace(RDS2, '/')\n    } else if (input.match(RDS3)) {\n      input = input.replace(RDS3, '/')\n      output.pop()\n    } else if (input === '.' || input === '..') {\n      input = ''\n    } else {\n      const im = input.match(RDS5)\n      if (im) {\n        const s = im[0]\n        input = input.slice(s.length)\n        output.push(s)\n      } else {\n        throw new Error('Unexpected dot segment condition')\n      }\n    }\n  }\n  return output.join('')\n}\n\nfunction normalizeComponentEncoding (components, esc) {\n  const func = esc !== true ? escape : unescape\n  if (components.scheme !== undefined) {\n    components.scheme = func(components.scheme)\n  }\n  if (components.userinfo !== undefined) {\n    components.userinfo = func(components.userinfo)\n  }\n  if (components.host !== undefined) {\n    components.host = func(components.host)\n  }\n  if (components.path !== undefined) {\n    components.path = func(components.path)\n  }\n  if (components.query !== undefined) {\n    components.query = func(components.query)\n  }\n  if (components.fragment !== undefined) {\n    components.fragment = func(components.fragment)\n  }\n  return components\n}\n\nfunction recomposeAuthority (components) {\n  const uriTokens = []\n\n  if (components.userinfo !== undefined) {\n    uriTokens.push(components.userinfo)\n    uriTokens.push('@')\n  }\n\n  if (components.host !== undefined) {\n    let host = unescape(components.host)\n    const ipV4res = normalizeIPv4(host)\n\n    if (ipV4res.isIPV4) {\n      host = ipV4res.host\n    } else {\n      const ipV6res = normalizeIPv6(ipV4res.host)\n      if (ipV6res.isIPV6 === true) {\n        host = `[${ipV6res.escapedHost}]`\n      } else {\n        host = components.host\n      }\n    }\n    uriTokens.push(host)\n  }\n\n  if (typeof components.port === 'number' || typeof components.port === 'string') {\n    uriTokens.push(':')\n    uriTokens.push(String(components.port))\n  }\n\n  return uriTokens.length ? uriTokens.join('') : undefined\n};\n\nmodule.exports = {\n  recomposeAuthority,\n  normalizeComponentEncoding,\n  removeDotSegments,\n  normalizeIPv4,\n  normalizeIPv6,\n  stringArrayToHexStripped\n}\n","import type {AnySchema} from \"../../types\"\nimport type {SchemaObjCxt} from \"..\"\nimport {_, str, getProperty, Code, Name} from \"../codegen\"\nimport {escapeFragment, getErrorPath, Type} from \"../util\"\nimport type {JSONType} from \"../rules\"\n\nexport interface SubschemaContext {\n  // TODO use Optional? align with SchemCxt property types\n  schema: AnySchema\n  schemaPath: Code\n  errSchemaPath: string\n  topSchemaRef?: Code\n  errorPath?: Code\n  dataLevel?: number\n  dataTypes?: JSONType[]\n  data?: Name\n  parentData?: Name\n  parentDataProperty?: Code | number\n  dataNames?: Name[]\n  dataPathArr?: (Code | number)[]\n  propertyName?: Name\n  jtdDiscriminator?: string\n  jtdMetadata?: boolean\n  compositeRule?: true\n  createErrors?: boolean\n  allErrors?: boolean\n}\n\nexport type SubschemaArgs = Partial<{\n  keyword: string\n  schemaProp: string | number\n  schema: AnySchema\n  schemaPath: Code\n  errSchemaPath: string\n  topSchemaRef: Code\n  data: Name | Code\n  dataProp: Code | string | number\n  dataTypes: JSONType[]\n  definedProperties: Set<string>\n  propertyName: Name\n  dataPropType: Type\n  jtdDiscriminator: string\n  jtdMetadata: boolean\n  compositeRule: true\n  createErrors: boolean\n  allErrors: boolean\n}>\n\nexport function getSubschema(\n  it: SchemaObjCxt,\n  {keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef}: SubschemaArgs\n): SubschemaContext {\n  if (keyword !== undefined && schema !== undefined) {\n    throw new Error('both \"keyword\" and \"schema\" passed, only one allowed')\n  }\n\n  if (keyword !== undefined) {\n    const sch = it.schema[keyword]\n    return schemaProp === undefined\n      ? {\n          schema: sch,\n          schemaPath: _`${it.schemaPath}${getProperty(keyword)}`,\n          errSchemaPath: `${it.errSchemaPath}/${keyword}`,\n        }\n      : {\n          schema: sch[schemaProp],\n          schemaPath: _`${it.schemaPath}${getProperty(keyword)}${getProperty(schemaProp)}`,\n          errSchemaPath: `${it.errSchemaPath}/${keyword}/${escapeFragment(schemaProp)}`,\n        }\n  }\n\n  if (schema !== undefined) {\n    if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {\n      throw new Error('\"schemaPath\", \"errSchemaPath\" and \"topSchemaRef\" are required with \"schema\"')\n    }\n    return {\n      schema,\n      schemaPath,\n      topSchemaRef,\n      errSchemaPath,\n    }\n  }\n\n  throw new Error('either \"keyword\" or \"schema\" must be passed')\n}\n\nexport function extendSubschemaData(\n  subschema: SubschemaContext,\n  it: SchemaObjCxt,\n  {dataProp, dataPropType: dpType, data, dataTypes, propertyName}: SubschemaArgs\n): void {\n  if (data !== undefined && dataProp !== undefined) {\n    throw new Error('both \"data\" and \"dataProp\" passed, only one allowed')\n  }\n\n  const {gen} = it\n\n  if (dataProp !== undefined) {\n    const {errorPath, dataPathArr, opts} = it\n    const nextData = gen.let(\"data\", _`${it.data}${getProperty(dataProp)}`, true)\n    dataContextProps(nextData)\n    subschema.errorPath = str`${errorPath}${getErrorPath(dataProp, dpType, opts.jsPropertySyntax)}`\n    subschema.parentDataProperty = _`${dataProp}`\n    subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty]\n  }\n\n  if (data !== undefined) {\n    const nextData = data instanceof Name ? data : gen.let(\"data\", data, true) // replaceable if used once?\n    dataContextProps(nextData)\n    if (propertyName !== undefined) subschema.propertyName = propertyName\n    // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr\n  }\n\n  if (dataTypes) subschema.dataTypes = dataTypes\n\n  function dataContextProps(_nextData: Name): void {\n    subschema.data = _nextData\n    subschema.dataLevel = it.dataLevel + 1\n    subschema.dataTypes = []\n    it.definedProperties = new Set<string>()\n    subschema.parentData = it.data\n    subschema.dataNames = [...it.dataNames, _nextData]\n  }\n}\n\nexport function extendSubschemaMode(\n  subschema: SubschemaContext,\n  {jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors}: SubschemaArgs\n): void {\n  if (compositeRule !== undefined) subschema.compositeRule = compositeRule\n  if (createErrors !== undefined) subschema.createErrors = createErrors\n  if (allErrors !== undefined) subschema.allErrors = allErrors\n  subschema.jtdDiscriminator = jtdDiscriminator // not inherited\n  subschema.jtdMetadata = jtdMetadata // not inherited\n}\n","import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, operators, Code} from \"../../compile/codegen\"\n\nconst ops = operators\n\ntype Kwd = \"maximum\" | \"minimum\" | \"exclusiveMaximum\" | \"exclusiveMinimum\"\n\ntype Comparison = \"<=\" | \">=\" | \"<\" | \">\"\n\nconst KWDs: {[K in Kwd]: {okStr: Comparison; ok: Code; fail: Code}} = {\n  maximum: {okStr: \"<=\", ok: ops.LTE, fail: ops.GT},\n  minimum: {okStr: \">=\", ok: ops.GTE, fail: ops.LT},\n  exclusiveMaximum: {okStr: \"<\", ok: ops.LT, fail: ops.GTE},\n  exclusiveMinimum: {okStr: \">\", ok: ops.GT, fail: ops.LTE},\n}\n\nexport type LimitNumberError = ErrorObject<\n  Kwd,\n  {limit: number; comparison: Comparison},\n  number | {$data: string}\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({keyword, schemaCode}) => str`must be ${KWDs[keyword as Kwd].okStr} ${schemaCode}`,\n  params: ({keyword, schemaCode}) =>\n    _`{comparison: ${KWDs[keyword as Kwd].okStr}, limit: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: Object.keys(KWDs),\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {keyword, data, schemaCode} = cxt\n    cxt.fail$data(_`${data} ${KWDs[keyword as Kwd].fail} ${schemaCode} || isNaN(${data})`)\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition, AnySchema} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport MissingRefError from \"../../compile/ref_error\"\nimport {callValidateCode} from \"../code\"\nimport {_, nil, stringify, Code, Name} from \"../../compile/codegen\"\nimport N from \"../../compile/names\"\nimport {SchemaEnv, resolveRef} from \"../../compile\"\nimport {mergeEvaluated} from \"../../compile/util\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"$ref\",\n  schemaType: \"string\",\n  code(cxt: KeywordCxt): void {\n    const {gen, schema: $ref, it} = cxt\n    const {baseId, schemaEnv: env, validateName, opts, self} = it\n    const {root} = env\n    if (($ref === \"#\" || $ref === \"#/\") && baseId === root.baseId) return callRootRef()\n    const schOrEnv = resolveRef.call(self, root, baseId, $ref)\n    if (schOrEnv === undefined) throw new MissingRefError(it.opts.uriResolver, baseId, $ref)\n    if (schOrEnv instanceof SchemaEnv) return callValidate(schOrEnv)\n    return inlineRefSchema(schOrEnv)\n\n    function callRootRef(): void {\n      if (env === root) return callRef(cxt, validateName, env, env.$async)\n      const rootName = gen.scopeValue(\"root\", {ref: root})\n      return callRef(cxt, _`${rootName}.validate`, root, root.$async)\n    }\n\n    function callValidate(sch: SchemaEnv): void {\n      const v = getValidate(cxt, sch)\n      callRef(cxt, v, sch, sch.$async)\n    }\n\n    function inlineRefSchema(sch: AnySchema): void {\n      const schName = gen.scopeValue(\n        \"schema\",\n        opts.code.source === true ? {ref: sch, code: stringify(sch)} : {ref: sch}\n      )\n      const valid = gen.name(\"valid\")\n      const schCxt = cxt.subschema(\n        {\n          schema: sch,\n          dataTypes: [],\n          schemaPath: nil,\n          topSchemaRef: schName,\n          errSchemaPath: $ref,\n        },\n        valid\n      )\n      cxt.mergeEvaluated(schCxt)\n      cxt.ok(valid)\n    }\n  },\n}\n\nexport function getValidate(cxt: KeywordCxt, sch: SchemaEnv): Code {\n  const {gen} = cxt\n  return sch.validate\n    ? gen.scopeValue(\"validate\", {ref: sch.validate})\n    : _`${gen.scopeValue(\"wrapper\", {ref: sch})}.validate`\n}\n\nexport function callRef(cxt: KeywordCxt, v: Code, sch?: SchemaEnv, $async?: boolean): void {\n  const {gen, it} = cxt\n  const {allErrors, schemaEnv: env, opts} = it\n  const passCxt = opts.passContext ? N.this : nil\n  if ($async) callAsyncRef()\n  else callSyncRef()\n\n  function callAsyncRef(): void {\n    if (!env.$async) throw new Error(\"async schema referenced by sync schema\")\n    const valid = gen.let(\"valid\")\n    gen.try(\n      () => {\n        gen.code(_`await ${callValidateCode(cxt, v, passCxt)}`)\n        addEvaluatedFrom(v) // TODO will not work with async, it has to be returned with the result\n        if (!allErrors) gen.assign(valid, true)\n      },\n      (e) => {\n        gen.if(_`!(${e} instanceof ${it.ValidationError as Name})`, () => gen.throw(e))\n        addErrorsFrom(e)\n        if (!allErrors) gen.assign(valid, false)\n      }\n    )\n    cxt.ok(valid)\n  }\n\n  function callSyncRef(): void {\n    cxt.result(\n      callValidateCode(cxt, v, passCxt),\n      () => addEvaluatedFrom(v),\n      () => addErrorsFrom(v)\n    )\n  }\n\n  function addErrorsFrom(source: Code): void {\n    const errs = _`${source}.errors`\n    gen.assign(N.vErrors, _`${N.vErrors} === null ? ${errs} : ${N.vErrors}.concat(${errs})`) // TODO tagged\n    gen.assign(N.errors, _`${N.vErrors}.length`)\n  }\n\n  function addEvaluatedFrom(source: Code): void {\n    if (!it.opts.unevaluated) return\n    const schEvaluated = sch?.validate?.evaluated\n    // TODO refactor\n    if (it.props !== true) {\n      if (schEvaluated && !schEvaluated.dynamicProps) {\n        if (schEvaluated.props !== undefined) {\n          it.props = mergeEvaluated.props(gen, schEvaluated.props, it.props)\n        }\n      } else {\n        const props = gen.var(\"props\", _`${source}.evaluated.props`)\n        it.props = mergeEvaluated.props(gen, props, it.props, Name)\n      }\n    }\n    if (it.items !== true) {\n      if (schEvaluated && !schEvaluated.dynamicItems) {\n        if (schEvaluated.items !== undefined) {\n          it.items = mergeEvaluated.items(gen, schEvaluated.items, it.items)\n        }\n      } else {\n        const items = gen.var(\"items\", _`${source}.evaluated.items`)\n        it.items = mergeEvaluated.items(gen, items, it.items, Name)\n      }\n    }\n  }\n}\n\nexport default def\n","import type {Vocabulary} from \"../../types\"\nimport idKeyword from \"./id\"\nimport refKeyword from \"./ref\"\n\nconst core: Vocabulary = [\n  \"$schema\",\n  \"$id\",\n  \"$defs\",\n  \"$vocabulary\",\n  {keyword: \"$comment\"},\n  \"definitions\",\n  idKeyword,\n  refKeyword,\n]\n\nexport default core\n","import type {ErrorObject} from \"../../types\"\n\nexport enum DiscrError {\n  Tag = \"tag\",\n  Mapping = \"mapping\",\n}\n\nexport type DiscrErrorObj<E extends DiscrError> = ErrorObject<\n  \"discriminator\",\n  {error: E; tag: string; tagValue: unknown},\n  string\n>\n","import type {\n  AddedFormat,\n  FormatValidator,\n  AsyncFormatValidator,\n  CodeKeywordDefinition,\n  KeywordErrorDefinition,\n  ErrorObject,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, nil, or, Code, getProperty, regexpCode} from \"../../compile/codegen\"\n\ntype FormatValidate =\n  | FormatValidator<string>\n  | FormatValidator<number>\n  | AsyncFormatValidator<string>\n  | AsyncFormatValidator<number>\n  | RegExp\n  | string\n  | true\n\nexport type FormatError = ErrorObject<\"format\", {format: string}, string | {$data: string}>\n\nconst error: KeywordErrorDefinition = {\n  message: ({schemaCode}) => str`must match format \"${schemaCode}\"`,\n  params: ({schemaCode}) => _`{format: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"format\",\n  type: [\"number\", \"string\"],\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt, ruleType?: string) {\n    const {gen, data, $data, schema, schemaCode, it} = cxt\n    const {opts, errSchemaPath, schemaEnv, self} = it\n    if (!opts.validateFormats) return\n\n    if ($data) validate$DataFormat()\n    else validateFormat()\n\n    function validate$DataFormat(): void {\n      const fmts = gen.scopeValue(\"formats\", {\n        ref: self.formats,\n        code: opts.code.formats,\n      })\n      const fDef = gen.const(\"fDef\", _`${fmts}[${schemaCode}]`)\n      const fType = gen.let(\"fType\")\n      const format = gen.let(\"format\")\n      // TODO simplify\n      gen.if(\n        _`typeof ${fDef} == \"object\" && !(${fDef} instanceof RegExp)`,\n        () => gen.assign(fType, _`${fDef}.type || \"string\"`).assign(format, _`${fDef}.validate`),\n        () => gen.assign(fType, _`\"string\"`).assign(format, fDef)\n      )\n      cxt.fail$data(or(unknownFmt(), invalidFmt()))\n\n      function unknownFmt(): Code {\n        if (opts.strictSchema === false) return nil\n        return _`${schemaCode} && !${format}`\n      }\n\n      function invalidFmt(): Code {\n        const callFormat = schemaEnv.$async\n          ? _`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`\n          : _`${format}(${data})`\n        const validData = _`(typeof ${format} == \"function\" ? ${callFormat} : ${format}.test(${data}))`\n        return _`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`\n      }\n    }\n\n    function validateFormat(): void {\n      const formatDef: AddedFormat | undefined = self.formats[schema]\n      if (!formatDef) {\n        unknownFormat()\n        return\n      }\n      if (formatDef === true) return\n      const [fmtType, format, fmtRef] = getFormat(formatDef)\n      if (fmtType === ruleType) cxt.pass(validCondition())\n\n      function unknownFormat(): void {\n        if (opts.strictSchema === false) {\n          self.logger.warn(unknownMsg())\n          return\n        }\n        throw new Error(unknownMsg())\n\n        function unknownMsg(): string {\n          return `unknown format \"${schema as string}\" ignored in schema at path \"${errSchemaPath}\"`\n        }\n      }\n\n      function getFormat(fmtDef: AddedFormat): [string, FormatValidate, Code] {\n        const code =\n          fmtDef instanceof RegExp\n            ? regexpCode(fmtDef)\n            : opts.code.formats\n            ? _`${opts.code.formats}${getProperty(schema)}`\n            : undefined\n        const fmt = gen.scopeValue(\"formats\", {key: schema, ref: fmtDef, code})\n        if (typeof fmtDef == \"object\" && !(fmtDef instanceof RegExp)) {\n          return [fmtDef.type || \"string\", fmtDef.validate, _`${fmt}.validate`]\n        }\n\n        return [\"string\", fmtDef, fmt]\n      }\n\n      function validCondition(): Code {\n        if (typeof formatDef == \"object\" && !(formatDef instanceof RegExp) && formatDef.async) {\n          if (!schemaEnv.$async) throw new Error(\"async format in sync schema\")\n          return _`await ${fmtRef}(${data})`\n        }\n        return typeof format == \"function\" ? _`${fmtRef}(${data})` : _`${fmtRef}.test(${data})`\n      }\n    }\n  },\n}\n\nexport default def\n","// https://mathiasbynens.be/notes/javascript-encoding\n// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode\nexport default function ucs2length(str: string): number {\n  const len = str.length\n  let length = 0\n  let pos = 0\n  let value: number\n  while (pos < len) {\n    length++\n    value = str.charCodeAt(pos++)\n    if (value >= 0xd800 && value <= 0xdbff && pos < len) {\n      // high surrogate, and there is a next character\n      value = str.charCodeAt(pos)\n      if ((value & 0xfc00) === 0xdc00) pos++ // low surrogate\n    }\n  }\n  return length\n}\n\nucs2length.code = 'require(\"ajv/dist/runtime/ucs2length\").default'\n","import type {ErrorObject} from \"../types\"\n\nexport default class ValidationError extends Error {\n  readonly errors: Partial<ErrorObject>[]\n  readonly ajv: true\n  readonly validation: true\n\n  constructor(errors: Partial<ErrorObject>[]) {\n    super(\"validation failed\")\n    this.errors = errors\n    this.ajv = this.validation = true\n  }\n}\n","export {\n  Format,\n  FormatDefinition,\n  AsyncFormatDefinition,\n  KeywordDefinition,\n  KeywordErrorDefinition,\n  CodeKeywordDefinition,\n  MacroKeywordDefinition,\n  FuncKeywordDefinition,\n  Vocabulary,\n  Schema,\n  SchemaObject,\n  AnySchemaObject,\n  AsyncSchema,\n  AnySchema,\n  ValidateFunction,\n  AsyncValidateFunction,\n  AnyValidateFunction,\n  ErrorObject,\n  ErrorNoParams,\n} from \"./types\"\n\nexport {SchemaCxt, SchemaObjCxt} from \"./compile\"\nexport interface Plugin<Opts> {\n  (ajv: Ajv, options?: Opts): Ajv\n  [prop: string]: any\n}\n\nexport {KeywordCxt} from \"./compile/validate\"\nexport {DefinedError} from \"./vocabularies/errors\"\nexport {JSONType} from \"./compile/rules\"\nexport {JSONSchemaType} from \"./types/json-schema\"\nexport {JTDSchemaType, SomeJTDSchemaType, JTDDataType} from \"./types/jtd-schema\"\nexport {_, str, stringify, nil, Name, Code, CodeGen, CodeGenOptions} from \"./compile/codegen\"\n\nimport type {\n  Schema,\n  AnySchema,\n  AnySchemaObject,\n  SchemaObject,\n  AsyncSchema,\n  Vocabulary,\n  KeywordDefinition,\n  AddedKeywordDefinition,\n  AnyValidateFunction,\n  ValidateFunction,\n  AsyncValidateFunction,\n  ErrorObject,\n  Format,\n  AddedFormat,\n  RegExpEngine,\n  UriResolver,\n} from \"./types\"\nimport type {JSONSchemaType} from \"./types/json-schema\"\nimport type {JTDSchemaType, SomeJTDSchemaType, JTDDataType} from \"./types/jtd-schema\"\nimport ValidationError from \"./runtime/validation_error\"\nimport MissingRefError from \"./compile/ref_error\"\nimport {getRules, ValidationRules, Rule, RuleGroup, JSONType} from \"./compile/rules\"\nimport {SchemaEnv, compileSchema, resolveSchema} from \"./compile\"\nimport {Code, ValueScope} from \"./compile/codegen\"\nimport {normalizeId, getSchemaRefs} from \"./compile/resolve\"\nimport {getJSONTypes} from \"./compile/validate/dataType\"\nimport {eachItem} from \"./compile/util\"\nimport * as $dataRefSchema from \"./refs/data.json\"\n\nimport DefaultUriResolver from \"./runtime/uri\"\n\nconst defaultRegExp: RegExpEngine = (str, flags) => new RegExp(str, flags)\ndefaultRegExp.code = \"new RegExp\"\n\nconst META_IGNORE_OPTIONS: (keyof Options)[] = [\"removeAdditional\", \"useDefaults\", \"coerceTypes\"]\nconst EXT_SCOPE_NAMES = new Set([\n  \"validate\",\n  \"serialize\",\n  \"parse\",\n  \"wrapper\",\n  \"root\",\n  \"schema\",\n  \"keyword\",\n  \"pattern\",\n  \"formats\",\n  \"validate$data\",\n  \"func\",\n  \"obj\",\n  \"Error\",\n])\n\nexport type Options = CurrentOptions & DeprecatedOptions\n\nexport interface CurrentOptions {\n  // strict mode options (NEW)\n  strict?: boolean | \"log\"\n  strictSchema?: boolean | \"log\"\n  strictNumbers?: boolean | \"log\"\n  strictTypes?: boolean | \"log\"\n  strictTuples?: boolean | \"log\"\n  strictRequired?: boolean | \"log\"\n  allowMatchingProperties?: boolean // disables a strict mode restriction\n  allowUnionTypes?: boolean\n  validateFormats?: boolean\n  // validation and reporting options:\n  $data?: boolean\n  allErrors?: boolean\n  verbose?: boolean\n  discriminator?: boolean\n  unicodeRegExp?: boolean\n  timestamp?: \"string\" | \"date\" // JTD only\n  parseDate?: boolean // JTD only\n  allowDate?: boolean // JTD only\n  $comment?:\n    | true\n    | ((comment: string, schemaPath?: string, rootSchema?: AnySchemaObject) => unknown)\n  formats?: {[Name in string]?: Format}\n  keywords?: Vocabulary\n  schemas?: AnySchema[] | {[Key in string]?: AnySchema}\n  logger?: Logger | false\n  loadSchema?: (uri: string) => Promise<AnySchemaObject>\n  // options to modify validated data:\n  removeAdditional?: boolean | \"all\" | \"failing\"\n  useDefaults?: boolean | \"empty\"\n  coerceTypes?: boolean | \"array\"\n  // advanced options:\n  next?: boolean // NEW\n  unevaluated?: boolean // NEW\n  dynamicRef?: boolean // NEW\n  schemaId?: \"id\" | \"$id\"\n  jtd?: boolean // NEW\n  meta?: SchemaObject | boolean\n  defaultMeta?: string | AnySchemaObject\n  validateSchema?: boolean | \"log\"\n  addUsedSchema?: boolean\n  inlineRefs?: boolean | number\n  passContext?: boolean\n  loopRequired?: number\n  loopEnum?: number // NEW\n  ownProperties?: boolean\n  multipleOfPrecision?: number\n  int32range?: boolean // JTD only\n  messages?: boolean\n  code?: CodeOptions // NEW\n  uriResolver?: UriResolver\n}\n\nexport interface CodeOptions {\n  es5?: boolean\n  esm?: boolean\n  lines?: boolean\n  optimize?: boolean | number\n  formats?: Code // code to require (or construct) map of available formats - for standalone code\n  source?: boolean\n  process?: (code: string, schema?: SchemaEnv) => string\n  regExp?: RegExpEngine\n}\n\ninterface InstanceCodeOptions extends CodeOptions {\n  regExp: RegExpEngine\n  optimize: number\n}\n\ninterface DeprecatedOptions {\n  /** @deprecated */\n  ignoreKeywordsWithRef?: boolean\n  /** @deprecated */\n  jsPropertySyntax?: boolean // added instead of jsonPointers\n  /** @deprecated */\n  unicode?: boolean\n}\n\ninterface RemovedOptions {\n  format?: boolean\n  errorDataPath?: \"object\" | \"property\"\n  nullable?: boolean // \"nullable\" keyword is supported by default\n  jsonPointers?: boolean\n  extendRefs?: true | \"ignore\" | \"fail\"\n  missingRefs?: true | \"ignore\" | \"fail\"\n  processCode?: (code: string, schema?: SchemaEnv) => string\n  sourceCode?: boolean\n  strictDefaults?: boolean\n  strictKeywords?: boolean\n  uniqueItems?: boolean\n  unknownFormats?: true | string[] | \"ignore\"\n  cache?: any\n  serialize?: (schema: AnySchema) => unknown\n  ajvErrors?: boolean\n}\n\ntype OptionsInfo<T extends RemovedOptions | DeprecatedOptions> = {\n  [K in keyof T]-?: string | undefined\n}\n\nconst removedOptions: OptionsInfo<RemovedOptions> = {\n  errorDataPath: \"\",\n  format: \"`validateFormats: false` can be used instead.\",\n  nullable: '\"nullable\" keyword is supported by default.',\n  jsonPointers: \"Deprecated jsPropertySyntax can be used instead.\",\n  extendRefs: \"Deprecated ignoreKeywordsWithRef can be used instead.\",\n  missingRefs: \"Pass empty schema with $id that should be ignored to ajv.addSchema.\",\n  processCode: \"Use option `code: {process: (code, schemaEnv: object) => string}`\",\n  sourceCode: \"Use option `code: {source: true}`\",\n  strictDefaults: \"It is default now, see option `strict`.\",\n  strictKeywords: \"It is default now, see option `strict`.\",\n  uniqueItems: '\"uniqueItems\" keyword is always validated.',\n  unknownFormats: \"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).\",\n  cache: \"Map is used as cache, schema object as key.\",\n  serialize: \"Map is used as cache, schema object as key.\",\n  ajvErrors: \"It is default now.\",\n}\n\nconst deprecatedOptions: OptionsInfo<DeprecatedOptions> = {\n  ignoreKeywordsWithRef: \"\",\n  jsPropertySyntax: \"\",\n  unicode: '\"minLength\"/\"maxLength\" account for unicode characters by default.',\n}\n\ntype RequiredInstanceOptions = {\n  [K in\n    | \"strictSchema\"\n    | \"strictNumbers\"\n    | \"strictTypes\"\n    | \"strictTuples\"\n    | \"strictRequired\"\n    | \"inlineRefs\"\n    | \"loopRequired\"\n    | \"loopEnum\"\n    | \"meta\"\n    | \"messages\"\n    | \"schemaId\"\n    | \"addUsedSchema\"\n    | \"validateSchema\"\n    | \"validateFormats\"\n    | \"int32range\"\n    | \"unicodeRegExp\"\n    | \"uriResolver\"]: NonNullable<Options[K]>\n} & {code: InstanceCodeOptions}\n\nexport type InstanceOptions = Options & RequiredInstanceOptions\n\nconst MAX_EXPRESSION = 200\n\n// eslint-disable-next-line complexity\nfunction requiredOptions(o: Options): RequiredInstanceOptions {\n  const s = o.strict\n  const _optz = o.code?.optimize\n  const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0\n  const regExp = o.code?.regExp ?? defaultRegExp\n  const uriResolver = o.uriResolver ?? DefaultUriResolver\n  return {\n    strictSchema: o.strictSchema ?? s ?? true,\n    strictNumbers: o.strictNumbers ?? s ?? true,\n    strictTypes: o.strictTypes ?? s ?? \"log\",\n    strictTuples: o.strictTuples ?? s ?? \"log\",\n    strictRequired: o.strictRequired ?? s ?? false,\n    code: o.code ? {...o.code, optimize, regExp} : {optimize, regExp},\n    loopRequired: o.loopRequired ?? MAX_EXPRESSION,\n    loopEnum: o.loopEnum ?? MAX_EXPRESSION,\n    meta: o.meta ?? true,\n    messages: o.messages ?? true,\n    inlineRefs: o.inlineRefs ?? true,\n    schemaId: o.schemaId ?? \"$id\",\n    addUsedSchema: o.addUsedSchema ?? true,\n    validateSchema: o.validateSchema ?? true,\n    validateFormats: o.validateFormats ?? true,\n    unicodeRegExp: o.unicodeRegExp ?? true,\n    int32range: o.int32range ?? true,\n    uriResolver: uriResolver,\n  }\n}\n\nexport interface Logger {\n  log(...args: unknown[]): unknown\n  warn(...args: unknown[]): unknown\n  error(...args: unknown[]): unknown\n}\n\nexport default class Ajv {\n  opts: InstanceOptions\n  errors?: ErrorObject[] | null // errors from the last validation\n  logger: Logger\n  // shared external scope values for compiled functions\n  readonly scope: ValueScope\n  readonly schemas: {[Key in string]?: SchemaEnv} = {}\n  readonly refs: {[Ref in string]?: SchemaEnv | string} = {}\n  readonly formats: {[Name in string]?: AddedFormat} = {}\n  readonly RULES: ValidationRules\n  readonly _compilations: Set<SchemaEnv> = new Set()\n  private readonly _loading: {[Ref in string]?: Promise<AnySchemaObject>} = {}\n  private readonly _cache: Map<AnySchema, SchemaEnv> = new Map()\n  private readonly _metaOpts: InstanceOptions\n\n  static ValidationError = ValidationError\n  static MissingRefError = MissingRefError\n\n  constructor(opts: Options = {}) {\n    opts = this.opts = {...opts, ...requiredOptions(opts)}\n    const {es5, lines} = this.opts.code\n\n    this.scope = new ValueScope({scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines})\n    this.logger = getLogger(opts.logger)\n    const formatOpt = opts.validateFormats\n    opts.validateFormats = false\n\n    this.RULES = getRules()\n    checkOptions.call(this, removedOptions, opts, \"NOT SUPPORTED\")\n    checkOptions.call(this, deprecatedOptions, opts, \"DEPRECATED\", \"warn\")\n    this._metaOpts = getMetaSchemaOptions.call(this)\n\n    if (opts.formats) addInitialFormats.call(this)\n    this._addVocabularies()\n    this._addDefaultMetaSchema()\n    if (opts.keywords) addInitialKeywords.call(this, opts.keywords)\n    if (typeof opts.meta == \"object\") this.addMetaSchema(opts.meta)\n    addInitialSchemas.call(this)\n    opts.validateFormats = formatOpt\n  }\n\n  _addVocabularies(): void {\n    this.addKeyword(\"$async\")\n  }\n\n  _addDefaultMetaSchema(): void {\n    const {$data, meta, schemaId} = this.opts\n    let _dataRefSchema: SchemaObject = $dataRefSchema\n    if (schemaId === \"id\") {\n      _dataRefSchema = {...$dataRefSchema}\n      _dataRefSchema.id = _dataRefSchema.$id\n      delete _dataRefSchema.$id\n    }\n    if (meta && $data) this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false)\n  }\n\n  defaultMeta(): string | AnySchemaObject | undefined {\n    const {meta, schemaId} = this.opts\n    return (this.opts.defaultMeta = typeof meta == \"object\" ? meta[schemaId] || meta : undefined)\n  }\n\n  // Validate data using schema\n  // AnySchema will be compiled and cached using schema itself as a key for Map\n  validate(schema: Schema | string, data: unknown): boolean\n  validate(schemaKeyRef: AnySchema | string, data: unknown): boolean | Promise<unknown>\n  validate<T>(schema: Schema | JSONSchemaType<T> | string, data: unknown): data is T\n  // Separated for type inference to work\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  validate<T>(schema: JTDSchemaType<T>, data: unknown): data is T\n  // This overload is only intended for typescript inference, the first\n  // argument prevents manual type annotation from matching this overload\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  validate<N extends never, T extends SomeJTDSchemaType>(\n    schema: T,\n    data: unknown\n  ): data is JTDDataType<T>\n  // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n  validate<T>(schema: AsyncSchema, data: unknown | T): Promise<T>\n  validate<T>(schemaKeyRef: AnySchema | string, data: unknown): data is T | Promise<T>\n  validate<T>(\n    schemaKeyRef: AnySchema | string, // key, ref or schema object\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n    data: unknown | T // to be validated\n  ): boolean | Promise<T> {\n    let v: AnyValidateFunction | undefined\n    if (typeof schemaKeyRef == \"string\") {\n      v = this.getSchema<T>(schemaKeyRef)\n      if (!v) throw new Error(`no schema with key or ref \"${schemaKeyRef}\"`)\n    } else {\n      v = this.compile<T>(schemaKeyRef)\n    }\n\n    const valid = v(data)\n    if (!(\"$async\" in v)) this.errors = v.errors\n    return valid\n  }\n\n  // Create validation function for passed schema\n  // _meta: true if schema is a meta-schema. Used internally to compile meta schemas of user-defined keywords.\n  compile<T = unknown>(schema: Schema | JSONSchemaType<T>, _meta?: boolean): ValidateFunction<T>\n  // Separated for type inference to work\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  compile<T = unknown>(schema: JTDSchemaType<T>, _meta?: boolean): ValidateFunction<T>\n  // This overload is only intended for typescript inference, the first\n  // argument prevents manual type annotation from matching this overload\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  compile<N extends never, T extends SomeJTDSchemaType>(\n    schema: T,\n    _meta?: boolean\n  ): ValidateFunction<JTDDataType<T>>\n  compile<T = unknown>(schema: AsyncSchema, _meta?: boolean): AsyncValidateFunction<T>\n  compile<T = unknown>(schema: AnySchema, _meta?: boolean): AnyValidateFunction<T>\n  compile<T = unknown>(schema: AnySchema, _meta?: boolean): AnyValidateFunction<T> {\n    const sch = this._addSchema(schema, _meta)\n    return (sch.validate || this._compileSchemaEnv(sch)) as AnyValidateFunction<T>\n  }\n\n  // Creates validating function for passed schema with asynchronous loading of missing schemas.\n  // `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\n  // TODO allow passing schema URI\n  // meta - optional true to compile meta-schema\n  compileAsync<T = unknown>(\n    schema: SchemaObject | JSONSchemaType<T>,\n    _meta?: boolean\n  ): Promise<ValidateFunction<T>>\n  // Separated for type inference to work\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  compileAsync<T = unknown>(schema: JTDSchemaType<T>, _meta?: boolean): Promise<ValidateFunction<T>>\n  compileAsync<T = unknown>(schema: AsyncSchema, meta?: boolean): Promise<AsyncValidateFunction<T>>\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  compileAsync<T = unknown>(\n    schema: AnySchemaObject,\n    meta?: boolean\n  ): Promise<AnyValidateFunction<T>>\n  compileAsync<T = unknown>(\n    schema: AnySchemaObject,\n    meta?: boolean\n  ): Promise<AnyValidateFunction<T>> {\n    if (typeof this.opts.loadSchema != \"function\") {\n      throw new Error(\"options.loadSchema should be a function\")\n    }\n    const {loadSchema} = this.opts\n    return runCompileAsync.call(this, schema, meta)\n\n    async function runCompileAsync(\n      this: Ajv,\n      _schema: AnySchemaObject,\n      _meta?: boolean\n    ): Promise<AnyValidateFunction> {\n      await loadMetaSchema.call(this, _schema.$schema)\n      const sch = this._addSchema(_schema, _meta)\n      return sch.validate || _compileAsync.call(this, sch)\n    }\n\n    async function loadMetaSchema(this: Ajv, $ref?: string): Promise<void> {\n      if ($ref && !this.getSchema($ref)) {\n        await runCompileAsync.call(this, {$ref}, true)\n      }\n    }\n\n    async function _compileAsync(this: Ajv, sch: SchemaEnv): Promise<AnyValidateFunction> {\n      try {\n        return this._compileSchemaEnv(sch)\n      } catch (e) {\n        if (!(e instanceof MissingRefError)) throw e\n        checkLoaded.call(this, e)\n        await loadMissingSchema.call(this, e.missingSchema)\n        return _compileAsync.call(this, sch)\n      }\n    }\n\n    function checkLoaded(this: Ajv, {missingSchema: ref, missingRef}: MissingRefError): void {\n      if (this.refs[ref]) {\n        throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`)\n      }\n    }\n\n    async function loadMissingSchema(this: Ajv, ref: string): Promise<void> {\n      const _schema = await _loadSchema.call(this, ref)\n      if (!this.refs[ref]) await loadMetaSchema.call(this, _schema.$schema)\n      if (!this.refs[ref]) this.addSchema(_schema, ref, meta)\n    }\n\n    async function _loadSchema(this: Ajv, ref: string): Promise<AnySchemaObject> {\n      const p = this._loading[ref]\n      if (p) return p\n      try {\n        return await (this._loading[ref] = loadSchema(ref))\n      } finally {\n        delete this._loading[ref]\n      }\n    }\n  }\n\n  // Adds schema to the instance\n  addSchema(\n    schema: AnySchema | AnySchema[], // If array is passed, `key` will be ignored\n    key?: string, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n    _meta?: boolean, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n    _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.\n  ): Ajv {\n    if (Array.isArray(schema)) {\n      for (const sch of schema) this.addSchema(sch, undefined, _meta, _validateSchema)\n      return this\n    }\n    let id: string | undefined\n    if (typeof schema === \"object\") {\n      const {schemaId} = this.opts\n      id = schema[schemaId]\n      if (id !== undefined && typeof id != \"string\") {\n        throw new Error(`schema ${schemaId} must be string`)\n      }\n    }\n    key = normalizeId(key || id)\n    this._checkUnique(key)\n    this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true)\n    return this\n  }\n\n  // Add schema that will be used to validate other schemas\n  // options in META_IGNORE_OPTIONS are alway set to false\n  addMetaSchema(\n    schema: AnySchemaObject,\n    key?: string, // schema key\n    _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema\n  ): Ajv {\n    this.addSchema(schema, key, true, _validateSchema)\n    return this\n  }\n\n  //  Validate schema against its meta-schema\n  validateSchema(schema: AnySchema, throwOrLogError?: boolean): boolean | Promise<unknown> {\n    if (typeof schema == \"boolean\") return true\n    let $schema: string | AnySchemaObject | undefined\n    $schema = schema.$schema\n    if ($schema !== undefined && typeof $schema != \"string\") {\n      throw new Error(\"$schema must be a string\")\n    }\n    $schema = $schema || this.opts.defaultMeta || this.defaultMeta()\n    if (!$schema) {\n      this.logger.warn(\"meta-schema not available\")\n      this.errors = null\n      return true\n    }\n    const valid = this.validate($schema, schema)\n    if (!valid && throwOrLogError) {\n      const message = \"schema is invalid: \" + this.errorsText()\n      if (this.opts.validateSchema === \"log\") this.logger.error(message)\n      else throw new Error(message)\n    }\n    return valid\n  }\n\n  // Get compiled schema by `key` or `ref`.\n  // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)\n  getSchema<T = unknown>(keyRef: string): AnyValidateFunction<T> | undefined {\n    let sch\n    while (typeof (sch = getSchEnv.call(this, keyRef)) == \"string\") keyRef = sch\n    if (sch === undefined) {\n      const {schemaId} = this.opts\n      const root = new SchemaEnv({schema: {}, schemaId})\n      sch = resolveSchema.call(this, root, keyRef)\n      if (!sch) return\n      this.refs[keyRef] = sch\n    }\n    return (sch.validate || this._compileSchemaEnv(sch)) as AnyValidateFunction<T> | undefined\n  }\n\n  // Remove cached schema(s).\n  // If no parameter is passed all schemas but meta-schemas are removed.\n  // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n  // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n  removeSchema(schemaKeyRef?: AnySchema | string | RegExp): Ajv {\n    if (schemaKeyRef instanceof RegExp) {\n      this._removeAllSchemas(this.schemas, schemaKeyRef)\n      this._removeAllSchemas(this.refs, schemaKeyRef)\n      return this\n    }\n    switch (typeof schemaKeyRef) {\n      case \"undefined\":\n        this._removeAllSchemas(this.schemas)\n        this._removeAllSchemas(this.refs)\n        this._cache.clear()\n        return this\n      case \"string\": {\n        const sch = getSchEnv.call(this, schemaKeyRef)\n        if (typeof sch == \"object\") this._cache.delete(sch.schema)\n        delete this.schemas[schemaKeyRef]\n        delete this.refs[schemaKeyRef]\n        return this\n      }\n      case \"object\": {\n        const cacheKey = schemaKeyRef\n        this._cache.delete(cacheKey)\n        let id = schemaKeyRef[this.opts.schemaId]\n        if (id) {\n          id = normalizeId(id)\n          delete this.schemas[id]\n          delete this.refs[id]\n        }\n        return this\n      }\n      default:\n        throw new Error(\"ajv.removeSchema: invalid parameter\")\n    }\n  }\n\n  // add \"vocabulary\" - a collection of keywords\n  addVocabulary(definitions: Vocabulary): Ajv {\n    for (const def of definitions) this.addKeyword(def)\n    return this\n  }\n\n  addKeyword(\n    kwdOrDef: string | KeywordDefinition,\n    def?: KeywordDefinition // deprecated\n  ): Ajv {\n    let keyword: string | string[]\n    if (typeof kwdOrDef == \"string\") {\n      keyword = kwdOrDef\n      if (typeof def == \"object\") {\n        this.logger.warn(\"these parameters are deprecated, see docs for addKeyword\")\n        def.keyword = keyword\n      }\n    } else if (typeof kwdOrDef == \"object\" && def === undefined) {\n      def = kwdOrDef\n      keyword = def.keyword\n      if (Array.isArray(keyword) && !keyword.length) {\n        throw new Error(\"addKeywords: keyword must be string or non-empty array\")\n      }\n    } else {\n      throw new Error(\"invalid addKeywords parameters\")\n    }\n\n    checkKeyword.call(this, keyword, def)\n    if (!def) {\n      eachItem(keyword, (kwd) => addRule.call(this, kwd))\n      return this\n    }\n    keywordMetaschema.call(this, def)\n    const definition: AddedKeywordDefinition = {\n      ...def,\n      type: getJSONTypes(def.type),\n      schemaType: getJSONTypes(def.schemaType),\n    }\n    eachItem(\n      keyword,\n      definition.type.length === 0\n        ? (k) => addRule.call(this, k, definition)\n        : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t))\n    )\n    return this\n  }\n\n  getKeyword(keyword: string): AddedKeywordDefinition | boolean {\n    const rule = this.RULES.all[keyword]\n    return typeof rule == \"object\" ? rule.definition : !!rule\n  }\n\n  // Remove keyword\n  removeKeyword(keyword: string): Ajv {\n    // TODO return type should be Ajv\n    const {RULES} = this\n    delete RULES.keywords[keyword]\n    delete RULES.all[keyword]\n    for (const group of RULES.rules) {\n      const i = group.rules.findIndex((rule) => rule.keyword === keyword)\n      if (i >= 0) group.rules.splice(i, 1)\n    }\n    return this\n  }\n\n  // Add format\n  addFormat(name: string, format: Format): Ajv {\n    if (typeof format == \"string\") format = new RegExp(format)\n    this.formats[name] = format\n    return this\n  }\n\n  errorsText(\n    errors: ErrorObject[] | null | undefined = this.errors, // optional array of validation errors\n    {separator = \", \", dataVar = \"data\"}: ErrorsTextOptions = {} // optional options with properties `separator` and `dataVar`\n  ): string {\n    if (!errors || errors.length === 0) return \"No errors\"\n    return errors\n      .map((e) => `${dataVar}${e.instancePath} ${e.message}`)\n      .reduce((text, msg) => text + separator + msg)\n  }\n\n  $dataMetaSchema(metaSchema: AnySchemaObject, keywordsJsonPointers: string[]): AnySchemaObject {\n    const rules = this.RULES.all\n    metaSchema = JSON.parse(JSON.stringify(metaSchema))\n    for (const jsonPointer of keywordsJsonPointers) {\n      const segments = jsonPointer.split(\"/\").slice(1) // first segment is an empty string\n      let keywords = metaSchema\n      for (const seg of segments) keywords = keywords[seg] as AnySchemaObject\n\n      for (const key in rules) {\n        const rule = rules[key]\n        if (typeof rule != \"object\") continue\n        const {$data} = rule.definition\n        const schema = keywords[key] as AnySchemaObject | undefined\n        if ($data && schema) keywords[key] = schemaOrData(schema)\n      }\n    }\n\n    return metaSchema\n  }\n\n  private _removeAllSchemas(schemas: {[Ref in string]?: SchemaEnv | string}, regex?: RegExp): void {\n    for (const keyRef in schemas) {\n      const sch = schemas[keyRef]\n      if (!regex || regex.test(keyRef)) {\n        if (typeof sch == \"string\") {\n          delete schemas[keyRef]\n        } else if (sch && !sch.meta) {\n          this._cache.delete(sch.schema)\n          delete schemas[keyRef]\n        }\n      }\n    }\n  }\n\n  _addSchema(\n    schema: AnySchema,\n    meta?: boolean,\n    baseId?: string,\n    validateSchema = this.opts.validateSchema,\n    addSchema = this.opts.addUsedSchema\n  ): SchemaEnv {\n    let id: string | undefined\n    const {schemaId} = this.opts\n    if (typeof schema == \"object\") {\n      id = schema[schemaId]\n    } else {\n      if (this.opts.jtd) throw new Error(\"schema must be object\")\n      else if (typeof schema != \"boolean\") throw new Error(\"schema must be object or boolean\")\n    }\n    let sch = this._cache.get(schema)\n    if (sch !== undefined) return sch\n\n    baseId = normalizeId(id || baseId)\n    const localRefs = getSchemaRefs.call(this, schema, baseId)\n    sch = new SchemaEnv({schema, schemaId, meta, baseId, localRefs})\n    this._cache.set(sch.schema, sch)\n    if (addSchema && !baseId.startsWith(\"#\")) {\n      // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)\n      if (baseId) this._checkUnique(baseId)\n      this.refs[baseId] = sch\n    }\n    if (validateSchema) this.validateSchema(schema, true)\n    return sch\n  }\n\n  private _checkUnique(id: string): void {\n    if (this.schemas[id] || this.refs[id]) {\n      throw new Error(`schema with key or id \"${id}\" already exists`)\n    }\n  }\n\n  private _compileSchemaEnv(sch: SchemaEnv): AnyValidateFunction {\n    if (sch.meta) this._compileMetaSchema(sch)\n    else compileSchema.call(this, sch)\n\n    /* istanbul ignore if */\n    if (!sch.validate) throw new Error(\"ajv implementation error\")\n    return sch.validate\n  }\n\n  private _compileMetaSchema(sch: SchemaEnv): void {\n    const currentOpts = this.opts\n    this.opts = this._metaOpts\n    try {\n      compileSchema.call(this, sch)\n    } finally {\n      this.opts = currentOpts\n    }\n  }\n}\n\nexport interface ErrorsTextOptions {\n  separator?: string\n  dataVar?: string\n}\n\nfunction checkOptions(\n  this: Ajv,\n  checkOpts: OptionsInfo<RemovedOptions | DeprecatedOptions>,\n  options: Options & RemovedOptions,\n  msg: string,\n  log: \"warn\" | \"error\" = \"error\"\n): void {\n  for (const key in checkOpts) {\n    const opt = key as keyof typeof checkOpts\n    if (opt in options) this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`)\n  }\n}\n\nfunction getSchEnv(this: Ajv, keyRef: string): SchemaEnv | string | undefined {\n  keyRef = normalizeId(keyRef) // TODO tests fail without this line\n  return this.schemas[keyRef] || this.refs[keyRef]\n}\n\nfunction addInitialSchemas(this: Ajv): void {\n  const optsSchemas = this.opts.schemas\n  if (!optsSchemas) return\n  if (Array.isArray(optsSchemas)) this.addSchema(optsSchemas)\n  else for (const key in optsSchemas) this.addSchema(optsSchemas[key] as AnySchema, key)\n}\n\nfunction addInitialFormats(this: Ajv): void {\n  for (const name in this.opts.formats) {\n    const format = this.opts.formats[name]\n    if (format) this.addFormat(name, format)\n  }\n}\n\nfunction addInitialKeywords(\n  this: Ajv,\n  defs: Vocabulary | {[K in string]?: KeywordDefinition}\n): void {\n  if (Array.isArray(defs)) {\n    this.addVocabulary(defs)\n    return\n  }\n  this.logger.warn(\"keywords option as map is deprecated, pass array\")\n  for (const keyword in defs) {\n    const def = defs[keyword] as KeywordDefinition\n    if (!def.keyword) def.keyword = keyword\n    this.addKeyword(def)\n  }\n}\n\nfunction getMetaSchemaOptions(this: Ajv): InstanceOptions {\n  const metaOpts = {...this.opts}\n  for (const opt of META_IGNORE_OPTIONS) delete metaOpts[opt]\n  return metaOpts\n}\n\nconst noLogs = {log() {}, warn() {}, error() {}}\n\nfunction getLogger(logger?: Partial<Logger> | false): Logger {\n  if (logger === false) return noLogs\n  if (logger === undefined) return console\n  if (logger.log && logger.warn && logger.error) return logger as Logger\n  throw new Error(\"logger must implement log, warn and error methods\")\n}\n\nconst KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i\n\nfunction checkKeyword(this: Ajv, keyword: string | string[], def?: KeywordDefinition): void {\n  const {RULES} = this\n  eachItem(keyword, (kwd) => {\n    if (RULES.keywords[kwd]) throw new Error(`Keyword ${kwd} is already defined`)\n    if (!KEYWORD_NAME.test(kwd)) throw new Error(`Keyword ${kwd} has invalid name`)\n  })\n  if (!def) return\n  if (def.$data && !(\"code\" in def || \"validate\" in def)) {\n    throw new Error('$data keyword must have \"code\" or \"validate\" function')\n  }\n}\n\nfunction addRule(\n  this: Ajv,\n  keyword: string,\n  definition?: AddedKeywordDefinition,\n  dataType?: JSONType\n): void {\n  const post = definition?.post\n  if (dataType && post) throw new Error('keyword with \"post\" flag cannot have \"type\"')\n  const {RULES} = this\n  let ruleGroup = post ? RULES.post : RULES.rules.find(({type: t}) => t === dataType)\n  if (!ruleGroup) {\n    ruleGroup = {type: dataType, rules: []}\n    RULES.rules.push(ruleGroup)\n  }\n  RULES.keywords[keyword] = true\n  if (!definition) return\n\n  const rule: Rule = {\n    keyword,\n    definition: {\n      ...definition,\n      type: getJSONTypes(definition.type),\n      schemaType: getJSONTypes(definition.schemaType),\n    },\n  }\n  if (definition.before) addBeforeRule.call(this, ruleGroup, rule, definition.before)\n  else ruleGroup.rules.push(rule)\n  RULES.all[keyword] = rule\n  definition.implements?.forEach((kwd) => this.addKeyword(kwd))\n}\n\nfunction addBeforeRule(this: Ajv, ruleGroup: RuleGroup, rule: Rule, before: string): void {\n  const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before)\n  if (i >= 0) {\n    ruleGroup.rules.splice(i, 0, rule)\n  } else {\n    ruleGroup.rules.push(rule)\n    this.logger.warn(`rule ${before} is not defined`)\n  }\n}\n\nfunction keywordMetaschema(this: Ajv, def: KeywordDefinition): void {\n  let {metaSchema} = def\n  if (metaSchema === undefined) return\n  if (def.$data && this.opts.$data) metaSchema = schemaOrData(metaSchema)\n  def.validateSchema = this.compile(metaSchema, true)\n}\n\nconst $dataRef = {\n  $ref: \"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\",\n}\n\nfunction schemaOrData(schema: AnySchema): AnySchemaObject {\n  return {anyOf: [schema, $dataRef]}\n}\n","import type {CodeKeywordDefinition, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, operators} from \"../../compile/codegen\"\nimport {useFunc} from \"../../compile/util\"\nimport ucs2length from \"../../runtime/ucs2length\"\n\nconst error: KeywordErrorDefinition = {\n  message({keyword, schemaCode}) {\n    const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\"\n    return str`must NOT have ${comp} than ${schemaCode} characters`\n  },\n  params: ({schemaCode}) => _`{limit: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: [\"maxLength\", \"minLength\"],\n  type: \"string\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {keyword, data, schemaCode, it} = cxt\n    const op = keyword === \"maxLength\" ? operators.GT : operators.LT\n    const len =\n      it.opts.unicode === false ? _`${data}.length` : _`${useFunc(cxt.gen, ucs2length)}(${data})`\n    cxt.fail$data(_`${len} ${op} ${schemaCode}`)\n  },\n}\n\nexport default def\n","function _taggedTemplateLiteral(e, t) {\n  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, {\n    raw: {\n      value: Object.freeze(t)\n    }\n  }));\n}\nmodule.exports = _taggedTemplateLiteral, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import type {\n  AnySchema,\n  AnySchemaObject,\n  AnyValidateFunction,\n  AsyncValidateFunction,\n  EvaluatedProperties,\n  EvaluatedItems,\n} from \"../types\"\nimport type Ajv from \"../core\"\nimport type {InstanceOptions} from \"../core\"\nimport {CodeGen, _, nil, stringify, Name, Code, ValueScopeName} from \"./codegen\"\nimport ValidationError from \"../runtime/validation_error\"\nimport N from \"./names\"\nimport {LocalRefs, getFullPath, _getFullPath, inlineRef, normalizeId, resolveUrl} from \"./resolve\"\nimport {schemaHasRulesButRef, unescapeFragment} from \"./util\"\nimport {validateFunctionCode} from \"./validate\"\nimport {URIComponent} from \"fast-uri\"\nimport {JSONType} from \"./rules\"\n\nexport type SchemaRefs = {\n  [Ref in string]?: SchemaEnv | AnySchema\n}\n\nexport interface SchemaCxt {\n  readonly gen: CodeGen\n  readonly allErrors?: boolean // validation mode - whether to collect all errors or break on error\n  readonly data: Name // Name with reference to the current part of data instance\n  readonly parentData: Name // should be used in keywords modifying data\n  readonly parentDataProperty: Code | number // should be used in keywords modifying data\n  readonly dataNames: Name[]\n  readonly dataPathArr: (Code | number)[]\n  readonly dataLevel: number // the level of the currently validated data,\n  // it can be used to access both the property names and the data on all levels from the top.\n  dataTypes: JSONType[] // data types applied to the current part of data instance\n  definedProperties: Set<string> // set of properties to keep track of for required checks\n  readonly topSchemaRef: Code\n  readonly validateName: Name\n  evaluated?: Name\n  readonly ValidationError?: Name\n  readonly schema: AnySchema // current schema object - equal to parentSchema passed via KeywordCxt\n  readonly schemaEnv: SchemaEnv\n  readonly rootId: string\n  baseId: string // the current schema base URI that should be used as the base for resolving URIs in references (\\$ref)\n  readonly schemaPath: Code // the run-time expression that evaluates to the property name of the current schema\n  readonly errSchemaPath: string // this is actual string, should not be changed to Code\n  readonly errorPath: Code\n  readonly propertyName?: Name\n  readonly compositeRule?: boolean // true indicates that the current schema is inside the compound keyword,\n  // where failing some rule doesn't mean validation failure (`anyOf`, `oneOf`, `not`, `if`).\n  // This flag is used to determine whether you can return validation result immediately after any error in case the option `allErrors` is not `true.\n  // You only need to use it if you have many steps in your keywords and potentially can define multiple errors.\n  props?: EvaluatedProperties | Name // properties evaluated by this schema - used by parent schema or assigned to validation function\n  items?: EvaluatedItems | Name // last item evaluated by this schema - used by parent schema or assigned to validation function\n  jtdDiscriminator?: string\n  jtdMetadata?: boolean\n  readonly createErrors?: boolean\n  readonly opts: InstanceOptions // Ajv instance option.\n  readonly self: Ajv // current Ajv instance\n}\n\nexport interface SchemaObjCxt extends SchemaCxt {\n  readonly schema: AnySchemaObject\n}\ninterface SchemaEnvArgs {\n  readonly schema: AnySchema\n  readonly schemaId?: \"$id\" | \"id\"\n  readonly root?: SchemaEnv\n  readonly baseId?: string\n  readonly schemaPath?: string\n  readonly localRefs?: LocalRefs\n  readonly meta?: boolean\n}\n\nexport class SchemaEnv implements SchemaEnvArgs {\n  readonly schema: AnySchema\n  readonly schemaId?: \"$id\" | \"id\"\n  readonly root: SchemaEnv\n  baseId: string // TODO possibly, it should be readonly\n  schemaPath?: string\n  localRefs?: LocalRefs\n  readonly meta?: boolean\n  readonly $async?: boolean // true if the current schema is asynchronous.\n  readonly refs: SchemaRefs = {}\n  readonly dynamicAnchors: {[Ref in string]?: true} = {}\n  validate?: AnyValidateFunction\n  validateName?: ValueScopeName\n  serialize?: (data: unknown) => string\n  serializeName?: ValueScopeName\n  parse?: (data: string) => unknown\n  parseName?: ValueScopeName\n\n  constructor(env: SchemaEnvArgs) {\n    let schema: AnySchemaObject | undefined\n    if (typeof env.schema == \"object\") schema = env.schema\n    this.schema = env.schema\n    this.schemaId = env.schemaId\n    this.root = env.root || this\n    this.baseId = env.baseId ?? normalizeId(schema?.[env.schemaId || \"$id\"])\n    this.schemaPath = env.schemaPath\n    this.localRefs = env.localRefs\n    this.meta = env.meta\n    this.$async = schema?.$async\n    this.refs = {}\n  }\n}\n\n// let codeSize = 0\n// let nodeCount = 0\n\n// Compiles schema in SchemaEnv\nexport function compileSchema(this: Ajv, sch: SchemaEnv): SchemaEnv {\n  // TODO refactor - remove compilations\n  const _sch = getCompilingSchema.call(this, sch)\n  if (_sch) return _sch\n  const rootId = getFullPath(this.opts.uriResolver, sch.root.baseId) // TODO if getFullPath removed 1 tests fails\n  const {es5, lines} = this.opts.code\n  const {ownProperties} = this.opts\n  const gen = new CodeGen(this.scope, {es5, lines, ownProperties})\n  let _ValidationError\n  if (sch.$async) {\n    _ValidationError = gen.scopeValue(\"Error\", {\n      ref: ValidationError,\n      code: _`require(\"ajv/dist/runtime/validation_error\").default`,\n    })\n  }\n\n  const validateName = gen.scopeName(\"validate\")\n  sch.validateName = validateName\n\n  const schemaCxt: SchemaCxt = {\n    gen,\n    allErrors: this.opts.allErrors,\n    data: N.data,\n    parentData: N.parentData,\n    parentDataProperty: N.parentDataProperty,\n    dataNames: [N.data],\n    dataPathArr: [nil], // TODO can its length be used as dataLevel if nil is removed?\n    dataLevel: 0,\n    dataTypes: [],\n    definedProperties: new Set<string>(),\n    topSchemaRef: gen.scopeValue(\n      \"schema\",\n      this.opts.code.source === true\n        ? {ref: sch.schema, code: stringify(sch.schema)}\n        : {ref: sch.schema}\n    ),\n    validateName,\n    ValidationError: _ValidationError,\n    schema: sch.schema,\n    schemaEnv: sch,\n    rootId,\n    baseId: sch.baseId || rootId,\n    schemaPath: nil,\n    errSchemaPath: sch.schemaPath || (this.opts.jtd ? \"\" : \"#\"),\n    errorPath: _`\"\"`,\n    opts: this.opts,\n    self: this,\n  }\n\n  let sourceCode: string | undefined\n  try {\n    this._compilations.add(sch)\n    validateFunctionCode(schemaCxt)\n    gen.optimize(this.opts.code.optimize)\n    // gen.optimize(1)\n    const validateCode = gen.toString()\n    sourceCode = `${gen.scopeRefs(N.scope)}return ${validateCode}`\n    // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))\n    if (this.opts.code.process) sourceCode = this.opts.code.process(sourceCode, sch)\n    // console.log(\"\\n\\n\\n *** \\n\", sourceCode)\n    const makeValidate = new Function(`${N.self}`, `${N.scope}`, sourceCode)\n    const validate: AnyValidateFunction = makeValidate(this, this.scope.get())\n    this.scope.value(validateName, {ref: validate})\n\n    validate.errors = null\n    validate.schema = sch.schema\n    validate.schemaEnv = sch\n    if (sch.$async) (validate as AsyncValidateFunction).$async = true\n    if (this.opts.code.source === true) {\n      validate.source = {validateName, validateCode, scopeValues: gen._values}\n    }\n    if (this.opts.unevaluated) {\n      const {props, items} = schemaCxt\n      validate.evaluated = {\n        props: props instanceof Name ? undefined : props,\n        items: items instanceof Name ? undefined : items,\n        dynamicProps: props instanceof Name,\n        dynamicItems: items instanceof Name,\n      }\n      if (validate.source) validate.source.evaluated = stringify(validate.evaluated)\n    }\n    sch.validate = validate\n    return sch\n  } catch (e) {\n    delete sch.validate\n    delete sch.validateName\n    if (sourceCode) this.logger.error(\"Error compiling schema, function code:\", sourceCode)\n    // console.log(\"\\n\\n\\n *** \\n\", sourceCode, this.opts)\n    throw e\n  } finally {\n    this._compilations.delete(sch)\n  }\n}\n\nexport function resolveRef(\n  this: Ajv,\n  root: SchemaEnv,\n  baseId: string,\n  ref: string\n): AnySchema | SchemaEnv | undefined {\n  ref = resolveUrl(this.opts.uriResolver, baseId, ref)\n  const schOrFunc = root.refs[ref]\n  if (schOrFunc) return schOrFunc\n\n  let _sch = resolve.call(this, root, ref)\n  if (_sch === undefined) {\n    const schema = root.localRefs?.[ref] // TODO maybe localRefs should hold SchemaEnv\n    const {schemaId} = this.opts\n    if (schema) _sch = new SchemaEnv({schema, schemaId, root, baseId})\n  }\n\n  if (_sch === undefined) return\n  return (root.refs[ref] = inlineOrCompile.call(this, _sch))\n}\n\nfunction inlineOrCompile(this: Ajv, sch: SchemaEnv): AnySchema | SchemaEnv {\n  if (inlineRef(sch.schema, this.opts.inlineRefs)) return sch.schema\n  return sch.validate ? sch : compileSchema.call(this, sch)\n}\n\n// Index of schema compilation in the currently compiled list\nexport function getCompilingSchema(this: Ajv, schEnv: SchemaEnv): SchemaEnv | void {\n  for (const sch of this._compilations) {\n    if (sameSchemaEnv(sch, schEnv)) return sch\n  }\n}\n\nfunction sameSchemaEnv(s1: SchemaEnv, s2: SchemaEnv): boolean {\n  return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId\n}\n\n// resolve and compile the references ($ref)\n// TODO returns AnySchemaObject (if the schema can be inlined) or validation function\nfunction resolve(\n  this: Ajv,\n  root: SchemaEnv, // information about the root schema for the current schema\n  ref: string // reference to resolve\n): SchemaEnv | undefined {\n  let sch\n  while (typeof (sch = this.refs[ref]) == \"string\") ref = sch\n  return sch || this.schemas[ref] || resolveSchema.call(this, root, ref)\n}\n\n// Resolve schema, its root and baseId\nexport function resolveSchema(\n  this: Ajv,\n  root: SchemaEnv, // root object with properties schema, refs TODO below SchemaEnv is assigned to it\n  ref: string // reference to resolve\n): SchemaEnv | undefined {\n  const p = this.opts.uriResolver.parse(ref)\n  const refPath = _getFullPath(this.opts.uriResolver, p)\n  let baseId = getFullPath(this.opts.uriResolver, root.baseId, undefined)\n  // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests\n  if (Object.keys(root.schema).length > 0 && refPath === baseId) {\n    return getJsonPointer.call(this, p, root)\n  }\n\n  const id = normalizeId(refPath)\n  const schOrRef = this.refs[id] || this.schemas[id]\n  if (typeof schOrRef == \"string\") {\n    const sch = resolveSchema.call(this, root, schOrRef)\n    if (typeof sch?.schema !== \"object\") return\n    return getJsonPointer.call(this, p, sch)\n  }\n\n  if (typeof schOrRef?.schema !== \"object\") return\n  if (!schOrRef.validate) compileSchema.call(this, schOrRef)\n  if (id === normalizeId(ref)) {\n    const {schema} = schOrRef\n    const {schemaId} = this.opts\n    const schId = schema[schemaId]\n    if (schId) baseId = resolveUrl(this.opts.uriResolver, baseId, schId)\n    return new SchemaEnv({schema, schemaId, root, baseId})\n  }\n  return getJsonPointer.call(this, p, schOrRef)\n}\n\nconst PREVENT_SCOPE_CHANGE = new Set([\n  \"properties\",\n  \"patternProperties\",\n  \"enum\",\n  \"dependencies\",\n  \"definitions\",\n])\n\nfunction getJsonPointer(\n  this: Ajv,\n  parsedRef: URIComponent,\n  {baseId, schema, root}: SchemaEnv\n): SchemaEnv | undefined {\n  if (parsedRef.fragment?.[0] !== \"/\") return\n  for (const part of parsedRef.fragment.slice(1).split(\"/\")) {\n    if (typeof schema === \"boolean\") return\n    const partSchema = schema[unescapeFragment(part)]\n    if (partSchema === undefined) return\n    schema = partSchema\n    // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?\n    const schId = typeof schema === \"object\" && schema[this.opts.schemaId]\n    if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {\n      baseId = resolveUrl(this.opts.uriResolver, baseId, schId)\n    }\n  }\n  let env: SchemaEnv | undefined\n  if (typeof schema != \"boolean\" && schema.$ref && !schemaHasRulesButRef(schema, this.RULES)) {\n    const $ref = resolveUrl(this.opts.uriResolver, baseId, schema.$ref)\n    env = resolveSchema.call(this, root, $ref)\n  }\n  // even though resolution failed we need to return SchemaEnv to throw exception\n  // so that compileAsync loads missing schema.\n  const {schemaId} = this.opts\n  env = env || new SchemaEnv({schema, schemaId, root, baseId})\n  if (env.schema !== env.root.schema) return env\n  return undefined\n}\n","import type {SchemaObjCxt} from \"..\"\nimport {_, getProperty, stringify} from \"../codegen\"\nimport {checkStrictMode} from \"../util\"\n\nexport function assignDefaults(it: SchemaObjCxt, ty?: string): void {\n  const {properties, items} = it.schema\n  if (ty === \"object\" && properties) {\n    for (const key in properties) {\n      assignDefault(it, key, properties[key].default)\n    }\n  } else if (ty === \"array\" && Array.isArray(items)) {\n    items.forEach((sch, i: number) => assignDefault(it, i, sch.default))\n  }\n}\n\nfunction assignDefault(it: SchemaObjCxt, prop: string | number, defaultValue: unknown): void {\n  const {gen, compositeRule, data, opts} = it\n  if (defaultValue === undefined) return\n  const childData = _`${data}${getProperty(prop)}`\n  if (compositeRule) {\n    checkStrictMode(it, `default is ignored for: ${childData}`)\n    return\n  }\n\n  let condition = _`${childData} === undefined`\n  if (opts.useDefaults === \"empty\") {\n    condition = _`${condition} || ${childData} === null || ${childData} === \"\"`\n  }\n  // `${childData} === undefined` +\n  // (opts.useDefaults === \"empty\" ? ` || ${childData} === null || ${childData} === \"\"` : \"\")\n  gen.if(condition, _`${childData} = ${stringify(defaultValue)}`)\n}\n","import type {AddedKeywordDefinition} from \"../types\"\n\nconst _jsonTypes = [\"string\", \"number\", \"integer\", \"boolean\", \"null\", \"object\", \"array\"] as const\n\nexport type JSONType = (typeof _jsonTypes)[number]\n\nconst jsonTypes: Set<string> = new Set(_jsonTypes)\n\nexport function isJSONType(x: unknown): x is JSONType {\n  return typeof x == \"string\" && jsonTypes.has(x)\n}\n\ntype ValidationTypes = {\n  [K in JSONType]: boolean | RuleGroup | undefined\n}\n\nexport interface ValidationRules {\n  rules: RuleGroup[]\n  post: RuleGroup\n  all: {[Key in string]?: boolean | Rule} // rules that have to be validated\n  keywords: {[Key in string]?: boolean} // all known keywords (superset of \"all\")\n  types: ValidationTypes\n}\n\nexport interface RuleGroup {\n  type?: JSONType\n  rules: Rule[]\n}\n\n// This interface wraps KeywordDefinition because definition can have multiple keywords\nexport interface Rule {\n  keyword: string\n  definition: AddedKeywordDefinition\n}\n\nexport function getRules(): ValidationRules {\n  const groups: Record<\"number\" | \"string\" | \"array\" | \"object\", RuleGroup> = {\n    number: {type: \"number\", rules: []},\n    string: {type: \"string\", rules: []},\n    array: {type: \"array\", rules: []},\n    object: {type: \"object\", rules: []},\n  }\n  return {\n    types: {...groups, integer: true, boolean: true, null: true},\n    rules: [{rules: []}, groups.number, groups.string, groups.array, groups.object],\n    post: {rules: []},\n    all: {},\n    keywords: {},\n  }\n}\n","import {_, nil, Code, Name} from \"./code\"\n\ninterface NameGroup {\n  prefix: string\n  index: number\n}\n\nexport interface NameValue {\n  ref: ValueReference // this is the reference to any value that can be referred to from generated code via `globals` var in the closure\n  key?: unknown // any key to identify a global to avoid duplicates, if not passed ref is used\n  code?: Code // this is the code creating the value needed for standalone code wit_out closure - can be a primitive value, function or import (`require`)\n}\n\nexport type ValueReference = unknown // possibly make CodeGen parameterized type on this type\n\nclass ValueError extends Error {\n  readonly value?: NameValue\n  constructor(name: ValueScopeName) {\n    super(`CodeGen: \"code\" for ${name} not defined`)\n    this.value = name.value\n  }\n}\n\ninterface ScopeOptions {\n  prefixes?: Set<string>\n  parent?: Scope\n}\n\ninterface ValueScopeOptions extends ScopeOptions {\n  scope: ScopeStore\n  es5?: boolean\n  lines?: boolean\n}\n\nexport type ScopeStore = Record<string, ValueReference[] | undefined>\n\ntype ScopeValues = {\n  [Prefix in string]?: Map<unknown, ValueScopeName>\n}\n\nexport type ScopeValueSets = {\n  [Prefix in string]?: Set<ValueScopeName>\n}\n\nexport enum UsedValueState {\n  Started,\n  Completed,\n}\n\nexport type UsedScopeValues = {\n  [Prefix in string]?: Map<ValueScopeName, UsedValueState | undefined>\n}\n\nexport const varKinds = {\n  const: new Name(\"const\"),\n  let: new Name(\"let\"),\n  var: new Name(\"var\"),\n}\n\nexport class Scope {\n  protected readonly _names: {[Prefix in string]?: NameGroup} = {}\n  protected readonly _prefixes?: Set<string>\n  protected readonly _parent?: Scope\n\n  constructor({prefixes, parent}: ScopeOptions = {}) {\n    this._prefixes = prefixes\n    this._parent = parent\n  }\n\n  toName(nameOrPrefix: Name | string): Name {\n    return nameOrPrefix instanceof Name ? nameOrPrefix : this.name(nameOrPrefix)\n  }\n\n  name(prefix: string): Name {\n    return new Name(this._newName(prefix))\n  }\n\n  protected _newName(prefix: string): string {\n    const ng = this._names[prefix] || this._nameGroup(prefix)\n    return `${prefix}${ng.index++}`\n  }\n\n  private _nameGroup(prefix: string): NameGroup {\n    if (this._parent?._prefixes?.has(prefix) || (this._prefixes && !this._prefixes.has(prefix))) {\n      throw new Error(`CodeGen: prefix \"${prefix}\" is not allowed in this scope`)\n    }\n    return (this._names[prefix] = {prefix, index: 0})\n  }\n}\n\ninterface ScopePath {\n  property: string\n  itemIndex: number\n}\n\nexport class ValueScopeName extends Name {\n  readonly prefix: string\n  value?: NameValue\n  scopePath?: Code\n\n  constructor(prefix: string, nameStr: string) {\n    super(nameStr)\n    this.prefix = prefix\n  }\n\n  setValue(value: NameValue, {property, itemIndex}: ScopePath): void {\n    this.value = value\n    this.scopePath = _`.${new Name(property)}[${itemIndex}]`\n  }\n}\n\ninterface VSOptions extends ValueScopeOptions {\n  _n: Code\n}\n\nconst line = _`\\n`\n\nexport class ValueScope extends Scope {\n  protected readonly _values: ScopeValues = {}\n  protected readonly _scope: ScopeStore\n  readonly opts: VSOptions\n\n  constructor(opts: ValueScopeOptions) {\n    super(opts)\n    this._scope = opts.scope\n    this.opts = {...opts, _n: opts.lines ? line : nil}\n  }\n\n  get(): ScopeStore {\n    return this._scope\n  }\n\n  name(prefix: string): ValueScopeName {\n    return new ValueScopeName(prefix, this._newName(prefix))\n  }\n\n  value(nameOrPrefix: ValueScopeName | string, value: NameValue): ValueScopeName {\n    if (value.ref === undefined) throw new Error(\"CodeGen: ref must be passed in value\")\n    const name = this.toName(nameOrPrefix) as ValueScopeName\n    const {prefix} = name\n    const valueKey = value.key ?? value.ref\n    let vs = this._values[prefix]\n    if (vs) {\n      const _name = vs.get(valueKey)\n      if (_name) return _name\n    } else {\n      vs = this._values[prefix] = new Map()\n    }\n    vs.set(valueKey, name)\n\n    const s = this._scope[prefix] || (this._scope[prefix] = [])\n    const itemIndex = s.length\n    s[itemIndex] = value.ref\n    name.setValue(value, {property: prefix, itemIndex})\n    return name\n  }\n\n  getValue(prefix: string, keyOrRef: unknown): ValueScopeName | undefined {\n    const vs = this._values[prefix]\n    if (!vs) return\n    return vs.get(keyOrRef)\n  }\n\n  scopeRefs(scopeName: Name, values: ScopeValues | ScopeValueSets = this._values): Code {\n    return this._reduceValues(values, (name: ValueScopeName) => {\n      if (name.scopePath === undefined) throw new Error(`CodeGen: name \"${name}\" has no value`)\n      return _`${scopeName}${name.scopePath}`\n    })\n  }\n\n  scopeCode(\n    values: ScopeValues | ScopeValueSets = this._values,\n    usedValues?: UsedScopeValues,\n    getCode?: (n: ValueScopeName) => Code | undefined\n  ): Code {\n    return this._reduceValues(\n      values,\n      (name: ValueScopeName) => {\n        if (name.value === undefined) throw new Error(`CodeGen: name \"${name}\" has no value`)\n        return name.value.code\n      },\n      usedValues,\n      getCode\n    )\n  }\n\n  private _reduceValues(\n    values: ScopeValues | ScopeValueSets,\n    valueCode: (n: ValueScopeName) => Code | undefined,\n    usedValues: UsedScopeValues = {},\n    getCode?: (n: ValueScopeName) => Code | undefined\n  ): Code {\n    let code: Code = nil\n    for (const prefix in values) {\n      const vs = values[prefix]\n      if (!vs) continue\n      const nameSet = (usedValues[prefix] = usedValues[prefix] || new Map())\n      vs.forEach((name: ValueScopeName) => {\n        if (nameSet.has(name)) return\n        nameSet.set(name, UsedValueState.Started)\n        let c = valueCode(name)\n        if (c) {\n          const def = this.opts.es5 ? varKinds.var : varKinds.const\n          code = _`${code}${def} ${name} = ${c};${this.opts._n}`\n        } else if ((c = getCode?.(name))) {\n          code = _`${code}${c}${this.opts._n}`\n        } else {\n          throw new ValueError(name)\n        }\n        nameSet.set(name, UsedValueState.Completed)\n      })\n    }\n    return code\n  }\n}\n","import type {ScopeValueSets, NameValue, ValueScope, ValueScopeName} from \"./scope\"\nimport {_, nil, _Code, Code, Name, UsedNames, CodeItem, addCodeArg, _CodeOrName} from \"./code\"\nimport {Scope, varKinds} from \"./scope\"\n\nexport {_, str, strConcat, nil, getProperty, stringify, regexpCode, Name, Code} from \"./code\"\nexport {Scope, ScopeStore, ValueScope, ValueScopeName, ScopeValueSets, varKinds} from \"./scope\"\n\n// type for expressions that can be safely inserted in code without quotes\nexport type SafeExpr = Code | number | boolean | null\n\n// type that is either Code of function that adds code to CodeGen instance using its methods\nexport type Block = Code | (() => void)\n\nexport const operators = {\n  GT: new _Code(\">\"),\n  GTE: new _Code(\">=\"),\n  LT: new _Code(\"<\"),\n  LTE: new _Code(\"<=\"),\n  EQ: new _Code(\"===\"),\n  NEQ: new _Code(\"!==\"),\n  NOT: new _Code(\"!\"),\n  OR: new _Code(\"||\"),\n  AND: new _Code(\"&&\"),\n  ADD: new _Code(\"+\"),\n}\n\nabstract class Node {\n  abstract readonly names: UsedNames\n\n  optimizeNodes(): this | ChildNode | ChildNode[] | undefined {\n    return this\n  }\n\n  optimizeNames(_names: UsedNames, _constants: Constants): this | undefined {\n    return this\n  }\n\n  // get count(): number {\n  //   return 1\n  // }\n}\n\nclass Def extends Node {\n  constructor(\n    private readonly varKind: Name,\n    private readonly name: Name,\n    private rhs?: SafeExpr\n  ) {\n    super()\n  }\n\n  render({es5, _n}: CGOptions): string {\n    const varKind = es5 ? varKinds.var : this.varKind\n    const rhs = this.rhs === undefined ? \"\" : ` = ${this.rhs}`\n    return `${varKind} ${this.name}${rhs};` + _n\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    if (!names[this.name.str]) return\n    if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    return this.rhs instanceof _CodeOrName ? this.rhs.names : {}\n  }\n}\n\nclass Assign extends Node {\n  constructor(\n    readonly lhs: Code,\n    public rhs: SafeExpr,\n    private readonly sideEffects?: boolean\n  ) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    return `${this.lhs} = ${this.rhs};` + _n\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    if (this.lhs instanceof Name && !names[this.lhs.str] && !this.sideEffects) return\n    this.rhs = optimizeExpr(this.rhs, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    const names = this.lhs instanceof Name ? {} : {...this.lhs.names}\n    return addExprNames(names, this.rhs)\n  }\n}\n\nclass AssignOp extends Assign {\n  constructor(\n    lhs: Code,\n    private readonly op: Code,\n    rhs: SafeExpr,\n    sideEffects?: boolean\n  ) {\n    super(lhs, rhs, sideEffects)\n  }\n\n  render({_n}: CGOptions): string {\n    return `${this.lhs} ${this.op}= ${this.rhs};` + _n\n  }\n}\n\nclass Label extends Node {\n  readonly names: UsedNames = {}\n  constructor(readonly label: Name) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    return `${this.label}:` + _n\n  }\n}\n\nclass Break extends Node {\n  readonly names: UsedNames = {}\n  constructor(readonly label?: Code) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    const label = this.label ? ` ${this.label}` : \"\"\n    return `break${label};` + _n\n  }\n}\n\nclass Throw extends Node {\n  constructor(readonly error: Code) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    return `throw ${this.error};` + _n\n  }\n\n  get names(): UsedNames {\n    return this.error.names\n  }\n}\n\nclass AnyCode extends Node {\n  constructor(private code: SafeExpr) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    return `${this.code};` + _n\n  }\n\n  optimizeNodes(): this | undefined {\n    return `${this.code}` ? this : undefined\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this {\n    this.code = optimizeExpr(this.code, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    return this.code instanceof _CodeOrName ? this.code.names : {}\n  }\n}\n\nabstract class ParentNode extends Node {\n  constructor(readonly nodes: ChildNode[] = []) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    return this.nodes.reduce((code, n) => code + n.render(opts), \"\")\n  }\n\n  optimizeNodes(): this | ChildNode | ChildNode[] | undefined {\n    const {nodes} = this\n    let i = nodes.length\n    while (i--) {\n      const n = nodes[i].optimizeNodes()\n      if (Array.isArray(n)) nodes.splice(i, 1, ...n)\n      else if (n) nodes[i] = n\n      else nodes.splice(i, 1)\n    }\n    return nodes.length > 0 ? this : undefined\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    const {nodes} = this\n    let i = nodes.length\n    while (i--) {\n      // iterating backwards improves 1-pass optimization\n      const n = nodes[i]\n      if (n.optimizeNames(names, constants)) continue\n      subtractNames(names, n.names)\n      nodes.splice(i, 1)\n    }\n    return nodes.length > 0 ? this : undefined\n  }\n\n  get names(): UsedNames {\n    return this.nodes.reduce((names: UsedNames, n) => addNames(names, n.names), {})\n  }\n\n  // get count(): number {\n  //   return this.nodes.reduce((c, n) => c + n.count, 1)\n  // }\n}\n\nabstract class BlockNode extends ParentNode {\n  render(opts: CGOptions): string {\n    return \"{\" + opts._n + super.render(opts) + \"}\" + opts._n\n  }\n}\n\nclass Root extends ParentNode {}\n\nclass Else extends BlockNode {\n  static readonly kind = \"else\"\n}\n\nclass If extends BlockNode {\n  static readonly kind = \"if\"\n  else?: If | Else\n  constructor(\n    private condition: Code | boolean,\n    nodes?: ChildNode[]\n  ) {\n    super(nodes)\n  }\n\n  render(opts: CGOptions): string {\n    let code = `if(${this.condition})` + super.render(opts)\n    if (this.else) code += \"else \" + this.else.render(opts)\n    return code\n  }\n\n  optimizeNodes(): If | ChildNode[] | undefined {\n    super.optimizeNodes()\n    const cond = this.condition\n    if (cond === true) return this.nodes // else is ignored here\n    let e = this.else\n    if (e) {\n      const ns = e.optimizeNodes()\n      e = this.else = Array.isArray(ns) ? new Else(ns) : (ns as Else | undefined)\n    }\n    if (e) {\n      if (cond === false) return e instanceof If ? e : e.nodes\n      if (this.nodes.length) return this\n      return new If(not(cond), e instanceof If ? [e] : e.nodes)\n    }\n    if (cond === false || !this.nodes.length) return undefined\n    return this\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    this.else = this.else?.optimizeNames(names, constants)\n    if (!(super.optimizeNames(names, constants) || this.else)) return\n    this.condition = optimizeExpr(this.condition, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    const names = super.names\n    addExprNames(names, this.condition)\n    if (this.else) addNames(names, this.else.names)\n    return names\n  }\n\n  // get count(): number {\n  //   return super.count + (this.else?.count || 0)\n  // }\n}\n\nabstract class For extends BlockNode {\n  static readonly kind = \"for\"\n}\n\nclass ForLoop extends For {\n  constructor(private iteration: Code) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    return `for(${this.iteration})` + super.render(opts)\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    if (!super.optimizeNames(names, constants)) return\n    this.iteration = optimizeExpr(this.iteration, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    return addNames(super.names, this.iteration.names)\n  }\n}\n\nclass ForRange extends For {\n  constructor(\n    private readonly varKind: Name,\n    private readonly name: Name,\n    private readonly from: SafeExpr,\n    private readonly to: SafeExpr\n  ) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    const varKind = opts.es5 ? varKinds.var : this.varKind\n    const {name, from, to} = this\n    return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts)\n  }\n\n  get names(): UsedNames {\n    const names = addExprNames(super.names, this.from)\n    return addExprNames(names, this.to)\n  }\n}\n\nclass ForIter extends For {\n  constructor(\n    private readonly loop: \"of\" | \"in\",\n    private readonly varKind: Name,\n    private readonly name: Name,\n    private iterable: Code\n  ) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts)\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    if (!super.optimizeNames(names, constants)) return\n    this.iterable = optimizeExpr(this.iterable, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    return addNames(super.names, this.iterable.names)\n  }\n}\n\nclass Func extends BlockNode {\n  static readonly kind = \"func\"\n  constructor(\n    public name: Name,\n    public args: Code,\n    public async?: boolean\n  ) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    const _async = this.async ? \"async \" : \"\"\n    return `${_async}function ${this.name}(${this.args})` + super.render(opts)\n  }\n}\n\nclass Return extends ParentNode {\n  static readonly kind = \"return\"\n\n  render(opts: CGOptions): string {\n    return \"return \" + super.render(opts)\n  }\n}\n\nclass Try extends BlockNode {\n  catch?: Catch\n  finally?: Finally\n\n  render(opts: CGOptions): string {\n    let code = \"try\" + super.render(opts)\n    if (this.catch) code += this.catch.render(opts)\n    if (this.finally) code += this.finally.render(opts)\n    return code\n  }\n\n  optimizeNodes(): this {\n    super.optimizeNodes()\n    this.catch?.optimizeNodes() as Catch | undefined\n    this.finally?.optimizeNodes() as Finally | undefined\n    return this\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this {\n    super.optimizeNames(names, constants)\n    this.catch?.optimizeNames(names, constants)\n    this.finally?.optimizeNames(names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    const names = super.names\n    if (this.catch) addNames(names, this.catch.names)\n    if (this.finally) addNames(names, this.finally.names)\n    return names\n  }\n\n  // get count(): number {\n  //   return super.count + (this.catch?.count || 0) + (this.finally?.count || 0)\n  // }\n}\n\nclass Catch extends BlockNode {\n  static readonly kind = \"catch\"\n  constructor(readonly error: Name) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    return `catch(${this.error})` + super.render(opts)\n  }\n}\n\nclass Finally extends BlockNode {\n  static readonly kind = \"finally\"\n  render(opts: CGOptions): string {\n    return \"finally\" + super.render(opts)\n  }\n}\n\ntype StartBlockNode = If | For | Func | Return | Try\n\ntype LeafNode = Def | Assign | Label | Break | Throw | AnyCode\n\ntype ChildNode = StartBlockNode | LeafNode\n\ntype EndBlockNodeType =\n  | typeof If\n  | typeof Else\n  | typeof For\n  | typeof Func\n  | typeof Return\n  | typeof Catch\n  | typeof Finally\n\ntype Constants = Record<string, SafeExpr | undefined>\n\nexport interface CodeGenOptions {\n  es5?: boolean\n  lines?: boolean\n  ownProperties?: boolean\n}\n\ninterface CGOptions extends CodeGenOptions {\n  _n: \"\\n\" | \"\"\n}\n\nexport class CodeGen {\n  readonly _scope: Scope\n  readonly _extScope: ValueScope\n  readonly _values: ScopeValueSets = {}\n  private readonly _nodes: ParentNode[]\n  private readonly _blockStarts: number[] = []\n  private readonly _constants: Constants = {}\n  private readonly opts: CGOptions\n\n  constructor(extScope: ValueScope, opts: CodeGenOptions = {}) {\n    this.opts = {...opts, _n: opts.lines ? \"\\n\" : \"\"}\n    this._extScope = extScope\n    this._scope = new Scope({parent: extScope})\n    this._nodes = [new Root()]\n  }\n\n  toString(): string {\n    return this._root.render(this.opts)\n  }\n\n  // returns unique name in the internal scope\n  name(prefix: string): Name {\n    return this._scope.name(prefix)\n  }\n\n  // reserves unique name in the external scope\n  scopeName(prefix: string): ValueScopeName {\n    return this._extScope.name(prefix)\n  }\n\n  // reserves unique name in the external scope and assigns value to it\n  scopeValue(prefixOrName: ValueScopeName | string, value: NameValue): Name {\n    const name = this._extScope.value(prefixOrName, value)\n    const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set())\n    vs.add(name)\n    return name\n  }\n\n  getScopeValue(prefix: string, keyOrRef: unknown): ValueScopeName | undefined {\n    return this._extScope.getValue(prefix, keyOrRef)\n  }\n\n  // return code that assigns values in the external scope to the names that are used internally\n  // (same names that were returned by gen.scopeName or gen.scopeValue)\n  scopeRefs(scopeName: Name): Code {\n    return this._extScope.scopeRefs(scopeName, this._values)\n  }\n\n  scopeCode(): Code {\n    return this._extScope.scopeCode(this._values)\n  }\n\n  private _def(\n    varKind: Name,\n    nameOrPrefix: Name | string,\n    rhs?: SafeExpr,\n    constant?: boolean\n  ): Name {\n    const name = this._scope.toName(nameOrPrefix)\n    if (rhs !== undefined && constant) this._constants[name.str] = rhs\n    this._leafNode(new Def(varKind, name, rhs))\n    return name\n  }\n\n  // `const` declaration (`var` in es5 mode)\n  const(nameOrPrefix: Name | string, rhs: SafeExpr, _constant?: boolean): Name {\n    return this._def(varKinds.const, nameOrPrefix, rhs, _constant)\n  }\n\n  // `let` declaration with optional assignment (`var` in es5 mode)\n  let(nameOrPrefix: Name | string, rhs?: SafeExpr, _constant?: boolean): Name {\n    return this._def(varKinds.let, nameOrPrefix, rhs, _constant)\n  }\n\n  // `var` declaration with optional assignment\n  var(nameOrPrefix: Name | string, rhs?: SafeExpr, _constant?: boolean): Name {\n    return this._def(varKinds.var, nameOrPrefix, rhs, _constant)\n  }\n\n  // assignment code\n  assign(lhs: Code, rhs: SafeExpr, sideEffects?: boolean): CodeGen {\n    return this._leafNode(new Assign(lhs, rhs, sideEffects))\n  }\n\n  // `+=` code\n  add(lhs: Code, rhs: SafeExpr): CodeGen {\n    return this._leafNode(new AssignOp(lhs, operators.ADD, rhs))\n  }\n\n  // appends passed SafeExpr to code or executes Block\n  code(c: Block | SafeExpr): CodeGen {\n    if (typeof c == \"function\") c()\n    else if (c !== nil) this._leafNode(new AnyCode(c))\n    return this\n  }\n\n  // returns code for object literal for the passed argument list of key-value pairs\n  object(...keyValues: [Name | string, SafeExpr | string][]): _Code {\n    const code: CodeItem[] = [\"{\"]\n    for (const [key, value] of keyValues) {\n      if (code.length > 1) code.push(\",\")\n      code.push(key)\n      if (key !== value || this.opts.es5) {\n        code.push(\":\")\n        addCodeArg(code, value)\n      }\n    }\n    code.push(\"}\")\n    return new _Code(code)\n  }\n\n  // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n  if(condition: Code | boolean, thenBody?: Block, elseBody?: Block): CodeGen {\n    this._blockNode(new If(condition))\n\n    if (thenBody && elseBody) {\n      this.code(thenBody).else().code(elseBody).endIf()\n    } else if (thenBody) {\n      this.code(thenBody).endIf()\n    } else if (elseBody) {\n      throw new Error('CodeGen: \"else\" body without \"then\" body')\n    }\n    return this\n  }\n\n  // `else if` clause - invalid without `if` or after `else` clauses\n  elseIf(condition: Code | boolean): CodeGen {\n    return this._elseNode(new If(condition))\n  }\n\n  // `else` clause - only valid after `if` or `else if` clauses\n  else(): CodeGen {\n    return this._elseNode(new Else())\n  }\n\n  // end `if` statement (needed if gen.if was used only with condition)\n  endIf(): CodeGen {\n    return this._endBlockNode(If, Else)\n  }\n\n  private _for(node: For, forBody?: Block): CodeGen {\n    this._blockNode(node)\n    if (forBody) this.code(forBody).endFor()\n    return this\n  }\n\n  // a generic `for` clause (or statement if `forBody` is passed)\n  for(iteration: Code, forBody?: Block): CodeGen {\n    return this._for(new ForLoop(iteration), forBody)\n  }\n\n  // `for` statement for a range of values\n  forRange(\n    nameOrPrefix: Name | string,\n    from: SafeExpr,\n    to: SafeExpr,\n    forBody: (index: Name) => void,\n    varKind: Code = this.opts.es5 ? varKinds.var : varKinds.let\n  ): CodeGen {\n    const name = this._scope.toName(nameOrPrefix)\n    return this._for(new ForRange(varKind, name, from, to), () => forBody(name))\n  }\n\n  // `for-of` statement (in es5 mode replace with a normal for loop)\n  forOf(\n    nameOrPrefix: Name | string,\n    iterable: Code,\n    forBody: (item: Name) => void,\n    varKind: Code = varKinds.const\n  ): CodeGen {\n    const name = this._scope.toName(nameOrPrefix)\n    if (this.opts.es5) {\n      const arr = iterable instanceof Name ? iterable : this.var(\"_arr\", iterable)\n      return this.forRange(\"_i\", 0, _`${arr}.length`, (i) => {\n        this.var(name, _`${arr}[${i}]`)\n        forBody(name)\n      })\n    }\n    return this._for(new ForIter(\"of\", varKind, name, iterable), () => forBody(name))\n  }\n\n  // `for-in` statement.\n  // With option `ownProperties` replaced with a `for-of` loop for object keys\n  forIn(\n    nameOrPrefix: Name | string,\n    obj: Code,\n    forBody: (item: Name) => void,\n    varKind: Code = this.opts.es5 ? varKinds.var : varKinds.const\n  ): CodeGen {\n    if (this.opts.ownProperties) {\n      return this.forOf(nameOrPrefix, _`Object.keys(${obj})`, forBody)\n    }\n    const name = this._scope.toName(nameOrPrefix)\n    return this._for(new ForIter(\"in\", varKind, name, obj), () => forBody(name))\n  }\n\n  // end `for` loop\n  endFor(): CodeGen {\n    return this._endBlockNode(For)\n  }\n\n  // `label` statement\n  label(label: Name): CodeGen {\n    return this._leafNode(new Label(label))\n  }\n\n  // `break` statement\n  break(label?: Code): CodeGen {\n    return this._leafNode(new Break(label))\n  }\n\n  // `return` statement\n  return(value: Block | SafeExpr): CodeGen {\n    const node = new Return()\n    this._blockNode(node)\n    this.code(value)\n    if (node.nodes.length !== 1) throw new Error('CodeGen: \"return\" should have one node')\n    return this._endBlockNode(Return)\n  }\n\n  // `try` statement\n  try(tryBody: Block, catchCode?: (e: Name) => void, finallyCode?: Block): CodeGen {\n    if (!catchCode && !finallyCode) throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"')\n    const node = new Try()\n    this._blockNode(node)\n    this.code(tryBody)\n    if (catchCode) {\n      const error = this.name(\"e\")\n      this._currNode = node.catch = new Catch(error)\n      catchCode(error)\n    }\n    if (finallyCode) {\n      this._currNode = node.finally = new Finally()\n      this.code(finallyCode)\n    }\n    return this._endBlockNode(Catch, Finally)\n  }\n\n  // `throw` statement\n  throw(error: Code): CodeGen {\n    return this._leafNode(new Throw(error))\n  }\n\n  // start self-balancing block\n  block(body?: Block, nodeCount?: number): CodeGen {\n    this._blockStarts.push(this._nodes.length)\n    if (body) this.code(body).endBlock(nodeCount)\n    return this\n  }\n\n  // end the current self-balancing block\n  endBlock(nodeCount?: number): CodeGen {\n    const len = this._blockStarts.pop()\n    if (len === undefined) throw new Error(\"CodeGen: not in self-balancing block\")\n    const toClose = this._nodes.length - len\n    if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {\n      throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`)\n    }\n    this._nodes.length = len\n    return this\n  }\n\n  // `function` heading (or definition if funcBody is passed)\n  func(name: Name, args: Code = nil, async?: boolean, funcBody?: Block): CodeGen {\n    this._blockNode(new Func(name, args, async))\n    if (funcBody) this.code(funcBody).endFunc()\n    return this\n  }\n\n  // end function definition\n  endFunc(): CodeGen {\n    return this._endBlockNode(Func)\n  }\n\n  optimize(n = 1): void {\n    while (n-- > 0) {\n      this._root.optimizeNodes()\n      this._root.optimizeNames(this._root.names, this._constants)\n    }\n  }\n\n  private _leafNode(node: LeafNode): CodeGen {\n    this._currNode.nodes.push(node)\n    return this\n  }\n\n  private _blockNode(node: StartBlockNode): void {\n    this._currNode.nodes.push(node)\n    this._nodes.push(node)\n  }\n\n  private _endBlockNode(N1: EndBlockNodeType, N2?: EndBlockNodeType): CodeGen {\n    const n = this._currNode\n    if (n instanceof N1 || (N2 && n instanceof N2)) {\n      this._nodes.pop()\n      return this\n    }\n    throw new Error(`CodeGen: not in block \"${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}\"`)\n  }\n\n  private _elseNode(node: If | Else): CodeGen {\n    const n = this._currNode\n    if (!(n instanceof If)) {\n      throw new Error('CodeGen: \"else\" without \"if\"')\n    }\n    this._currNode = n.else = node\n    return this\n  }\n\n  private get _root(): Root {\n    return this._nodes[0] as Root\n  }\n\n  private get _currNode(): ParentNode {\n    const ns = this._nodes\n    return ns[ns.length - 1]\n  }\n\n  private set _currNode(node: ParentNode) {\n    const ns = this._nodes\n    ns[ns.length - 1] = node\n  }\n\n  // get nodeCount(): number {\n  //   return this._root.count\n  // }\n}\n\nfunction addNames(names: UsedNames, from: UsedNames): UsedNames {\n  for (const n in from) names[n] = (names[n] || 0) + (from[n] || 0)\n  return names\n}\n\nfunction addExprNames(names: UsedNames, from: SafeExpr): UsedNames {\n  return from instanceof _CodeOrName ? addNames(names, from.names) : names\n}\n\nfunction optimizeExpr<T extends SafeExpr | Code>(expr: T, names: UsedNames, constants: Constants): T\nfunction optimizeExpr(expr: SafeExpr, names: UsedNames, constants: Constants): SafeExpr {\n  if (expr instanceof Name) return replaceName(expr)\n  if (!canOptimize(expr)) return expr\n  return new _Code(\n    expr._items.reduce((items: CodeItem[], c: SafeExpr | string) => {\n      if (c instanceof Name) c = replaceName(c)\n      if (c instanceof _Code) items.push(...c._items)\n      else items.push(c)\n      return items\n    }, [])\n  )\n\n  function replaceName(n: Name): SafeExpr {\n    const c = constants[n.str]\n    if (c === undefined || names[n.str] !== 1) return n\n    delete names[n.str]\n    return c\n  }\n\n  function canOptimize(e: SafeExpr): e is _Code {\n    return (\n      e instanceof _Code &&\n      e._items.some(\n        (c) => c instanceof Name && names[c.str] === 1 && constants[c.str] !== undefined\n      )\n    )\n  }\n}\n\nfunction subtractNames(names: UsedNames, from: UsedNames): void {\n  for (const n in from) names[n] = (names[n] || 0) - (from[n] || 0)\n}\n\nexport function not<T extends Code | SafeExpr>(x: T): T\nexport function not(x: Code | SafeExpr): Code | SafeExpr {\n  return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : _`!${par(x)}`\n}\n\nconst andCode = mappend(operators.AND)\n\n// boolean AND (&&) expression with the passed arguments\nexport function and(...args: Code[]): Code {\n  return args.reduce(andCode)\n}\n\nconst orCode = mappend(operators.OR)\n\n// boolean OR (||) expression with the passed arguments\nexport function or(...args: Code[]): Code {\n  return args.reduce(orCode)\n}\n\ntype MAppend = (x: Code, y: Code) => Code\n\nfunction mappend(op: Code): MAppend {\n  return (x, y) => (x === nil ? y : y === nil ? x : _`${par(x)} ${op} ${par(y)}`)\n}\n\nfunction par(x: Code): Code {\n  return x instanceof Name ? x : _`(${x})`\n}\n","import type {KeywordCxt} from \".\"\nimport type {\n  AnySchema,\n  SchemaValidateFunction,\n  AnyValidateFunction,\n  AddedKeywordDefinition,\n  MacroKeywordDefinition,\n  FuncKeywordDefinition,\n} from \"../../types\"\nimport type {SchemaObjCxt} from \"..\"\nimport {_, nil, not, stringify, Code, Name, CodeGen} from \"../codegen\"\nimport N from \"../names\"\nimport type {JSONType} from \"../rules\"\nimport {callValidateCode} from \"../../vocabularies/code\"\nimport {extendErrors} from \"../errors\"\n\ntype KeywordCompilationResult = AnySchema | SchemaValidateFunction | AnyValidateFunction\n\nexport function macroKeywordCode(cxt: KeywordCxt, def: MacroKeywordDefinition): void {\n  const {gen, keyword, schema, parentSchema, it} = cxt\n  const macroSchema = def.macro.call(it.self, schema, parentSchema, it)\n  const schemaRef = useKeyword(gen, keyword, macroSchema)\n  if (it.opts.validateSchema !== false) it.self.validateSchema(macroSchema, true)\n\n  const valid = gen.name(\"valid\")\n  cxt.subschema(\n    {\n      schema: macroSchema,\n      schemaPath: nil,\n      errSchemaPath: `${it.errSchemaPath}/${keyword}`,\n      topSchemaRef: schemaRef,\n      compositeRule: true,\n    },\n    valid\n  )\n  cxt.pass(valid, () => cxt.error(true))\n}\n\nexport function funcKeywordCode(cxt: KeywordCxt, def: FuncKeywordDefinition): void {\n  const {gen, keyword, schema, parentSchema, $data, it} = cxt\n  checkAsyncKeyword(it, def)\n  const validate =\n    !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate\n  const validateRef = useKeyword(gen, keyword, validate)\n  const valid = gen.let(\"valid\")\n  cxt.block$data(valid, validateKeyword)\n  cxt.ok(def.valid ?? valid)\n\n  function validateKeyword(): void {\n    if (def.errors === false) {\n      assignValid()\n      if (def.modifying) modifyData(cxt)\n      reportErrs(() => cxt.error())\n    } else {\n      const ruleErrs = def.async ? validateAsync() : validateSync()\n      if (def.modifying) modifyData(cxt)\n      reportErrs(() => addErrs(cxt, ruleErrs))\n    }\n  }\n\n  function validateAsync(): Name {\n    const ruleErrs = gen.let(\"ruleErrs\", null)\n    gen.try(\n      () => assignValid(_`await `),\n      (e) =>\n        gen.assign(valid, false).if(\n          _`${e} instanceof ${it.ValidationError as Name}`,\n          () => gen.assign(ruleErrs, _`${e}.errors`),\n          () => gen.throw(e)\n        )\n    )\n    return ruleErrs\n  }\n\n  function validateSync(): Code {\n    const validateErrs = _`${validateRef}.errors`\n    gen.assign(validateErrs, null)\n    assignValid(nil)\n    return validateErrs\n  }\n\n  function assignValid(_await: Code = def.async ? _`await ` : nil): void {\n    const passCxt = it.opts.passContext ? N.this : N.self\n    const passSchema = !((\"compile\" in def && !$data) || def.schema === false)\n    gen.assign(\n      valid,\n      _`${_await}${callValidateCode(cxt, validateRef, passCxt, passSchema)}`,\n      def.modifying\n    )\n  }\n\n  function reportErrs(errors: () => void): void {\n    gen.if(not(def.valid ?? valid), errors)\n  }\n}\n\nfunction modifyData(cxt: KeywordCxt): void {\n  const {gen, data, it} = cxt\n  gen.if(it.parentData, () => gen.assign(data, _`${it.parentData}[${it.parentDataProperty}]`))\n}\n\nfunction addErrs(cxt: KeywordCxt, errs: Code): void {\n  const {gen} = cxt\n  gen.if(\n    _`Array.isArray(${errs})`,\n    () => {\n      gen\n        .assign(N.vErrors, _`${N.vErrors} === null ? ${errs} : ${N.vErrors}.concat(${errs})`)\n        .assign(N.errors, _`${N.vErrors}.length`)\n      extendErrors(cxt)\n    },\n    () => cxt.error()\n  )\n}\n\nfunction checkAsyncKeyword({schemaEnv}: SchemaObjCxt, def: FuncKeywordDefinition): void {\n  if (def.async && !schemaEnv.$async) throw new Error(\"async keyword in sync schema\")\n}\n\nfunction useKeyword(gen: CodeGen, keyword: string, result?: KeywordCompilationResult): Name {\n  if (result === undefined) throw new Error(`keyword \"${keyword}\" failed to compile`)\n  return gen.scopeValue(\n    \"keyword\",\n    typeof result == \"function\" ? {ref: result} : {ref: result, code: stringify(result)}\n  )\n}\n\nexport function validSchemaType(\n  schema: unknown,\n  schemaType: JSONType[],\n  allowUndefined = false\n): boolean {\n  // TODO add tests\n  return (\n    !schemaType.length ||\n    schemaType.some((st) =>\n      st === \"array\"\n        ? Array.isArray(schema)\n        : st === \"object\"\n        ? schema && typeof schema == \"object\" && !Array.isArray(schema)\n        : typeof schema == st || (allowUndefined && typeof schema == \"undefined\")\n    )\n  )\n}\n\nexport function validateKeywordUsage(\n  {schema, opts, self, errSchemaPath}: SchemaObjCxt,\n  def: AddedKeywordDefinition,\n  keyword: string\n): void {\n  /* istanbul ignore if */\n  if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {\n    throw new Error(\"ajv implementation error\")\n  }\n\n  const deps = def.dependencies\n  if (deps?.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {\n    throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(\",\")}`)\n  }\n\n  if (def.validateSchema) {\n    const valid = def.validateSchema(schema[keyword])\n    if (!valid) {\n      const msg =\n        `keyword \"${keyword}\" value is invalid at path \"${errSchemaPath}\": ` +\n        self.errorsText(def.validateSchema.errors)\n      if (opts.validateSchema === \"log\") self.logger.error(msg)\n      else throw new Error(msg)\n    }\n  }\n}\n","import type {AnySchema, SchemaMap} from \"../types\"\nimport type {SchemaCxt} from \"../compile\"\nimport type {KeywordCxt} from \"../compile/validate\"\nimport {CodeGen, _, and, or, not, nil, strConcat, getProperty, Code, Name} from \"../compile/codegen\"\nimport {alwaysValidSchema, Type} from \"../compile/util\"\nimport N from \"../compile/names\"\nimport {useFunc} from \"../compile/util\"\nexport function checkReportMissingProp(cxt: KeywordCxt, prop: string): void {\n  const {gen, data, it} = cxt\n  gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {\n    cxt.setParams({missingProperty: _`${prop}`}, true)\n    cxt.error()\n  })\n}\n\nexport function checkMissingProp(\n  {gen, data, it: {opts}}: KeywordCxt,\n  properties: string[],\n  missing: Name\n): Code {\n  return or(\n    ...properties.map((prop) =>\n      and(noPropertyInData(gen, data, prop, opts.ownProperties), _`${missing} = ${prop}`)\n    )\n  )\n}\n\nexport function reportMissingProp(cxt: KeywordCxt, missing: Name): void {\n  cxt.setParams({missingProperty: missing}, true)\n  cxt.error()\n}\n\nexport function hasPropFunc(gen: CodeGen): Name {\n  return gen.scopeValue(\"func\", {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    ref: Object.prototype.hasOwnProperty,\n    code: _`Object.prototype.hasOwnProperty`,\n  })\n}\n\nexport function isOwnProperty(gen: CodeGen, data: Name, property: Name | string): Code {\n  return _`${hasPropFunc(gen)}.call(${data}, ${property})`\n}\n\nexport function propertyInData(\n  gen: CodeGen,\n  data: Name,\n  property: Name | string,\n  ownProperties?: boolean\n): Code {\n  const cond = _`${data}${getProperty(property)} !== undefined`\n  return ownProperties ? _`${cond} && ${isOwnProperty(gen, data, property)}` : cond\n}\n\nexport function noPropertyInData(\n  gen: CodeGen,\n  data: Name,\n  property: Name | string,\n  ownProperties?: boolean\n): Code {\n  const cond = _`${data}${getProperty(property)} === undefined`\n  return ownProperties ? or(cond, not(isOwnProperty(gen, data, property))) : cond\n}\n\nexport function allSchemaProperties(schemaMap?: SchemaMap): string[] {\n  return schemaMap ? Object.keys(schemaMap).filter((p) => p !== \"__proto__\") : []\n}\n\nexport function schemaProperties(it: SchemaCxt, schemaMap: SchemaMap): string[] {\n  return allSchemaProperties(schemaMap).filter(\n    (p) => !alwaysValidSchema(it, schemaMap[p] as AnySchema)\n  )\n}\n\nexport function callValidateCode(\n  {schemaCode, data, it: {gen, topSchemaRef, schemaPath, errorPath}, it}: KeywordCxt,\n  func: Code,\n  context: Code,\n  passSchema?: boolean\n): Code {\n  const dataAndSchema = passSchema ? _`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data\n  const valCxt: [Name, Code | number][] = [\n    [N.instancePath, strConcat(N.instancePath, errorPath)],\n    [N.parentData, it.parentData],\n    [N.parentDataProperty, it.parentDataProperty],\n    [N.rootData, N.rootData],\n  ]\n  if (it.opts.dynamicRef) valCxt.push([N.dynamicAnchors, N.dynamicAnchors])\n  const args = _`${dataAndSchema}, ${gen.object(...valCxt)}`\n  return context !== nil ? _`${func}.call(${context}, ${args})` : _`${func}(${args})`\n}\n\nconst newRegExp = _`new RegExp`\n\nexport function usePattern({gen, it: {opts}}: KeywordCxt, pattern: string): Name {\n  const u = opts.unicodeRegExp ? \"u\" : \"\"\n  const {regExp} = opts.code\n  const rx = regExp(pattern, u)\n\n  return gen.scopeValue(\"pattern\", {\n    key: rx.toString(),\n    ref: rx,\n    code: _`${regExp.code === \"new RegExp\" ? newRegExp : useFunc(gen, regExp)}(${pattern}, ${u})`,\n  })\n}\n\nexport function validateArray(cxt: KeywordCxt): Name {\n  const {gen, data, keyword, it} = cxt\n  const valid = gen.name(\"valid\")\n  if (it.allErrors) {\n    const validArr = gen.let(\"valid\", true)\n    validateItems(() => gen.assign(validArr, false))\n    return validArr\n  }\n  gen.var(valid, true)\n  validateItems(() => gen.break())\n  return valid\n\n  function validateItems(notValid: () => void): void {\n    const len = gen.const(\"len\", _`${data}.length`)\n    gen.forRange(\"i\", 0, len, (i) => {\n      cxt.subschema(\n        {\n          keyword,\n          dataProp: i,\n          dataPropType: Type.Num,\n        },\n        valid\n      )\n      gen.if(not(valid), notValid)\n    })\n  }\n}\n\nexport function validateUnion(cxt: KeywordCxt): void {\n  const {gen, schema, keyword, it} = cxt\n  /* istanbul ignore if */\n  if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\")\n  const alwaysValid = schema.some((sch: AnySchema) => alwaysValidSchema(it, sch))\n  if (alwaysValid && !it.opts.unevaluated) return\n\n  const valid = gen.let(\"valid\", false)\n  const schValid = gen.name(\"_valid\")\n\n  gen.block(() =>\n    schema.forEach((_sch: AnySchema, i: number) => {\n      const schCxt = cxt.subschema(\n        {\n          keyword,\n          schemaProp: i,\n          compositeRule: true,\n        },\n        schValid\n      )\n      gen.assign(valid, _`${valid} || ${schValid}`)\n      const merged = cxt.mergeValidEvaluated(schCxt, schValid)\n      // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)\n      // or if all properties and items were evaluated (it.props === true && it.items === true)\n      if (!merged) gen.if(not(valid))\n    })\n  )\n\n  cxt.result(\n    valid,\n    () => cxt.reset(),\n    () => cxt.error(true)\n  )\n}\n","import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, not, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema, checkStrictMode, Type} from \"../../compile/util\"\n\nexport type AdditionalItemsError = ErrorObject<\"additionalItems\", {limit: number}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {len}}) => str`must NOT have more than ${len} items`,\n  params: ({params: {len}}) => _`{limit: ${len}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"additionalItems\" as const,\n  type: \"array\",\n  schemaType: [\"boolean\", \"object\"],\n  before: \"uniqueItems\",\n  error,\n  code(cxt: KeywordCxt) {\n    const {parentSchema, it} = cxt\n    const {items} = parentSchema\n    if (!Array.isArray(items)) {\n      checkStrictMode(it, '\"additionalItems\" is ignored when \"items\" is not an array of schemas')\n      return\n    }\n    validateAdditionalItems(cxt, items)\n  },\n}\n\nexport function validateAdditionalItems(cxt: KeywordCxt, items: AnySchema[]): void {\n  const {gen, schema, data, keyword, it} = cxt\n  it.items = true\n  const len = gen.const(\"len\", _`${data}.length`)\n  if (schema === false) {\n    cxt.setParams({len: items.length})\n    cxt.pass(_`${len} <= ${items.length}`)\n  } else if (typeof schema == \"object\" && !alwaysValidSchema(it, schema)) {\n    const valid = gen.var(\"valid\", _`${len} <= ${items.length}`) // TODO var\n    gen.if(not(valid), () => validateItems(valid))\n    cxt.ok(valid)\n  }\n\n  function validateItems(valid: Name): void {\n    gen.forRange(\"i\", items.length, len, (i) => {\n      cxt.subschema({keyword, dataProp: i, dataPropType: Type.Num}, valid)\n      if (!it.allErrors) gen.if(not(valid), () => gen.break())\n    })\n  }\n}\n\nexport default def\n","'use strict'\n\nconst UUID_REG = /^[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/iu\nconst URN_REG = /([\\da-z][\\d\\-a-z]{0,31}):((?:[\\w!$'()*+,\\-.:;=@]|%[\\da-f]{2})+)/iu\n\nfunction isSecure (wsComponents) {\n  return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === 'wss'\n}\n\nfunction httpParse (components) {\n  if (!components.host) {\n    components.error = components.error || 'HTTP URIs must have a host.'\n  }\n\n  return components\n}\n\nfunction httpSerialize (components) {\n  const secure = String(components.scheme).toLowerCase() === 'https'\n\n  // normalize the default port\n  if (components.port === (secure ? 443 : 80) || components.port === '') {\n    components.port = undefined\n  }\n\n  // normalize the empty path\n  if (!components.path) {\n    components.path = '/'\n  }\n\n  // NOTE: We do not parse query strings for HTTP URIs\n  // as WWW Form Url Encoded query strings are part of the HTML4+ spec,\n  // and not the HTTP spec.\n\n  return components\n}\n\nfunction wsParse (wsComponents) {\n// indicate if the secure flag is set\n  wsComponents.secure = isSecure(wsComponents)\n\n  // construct resouce name\n  wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '')\n  wsComponents.path = undefined\n  wsComponents.query = undefined\n\n  return wsComponents\n}\n\nfunction wsSerialize (wsComponents) {\n// normalize the default port\n  if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === '') {\n    wsComponents.port = undefined\n  }\n\n  // ensure scheme matches secure flag\n  if (typeof wsComponents.secure === 'boolean') {\n    wsComponents.scheme = (wsComponents.secure ? 'wss' : 'ws')\n    wsComponents.secure = undefined\n  }\n\n  // reconstruct path from resource name\n  if (wsComponents.resourceName) {\n    const [path, query] = wsComponents.resourceName.split('?')\n    wsComponents.path = (path && path !== '/' ? path : undefined)\n    wsComponents.query = query\n    wsComponents.resourceName = undefined\n  }\n\n  // forbid fragment component\n  wsComponents.fragment = undefined\n\n  return wsComponents\n}\n\nfunction urnParse (urnComponents, options) {\n  if (!urnComponents.path) {\n    urnComponents.error = 'URN can not be parsed'\n    return urnComponents\n  }\n  const matches = urnComponents.path.match(URN_REG)\n  if (matches) {\n    const scheme = options.scheme || urnComponents.scheme || 'urn'\n    urnComponents.nid = matches[1].toLowerCase()\n    urnComponents.nss = matches[2]\n    const urnScheme = `${scheme}:${options.nid || urnComponents.nid}`\n    const schemeHandler = SCHEMES[urnScheme]\n    urnComponents.path = undefined\n\n    if (schemeHandler) {\n      urnComponents = schemeHandler.parse(urnComponents, options)\n    }\n  } else {\n    urnComponents.error = urnComponents.error || 'URN can not be parsed.'\n  }\n\n  return urnComponents\n}\n\nfunction urnSerialize (urnComponents, options) {\n  const scheme = options.scheme || urnComponents.scheme || 'urn'\n  const nid = urnComponents.nid.toLowerCase()\n  const urnScheme = `${scheme}:${options.nid || nid}`\n  const schemeHandler = SCHEMES[urnScheme]\n\n  if (schemeHandler) {\n    urnComponents = schemeHandler.serialize(urnComponents, options)\n  }\n\n  const uriComponents = urnComponents\n  const nss = urnComponents.nss\n  uriComponents.path = `${nid || options.nid}:${nss}`\n\n  options.skipEscape = true\n  return uriComponents\n}\n\nfunction urnuuidParse (urnComponents, options) {\n  const uuidComponents = urnComponents\n  uuidComponents.uuid = uuidComponents.nss\n  uuidComponents.nss = undefined\n\n  if (!options.tolerant && (!uuidComponents.uuid || !UUID_REG.test(uuidComponents.uuid))) {\n    uuidComponents.error = uuidComponents.error || 'UUID is not valid.'\n  }\n\n  return uuidComponents\n}\n\nfunction urnuuidSerialize (uuidComponents) {\n  const urnComponents = uuidComponents\n  // normalize UUID\n  urnComponents.nss = (uuidComponents.uuid || '').toLowerCase()\n  return urnComponents\n}\n\nconst http = {\n  scheme: 'http',\n  domainHost: true,\n  parse: httpParse,\n  serialize: httpSerialize\n}\n\nconst https = {\n  scheme: 'https',\n  domainHost: http.domainHost,\n  parse: httpParse,\n  serialize: httpSerialize\n}\n\nconst ws = {\n  scheme: 'ws',\n  domainHost: true,\n  parse: wsParse,\n  serialize: wsSerialize\n}\n\nconst wss = {\n  scheme: 'wss',\n  domainHost: ws.domainHost,\n  parse: ws.parse,\n  serialize: ws.serialize\n}\n\nconst urn = {\n  scheme: 'urn',\n  parse: urnParse,\n  serialize: urnSerialize,\n  skipNormalize: true\n}\n\nconst urnuuid = {\n  scheme: 'urn:uuid',\n  parse: urnuuidParse,\n  serialize: urnuuidSerialize,\n  skipNormalize: true\n}\n\nconst SCHEMES = {\n  http,\n  https,\n  ws,\n  wss,\n  urn,\n  'urn:uuid': urnuuid\n}\n\nmodule.exports = SCHEMES\n","import type {AnySchema, AnySchemaObject, UriResolver} from \"../types\"\nimport type Ajv from \"../ajv\"\nimport type {URIComponent} from \"fast-uri\"\nimport {eachItem} from \"./util\"\nimport * as equal from \"fast-deep-equal\"\nimport * as traverse from \"json-schema-traverse\"\n\n// the hash of local references inside the schema (created by getSchemaRefs), used for inline resolution\nexport type LocalRefs = {[Ref in string]?: AnySchemaObject}\n\n// TODO refactor to use keyword definitions\nconst SIMPLE_INLINED = new Set([\n  \"type\",\n  \"format\",\n  \"pattern\",\n  \"maxLength\",\n  \"minLength\",\n  \"maxProperties\",\n  \"minProperties\",\n  \"maxItems\",\n  \"minItems\",\n  \"maximum\",\n  \"minimum\",\n  \"uniqueItems\",\n  \"multipleOf\",\n  \"required\",\n  \"enum\",\n  \"const\",\n])\n\nexport function inlineRef(schema: AnySchema, limit: boolean | number = true): boolean {\n  if (typeof schema == \"boolean\") return true\n  if (limit === true) return !hasRef(schema)\n  if (!limit) return false\n  return countKeys(schema) <= limit\n}\n\nconst REF_KEYWORDS = new Set([\n  \"$ref\",\n  \"$recursiveRef\",\n  \"$recursiveAnchor\",\n  \"$dynamicRef\",\n  \"$dynamicAnchor\",\n])\n\nfunction hasRef(schema: AnySchemaObject): boolean {\n  for (const key in schema) {\n    if (REF_KEYWORDS.has(key)) return true\n    const sch = schema[key]\n    if (Array.isArray(sch) && sch.some(hasRef)) return true\n    if (typeof sch == \"object\" && hasRef(sch)) return true\n  }\n  return false\n}\n\nfunction countKeys(schema: AnySchemaObject): number {\n  let count = 0\n  for (const key in schema) {\n    if (key === \"$ref\") return Infinity\n    count++\n    if (SIMPLE_INLINED.has(key)) continue\n    if (typeof schema[key] == \"object\") {\n      eachItem(schema[key], (sch) => (count += countKeys(sch)))\n    }\n    if (count === Infinity) return Infinity\n  }\n  return count\n}\n\nexport function getFullPath(resolver: UriResolver, id = \"\", normalize?: boolean): string {\n  if (normalize !== false) id = normalizeId(id)\n  const p = resolver.parse(id)\n  return _getFullPath(resolver, p)\n}\n\nexport function _getFullPath(resolver: UriResolver, p: URIComponent): string {\n  const serialized = resolver.serialize(p)\n  return serialized.split(\"#\")[0] + \"#\"\n}\n\nconst TRAILING_SLASH_HASH = /#\\/?$/\nexport function normalizeId(id: string | undefined): string {\n  return id ? id.replace(TRAILING_SLASH_HASH, \"\") : \"\"\n}\n\nexport function resolveUrl(resolver: UriResolver, baseId: string, id: string): string {\n  id = normalizeId(id)\n  return resolver.resolve(baseId, id)\n}\n\nconst ANCHOR = /^[a-z_][-a-z0-9._]*$/i\n\nexport function getSchemaRefs(this: Ajv, schema: AnySchema, baseId: string): LocalRefs {\n  if (typeof schema == \"boolean\") return {}\n  const {schemaId, uriResolver} = this.opts\n  const schId = normalizeId(schema[schemaId] || baseId)\n  const baseIds: {[JsonPtr in string]?: string} = {\"\": schId}\n  const pathPrefix = getFullPath(uriResolver, schId, false)\n  const localRefs: LocalRefs = {}\n  const schemaRefs: Set<string> = new Set()\n\n  traverse(schema, {allKeys: true}, (sch, jsonPtr, _, parentJsonPtr) => {\n    if (parentJsonPtr === undefined) return\n    const fullPath = pathPrefix + jsonPtr\n    let innerBaseId = baseIds[parentJsonPtr]\n    if (typeof sch[schemaId] == \"string\") innerBaseId = addRef.call(this, sch[schemaId])\n    addAnchor.call(this, sch.$anchor)\n    addAnchor.call(this, sch.$dynamicAnchor)\n    baseIds[jsonPtr] = innerBaseId\n\n    function addRef(this: Ajv, ref: string): string {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const _resolve = this.opts.uriResolver.resolve\n      ref = normalizeId(innerBaseId ? _resolve(innerBaseId, ref) : ref)\n      if (schemaRefs.has(ref)) throw ambiguos(ref)\n      schemaRefs.add(ref)\n      let schOrRef = this.refs[ref]\n      if (typeof schOrRef == \"string\") schOrRef = this.refs[schOrRef]\n      if (typeof schOrRef == \"object\") {\n        checkAmbiguosRef(sch, schOrRef.schema, ref)\n      } else if (ref !== normalizeId(fullPath)) {\n        if (ref[0] === \"#\") {\n          checkAmbiguosRef(sch, localRefs[ref], ref)\n          localRefs[ref] = sch\n        } else {\n          this.refs[ref] = fullPath\n        }\n      }\n      return ref\n    }\n\n    function addAnchor(this: Ajv, anchor: unknown): void {\n      if (typeof anchor == \"string\") {\n        if (!ANCHOR.test(anchor)) throw new Error(`invalid anchor \"${anchor}\"`)\n        addRef.call(this, `#${anchor}`)\n      }\n    }\n  })\n\n  return localRefs\n\n  function checkAmbiguosRef(sch1: AnySchema, sch2: AnySchema | undefined, ref: string): void {\n    if (sch2 !== undefined && !equal(sch1, sch2)) throw ambiguos(ref)\n  }\n\n  function ambiguos(ref: string): Error {\n    return new Error(`reference \"${ref}\" resolves to more than one schema`)\n  }\n}\n","import type {CodeKeywordDefinition} from \"../../types\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"id\",\n  code() {\n    throw new Error('NOT SUPPORTED: keyword \"id\", use \"$id\" for schema ID')\n  },\n}\n\nexport default def\n","import type {ErrorNoParams, Vocabulary} from \"../../types\"\nimport additionalItems, {AdditionalItemsError} from \"./additionalItems\"\nimport prefixItems from \"./prefixItems\"\nimport items from \"./items\"\nimport items2020, {ItemsError} from \"./items2020\"\nimport contains, {ContainsError} from \"./contains\"\nimport dependencies, {DependenciesError} from \"./dependencies\"\nimport propertyNames, {PropertyNamesError} from \"./propertyNames\"\nimport additionalProperties, {AdditionalPropertiesError} from \"./additionalProperties\"\nimport properties from \"./properties\"\nimport patternProperties from \"./patternProperties\"\nimport notKeyword, {NotKeywordError} from \"./not\"\nimport anyOf, {AnyOfError} from \"./anyOf\"\nimport oneOf, {OneOfError} from \"./oneOf\"\nimport allOf from \"./allOf\"\nimport ifKeyword, {IfKeywordError} from \"./if\"\nimport thenElse from \"./thenElse\"\n\nexport default function getApplicator(draft2020 = false): Vocabulary {\n  const applicator = [\n    // any\n    notKeyword,\n    anyOf,\n    oneOf,\n    allOf,\n    ifKeyword,\n    thenElse,\n    // object\n    propertyNames,\n    additionalProperties,\n    dependencies,\n    properties,\n    patternProperties,\n  ]\n  // array\n  if (draft2020) applicator.push(prefixItems, items2020)\n  else applicator.push(additionalItems, items)\n  applicator.push(contains)\n  return applicator\n}\n\nexport type ApplicatorKeywordError =\n  | ErrorNoParams<\"false schema\">\n  | AdditionalItemsError\n  | ItemsError\n  | ContainsError\n  | AdditionalPropertiesError\n  | DependenciesError\n  | IfKeywordError\n  | AnyOfError\n  | OneOfError\n  | NotKeywordError\n  | PropertyNamesError\n","import type {KeywordErrorCxt, KeywordErrorDefinition} from \"../types\"\nimport type {SchemaCxt} from \"./index\"\nimport {CodeGen, _, str, strConcat, Code, Name} from \"./codegen\"\nimport {SafeExpr} from \"./codegen/code\"\nimport {getErrorPath, Type} from \"./util\"\nimport N from \"./names\"\n\nexport const keywordError: KeywordErrorDefinition = {\n  message: ({keyword}) => str`must pass \"${keyword}\" keyword validation`,\n}\n\nexport const keyword$DataError: KeywordErrorDefinition = {\n  message: ({keyword, schemaType}) =>\n    schemaType\n      ? str`\"${keyword}\" keyword must be ${schemaType} ($data)`\n      : str`\"${keyword}\" keyword is invalid ($data)`,\n}\n\nexport interface ErrorPaths {\n  instancePath?: Code\n  schemaPath?: string\n  parentSchema?: boolean\n}\n\nexport function reportError(\n  cxt: KeywordErrorCxt,\n  error: KeywordErrorDefinition = keywordError,\n  errorPaths?: ErrorPaths,\n  overrideAllErrors?: boolean\n): void {\n  const {it} = cxt\n  const {gen, compositeRule, allErrors} = it\n  const errObj = errorObjectCode(cxt, error, errorPaths)\n  if (overrideAllErrors ?? (compositeRule || allErrors)) {\n    addError(gen, errObj)\n  } else {\n    returnErrors(it, _`[${errObj}]`)\n  }\n}\n\nexport function reportExtraError(\n  cxt: KeywordErrorCxt,\n  error: KeywordErrorDefinition = keywordError,\n  errorPaths?: ErrorPaths\n): void {\n  const {it} = cxt\n  const {gen, compositeRule, allErrors} = it\n  const errObj = errorObjectCode(cxt, error, errorPaths)\n  addError(gen, errObj)\n  if (!(compositeRule || allErrors)) {\n    returnErrors(it, N.vErrors)\n  }\n}\n\nexport function resetErrorsCount(gen: CodeGen, errsCount: Name): void {\n  gen.assign(N.errors, errsCount)\n  gen.if(_`${N.vErrors} !== null`, () =>\n    gen.if(\n      errsCount,\n      () => gen.assign(_`${N.vErrors}.length`, errsCount),\n      () => gen.assign(N.vErrors, null)\n    )\n  )\n}\n\nexport function extendErrors({\n  gen,\n  keyword,\n  schemaValue,\n  data,\n  errsCount,\n  it,\n}: KeywordErrorCxt): void {\n  /* istanbul ignore if */\n  if (errsCount === undefined) throw new Error(\"ajv implementation error\")\n  const err = gen.name(\"err\")\n  gen.forRange(\"i\", errsCount, N.errors, (i) => {\n    gen.const(err, _`${N.vErrors}[${i}]`)\n    gen.if(_`${err}.instancePath === undefined`, () =>\n      gen.assign(_`${err}.instancePath`, strConcat(N.instancePath, it.errorPath))\n    )\n    gen.assign(_`${err}.schemaPath`, str`${it.errSchemaPath}/${keyword}`)\n    if (it.opts.verbose) {\n      gen.assign(_`${err}.schema`, schemaValue)\n      gen.assign(_`${err}.data`, data)\n    }\n  })\n}\n\nfunction addError(gen: CodeGen, errObj: Code): void {\n  const err = gen.const(\"err\", errObj)\n  gen.if(\n    _`${N.vErrors} === null`,\n    () => gen.assign(N.vErrors, _`[${err}]`),\n    _`${N.vErrors}.push(${err})`\n  )\n  gen.code(_`${N.errors}++`)\n}\n\nfunction returnErrors(it: SchemaCxt, errs: Code): void {\n  const {gen, validateName, schemaEnv} = it\n  if (schemaEnv.$async) {\n    gen.throw(_`new ${it.ValidationError as Name}(${errs})`)\n  } else {\n    gen.assign(_`${validateName}.errors`, errs)\n    gen.return(false)\n  }\n}\n\nconst E = {\n  keyword: new Name(\"keyword\"),\n  schemaPath: new Name(\"schemaPath\"), // also used in JTD errors\n  params: new Name(\"params\"),\n  propertyName: new Name(\"propertyName\"),\n  message: new Name(\"message\"),\n  schema: new Name(\"schema\"),\n  parentSchema: new Name(\"parentSchema\"),\n}\n\nfunction errorObjectCode(\n  cxt: KeywordErrorCxt,\n  error: KeywordErrorDefinition,\n  errorPaths?: ErrorPaths\n): Code {\n  const {createErrors} = cxt.it\n  if (createErrors === false) return _`{}`\n  return errorObject(cxt, error, errorPaths)\n}\n\nfunction errorObject(\n  cxt: KeywordErrorCxt,\n  error: KeywordErrorDefinition,\n  errorPaths: ErrorPaths = {}\n): Code {\n  const {gen, it} = cxt\n  const keyValues: [Name, SafeExpr | string][] = [\n    errorInstancePath(it, errorPaths),\n    errorSchemaPath(cxt, errorPaths),\n  ]\n  extraErrorProps(cxt, error, keyValues)\n  return gen.object(...keyValues)\n}\n\nfunction errorInstancePath({errorPath}: SchemaCxt, {instancePath}: ErrorPaths): [Name, Code] {\n  const instPath = instancePath\n    ? str`${errorPath}${getErrorPath(instancePath, Type.Str)}`\n    : errorPath\n  return [N.instancePath, strConcat(N.instancePath, instPath)]\n}\n\nfunction errorSchemaPath(\n  {keyword, it: {errSchemaPath}}: KeywordErrorCxt,\n  {schemaPath, parentSchema}: ErrorPaths\n): [Name, string | Code] {\n  let schPath = parentSchema ? errSchemaPath : str`${errSchemaPath}/${keyword}`\n  if (schemaPath) {\n    schPath = str`${schPath}${getErrorPath(schemaPath, Type.Str)}`\n  }\n  return [E.schemaPath, schPath]\n}\n\nfunction extraErrorProps(\n  cxt: KeywordErrorCxt,\n  {params, message}: KeywordErrorDefinition,\n  keyValues: [Name, SafeExpr | string][]\n): void {\n  const {keyword, data, schemaValue, it} = cxt\n  const {opts, propertyName, topSchemaRef, schemaPath} = it\n  keyValues.push(\n    [E.keyword, keyword],\n    [E.params, typeof params == \"function\" ? params(cxt) : params || _`{}`]\n  )\n  if (opts.messages) {\n    keyValues.push([E.message, typeof message == \"function\" ? message(cxt) : message])\n  }\n  if (opts.verbose) {\n    keyValues.push(\n      [E.schema, schemaValue],\n      [E.parentSchema, _`${topSchemaRef}${schemaPath}`],\n      [N.data, data]\n    )\n  }\n  if (propertyName) keyValues.push([E.propertyName, propertyName])\n}\n","import type {CodeKeywordDefinition, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, operators} from \"../../compile/codegen\"\n\nconst error: KeywordErrorDefinition = {\n  message({keyword, schemaCode}) {\n    const comp = keyword === \"maxItems\" ? \"more\" : \"fewer\"\n    return str`must NOT have ${comp} than ${schemaCode} items`\n  },\n  params: ({schemaCode}) => _`{limit: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: [\"maxItems\", \"minItems\"],\n  type: \"array\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {keyword, data, schemaCode} = cxt\n    const op = keyword === \"maxItems\" ? operators.GT : operators.LT\n    cxt.fail$data(_`${data}.length ${op} ${schemaCode}`)\n  },\n}\n\nexport default def\n","import type {KeywordErrorDefinition, KeywordErrorCxt} from \"../../types\"\nimport type {SchemaCxt} from \"..\"\nimport {reportError} from \"../errors\"\nimport {_, Name} from \"../codegen\"\nimport N from \"../names\"\n\nconst boolError: KeywordErrorDefinition = {\n  message: \"boolean schema is false\",\n}\n\nexport function topBoolOrEmptySchema(it: SchemaCxt): void {\n  const {gen, schema, validateName} = it\n  if (schema === false) {\n    falseSchemaError(it, false)\n  } else if (typeof schema == \"object\" && schema.$async === true) {\n    gen.return(N.data)\n  } else {\n    gen.assign(_`${validateName}.errors`, null)\n    gen.return(true)\n  }\n}\n\nexport function boolOrEmptySchema(it: SchemaCxt, valid: Name): void {\n  const {gen, schema} = it\n  if (schema === false) {\n    gen.var(valid, false) // TODO var\n    falseSchemaError(it)\n  } else {\n    gen.var(valid, true) // TODO var\n  }\n}\n\nfunction falseSchemaError(it: SchemaCxt, overrideAllErrors?: boolean): void {\n  const {gen, data} = it\n  // TODO maybe some other interface should be used for non-keyword validation errors...\n  const cxt: KeywordErrorCxt = {\n    gen,\n    keyword: \"false schema\",\n    data,\n    schema: false,\n    schemaCode: false,\n    schemaValue: false,\n    params: {},\n    it,\n  }\n  reportError(cxt, boolError, undefined, overrideAllErrors)\n}\n","import {resolveUrl, normalizeId, getFullPath} from \"./resolve\"\nimport type {UriResolver} from \"../types\"\n\nexport default class MissingRefError extends Error {\n  readonly missingRef: string\n  readonly missingSchema: string\n\n  constructor(resolver: UriResolver, baseId: string, ref: string, msg?: string) {\n    super(msg || `can't resolve reference ${ref} from id ${baseId}`)\n    this.missingRef = resolveUrl(resolver, baseId, ref)\n    this.missingSchema = normalizeId(getFullPath(resolver, this.missingRef))\n  }\n}\n","import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, not} from \"../../compile/codegen\"\nimport {alwaysValidSchema} from \"../../compile/util\"\n\nexport type PropertyNamesError = ErrorObject<\"propertyNames\", {propertyName: string}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: \"property name must be valid\",\n  params: ({params}) => _`{propertyName: ${params.propertyName}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"propertyNames\",\n  type: \"object\",\n  schemaType: [\"object\", \"boolean\"],\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, data, it} = cxt\n    if (alwaysValidSchema(it, schema)) return\n    const valid = gen.name(\"valid\")\n\n    gen.forIn(\"key\", data, (key) => {\n      cxt.setParams({propertyName: key})\n      cxt.subschema(\n        {\n          keyword: \"propertyNames\",\n          data: key,\n          dataTypes: [\"string\"],\n          propertyName: key,\n          compositeRule: true,\n        },\n        valid\n      )\n      gen.if(not(valid), () => {\n        cxt.error(true)\n        if (!it.allErrors) gen.break()\n      })\n    })\n\n    cxt.ok(valid)\n  },\n}\n\nexport default def\n","// https://github.com/ajv-validator/ajv/issues/889\nimport * as equal from \"fast-deep-equal\"\n\ntype Equal = typeof equal & {code: string}\n;(equal as Equal).code = 'require(\"ajv/dist/runtime/equal\").default'\n\nexport default equal as Equal\n","import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {checkDataTypes, getSchemaTypes, DataType} from \"../../compile/validate/dataType\"\nimport {_, str, Name} from \"../../compile/codegen\"\nimport {useFunc} from \"../../compile/util\"\nimport equal from \"../../runtime/equal\"\n\nexport type UniqueItemsError = ErrorObject<\n  \"uniqueItems\",\n  {i: number; j: number},\n  boolean | {$data: string}\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {i, j}}) =>\n    str`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,\n  params: ({params: {i, j}}) => _`{i: ${i}, j: ${j}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"uniqueItems\",\n  type: \"array\",\n  schemaType: \"boolean\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, $data, schema, parentSchema, schemaCode, it} = cxt\n    if (!$data && !schema) return\n    const valid = gen.let(\"valid\")\n    const itemTypes = parentSchema.items ? getSchemaTypes(parentSchema.items) : []\n    cxt.block$data(valid, validateUniqueItems, _`${schemaCode} === false`)\n    cxt.ok(valid)\n\n    function validateUniqueItems(): void {\n      const i = gen.let(\"i\", _`${data}.length`)\n      const j = gen.let(\"j\")\n      cxt.setParams({i, j})\n      gen.assign(valid, true)\n      gen.if(_`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j))\n    }\n\n    function canOptimize(): boolean {\n      return itemTypes.length > 0 && !itemTypes.some((t) => t === \"object\" || t === \"array\")\n    }\n\n    function loopN(i: Name, j: Name): void {\n      const item = gen.name(\"item\")\n      const wrongType = checkDataTypes(itemTypes, item, it.opts.strictNumbers, DataType.Wrong)\n      const indices = gen.const(\"indices\", _`{}`)\n      gen.for(_`;${i}--;`, () => {\n        gen.let(item, _`${data}[${i}]`)\n        gen.if(wrongType, _`continue`)\n        if (itemTypes.length > 1) gen.if(_`typeof ${item} == \"string\"`, _`${item} += \"_\"`)\n        gen\n          .if(_`typeof ${indices}[${item}] == \"number\"`, () => {\n            gen.assign(j, _`${indices}[${item}]`)\n            cxt.error()\n            gen.assign(valid, false).break()\n          })\n          .code(_`${indices}[${item}] = ${i}`)\n      })\n    }\n\n    function loopN2(i: Name, j: Name): void {\n      const eql = useFunc(gen, equal)\n      const outer = gen.name(\"outer\")\n      gen.label(outer).for(_`;${i}--;`, () =>\n        gen.for(_`${j} = ${i}; ${j}--;`, () =>\n          gen.if(_`${eql}(${data}[${i}], ${data}[${j}])`, () => {\n            cxt.error()\n            gen.assign(valid, false).break(outer)\n          })\n        )\n      )\n    }\n  },\n}\n\nexport default def\n","'use strict'\n\nconst HEX = {\n  0: 0,\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9,\n  a: 10,\n  A: 10,\n  b: 11,\n  B: 11,\n  c: 12,\n  C: 12,\n  d: 13,\n  D: 13,\n  e: 14,\n  E: 14,\n  f: 15,\n  F: 15\n}\n\nmodule.exports = {\n  HEX\n}\n","import type {\n  CodeKeywordDefinition,\n  KeywordErrorDefinition,\n  ErrorObject,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str} from \"../../compile/codegen\"\nimport {alwaysValidSchema} from \"../../compile/util\"\nimport {validateArray} from \"../code\"\nimport {validateAdditionalItems} from \"./additionalItems\"\n\nexport type ItemsError = ErrorObject<\"items\", {limit: number}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {len}}) => str`must NOT have more than ${len} items`,\n  params: ({params: {len}}) => _`{limit: ${len}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"items\",\n  type: \"array\",\n  schemaType: [\"object\", \"boolean\"],\n  before: \"uniqueItems\",\n  error,\n  code(cxt: KeywordCxt) {\n    const {schema, parentSchema, it} = cxt\n    const {prefixItems} = parentSchema\n    it.items = true\n    if (alwaysValidSchema(it, schema)) return\n    if (prefixItems) validateAdditionalItems(cxt, prefixItems)\n    else cxt.ok(validateArray(cxt))\n  },\n}\n\nexport default def\n","import type {\n  CodeKeywordDefinition,\n  KeywordErrorDefinition,\n  ErrorObject,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema, checkStrictMode, Type} from \"../../compile/util\"\n\nexport type ContainsError = ErrorObject<\n  \"contains\",\n  {minContains: number; maxContains?: number},\n  AnySchema\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {min, max}}) =>\n    max === undefined\n      ? str`must contain at least ${min} valid item(s)`\n      : str`must contain at least ${min} and no more than ${max} valid item(s)`,\n  params: ({params: {min, max}}) =>\n    max === undefined ? _`{minContains: ${min}}` : _`{minContains: ${min}, maxContains: ${max}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"contains\",\n  type: \"array\",\n  schemaType: [\"object\", \"boolean\"],\n  before: \"uniqueItems\",\n  trackErrors: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, parentSchema, data, it} = cxt\n    let min: number\n    let max: number | undefined\n    const {minContains, maxContains} = parentSchema\n    if (it.opts.next) {\n      min = minContains === undefined ? 1 : minContains\n      max = maxContains\n    } else {\n      min = 1\n    }\n    const len = gen.const(\"len\", _`${data}.length`)\n    cxt.setParams({min, max})\n    if (max === undefined && min === 0) {\n      checkStrictMode(it, `\"minContains\" == 0 without \"maxContains\": \"contains\" keyword ignored`)\n      return\n    }\n    if (max !== undefined && min > max) {\n      checkStrictMode(it, `\"minContains\" > \"maxContains\" is always invalid`)\n      cxt.fail()\n      return\n    }\n    if (alwaysValidSchema(it, schema)) {\n      let cond = _`${len} >= ${min}`\n      if (max !== undefined) cond = _`${cond} && ${len} <= ${max}`\n      cxt.pass(cond)\n      return\n    }\n\n    it.items = true\n    const valid = gen.name(\"valid\")\n    if (max === undefined && min === 1) {\n      validateItems(valid, () => gen.if(valid, () => gen.break()))\n    } else if (min === 0) {\n      gen.let(valid, true)\n      if (max !== undefined) gen.if(_`${data}.length > 0`, validateItemsWithCount)\n    } else {\n      gen.let(valid, false)\n      validateItemsWithCount()\n    }\n    cxt.result(valid, () => cxt.reset())\n\n    function validateItemsWithCount(): void {\n      const schValid = gen.name(\"_valid\")\n      const count = gen.let(\"count\", 0)\n      validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)))\n    }\n\n    function validateItems(_valid: Name, block: () => void): void {\n      gen.forRange(\"i\", 0, len, (i) => {\n        cxt.subschema(\n          {\n            keyword: \"contains\",\n            dataProp: i,\n            dataPropType: Type.Num,\n            compositeRule: true,\n          },\n          _valid\n        )\n        block()\n      })\n    }\n\n    function checkLimits(count: Name): void {\n      gen.code(_`${count}++`)\n      if (max === undefined) {\n        gen.if(_`${count} >= ${min}`, () => gen.assign(valid, true).break())\n      } else {\n        gen.if(_`${count} > ${max}`, () => gen.assign(valid, false).break())\n        if (min === 1) gen.assign(valid, true)\n        else gen.if(_`${count} >= ${min}`, () => gen.assign(valid, true))\n      }\n    }\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, operators} from \"../../compile/codegen\"\n\nconst error: KeywordErrorDefinition = {\n  message({keyword, schemaCode}) {\n    const comp = keyword === \"maxProperties\" ? \"more\" : \"fewer\"\n    return str`must NOT have ${comp} than ${schemaCode} properties`\n  },\n  params: ({schemaCode}) => _`{limit: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: [\"maxProperties\", \"minProperties\"],\n  type: \"object\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {keyword, data, schemaCode} = cxt\n    const op = keyword === \"maxProperties\" ? operators.GT : operators.LT\n    cxt.fail$data(_`Object.keys(${data}).length ${op} ${schemaCode}`)\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_} from \"../../compile/codegen\"\nimport {useFunc} from \"../../compile/util\"\nimport equal from \"../../runtime/equal\"\n\nexport type ConstError = ErrorObject<\"const\", {allowedValue: any}>\n\nconst error: KeywordErrorDefinition = {\n  message: \"must be equal to constant\",\n  params: ({schemaCode}) => _`{allowedValue: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"const\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, $data, schemaCode, schema} = cxt\n    if ($data || (schema && typeof schema == \"object\")) {\n      cxt.fail$data(_`!${useFunc(gen, equal)}(${data}, ${schemaCode})`)\n    } else {\n      cxt.fail(_`${schema} !== ${data}`)\n    }\n  },\n}\n\nexport default def\n","import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  SchemaMap,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str} from \"../../compile/codegen\"\nimport {alwaysValidSchema} from \"../../compile/util\"\nimport {checkReportMissingProp, checkMissingProp, reportMissingProp, propertyInData} from \"../code\"\n\nexport type PropertyDependencies = {[K in string]?: string[]}\n\nexport interface DependenciesErrorParams {\n  property: string\n  missingProperty: string\n  depsCount: number\n  deps: string // TODO change to string[]\n}\n\ntype SchemaDependencies = SchemaMap\n\nexport type DependenciesError = ErrorObject<\n  \"dependencies\",\n  DependenciesErrorParams,\n  {[K in string]?: string[] | AnySchema}\n>\n\nexport const error: KeywordErrorDefinition = {\n  message: ({params: {property, depsCount, deps}}) => {\n    const property_ies = depsCount === 1 ? \"property\" : \"properties\"\n    return str`must have ${property_ies} ${deps} when property ${property} is present`\n  },\n  params: ({params: {property, depsCount, deps, missingProperty}}) =>\n    _`{property: ${property},\n    missingProperty: ${missingProperty},\n    depsCount: ${depsCount},\n    deps: ${deps}}`, // TODO change to reference\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"dependencies\",\n  type: \"object\",\n  schemaType: \"object\",\n  error,\n  code(cxt: KeywordCxt) {\n    const [propDeps, schDeps] = splitDependencies(cxt)\n    validatePropertyDeps(cxt, propDeps)\n    validateSchemaDeps(cxt, schDeps)\n  },\n}\n\nfunction splitDependencies({schema}: KeywordCxt): [PropertyDependencies, SchemaDependencies] {\n  const propertyDeps: PropertyDependencies = {}\n  const schemaDeps: SchemaDependencies = {}\n  for (const key in schema) {\n    if (key === \"__proto__\") continue\n    const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps\n    deps[key] = schema[key]\n  }\n  return [propertyDeps, schemaDeps]\n}\n\nexport function validatePropertyDeps(\n  cxt: KeywordCxt,\n  propertyDeps: {[K in string]?: string[]} = cxt.schema\n): void {\n  const {gen, data, it} = cxt\n  if (Object.keys(propertyDeps).length === 0) return\n  const missing = gen.let(\"missing\")\n  for (const prop in propertyDeps) {\n    const deps = propertyDeps[prop] as string[]\n    if (deps.length === 0) continue\n    const hasProperty = propertyInData(gen, data, prop, it.opts.ownProperties)\n    cxt.setParams({\n      property: prop,\n      depsCount: deps.length,\n      deps: deps.join(\", \"),\n    })\n    if (it.allErrors) {\n      gen.if(hasProperty, () => {\n        for (const depProp of deps) {\n          checkReportMissingProp(cxt, depProp)\n        }\n      })\n    } else {\n      gen.if(_`${hasProperty} && (${checkMissingProp(cxt, deps, missing)})`)\n      reportMissingProp(cxt, missing)\n      gen.else()\n    }\n  }\n}\n\nexport function validateSchemaDeps(cxt: KeywordCxt, schemaDeps: SchemaMap = cxt.schema): void {\n  const {gen, data, keyword, it} = cxt\n  const valid = gen.name(\"valid\")\n  for (const prop in schemaDeps) {\n    if (alwaysValidSchema(it, schemaDeps[prop] as AnySchema)) continue\n    gen.if(\n      propertyInData(gen, data, prop, it.opts.ownProperties),\n      () => {\n        const schCxt = cxt.subschema({keyword, schemaProp: prop}, valid)\n        cxt.mergeValidEvaluated(schCxt, valid)\n      },\n      () => gen.var(valid, true) // TODO var\n    )\n    cxt.ok(valid)\n  }\n}\n\nexport default def\n","import type {\n  AddedKeywordDefinition,\n  AnySchema,\n  AnySchemaObject,\n  KeywordErrorCxt,\n  KeywordCxtParams,\n} from \"../../types\"\nimport type {SchemaCxt, SchemaObjCxt} from \"..\"\nimport type {InstanceOptions} from \"../../core\"\nimport {boolOrEmptySchema, topBoolOrEmptySchema} from \"./boolSchema\"\nimport {coerceAndCheckDataType, getSchemaTypes} from \"./dataType\"\nimport {shouldUseGroup, shouldUseRule} from \"./applicability\"\nimport {checkDataType, checkDataTypes, reportTypeError, DataType} from \"./dataType\"\nimport {assignDefaults} from \"./defaults\"\nimport {funcKeywordCode, macroKeywordCode, validateKeywordUsage, validSchemaType} from \"./keyword\"\nimport {getSubschema, extendSubschemaData, SubschemaArgs, extendSubschemaMode} from \"./subschema\"\nimport {_, nil, str, or, not, getProperty, Block, Code, Name, CodeGen} from \"../codegen\"\nimport N from \"../names\"\nimport {resolveUrl} from \"../resolve\"\nimport {\n  schemaRefOrVal,\n  schemaHasRulesButRef,\n  checkUnknownRules,\n  checkStrictMode,\n  unescapeJsonPointer,\n  mergeEvaluated,\n} from \"../util\"\nimport type {JSONType, Rule, RuleGroup} from \"../rules\"\nimport {\n  ErrorPaths,\n  reportError,\n  reportExtraError,\n  resetErrorsCount,\n  keyword$DataError,\n} from \"../errors\"\n\n// schema compilation - generates validation function, subschemaCode (below) is used for subschemas\nexport function validateFunctionCode(it: SchemaCxt): void {\n  if (isSchemaObj(it)) {\n    checkKeywords(it)\n    if (schemaCxtHasRules(it)) {\n      topSchemaObjCode(it)\n      return\n    }\n  }\n  validateFunction(it, () => topBoolOrEmptySchema(it))\n}\n\nfunction validateFunction(\n  {gen, validateName, schema, schemaEnv, opts}: SchemaCxt,\n  body: Block\n): void {\n  if (opts.code.es5) {\n    gen.func(validateName, _`${N.data}, ${N.valCxt}`, schemaEnv.$async, () => {\n      gen.code(_`\"use strict\"; ${funcSourceUrl(schema, opts)}`)\n      destructureValCxtES5(gen, opts)\n      gen.code(body)\n    })\n  } else {\n    gen.func(validateName, _`${N.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () =>\n      gen.code(funcSourceUrl(schema, opts)).code(body)\n    )\n  }\n}\n\nfunction destructureValCxt(opts: InstanceOptions): Code {\n  return _`{${N.instancePath}=\"\", ${N.parentData}, ${N.parentDataProperty}, ${N.rootData}=${\n    N.data\n  }${opts.dynamicRef ? _`, ${N.dynamicAnchors}={}` : nil}}={}`\n}\n\nfunction destructureValCxtES5(gen: CodeGen, opts: InstanceOptions): void {\n  gen.if(\n    N.valCxt,\n    () => {\n      gen.var(N.instancePath, _`${N.valCxt}.${N.instancePath}`)\n      gen.var(N.parentData, _`${N.valCxt}.${N.parentData}`)\n      gen.var(N.parentDataProperty, _`${N.valCxt}.${N.parentDataProperty}`)\n      gen.var(N.rootData, _`${N.valCxt}.${N.rootData}`)\n      if (opts.dynamicRef) gen.var(N.dynamicAnchors, _`${N.valCxt}.${N.dynamicAnchors}`)\n    },\n    () => {\n      gen.var(N.instancePath, _`\"\"`)\n      gen.var(N.parentData, _`undefined`)\n      gen.var(N.parentDataProperty, _`undefined`)\n      gen.var(N.rootData, N.data)\n      if (opts.dynamicRef) gen.var(N.dynamicAnchors, _`{}`)\n    }\n  )\n}\n\nfunction topSchemaObjCode(it: SchemaObjCxt): void {\n  const {schema, opts, gen} = it\n  validateFunction(it, () => {\n    if (opts.$comment && schema.$comment) commentKeyword(it)\n    checkNoDefault(it)\n    gen.let(N.vErrors, null)\n    gen.let(N.errors, 0)\n    if (opts.unevaluated) resetEvaluated(it)\n    typeAndKeywords(it)\n    returnResults(it)\n  })\n  return\n}\n\nfunction resetEvaluated(it: SchemaObjCxt): void {\n  // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated\n  const {gen, validateName} = it\n  it.evaluated = gen.const(\"evaluated\", _`${validateName}.evaluated`)\n  gen.if(_`${it.evaluated}.dynamicProps`, () => gen.assign(_`${it.evaluated}.props`, _`undefined`))\n  gen.if(_`${it.evaluated}.dynamicItems`, () => gen.assign(_`${it.evaluated}.items`, _`undefined`))\n}\n\nfunction funcSourceUrl(schema: AnySchema, opts: InstanceOptions): Code {\n  const schId = typeof schema == \"object\" && schema[opts.schemaId]\n  return schId && (opts.code.source || opts.code.process) ? _`/*# sourceURL=${schId} */` : nil\n}\n\n// schema compilation - this function is used recursively to generate code for sub-schemas\nfunction subschemaCode(it: SchemaCxt, valid: Name): void {\n  if (isSchemaObj(it)) {\n    checkKeywords(it)\n    if (schemaCxtHasRules(it)) {\n      subSchemaObjCode(it, valid)\n      return\n    }\n  }\n  boolOrEmptySchema(it, valid)\n}\n\nfunction schemaCxtHasRules({schema, self}: SchemaCxt): boolean {\n  if (typeof schema == \"boolean\") return !schema\n  for (const key in schema) if (self.RULES.all[key]) return true\n  return false\n}\n\nfunction isSchemaObj(it: SchemaCxt): it is SchemaObjCxt {\n  return typeof it.schema != \"boolean\"\n}\n\nfunction subSchemaObjCode(it: SchemaObjCxt, valid: Name): void {\n  const {schema, gen, opts} = it\n  if (opts.$comment && schema.$comment) commentKeyword(it)\n  updateContext(it)\n  checkAsyncSchema(it)\n  const errsCount = gen.const(\"_errs\", N.errors)\n  typeAndKeywords(it, errsCount)\n  // TODO var\n  gen.var(valid, _`${errsCount} === ${N.errors}`)\n}\n\nfunction checkKeywords(it: SchemaObjCxt): void {\n  checkUnknownRules(it)\n  checkRefsAndKeywords(it)\n}\n\nfunction typeAndKeywords(it: SchemaObjCxt, errsCount?: Name): void {\n  if (it.opts.jtd) return schemaKeywords(it, [], false, errsCount)\n  const types = getSchemaTypes(it.schema)\n  const checkedTypes = coerceAndCheckDataType(it, types)\n  schemaKeywords(it, types, !checkedTypes, errsCount)\n}\n\nfunction checkRefsAndKeywords(it: SchemaObjCxt): void {\n  const {schema, errSchemaPath, opts, self} = it\n  if (schema.$ref && opts.ignoreKeywordsWithRef && schemaHasRulesButRef(schema, self.RULES)) {\n    self.logger.warn(`$ref: keywords ignored in schema at path \"${errSchemaPath}\"`)\n  }\n}\n\nfunction checkNoDefault(it: SchemaObjCxt): void {\n  const {schema, opts} = it\n  if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {\n    checkStrictMode(it, \"default is ignored in the schema root\")\n  }\n}\n\nfunction updateContext(it: SchemaObjCxt): void {\n  const schId = it.schema[it.opts.schemaId]\n  if (schId) it.baseId = resolveUrl(it.opts.uriResolver, it.baseId, schId)\n}\n\nfunction checkAsyncSchema(it: SchemaObjCxt): void {\n  if (it.schema.$async && !it.schemaEnv.$async) throw new Error(\"async schema in sync schema\")\n}\n\nfunction commentKeyword({gen, schemaEnv, schema, errSchemaPath, opts}: SchemaObjCxt): void {\n  const msg = schema.$comment\n  if (opts.$comment === true) {\n    gen.code(_`${N.self}.logger.log(${msg})`)\n  } else if (typeof opts.$comment == \"function\") {\n    const schemaPath = str`${errSchemaPath}/$comment`\n    const rootName = gen.scopeValue(\"root\", {ref: schemaEnv.root})\n    gen.code(_`${N.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`)\n  }\n}\n\nfunction returnResults(it: SchemaCxt): void {\n  const {gen, schemaEnv, validateName, ValidationError, opts} = it\n  if (schemaEnv.$async) {\n    // TODO assign unevaluated\n    gen.if(\n      _`${N.errors} === 0`,\n      () => gen.return(N.data),\n      () => gen.throw(_`new ${ValidationError as Name}(${N.vErrors})`)\n    )\n  } else {\n    gen.assign(_`${validateName}.errors`, N.vErrors)\n    if (opts.unevaluated) assignEvaluated(it)\n    gen.return(_`${N.errors} === 0`)\n  }\n}\n\nfunction assignEvaluated({gen, evaluated, props, items}: SchemaCxt): void {\n  if (props instanceof Name) gen.assign(_`${evaluated}.props`, props)\n  if (items instanceof Name) gen.assign(_`${evaluated}.items`, items)\n}\n\nfunction schemaKeywords(\n  it: SchemaObjCxt,\n  types: JSONType[],\n  typeErrors: boolean,\n  errsCount?: Name\n): void {\n  const {gen, schema, data, allErrors, opts, self} = it\n  const {RULES} = self\n  if (schema.$ref && (opts.ignoreKeywordsWithRef || !schemaHasRulesButRef(schema, RULES))) {\n    gen.block(() => keywordCode(it, \"$ref\", (RULES.all.$ref as Rule).definition)) // TODO typecast\n    return\n  }\n  if (!opts.jtd) checkStrictTypes(it, types)\n  gen.block(() => {\n    for (const group of RULES.rules) groupKeywords(group)\n    groupKeywords(RULES.post)\n  })\n\n  function groupKeywords(group: RuleGroup): void {\n    if (!shouldUseGroup(schema, group)) return\n    if (group.type) {\n      gen.if(checkDataType(group.type, data, opts.strictNumbers))\n      iterateKeywords(it, group)\n      if (types.length === 1 && types[0] === group.type && typeErrors) {\n        gen.else()\n        reportTypeError(it)\n      }\n      gen.endIf()\n    } else {\n      iterateKeywords(it, group)\n    }\n    // TODO make it \"ok\" call?\n    if (!allErrors) gen.if(_`${N.errors} === ${errsCount || 0}`)\n  }\n}\n\nfunction iterateKeywords(it: SchemaObjCxt, group: RuleGroup): void {\n  const {\n    gen,\n    schema,\n    opts: {useDefaults},\n  } = it\n  if (useDefaults) assignDefaults(it, group.type)\n  gen.block(() => {\n    for (const rule of group.rules) {\n      if (shouldUseRule(schema, rule)) {\n        keywordCode(it, rule.keyword, rule.definition, group.type)\n      }\n    }\n  })\n}\n\nfunction checkStrictTypes(it: SchemaObjCxt, types: JSONType[]): void {\n  if (it.schemaEnv.meta || !it.opts.strictTypes) return\n  checkContextTypes(it, types)\n  if (!it.opts.allowUnionTypes) checkMultipleTypes(it, types)\n  checkKeywordTypes(it, it.dataTypes)\n}\n\nfunction checkContextTypes(it: SchemaObjCxt, types: JSONType[]): void {\n  if (!types.length) return\n  if (!it.dataTypes.length) {\n    it.dataTypes = types\n    return\n  }\n  types.forEach((t) => {\n    if (!includesType(it.dataTypes, t)) {\n      strictTypesError(it, `type \"${t}\" not allowed by context \"${it.dataTypes.join(\",\")}\"`)\n    }\n  })\n  narrowSchemaTypes(it, types)\n}\n\nfunction checkMultipleTypes(it: SchemaObjCxt, ts: JSONType[]): void {\n  if (ts.length > 1 && !(ts.length === 2 && ts.includes(\"null\"))) {\n    strictTypesError(it, \"use allowUnionTypes to allow union type keyword\")\n  }\n}\n\nfunction checkKeywordTypes(it: SchemaObjCxt, ts: JSONType[]): void {\n  const rules = it.self.RULES.all\n  for (const keyword in rules) {\n    const rule = rules[keyword]\n    if (typeof rule == \"object\" && shouldUseRule(it.schema, rule)) {\n      const {type} = rule.definition\n      if (type.length && !type.some((t) => hasApplicableType(ts, t))) {\n        strictTypesError(it, `missing type \"${type.join(\",\")}\" for keyword \"${keyword}\"`)\n      }\n    }\n  }\n}\n\nfunction hasApplicableType(schTs: JSONType[], kwdT: JSONType): boolean {\n  return schTs.includes(kwdT) || (kwdT === \"number\" && schTs.includes(\"integer\"))\n}\n\nfunction includesType(ts: JSONType[], t: JSONType): boolean {\n  return ts.includes(t) || (t === \"integer\" && ts.includes(\"number\"))\n}\n\nfunction narrowSchemaTypes(it: SchemaObjCxt, withTypes: JSONType[]): void {\n  const ts: JSONType[] = []\n  for (const t of it.dataTypes) {\n    if (includesType(withTypes, t)) ts.push(t)\n    else if (withTypes.includes(\"integer\") && t === \"number\") ts.push(\"integer\")\n  }\n  it.dataTypes = ts\n}\n\nfunction strictTypesError(it: SchemaObjCxt, msg: string): void {\n  const schemaPath = it.schemaEnv.baseId + it.errSchemaPath\n  msg += ` at \"${schemaPath}\" (strictTypes)`\n  checkStrictMode(it, msg, it.opts.strictTypes)\n}\n\nexport class KeywordCxt implements KeywordErrorCxt {\n  readonly gen: CodeGen\n  readonly allErrors?: boolean\n  readonly keyword: string\n  readonly data: Name // Name referencing the current level of the data instance\n  readonly $data?: string | false\n  schema: any // keyword value in the schema\n  readonly schemaValue: Code | number | boolean // Code reference to keyword schema value or primitive value\n  readonly schemaCode: Code | number | boolean // Code reference to resolved schema value (different if schema is $data)\n  readonly schemaType: JSONType[] // allowed type(s) of keyword value in the schema\n  readonly parentSchema: AnySchemaObject\n  readonly errsCount?: Name // Name reference to the number of validation errors collected before this keyword,\n  // requires option trackErrors in keyword definition\n  params: KeywordCxtParams // object to pass parameters to error messages from keyword code\n  readonly it: SchemaObjCxt // schema compilation context (schema is guaranteed to be an object, not boolean)\n  readonly def: AddedKeywordDefinition\n\n  constructor(it: SchemaObjCxt, def: AddedKeywordDefinition, keyword: string) {\n    validateKeywordUsage(it, def, keyword)\n    this.gen = it.gen\n    this.allErrors = it.allErrors\n    this.keyword = keyword\n    this.data = it.data\n    this.schema = it.schema[keyword]\n    this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data\n    this.schemaValue = schemaRefOrVal(it, this.schema, keyword, this.$data)\n    this.schemaType = def.schemaType\n    this.parentSchema = it.schema\n    this.params = {}\n    this.it = it\n    this.def = def\n\n    if (this.$data) {\n      this.schemaCode = it.gen.const(\"vSchema\", getData(this.$data, it))\n    } else {\n      this.schemaCode = this.schemaValue\n      if (!validSchemaType(this.schema, def.schemaType, def.allowUndefined)) {\n        throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`)\n      }\n    }\n\n    if (\"code\" in def ? def.trackErrors : def.errors !== false) {\n      this.errsCount = it.gen.const(\"_errs\", N.errors)\n    }\n  }\n\n  result(condition: Code, successAction?: () => void, failAction?: () => void): void {\n    this.failResult(not(condition), successAction, failAction)\n  }\n\n  failResult(condition: Code, successAction?: () => void, failAction?: () => void): void {\n    this.gen.if(condition)\n    if (failAction) failAction()\n    else this.error()\n    if (successAction) {\n      this.gen.else()\n      successAction()\n      if (this.allErrors) this.gen.endIf()\n    } else {\n      if (this.allErrors) this.gen.endIf()\n      else this.gen.else()\n    }\n  }\n\n  pass(condition: Code, failAction?: () => void): void {\n    this.failResult(not(condition), undefined, failAction)\n  }\n\n  fail(condition?: Code): void {\n    if (condition === undefined) {\n      this.error()\n      if (!this.allErrors) this.gen.if(false) // this branch will be removed by gen.optimize\n      return\n    }\n    this.gen.if(condition)\n    this.error()\n    if (this.allErrors) this.gen.endIf()\n    else this.gen.else()\n  }\n\n  fail$data(condition: Code): void {\n    if (!this.$data) return this.fail(condition)\n    const {schemaCode} = this\n    this.fail(_`${schemaCode} !== undefined && (${or(this.invalid$data(), condition)})`)\n  }\n\n  error(append?: boolean, errorParams?: KeywordCxtParams, errorPaths?: ErrorPaths): void {\n    if (errorParams) {\n      this.setParams(errorParams)\n      this._error(append, errorPaths)\n      this.setParams({})\n      return\n    }\n    this._error(append, errorPaths)\n  }\n\n  private _error(append?: boolean, errorPaths?: ErrorPaths): void {\n    ;(append ? reportExtraError : reportError)(this, this.def.error, errorPaths)\n  }\n\n  $dataError(): void {\n    reportError(this, this.def.$dataError || keyword$DataError)\n  }\n\n  reset(): void {\n    if (this.errsCount === undefined) throw new Error('add \"trackErrors\" to keyword definition')\n    resetErrorsCount(this.gen, this.errsCount)\n  }\n\n  ok(cond: Code | boolean): void {\n    if (!this.allErrors) this.gen.if(cond)\n  }\n\n  setParams(obj: KeywordCxtParams, assign?: true): void {\n    if (assign) Object.assign(this.params, obj)\n    else this.params = obj\n  }\n\n  block$data(valid: Name, codeBlock: () => void, $dataValid: Code = nil): void {\n    this.gen.block(() => {\n      this.check$data(valid, $dataValid)\n      codeBlock()\n    })\n  }\n\n  check$data(valid: Name = nil, $dataValid: Code = nil): void {\n    if (!this.$data) return\n    const {gen, schemaCode, schemaType, def} = this\n    gen.if(or(_`${schemaCode} === undefined`, $dataValid))\n    if (valid !== nil) gen.assign(valid, true)\n    if (schemaType.length || def.validateSchema) {\n      gen.elseIf(this.invalid$data())\n      this.$dataError()\n      if (valid !== nil) gen.assign(valid, false)\n    }\n    gen.else()\n  }\n\n  invalid$data(): Code {\n    const {gen, schemaCode, schemaType, def, it} = this\n    return or(wrong$DataType(), invalid$DataSchema())\n\n    function wrong$DataType(): Code {\n      if (schemaType.length) {\n        /* istanbul ignore if */\n        if (!(schemaCode instanceof Name)) throw new Error(\"ajv implementation error\")\n        const st = Array.isArray(schemaType) ? schemaType : [schemaType]\n        return _`${checkDataTypes(st, schemaCode, it.opts.strictNumbers, DataType.Wrong)}`\n      }\n      return nil\n    }\n\n    function invalid$DataSchema(): Code {\n      if (def.validateSchema) {\n        const validateSchemaRef = gen.scopeValue(\"validate$data\", {ref: def.validateSchema}) // TODO value.code for standalone\n        return _`!${validateSchemaRef}(${schemaCode})`\n      }\n      return nil\n    }\n  }\n\n  subschema(appl: SubschemaArgs, valid: Name): SchemaCxt {\n    const subschema = getSubschema(this.it, appl)\n    extendSubschemaData(subschema, this.it, appl)\n    extendSubschemaMode(subschema, appl)\n    const nextContext = {...this.it, ...subschema, items: undefined, props: undefined}\n    subschemaCode(nextContext, valid)\n    return nextContext\n  }\n\n  mergeEvaluated(schemaCxt: SchemaCxt, toName?: typeof Name): void {\n    const {it, gen} = this\n    if (!it.opts.unevaluated) return\n    if (it.props !== true && schemaCxt.props !== undefined) {\n      it.props = mergeEvaluated.props(gen, schemaCxt.props, it.props, toName)\n    }\n    if (it.items !== true && schemaCxt.items !== undefined) {\n      it.items = mergeEvaluated.items(gen, schemaCxt.items, it.items, toName)\n    }\n  }\n\n  mergeValidEvaluated(schemaCxt: SchemaCxt, valid: Name): boolean | void {\n    const {it, gen} = this\n    if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {\n      gen.if(valid, () => this.mergeEvaluated(schemaCxt, Name))\n      return true\n    }\n  }\n}\n\nfunction keywordCode(\n  it: SchemaObjCxt,\n  keyword: string,\n  def: AddedKeywordDefinition,\n  ruleType?: JSONType\n): void {\n  const cxt = new KeywordCxt(it, def, keyword)\n  if (\"code\" in def) {\n    def.code(cxt, ruleType)\n  } else if (cxt.$data && def.validate) {\n    funcKeywordCode(cxt, def)\n  } else if (\"macro\" in def) {\n    macroKeywordCode(cxt, def)\n  } else if (def.compile || def.validate) {\n    funcKeywordCode(cxt, def)\n  }\n}\n\nconst JSON_POINTER = /^\\/(?:[^~]|~0|~1)*$/\nconst RELATIVE_JSON_POINTER = /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/\nexport function getData(\n  $data: string,\n  {dataLevel, dataNames, dataPathArr}: SchemaCxt\n): Code | number {\n  let jsonPointer\n  let data: Code\n  if ($data === \"\") return N.rootData\n  if ($data[0] === \"/\") {\n    if (!JSON_POINTER.test($data)) throw new Error(`Invalid JSON-pointer: ${$data}`)\n    jsonPointer = $data\n    data = N.rootData\n  } else {\n    const matches = RELATIVE_JSON_POINTER.exec($data)\n    if (!matches) throw new Error(`Invalid JSON-pointer: ${$data}`)\n    const up: number = +matches[1]\n    jsonPointer = matches[2]\n    if (jsonPointer === \"#\") {\n      if (up >= dataLevel) throw new Error(errorMsg(\"property/index\", up))\n      return dataPathArr[dataLevel - up]\n    }\n    if (up > dataLevel) throw new Error(errorMsg(\"data\", up))\n    data = dataNames[dataLevel - up]\n    if (!jsonPointer) return data\n  }\n\n  let expr = data\n  const segments = jsonPointer.split(\"/\")\n  for (const segment of segments) {\n    if (segment) {\n      data = _`${data}${getProperty(unescapeJsonPointer(segment))}`\n      expr = _`${expr} && ${data}`\n    }\n  }\n  return expr\n\n  function errorMsg(pointerType: string, up: number): string {\n    return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`\n  }\n}\n","// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport abstract class _CodeOrName {\n  abstract readonly str: string\n  abstract readonly names: UsedNames\n  abstract toString(): string\n  abstract emptyStr(): boolean\n}\n\nexport const IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i\n\nexport class Name extends _CodeOrName {\n  readonly str: string\n  constructor(s: string) {\n    super()\n    if (!IDENTIFIER.test(s)) throw new Error(\"CodeGen: name must be a valid identifier\")\n    this.str = s\n  }\n\n  toString(): string {\n    return this.str\n  }\n\n  emptyStr(): boolean {\n    return false\n  }\n\n  get names(): UsedNames {\n    return {[this.str]: 1}\n  }\n}\n\nexport class _Code extends _CodeOrName {\n  readonly _items: readonly CodeItem[]\n  private _str?: string\n  private _names?: UsedNames\n\n  constructor(code: string | readonly CodeItem[]) {\n    super()\n    this._items = typeof code === \"string\" ? [code] : code\n  }\n\n  toString(): string {\n    return this.str\n  }\n\n  emptyStr(): boolean {\n    if (this._items.length > 1) return false\n    const item = this._items[0]\n    return item === \"\" || item === '\"\"'\n  }\n\n  get str(): string {\n    return (this._str ??= this._items.reduce((s: string, c: CodeItem) => `${s}${c}`, \"\"))\n  }\n\n  get names(): UsedNames {\n    return (this._names ??= this._items.reduce((names: UsedNames, c) => {\n      if (c instanceof Name) names[c.str] = (names[c.str] || 0) + 1\n      return names\n    }, {}))\n  }\n}\n\nexport type CodeItem = Name | string | number | boolean | null\n\nexport type UsedNames = Record<string, number | undefined>\n\nexport type Code = _Code | Name\n\nexport type SafeExpr = Code | number | boolean | null\n\nexport const nil = new _Code(\"\")\n\ntype CodeArg = SafeExpr | string | undefined\n\nexport function _(strs: TemplateStringsArray, ...args: CodeArg[]): _Code {\n  const code: CodeItem[] = [strs[0]]\n  let i = 0\n  while (i < args.length) {\n    addCodeArg(code, args[i])\n    code.push(strs[++i])\n  }\n  return new _Code(code)\n}\n\nconst plus = new _Code(\"+\")\n\nexport function str(strs: TemplateStringsArray, ...args: (CodeArg | string[])[]): _Code {\n  const expr: CodeItem[] = [safeStringify(strs[0])]\n  let i = 0\n  while (i < args.length) {\n    expr.push(plus)\n    addCodeArg(expr, args[i])\n    expr.push(plus, safeStringify(strs[++i]))\n  }\n  optimize(expr)\n  return new _Code(expr)\n}\n\nexport function addCodeArg(code: CodeItem[], arg: CodeArg | string[]): void {\n  if (arg instanceof _Code) code.push(...arg._items)\n  else if (arg instanceof Name) code.push(arg)\n  else code.push(interpolate(arg))\n}\n\nfunction optimize(expr: CodeItem[]): void {\n  let i = 1\n  while (i < expr.length - 1) {\n    if (expr[i] === plus) {\n      const res = mergeExprItems(expr[i - 1], expr[i + 1])\n      if (res !== undefined) {\n        expr.splice(i - 1, 3, res)\n        continue\n      }\n      expr[i++] = \"+\"\n    }\n    i++\n  }\n}\n\nfunction mergeExprItems(a: CodeItem, b: CodeItem): CodeItem | undefined {\n  if (b === '\"\"') return a\n  if (a === '\"\"') return b\n  if (typeof a == \"string\") {\n    if (b instanceof Name || a[a.length - 1] !== '\"') return\n    if (typeof b != \"string\") return `${a.slice(0, -1)}${b}\"`\n    if (b[0] === '\"') return a.slice(0, -1) + b.slice(1)\n    return\n  }\n  if (typeof b == \"string\" && b[0] === '\"' && !(a instanceof Name)) return `\"${a}${b.slice(1)}`\n  return\n}\n\nexport function strConcat(c1: Code, c2: Code): Code {\n  return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`\n}\n\n// TODO do not allow arrays here\nfunction interpolate(x?: string | string[] | number | boolean | null): SafeExpr | string {\n  return typeof x == \"number\" || typeof x == \"boolean\" || x === null\n    ? x\n    : safeStringify(Array.isArray(x) ? x.join(\",\") : x)\n}\n\nexport function stringify(x: unknown): Code {\n  return new _Code(safeStringify(x))\n}\n\nexport function safeStringify(x: unknown): string {\n  return JSON.stringify(x)\n    .replace(/\\u2028/g, \"\\\\u2028\")\n    .replace(/\\u2029/g, \"\\\\u2029\")\n}\n\nexport function getProperty(key: Code | string | number): Code {\n  return typeof key == \"string\" && IDENTIFIER.test(key) ? new _Code(`.${key}`) : _`[${key}]`\n}\n\n//Does best effort to format the name properly\nexport function getEsmExportName(key: Code | string | number): Code {\n  if (typeof key == \"string\" && IDENTIFIER.test(key)) {\n    return new _Code(`${key}`)\n  }\n  throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`)\n}\n\nexport function regexpCode(rx: RegExp): Code {\n  return new _Code(rx.toString())\n}\n","import type {Vocabulary} from \"../types\"\n\nexport const metadataVocabulary: Vocabulary = [\n  \"title\",\n  \"description\",\n  \"default\",\n  \"deprecated\",\n  \"readOnly\",\n  \"writeOnly\",\n  \"examples\",\n]\n\nexport const contentVocabulary: Vocabulary = [\n  \"contentMediaType\",\n  \"contentEncoding\",\n  \"contentSchema\",\n]\n","import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, or, Name, Code} from \"../../compile/codegen\"\nimport {useFunc} from \"../../compile/util\"\nimport equal from \"../../runtime/equal\"\n\nexport type EnumError = ErrorObject<\"enum\", {allowedValues: any[]}, any[] | {$data: string}>\n\nconst error: KeywordErrorDefinition = {\n  message: \"must be equal to one of the allowed values\",\n  params: ({schemaCode}) => _`{allowedValues: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"enum\",\n  schemaType: \"array\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, $data, schema, schemaCode, it} = cxt\n    if (!$data && schema.length === 0) throw new Error(\"enum must have non-empty array\")\n    const useLoop = schema.length >= it.opts.loopEnum\n    let eql: Name | undefined\n    const getEql = (): Name => (eql ??= useFunc(gen, equal))\n\n    let valid: Code\n    if (useLoop || $data) {\n      valid = gen.let(\"valid\")\n      cxt.block$data(valid, loopEnum)\n    } else {\n      /* istanbul ignore if */\n      if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\")\n      const vSchema = gen.const(\"vSchema\", schemaCode)\n      valid = or(...schema.map((_x: unknown, i: number) => equalCode(vSchema, i)))\n    }\n    cxt.pass(valid)\n\n    function loopEnum(): void {\n      gen.assign(valid, false)\n      gen.forOf(\"v\", schemaCode as Code, (v) =>\n        gen.if(_`${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break())\n      )\n    }\n\n    function equalCode(vSchema: Name, i: number): Code {\n      const sch = schema[i]\n      return typeof sch === \"object\" && sch !== null\n        ? _`${getEql()}(${data}, ${vSchema}[${i}])`\n        : _`${data} === ${sch}`\n    }\n  },\n}\n\nexport default def\n","import type {\n  KeywordErrorDefinition,\n  KeywordErrorCxt,\n  ErrorObject,\n  AnySchemaObject,\n} from \"../../types\"\nimport type {SchemaObjCxt} from \"..\"\nimport {isJSONType, JSONType} from \"../rules\"\nimport {schemaHasRulesForType} from \"./applicability\"\nimport {reportError} from \"../errors\"\nimport {_, nil, and, not, operators, Code, Name} from \"../codegen\"\nimport {toHash, schemaRefOrVal} from \"../util\"\n\nexport enum DataType {\n  Correct,\n  Wrong,\n}\n\nexport function getSchemaTypes(schema: AnySchemaObject): JSONType[] {\n  const types = getJSONTypes(schema.type)\n  const hasNull = types.includes(\"null\")\n  if (hasNull) {\n    if (schema.nullable === false) throw new Error(\"type: null contradicts nullable: false\")\n  } else {\n    if (!types.length && schema.nullable !== undefined) {\n      throw new Error('\"nullable\" cannot be used without \"type\"')\n    }\n    if (schema.nullable === true) types.push(\"null\")\n  }\n  return types\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport function getJSONTypes(ts: unknown | unknown[]): JSONType[] {\n  const types: unknown[] = Array.isArray(ts) ? ts : ts ? [ts] : []\n  if (types.every(isJSONType)) return types\n  throw new Error(\"type must be JSONType or JSONType[]: \" + types.join(\",\"))\n}\n\nexport function coerceAndCheckDataType(it: SchemaObjCxt, types: JSONType[]): boolean {\n  const {gen, data, opts} = it\n  const coerceTo = coerceToTypes(types, opts.coerceTypes)\n  const checkTypes =\n    types.length > 0 &&\n    !(coerceTo.length === 0 && types.length === 1 && schemaHasRulesForType(it, types[0]))\n  if (checkTypes) {\n    const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong)\n    gen.if(wrongType, () => {\n      if (coerceTo.length) coerceData(it, types, coerceTo)\n      else reportTypeError(it)\n    })\n  }\n  return checkTypes\n}\n\nconst COERCIBLE: Set<JSONType> = new Set([\"string\", \"number\", \"integer\", \"boolean\", \"null\"])\nfunction coerceToTypes(types: JSONType[], coerceTypes?: boolean | \"array\"): JSONType[] {\n  return coerceTypes\n    ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === \"array\" && t === \"array\"))\n    : []\n}\n\nfunction coerceData(it: SchemaObjCxt, types: JSONType[], coerceTo: JSONType[]): void {\n  const {gen, data, opts} = it\n  const dataType = gen.let(\"dataType\", _`typeof ${data}`)\n  const coerced = gen.let(\"coerced\", _`undefined`)\n  if (opts.coerceTypes === \"array\") {\n    gen.if(_`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () =>\n      gen\n        .assign(data, _`${data}[0]`)\n        .assign(dataType, _`typeof ${data}`)\n        .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data))\n    )\n  }\n  gen.if(_`${coerced} !== undefined`)\n  for (const t of coerceTo) {\n    if (COERCIBLE.has(t) || (t === \"array\" && opts.coerceTypes === \"array\")) {\n      coerceSpecificType(t)\n    }\n  }\n  gen.else()\n  reportTypeError(it)\n  gen.endIf()\n\n  gen.if(_`${coerced} !== undefined`, () => {\n    gen.assign(data, coerced)\n    assignParentData(it, coerced)\n  })\n\n  function coerceSpecificType(t: string): void {\n    switch (t) {\n      case \"string\":\n        gen\n          .elseIf(_`${dataType} == \"number\" || ${dataType} == \"boolean\"`)\n          .assign(coerced, _`\"\" + ${data}`)\n          .elseIf(_`${data} === null`)\n          .assign(coerced, _`\"\"`)\n        return\n      case \"number\":\n        gen\n          .elseIf(\n            _`${dataType} == \"boolean\" || ${data} === null\n              || (${dataType} == \"string\" && ${data} && ${data} == +${data})`\n          )\n          .assign(coerced, _`+${data}`)\n        return\n      case \"integer\":\n        gen\n          .elseIf(\n            _`${dataType} === \"boolean\" || ${data} === null\n              || (${dataType} === \"string\" && ${data} && ${data} == +${data} && !(${data} % 1))`\n          )\n          .assign(coerced, _`+${data}`)\n        return\n      case \"boolean\":\n        gen\n          .elseIf(_`${data} === \"false\" || ${data} === 0 || ${data} === null`)\n          .assign(coerced, false)\n          .elseIf(_`${data} === \"true\" || ${data} === 1`)\n          .assign(coerced, true)\n        return\n      case \"null\":\n        gen.elseIf(_`${data} === \"\" || ${data} === 0 || ${data} === false`)\n        gen.assign(coerced, null)\n        return\n\n      case \"array\":\n        gen\n          .elseIf(\n            _`${dataType} === \"string\" || ${dataType} === \"number\"\n              || ${dataType} === \"boolean\" || ${data} === null`\n          )\n          .assign(coerced, _`[${data}]`)\n    }\n  }\n}\n\nfunction assignParentData({gen, parentData, parentDataProperty}: SchemaObjCxt, expr: Name): void {\n  // TODO use gen.property\n  gen.if(_`${parentData} !== undefined`, () =>\n    gen.assign(_`${parentData}[${parentDataProperty}]`, expr)\n  )\n}\n\nexport function checkDataType(\n  dataType: JSONType,\n  data: Name,\n  strictNums?: boolean | \"log\",\n  correct = DataType.Correct\n): Code {\n  const EQ = correct === DataType.Correct ? operators.EQ : operators.NEQ\n  let cond: Code\n  switch (dataType) {\n    case \"null\":\n      return _`${data} ${EQ} null`\n    case \"array\":\n      cond = _`Array.isArray(${data})`\n      break\n    case \"object\":\n      cond = _`${data} && typeof ${data} == \"object\" && !Array.isArray(${data})`\n      break\n    case \"integer\":\n      cond = numCond(_`!(${data} % 1) && !isNaN(${data})`)\n      break\n    case \"number\":\n      cond = numCond()\n      break\n    default:\n      return _`typeof ${data} ${EQ} ${dataType}`\n  }\n  return correct === DataType.Correct ? cond : not(cond)\n\n  function numCond(_cond: Code = nil): Code {\n    return and(_`typeof ${data} == \"number\"`, _cond, strictNums ? _`isFinite(${data})` : nil)\n  }\n}\n\nexport function checkDataTypes(\n  dataTypes: JSONType[],\n  data: Name,\n  strictNums?: boolean | \"log\",\n  correct?: DataType\n): Code {\n  if (dataTypes.length === 1) {\n    return checkDataType(dataTypes[0], data, strictNums, correct)\n  }\n  let cond: Code\n  const types = toHash(dataTypes)\n  if (types.array && types.object) {\n    const notObj = _`typeof ${data} != \"object\"`\n    cond = types.null ? notObj : _`!${data} || ${notObj}`\n    delete types.null\n    delete types.array\n    delete types.object\n  } else {\n    cond = nil\n  }\n  if (types.number) delete types.integer\n  for (const t in types) cond = and(cond, checkDataType(t as JSONType, data, strictNums, correct))\n  return cond\n}\n\nexport type TypeError = ErrorObject<\"type\", {type: string}>\n\nconst typeError: KeywordErrorDefinition = {\n  message: ({schema}) => `must be ${schema}`,\n  params: ({schema, schemaValue}) =>\n    typeof schema == \"string\" ? _`{type: ${schema}}` : _`{type: ${schemaValue}}`,\n}\n\nexport function reportTypeError(it: SchemaObjCxt): void {\n  const cxt = getTypeErrorContext(it)\n  reportError(cxt, typeError)\n}\n\nfunction getTypeErrorContext(it: SchemaObjCxt): KeywordErrorCxt {\n  const {gen, data, schema} = it\n  const schemaCode = schemaRefOrVal(it, schema, \"type\")\n  return {\n    gen,\n    keyword: \"type\",\n    data,\n    schema: schema.type,\n    schemaCode,\n    schemaValue: schemaCode,\n    parentSchema: schema,\n    params: {},\n    it,\n  }\n}\n","import type {CodeKeywordDefinition} from \"../../types\"\nimport {validateTuple} from \"./items\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"prefixItems\",\n  type: \"array\",\n  schemaType: [\"array\"],\n  before: \"uniqueItems\",\n  code: (cxt) => validateTuple(cxt, \"items\"),\n}\n\nexport default def\n","import type {CodeKeywordDefinition} from \"../../types\"\nimport {KeywordCxt} from \"../../compile/validate\"\nimport {propertyInData, allSchemaProperties} from \"../code\"\nimport {alwaysValidSchema, toHash, mergeEvaluated} from \"../../compile/util\"\nimport apDef from \"./additionalProperties\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"properties\",\n  type: \"object\",\n  schemaType: \"object\",\n  code(cxt: KeywordCxt) {\n    const {gen, schema, parentSchema, data, it} = cxt\n    if (it.opts.removeAdditional === \"all\" && parentSchema.additionalProperties === undefined) {\n      apDef.code(new KeywordCxt(it, apDef, \"additionalProperties\"))\n    }\n    const allProps = allSchemaProperties(schema)\n    for (const prop of allProps) {\n      it.definedProperties.add(prop)\n    }\n    if (it.opts.unevaluated && allProps.length && it.props !== true) {\n      it.props = mergeEvaluated.props(gen, toHash(allProps), it.props)\n    }\n    const properties = allProps.filter((p) => !alwaysValidSchema(it, schema[p]))\n    if (properties.length === 0) return\n    const valid = gen.name(\"valid\")\n\n    for (const prop of properties) {\n      if (hasDefault(prop)) {\n        applyPropertySchema(prop)\n      } else {\n        gen.if(propertyInData(gen, data, prop, it.opts.ownProperties))\n        applyPropertySchema(prop)\n        if (!it.allErrors) gen.else().var(valid, true)\n        gen.endIf()\n      }\n      cxt.it.definedProperties.add(prop)\n      cxt.ok(valid)\n    }\n\n    function hasDefault(prop: string): boolean | undefined {\n      return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined\n    }\n\n    function applyPropertySchema(prop: string): void {\n      cxt.subschema(\n        {\n          keyword: \"properties\",\n          schemaProp: prop,\n          dataProp: prop,\n        },\n        valid\n      )\n    }\n  },\n}\n\nexport default def\n","import * as uri from \"fast-uri\"\n\ntype URI = typeof uri & {code: string}\n;(uri as URI).code = 'require(\"ajv/dist/runtime/uri\").default'\n\nexport default uri as URI\n","import type {AnySchemaObject} from \"./types\"\nimport AjvCore from \"./core\"\nimport draft7Vocabularies from \"./vocabularies/draft7\"\nimport discriminator from \"./vocabularies/discriminator\"\nimport * as draft7MetaSchema from \"./refs/json-schema-draft-07.json\"\n\nconst META_SUPPORT_DATA = [\"/properties\"]\n\nconst META_SCHEMA_ID = \"http://json-schema.org/draft-07/schema\"\n\nexport class Ajv extends AjvCore {\n  _addVocabularies(): void {\n    super._addVocabularies()\n    draft7Vocabularies.forEach((v) => this.addVocabulary(v))\n    if (this.opts.discriminator) this.addKeyword(discriminator)\n  }\n\n  _addDefaultMetaSchema(): void {\n    super._addDefaultMetaSchema()\n    if (!this.opts.meta) return\n    const metaSchema = this.opts.$data\n      ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)\n      : draft7MetaSchema\n    this.addMetaSchema(metaSchema, META_SCHEMA_ID, false)\n    this.refs[\"http://json-schema.org/schema\"] = META_SCHEMA_ID\n  }\n\n  defaultMeta(): string | AnySchemaObject | undefined {\n    return (this.opts.defaultMeta =\n      super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined))\n  }\n}\n\nmodule.exports = exports = Ajv\nmodule.exports.Ajv = Ajv\nObject.defineProperty(exports, \"__esModule\", {value: true})\n\nexport default Ajv\n\nexport {\n  Format,\n  FormatDefinition,\n  AsyncFormatDefinition,\n  KeywordDefinition,\n  KeywordErrorDefinition,\n  CodeKeywordDefinition,\n  MacroKeywordDefinition,\n  FuncKeywordDefinition,\n  Vocabulary,\n  Schema,\n  SchemaObject,\n  AnySchemaObject,\n  AsyncSchema,\n  AnySchema,\n  ValidateFunction,\n  AsyncValidateFunction,\n  SchemaValidateFunction,\n  ErrorObject,\n  ErrorNoParams,\n} from \"./types\"\n\nexport {Plugin, Options, CodeOptions, InstanceOptions, Logger, ErrorsTextOptions} from \"./core\"\nexport {SchemaCxt, SchemaObjCxt} from \"./compile\"\nexport {KeywordCxt} from \"./compile/validate\"\nexport {DefinedError} from \"./vocabularies/errors\"\nexport {JSONType} from \"./compile/rules\"\nexport {JSONSchemaType} from \"./types/json-schema\"\nexport {_, str, stringify, nil, Name, Code, CodeGen, CodeGenOptions} from \"./compile/codegen\"\nexport {default as ValidationError} from \"./runtime/validation_error\"\nexport {default as MissingRefError} from \"./compile/ref_error\"\n","'use strict';\n\nvar traverse = module.exports = function (schema, opts, cb) {\n  // Legacy support for v0.3.1 and earlier.\n  if (typeof opts == 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  cb = opts.cb || cb;\n  var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};\n  var post = cb.post || function() {};\n\n  _traverse(opts, pre, post, schema, '', schema);\n};\n\n\ntraverse.keywords = {\n  additionalItems: true,\n  items: true,\n  contains: true,\n  additionalProperties: true,\n  propertyNames: true,\n  not: true,\n  if: true,\n  then: true,\n  else: true\n};\n\ntraverse.arrayKeywords = {\n  items: true,\n  allOf: true,\n  anyOf: true,\n  oneOf: true\n};\n\ntraverse.propsKeywords = {\n  $defs: true,\n  definitions: true,\n  properties: true,\n  patternProperties: true,\n  dependencies: true\n};\n\ntraverse.skipKeywords = {\n  default: true,\n  enum: true,\n  const: true,\n  required: true,\n  maximum: true,\n  minimum: true,\n  exclusiveMaximum: true,\n  exclusiveMinimum: true,\n  multipleOf: true,\n  maxLength: true,\n  minLength: true,\n  pattern: true,\n  format: true,\n  maxItems: true,\n  minItems: true,\n  uniqueItems: true,\n  maxProperties: true,\n  minProperties: true\n};\n\n\nfunction _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {\n    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n    for (var key in schema) {\n      var sch = schema[key];\n      if (Array.isArray(sch)) {\n        if (key in traverse.arrayKeywords) {\n          for (var i=0; i<sch.length; i++)\n            _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);\n        }\n      } else if (key in traverse.propsKeywords) {\n        if (sch && typeof sch == 'object') {\n          for (var prop in sch)\n            _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);\n        }\n      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {\n        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);\n      }\n    }\n    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n  }\n}\n\n\nfunction escapeJsonPtr(str) {\n  return str.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\n","import type {\n  CodeKeywordDefinition,\n  AddedKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport {allSchemaProperties, usePattern, isOwnProperty} from \"../code\"\nimport {_, nil, or, not, Code, Name} from \"../../compile/codegen\"\nimport N from \"../../compile/names\"\nimport type {SubschemaArgs} from \"../../compile/validate/subschema\"\nimport {alwaysValidSchema, schemaRefOrVal, Type} from \"../../compile/util\"\n\nexport type AdditionalPropertiesError = ErrorObject<\n  \"additionalProperties\",\n  {additionalProperty: string},\n  AnySchema\n>\n\nconst error: KeywordErrorDefinition = {\n  message: \"must NOT have additional properties\",\n  params: ({params}) => _`{additionalProperty: ${params.additionalProperty}}`,\n}\n\nconst def: CodeKeywordDefinition & AddedKeywordDefinition = {\n  keyword: \"additionalProperties\",\n  type: [\"object\"],\n  schemaType: [\"boolean\", \"object\"],\n  allowUndefined: true,\n  trackErrors: true,\n  error,\n  code(cxt) {\n    const {gen, schema, parentSchema, data, errsCount, it} = cxt\n    /* istanbul ignore if */\n    if (!errsCount) throw new Error(\"ajv implementation error\")\n    const {allErrors, opts} = it\n    it.props = true\n    if (opts.removeAdditional !== \"all\" && alwaysValidSchema(it, schema)) return\n    const props = allSchemaProperties(parentSchema.properties)\n    const patProps = allSchemaProperties(parentSchema.patternProperties)\n    checkAdditionalProperties()\n    cxt.ok(_`${errsCount} === ${N.errors}`)\n\n    function checkAdditionalProperties(): void {\n      gen.forIn(\"key\", data, (key: Name) => {\n        if (!props.length && !patProps.length) additionalPropertyCode(key)\n        else gen.if(isAdditional(key), () => additionalPropertyCode(key))\n      })\n    }\n\n    function isAdditional(key: Name): Code {\n      let definedProp: Code\n      if (props.length > 8) {\n        // TODO maybe an option instead of hard-coded 8?\n        const propsSchema = schemaRefOrVal(it, parentSchema.properties, \"properties\")\n        definedProp = isOwnProperty(gen, propsSchema as Code, key)\n      } else if (props.length) {\n        definedProp = or(...props.map((p) => _`${key} === ${p}`))\n      } else {\n        definedProp = nil\n      }\n      if (patProps.length) {\n        definedProp = or(definedProp, ...patProps.map((p) => _`${usePattern(cxt, p)}.test(${key})`))\n      }\n      return not(definedProp)\n    }\n\n    function deleteAdditional(key: Name): void {\n      gen.code(_`delete ${data}[${key}]`)\n    }\n\n    function additionalPropertyCode(key: Name): void {\n      if (opts.removeAdditional === \"all\" || (opts.removeAdditional && schema === false)) {\n        deleteAdditional(key)\n        return\n      }\n\n      if (schema === false) {\n        cxt.setParams({additionalProperty: key})\n        cxt.error()\n        if (!allErrors) gen.break()\n        return\n      }\n\n      if (typeof schema == \"object\" && !alwaysValidSchema(it, schema)) {\n        const valid = gen.name(\"valid\")\n        if (opts.removeAdditional === \"failing\") {\n          applyAdditionalSchema(key, valid, false)\n          gen.if(not(valid), () => {\n            cxt.reset()\n            deleteAdditional(key)\n          })\n        } else {\n          applyAdditionalSchema(key, valid)\n          if (!allErrors) gen.if(not(valid), () => gen.break())\n        }\n      }\n    }\n\n    function applyAdditionalSchema(key: Name, valid: Name, errors?: false): void {\n      const subschema: SubschemaArgs = {\n        keyword: \"additionalProperties\",\n        dataProp: key,\n        dataPropType: Type.Str,\n      }\n      if (errors === false) {\n        Object.assign(subschema, {\n          compositeRule: true,\n          createErrors: false,\n          allErrors: false,\n        })\n      }\n      cxt.subschema(subschema, valid)\n    }\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {checkStrictMode} from \"../../compile/util\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: [\"then\", \"else\"],\n  schemaType: [\"object\", \"boolean\"],\n  code({keyword, parentSchema, it}: KeywordCxt) {\n    if (parentSchema.if === undefined) checkStrictMode(it, `\"${keyword}\" without \"if\" is ignored`)\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition, ErrorNoParams, AnySchema} from \"../../types\"\nimport {validateUnion} from \"../code\"\n\nexport type AnyOfError = ErrorNoParams<\"anyOf\", AnySchema[]>\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"anyOf\",\n  schemaType: \"array\",\n  trackErrors: true,\n  code: validateUnion,\n  error: {message: \"must match a schema in anyOf\"},\n}\n\nexport default def\n","'use strict'\n\nconst { normalizeIPv6, normalizeIPv4, removeDotSegments, recomposeAuthority, normalizeComponentEncoding } = require('./lib/utils')\nconst SCHEMES = require('./lib/schemes')\n\nfunction normalize (uri, options) {\n  if (typeof uri === 'string') {\n    uri = serialize(parse(uri, options), options)\n  } else if (typeof uri === 'object') {\n    uri = parse(serialize(uri, options), options)\n  }\n  return uri\n}\n\nfunction resolve (baseURI, relativeURI, options) {\n  const schemelessOptions = Object.assign({ scheme: 'null' }, options)\n  const resolved = resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true)\n  return serialize(resolved, { ...schemelessOptions, skipEscape: true })\n}\n\nfunction resolveComponents (base, relative, options, skipNormalization) {\n  const target = {}\n  if (!skipNormalization) {\n    base = parse(serialize(base, options), options) // normalize base components\n    relative = parse(serialize(relative, options), options) // normalize relative components\n  }\n  options = options || {}\n\n  if (!options.tolerant && relative.scheme) {\n    target.scheme = relative.scheme\n    // target.authority = relative.authority;\n    target.userinfo = relative.userinfo\n    target.host = relative.host\n    target.port = relative.port\n    target.path = removeDotSegments(relative.path || '')\n    target.query = relative.query\n  } else {\n    if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n      // target.authority = relative.authority;\n      target.userinfo = relative.userinfo\n      target.host = relative.host\n      target.port = relative.port\n      target.path = removeDotSegments(relative.path || '')\n      target.query = relative.query\n    } else {\n      if (!relative.path) {\n        target.path = base.path\n        if (relative.query !== undefined) {\n          target.query = relative.query\n        } else {\n          target.query = base.query\n        }\n      } else {\n        if (relative.path.charAt(0) === '/') {\n          target.path = removeDotSegments(relative.path)\n        } else {\n          if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n            target.path = '/' + relative.path\n          } else if (!base.path) {\n            target.path = relative.path\n          } else {\n            target.path = base.path.slice(0, base.path.lastIndexOf('/') + 1) + relative.path\n          }\n          target.path = removeDotSegments(target.path)\n        }\n        target.query = relative.query\n      }\n      // target.authority = base.authority;\n      target.userinfo = base.userinfo\n      target.host = base.host\n      target.port = base.port\n    }\n    target.scheme = base.scheme\n  }\n\n  target.fragment = relative.fragment\n\n  return target\n}\n\nfunction equal (uriA, uriB, options) {\n  if (typeof uriA === 'string') {\n    uriA = unescape(uriA)\n    uriA = serialize(normalizeComponentEncoding(parse(uriA, options), true), { ...options, skipEscape: true })\n  } else if (typeof uriA === 'object') {\n    uriA = serialize(normalizeComponentEncoding(uriA, true), { ...options, skipEscape: true })\n  }\n\n  if (typeof uriB === 'string') {\n    uriB = unescape(uriB)\n    uriB = serialize(normalizeComponentEncoding(parse(uriB, options), true), { ...options, skipEscape: true })\n  } else if (typeof uriB === 'object') {\n    uriB = serialize(normalizeComponentEncoding(uriB, true), { ...options, skipEscape: true })\n  }\n\n  return uriA.toLowerCase() === uriB.toLowerCase()\n}\n\nfunction serialize (cmpts, opts) {\n  const components = {\n    host: cmpts.host,\n    scheme: cmpts.scheme,\n    userinfo: cmpts.userinfo,\n    port: cmpts.port,\n    path: cmpts.path,\n    query: cmpts.query,\n    nid: cmpts.nid,\n    nss: cmpts.nss,\n    uuid: cmpts.uuid,\n    fragment: cmpts.fragment,\n    reference: cmpts.reference,\n    resourceName: cmpts.resourceName,\n    secure: cmpts.secure,\n    error: ''\n  }\n  const options = Object.assign({}, opts)\n  const uriTokens = []\n\n  // find scheme handler\n  const schemeHandler = SCHEMES[(options.scheme || components.scheme || '').toLowerCase()]\n\n  // perform scheme specific serialization\n  if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options)\n\n  if (components.path !== undefined) {\n    if (!options.skipEscape) {\n      components.path = escape(components.path)\n\n      if (components.scheme !== undefined) {\n        components.path = components.path.split('%3A').join(':')\n      }\n    } else {\n      components.path = unescape(components.path)\n    }\n  }\n\n  if (options.reference !== 'suffix' && components.scheme) {\n    uriTokens.push(components.scheme, ':')\n  }\n\n  const authority = recomposeAuthority(components)\n  if (authority !== undefined) {\n    if (options.reference !== 'suffix') {\n      uriTokens.push('//')\n    }\n\n    uriTokens.push(authority)\n\n    if (components.path && components.path.charAt(0) !== '/') {\n      uriTokens.push('/')\n    }\n  }\n  if (components.path !== undefined) {\n    let s = components.path\n\n    if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n      s = removeDotSegments(s)\n    }\n\n    if (authority === undefined) {\n      s = s.replace(/^\\/\\//u, '/%2F') // don't allow the path to start with \"//\"\n    }\n\n    uriTokens.push(s)\n  }\n\n  if (components.query !== undefined) {\n    uriTokens.push('?', components.query)\n  }\n\n  if (components.fragment !== undefined) {\n    uriTokens.push('#', components.fragment)\n  }\n  return uriTokens.join('')\n}\n\nconst hexLookUp = Array.from({ length: 127 }, (_v, k) => /[^!\"$&'()*+,\\-.;=_`a-z{}~]/u.test(String.fromCharCode(k)))\n\nfunction nonSimpleDomain (value) {\n  let code = 0\n  for (let i = 0, len = value.length; i < len; ++i) {\n    code = value.charCodeAt(i)\n    if (code > 126 || hexLookUp[code]) {\n      return true\n    }\n  }\n  return false\n}\n\nconst URI_PARSE = /^(?:([^#/:?]+):)?(?:\\/\\/((?:([^#/?@]*)@)?(\\[[^#/?\\]]+\\]|[^#/:?]*)(?::(\\d*))?))?([^#?]*)(?:\\?([^#]*))?(?:#((?:.|[\\n\\r])*))?/u\n\nfunction parse (uri, opts) {\n  const options = Object.assign({}, opts)\n  const parsed = {\n    scheme: undefined,\n    userinfo: undefined,\n    host: '',\n    port: undefined,\n    path: '',\n    query: undefined,\n    fragment: undefined\n  }\n  const gotEncoding = uri.indexOf('%') !== -1\n  let isIP = false\n  if (options.reference === 'suffix') uri = (options.scheme ? options.scheme + ':' : '') + '//' + uri\n\n  const matches = uri.match(URI_PARSE)\n\n  if (matches) {\n    // store each component\n    parsed.scheme = matches[1]\n    parsed.userinfo = matches[3]\n    parsed.host = matches[4]\n    parsed.port = parseInt(matches[5], 10)\n    parsed.path = matches[6] || ''\n    parsed.query = matches[7]\n    parsed.fragment = matches[8]\n\n    // fix port number\n    if (isNaN(parsed.port)) {\n      parsed.port = matches[5]\n    }\n    if (parsed.host) {\n      const ipv4result = normalizeIPv4(parsed.host)\n      if (ipv4result.isIPV4 === false) {\n        const ipv6result = normalizeIPv6(ipv4result.host)\n        parsed.host = ipv6result.host.toLowerCase()\n        isIP = ipv6result.isIPV6\n      } else {\n        parsed.host = ipv4result.host\n        isIP = true\n      }\n    }\n    if (parsed.scheme === undefined && parsed.userinfo === undefined && parsed.host === undefined && parsed.port === undefined && parsed.query === undefined && !parsed.path) {\n      parsed.reference = 'same-document'\n    } else if (parsed.scheme === undefined) {\n      parsed.reference = 'relative'\n    } else if (parsed.fragment === undefined) {\n      parsed.reference = 'absolute'\n    } else {\n      parsed.reference = 'uri'\n    }\n\n    // check for reference errors\n    if (options.reference && options.reference !== 'suffix' && options.reference !== parsed.reference) {\n      parsed.error = parsed.error || 'URI is not a ' + options.reference + ' reference.'\n    }\n\n    // find scheme handler\n    const schemeHandler = SCHEMES[(options.scheme || parsed.scheme || '').toLowerCase()]\n\n    // check if scheme can't handle IRIs\n    if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n      // if host component is a domain name\n      if (parsed.host && (options.domainHost || (schemeHandler && schemeHandler.domainHost)) && isIP === false && nonSimpleDomain(parsed.host)) {\n        // convert Unicode IDN -> ASCII IDN\n        try {\n          parsed.host = URL.domainToASCII(parsed.host.toLowerCase())\n        } catch (e) {\n          parsed.error = parsed.error || \"Host's domain name can not be converted to ASCII: \" + e\n        }\n      }\n      // convert IRI -> URI\n    }\n\n    if (!schemeHandler || (schemeHandler && !schemeHandler.skipNormalize)) {\n      if (gotEncoding && parsed.scheme !== undefined) {\n        parsed.scheme = unescape(parsed.scheme)\n      }\n      if (gotEncoding && parsed.host !== undefined) {\n        parsed.host = unescape(parsed.host)\n      }\n      if (parsed.path) {\n        parsed.path = escape(unescape(parsed.path))\n      }\n      if (parsed.fragment) {\n        parsed.fragment = encodeURI(decodeURIComponent(parsed.fragment))\n      }\n    }\n\n    // perform scheme specific parsing\n    if (schemeHandler && schemeHandler.parse) {\n      schemeHandler.parse(parsed, options)\n    }\n  } else {\n    parsed.error = parsed.error || 'URI can not be parsed.'\n  }\n  return parsed\n}\n\nconst fastUri = {\n  SCHEMES,\n  normalize,\n  resolve,\n  resolveComponents,\n  equal,\n  serialize,\n  parse\n}\n\nmodule.exports = fastUri\nmodule.exports.default = fastUri\nmodule.exports.fastUri = fastUri\n","import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {\n  checkReportMissingProp,\n  checkMissingProp,\n  reportMissingProp,\n  propertyInData,\n  noPropertyInData,\n} from \"../code\"\nimport {_, str, nil, not, Name, Code} from \"../../compile/codegen\"\nimport {checkStrictMode} from \"../../compile/util\"\n\nexport type RequiredError = ErrorObject<\n  \"required\",\n  {missingProperty: string},\n  string[] | {$data: string}\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {missingProperty}}) => str`must have required property '${missingProperty}'`,\n  params: ({params: {missingProperty}}) => _`{missingProperty: ${missingProperty}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"required\",\n  type: \"object\",\n  schemaType: \"array\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, schemaCode, data, $data, it} = cxt\n    const {opts} = it\n    if (!$data && schema.length === 0) return\n    const useLoop = schema.length >= opts.loopRequired\n    if (it.allErrors) allErrorsMode()\n    else exitOnErrorMode()\n\n    if (opts.strictRequired) {\n      const props = cxt.parentSchema.properties\n      const {definedProperties} = cxt.it\n      for (const requiredKey of schema) {\n        if (props?.[requiredKey] === undefined && !definedProperties.has(requiredKey)) {\n          const schemaPath = it.schemaEnv.baseId + it.errSchemaPath\n          const msg = `required property \"${requiredKey}\" is not defined at \"${schemaPath}\" (strictRequired)`\n          checkStrictMode(it, msg, it.opts.strictRequired)\n        }\n      }\n    }\n\n    function allErrorsMode(): void {\n      if (useLoop || $data) {\n        cxt.block$data(nil, loopAllRequired)\n      } else {\n        for (const prop of schema) {\n          checkReportMissingProp(cxt, prop)\n        }\n      }\n    }\n\n    function exitOnErrorMode(): void {\n      const missing = gen.let(\"missing\")\n      if (useLoop || $data) {\n        const valid = gen.let(\"valid\", true)\n        cxt.block$data(valid, () => loopUntilMissing(missing, valid))\n        cxt.ok(valid)\n      } else {\n        gen.if(checkMissingProp(cxt, schema, missing))\n        reportMissingProp(cxt, missing)\n        gen.else()\n      }\n    }\n\n    function loopAllRequired(): void {\n      gen.forOf(\"prop\", schemaCode as Code, (prop) => {\n        cxt.setParams({missingProperty: prop})\n        gen.if(noPropertyInData(gen, data, prop, opts.ownProperties), () => cxt.error())\n      })\n    }\n\n    function loopUntilMissing(missing: Name, valid: Name): void {\n      cxt.setParams({missingProperty: missing})\n      gen.forOf(\n        missing,\n        schemaCode as Code,\n        () => {\n          gen.assign(valid, propertyInData(gen, data, missing, opts.ownProperties))\n          gen.if(not(valid), () => {\n            cxt.error()\n            gen.break()\n          })\n        },\n        nil\n      )\n    }\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {allSchemaProperties, usePattern} from \"../code\"\nimport {_, not, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema, checkStrictMode} from \"../../compile/util\"\nimport {evaluatedPropsToName, Type} from \"../../compile/util\"\nimport {AnySchema} from \"../../types\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"patternProperties\",\n  type: \"object\",\n  schemaType: \"object\",\n  code(cxt: KeywordCxt) {\n    const {gen, schema, data, parentSchema, it} = cxt\n    const {opts} = it\n    const patterns = allSchemaProperties(schema)\n    const alwaysValidPatterns = patterns.filter((p) =>\n      alwaysValidSchema(it, schema[p] as AnySchema)\n    )\n\n    if (\n      patterns.length === 0 ||\n      (alwaysValidPatterns.length === patterns.length &&\n        (!it.opts.unevaluated || it.props === true))\n    ) {\n      return\n    }\n\n    const checkProperties =\n      opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties\n    const valid = gen.name(\"valid\")\n    if (it.props !== true && !(it.props instanceof Name)) {\n      it.props = evaluatedPropsToName(gen, it.props)\n    }\n    const {props} = it\n    validatePatternProperties()\n\n    function validatePatternProperties(): void {\n      for (const pat of patterns) {\n        if (checkProperties) checkMatchingProperties(pat)\n        if (it.allErrors) {\n          validateProperties(pat)\n        } else {\n          gen.var(valid, true) // TODO var\n          validateProperties(pat)\n          gen.if(valid)\n        }\n      }\n    }\n\n    function checkMatchingProperties(pat: string): void {\n      for (const prop in checkProperties) {\n        if (new RegExp(pat).test(prop)) {\n          checkStrictMode(\n            it,\n            `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`\n          )\n        }\n      }\n    }\n\n    function validateProperties(pat: string): void {\n      gen.forIn(\"key\", data, (key) => {\n        gen.if(_`${usePattern(cxt, pat)}.test(${key})`, () => {\n          const alwaysValid = alwaysValidPatterns.includes(pat)\n          if (!alwaysValid) {\n            cxt.subschema(\n              {\n                keyword: \"patternProperties\",\n                schemaProp: pat,\n                dataProp: key,\n                dataPropType: Type.Str,\n              },\n              valid\n            )\n          }\n\n          if (it.opts.unevaluated && props !== true) {\n            gen.assign(_`${props}[${key}]`, true)\n          } else if (!alwaysValid && !it.allErrors) {\n            // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)\n            // or if all properties were evaluated (props === true)\n            gen.if(not(valid), () => gen.break())\n          }\n        })\n      })\n    }\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition, AnySchema} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {alwaysValidSchema} from \"../../compile/util\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"allOf\",\n  schemaType: \"array\",\n  code(cxt: KeywordCxt) {\n    const {gen, schema, it} = cxt\n    /* istanbul ignore if */\n    if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\")\n    const valid = gen.name(\"valid\")\n    schema.forEach((sch: AnySchema, i: number) => {\n      if (alwaysValidSchema(it, sch)) return\n      const schCxt = cxt.subschema({keyword: \"allOf\", schemaProp: i}, valid)\n      cxt.ok(valid)\n      cxt.mergeEvaluated(schCxt)\n    })\n  },\n}\n\nexport default def\n","import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str} from \"../../compile/codegen\"\n\nexport type MultipleOfError = ErrorObject<\n  \"multipleOf\",\n  {multipleOf: number},\n  number | {$data: string}\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({schemaCode}) => str`must be multiple of ${schemaCode}`,\n  params: ({schemaCode}) => _`{multipleOf: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"multipleOf\",\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, schemaCode, it} = cxt\n    // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n    const prec = it.opts.multipleOfPrecision\n    const res = gen.let(\"res\")\n    const invalid = prec\n      ? _`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`\n      : _`${res} !== parseInt(${res})`\n    cxt.fail$data(_`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`)\n  },\n}\n\nexport default def\n","import type {AnySchema, EvaluatedProperties, EvaluatedItems} from \"../types\"\nimport type {SchemaCxt, SchemaObjCxt} from \".\"\nimport {_, getProperty, Code, Name, CodeGen} from \"./codegen\"\nimport {_Code} from \"./codegen/code\"\nimport type {Rule, ValidationRules} from \"./rules\"\n\n// TODO refactor to use Set\nexport function toHash<T extends string = string>(arr: T[]): {[K in T]?: true} {\n  const hash: {[K in T]?: true} = {}\n  for (const item of arr) hash[item] = true\n  return hash\n}\n\nexport function alwaysValidSchema(it: SchemaCxt, schema: AnySchema): boolean | void {\n  if (typeof schema == \"boolean\") return schema\n  if (Object.keys(schema).length === 0) return true\n  checkUnknownRules(it, schema)\n  return !schemaHasRules(schema, it.self.RULES.all)\n}\n\nexport function checkUnknownRules(it: SchemaCxt, schema: AnySchema = it.schema): void {\n  const {opts, self} = it\n  if (!opts.strictSchema) return\n  if (typeof schema === \"boolean\") return\n  const rules = self.RULES.keywords\n  for (const key in schema) {\n    if (!rules[key]) checkStrictMode(it, `unknown keyword: \"${key}\"`)\n  }\n}\n\nexport function schemaHasRules(\n  schema: AnySchema,\n  rules: {[Key in string]?: boolean | Rule}\n): boolean {\n  if (typeof schema == \"boolean\") return !schema\n  for (const key in schema) if (rules[key]) return true\n  return false\n}\n\nexport function schemaHasRulesButRef(schema: AnySchema, RULES: ValidationRules): boolean {\n  if (typeof schema == \"boolean\") return !schema\n  for (const key in schema) if (key !== \"$ref\" && RULES.all[key]) return true\n  return false\n}\n\nexport function schemaRefOrVal(\n  {topSchemaRef, schemaPath}: SchemaObjCxt,\n  schema: unknown,\n  keyword: string,\n  $data?: string | false\n): Code | number | boolean {\n  if (!$data) {\n    if (typeof schema == \"number\" || typeof schema == \"boolean\") return schema\n    if (typeof schema == \"string\") return _`${schema}`\n  }\n  return _`${topSchemaRef}${schemaPath}${getProperty(keyword)}`\n}\n\nexport function unescapeFragment(str: string): string {\n  return unescapeJsonPointer(decodeURIComponent(str))\n}\n\nexport function escapeFragment(str: string | number): string {\n  return encodeURIComponent(escapeJsonPointer(str))\n}\n\nexport function escapeJsonPointer(str: string | number): string {\n  if (typeof str == \"number\") return `${str}`\n  return str.replace(/~/g, \"~0\").replace(/\\//g, \"~1\")\n}\n\nexport function unescapeJsonPointer(str: string): string {\n  return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\")\n}\n\nexport function eachItem<T>(xs: T | T[], f: (x: T) => void): void {\n  if (Array.isArray(xs)) {\n    for (const x of xs) f(x)\n  } else {\n    f(xs)\n  }\n}\n\ntype SomeEvaluated = EvaluatedProperties | EvaluatedItems\n\ntype MergeEvaluatedFunc<T extends SomeEvaluated> = (\n  gen: CodeGen,\n  from: Name | T,\n  to: Name | Exclude<T, true> | undefined,\n  toName?: typeof Name\n) => Name | T\n\ninterface MakeMergeFuncArgs<T extends SomeEvaluated> {\n  mergeNames: (gen: CodeGen, from: Name, to: Name) => void\n  mergeToName: (gen: CodeGen, from: T, to: Name) => void\n  mergeValues: (from: T, to: Exclude<T, true>) => T\n  resultToName: (gen: CodeGen, res?: T) => Name\n}\n\nfunction makeMergeEvaluated<T extends SomeEvaluated>({\n  mergeNames,\n  mergeToName,\n  mergeValues,\n  resultToName,\n}: MakeMergeFuncArgs<T>): MergeEvaluatedFunc<T> {\n  return (gen, from, to, toName) => {\n    const res =\n      to === undefined\n        ? from\n        : to instanceof Name\n        ? (from instanceof Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to)\n        : from instanceof Name\n        ? (mergeToName(gen, to, from), from)\n        : mergeValues(from, to)\n    return toName === Name && !(res instanceof Name) ? resultToName(gen, res) : res\n  }\n}\n\ninterface MergeEvaluated {\n  props: MergeEvaluatedFunc<EvaluatedProperties>\n  items: MergeEvaluatedFunc<EvaluatedItems>\n}\n\nexport const mergeEvaluated: MergeEvaluated = {\n  props: makeMergeEvaluated({\n    mergeNames: (gen, from, to) =>\n      gen.if(_`${to} !== true && ${from} !== undefined`, () => {\n        gen.if(\n          _`${from} === true`,\n          () => gen.assign(to, true),\n          () => gen.assign(to, _`${to} || {}`).code(_`Object.assign(${to}, ${from})`)\n        )\n      }),\n    mergeToName: (gen, from, to) =>\n      gen.if(_`${to} !== true`, () => {\n        if (from === true) {\n          gen.assign(to, true)\n        } else {\n          gen.assign(to, _`${to} || {}`)\n          setEvaluated(gen, to, from)\n        }\n      }),\n    mergeValues: (from, to) => (from === true ? true : {...from, ...to}),\n    resultToName: evaluatedPropsToName,\n  }),\n  items: makeMergeEvaluated({\n    mergeNames: (gen, from, to) =>\n      gen.if(_`${to} !== true && ${from} !== undefined`, () =>\n        gen.assign(to, _`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)\n      ),\n    mergeToName: (gen, from, to) =>\n      gen.if(_`${to} !== true`, () =>\n        gen.assign(to, from === true ? true : _`${to} > ${from} ? ${to} : ${from}`)\n      ),\n    mergeValues: (from, to) => (from === true ? true : Math.max(from, to)),\n    resultToName: (gen, items) => gen.var(\"items\", items),\n  }),\n}\n\nexport function evaluatedPropsToName(gen: CodeGen, ps?: EvaluatedProperties): Name {\n  if (ps === true) return gen.var(\"props\", true)\n  const props = gen.var(\"props\", _`{}`)\n  if (ps !== undefined) setEvaluated(gen, props, ps)\n  return props\n}\n\nexport function setEvaluated(gen: CodeGen, props: Name, ps: {[K in string]?: true}): void {\n  Object.keys(ps).forEach((p) => gen.assign(_`${props}${getProperty(p)}`, true))\n}\n\nconst snippets: {[S in string]?: _Code} = {}\n\nexport function useFunc(gen: CodeGen, f: {code: string}): Name {\n  return gen.scopeValue(\"func\", {\n    ref: f,\n    code: snippets[f.code] || (snippets[f.code] = new _Code(f.code)),\n  })\n}\n\nexport enum Type {\n  Num,\n  Str,\n}\n\nexport function getErrorPath(\n  dataProp: Name | string | number,\n  dataPropType?: Type,\n  jsPropertySyntax?: boolean\n): Code | string {\n  // let path\n  if (dataProp instanceof Name) {\n    const isNumber = dataPropType === Type.Num\n    return jsPropertySyntax\n      ? isNumber\n        ? _`\"[\" + ${dataProp} + \"]\"`\n        : _`\"['\" + ${dataProp} + \"']\"`\n      : isNumber\n      ? _`\"/\" + ${dataProp}`\n      : _`\"/\" + ${dataProp}.replace(/~/g, \"~0\").replace(/\\\\//g, \"~1\")` // TODO maybe use global escapePointer\n  }\n  return jsPropertySyntax ? getProperty(dataProp).toString() : \"/\" + escapeJsonPointer(dataProp)\n}\n\nexport function checkStrictMode(\n  it: SchemaCxt,\n  msg: string,\n  mode: boolean | \"log\" = it.opts.strictSchema\n): void {\n  if (!mode) return\n  msg = `strict mode: ${msg}`\n  if (mode === true) throw new Error(msg)\n  it.self.logger.warn(msg)\n}\n","import type {CodeKeywordDefinition, AnySchemaObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, getProperty, Name} from \"../../compile/codegen\"\nimport {DiscrError, DiscrErrorObj} from \"../discriminator/types\"\nimport {resolveRef, SchemaEnv} from \"../../compile\"\nimport MissingRefError from \"../../compile/ref_error\"\nimport {schemaHasRulesButRef} from \"../../compile/util\"\n\nexport type DiscriminatorError = DiscrErrorObj<DiscrError.Tag> | DiscrErrorObj<DiscrError.Mapping>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {discrError, tagName}}) =>\n    discrError === DiscrError.Tag\n      ? `tag \"${tagName}\" must be string`\n      : `value of tag \"${tagName}\" must be in oneOf`,\n  params: ({params: {discrError, tag, tagName}}) =>\n    _`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"discriminator\",\n  type: \"object\",\n  schemaType: \"object\",\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, schema, parentSchema, it} = cxt\n    const {oneOf} = parentSchema\n    if (!it.opts.discriminator) {\n      throw new Error(\"discriminator: requires discriminator option\")\n    }\n    const tagName = schema.propertyName\n    if (typeof tagName != \"string\") throw new Error(\"discriminator: requires propertyName\")\n    if (schema.mapping) throw new Error(\"discriminator: mapping is not supported\")\n    if (!oneOf) throw new Error(\"discriminator: requires oneOf keyword\")\n    const valid = gen.let(\"valid\", false)\n    const tag = gen.const(\"tag\", _`${data}${getProperty(tagName)}`)\n    gen.if(\n      _`typeof ${tag} == \"string\"`,\n      () => validateMapping(),\n      () => cxt.error(false, {discrError: DiscrError.Tag, tag, tagName})\n    )\n    cxt.ok(valid)\n\n    function validateMapping(): void {\n      const mapping = getMapping()\n      gen.if(false)\n      for (const tagValue in mapping) {\n        gen.elseIf(_`${tag} === ${tagValue}`)\n        gen.assign(valid, applyTagSchema(mapping[tagValue]))\n      }\n      gen.else()\n      cxt.error(false, {discrError: DiscrError.Mapping, tag, tagName})\n      gen.endIf()\n    }\n\n    function applyTagSchema(schemaProp?: number): Name {\n      const _valid = gen.name(\"valid\")\n      const schCxt = cxt.subschema({keyword: \"oneOf\", schemaProp}, _valid)\n      cxt.mergeEvaluated(schCxt, Name)\n      return _valid\n    }\n\n    function getMapping(): {[T in string]?: number} {\n      const oneOfMapping: {[T in string]?: number} = {}\n      const topRequired = hasRequired(parentSchema)\n      let tagRequired = true\n      for (let i = 0; i < oneOf.length; i++) {\n        let sch = oneOf[i]\n        if (sch?.$ref && !schemaHasRulesButRef(sch, it.self.RULES)) {\n          const ref = sch.$ref\n          sch = resolveRef.call(it.self, it.schemaEnv.root, it.baseId, ref)\n          if (sch instanceof SchemaEnv) sch = sch.schema\n          if (sch === undefined) throw new MissingRefError(it.opts.uriResolver, it.baseId, ref)\n        }\n        const propSch = sch?.properties?.[tagName]\n        if (typeof propSch != \"object\") {\n          throw new Error(\n            `discriminator: oneOf subschemas (or referenced schemas) must have \"properties/${tagName}\"`\n          )\n        }\n        tagRequired = tagRequired && (topRequired || hasRequired(sch))\n        addMappings(propSch, i)\n      }\n      if (!tagRequired) throw new Error(`discriminator: \"${tagName}\" must be required`)\n      return oneOfMapping\n\n      function hasRequired({required}: AnySchemaObject): boolean {\n        return Array.isArray(required) && required.includes(tagName)\n      }\n\n      function addMappings(sch: AnySchemaObject, i: number): void {\n        if (sch.const) {\n          addMapping(sch.const, i)\n        } else if (sch.enum) {\n          for (const tagValue of sch.enum) {\n            addMapping(tagValue, i)\n          }\n        } else {\n          throw new Error(`discriminator: \"properties/${tagName}\" must have \"const\" or \"enum\"`)\n        }\n      }\n\n      function addMapping(tagValue: unknown, i: number): void {\n        if (typeof tagValue != \"string\" || tagValue in oneOfMapping) {\n          throw new Error(`discriminator: \"${tagName}\" values must be unique strings`)\n        }\n        oneOfMapping[tagValue] = i\n      }\n    }\n  },\n}\n\nexport default def\n","import {Name} from \"./codegen\"\n\nconst names = {\n  // validation function arguments\n  data: new Name(\"data\"), // data passed to validation function\n  // args passed from referencing schema\n  valCxt: new Name(\"valCxt\"), // validation/data context - should not be used directly, it is destructured to the names below\n  instancePath: new Name(\"instancePath\"),\n  parentData: new Name(\"parentData\"),\n  parentDataProperty: new Name(\"parentDataProperty\"),\n  rootData: new Name(\"rootData\"), // root data - same as the data passed to the first/top validation function\n  dynamicAnchors: new Name(\"dynamicAnchors\"), // used to support recursiveRef and dynamicRef\n  // function scoped variables\n  vErrors: new Name(\"vErrors\"), // null or array of validation errors\n  errors: new Name(\"errors\"), // counter of validation errors\n  this: new Name(\"this\"),\n  // \"globals\"\n  self: new Name(\"self\"),\n  scope: new Name(\"scope\"),\n  // JTD serialize/parse name for JSON string and position\n  json: new Name(\"json\"),\n  jsonPos: new Name(\"jsonPos\"),\n  jsonLen: new Name(\"jsonLen\"),\n  jsonPart: new Name(\"jsonPart\"),\n}\n\nexport default names\n","import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {usePattern} from \"../code\"\nimport {_, str} from \"../../compile/codegen\"\n\nexport type PatternError = ErrorObject<\"pattern\", {pattern: string}, string | {$data: string}>\n\nconst error: KeywordErrorDefinition = {\n  message: ({schemaCode}) => str`must match pattern \"${schemaCode}\"`,\n  params: ({schemaCode}) => _`{pattern: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"pattern\",\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {data, $data, schema, schemaCode, it} = cxt\n    // TODO regexp should be wrapped in try/catchs\n    const u = it.opts.unicodeRegExp ? \"u\" : \"\"\n    const regExp = $data ? _`(new RegExp(${schemaCode}, ${u}))` : usePattern(cxt, schema)\n    cxt.fail$data(_`!${regExp}.test(${data})`)\n  },\n}\n\nexport default def\n","import type {ErrorObject, Vocabulary} from \"../../types\"\nimport limitNumber, {LimitNumberError} from \"./limitNumber\"\nimport multipleOf, {MultipleOfError} from \"./multipleOf\"\nimport limitLength from \"./limitLength\"\nimport pattern, {PatternError} from \"./pattern\"\nimport limitProperties from \"./limitProperties\"\nimport required, {RequiredError} from \"./required\"\nimport limitItems from \"./limitItems\"\nimport uniqueItems, {UniqueItemsError} from \"./uniqueItems\"\nimport constKeyword, {ConstError} from \"./const\"\nimport enumKeyword, {EnumError} from \"./enum\"\n\nconst validation: Vocabulary = [\n  // number\n  limitNumber,\n  multipleOf,\n  // string\n  limitLength,\n  pattern,\n  // object\n  limitProperties,\n  required,\n  // array\n  limitItems,\n  uniqueItems,\n  // any\n  {keyword: \"type\", schemaType: [\"string\", \"array\"]},\n  {keyword: \"nullable\", schemaType: \"boolean\"},\n  constKeyword,\n  enumKeyword,\n]\n\nexport default validation\n\ntype LimitError = ErrorObject<\n  \"maxItems\" | \"minItems\" | \"minProperties\" | \"maxProperties\" | \"minLength\" | \"maxLength\",\n  {limit: number},\n  number | {$data: string}\n>\n\nexport type ValidationKeywordError =\n  | LimitError\n  | LimitNumberError\n  | MultipleOfError\n  | PatternError\n  | RequiredError\n  | UniqueItemsError\n  | ConstError\n  | EnumError\n","import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {SchemaObjCxt} from \"../../compile\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, not, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema, checkStrictMode} from \"../../compile/util\"\n\nexport type IfKeywordError = ErrorObject<\"if\", {failingKeyword: string}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params}) => str`must match \"${params.ifClause}\" schema`,\n  params: ({params}) => _`{failingKeyword: ${params.ifClause}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"if\",\n  schemaType: [\"object\", \"boolean\"],\n  trackErrors: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, parentSchema, it} = cxt\n    if (parentSchema.then === undefined && parentSchema.else === undefined) {\n      checkStrictMode(it, '\"if\" without \"then\" and \"else\" is ignored')\n    }\n    const hasThen = hasSchema(it, \"then\")\n    const hasElse = hasSchema(it, \"else\")\n    if (!hasThen && !hasElse) return\n\n    const valid = gen.let(\"valid\", true)\n    const schValid = gen.name(\"_valid\")\n    validateIf()\n    cxt.reset()\n\n    if (hasThen && hasElse) {\n      const ifClause = gen.let(\"ifClause\")\n      cxt.setParams({ifClause})\n      gen.if(schValid, validateClause(\"then\", ifClause), validateClause(\"else\", ifClause))\n    } else if (hasThen) {\n      gen.if(schValid, validateClause(\"then\"))\n    } else {\n      gen.if(not(schValid), validateClause(\"else\"))\n    }\n\n    cxt.pass(valid, () => cxt.error(true))\n\n    function validateIf(): void {\n      const schCxt = cxt.subschema(\n        {\n          keyword: \"if\",\n          compositeRule: true,\n          createErrors: false,\n          allErrors: false,\n        },\n        schValid\n      )\n      cxt.mergeEvaluated(schCxt)\n    }\n\n    function validateClause(keyword: string, ifClause?: Name): () => void {\n      return () => {\n        const schCxt = cxt.subschema({keyword}, schValid)\n        gen.assign(valid, schValid)\n        cxt.mergeValidEvaluated(schCxt, valid)\n        if (ifClause) gen.assign(ifClause, _`${keyword}`)\n        else cxt.setParams({ifClause: keyword})\n      }\n    }\n  },\n}\n\nfunction hasSchema(it: SchemaObjCxt, keyword: string): boolean {\n  const schema = it.schema[keyword]\n  return schema !== undefined && !alwaysValidSchema(it, schema)\n}\n\nexport default def\n","import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema} from \"../../compile/util\"\nimport {SchemaCxt} from \"../../compile\"\n\nexport type OneOfError = ErrorObject<\n  \"oneOf\",\n  {passingSchemas: [number, number] | null},\n  AnySchema[]\n>\n\nconst error: KeywordErrorDefinition = {\n  message: \"must match exactly one schema in oneOf\",\n  params: ({params}) => _`{passingSchemas: ${params.passing}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"oneOf\",\n  schemaType: \"array\",\n  trackErrors: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, parentSchema, it} = cxt\n    /* istanbul ignore if */\n    if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\")\n    if (it.opts.discriminator && parentSchema.discriminator) return\n    const schArr: AnySchema[] = schema\n    const valid = gen.let(\"valid\", false)\n    const passing = gen.let(\"passing\", null)\n    const schValid = gen.name(\"_valid\")\n    cxt.setParams({passing})\n    // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas\n\n    gen.block(validateOneOf)\n\n    cxt.result(\n      valid,\n      () => cxt.reset(),\n      () => cxt.error(true)\n    )\n\n    function validateOneOf(): void {\n      schArr.forEach((sch: AnySchema, i: number) => {\n        let schCxt: SchemaCxt | undefined\n        if (alwaysValidSchema(it, sch)) {\n          gen.var(schValid, true)\n        } else {\n          schCxt = cxt.subschema(\n            {\n              keyword: \"oneOf\",\n              schemaProp: i,\n              compositeRule: true,\n            },\n            schValid\n          )\n        }\n\n        if (i > 0) {\n          gen\n            .if(_`${schValid} && ${valid}`)\n            .assign(valid, false)\n            .assign(passing, _`[${passing}, ${i}]`)\n            .else()\n        }\n\n        gen.if(schValid, () => {\n          gen.assign(valid, true)\n          gen.assign(passing, i)\n          if (schCxt) cxt.mergeEvaluated(schCxt, Name)\n        })\n      })\n    }\n  },\n}\n\nexport default def\n","import type {Vocabulary} from \"../../types\"\nimport formatKeyword from \"./format\"\n\nconst format: Vocabulary = [formatKeyword]\n\nexport default format\n","import type {CodeKeywordDefinition, ErrorNoParams, AnySchema} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {alwaysValidSchema} from \"../../compile/util\"\n\nexport type NotKeywordError = ErrorNoParams<\"not\", AnySchema>\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"not\",\n  schemaType: [\"object\", \"boolean\"],\n  trackErrors: true,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, it} = cxt\n    if (alwaysValidSchema(it, schema)) {\n      cxt.fail()\n      return\n    }\n\n    const valid = gen.name(\"valid\")\n    cxt.subschema(\n      {\n        keyword: \"not\",\n        compositeRule: true,\n        createErrors: false,\n        allErrors: false,\n      },\n      valid\n    )\n\n    cxt.failResult(\n      valid,\n      () => cxt.reset(),\n      () => cxt.error()\n    )\n  },\n  error: {message: \"must NOT be valid\"},\n}\n\nexport default def\n","import type {Vocabulary} from \"../types\"\nimport coreVocabulary from \"./core\"\nimport validationVocabulary from \"./validation\"\nimport getApplicatorVocabulary from \"./applicator\"\nimport formatVocabulary from \"./format\"\nimport {metadataVocabulary, contentVocabulary} from \"./metadata\"\n\nconst draft7Vocabularies: Vocabulary[] = [\n  coreVocabulary,\n  validationVocabulary,\n  getApplicatorVocabulary(),\n  formatVocabulary,\n  metadataVocabulary,\n  contentVocabulary,\n]\n\nexport default draft7Vocabularies\n"],"names":["shouldUseGroup","schema","group","rules","some","rule","shouldUseRule","undefined","keyword","_a","definition","implements","kwd","exports","_ref","type","self","RULES","types","module","equal","a","b","constructor","length","i","keys","Array","isArray","RegExp","source","flags","valueOf","Object","prototype","toString","hasOwnProperty","call","key","codegen_1","require","util_1","code_1","def","schemaType","before","code","cxt","it","validateTuple","items","alwaysValidSchema","ok","validateArray","extraItems","schArr","arguments","gen","parentSchema","data","sch","opts","errSchemaPath","l","fullTuple","minItems","maxItems","strictTuples","msg","concat","checkStrictMode","checkStrictTuple","unevaluated","mergeEvaluated","valid","name","len","const","_","_templateObject","_taggedTemplateLiteral","forEach","if","_templateObject2","subschema","schemaProp","dataProp","HEX","IPV4_REG","normalizeIPv4","host","findToken","isIPV4","matches","match","address","stripLeadingZeros","stringArrayToHexStripped","input","keepZero","acc","strip","c","normalizeIPv6","isIPV6","ipv6","tokenCount","output","error","zone","buffer","isZone","endipv6Encountered","endIpv6","consume","hex","push","cursor","join","getIPV6","newHost","escapedHost","str","token","out","skip","ind","RDS1","RDS2","RDS3","RDS5","recomposeAuthority","components","uriTokens","userinfo","unescape","ipV4res","ipV6res","port","String","normalizeComponentEncoding","esc","func","escape","scheme","path","query","fragment","removeDotSegments","replace","pop","im","Error","s","slice","schemaPath","topSchemaRef","getProperty","escapeFragment","_ref2","dataPropType","dpType","dataTypes","propertyName","errorPath","dataPathArr","dataContextProps","let","_templateObject3","_templateObject4","getErrorPath","jsPropertySyntax","parentDataProperty","_templateObject5","Name","_nextData","dataLevel","definedProperties","Set","parentData","dataNames","_ref3","jtdDiscriminator","jtdMetadata","compositeRule","createErrors","allErrors","ops","operators","KWDs","maximum","okStr","LTE","fail","GT","minimum","GTE","LT","exclusiveMaximum","exclusiveMinimum","message","schemaCode","params","$data","fail$data","ref_error_1","names_1","compile_1","$ref","baseId","schemaEnv","env","validateName","root","callRef","$async","rootName","scopeValue","ref","callRootRef","schOrEnv","resolveRef","default","uriResolver","SchemaEnv","v","getValidate","callValidate","schName","stringify","schCxt","nil","inlineRefSchema","validate","passCxt","passContext","this","addErrorsFrom","errs","assign","vErrors","_templateObject6","errors","_templateObject7","addEvaluatedFrom","schEvaluated","evaluated","props","dynamicProps","var","_templateObject8","dynamicItems","_templateObject9","try","callValidateCode","e","ValidationError","throw","callAsyncRef","result","id_1","ref_1","core","DiscrError","ruleType","validateFormats","fmts","formats","fDef","fType","format","or","strictSchema","callFormat","_templateObject0","validData","_templateObject1","_templateObject10","invalidFmt","validate$DataFormat","formatDef","logger","warn","unknownMsg","unknownFormat","fmtType","fmtRef","fmtDef","regexpCode","_templateObject11","fmt","_templateObject12","getFormat","pass","async","_templateObject13","_templateObject14","_templateObject15","validCondition","validateFormat","ucs2length","value","pos","charCodeAt","super","ajv","validation","validate_1","enumerable","get","KeywordCxt","CodeGen","validation_error_1","rules_1","codegen_2","resolve_1","dataType_1","$dataRefSchema","uri_1","defaultRegExp","META_IGNORE_OPTIONS","EXT_SCOPE_NAMES","removedOptions","errorDataPath","nullable","jsonPointers","extendRefs","missingRefs","processCode","sourceCode","strictDefaults","strictKeywords","uniqueItems","unknownFormats","cache","serialize","ajvErrors","deprecatedOptions","ignoreKeywordsWithRef","unicode","Ajv","schemas","refs","_compilations","_loading","_cache","Map","_objectSpread","o","strict","_optz","optimize","regExp","_c","_b","_d","_f","_e","strictNumbers","_h","_g","strictTypes","_k","_j","_m","_l","strictRequired","_p","_o","loopRequired","_q","loopEnum","_r","meta","_s","messages","_t","inlineRefs","_u","schemaId","_v","addUsedSchema","_w","validateSchema","_x","_y","unicodeRegExp","_z","int32range","_0","requiredOptions","es5","lines","scope","ValueScope","prefixes","noLogs","console","log","getLogger","formatOpt","getRules","checkOptions","_metaOpts","getMetaSchemaOptions","addInitialFormats","_addVocabularies","_addDefaultMetaSchema","keywords","addInitialKeywords","addMetaSchema","addInitialSchemas","addKeyword","_dataRefSchema","id","$id","defaultMeta","schemaKeyRef","getSchema","compile","_meta","_addSchema","_compileSchemaEnv","compileAsync","loadSchema","runCompileAsync","_schema","loadMetaSchema","$schema","_compileAsync","checkLoaded","loadMissingSchema","missingSchema","missingRef","_loadSchema","addSchema","p","_validateSchema","normalizeId","_checkUnique","throwOrLogError","errorsText","keyRef","getSchEnv","resolveSchema","removeSchema","_removeAllSchemas","clear","delete","cacheKey","addVocabulary","definitions","kwdOrDef","checkKeyword","eachItem","addRule","keywordMetaschema","getJSONTypes","k","t","getKeyword","all","removeKeyword","findIndex","splice","addFormat","separator","dataVar","map","instancePath","reduce","text","$dataMetaSchema","metaSchema","keywordsJsonPointers","JSON","parse","jsonPointer","segments","split","seg","schemaOrData","regex","test","jtd","localRefs","getSchemaRefs","set","startsWith","_compileMetaSchema","compileSchema","currentOpts","checkOpts","options","opt","optsSchemas","defs","metaOpts","MissingRefError","KEYWORD_NAME","dataType","post","ruleGroup","find","addBeforeRule","_rule","$dataRef","anyOf","ucs2length_1","comp","op","useFunc","freeze","defineProperties","raw","__esModule","dynamicAnchors","_sch","getCompilingSchema","rootId","getFullPath","ownProperties","_ValidationError","scopeName","schemaCxt","add","validateFunctionCode","validateCode","scopeRefs","process","Function","makeValidate","scopeValues","_values","inlineOrCompile","inlineRef","schEnv","sameSchemaEnv","s1","s2","resolve","refPath","_getFullPath","getJsonPointer","schOrRef","schId","resolveUrl","schOrFunc","PREVENT_SCOPE_CHANGE","parsedRef","part","partSchema","unescapeFragment","has","schemaHasRulesButRef","assignDefault","prop","defaultValue","childData","condition","useDefaults","ty","properties","jsonTypes","x","groups","number","string","array","object","integer","boolean","null","ValueError","UsedValueState","Scope","parent","_names","_prefixes","_parent","toName","nameOrPrefix","prefix","_newName","ng","_nameGroup","index","ValueScopeName","nameStr","setValue","property","itemIndex","scopePath","line","_scope","_n","valueKey","vs","_name","getValue","keyOrRef","values","_reduceValues","scopeCode","usedValues","getCode","valueCode","nameSet","Started","varKinds","Completed","scope_1","code_2","strConcat","scope_2","_Code","EQ","NEQ","NOT","OR","AND","ADD","Node","optimizeNodes","optimizeNames","_constants","Def","varKind","rhs","render","names","constants","optimizeExpr","_CodeOrName","Assign","lhs","sideEffects","addExprNames","AssignOp","Label","label","_ref4","Break","_ref5","Throw","_ref6","AnyCode","_ref7","ParentNode","nodes","n","subtractNames","addNames","BlockNode","Root","Else","kind","If","else","cond","ns","not","For","ForLoop","iteration","ForRange","from","to","ForIter","loop","iterable","Func","args","_async","Return","Try","catch","finally","Catch","Finally","expr","replaceName","_items","par","extScope","_blockStarts","_extScope","_nodes","_root","prefixOrName","getScopeValue","_def","constant","_leafNode","_constant","_len","keyValues","_key","addCodeArg","thenBody","elseBody","_blockNode","endIf","elseIf","_elseNode","_endBlockNode","_for","node","forBody","endFor","for","forRange","forOf","arr","forIn","obj","break","return","tryBody","catchCode","finallyCode","_currNode","block","body","nodeCount","endBlock","toClose","funcBody","endFunc","N1","N2","andCode","mappend","_len2","_key2","orCode","y","_len3","_key3","errors_1","modifyData","useKeyword","macroSchema","macro","schemaRef","checkAsyncKeyword","validateRef","assignValid","_await","passSchema","modifying","reportErrs","block$data","ruleErrs","validateAsync","validateErrs","validateSync","extendErrors","addErrs","allowUndefined","st","includes","deps","dependencies","util_2","hasPropFunc","isOwnProperty","noPropertyInData","allSchemaProperties","schemaMap","filter","setParams","missingProperty","missing","and","context","dataAndSchema","valCxt","rootData","dynamicRef","newRegExp","pattern","u","rx","validArr","validateItems","notValid","Type","Num","schValid","mergeValidEvaluated","reset","validateAdditionalItems","UUID_REG","URN_REG","isSecure","wsComponents","secure","toLowerCase","httpParse","httpSerialize","http","domainHost","ws","resourceName","SCHEMES","https","wss","urn","urnComponents","nid","nss","urnScheme","schemeHandler","uriComponents","skipEscape","skipNormalize","uuidComponents","uuid","tolerant","traverse","SIMPLE_INLINED","limit","hasRef","countKeys","REF_KEYWORDS","count","Infinity","resolver","TRAILING_SLASH_HASH","ANCHOR","baseIds","pathPrefix","schemaRefs","allKeys","jsonPtr","parentJsonPtr","fullPath","innerBaseId","addRef","_resolve","ambiguos","checkAmbiguosRef","addAnchor","anchor","$anchor","$dynamicAnchor","sch1","sch2","additionalItems_1","prefixItems_1","items_1","items2020_1","contains_1","dependencies_1","propertyNames_1","additionalProperties_1","properties_1","patternProperties_1","not_1","anyOf_1","oneOf_1","allOf_1","if_1","thenElse_1","draft2020","applicator","addError","errObj","err","returnErrors","_templateObject16","_templateObject17","keywordError","errorPaths","overrideAllErrors","errorObjectCode","errsCount","schemaValue","verbose","E","_templateObject18","errorInstancePath","errorSchemaPath","_ref8","_templateObject22","_templateObject23","extraErrorProps","errorObject","instPath","_templateObject19","Str","schPath","_templateObject20","_templateObject21","boolError","falseSchemaError","reportError","equal_1","j","itemTypes","getSchemaTypes","loopN","item","wrongType","checkDataTypes","DataType","Wrong","indices","loopN2","eql","outer","A","B","C","d","D","f","F","prefixItems","trackErrors","min","max","minContains","maxContains","next","validateItemsWithCount","checkLimits","_valid","depsCount","property_ies","propDeps","schDeps","propertyDeps","schemaDeps","splitDependencies","validatePropertyDeps","validateSchemaDeps","hasProperty","propertyInData","depProp","checkReportMissingProp","checkMissingProp","reportMissingProp","boolSchema_1","applicability_1","dataType_2","defaults_1","keyword_1","subschema_1","validateFunction","funcSourceUrl","destructureValCxtES5","destructureValCxt","subschemaCode","isSchemaObj","checkKeywords","schemaCxtHasRules","$comment","commentKeyword","updateContext","checkAsyncSchema","typeAndKeywords","subSchemaObjCode","boolOrEmptySchema","checkUnknownRules","checkRefsAndKeywords","schemaKeywords","coerceAndCheckDataType","_templateObject24","typeErrors","groupKeywords","checkDataType","iterateKeywords","reportTypeError","_templateObject31","includesType","strictTypesError","withTypes","ts","narrowSchemaTypes","checkContextTypes","allowUnionTypes","checkMultipleTypes","hasApplicableType","checkKeywordTypes","checkStrictTypes","keywordCode","assignDefaults","schTs","kwdT","checkNoDefault","resetEvaluated","_templateObject25","_templateObject26","_templateObject27","_templateObject29","_templateObject30","assignEvaluated","_templateObject28","returnResults","topSchemaObjCode","topBoolOrEmptySchema","validateKeywordUsage","schemaRefOrVal","getData","validSchemaType","successAction","failAction","failResult","_templateObject32","invalid$data","append","errorParams","_error","reportExtraError","$dataError","keyword$DataError","resetErrorsCount","codeBlock","$dataValid","check$data","_templateObject33","_templateObject34","wrong$DataType","validateSchemaRef","_templateObject35","invalid$DataSchema","appl","getSubschema","extendSubschemaData","extendSubschemaMode","nextContext","funcKeywordCode","macroKeywordCode","JSON_POINTER","RELATIVE_JSON_POINTER","exec","up","errorMsg","segment","_templateObject36","unescapeJsonPointer","_templateObject37","pointerType","IDENTIFIER","emptyStr","_str","strs","plus","safeStringify","res","mergeExprItems","arg","c1","c2","useLoop","getEql","vSchema","equalCode","every","isJSONType","coerceTo","coerceTypes","COERCIBLE","coerceToTypes","checkTypes","schemaHasRulesForType","coerced","coerceSpecificType","assignParentData","coerceData","strictNums","correct","Correct","numCond","_cond","toHash","notObj","typeError","getTypeErrorContext","removeAdditional","additionalProperties","allProps","hasDefault","applyPropertySchema","uri","core_1","draft7_1","discriminator_1","draft7MetaSchema","META_SUPPORT_DATA","META_SCHEMA_ID","discriminator","defineProperty","cb","_traverse","pre","rootSchema","parentKeyword","keyIndex","arrayKeywords","propsKeywords","escapeJsonPtr","skipKeywords","additionalItems","contains","propertyNames","then","allOf","oneOf","$defs","patternProperties","enum","required","multipleOf","maxLength","minLength","maxProperties","minProperties","additionalProperty","patProps","deleteAdditional","additionalPropertyCode","applyAdditionalSchema","definedProp","propsSchema","usePattern","isAdditional","validateUnion","resolveComponents","base","relative","skipNormalization","target","charAt","lastIndexOf","cmpts","reference","authority","absolutePath","hexLookUp","fromCharCode","URI_PARSE","parsed","gotEncoding","indexOf","isIP","parseInt","isNaN","ipv4result","ipv6result","unicodeSupport","nonSimpleDomain","URL","domainToASCII","encodeURI","decodeURIComponent","fastUri","normalize","baseURI","relativeURI","schemelessOptions","uriA","uriB","loopAllRequired","allErrorsMode","loopUntilMissing","exitOnErrorMode","requiredKey","patterns","alwaysValidPatterns","checkProperties","allowMatchingProperties","evaluatedPropsToName","checkMatchingProperties","pat","validateProperties","alwaysValid","validatePatternProperties","prec","multipleOfPrecision","invalid","schemaHasRules","escapeJsonPointer","makeMergeEvaluated","mergeNames","mergeToName","mergeValues","resultToName","ps","setEvaluated","hash","encodeURIComponent","xs","Math","snippets","mode","isNumber","types_1","discrError","tagName","Tag","tag","mapping","applyTagSchema","oneOfMapping","topRequired","hasRequired","tagRequired","propSch","addMappings","addMapping","tagValue","getMapping","Mapping","validateMapping","json","jsonPos","jsonLen","jsonPart","limitNumber_1","multipleOf_1","limitLength_1","pattern_1","limitProperties_1","required_1","limitItems_1","uniqueItems_1","const_1","enum_1","ifClause","hasThen","hasSchema","hasElse","validateIf","validateClause","passing","validation_1","applicator_1","format_1","metadata_1","draft7Vocabularies","metadataVocabulary","contentVocabulary"],"sourceRoot":""}