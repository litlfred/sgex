{"version":3,"file":"static/js/5207.4768a17b.chunk.js","mappings":"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","sources":["components/RepositorySelection.js","components/SAMLAuthModal.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport repositoryCacheService from '../services/repositoryCacheService';\nimport samlAuthService from '../services/samlAuthService';\nimport SAMLAuthModal from './SAMLAuthModal';\nimport { PageLayout } from './framework';\n\nconst RepositorySelection = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user } = useParams();\n  const [repositories, setRepositories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [samlModalOpen, setSamlModalOpen] = useState(false);\n  const [samlModalInfo, setSamlModalInfo] = useState(null);\n  \n  // Get profile from location state or fetch from GitHub using user param\n  const [profile, setProfile] = useState(location.state?.profile);\n\n  // Fetch profile if we have user param but no profile in state\n  useEffect(() => {\n    const fetchProfile = async () => {\n      if (user && !profile) {\n        try {\n          if (githubService.isAuth()) {\n            const fetchedProfile = await githubService.getUser(user);\n            setProfile(fetchedProfile);\n          } else {\n            // Create a profile for unauthenticated users (accessing public repositories)\n            setProfile({\n              login: user,\n              name: user.charAt(0).toUpperCase() + user.slice(1),\n              avatar_url: `https://github.com/${user}.png`,\n              type: 'User'\n              // Note: isDemo is NOT set - unauthenticated users should access real public repos\n            });\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n          navigate('/', {\n            state: {\n              warningMessage: `User '${user}' not found or not accessible.`\n            }\n          });\n        }\n      }\n    };\n    \n    // Register SAML modal callback\n    samlAuthService.registerModalCallback((samlInfo) => {\n      setSamlModalInfo(samlInfo);\n      setSamlModalOpen(true);\n    });\n\n    fetchProfile();\n  }, [user, profile, navigate]);\n\n  const fetchRepositories = useCallback(async (forceRefresh = false) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const profileType = profile.type;\n      \n      // First, check cache unless we're forcing a refresh\n      if (!forceRefresh) {\n        let cachedRepos = null;\n        try {\n          cachedRepos = repositoryCacheService.getCachedRepositories(profile.login, profileType);\n        } catch (cacheError) {\n          console.warn('Error accessing repository cache:', cacheError);\n        }\n        \n        if (cachedRepos) {\n          // Use cached repositories\n          console.log(`Using cached repositories for ${profile.login} (${profileType})`);\n          setRepositories(cachedRepos.repositories);\n          setLoading(false);\n          return;\n        }\n      }\n      \n      // No cached data or forced refresh - fetch from GitHub\n      console.log(`Fetching fresh repositories for ${profile.login} (${profileType})`);\n      const repos = await githubService.getRepositories(profile.login, profileType);\n      \n      // Cache the fetched repositories\n      try {\n        repositoryCacheService.setCachedRepositories(profile.login, profileType, repos);\n      } catch (cacheError) {\n        console.warn('Error caching repositories:', cacheError);\n      }\n      \n      setRepositories(repos);\n    } catch (error) {\n      console.error('Error fetching repositories:', error);\n      setError('Failed to fetch repositories. Please check your connection and try again.');\n    } finally {\n      setLoading(false);\n    }\n  }, [profile]);\n\n  useEffect(() => {\n    // Don't redirect if we're waiting for profile to be loaded from user param\n    if (!profile && !user) {\n      navigate('/');\n      return;\n    }\n    \n    // Only fetch repositories if we have a profile\n    if (profile) {\n      fetchRepositories();\n    }\n  }, [profile, user, navigate, fetchRepositories]);\n\n  const handleRepositorySelect = (repo) => {\n    navigate(`/dashboard/${repo.owner.login}/${repo.name}`, { \n      state: { \n        profile, \n        repository: repo \n      } \n    });\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <PageLayout pageName=\"repository-selection\">\n      {!profile ? (\n        <div>Redirecting...</div>\n      ) : (\n        <div className=\"repo-content\">\n        <div className=\"repo-main\">\n          <div className=\"repo-selection\">\n            <h2>Select DAK Repository</h2>\n            <p>Choose a repository containing WHO SMART Guidelines Digital Adaptation Kit content:</p>\n\n            {loading ? (\n              <div className=\"loading\">\n                <div className=\"spinner\"></div>\n                <p>Loading repositories...</p>\n              </div>\n            ) : error ? (\n              <div className=\"error-state\">\n                <h3>Error loading repositories</h3>\n                <p>{error}</p>\n              <button onClick={() => fetchRepositories(true)} className=\"retry-btn\">\n                Try Again\n              </button>\n            </div>\n          ) : repositories.length === 0 ? (\n            <div className=\"empty-state\">\n              <h3>No DAK repositories found</h3>\n              <p>\n                No repositories found with DAK-related topics or keywords. \n                Create a new repository or add topics like 'who', 'smart-guidelines', \n                'dak', or 'health' to existing repositories.\n              </p>\n            </div>\n          ) : (\n            <div className=\"repo-grid\">\n              {repositories.map((repo) => (\n                <div \n                  key={repo.id}\n                  className=\"repo-card\"\n                  onClick={() => handleRepositorySelect(repo)}\n                >\n                  <div className=\"repo-header-info\">\n                    <h3>{repo.name}</h3>\n                    <div className=\"repo-meta\">\n                      {repo.private && <span className=\"private-badge\">Private</span>}\n                      {repo.language && <span className=\"language-badge\">{repo.language}</span>}\n                    </div>\n                  </div>\n                  \n                  <p className=\"repo-description\">{repo.description || 'No description available'}</p>\n                  \n                  <div className=\"repo-topics\">\n                    {(repo.topics || []).slice(0, 3).map((topic) => (\n                      <span key={topic} className=\"topic-tag\">{topic}</span>\n                    ))}\n                    {(repo.topics || []).length > 3 && (\n                      <span className=\"topic-more\">+{(repo.topics || []).length - 3} more</span>\n                    )}\n                  </div>\n                  \n                  <div className=\"repo-stats\">\n                    <div className=\"stat\">\n                      <span className=\"stat-icon\">⭐</span>\n                      <span>{repo.stargazers_count || 0}</span>\n                    </div>\n                    <div className=\"stat\">\n                      <span className=\"stat-icon\">🍴</span>\n                      <span>{repo.forks_count || 0}</span>\n                    </div>\n                    <div className=\"stat\">\n                      <span className=\"stat-icon\">📅</span>\n                      <span>Updated {formatDate(repo.updated_at)}</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n          </div>\n        </div>\n        </div>\n      )}\n      \n      {/* SAML Authorization Modal */}\n      <SAMLAuthModal\n        isOpen={samlModalOpen}\n        onClose={() => {\n          setSamlModalOpen(false);\n          setSamlModalInfo(null);\n        }}\n        samlInfo={samlModalInfo}\n      />\n    </PageLayout>\n  );\n};\n\nexport default RepositorySelection;","import React, { useEffect } from 'react';\nimport logger from '../utils/logger';\nimport './SAMLAuthModal.css';\n\n/**\n * SAMLAuthModal Component\n * \n * Modal dialog that guides users through GitHub SAML SSO authorization process.\n * Displayed when a Personal Access Token needs SAML SSO authorization for an organization.\n */\nconst SAMLAuthModal = ({ isOpen, onClose, samlInfo }) => {\n  const componentLogger = logger.getLogger('SAMLAuthModal');\n\n  useEffect(() => {\n    if (isOpen && samlInfo) {\n      componentLogger.componentMount({ \n        organization: samlInfo.organization,\n        repository: samlInfo.repository \n      });\n    }\n    return () => {\n      if (isOpen) {\n        componentLogger.componentUnmount();\n      }\n    };\n  }, [componentLogger, isOpen, samlInfo]);\n\n  if (!isOpen || !samlInfo) {\n    return null;\n  }\n\n  const { organization, repository, authorizationUrl } = samlInfo;\n\n  const handleAuthorize = () => {\n    componentLogger.userAction('Authorize SAML clicked', { \n      organization,\n      authorizationUrl \n    });\n    \n    // Open GitHub SAML authorization page in new tab\n    window.open(authorizationUrl, '_blank', 'noopener,noreferrer');\n    \n    // Log instruction for user\n    componentLogger.info('SAML authorization page opened', {\n      organization,\n      instruction: 'User should authorize their PAT on GitHub and then refresh'\n    });\n  };\n\n  const handleClose = () => {\n    componentLogger.userAction('SAML modal closed', { organization });\n    onClose();\n  };\n\n  return (\n    <div \n      className=\"saml-modal-overlay\" \n      onClick={handleClose}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"saml-modal-title\"\n    >\n      <div \n        className=\"saml-modal\" \n        onClick={(e) => e.stopPropagation()}\n        role=\"document\"\n      >\n        <div className=\"saml-modal-header\">\n          <h2 id=\"saml-modal-title\">🔐 SAML SSO Authorization Required</h2>\n          <button \n            onClick={handleClose}\n            className=\"close-button\"\n            aria-label=\"Close\"\n          >\n            ×\n          </button>\n        </div>\n        \n        <div className=\"saml-modal-content\">\n          <div className=\"saml-info-section\">\n            <div className=\"saml-icon\">\n              <span role=\"img\" aria-label=\"lock\">🔒</span>\n            </div>\n            \n            <h3>Organization Access Required</h3>\n            <p className=\"saml-description\">\n              Your Personal Access Token needs SAML SSO authorization to access the{' '}\n              <strong>{organization}</strong> organization{repository ? ` and the ${repository} repository` : ''}.\n            </p>\n          </div>\n\n          <div className=\"saml-steps-section\">\n            <h4>How to authorize your token:</h4>\n            <ol className=\"saml-steps\">\n              <li>\n                <strong>Click \"Authorize on GitHub\"</strong> below to open the authorization page\n              </li>\n              <li>\n                <strong>Review the permissions</strong> requested by the organization\n              </li>\n              <li>\n                <strong>Click \"Authorize\"</strong> to grant your token access\n              </li>\n              <li>\n                <strong>Return to this page</strong> and refresh or try your action again\n              </li>\n            </ol>\n          </div>\n\n          <div className=\"saml-note\">\n            <span className=\"note-icon\">ℹ️</span>\n            <p>\n              This is a GitHub security feature for organizations using SAML SSO.\n              You only need to authorize once per organization per token.\n            </p>\n          </div>\n\n          <div className=\"saml-modal-actions\">\n            <button \n              onClick={handleAuthorize}\n              className=\"saml-authorize-btn\"\n            >\n              🔓 Authorize on GitHub\n            </button>\n            <button \n              onClick={handleClose}\n              className=\"saml-cancel-btn\"\n            >\n              Later\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SAMLAuthModal;\n"],"names":["RepositorySelection","_location$state","location","useLocation","navigate","useNavigate","user","useParams","repositories","setRepositories","useState","loading","setLoading","error","setError","samlModalOpen","setSamlModalOpen","samlModalInfo","setSamlModalInfo","profile","setProfile","state","useEffect","samlAuthService","registerModalCallback","samlInfo","async","githubService","isAuth","fetchedProfile","getUser","login","name","charAt","toUpperCase","slice","avatar_url","concat","type","console","warningMessage","fetchProfile","fetchRepositories","useCallback","forceRefresh","arguments","length","undefined","profileType","cachedRepos","repositoryCacheService","getCachedRepositories","cacheError","warn","log","repos","getRepositories","setCachedRepositories","_jsxs","PageLayout","pageName","children","_jsx","className","onClick","map","repo","owner","repository","handleRepositorySelect","private","language","description","topics","topic","stargazers_count","forks_count","dateString","updated_at","Date","toLocaleDateString","year","month","day","id","SAMLAuthModal","isOpen","onClose","_ref","componentLogger","logger","getLogger","componentMount","organization","componentUnmount","authorizationUrl","handleClose","userAction","role","e","stopPropagation","handleAuthorize","window","open","info","instruction"],"sourceRoot":""}