{"version":3,"file":"static/js/9636.ade5b55f.chunk.js","mappings":"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","sources":["components/SAMLAuthModal.js","components/HelpButton.js","dak/faq/registry/ParameterRegistryService.js","utils/browserBuffer.js","dak/faq/storage/Storage.js","dak/faq/engine/FAQExecutionEngine.js","dak/faq/components/FAQAccordion.js","components/DAKDashboard.js","dak/faq/types/QuestionDefinition.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport logger from '../utils/logger';\nimport './SAMLAuthModal.css';\n\n/**\n * SAMLAuthModal Component\n * \n * Modal dialog that guides users through GitHub SAML SSO authorization process.\n * Displayed when a Personal Access Token needs SAML SSO authorization for an organization.\n */\nconst SAMLAuthModal = ({ isOpen, onClose, samlInfo }) => {\n  const componentLogger = logger.getLogger('SAMLAuthModal');\n\n  useEffect(() => {\n    if (isOpen && samlInfo) {\n      componentLogger.componentMount({ \n        organization: samlInfo.organization,\n        repository: samlInfo.repository \n      });\n    }\n    return () => {\n      if (isOpen) {\n        componentLogger.componentUnmount();\n      }\n    };\n  }, [componentLogger, isOpen, samlInfo]);\n\n  if (!isOpen || !samlInfo) {\n    return null;\n  }\n\n  const { organization, repository, authorizationUrl } = samlInfo;\n\n  const handleAuthorize = () => {\n    componentLogger.userAction('Authorize SAML clicked', { \n      organization,\n      authorizationUrl \n    });\n    \n    // Open GitHub SAML authorization page in new tab\n    window.open(authorizationUrl, '_blank', 'noopener,noreferrer');\n    \n    // Log instruction for user\n    componentLogger.info('SAML authorization page opened', {\n      organization,\n      instruction: 'User should authorize their PAT on GitHub and then refresh'\n    });\n  };\n\n  const handleClose = () => {\n    componentLogger.userAction('SAML modal closed', { organization });\n    onClose();\n  };\n\n  return (\n    <div \n      className=\"saml-modal-overlay\" \n      onClick={handleClose}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"saml-modal-title\"\n    >\n      <div \n        className=\"saml-modal\" \n        onClick={(e) => e.stopPropagation()}\n        role=\"document\"\n      >\n        <div className=\"saml-modal-header\">\n          <h2 id=\"saml-modal-title\">🔐 SAML SSO Authorization Required</h2>\n          <button \n            onClick={handleClose}\n            className=\"close-button\"\n            aria-label=\"Close\"\n          >\n            ×\n          </button>\n        </div>\n        \n        <div className=\"saml-modal-content\">\n          <div className=\"saml-info-section\">\n            <div className=\"saml-icon\">\n              <span role=\"img\" aria-label=\"lock\">🔒</span>\n            </div>\n            \n            <h3>Organization Access Required</h3>\n            <p className=\"saml-description\">\n              Your Personal Access Token needs SAML SSO authorization to access the{' '}\n              <strong>{organization}</strong> organization{repository ? ` and the ${repository} repository` : ''}.\n            </p>\n          </div>\n\n          <div className=\"saml-steps-section\">\n            <h4>How to authorize your token:</h4>\n            <ol className=\"saml-steps\">\n              <li>\n                <strong>Click \"Authorize on GitHub\"</strong> below to open the authorization page\n              </li>\n              <li>\n                <strong>Review the permissions</strong> requested by the organization\n              </li>\n              <li>\n                <strong>Click \"Authorize\"</strong> to grant your token access\n              </li>\n              <li>\n                <strong>Return to this page</strong> and refresh or try your action again\n              </li>\n            </ol>\n          </div>\n\n          <div className=\"saml-note\">\n            <span className=\"note-icon\">ℹ️</span>\n            <p>\n              This is a GitHub security feature for organizations using SAML SSO.\n              You only need to authorize once per organization per token.\n            </p>\n          </div>\n\n          <div className=\"saml-modal-actions\">\n            <button \n              onClick={handleAuthorize}\n              className=\"saml-authorize-btn\"\n            >\n              🔓 Authorize on GitHub\n            </button>\n            <button \n              onClick={handleClose}\n              className=\"saml-cancel-btn\"\n            >\n              Later\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SAMLAuthModal;\n","import React, { useState } from 'react';\nimport HelpModal from './HelpModal';\nimport useThemeImage from '../hooks/useThemeImage';\n\nconst HelpButton = ({ helpTopic, contextData = {} }) => {\n  const [showHelp, setShowHelp] = useState(false);\n\n  // Theme-aware mascot image\n  const mascotImage = useThemeImage('sgex-mascot.png');\n\n  const handleHelpClick = () => {\n    setShowHelp(true);\n  };\n\n  const handleCloseHelp = () => {\n    setShowHelp(false);\n  };\n\n  return (\n    <>\n      <button \n        className=\"help-button\"\n        onClick={handleHelpClick}\n        title=\"Get Help\"\n        aria-label=\"Get Help\"\n      >\n        <img \n          src={mascotImage} \n          alt=\"SGEX Helper\" \n          className=\"help-mascot-icon\"\n        />\n      </button>\n      \n      {showHelp && (\n        <HelpModal\n          topic={helpTopic}\n          contextData={contextData}\n          onClose={handleCloseHelp}\n        />\n      )}\n    </>\n  );\n};\n\nexport default HelpButton;","/**\n * Parameter registry service for DAK FAQ system\n * Manages parameter definitions and validation\n */\n\nimport yaml from 'js-yaml';\nimport { ParameterDefinition } from '../types/QuestionDefinition.js';\n\nclass ParameterRegistryService {\n  constructor() {\n    this.registry = null;\n    this.loaded = false;\n  }\n\n  /**\n   * Load parameter registry from YAML\n   * @param {string} yamlContent - YAML content as string\n   */\n  loadFromYaml(yamlContent) {\n    try {\n      this.registry = yaml.load(yamlContent);\n      this.loaded = true;\n    } catch (error) {\n      throw new Error(`Failed to parse parameter registry YAML: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get parameters for a specific context\n   * @param {string} level - Question level (dak, component, asset)\n   * @param {string} type - Component or asset type\n   * @returns {ParameterDefinition[]} - Array of parameter definitions\n   */\n  getParameters(level, type = null) {\n    if (!this.loaded || !this.registry) {\n      throw new Error('Parameter registry not loaded');\n    }\n\n    const parameters = [];\n    \n    // Add global defaults\n    if (this.registry.defaults) {\n      for (const [name, config] of Object.entries(this.registry.defaults)) {\n        parameters.push(new ParameterDefinition({\n          name,\n          type: config.type,\n          required: config.required || false,\n          description: config.description || '',\n          defaultValue: config.default || null,\n          validation: config.validation || {}\n        }));\n      }\n    }\n\n    // Add level-specific parameters\n    if (this.registry[level]) {\n      if (type && this.registry[level][type]) {\n        // Type-specific parameters\n        for (const [name, config] of Object.entries(this.registry[level][type])) {\n          parameters.push(new ParameterDefinition({\n            name,\n            ...config\n          }));\n        }\n      } else if (!type) {\n        // All parameters for the level\n        for (const [paramName, config] of Object.entries(this.registry[level])) {\n          if (typeof config === 'object' && config.type) {\n            // Direct parameter definition\n            parameters.push(new ParameterDefinition({\n              name: paramName,\n              ...config\n            }));\n          }\n        }\n      }\n    }\n\n    // Remove duplicates (later definitions override earlier ones)\n    const uniqueParams = new Map();\n    parameters.forEach(param => {\n      uniqueParams.set(param.name, param);\n    });\n\n    return Array.from(uniqueParams.values());\n  }\n\n  /**\n   * Validate parameters against registry\n   * @param {Object} parameters - Parameters to validate\n   * @param {string} level - Question level\n   * @param {string} type - Component or asset type\n   * @returns {Object} - Validation result with normalized parameters and errors\n   */\n  validateParameters(parameters, level, type = null) {\n    const definitions = this.getParameters(level, type);\n    const normalized = {};\n    const errors = [];\n\n    // Check required parameters\n    for (const definition of definitions) {\n      const value = parameters[definition.name];\n      \n      if (definition.required && (value === undefined || value === null)) {\n        errors.push(`Required parameter '${definition.name}' is missing`);\n        continue;\n      }\n\n      // Use default value if not provided\n      const finalValue = value !== undefined ? value : definition.defaultValue;\n      \n      // Type validation\n      if (finalValue !== null && finalValue !== undefined) {\n        const typeError = this.validateParameterType(finalValue, definition);\n        if (typeError) {\n          errors.push(`Parameter '${definition.name}': ${typeError}`);\n          continue;\n        }\n\n        // Custom validation\n        const validationError = this.validateParameterCustom(finalValue, definition);\n        if (validationError) {\n          errors.push(`Parameter '${definition.name}': ${validationError}`);\n          continue;\n        }\n      }\n\n      normalized[definition.name] = finalValue;\n    }\n\n    // Check for unknown parameters\n    for (const paramName of Object.keys(parameters)) {\n      if (!definitions.find(def => def.name === paramName)) {\n        errors.push(`Unknown parameter '${paramName}'`);\n      }\n    }\n\n    return {\n      normalized,\n      errors,\n      isValid: errors.length === 0\n    };\n  }\n\n  /**\n   * Validate parameter type\n   * @param {any} value - Parameter value\n   * @param {ParameterDefinition} definition - Parameter definition\n   * @returns {string|null} - Error message or null if valid\n   */\n  validateParameterType(value, definition) {\n    const expectedType = definition.type;\n    const actualType = typeof value;\n\n    switch (expectedType) {\n      case 'string':\n        if (actualType !== 'string') {\n          return `Expected string, got ${actualType}`;\n        }\n        break;\n      case 'boolean':\n        if (actualType !== 'boolean') {\n          return `Expected boolean, got ${actualType}`;\n        }\n        break;\n      case 'number':\n        if (actualType !== 'number' || isNaN(value)) {\n          return `Expected number, got ${actualType}`;\n        }\n        break;\n      case 'array':\n        if (!Array.isArray(value)) {\n          return `Expected array, got ${actualType}`;\n        }\n        break;\n      case 'object':\n        if (actualType !== 'object' || Array.isArray(value)) {\n          return `Expected object, got ${actualType}`;\n        }\n        break;\n      default:\n        return `Unknown type: ${expectedType}`;\n    }\n\n    return null;\n  }\n\n  /**\n   * Validate parameter against custom rules\n   * @param {any} value - Parameter value\n   * @param {ParameterDefinition} definition - Parameter definition\n   * @returns {string|null} - Error message or null if valid\n   */\n  validateParameterCustom(value, definition) {\n    if (!definition.validation) {\n      return null;\n    }\n\n    const validation = definition.validation;\n\n    // Pattern validation\n    if (validation.pattern && typeof value === 'string') {\n      const regex = new RegExp(validation.pattern);\n      if (!regex.test(value)) {\n        return `Value does not match pattern ${validation.pattern}`;\n      }\n    }\n\n    // Enum validation\n    if (validation.enum && Array.isArray(validation.enum)) {\n      if (!validation.enum.includes(value)) {\n        return `Value must be one of: ${validation.enum.join(', ')}`;\n      }\n    }\n\n    // Length validation\n    if (validation.minLength !== undefined && typeof value === 'string') {\n      if (value.length < validation.minLength) {\n        return `String must be at least ${validation.minLength} characters`;\n      }\n    }\n\n    if (validation.maxLength !== undefined && typeof value === 'string') {\n      if (value.length > validation.maxLength) {\n        return `String must be at most ${validation.maxLength} characters`;\n      }\n    }\n\n    // Numeric range validation\n    if (validation.min !== undefined && typeof value === 'number') {\n      if (value < validation.min) {\n        return `Number must be at least ${validation.min}`;\n      }\n    }\n\n    if (validation.max !== undefined && typeof value === 'number') {\n      if (value > validation.max) {\n        return `Number must be at most ${validation.max}`;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get parameter schema for OpenAPI/JSON Schema generation\n   * @param {string} level - Question level\n   * @param {string} type - Component or asset type\n   * @returns {Object} - JSON Schema object\n   */\n  getParameterSchema(level, type = null) {\n    const definitions = this.getParameters(level, type);\n    const properties = {};\n    const required = [];\n\n    for (const definition of definitions) {\n      const property = {\n        type: definition.type,\n        description: definition.description\n      };\n\n      if (definition.defaultValue !== null) {\n        property.default = definition.defaultValue;\n      }\n\n      if (definition.validation) {\n        Object.assign(property, definition.validation);\n      }\n\n      properties[definition.name] = property;\n\n      if (definition.required) {\n        required.push(definition.name);\n      }\n    }\n\n    return {\n      type: 'object',\n      properties,\n      required\n    };\n  }\n}\n\n// Default registry content\nconst DEFAULT_REGISTRY_YAML = `\ndefaults:\n  repository:\n    type: string\n    required: true\n    description: \"Repository context (always required)\"\n  locale:\n    type: string\n    required: false\n    default: \"en_US\"\n    description: \"Locale for responses\"\n  branch:\n    type: string\n    required: false\n    default: \"main\"\n    description: \"Git branch context\"\n\ndak:\n\ncomponent:\n  businessProcess:\n    componentType:\n      type: string\n      required: true\n      default: \"businessProcess\"\n      description: \"Type of component being analyzed\"\n\nasset:\n  lesson:\n    assetFile:\n      type: string\n      required: true\n      description: \"Relative path to the lesson file\"\n`;\n\n// Singleton instance\nconst parameterRegistryService = new ParameterRegistryService();\n\n// Load default registry\nparameterRegistryService.loadFromYaml(DEFAULT_REGISTRY_YAML);\n\nexport default parameterRegistryService;","/**\n * Browser-compatible Buffer polyfill\n * Provides minimal Buffer-like interface for browser environments\n * Maintains API compatibility with Node.js Buffer while using browser-native operations\n */\n\n/**\n * Simple Buffer-like class for browser environments\n * Wraps string content and provides toString() method for compatibility\n */\nclass BrowserBuffer {\n  constructor(content, encoding = 'utf-8') {\n    if (typeof content === 'string') {\n      this.content = content;\n      this.encoding = encoding;\n    } else {\n      throw new Error('BrowserBuffer only supports string content');\n    }\n  }\n\n  /**\n   * Convert buffer to string with specified encoding\n   * @param {string} encoding - Character encoding (default: utf-8)\n   * @returns {string} - String content\n   */\n  toString(encoding = 'utf-8') {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      console.warn(`BrowserBuffer: Encoding ${encoding} not fully supported, using utf-8`);\n    }\n    return this.content;\n  }\n\n  /**\n   * Get buffer length (character count)\n   */\n  get length() {\n    return this.content.length;\n  }\n\n  /**\n   * Static method to create BrowserBuffer from string\n   * @param {string} content - String content\n   * @param {string} encoding - Character encoding\n   * @returns {BrowserBuffer} - New BrowserBuffer instance\n   */\n  static from(content, encoding = 'utf-8') {\n    return new BrowserBuffer(content, encoding);\n  }\n}\n\n/**\n * Browser-compatible Buffer polyfill\n * Provides Buffer.from() method that works in browser environments\n */\nconst BufferPolyfill = {\n  /**\n   * Create Buffer-like object from string content\n   * @param {string} content - String content\n   * @param {string} encoding - Character encoding\n   * @returns {BrowserBuffer} - Buffer-like object with toString() method\n   */\n  from(content, encoding = 'utf-8') {\n    return BrowserBuffer.from(content, encoding);\n  },\n\n  /**\n   * Check if Buffer is available (always false in browser)\n   */\n  isBuffer(obj) {\n    return obj instanceof BrowserBuffer;\n  }\n};\n\n// Export for use in browser environments\nexport { BrowserBuffer, BufferPolyfill };\nexport default BufferPolyfill;","/**\n * Storage abstraction interface for FAQ questions\n * Provides unified access to file system operations for local repositories\n */\n\nimport BufferPolyfill from '../../../utils/browserBuffer.js';\n\nexport class Storage {\n  /**\n   * Read a file from the repository\n   * @param {string} path - Relative path to the file\n   * @returns {Promise<Buffer>} - File content as Buffer\n   */\n  async readFile(path) {\n    throw new Error('readFile must be implemented by subclass');\n  }\n\n  /**\n   * Check if a file exists\n   * @param {string} path - Relative path to the file\n   * @returns {Promise<boolean>} - Whether the file exists\n   */\n  async fileExists(path) {\n    throw new Error('fileExists must be implemented by subclass');\n  }\n\n  /**\n   * List files matching a pattern\n   * @param {string} pattern - Glob pattern or prefix\n   * @param {Object} options - Options for listing\n   * @returns {Promise<string[]>} - Array of matching file paths\n   */\n  async listFiles(pattern, options = {}) {\n    throw new Error('listFiles must be implemented by subclass');\n  }\n\n  /**\n   * Get file metadata\n   * @param {string} path - Relative path to the file\n   * @returns {Promise<Object>} - File metadata (size, modified, etc.)\n   */\n  async getFileInfo(path) {\n    throw new Error('getFileInfo must be implemented by subclass');\n  }\n}\n\n/**\n * GitHub-based storage implementation\n * Provides access to files in GitHub repositories\n */\nexport class GitHubStorage extends Storage {\n  constructor(githubService, repository, branch = 'main') {\n    super();\n    this.githubService = githubService;\n    this.repository = repository;\n    this.branch = branch;\n    this.cache = new Map();\n  }\n\n  /**\n   * Parse repository string into owner/repo\n   * @param {string} repository - Repository in format \"owner/repo\" or GitHub URL\n   * @returns {Object} - {owner, repo}\n   */\n  parseRepository(repository) {\n    if (typeof repository === 'string') {\n      // Handle GitHub URLs\n      if (repository.includes('github.com')) {\n        const match = repository.match(/github\\.com\\/([^/]+)\\/([^/?#]+)/);\n        if (match) {\n          return { owner: match[1], repo: match[2].replace(/\\.git$/, '') };\n        }\n      }\n      \n      // Handle owner/repo format\n      const parts = repository.split('/');\n      if (parts.length === 2) {\n        return { owner: parts[0], repo: parts[1] };\n      }\n    }\n    \n    throw new Error(`Invalid repository format: ${repository}`);\n  }\n\n  async readFile(path) {\n    const cacheKey = `${this.repository}:${this.branch}:${path}`;\n    if (this.cache.has(cacheKey)) {\n      console.log(`GitHubStorage.readFile: Cache hit for ${path}`);\n      return this.cache.get(cacheKey);\n    }\n\n    try {\n      const { owner, repo } = this.parseRepository(this.repository);\n      console.log(`GitHubStorage.readFile: Reading file ${path} from ${owner}/${repo} (branch: ${this.branch})`);\n      \n      console.log(`GitHubStorage.readFile: About to call githubService.getFileContent...`);\n      const contentString = await this.githubService.getFileContent(owner, repo, path, this.branch);\n      console.log(`GitHubStorage.readFile: ✅ GitHub service call completed successfully`);\n      console.log(`GitHubStorage.readFile: Received content - type: ${typeof contentString}, length: ${contentString?.length || 'undefined'}`);\n      \n      // Validate that we got a string\n      if (typeof contentString !== 'string') {\n        console.error(`GitHubStorage.readFile: ❌ Expected string but got ${typeof contentString}:`, contentString);\n        throw new Error(`GitHub service returned invalid content type: ${typeof contentString}`);\n      }\n      \n      if (contentString.length === 0) {\n        console.warn(`GitHubStorage.readFile: ⚠️ Content string is empty for ${path}`);\n      }\n      \n      // Convert the decoded string content to browser-compatible Buffer\n      // (githubService.getFileContent already decodes the base64 content to a string)\n      console.log(`GitHubStorage.readFile: Converting string to browser-compatible Buffer...`);\n      const content = BufferPolyfill.from(contentString, 'utf-8');\n      console.log(`GitHubStorage.readFile: ✅ Buffer-like object created successfully, size: ${content.length} bytes`);\n      \n      this.cache.set(cacheKey, content);\n      console.log(`GitHubStorage.readFile: ✅ Successfully read file ${path}, cached and returning content`);\n      console.log(`GitHubStorage.readFile: Content preview (first 200 chars):`, contentString.substring(0, 200));\n      return content;\n    } catch (error) {\n      console.error(`GitHubStorage.readFile: ❌ Failed to read file ${path}:`, error);\n      console.error(`GitHubStorage.readFile: Error details:`, {\n        message: error.message,\n        name: error.name,\n        stack: error.stack?.substring(0, 500)\n      });\n      throw new Error(`Failed to read file ${path}: ${error.message}`);\n    }\n  }\n\n  async fileExists(path) {\n    try {\n      console.log(`GitHubStorage.fileExists: Checking if file exists: ${path}`);\n      console.log(`GitHubStorage.fileExists: Repository: ${this.repository}, Branch: ${this.branch}`);\n      \n      // Validate repository format before making API call\n      const { owner, repo } = this.parseRepository(this.repository);\n      console.log(`GitHubStorage.fileExists: Parsed repository - owner: ${owner}, repo: ${repo}`);\n      \n      // Check authentication status\n      if (this.githubService && this.githubService.isAuth) {\n        console.log(`GitHubStorage.fileExists: Authentication status: ${this.githubService.isAuth()}`);\n      } else {\n        console.log(`GitHubStorage.fileExists: GitHub service not available or no auth method`);\n      }\n      \n      console.log(`GitHubStorage.fileExists: About to call readFile...`);\n      const content = await this.readFile(path);\n      console.log(`GitHubStorage.fileExists: readFile completed successfully for ${path}, content size: ${content?.length || 'undefined'}`);\n      console.log(`GitHubStorage.fileExists: File ${path} exists - returning true`);\n      return true;\n    } catch (error) {\n      console.error(`GitHubStorage.fileExists: readFile failed for ${path}:`, error.message);\n      console.error(`GitHubStorage.fileExists: Full error details:`, {\n        name: error.name,\n        message: error.message,\n        stack: error.stack?.substring(0, 300)\n      });\n      console.log(`GitHubStorage.fileExists: File ${path} does not exist - returning false`);\n      return false;\n    }\n  }\n\n  async listFiles(pattern, options = {}) {\n    try {\n      const { owner, repo } = this.parseRepository(this.repository);\n      \n      // For GitHub API, we need to get the repository tree\n      const tree = await this.githubService.getRepositoryTree(owner, repo, this.branch, true);\n      \n      // Filter files based on pattern\n      const files = tree.tree\n        .filter(item => item.type === 'blob')\n        .map(item => item.path);\n\n      // Simple pattern matching (could be enhanced with proper glob support)\n      if (pattern.includes('*') || pattern.includes('?')) {\n        const regexPattern = pattern\n          .replace(/\\./g, '\\\\.')\n          .replace(/\\*/g, '.*')\n          .replace(/\\?/g, '.');\n        const regex = new RegExp(`^${regexPattern}$`);\n        return files.filter(file => regex.test(file));\n      } else {\n        // Prefix matching\n        return files.filter(file => file.startsWith(pattern));\n      }\n    } catch (error) {\n      throw new Error(`Failed to list files: ${error.message}`);\n    }\n  }\n\n  async getFileInfo(path) {\n    try {\n      const { owner, repo } = this.parseRepository(this.repository);\n      const response = await this.githubService.getFileContent(owner, repo, path, this.branch);\n      \n      return {\n        size: response.length || 0, // Use string length since githubService returns decoded string\n        sha: response.sha || 'unknown',\n        path: path,\n        type: 'file',\n        url: `https://github.com/${owner}/${repo}/blob/${this.branch}/${path}`\n      };\n    } catch (error) {\n      throw new Error(`Failed to get file info for ${path}: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Mock storage implementation for browser testing\n * Can be used when no real storage is available\n */\nexport class MockStorage extends Storage {\n  constructor(mockFiles = {}) {\n    super();\n    this.mockFiles = mockFiles;\n  }\n\n  async readFile(path) {\n    if (this.mockFiles[path]) {\n      return BufferPolyfill.from(this.mockFiles[path], 'utf-8');\n    }\n    throw new Error(`File not found: ${path}`);\n  }\n\n  async fileExists(path) {\n    return this.mockFiles.hasOwnProperty(path);\n  }\n\n  async listFiles(pattern, options = {}) {\n    const files = Object.keys(this.mockFiles);\n    \n    if (pattern.includes('*') || pattern.includes('?')) {\n      const regexPattern = pattern\n        .replace(/\\./g, '\\\\.')\n        .replace(/\\*/g, '.*')\n        .replace(/\\?/g, '.');\n      const regex = new RegExp(`^${regexPattern}$`);\n      return files.filter(file => regex.test(file));\n    } else {\n      return files.filter(file => file.startsWith(pattern));\n    }\n  }\n\n  async getFileInfo(path) {\n    if (this.mockFiles[path]) {\n      return {\n        size: this.mockFiles[path].length,\n        path: path,\n        type: 'file'\n      };\n    }\n    throw new Error(`File not found: ${path}`);\n  }\n}","/**\n * FAQ Execution Engine\n * Manages the execution of FAQ questions and batch processing\n */\n\nimport { QuestionContext, QuestionResult } from '../types/QuestionDefinition.js';\nimport parameterRegistryService from '../registry/ParameterRegistryService.js';\nimport { GitHubStorage } from '../storage/Storage.js';\n\nclass FAQExecutionEngine {\n  constructor() {\n    this.questionRegistry = new Map();\n    this.initialized = false;\n  }\n\n  /**\n   * Initialize the engine with available questions\n   */\n  async initialize() {\n    if (this.initialized) return;\n\n    try {\n      // Import and register all question components\n      await this.loadQuestions();\n      this.initialized = true;\n    } catch (error) {\n      throw new Error(`Failed to initialize FAQ engine: ${error.message}`);\n    }\n  }\n\n  /**\n   * Load all question components from the questions directory\n   */\n  async loadQuestions() {\n    const questions = [\n      // DAK-level questions\n      {\n        id: 'dak-name',\n        module: () => import('../questions/dak/DakNameQuestion.js')\n      },\n      {\n        id: 'dak-version', \n        module: () => import('../questions/dak/DakVersionQuestion.js')\n      },\n      // Component-level questions\n      {\n        id: 'business-process-workflows',\n        module: () => import('../questions/component/businessProcess/BusinessProcessWorkflowsQuestion.js')\n      },\n      // Asset-level questions\n      {\n        id: 'decision-table-inputs',\n        module: () => import('../questions/asset/decisionSupportLogic/DecisionTableInputsQuestion.js')\n      }\n    ];\n\n    for (const questionConfig of questions) {\n      try {\n        const questionModule = await questionConfig.module();\n        \n        if (questionModule.metadata && questionModule.execute) {\n          this.questionRegistry.set(questionConfig.id, {\n            metadata: questionModule.metadata,\n            execute: questionModule.execute,\n            Render: questionModule.Render || null\n          });\n        } else {\n          console.warn(`Question ${questionConfig.id} is missing required exports (metadata, execute)`);\n        }\n      } catch (error) {\n        console.error(`Failed to load question ${questionConfig.id}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Get catalog of all available questions\n   * @param {Object} filters - Optional filters (level, tags, etc.)\n   * @returns {Array} - Array of question metadata\n   */\n  getCatalog(filters = {}) {\n    if (!this.initialized) {\n      throw new Error('FAQ engine not initialized');\n    }\n\n    const questions = Array.from(this.questionRegistry.values()).map(q => q.metadata);\n\n    // Apply filters\n    let filteredQuestions = questions;\n\n    if (filters.level) {\n      filteredQuestions = filteredQuestions.filter(q => q.level === filters.level);\n    }\n\n    if (filters.tags && Array.isArray(filters.tags)) {\n      filteredQuestions = filteredQuestions.filter(q => \n        filters.tags.some(tag => q.tags.includes(tag))\n      );\n    }\n\n    if (filters.componentType) {\n      filteredQuestions = filteredQuestions.filter(q => \n        !q.componentTypes || q.componentTypes.length === 0 || q.componentTypes.includes(filters.componentType)\n      );\n    }\n\n    if (filters.assetType) {\n      filteredQuestions = filteredQuestions.filter(q => \n        !q.assetTypes || q.assetTypes.length === 0 || q.assetTypes.includes(filters.assetType)\n      );\n    }\n\n    return filteredQuestions;\n  }\n\n  /**\n   * Execute a batch of FAQ questions\n   * @param {Array} requests - Array of question requests\n   * @param {Object} context - Execution context (githubService, etc.)\n   * @returns {Promise<Array>} - Array of execution results\n   */\n  async executeBatch(requests, context = {}) {\n    if (!this.initialized) {\n      await this.initialize();\n    }\n\n    const results = [];\n\n    for (const request of requests) {\n      try {\n        const result = await this.executeQuestion(request, context);\n        results.push({\n          questionId: request.questionId,\n          success: true,\n          result\n        });\n      } catch (error) {\n        results.push({\n          questionId: request.questionId,\n          success: false,\n          error: error.message,\n          result: new QuestionResult({\n            structured: {},\n            narrative: this.getErrorNarrative(request.locale || 'en_US', error.message),\n            errors: [error.message],\n            meta: {}\n          })\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Execute a single FAQ question\n   * @param {Object} request - Question request\n   * @param {Object} context - Execution context\n   * @returns {Promise<QuestionResult>} - Question result\n   */\n  async executeQuestion(request, context = {}) {\n    const { questionId, parameters = {}, assetFiles = [] } = request;\n\n    // Get question from registry\n    const question = this.questionRegistry.get(questionId);\n    if (!question) {\n      throw new Error(`Question not found: ${questionId}`);\n    }\n\n    // Handle template questions (asset-level questions that need to be instantiated per asset)\n    if (question.metadata.isTemplate && assetFiles.length > 0) {\n      return await this.executeTemplateQuestion(question, request, context);\n    }\n\n    // Validate and normalize parameters\n    const validation = parameterRegistryService.validateParameters(\n      parameters,\n      question.metadata.level,\n      this.getQuestionType(question.metadata)\n    );\n\n    if (!validation.isValid) {\n      throw new Error(`Parameter validation failed: ${validation.errors.join(', ')}`);\n    }\n\n    // Create storage interface\n    const storage = this.createStorage(validation.normalized, context);\n\n    // Create execution context\n    const executionContext = new QuestionContext({\n      repository: validation.normalized.repository,\n      locale: validation.normalized.locale || 'en_US',\n      branch: validation.normalized.branch || 'main',\n      user: context.user || null,\n      assetFile: validation.normalized.assetFile || null,\n      componentType: validation.normalized.componentType || null,\n      storage\n    });\n\n    // Execute the question\n    const input = {\n      ...validation.normalized,\n      storage,\n      context: executionContext\n    };\n\n    return await question.execute(input);\n  }\n\n  /**\n   * Execute template question for multiple assets\n   * @param {Object} question - Question definition\n   * @param {Object} request - Original request\n   * @param {Object} context - Execution context\n   * @returns {Promise<QuestionResult>} - Aggregated result\n   */\n  async executeTemplateQuestion(question, request, context) {\n    const { parameters = {}, assetFiles = [] } = request;\n    const results = [];\n    const allWarnings = [];\n    const allErrors = [];\n\n    for (const assetFile of assetFiles) {\n      try {\n        const assetParameters = { ...parameters, assetFile };\n        \n        // Validate parameters for this asset\n        const validation = parameterRegistryService.validateParameters(\n          assetParameters,\n          question.metadata.level,\n          this.getQuestionType(question.metadata)\n        );\n\n        if (!validation.isValid) {\n          allErrors.push(`Asset ${assetFile}: ${validation.errors.join(', ')}`);\n          continue;\n        }\n\n        // Create storage and context for this asset\n        const storage = this.createStorage(validation.normalized, context);\n        const executionContext = new QuestionContext({\n          repository: validation.normalized.repository,\n          locale: validation.normalized.locale || 'en_US',\n          branch: validation.normalized.branch || 'main',\n          user: context.user || null,\n          assetFile: assetFile,\n          componentType: validation.normalized.componentType || null,\n          storage\n        });\n\n        const input = {\n          ...validation.normalized,\n          storage,\n          context: executionContext\n        };\n\n        const result = await question.execute(input);\n        results.push({\n          assetFile,\n          result\n        });\n\n        // Collect warnings and errors\n        if (result.warnings) allWarnings.push(...result.warnings);\n        if (result.errors) allErrors.push(...result.errors);\n\n      } catch (error) {\n        allErrors.push(`Asset ${assetFile}: ${error.message}`);\n      }\n    }\n\n    // Aggregate results\n    const aggregatedStructured = {\n      assets: results.map(r => ({\n        assetFile: r.assetFile,\n        ...r.result.structured\n      })),\n      summary: {\n        totalAssets: assetFiles.length,\n        successfulAssets: results.length,\n        failedAssets: assetFiles.length - results.length\n      }\n    };\n\n    const aggregatedNarrative = this.aggregateNarratives(results, request.locale || 'en_US');\n\n    return new QuestionResult({\n      structured: aggregatedStructured,\n      narrative: aggregatedNarrative,\n      warnings: allWarnings,\n      errors: allErrors,\n      meta: {\n        isAggregated: true,\n        questionId: question.metadata.id,\n        assetCount: assetFiles.length\n      }\n    });\n  }\n\n  /**\n   * Create storage interface based on parameters and context\n   * @param {Object} parameters - Validated parameters\n   * @param {Object} context - Execution context\n   * @returns {Storage} - Storage interface\n   */\n  createStorage(parameters, context) {\n    if (context.githubService) {\n      // Use GitHub storage for web application\n      return new GitHubStorage(\n        context.githubService,\n        parameters.repository,\n        parameters.branch || 'main'\n      );\n    } else {\n      // This would be implemented for MCP server with local storage\n      throw new Error('Local storage not implemented in web context');\n    }\n  }\n\n  /**\n   * Get question type for parameter validation\n   * @param {Object} metadata - Question metadata\n   * @returns {string} - Question type\n   */\n  getQuestionType(metadata) {\n    if (metadata.componentTypes && metadata.componentTypes.length > 0) {\n      return metadata.componentTypes[0];\n    }\n    if (metadata.assetTypes && metadata.assetTypes.length > 0) {\n      return metadata.assetTypes[0];\n    }\n    return null;\n  }\n\n  /**\n   * Aggregate narratives from multiple results\n   * @param {Array} results - Array of asset results\n   * @param {string} locale - Locale for output\n   * @returns {string} - Aggregated narrative HTML\n   */\n  aggregateNarratives(results, locale) {\n    if (results.length === 0) {\n      return `<h4>No Results</h4><p>No assets were processed successfully.</p>`;\n    }\n\n    let html = `<h4>Asset Analysis Results</h4>`;\n    html += `<p>Processed ${results.length} asset(s):</p>`;\n    html += `<ul>`;\n\n    for (const { assetFile, result } of results) {\n      html += `<li><strong>${assetFile}</strong>`;\n      if (result.errors && result.errors.length > 0) {\n        html += ` <span class=\"error\">(${result.errors.length} error(s))</span>`;\n      } else if (result.warnings && result.warnings.length > 0) {\n        html += ` <span class=\"warning\">(${result.warnings.length} warning(s))</span>`;\n      } else {\n        html += ` <span class=\"success\">✓</span>`;\n      }\n      html += `</li>`;\n    }\n\n    html += `</ul>`;\n    return html;\n  }\n\n  /**\n   * Get error narrative\n   * @param {string} locale - Locale for error message\n   * @param {string} error - Error message\n   * @returns {string} - Error narrative HTML\n   */\n  getErrorNarrative(locale, error) {\n    const errorMessages = {\n      en_US: `<h4>Error</h4><p class=\"error\">An error occurred while executing the question: ${error}</p>`,\n      fr_FR: `<h4>Erreur</h4><p class=\"error\">Une erreur s'est produite lors de l'exécution de la question: ${error}</p>`,\n      es_ES: `<h4>Error</h4><p class=\"error\">Ocurrió un error al ejecutar la pregunta: ${error}</p>`\n    };\n\n    return errorMessages[locale] || errorMessages['en_US'];\n  }\n\n  /**\n   * Normalize locale string\n   * @param {string} locale - Input locale\n   * @returns {string} - Normalized locale\n   */\n  normalizeLocale(locale) {\n    if (!locale) return 'en_US';\n    \n    // Handle common locale formats\n    const normalized = locale.replace('-', '_');\n    \n    // Map to supported locales\n    const supportedLocales = ['en_US', 'fr_FR', 'es_ES', 'ar_AR', 'zh_CN', 'ru_RU'];\n    \n    if (supportedLocales.includes(normalized)) {\n      return normalized;\n    }\n    \n    // Try base language\n    const baseLanguage = normalized.split('_')[0];\n    const baseLocaleMap = {\n      'en': 'en_US',\n      'fr': 'fr_FR', \n      'es': 'es_ES',\n      'ar': 'ar_AR',\n      'zh': 'zh_CN',\n      'ru': 'ru_RU'\n    };\n    \n    return baseLocaleMap[baseLanguage] || 'en_US';\n  }\n}\n\n// Singleton instance\nconst faqExecutionEngine = new FAQExecutionEngine();\n\nexport default faqExecutionEngine;","/**\n * FAQ Accordion Component\n * Displays FAQ questions in an expandable accordion format\n * Questions are only executed when the user expands them\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport faqExecutionEngine from '../engine/FAQExecutionEngine.js';\nimport DOMPurify from 'dompurify';\nimport './FAQAccordion.css';\n\nconst FAQAccordion = ({ \n  repository,\n  branch = 'main',\n  githubService,\n  filters = {},\n  className = ''\n}) => {\n  const { t, i18n } = useTranslation();\n  const [questions, setQuestions] = useState([]);\n  const [expandedQuestions, setExpandedQuestions] = useState(new Set());\n  const [questionResults, setQuestionResults] = useState(new Map());\n  const [loadingQuestions, setLoadingQuestions] = useState(new Set());\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load available questions\n  useEffect(() => {\n    const loadQuestions = async () => {\n      try {\n        setLoading(true);\n        await faqExecutionEngine.initialize();\n        const availableQuestions = faqExecutionEngine.getCatalog(filters);\n        setQuestions(availableQuestions);\n        setError(null);\n      } catch (err) {\n        console.error('Failed to load FAQ questions:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadQuestions();\n  }, [filters]);\n\n  // Toggle question expansion\n  const toggleQuestion = async (questionId) => {\n    const newExpanded = new Set(expandedQuestions);\n    \n    if (expandedQuestions.has(questionId)) {\n      // Collapse question\n      newExpanded.delete(questionId);\n    } else {\n      // Expand question and execute if not already executed\n      newExpanded.add(questionId);\n      \n      if (!questionResults.has(questionId)) {\n        await executeQuestion(questionId);\n      }\n    }\n    \n    setExpandedQuestions(newExpanded);\n  };\n\n  // Execute a specific question\n  const executeQuestion = async (questionId) => {\n    if (!githubService || !repository) {\n      return;\n    }\n\n    setLoadingQuestions(prev => new Set(prev).add(questionId));\n\n    try {\n      // Prepare request parameters\n      const request = {\n        questionId,\n        parameters: {\n          repository,\n          branch,\n          locale: i18n.language.replace('-', '_') || 'en_US'\n        }\n      };\n\n      // Execute question\n      const context = { githubService };\n      const result = await faqExecutionEngine.executeQuestion(request, context);\n      \n      setQuestionResults(prev => new Map(prev).set(questionId, result));\n    } catch (err) {\n      console.error(`Failed to execute question ${questionId}:`, err);\n      setQuestionResults(prev => new Map(prev).set(questionId, {\n        structured: {},\n        narrative: `<p class=\"error\">Error: ${err.message}</p>`,\n        errors: [err.message],\n        warnings: [],\n        meta: {}\n      }));\n    } finally {\n      setLoadingQuestions(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(questionId);\n        return newSet;\n      });\n    }\n  };\n\n  // Retry execution for a question\n  const retryQuestion = async (questionId) => {\n    setQuestionResults(prev => {\n      const newMap = new Map(prev);\n      newMap.delete(questionId);\n      return newMap;\n    });\n    await executeQuestion(questionId);\n  };\n\n  // Sanitize HTML content\n  const sanitizeHTML = (html) => {\n    return DOMPurify.sanitize(html, {\n      ALLOWED_TAGS: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'div', 'span', 'ul', 'ol', 'li', 'strong', 'em', 'code', 'pre', 'time', 'small'],\n      ALLOWED_ATTR: ['class', 'datetime']\n    });\n  };\n\n  // Render question result\n  const renderQuestionResult = (questionId) => {\n    const result = questionResults.get(questionId);\n    const isLoading = loadingQuestions.has(questionId);\n\n    if (isLoading) {\n      return (\n        <div className=\"faq-answer loading\">\n          <div className=\"faq-loading-spinner\"></div>\n          <p>{t('dak.faq.loading')}</p>\n        </div>\n      );\n    }\n\n    if (!result) {\n      return (\n        <div className=\"faq-answer empty\">\n          <p>{t('dak.faq.no_data')}</p>\n        </div>\n      );\n    }\n\n    if (result.errors && result.errors.length > 0) {\n      return (\n        <div className=\"faq-answer error\">\n          <div \n            className=\"faq-narrative\"\n            dangerouslySetInnerHTML={{ __html: sanitizeHTML(result.narrative || '') }}\n          />\n          <div className=\"faq-messages\">\n            {result.errors.map((error, index) => (\n              <div key={`error-${index}`} className=\"faq-message faq-error\">\n                <span className=\"faq-message-icon\">⚠️</span>\n                {error}\n              </div>\n            ))}\n          </div>\n          <button \n            onClick={() => retryQuestion(questionId)} \n            className=\"faq-retry-button\"\n          >\n            {t('dak.faq.retry')}\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"faq-answer success\">\n        <div \n          className=\"faq-narrative\"\n          dangerouslySetInnerHTML={{ __html: sanitizeHTML(result.narrative || '') }}\n        />\n        {result.warnings && result.warnings.length > 0 && (\n          <div className=\"faq-messages\">\n            {result.warnings.map((warning, index) => (\n              <div key={`warning-${index}`} className=\"faq-message faq-warning\">\n                <span className=\"faq-message-icon\">⚠️</span>\n                {warning}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className={`faq-accordion loading ${className}`}>\n        <div className=\"faq-loading\">\n          <div className=\"loading-spinner\"></div>\n          <p>{t('dak.faq.loading_questions')}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`faq-accordion error ${className}`}>\n        <div className=\"faq-error\">\n          <h4>{t('dak.faq.error_title')}</h4>\n          <p>{error}</p>\n          <button onClick={() => window.location.reload()} className=\"btn-secondary\">\n            {t('common.retry')}\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (questions.length === 0) {\n    return (\n      <div className={`faq-accordion empty ${className}`}>\n        <div className=\"faq-empty\">\n          <h4>{t('dak.faq.no_questions_title')}</h4>\n          <p>{t('dak.faq.no_questions_message')}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`faq-accordion ${className}`}>\n      <div className=\"faq-accordion-header\">\n        <h4>{t('dak.faq.available_questions', { count: questions.length })}</h4>\n        <p>{t('dak.faq.accordion_description')}</p>\n      </div>\n      \n      <div className=\"faq-accordion-list\">\n        {questions.map((question) => {\n          const isExpanded = expandedQuestions.has(question.id);\n          const isLoading = loadingQuestions.has(question.id);\n          \n          return (\n            <div \n              key={question.id} \n              className={`faq-accordion-item ${isExpanded ? 'expanded' : ''} ${isLoading ? 'loading' : ''}`}\n            >\n              <button\n                className=\"faq-accordion-toggle\"\n                onClick={() => toggleQuestion(question.id)}\n                aria-expanded={isExpanded}\n                aria-controls={`faq-content-${question.id}`}\n              >\n                <div className=\"faq-question-info\">\n                  <h5 className=\"faq-question-title\">{question.title}</h5>\n                  <p className=\"faq-question-description\">{question.description}</p>\n                  <div className=\"faq-question-meta\">\n                    <span className=\"faq-level\">{question.level}</span>\n                    {question.tags && question.tags.slice(0, 3).map(tag => (\n                      <span key={tag} className=\"faq-tag\">{tag}</span>\n                    ))}\n                  </div>\n                </div>\n                <div className=\"faq-accordion-icon\">\n                  {isLoading ? (\n                    <div className=\"faq-loading-icon\"></div>\n                  ) : (\n                    <span className={`faq-chevron ${isExpanded ? 'rotated' : ''}`}>\n                      ▼\n                    </span>\n                  )}\n                </div>\n              </button>\n              \n              {isExpanded && (\n                <div \n                  id={`faq-content-${question.id}`}\n                  className=\"faq-accordion-content\"\n                >\n                  {renderQuestionResult(question.id)}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default FAQAccordion;","import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport githubService from '../services/githubService';\nimport dakValidationService from '../services/dakValidationService';\nimport branchContextService from '../services/branchContextService';\nimport samlAuthService from '../services/samlAuthService';\nimport HelpButton from './HelpButton';\nimport DAKStatusBox from './DAKStatusBox';\nimport Publications from './Publications';\nimport ForkStatusBar from './ForkStatusBar';\nimport SAMLAuthModal from './SAMLAuthModal';\nimport { PageLayout, usePage } from './framework';\nimport { handleNavigationClick } from '../utils/navigationUtils';\nimport useThemeImage from '../hooks/useThemeImage';\nimport FAQAccordion from '../dak/faq/components/FAQAccordion.js';\nimport { ALT_TEXT_KEYS, getAltText } from '../utils/imageAltTextHelper';\nimport repositoryConfig from '../config/repositoryConfig';\n\nconst DAKDashboard = () => {\n  return (\n    <PageLayout pageName=\"dak-dashboard\">\n      <DAKDashboardContent />\n    </PageLayout>\n  );\n};\n\nconst DAKDashboardContent = () => {\n  const { t } = useTranslation();\n  const { profile, repository, branch, navigate, loading, error } = usePage();\n  \n  // Mapping between activeTab states and URL fragments\n  const tabToFragment = {\n    'core': 'components',\n    'publications': 'publishing', \n    'faq': 'dak-faq'\n  };\n  \n  const fragmentToTab = {\n    'components': 'core',\n    'publishing': 'publications',\n    'dak-faq': 'faq'\n  };\n  \n  // Helper function to get initial tab from URL fragment\n  const getInitialTab = () => {\n    const hash = window.location.hash.slice(1); // Remove the '#'\n    return fragmentToTab[hash] || 'core'; // Default to 'core' if no valid fragment\n  };\n  \n  // Theme-aware mascot image for dialog\n  const mascotImage = useThemeImage('sgex-mascot.png');\n  \n  // Dashboard-specific state (PageProvider handles profile/repository loading)\n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n  const [showPermissionDialog, setShowPermissionDialog] = useState(false);\n  const [activeTab, setActiveTab] = useState(getInitialTab); // 'core', 'publications', or 'faq'\n  const [issueCounts, setIssueCounts] = useState({});\n  const [showUserMenu, setShowUserMenu] = useState(false);\n  const [showFAQModal, setShowFAQModal] = useState(false);\n  const [selectedFAQComponent, setSelectedFAQComponent] = useState(null);\n  const [samlModalOpen, setSamlModalOpen] = useState(false);\n  const [samlModalInfo, setSamlModalInfo] = useState(null);\n\n  // Handle Escape key for FAQ modal\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === 'Escape' && showFAQModal) {\n        setShowFAQModal(false);\n      }\n    };\n    if (showFAQModal) {\n      document.addEventListener('keydown', handleEscape);\n      return () => document.removeEventListener('keydown', handleEscape);\n    }\n  }, [showFAQModal]);\n\n  // Use the branch from PageProvider\n  const selectedBranch = branch;\n\n  // Enhanced Component Card component with status badge support\n  const ComponentCard = ({ component, handleComponentClick, t, statusBadge, badgeIcon, badgeColor }) => {\n    const [imageLoaded, setImageLoaded] = useState(false);\n    const [imageError, setImageError] = useState(false);\n    \n    // Use the theme-aware image hook here instead of in the map function\n    const cardImagePath = useThemeImage(component.cardImage);\n\n    const handleImageLoad = () => {\n      setImageLoaded(true);\n      setImageError(false);\n    };\n\n    const handleImageError = () => {\n      setImageError(true);\n      setImageLoaded(false);\n    };\n\n    return (\n      <div \n        className={`component-card ${component.type.toLowerCase()} large-card ${imageLoaded ? 'image-loaded' : ''}`}\n        onClick={(event) => handleComponentClick(event, component)}\n        style={{ '--component-color': component.color }}\n        tabIndex={0}\n        role=\"button\"\n        aria-label={`${component.name} - ${component.description}`}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            handleComponentClick(event, component);\n          }\n        }}\n      >\n        <div className=\"component-main\">\n          <div className=\"component-header-content\">\n            <div className=\"component-header\">\n              <div className=\"component-image-container\">\n                <img \n                  src={cardImagePath}\n                  alt={getAltText(t, ALT_TEXT_KEYS.ICON_DAK_COMPONENT, component.name, { name: component.name })}\n                  className=\"component-card-image\"\n                  onLoad={handleImageLoad}\n                  onError={handleImageError}\n                  style={{ display: imageError ? 'none' : 'block' }}\n                />\n                {/* Fallback icon when image fails to load */}\n                {imageError && (\n                  <div className=\"component-icon\" style={{ color: component.color }}>\n                    {component.icon}\n                  </div>\n                )}\n                \n                {/* Status Badge */}\n                {statusBadge && badgeIcon && (\n                  <div \n                    className=\"component-status-badge\"\n                    style={{ backgroundColor: badgeColor || '#007bff' }}\n                    title={statusBadge}\n                  >\n                    <span className=\"badge-icon\">{badgeIcon}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"component-content\">\n              <h4>\n                {component.name}\n              </h4>\n              <p>\n                {component.description}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"component-meta-section\">\n            <div className=\"component-meta\">\n              <div className=\"file-types\">\n                {component.fileTypes.map((type) => (\n                  <span key={type} className=\"file-type-tag\">{type}</span>\n                ))}\n              </div>\n              <div className=\"file-count\">\n                {component.count} files\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Expandable Status Bar component for other content\n  const StatusBar = ({ title, icon, children, defaultExpanded = false, color = '#007bff' }) => {\n    const [isExpanded, setIsExpanded] = useState(defaultExpanded);\n    \n    return (\n      <div className={`status-bar ${isExpanded ? 'expanded' : 'collapsed'}`}>\n        <button \n          className=\"status-bar-header\" \n          onClick={() => setIsExpanded(!isExpanded)}\n          style={{ backgroundColor: color }}\n          type=\"button\"\n          aria-expanded={isExpanded}\n        >\n          <div className=\"status-bar-title\">\n            <span className=\"status-bar-icon\">{icon}</span>\n            <span className=\"status-bar-text\">{title}</span>\n          </div>\n          <span className={`status-bar-chevron ${isExpanded ? 'expanded' : ''}`}>▼</span>\n        </button>\n        {isExpanded && (\n          <div className=\"status-bar-content\">\n            {children}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Initialize selected branch from session context\n  useEffect(() => {\n    if (repository) {\n      const storedBranch = branchContextService.getSelectedBranch(repository);\n      if (storedBranch) {\n        // Branch is managed by PageProvider, this is just for backward compatibility\n      } else {\n        // Set a default branch in the branch context service\n        const defaultBranch = repository.default_branch || 'main';\n        branchContextService.setSelectedBranch(repository, defaultBranch);\n      }\n    }\n  }, [repository]);\n\n  // Register SAML modal callback on mount\n  useEffect(() => {\n    samlAuthService.registerModalCallback((samlInfo) => {\n      setSamlModalInfo(samlInfo);\n      setSamlModalOpen(true);\n    });\n  }, []);\n\n  // Load issue counts for repository\n  const loadIssueCounts = async () => {\n    if (!repository) return;\n    \n    try {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      \n      // Get all issues (includes pull requests in GitHub API)\n      const issues = await githubService.getIssues(owner, repoName, {\n        state: 'all',\n        per_page: 100\n      });\n      \n      // Filter out pull requests to get actual issues\n      const actualIssues = issues.filter(issue => !issue.pull_request);\n      \n      // Count issues by state\n      const openIssues = actualIssues.filter(issue => issue.state === 'open').length;\n      const closedIssues = actualIssues.filter(issue => issue.state === 'closed').length;\n      \n      setIssueCounts({\n        total: actualIssues.length,\n        open: openIssues,\n        closed: closedIssues\n      });\n    } catch (err) {\n      console.warn('Could not load issue counts:', err);\n      setIssueCounts({ total: 0, open: 0, closed: 0 });\n    }\n  };\n\n  // Load issue counts when repository changes\n  useEffect(() => {\n    if (repository && !loading) {\n      loadIssueCounts();\n    }\n  }, [repository, loading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Check write permissions on mount\n  useEffect(() => {\n    const checkPermissions = async () => {\n      if (repository && profile) {\n        try {\n          const writeAccess = await githubService.checkRepositoryWritePermissions(\n            repository.owner?.login || repository.full_name.split('/')[0],\n            repository.name\n          );\n          setHasWriteAccess(writeAccess);\n        } catch (error) {\n          console.warn('Could not check write permissions:', error);\n          setHasWriteAccess(false);\n        }\n      }\n    };\n\n    checkPermissions();\n  }, [repository, profile]);\n\n  // Close user menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (showUserMenu && !event.target.closest('.user-menu-container')) {\n        setShowUserMenu(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showUserMenu]);\n\n  // Update URL fragment when activeTab changes (only when we have valid data)\n  useEffect(() => {\n    // Only set hash if we have valid profile and repository data, and we're not loading/error\n    if (!loading && !error && profile && repository) {\n      const fragment = tabToFragment[activeTab];\n      if (fragment) {\n        window.location.hash = fragment;\n      }\n    }\n  }, [activeTab, tabToFragment, loading, error, profile, repository]);\n\n  // Listen for hash changes to sync tab state with URL (only when we have valid data)\n  useEffect(() => {\n    // Only listen for hash changes if we have valid profile and repository data\n    if (!loading && !error && profile && repository) {\n      const handleHashChange = () => {\n        const hash = window.location.hash.slice(1);\n        const tab = fragmentToTab[hash];\n        if (tab && tab !== activeTab) {\n          setActiveTab(tab);\n        }\n      };\n\n      window.addEventListener('hashchange', handleHashChange);\n      return () => window.removeEventListener('hashchange', handleHashChange);\n    }\n  }, [activeTab, fragmentToTab, loading, error, profile, repository]);\n\n\n\n  // Define the 9 core DAK components based on WHO SMART Guidelines documentation\n  const coreDAKComponents = [\n    {\n      id: 'health-interventions',\n      name: t('dak.healthInterventions'),\n      description: 'Clinical guidelines and health intervention specifications that define evidence-based care recommendations',\n      icon: '📖',\n      cardImage: 'dashboard/dak_interventions.png',\n      type: 'L2',\n      color: '#0078d4',\n      fileTypes: ['IRIS', 'Publication'],\n      count: 5,\n      editor: 'Publication reference manager with IRIS integration'\n    },\n    {\n      id: 'generic-personas',\n      name: t('dak.genericPersonas'),\n      description: 'Standardized user roles and actor definitions that represent different types of healthcare workers and patients',\n      icon: '👥',\n      cardImage: 'dashboard/dak_personas.png',\n      type: 'L2',\n      color: '#107c10',\n      fileTypes: ['Actor', 'Role'],\n      count: 8,\n      editor: 'Persona definition editor with role-based access specifications'\n    },\n    {\n      id: 'user-scenarios',\n      name: t('dak.userScenarios'),\n      description: 'Narrative descriptions of how different personas interact with the system in specific healthcare contexts',\n      icon: '📝',\n      cardImage: 'dashboard/dak_user_scenarios.png',\n      type: 'L2',\n      color: '#881798',\n      fileTypes: ['Narrative', 'Use Case'],\n      count: 12,\n      editor: 'Scenario editor with workflow visualization'\n    },\n    {\n      id: 'business-processes',\n      name: t('dak.businessProcesses'),\n      description: 'BPMN workflows and business process definitions that model clinical workflows and care pathways',\n      icon: '🔄',\n      cardImage: 'dashboard/dak_business_processes.png',\n      type: 'L2',\n      color: '#d13438',\n      fileTypes: ['BPMN', 'XML'],\n      count: 15,\n      editor: 'Graphical BPMN editor with SVG visualization'\n    },\n    {\n      id: 'core-data-elements',\n      name: t('dak.coreDataElements'),\n      description: 'Essential data structures and terminology needed for clinical data capture and exchange (includes Terminology Services via OCL and Product Master Data via PCMT)',\n      icon: '🗃️',\n      cardImage: 'dashboard/dak_core_data_elements.png',\n      type: 'L2',\n      color: '#ff8c00',\n      fileTypes: ['OCL', 'Concept', 'PCMT', 'Product'],\n      count: issueCounts.total || 89,\n      editor: 'Data element editor with OCL and PCMT integration'\n    },\n    {\n      id: 'decision-support',\n      name: t('dak.decisionSupportLogic'),\n      description: 'DMN decision tables and clinical decision support rules that encode clinical logic',\n      icon: '🎯',\n      cardImage: 'dashboard/dak_decision_support_logic.png',\n      type: 'L2',\n      color: '#00bcf2',\n      fileTypes: ['DMN', 'XML'],\n      count: 24,\n      editor: 'DMN decision table editor with validation'\n    },\n    {\n      id: 'program-indicators',\n      name: t('dak.programIndicators'),\n      description: 'Performance indicators and measurement definitions for monitoring and evaluation',\n      icon: '📊',\n      cardImage: 'dashboard/dak_indicators.png',\n      type: 'L2',\n      color: '#498205',\n      fileTypes: ['Measure', 'Logic'],\n      count: 18,\n      editor: 'Indicator definition editor with measurement logic'\n    },\n    {\n      id: 'functional-requirements',\n      name: t('dak.requirements'),\n      description: 'System requirements specifications that define capabilities and constraints',\n      icon: '⚙️',\n      cardImage: 'dashboard/dak_requirements.png',\n      type: 'L2',\n      color: '#6b69d6',\n      fileTypes: ['Requirements', 'Specification'],\n      count: 32,\n      editor: 'Requirements editor with structured templates'\n    },\n    {\n      id: 'test-scenarios',\n      name: t('dak.testScenarios') || 'Test Scenarios',\n      description: 'Feature files and test scenarios for validating the DAK implementation',\n      icon: '🧪',\n      cardImage: 'dashboard/dak_testing.png',\n      type: 'L2',\n      color: '#8b5cf6',\n      fileTypes: ['Feature', 'Test'],\n      count: 0,\n      editor: 'Testing viewer with feature file browser'\n    }\n  ];\n\n\n  const handleComponentClick = (event, component) => {\n    const navigationState = {\n      profile,\n      repository,\n      component,\n      selectedBranch\n    };\n    \n    // Handle publication tool clicks\n    if (component.type === 'Tool' && activeTab === 'publications') {\n      handlePublicationToolClick(component);\n      return;\n    }\n    \n    // Handle FAQ tool clicks\n    if (component.type === 'Tool' && activeTab === 'faq') {\n      handleFAQToolClick(component);\n      return;\n    }\n    \n    // For decision-support, always navigate to view page (no permission check needed)\n    if (component.id === 'decision-support') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/decision-support-logic/${owner}/${repoName}/${selectedBranch}`\n        : `/decision-support-logic/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For business processes, navigate to selection page without permission check\n    if (component.id === 'business-processes') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/business-process-selection/${owner}/${repoName}/${selectedBranch}`\n        : `/business-process-selection/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n\n\n    // For health-interventions (WHO Digital Library), allow access in read-only mode\n    if (component.id === 'health-interventions') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/health-interventions/${owner}/${repoName}/${selectedBranch}`\n        : `/health-interventions/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For core-data-elements (Component 2 Core Data Dictionary), navigate to viewer\n    if (component.id === 'core-data-elements') {\n      const owner = profile?.login || repository?.owner?.login || repository?.full_name?.split('/')[0];\n      const repoName = repository?.name;\n      const branchName = selectedBranch;\n      \n      const viewerPath = branchName ? \n        `/core-data-dictionary-viewer/${owner}/${repoName}/${branchName}` :\n        `/core-data-dictionary-viewer/${owner}/${repoName}`;\n        \n      handleNavigationClick(event, viewerPath, navigate, navigationState);\n      return;\n    }\n\n\n\n    // For generic-personas, navigate to actor editor\n    if (component.id === 'generic-personas') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/actor-editor/${owner}/${repoName}/${selectedBranch}`\n        : `/actor-editor/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For test-scenarios, navigate to testing viewer\n    if (component.id === 'test-scenarios') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/testing-viewer/${owner}/${repoName}/${selectedBranch}`\n        : `/testing-viewer/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For other components, check permissions before proceeding\n    if (!hasWriteAccess) {\n      // If command-click, still show permission dialog instead of opening new tab\n      // since the user needs to authenticate first\n      setShowPermissionDialog(true);\n      return;\n    }\n\n    // Navigate to component-specific routes for other components\n    const owner = repository.owner?.login || repository.full_name.split('/')[0];\n    const repoName = repository.name;\n    const path = selectedBranch \n      ? `/${component.id}/${owner}/${repoName}/${selectedBranch}`\n      : `/${component.id}/${owner}/${repoName}`;\n    \n    handleNavigationClick(event, path, navigate, navigationState);\n  };\n\n  // Handle publication tool clicks\n  const handlePublicationToolClick = (component) => {\n    // For now, just show which tool was clicked - can be expanded later\n    console.log('Publication tool clicked:', component.name);\n    // TODO: Implement specific handlers for each publication tool\n  };\n\n  // Handle FAQ tool clicks  \n  const handleFAQToolClick = (component) => {\n    // For now, just show which tool was clicked - can be expanded later\n    console.log('FAQ tool clicked:', component.name);\n    // TODO: Implement specific handlers for each FAQ tool\n  };\n\n  // Handle FAQ component clicks (for DAK components in FAQ tab)\n  const handleFAQComponentClick = (event, component) => {\n    setSelectedFAQComponent(component);\n    setShowFAQModal(true);\n  };\n\n\n\n  if (loading) {\n    return (\n      <div className=\"dak-dashboard loading-state\">\n        <div className=\"loading-content\">\n          <h2>Loading Dashboard...</h2>\n          <p>Fetching repository and user data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dak-dashboard error-state\">\n        <div className=\"error-content\">\n          <h2>{t('dashboard.errorLoading')}</h2>\n          <p>{error}</p>\n          <div className=\"error-actions\">\n            <button onClick={() => navigate('/')} className=\"action-btn primary\">\n              {t('navigation.home')}\n            </button>\n            <button onClick={() => window.location.reload()} className=\"action-btn secondary\">\n              {t('common.retry')}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!profile || !repository) {\n    navigate('/');\n    return <div>Redirecting...</div>;\n  }\n\n  return (\n    <div className=\"dak-dashboard\">\n      <div className=\"dashboard-content\">\n        <div className=\"dashboard-main\">\n          <div className=\"dashboard-intro\">\n            <h2>{t('dak.components')}</h2>\n            <p>\n              Select a component to edit content for <strong>{repository.name}</strong>\n              {selectedBranch && (\n                <span> on branch <code className=\"branch-display\">{selectedBranch}</code></span>\n              )}. \n              Components are organized according to the WHO SMART Guidelines framework.\n            </p>\n          </div>\n\n          {/* Fork Status Bar - shows forks of sgex repository */}\n          <ForkStatusBar \n            profile={profile}\n            repository={repository}\n            selectedBranch={selectedBranch}\n          />\n\n\n\n          {/* Tab Navigation - Status Bar Style */}\n          <div className=\"tab-navigation-statusbar\">\n            <button \n              className={`tab-button-compact ${activeTab === 'core' ? 'active' : ''}`}\n              onClick={() => setActiveTab('core')}\n            >\n              <span className=\"tab-icon\">⭐</span>\n              <span className=\"tab-text\">9 Core Components</span>\n            </button>\n            <button\n              className={`tab-button-compact ${activeTab === 'publications' ? 'active' : ''}`}\n              onClick={() => setActiveTab('publications')}\n            >\n              <span className=\"tab-icon\">📚</span>\n              <span className=\"tab-text\">Publishing</span>\n            </button>\n            <button\n              className={`tab-button-compact ${activeTab === 'faq' ? 'active' : ''}`}\n              onClick={() => setActiveTab('faq')}\n            >\n              <span className=\"tab-icon\">❓</span>\n              <span className=\"tab-text\">DAK FAQ</span>\n            </button>\n          </div>\n\n          {/* 9 Core DAK Components Section */}\n          {activeTab === 'core' && (\n            <div className=\"components-section active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">{t('dak.components')}</h3>\n                <p className=\"section-description\">\n                  Essential components that form the foundation of any WHO SMART Guidelines Digital Adaptation Kit\n                </p>\n              </div>\n\n              <div className=\"components-grid core-components\">\n                {coreDAKComponents.map((component) => {\n                  // Determine status badge based on user permissions\n                  const badgeIcon = hasWriteAccess ? '✏️' : '👁️';\n                  const statusBadge = hasWriteAccess ? 'Edit' : 'View';\n                  const badgeColor = hasWriteAccess ? '#28a745' : '#007bff';\n                  \n                  return (\n                    <ComponentCard\n                      key={component.id}\n                      component={component}\n                      handleComponentClick={handleComponentClick}\n                      t={t}\n                      statusBadge={statusBadge}\n                      badgeIcon={badgeIcon}\n                      badgeColor={badgeColor}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n\n          {/* Publishing Section */}\n          {activeTab === 'publications' && (\n            <div className=\"components-section publications-section active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">DAK Publication</h3>\n                <p className=\"section-description\">\n                  Generate WHO SMART Guidelines publications for each component with multiple output formats\n                </p>\n              </div>\n\n              {/* Repository Status Bar */}\n              <div className=\"publication-status-bars\">\n                <StatusBar \n                  title=\"Repository Status\" \n                  icon=\"📊\" \n                  defaultExpanded={false}\n                  color=\"#0078d4\"\n                >\n                  {repository && selectedBranch && (\n                    <DAKStatusBox \n                      repository={repository}\n                      selectedBranch={selectedBranch}\n                      hasWriteAccess={hasWriteAccess}\n                      profile={profile}\n                    />\n                  )}\n                  <Publications\n                    profile={profile}\n                    repository={repository}\n                    selectedBranch={selectedBranch}\n                    hasWriteAccess={hasWriteAccess}\n                  />\n                </StatusBar>\n                \n                <StatusBar \n                  title=\"Staging Ground\" \n                  icon=\"📝\" \n                  defaultExpanded={false}\n                  color=\"#ff8c00\"\n                >\n                  <div className=\"staging-ground-content\">\n                    <p>Changes made through DAK component editors are staged here before being committed to the repository. Review and commit your changes when ready.</p>\n                    <div className=\"staging-summary\">\n                      <div className=\"staging-status\">\n                        <span className=\"status-indicator\">🔴</span>\n                        <span className=\"status-indicator\">🟡</span>\n                        <span className=\"status-indicator\">🟢</span>\n                        <button className=\"save-btn\" disabled>💾 Save Changes</button>\n                      </div>\n                      <div className=\"staging-files\">\n                        <h4>📁 Changed Files</h4>\n                        <p>No changes in staging ground</p>\n                        <p>Changes made through DAK component editors will appear here before being saved to the repository.</p>\n                      </div>\n                    </div>\n                  </div>\n                </StatusBar>\n              </div>\n\n              {/* 9 DAK Components with Publication Badges */}\n              <div className=\"components-grid core-components\">\n                {coreDAKComponents.map((component) => {\n                  // Create component with publication format text badges in description\n                  const componentWithFormats = {\n                    ...component,\n                    description: `${component.description} • DocBook • EPUB • HTML`\n                  };\n                  \n                  return (\n                    <ComponentCard\n                      key={component.id}\n                      component={componentWithFormats}\n                      handleComponentClick={handleComponentClick}\n                      t={t}\n                      statusBadge=\"Publish\"\n                      badgeIcon=\"🖨️\"\n                      badgeColor=\"#107c10\"\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* DAK FAQ Section */}\n          {activeTab === 'faq' && (\n            <div className=\"components-section faq-section active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">DAK FAQ</h3>\n                <p className=\"section-description\">\n                  Click on any component to view and ask questions specific to that DAK component\n                </p>\n              </div>\n\n              {/* MCP Server Information Status Bar */}\n              <div className=\"faq-status-bars\">\n                <StatusBar \n                  title=\"MCP Server API\" \n                  icon=\"🔌\" \n                  defaultExpanded={false}\n                  color=\"#6b69d6\"\n                >\n                  <div className=\"mcp-info\">\n                    <h4>MCP Server API</h4>\n                    {window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' ? (\n                      <>\n                        <p>\n                          The FAQ system can also be accessed programmatically via the MCP server API:\n                        </p>\n                        <ul>\n                          <li><code>GET http://127.0.0.1:3001/faq/questions/catalog</code> - Get question catalog</li>\n                          <li><code>POST http://127.0.0.1:3001/faq/questions/execute</code> - Execute questions</li>\n                        </ul>\n                      </>\n                    ) : (\n                      <>\n                        <p>\n                          For programmatic access to the FAQ system, you can install and run the MCP server locally:\n                        </p>\n                        <div style={{ background: '#e9ecef', padding: '1rem', borderRadius: '4px', marginBottom: '1rem' }}>\n                          <h5>Installation Instructions:</h5>\n                          <ol>\n                            <li>Clone the SGEX repository: <code>git clone {repositoryConfig.getGitHubUrl()}.git</code></li>\n                            <li>Navigate to repository: <code>cd sgex</code></li>\n                            <li>Build MCP server: <code>npm run build-mcp</code></li>\n                            <li>Start MCP server: <code>npm run run-mcp</code></li>\n                          </ol>\n                          <p style={{ margin: '0.5rem 0', fontSize: '0.9em', color: '#6c757d' }}>\n                            <strong>Alternative:</strong> For manual setup, navigate to <code>services/dak-faq-mcp</code> and run <code>npm install && npm run build && npm start</code>\n                          </p>\n                        </div>\n                        <p>\n                          Once running, the MCP server will be available at:\n                        </p>\n                        <ul>\n                          <li><code>GET http://127.0.0.1:3001/faq/questions/catalog</code> - Get question catalog</li>\n                          <li><code>POST http://127.0.0.1:3001/faq/questions/execute</code> - Execute questions</li>\n                        </ul>\n                        <p>\n                          <strong>Note:</strong> The MCP server runs locally for security and provides full API access to the DAK FAQ system.\n                        </p>\n                      </>\n                    )}\n                  </div>\n                </StatusBar>\n              </div>\n\n              {/* 9 DAK Components with FAQ Badges */}\n              <div className=\"components-grid core-components\">\n                {coreDAKComponents.map((component) => {\n                  return (\n                    <ComponentCard\n                      key={component.id}\n                      component={component}\n                      handleComponentClick={(event, comp) => handleFAQComponentClick(event, comp)}\n                      t={t}\n                      statusBadge=\"Ask\"\n                      badgeIcon=\"❓\"\n                      badgeColor=\"#8b5cf6\"\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Permission Upgrade Dialog */}\n      {showPermissionDialog && (\n        <div className=\"permission-dialog-overlay\">\n          <div className=\"permission-dialog\">\n            <div className=\"dialog-header\">\n              <h3>Edit Access Required</h3>\n              <button \n                className=\"dialog-close\"\n                onClick={() => setShowPermissionDialog(false)}\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"dialog-content\">\n              <div className=\"dialog-mascot\">\n                <img src={mascotImage} alt={getAltText(t, ALT_TEXT_KEYS.MASCOT_HELPER, 'SGEX Helper')} className=\"dialog-mascot-img\" />\n                <div className=\"mascot-message\">\n                  <p>You need edit permissions to modify DAK components!</p>\n                  <p>Your current token only provides read access to this repository.</p>\n                </div>\n              </div>\n              <div className=\"permission-options\">\n                <div className=\"option-card\">\n                  <h4>🔧 Upgrade Your Token</h4>\n                  <p>Create a new fine-grained token with write permissions for this repository.</p>\n                  <div className=\"option-buttons\">\n                    <a \n                      href=\"https://github.com/settings/personal-access-tokens/new\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"btn-primary\"\n                    >\n                      Create New Token\n                    </a>\n                    <HelpButton \n                      helpTopic=\"github-token\"\n                      contextData={{ \n                        repository: { owner: repository.owner?.login || repository.full_name.split('/')[0], name: repository.name },\n                        requiredScopes: ['Contents: Write', 'Metadata: Read', 'Pull requests: Write'],\n                        permissionMode: 'edit',\n                        upgradeMode: true\n                      }}\n                    />\n                  </div>\n                </div>\n                <div className=\"option-card\">\n                  <h4>👁️ Continue in Read-Only Mode</h4>\n                  <p>Browse and view DAK components without editing capabilities.</p>\n                  <button \n                    className=\"btn-secondary\"\n                    onClick={() => setShowPermissionDialog(false)}\n                  >\n                    Continue Read-Only\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* FAQ Component Modal */}\n      {showFAQModal && selectedFAQComponent && (\n        <div \n          className=\"faq-modal-overlay\" \n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowFAQModal(false);\n            }\n          }}\n          role=\"presentation\"\n        >\n          <div \n            className=\"faq-modal\"\n            role=\"dialog\"\n            aria-modal=\"true\"\n            tabIndex={-1}\n          >\n            <div className=\"faq-modal-header\">\n              <h3>❓ FAQ: {selectedFAQComponent.name}</h3>\n              <button \n                className=\"modal-close-btn\"\n                onClick={() => setShowFAQModal(false)}\n                aria-label=\"Close modal\"\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"faq-modal-content\">\n              <p>Questions specific to <strong>{selectedFAQComponent.name}</strong></p>\n              <FAQAccordion\n                repository={`${profile?.login}/${repository?.name}`}\n                branch={selectedBranch || 'main'}\n                githubService={githubService}\n                filters={{\n                  level: 'component',\n                  component: selectedFAQComponent.id\n                }}\n                className=\"component-faq-accordion\"\n              />\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* SAML Authorization Modal */}\n      <SAMLAuthModal\n        isOpen={samlModalOpen}\n        onClose={() => {\n          setSamlModalOpen(false);\n          setSamlModalInfo(null);\n        }}\n        samlInfo={samlModalInfo}\n      />\n    </div>\n  );\n};\n\nexport default DAKDashboard;","/**\n * Core types and interfaces for DAK FAQ system\n */\n\n/**\n * Question hierarchy levels\n */\nexport const QuestionLevel = {\n  DAK: 'dak',\n  COMPONENT: 'component', \n  ASSET: 'asset'\n};\n\n/**\n * Question metadata definition\n */\nexport class QuestionDefinition {\n  constructor({\n    id,\n    level,\n    title,\n    description,\n    parameters = [],\n    tags = [],\n    version = '1.0.0',\n    isTemplate = false,\n    componentTypes = [],\n    assetTypes = []\n  }) {\n    this.id = id;\n    this.level = level;\n    this.title = title;\n    this.description = description;\n    this.parameters = parameters;\n    this.tags = tags;\n    this.version = version;\n    this.isTemplate = isTemplate;\n    this.componentTypes = componentTypes;\n    this.assetTypes = assetTypes;\n  }\n}\n\n/**\n * Parameter definition for questions\n */\nexport class ParameterDefinition {\n  constructor({\n    name,\n    type = 'string',\n    required = false,\n    description = '',\n    defaultValue = null,\n    validation = {}\n  }) {\n    this.name = name;\n    this.type = type;\n    this.required = required;\n    this.description = description;\n    this.defaultValue = defaultValue;\n    this.validation = validation;\n  }\n}\n\n/**\n * Question execution context\n */\nexport class QuestionContext {\n  constructor({\n    repository,\n    locale = 'en_US',\n    branch = 'main',\n    user = null,\n    assetFile = null,\n    componentType = null,\n    storage = null\n  }) {\n    this.repository = repository;\n    this.locale = locale;\n    this.branch = branch;\n    this.user = user;\n    this.assetFile = assetFile;\n    this.componentType = componentType;\n    this.storage = storage;\n  }\n}\n\n/**\n * Question execution result\n */\nexport class QuestionResult {\n  constructor({\n    structured = {},\n    narrative = '',\n    warnings = [],\n    errors = [],\n    meta = {}\n  }) {\n    this.structured = structured;\n    this.narrative = narrative;\n    this.warnings = warnings;\n    this.errors = errors;\n    this.meta = meta;\n  }\n}\n\n/**\n * Cache hint for FAQ answers\n */\nexport class CacheHint {\n  constructor({\n    scope = 'repository',\n    key = '',\n    ttl = 3600, // 1 hour default\n    dependencies = []\n  }) {\n    this.scope = scope;\n    this.key = key;\n    this.ttl = ttl;\n    this.dependencies = dependencies;\n  }\n}"],"names":["_ref","isOpen","onClose","samlInfo","componentLogger","logger","getLogger","useEffect","componentMount","organization","repository","componentUnmount","authorizationUrl","handleClose","userAction","_jsx","className","onClick","role","children","_jsxs","e","stopPropagation","id","concat","handleAuthorize","window","open","info","instruction","helpTopic","contextData","showHelp","setShowHelp","useState","mascotImage","useThemeImage","_Fragment","handleHelpClick","title","src","alt","HelpModal","topic","handleCloseHelp","parameterRegistryService","constructor","this","registry","loaded","loadFromYaml","yamlContent","yaml","error","Error","message","getParameters","level","type","arguments","length","undefined","parameters","defaults","name","config","Object","entries","push","ParameterDefinition","required","description","defaultValue","default","validation","_objectSpread","paramName","uniqueParams","Map","forEach","param","set","Array","from","values","validateParameters","definitions","normalized","errors","definition","value","finalValue","typeError","validateParameterType","validationError","validateParameterCustom","keys","find","def","isValid","expectedType","actualType","isNaN","isArray","pattern","RegExp","test","enum","includes","join","minLength","maxLength","min","max","getParameterSchema","properties","property","assign","BrowserBuffer","content","encoding","toString","console","warn","isBuffer","obj","Storage","readFile","path","fileExists","listFiles","getFileInfo","GitHubStorage","githubService","branch","super","cache","parseRepository","match","owner","repo","replace","parts","split","cacheKey","has","log","get","contentString","getFileContent","BufferPolyfill","substring","_error$stack","stack","isAuth","_error$stack2","files","getRepositoryTree","tree","filter","item","map","regexPattern","regex","file","startsWith","response","size","sha","url","questionRegistry","initialized","initialize","loadQuestions","questions","module","questionConfig","questionModule","metadata","execute","Render","getCatalog","filters","filteredQuestions","q","tags","some","tag","componentType","componentTypes","assetType","assetTypes","executeBatch","requests","context","results","request","result","executeQuestion","questionId","success","QuestionResult","structured","narrative","getErrorNarrative","locale","meta","assetFiles","question","isTemplate","executeTemplateQuestion","getQuestionType","storage","createStorage","executionContext","QuestionContext","user","assetFile","input","allWarnings","allErrors","assetParameters","warnings","aggregatedStructured","assets","r","summary","totalAssets","successfulAssets","failedAssets","aggregatedNarrative","aggregateNarratives","isAggregated","assetCount","html","errorMessages","en_US","fr_FR","es_ES","normalizeLocale","t","i18n","useTranslation","setQuestions","expandedQuestions","setExpandedQuestions","Set","questionResults","setQuestionResults","loadingQuestions","setLoadingQuestions","loading","setLoading","setError","async","faqExecutionEngine","availableQuestions","err","prev","add","language","newSet","delete","sanitizeHTML","DOMPurify","sanitize","ALLOWED_TAGS","ALLOWED_ATTR","renderQuestionResult","dangerouslySetInnerHTML","__html","index","newMap","retryQuestion","warning","location","reload","count","isExpanded","isLoading","newExpanded","toggleQuestion","slice","DAKDashboardContent","_repository$owner0","profile","navigate","usePage","tabToFragment","fragmentToTab","hasWriteAccess","setHasWriteAccess","showPermissionDialog","setShowPermissionDialog","activeTab","setActiveTab","getInitialTab","hash","issueCounts","setIssueCounts","showUserMenu","setShowUserMenu","showFAQModal","setShowFAQModal","selectedFAQComponent","setSelectedFAQComponent","samlModalOpen","setSamlModalOpen","samlModalInfo","setSamlModalInfo","handleEscape","key","document","addEventListener","removeEventListener","selectedBranch","ComponentCard","component","handleComponentClick","statusBadge","badgeIcon","badgeColor","imageLoaded","setImageLoaded","imageError","setImageError","cardImagePath","cardImage","toLowerCase","event","style","color","tabIndex","onKeyDown","preventDefault","getAltText","ALT_TEXT_KEYS","ICON_DAK_COMPONENT","onLoad","handleImageLoad","onError","handleImageError","display","icon","backgroundColor","fileTypes","StatusBar","_ref2","defaultExpanded","setIsExpanded","branchContextService","getSelectedBranch","defaultBranch","default_branch","setSelectedBranch","samlAuthService","registerModalCallback","_repository$owner","login","full_name","repoName","actualIssues","getIssues","state","per_page","issue","pull_request","openIssues","closedIssues","total","closed","loadIssueCounts","_repository$owner2","writeAccess","checkRepositoryWritePermissions","checkPermissions","handleClickOutside","target","closest","fragment","handleHashChange","tab","coreDAKComponents","editor","_repository$owner9","navigationState","handlePublicationToolClick","handleFAQToolClick","_repository$owner3","handleNavigationClick","_repository$owner4","_repository$owner5","_repository$owner6","_repository$full_name","branchName","viewerPath","_repository$owner7","_repository$owner8","ForkStatusBar","DAKStatusBox","Publications","disabled","componentWithFormats","hostname","background","padding","borderRadius","marginBottom","repositoryConfig","getGitHubUrl","margin","fontSize","comp","handleFAQComponentClick","MASCOT_HELPER","href","rel","HelpButton","requiredScopes","permissionMode","upgradeMode","currentTarget","FAQAccordion","SAMLAuthModal","DAKDashboard","PageLayout","pageName","QuestionLevel","DAK","COMPONENT","ASSET","QuestionDefinition","version","_ref3","_ref4","CacheHint","_ref5","scope","ttl","dependencies"],"sourceRoot":""}