{"version":3,"file":"static/js/3820.0b50fdd1.chunk.js","mappings":"gjKAQA,MAQMA,EAAsBA,KAAO,IAADC,EAChC,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACX,OAAEC,EAAM,QAAEC,IAAYC,EAAAA,EAAAA,MACtBC,EAAkB,OAANH,QAAM,IAANA,OAAM,EAANA,EAAQI,KAGpBC,EAAmBJ,IAAyB,QAAlBN,EAAIC,EAASU,aAAK,IAAAX,OAAA,EAAdA,EAAgBM,SAC9CM,GAAsBC,EAAAA,EAAAA,UAC5BD,EAAoBE,QAAUJ,EAC9B,MAAM,OAAEK,GAAWd,EAASU,OAAS,CAAC,GAE/BK,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAAoBC,IAAyBF,EAAAA,EAAAA,UAAS,OACtDG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,OAC5BO,EAAYC,IAAiBR,EAAAA,EAAAA,WAAS,IACtCS,EAAcC,IAAmBV,EAAAA,EAAAA,UAAS,OAC1CW,EAAwBC,IAA6BZ,EAAAA,EAAAA,UAAS,IAAIa,MAClEC,EAAiBC,IAAsBf,EAAAA,EAAAA,WAAS,IAChDgB,EAAgBC,IAAqBjB,EAAAA,EAAAA,UAAS,OAC9CkB,EAA8BC,IAAmCnB,EAAAA,EAAAA,WAAS,IAG1EoB,EAAeC,IAAoBrB,EAAAA,EAAAA,UAAS,MAC7CsB,EAAkBzB,GAAUuB,GAGlCG,EAAAA,EAAAA,WAAU,KAER,GAAKjC,GAAcE,EAMnB,OAAIF,GAAcO,GAAWuB,OAezB9B,IAAcE,QAAgCgC,IAAZpC,KAMlCE,GAAcE,GAAgC,OAAZJ,EAMlCE,GAAaE,GAAoBA,EAAiBiC,QAAUnC,EAC9DL,EAAS,MAKPO,GAAqBF,GACvBL,EAAS,kBAADyC,OAAmBlC,EAAiBiC,OAAS,CACnDhC,MAAO,CAAEL,QAASI,EAAkBK,OAAQyB,GAC5CK,SAAS,IAdX1C,EAAS,OApBS,4BAAdK,GACc,QAAdA,GACAA,EAAUsC,cAAcC,SAAS,eACnCR,EAAiB,aAInBpC,EAAS,eAADyC,OAAgBpC,GAAa,CAAEqC,SAAS,IAdhD1C,EAAS,MA6CV,CAACK,EAAWE,EAAkBK,EAAQuB,EAAehC,EAASH,EAAUqC,IAG3E,MAAMQ,EAAqBC,IAAgB,IAADC,EAAAC,EACxC,IAAKF,EAAY,OAAO,KAGxB,MAAMxC,GAAuB,QAAhByC,EAAAD,EAAWG,aAAK,IAAAF,OAAA,EAAhBA,EAAkBP,SAA6B,QAAxBQ,EAAIF,EAAWI,iBAAS,IAAAF,OAAA,EAApBA,EAAsBG,MAAM,KAAK,IACnEC,EAAON,EAAWO,KAExB,OAAK/C,GAAS8C,EAKP,CAAE9C,OAAM8C,SAJbE,QAAQlC,MAAM,sDAAuD0B,GAC9D,OAMLS,EAAkBA,KACtB,OAAQlB,GACN,IAAK,OACH,MAAO,CACLmB,MAAO,qBACPC,YAAa,wEACbC,WAAY,8BACZC,UAAW,cAEf,IAAK,OACH,MAAO,CACLH,MAAO,qBACPC,YAAa,0DACbC,WAAY,qCACZC,UAAW,2BAEf,IAAK,SACH,MAAO,CACLH,MAAO,sBACPC,YAAa,oEACbC,WAAY,qCACZC,UAAW,0BACXC,cAAc,GAElB,QACE,MAAO,CACLJ,MAAO,wBACPC,YAAa,wCACbC,WAAY,WACZC,UAAW,gBAKbE,GAAsBC,EAAAA,EAAAA,aAAY,KACtC,MAAM3D,EAAUM,EAAoBE,QACpC,IAAKR,IAAYA,EAAQqC,MACvB,MAAO,GAyET,MArEqB,CACnB,CACEuB,GAAI,EACJV,KAAM,sBACNH,UAAU,GAADT,OAAKtC,EAAQqC,MAAK,wBAC3BiB,YAAa,oEACbO,SAAS,sBAADvB,OAAwBtC,EAAQqC,MAAK,wBAC7CyB,OAAQ,CAAC,MAAO,mBAAoB,kBAAmB,OACvDC,SAAU,MACVC,iBAAkB,GAClBC,YAAa,EACbC,WAAY,uBACZC,6BAA6B,GAE/B,CACEP,GAAI,EACJV,KAAM,mBACNH,UAAU,GAADT,OAAKtC,EAAQqC,MAAK,qBAC3BiB,YAAa,qDACbO,SAAS,sBAADvB,OAAwBtC,EAAQqC,MAAK,qBAC7CyB,OAAQ,CAAC,MAAO,mBAAoB,eAAgB,YACpDC,SAAU,MACVC,iBAAkB,EAClBC,YAAa,EACbC,WAAY,uBACZC,6BAA6B,GAE/B,CACEP,GAAI,EACJV,KAAM,UACNH,UAAU,GAADT,OAAKtC,EAAQqC,MAAK,YAC3BiB,YAAa,gEACbO,SAAS,sBAADvB,OAAwBtC,EAAQqC,MAAK,YAC7CyB,OAAQ,CAAC,MAAO,MAAO,iBAAkB,oBACzCC,SAAU,MACVC,iBAAkB,GAClBC,YAAa,EACbC,WAAY,uBACZC,6BAA6B,GAE/B,CACEP,GAAI,EACJV,KAAM,qBACNH,UAAU,GAADT,OAAKtC,EAAQqC,MAAK,uBAC3BiB,YAAa,wDACbO,SAAS,sBAADvB,OAAwBtC,EAAQqC,MAAK,uBAC7CyB,OAAQ,CAAC,SAAU,MAAO,cAC1BC,SAAU,aACVC,iBAAkB,EAClBC,YAAa,EACbC,WAAY,uBACZC,6BAA6B,GAE/B,CACEP,GAAI,EACJV,KAAM,mBACNH,UAAU,GAADT,OAAKtC,EAAQqC,MAAK,qBAC3BiB,YAAa,sDACbO,SAAS,sBAADvB,OAAwBtC,EAAQqC,MAAK,qBAC7CyB,OAAQ,CAAC,OAAQ,WAAY,WAC7BC,SAAU,MACVC,iBAAkB,EAClBC,YAAa,EACbC,WAAY,uBACZC,6BAA6B,IAKbC,OAAOnB,GAAQA,EAAKkB,8BACvC,IAEGE,GAA2BV,EAAAA,EAAAA,aAAYW,UAC3ClD,GAAc,GACdT,EAAgB,IAEhB,MAAM4D,EAAYb,IACZc,EAASC,GAAO,IAAIC,QAAQC,GAAWC,WAAWD,EAASF,IAEjE,IAEE,IAAK,IAAII,EAAI,EAAGA,EAAIN,EAAUO,OAAQD,IAAK,CACzC,MAAM5B,EAAOsB,EAAUM,GAGvBvD,EAAgB,CACdd,QAASqE,EAAI,EACbE,MAAOR,EAAUO,OACjBE,YAAa/B,EAAKC,KAClB+B,SAAUC,KAAKC,OAAQN,EAAI,GAAKN,EAAUO,OAAU,KACpDM,WAAW,EACXC,SAAS,IAIX7D,EAA0B8D,GAAQ,IAAI7D,IAAI,IAAI6D,EAAMrC,EAAKC,cAGnDsB,EAAM,IAAuB,IAAhBU,KAAKK,UAGxB5E,EAAgB6E,GACG,IAAIA,EAAWvC,GAChBwC,KAAK,CAACC,EAAGC,IAAMD,EAAExC,KAAK0C,cAAcD,EAAEzC,QAIxD5B,EAAgB,CACdd,QAASqE,EAAI,EACbE,MAAOR,EAAUO,OACjBE,YAAa/B,EAAKC,KAClB+B,SAAUC,KAAKC,OAAQN,EAAI,GAAKN,EAAUO,OAAU,KACpDM,WAAW,IAIb5D,EAA0B8D,IACxB,MAAMO,EAAS,IAAIpE,IAAI6D,GAEvB,OADAO,EAAOC,OAAO7C,EAAKC,MACZ2C,UAIHrB,EAAM,IACd,CAGArB,QAAQ4C,IAAI,iEACZnB,WAAW,KACTxD,GAAc,GACdE,EAAgB,MAChBE,EAA0B,IAAIC,MAC7B,IACL,CAAE,MAAOR,GACPkC,QAAQlC,MAAM,+BAAgCA,GAE9CG,GAAc,GACdE,EAAgB,MAChBE,EAA0B,IAAIC,IAChC,GACC,CAACiC,IAEEsC,GAAoBrC,EAAAA,EAAAA,aAAYW,iBAAuD,IAAhD2B,EAAWC,UAAApB,OAAA,QAAA1C,IAAA8D,UAAA,IAAAA,UAAA,GACtDlF,GAAW,GACXE,EAAS,MACTE,GAAc,GACdE,EAAgB,MAChBE,EAA0B,IAAIC,KAC9BE,GAAmB,GACnBE,EAAkB,MAClBE,GAAgC,GAEhC,IACE,IAAIoE,EAAQ,GACRC,EAAa,KAEjB,GAAwB,WAApBlE,EAEFiE,EAAQE,EAAAA,GAA0BC,IAAI,CAACC,EAAUC,KAAK,CACpD5C,KAAM4C,EAAQ,GACdtD,KAAMqD,EAAStD,KACfF,UAAU,GAADT,OAAKiE,EAASzD,MAAK,KAAAR,OAAIiE,EAAStD,MACzCK,YAAaiD,EAASjD,YACtBO,SAAU0C,EAAS5D,WACnB8D,UAAU,GAADnE,OAAKiE,EAAS5D,WAAU,QACjCmB,OAAQyC,EAASG,KAAKJ,IAAIK,GAAOA,EAAInE,cAAcD,QAAQ,OAAQ,MACnEwB,SAAU,MACVC,iBAAkB,GAClBC,YAAa,EACbC,YAAY,IAAI0C,MAAOC,cACvB1C,6BAA6B,EAC7B2C,aAAa,EACbC,gBAAiBR,EACjBzD,MAAO,CACLT,MAAOkE,EAASzD,MAChBkE,WAA+B,4BAAnBT,EAASzD,MACjB,4DACA,qCAIRqD,EAAMV,KAAK,CAACC,EAAGC,IAAMD,EAAExC,KAAK0C,cAAcD,EAAEzC,OAC5CvC,EAAgBwF,OACX,CAIL,GAAIc,EAAAA,EAAcC,WAAajB,EAC7B,IACEG,EAAae,EAAAA,EAAuBC,sBAAsBhH,EAAiBiC,MAAiC,QAA1BjC,EAAiBiH,KAAiB,MAAQ,OAC9H,CAAE,MAAOC,GACPnE,QAAQoE,KAAK,oCAAqCD,EACpD,CAGF,GAAIlB,IAAeH,EAEjB9C,QAAQ4C,IAAI,+BAAgCoB,EAAAA,EAAuBK,aAAapH,EAAiBiC,MAAiC,QAA1BjC,EAAiBiH,KAAiB,MAAQ,SAClJlB,EAAQC,EAAW1F,aACnBiB,GAAmB,GAEnBwE,EAAMV,KAAK,CAACC,EAAGC,IAAMD,EAAExC,KAAK0C,cAAcD,EAAEzC,OAC5CvC,EAAgBwF,QAGhB,GAAIc,EAAAA,EAAcC,SAAU,CAC1B/D,QAAQ4C,IAAIE,EAAc,gDAAwC,mDAClE7E,GAAc,GACdJ,GAAW,GAIXmC,QAAQ4C,IAAI,0EAGZ,MAAM0B,EAAe,IACfC,EAAiB,IAAIhD,QAAQ,CAACiD,EAAGC,KACrChD,WAAW,IAAMgD,EAAO,IAAIC,MAAM,6DAA8DJ,KAG5FK,EAAcb,EAAAA,EAAcc,0CAChC3H,EAAiBiC,MACS,QAA1BjC,EAAiBiH,KAAiB,MAAQ,OAEzCW,IACCrH,EAAgB6E,IAGd,IADeA,EAAUyC,KAAKhF,GAAQA,EAAKW,KAAOoE,EAAUpE,IAC/C,CAGX,MADiB,IAAI4B,EAAWwC,GAChBvC,KAAK,CAACC,EAAGC,IAAMD,EAAExC,KAAK0C,cAAcD,EAAEzC,MACxD,CACA,OAAOsC,KAIVP,IACC9B,QAAQ4C,IAAI,uCAA8Bd,GAC1C3D,EAAgB2D,GAGZA,EAASrD,gBACXC,EAAkBoD,EAASrD,gBAIzBqD,EAASI,UAAYJ,EAASG,WAEhCjC,QAAQ4C,IAAI,iCAAwBd,EAASD,aAC7CxD,EAA0B8D,GAAQ,IAAI7D,IAAI,IAAI6D,EAAML,EAASD,eAG7D1D,GAAe4G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACZjD,GAAQ,IACXI,SAAS,EACTD,WAAW,MAEJH,EAASG,WAElBjC,QAAQ4C,IAAI,6BAAyBd,EAASD,aAC9C1D,GAAe4G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACZjD,GAAQ,IACXG,WAAW,KAIbR,WAAW,KACTpD,EAA0B8D,IACxB,MAAMO,EAAS,IAAIpE,IAAI6D,GAEvB,OADAO,EAAOC,OAAOb,EAASD,aAChBa,KAER,KAGCZ,EAASzE,UAAYyE,EAASF,QAEhC5B,QAAQ4C,IAAI,kEACZnB,WAAW,KACTxD,GAAc,GACdE,EAAgB,MAChBE,EAA0B,IAAIC,MAC7B,OAEuB,IAAnBwD,EAASF,OAAeE,EAASG,YAE1CjC,QAAQ4C,IAAI,iEACZnB,WAAW,KACTxD,GAAc,GACdE,EAAgB,MAChBE,EAA0B,IAAIC,MAC7B,OAIN0G,IACChF,QAAQoE,KAAK,oCAAqCY,KAItD,IAEE,MAAMC,QAAmB1D,QAAQ2D,KAAK,CAACP,EAAaJ,IAGhDU,GAAoC,kBAAfA,GAA2BA,EAAW1H,cAC7DyF,EAAQiC,EAAW1H,aACf0H,EAAWxG,gBACbC,EAAkBuG,EAAWxG,iBAI/BuE,EAAQmC,MAAMC,QAAQH,GAAcA,EAAa,EAErD,CAAE,MAAOI,GAMP,MALArF,QAAQlC,MAAM,6BAAyBuH,EAAaC,SAEpDrH,GAAc,GACdE,EAAgB,MAChBE,EAA0B,IAAIC,KACxB,IAAIoG,MAAM,mFAClB,CAGAV,EAAAA,EAAuBuB,sBACrBtI,EAAiBiC,MACS,QAA1BjC,EAAiBiH,KAAiB,MAAQ,OAC1ClB,GAKF,MAAMwC,EAAcxC,EAAMV,KAAK,CAACC,EAAGC,IAAMD,EAAExC,KAAK0C,cAAcD,EAAEzC,OAChEvC,EAAgBgI,EAClB,MAEE,GAA+B,4BAA3BvI,EAAiBiC,MAAqC,CACxDc,QAAQ4C,IAAI,mFAGZ,IAAI6C,EAAgB,KACpB,IACEA,EAAgBzB,EAAAA,EAAuBC,sBACrC,0BACA,MACA,kBAEJ,CAAE,MAAOE,GACPnE,QAAQoE,KAAK,wCAAyCD,EACxD,CAEA,GAAIsB,IAAkB3C,EACpB9C,QAAQ4C,IAAI,oDACZI,EAAQyC,EAAclI,aACtBiB,GAAmB,OACd,CACLwB,QAAQ4C,IAAI,kDAGZ,IAIE,SAFiCkB,EAAAA,EAAc4B,qBAI7C,MADA1F,QAAQ4C,IAAI,2FACN,IAAI8B,MAAM,+CAGlB,MAAMiB,QAAoB7B,EAAAA,EAAc8B,+BACtC,0BACA,OACA,GAGF,KAAID,GAAeA,EAAYhE,OAAS,GAYtC,MAAM,IAAI+C,MAAM,wCAXhB1E,QAAQ4C,IAAI,gBAADzD,OAAYwG,EAAYhE,OAAM,qCACzCqB,EAAQ2C,EAGR3B,EAAAA,EAAuBuB,sBACrB,0BACA,MACAvC,EACA,kBAKN,CAAE,MAAO6C,GACP7F,QAAQoE,KAAK,uDAAwDyB,GAGrEjH,GAAgC,GAGhCoE,EAAQ8C,EAAAA,GAAqC3C,IAAIrD,IAAIiF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAChDjF,GAAI,IACPkB,6BAA6B,KAI/BgD,EAAAA,EAAuBuB,sBACrB,0BACA,MACAvC,EACA,mBAGFhD,QAAQ4C,IAAI,sBAADzD,OAAa6D,EAAMrB,OAAM,4CACtC,CACF,CAGAqB,EAAMV,KAAK,CAACC,EAAGC,IAAMD,EAAExC,KAAK0C,cAAcD,EAAEzC,OAC5CvC,EAAgBwF,EAElB,KAAO,CAELhD,QAAQ4C,IAAI,8DACZ,IAEE,MAAM8C,QAA2B5B,EAAAA,EAAc4B,qBAE/C1C,QAAcc,EAAAA,EAAc8B,+BAC1B3I,EAAiBiC,MACS,QAA1BjC,EAAiBiH,KAAiB,MAAQ,OAC1CwB,GAGF1C,EAAMV,KAAK,CAACC,EAAGC,IAAMD,EAAExC,KAAK0C,cAAcD,EAAEzC,OAC5CvC,EAAgBwF,EAClB,CAAE,MAAO6C,GACP7F,QAAQoE,KAAK,gDAAiDyB,SAExD3E,IACN8B,EAAQzC,IAERyC,EAAMV,KAAK,CAACC,EAAGC,IAAMD,EAAExC,KAAK0C,cAAcD,EAAEzC,OAC5CvC,EAAgBwF,EAClB,CACF,CAGN,CACF,CAAE,MAAOlF,GACPkC,QAAQlC,MAAM,+BAAgCA,GAC9CC,EAAS,6EAET,MAAMqD,EAAYb,IAClBa,EAAUkB,KAAK,CAACC,EAAGC,IAAMD,EAAExC,KAAK0C,cAAcD,EAAEzC,OAChDvC,EAAgB4D,GAEhBnD,GAAc,GACdE,EAAgB,MAChBE,EAA0B,IAAIC,IAChC,CAAC,QACCT,GAAW,GAGNiG,EAAAA,EAAcC,UAAgC,WAApBhF,IAE7Bd,GAAc,GACdE,EAAgB,MAChBE,EAA0B,IAAIC,KAElC,CAEF,EAAG,CAACrB,EAAkB8B,KAEtBC,EAAAA,EAAAA,WAAU,KAEH/B,GAAqB8B,GAAoBhC,GAAaE,EAAiBiC,QAAUnC,GAKtF8F,GAAkB,GAAO,IACxB,CAAC5F,EAAkB8B,EAAiBhC,EAAW8F,IAElD,MAAMkD,EAA0BjG,IAC9BnC,EAAsBmC,GAGE,SAApBf,GAEF0C,WAAW,KACT,MAAMuE,EAAWzG,EAAkBO,GACnC,GAAIkG,EAAU,CACZ,MAAMC,EAAY,cAAA9G,OAAiB6G,EAAShJ,KAAI,KAAAmC,OAAI6G,EAASlG,MAC7DpD,EAASuJ,EAAc,CACrB/I,MAAO,CACLL,QAASI,EACTuC,WAAYM,EACZxC,OAAQyB,IAGd,KAAO,CAEL,MAAMmH,EAASjG,IACfvD,EAASwJ,EAAO7F,UAAW,CACzBnD,MAAO,CACLL,QAASI,EACTuC,WAAYM,EACZxC,OAAQyB,IAGd,GACC,MA8CDoH,EAAeA,KACnBtD,GAAkB,GAAM,IAYpBuD,EAAcC,GACX,IAAI5C,KAAK4C,GAAYC,mBAAmB,QAAS,CACtDC,KAAM,UACNC,MAAO,QACPC,IAAK,YAIT,IAAKxJ,IAAqB8B,IAAoBhC,GAAaE,EAAiBiC,QAAUnC,EACpF,OAAO2J,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAACF,EAAAA,EAAAA,KAAA,OAAKG,MAAO,CAACC,MAAO,QAASC,UAAW,SAAUC,QAAS,QAAQJ,SAAC,qBAG5G,MAAMV,EAASjG,IAEf,OACEyG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,MAAAE,SAAKV,EAAOhG,SACZwG,EAAAA,EAAAA,KAAA,KAAGC,UAAU,qBAAoBC,SAAEV,EAAO/F,oBAG9C8G,EAAAA,EAAAA,MAAA,OAAKN,UAAU,kBAAiBC,SAAA,CACT,WAApB7H,IACCkI,EAAAA,EAAAA,MAAA,OAAKN,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,cAAaC,SAAC,kBAC9BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,kFAIW,WAApB7H,GAAgC+E,EAAAA,EAAcC,WAC7C2C,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,SAC5BrI,GACC0I,EAAAA,EAAAA,MAAA,OAAKN,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAC,kBAC7BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,yBACNF,EAAAA,EAAAA,KAAA,UACEQ,QAASf,EACTQ,UAAU,cACVQ,SAAUnJ,EAAW4I,SAEpB5I,EAAa,cAAgB,gBAIlC0I,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC1B5I,IAAeJ,IACfqJ,EAAAA,EAAAA,MAAAG,EAAAA,SAAA,CAAAR,SAAA,EACEF,EAAAA,EAAAA,KAAA,UACEQ,QAASf,EACTQ,UAAU,aACVQ,SAAUnJ,EAAW4I,SACtB,qCAGA5C,EAAAA,EAAuBC,sBAAsBhH,EAAiBiC,MAAiC,QAA1BjC,EAAiBiH,KAAiB,MAAQ,UAC9GwC,EAAAA,EAAAA,KAAA,UACEQ,QApEEG,KAC1BxE,GAAkB,GAAO,IAoED8D,UAAU,YACVQ,SAAUnJ,EAAW4I,SACtB,wCAUM,WAApB7H,IAAiC+E,EAAAA,EAAcC,WAC9CkD,EAAAA,EAAAA,MAAAG,EAAAA,SAAA,CAAAR,SAAA,CACGrI,GAA8C,4BAA3BtB,EAAiBiC,QACnC+H,EAAAA,EAAAA,MAAA,OAAKN,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAC,kBAC7BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,qCACNF,EAAAA,EAAAA,KAAA,UACEQ,QAASf,EACTQ,UAAU,cACVQ,SAAUnJ,EAAW4I,SAEpB5I,EAAa,gBAAkB,gBAIpCA,IAAeJ,IAAYW,GAA8C,4BAA3BtB,EAAiBiC,QAC/DwH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,WAAUC,SAAC,kBAC3BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,sCACNF,EAAAA,EAAAA,KAAA,UACEQ,QAASf,EACTQ,UAAU,aACVQ,SAAUnJ,EAAW4I,SACtB,gDAML5I,IAAeJ,GAAsC,4BAA3BX,EAAiBiC,QAC3CwH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAC,kBAC5BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,yBACNF,EAAAA,EAAAA,KAAA,UACEQ,QAjHK/F,gBAEnBD,KAgHcyF,UAAU,gBACVQ,SAAUnJ,EAAW4I,SACtB,qDAWZjI,GAA2D,4BAA3B1B,EAAiBiC,QAChDwH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcC,SAAC,kBAC/BK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,sBAA0B,uIAElCF,EAAAA,EAAAA,KAAA,UACEQ,QAASf,EACTQ,UAAU,aACVQ,SAAUnJ,EAAW4I,SAEpB5I,EAAa,cAAgB,cACvB,mDAMhBJ,GACCqJ,EAAAA,EAAAA,MAAA,OAAKN,UAAU,UAASC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aACfD,EAAAA,EAAAA,KAAA,KAAAE,SAAG,+BAEH5I,GACFiJ,EAAAA,EAAAA,MAAA,OAAKN,UAAU,kBAAiBC,SAAA,EAC9BK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aACfD,EAAAA,EAAAA,KAAA,MAAAE,SAAI,mEAEL1I,IACC+I,EAAAA,EAAAA,MAAA,OAAKN,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,OACEC,UAAU,gBACVE,MAAO,CAAES,MAAM,GAADnI,OAAKjB,EAAa4D,SAAQ,WAG5C4E,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAE5BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBC,UACtCK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,0BAAyBC,SAAA,EACtCK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,iBAAgBC,SAAA,EAC7BK,EAAAA,EAAAA,MAAA,QAAMN,UAAU,gBAAeC,SAAA,CAC5B1I,EAAab,QAAQ,IAAEa,EAAa0D,MAAM,oBAE7CqF,EAAAA,EAAAA,MAAA,QAAMN,UAAU,sBAAqBC,SAAA,CAAE1I,EAAa4D,SAAS,WAG/DmF,EAAAA,EAAAA,MAAA,OAAKN,UAAU,4BAA2BC,SAAA,EACxCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAC,kBAChCF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,wBACNF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2BAA0BC,SACtCxI,EAAuBmJ,KAAO,EAC7BpC,MAAMqC,KAAKpJ,GAAwB+E,IAAKsE,IACtCR,EAAAA,EAAAA,MAAA,OAAoBN,UAAU,qBAAoBC,SAAA,EAChDF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,wBAAuBC,SAAC,YACxCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,qBAAoBC,SAAEa,MAF9BA,KAMZR,EAAAA,EAAAA,MAAA,OAAKN,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,wBAAuBC,SAAC,YACxCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,qBAAoBC,SAAC,sCAQnDK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAC,YAC5BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,uEAIZK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,kEACHF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,SACvBrJ,EAAa4F,IAAKrD,IAAI,IAAA4H,EAAA,OACrBT,EAAAA,EAAAA,MAAA,OAEEN,UAAS,aAAAxH,QAAiC,OAAlBzB,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoB+C,MAAOX,EAAKW,GAAK,WAAa,GAAE,mBAC5EyG,QAASA,IAAMnB,EAAuBjG,GAAM8G,SAAA,EAE5CK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,mBAAkBC,SAAA,EAC/BK,EAAAA,EAAAA,MAAA,MAAAL,SAAA,CAAK9G,EAAKC,KAAK,KAAC2G,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAC,qBAC5CK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,YAAWC,SAAA,CACvB9G,EAAK6D,cACJ+C,EAAAA,EAAAA,KAAA,QAAMC,UAAU,iBAAgBC,UACT,QAApBc,EAAA5H,EAAK8D,uBAAe,IAAA8D,OAAA,EAApBA,EAAsB3H,OAAQ,aAGlCD,EAAK6H,UAAWjB,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAC,YAChD9G,EAAKc,WAAY8F,EAAAA,EAAAA,KAAA,QAAMC,UAAU,iBAAgBC,SAAE9G,EAAKc,WACxDd,EAAKkB,8BACJ0F,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mBAAkBC,SAAC,4BAKzCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mBAAkBC,SAAE9G,EAAKK,aAAe,8BAErD8G,EAAAA,EAAAA,MAAA,OAAKN,UAAU,cAAaC,SAAA,EACxB9G,EAAKa,QAAU,IAAIiH,MAAM,EAAG,GAAGzE,IAAK0E,IACpCnB,EAAAA,EAAAA,KAAA,QAAkBC,UAAU,YAAWC,SAAEiB,GAA9BA,KAEX/H,EAAKa,QAAU,IAAIgB,OAAS,IAC5BsF,EAAAA,EAAAA,MAAA,QAAMN,UAAU,aAAYC,SAAA,CAAC,KAAG9G,EAAKa,QAAU,IAAIgB,OAAS,EAAE,eAIlEsF,EAAAA,EAAAA,MAAA,OAAKN,UAAU,aAAYC,SAAA,EACzBK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAC,YAC5BF,EAAAA,EAAAA,KAAA,QAAAE,SAAO9G,EAAKe,kBAAoB,QAElCoG,EAAAA,EAAAA,MAAA,OAAKN,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAC,kBAC5BF,EAAAA,EAAAA,KAAA,QAAAE,SAAO9G,EAAKgB,aAAe,QAE7BmG,EAAAA,EAAAA,MAAA,OAAKN,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAC,kBAC5BK,EAAAA,EAAAA,MAAA,QAAAL,SAAA,CAAM,WAASR,EAAWtG,EAAKiB,sBAIhB,OAAlBrD,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoB+C,MAAOX,EAAKW,KAC/BiG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBC,UAClCF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,wBAhDL9G,EAAKW,cAwDlB3C,GACFmJ,EAAAA,EAAAA,MAAA,OAAKN,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,gCACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAI9I,KACJ4I,EAAAA,EAAAA,KAAA,UAAQQ,QAASrE,EAAmB8D,UAAU,YAAWC,SAAC,iBAIlC,IAAxBrJ,EAAaoE,QACfsF,EAAAA,EAAAA,MAAA,OAAKN,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,2BACJF,EAAAA,EAAAA,KAAA,KAAAE,SACuB,WAApB7H,EACG,8CACA,mEAKS,4BAAdhC,IAA4C+G,EAAAA,EAAcC,WACzDkD,EAAAA,EAAAA,MAAA,OAAKN,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,+DACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,mMAIHK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,KAAAE,UAAGF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,sCACXK,EAAAA,EAAAA,MAAA,MAAAL,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kEACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,mEACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,iEACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,4DAENK,EAAAA,EAAAA,MAAA,KAAAL,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,kCAAsC,uFAOrDnI,IACCwI,EAAAA,EAAAA,MAAA,OAAKN,UAAU,0BAAyBC,SAAA,EACtCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,2CACJK,EAAAA,EAAAA,MAAA,KAAAL,SAAA,CACGnI,EAAeqJ,YAAY,WAASrJ,EAAesJ,aAAa,0CAEnEd,EAAAA,EAAAA,MAAA,OAAKN,UAAU,cAAaC,SAAA,CACzBnI,EAAeuJ,iBAAmB,IACjCf,EAAAA,EAAAA,MAAA,OAAKN,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAC,kBAC7BK,EAAAA,EAAAA,MAAA,QAAAL,SAAA,CAAM,iBAAenI,EAAeuJ,iBAAiB,sBAGxDvJ,EAAewJ,kBAAoB,IAClChB,EAAAA,EAAAA,MAAA,OAAKN,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAC,kBAC7BK,EAAAA,EAAAA,MAAA,QAAAL,SAAA,CAAM,mBAAiBnI,EAAewJ,kBAAkB,0BAI9DvB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BK,EAAAA,EAAAA,MAAA,KAAAL,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,6BAAuB,wCAC/BF,EAAAA,EAAAA,KAAA,UACEC,UAAU,aACVO,QAASA,IAAMrE,GAAkB,GAAM,GAAO+D,SAC/C,uBAEQ,2DAOnBK,EAAAA,EAAAA,MAAAG,EAAAA,SAAA,CAAAR,SAAA,CAEGnI,IACCiI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,UAC9BK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,yDACJK,EAAAA,EAAAA,MAAA,KAAAL,SAAA,CACGnI,EAAeqJ,YAAY,WAASrJ,EAAesJ,aAAa,6EAEnEd,EAAAA,EAAAA,MAAA,OAAKN,UAAU,kBAAiBC,SAAA,CAC7BnI,EAAeuJ,iBAAmB,IACjCf,EAAAA,EAAAA,MAAA,OAAKN,UAAU,wBAAuBC,SAAA,EACpCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAC,kBAC7BK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,kBAAsB,IAAEnI,EAAeuJ,iBAAiB,iBAChEf,EAAAA,EAAAA,MAAA,KAAGN,UAAU,aAAYC,SAAA,CAAC,0EAExBF,EAAAA,EAAAA,KAAA,UACEC,UAAU,aACVO,QAASA,IAAMrE,GAAkB,GAAM,GAAO+D,SAC/C,wCAQRnI,EAAewJ,kBAAoB,IAClChB,EAAAA,EAAAA,MAAA,OAAKN,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAC,kBAC7BK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,oBAAwB,IAAEnI,EAAewJ,kBAAkB,iBACnEhB,EAAAA,EAAAA,MAAA,KAAGN,UAAU,aAAYC,SAAA,CAAC,uEAExBF,EAAAA,EAAAA,KAAA,UACEC,UAAU,aACVO,QAASA,IAAMrE,GAAkB,GAAM,GAAO+D,SAC/C,wBAQRnI,EAAeyJ,qBACdjB,EAAAA,EAAAA,MAAA,OAAKN,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBC,SAAC,kBAClCK,EAAAA,EAAAA,MAAA,KAAAL,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,gBAAoB,qHAU1CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,SACvBrJ,EAAa4F,IAAKrD,IAAI,IAAAqI,EAAA,OACrBlB,EAAAA,EAAAA,MAAA,OAEEN,UAAS,aAAAxH,QAAiC,OAAlBzB,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoB+C,MAAOX,EAAKW,GAAK,WAAa,IAC1EyG,QAASA,IAAMnB,EAAuBjG,GAAM8G,SAAA,EAE5CK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,MAAAE,SAAK9G,EAAKC,QACVkH,EAAAA,EAAAA,MAAA,OAAKN,UAAU,YAAWC,SAAA,CACvB9G,EAAK6D,cACJ+C,EAAAA,EAAAA,KAAA,QAAMC,UAAU,iBAAgBC,UACT,QAApBuB,EAAArI,EAAK8D,uBAAe,IAAAuE,OAAA,EAApBA,EAAsBpI,OAAQ,aAGlCD,EAAK6H,UAAWjB,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAC,YAChD9G,EAAKc,WAAY8F,EAAAA,EAAAA,KAAA,QAAMC,UAAU,iBAAgBC,SAAE9G,EAAKc,WACxDd,EAAKkB,8BACJ0F,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mBAAkBC,SAAC,4BAKzCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mBAAkBC,SAAE9G,EAAKK,aAAe,8BAErD8G,EAAAA,EAAAA,MAAA,OAAKN,UAAU,cAAaC,SAAA,EACxB9G,EAAKa,QAAU,IAAIiH,MAAM,EAAG,GAAGzE,IAAK0E,IACpCnB,EAAAA,EAAAA,KAAA,QAAkBC,UAAU,YAAWC,SAAEiB,GAA9BA,KAEX/H,EAAKa,QAAU,IAAIgB,OAAS,IAC5BsF,EAAAA,EAAAA,MAAA,QAAMN,UAAU,aAAYC,SAAA,CAAC,KAAG9G,EAAKa,QAAU,IAAIgB,OAAS,EAAE,eAIlEsF,EAAAA,EAAAA,MAAA,OAAKN,UAAU,aAAYC,SAAA,EACzBK,EAAAA,EAAAA,MAAA,OAAKN,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAC,YAC5BF,EAAAA,EAAAA,KAAA,QAAAE,SAAO9G,EAAKe,kBAAoB,QAElCoG,EAAAA,EAAAA,MAAA,OAAKN,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAC,kBAC5BF,EAAAA,EAAAA,KAAA,QAAAE,SAAO9G,EAAKgB,aAAe,QAE7BmG,EAAAA,EAAAA,MAAA,OAAKN,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAC,kBAC5BK,EAAAA,EAAAA,MAAA,QAAAL,SAAA,CAAM,WAASR,EAAWtG,EAAKiB,sBAIhB,OAAlBrD,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoB+C,MAAOX,EAAKW,KAC/BiG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBC,UAClCF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,wBAhDL9G,EAAKW,SAuDhBwG,EAAAA,EAAAA,MAAA,OAAKN,UAAU,mBAAkBC,SAAA,CACnB,SAAXtJ,IACCoJ,EAAAA,EAAAA,KAAA,UACEC,UAAU,eACVO,QAlgBKkB,KACrB,IAAK1K,EAEH,YADA2K,MAAM,0CAIR,MAAMnC,EAASjG,IAEf,GAAwB,SAApBlB,EAA4B,CAE9B,MAAMiH,EAAWzG,EAAkB7B,GACnC,GAAIsI,EAAU,CACZ,MAAMC,EAAY,cAAA9G,OAAiB6G,EAAShJ,KAAI,KAAAmC,OAAI6G,EAASlG,MAC7DpD,EAASuJ,EAAc,CACrB/I,MAAO,CACLL,QAASI,EACTuC,WAAY9B,EACZJ,OAAQyB,IAGd,MAEErC,EAASwJ,EAAO7F,UAAW,CACzBnD,MAAO,CACLL,QAASI,EACTuC,WAAY9B,EACZJ,OAAQyB,IAIhB,MAEErC,EAASwJ,EAAO7F,UAAW,CACzBnD,MAAO,CACLL,QAASI,EACTqL,iBAAkB5K,EAClBJ,OAAQyB,MA+dEoI,UAAWzJ,EAAmBkJ,SAE7BV,EAAO9F,aAGS,SAApBrB,IACCkI,EAAAA,EAAAA,MAAA,OAAKN,UAAU,wBAAuBC,SAAA,EACpCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAC,kBAC5BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,iFAY1B,EAtqCqB2B,KAEjB7B,EAAAA,EAAAA,KAAC8B,EAAAA,GAAU,CAACC,SAAS,gBAAgBC,YAAY,EAAK9B,UACpDF,EAAAA,EAAAA,KAACpK,EAAmB,K","sources":["components/DAKSelection.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport repositoryCacheService from '../services/repositoryCacheService';\nimport dakTemplates from '../config/dak-templates.json';\nimport whoRepositories from '../config/who-repositories.json';\nimport { PageLayout, usePageParams } from './framework';\n\nconst DAKSelection = () => {\n  return (\n    <PageLayout pageName=\"dak-selection\" showHeader={true}>\n      <DAKSelectionContent />\n    </PageLayout>\n  );\n};\n\nconst DAKSelectionContent = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { params, profile } = usePageParams();\n  const userParam = params?.user;\n  \n  // Use profile from framework (PageProvider) or location state\n  const effectiveProfile = profile || location.state?.profile;\n  const effectiveProfileRef = useRef();\n  effectiveProfileRef.current = effectiveProfile;\n  const { action } = location.state || {};\n  \n  const [repositories, setRepositories] = useState([]);\n  const [selectedRepository, setSelectedRepository] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanProgress, setScanProgress] = useState(null);\n  const [currentlyScanningRepos, setCurrentlyScanningRepos] = useState(new Set());\n  const [usingCachedData, setUsingCachedData] = useState(false);\n  const [scanningErrors, setScanningErrors] = useState(null);\n  const [usingFallbackWhoRepositories, setUsingFallbackWhoRepositories] = useState(false);\n\n  // State for handling direct access without action\n  const [defaultAction, setDefaultAction] = useState(null);\n  const effectiveAction = action || defaultAction;\n\n  // Validate user parameter and profile consistency\n  useEffect(() => {\n    // If no user parameter in URL and no profile in state, redirect to landing\n    if (!userParam && !effectiveProfile) {\n      navigate('/');\n      return;\n    }\n    \n    // If user parameter exists but no action - use default action instead of redirecting\n    if (userParam && !action && !defaultAction) {\n      // For well-known organizations like WHO, default to 'edit' action to allow direct access\n      if (userParam === 'WorldHealthOrganization' || \n          userParam === 'WHO' || \n          userParam.toLowerCase().includes('health')) {\n        setDefaultAction('edit');\n        return;\n      }\n      // For other users, redirect to action selection as before\n      navigate(`/dak-action/${userParam}`, { replace: true });\n      return;\n    }\n    \n    // If user parameter exists but no profile, allow PageProvider to load it\n    // Don't redirect immediately - give the framework time to load the profile\n    if (userParam && !effectiveProfile && profile === undefined) {\n      // Profile is still loading from PageProvider, wait\n      return;\n    }\n    \n    // If user parameter exists but no profile after loading, redirect to landing\n    if (userParam && !effectiveProfile && profile === null) {\n      navigate('/');\n      return;\n    }\n    \n    // If user parameter exists and profile exists but they don't match - redirect to landing\n    if (userParam && effectiveProfile && effectiveProfile.login !== userParam) {\n      navigate('/');\n      return;\n    }\n    \n    // If profile exists but no user parameter, redirect to include user in URL\n    if (effectiveProfile && !userParam) {\n      navigate(`/dak-selection/${effectiveProfile.login}`, { \n        state: { profile: effectiveProfile, action: effectiveAction },\n        replace: true \n      });\n      return;\n    }\n  }, [userParam, effectiveProfile, action, defaultAction, profile, navigate, effectiveAction]);\n\n  // Helper function to extract user and repo from repository object\n  const getRepositoryPath = (repository) => {\n    if (!repository) return null;\n    \n    // Get user from owner.login or fallback to parsing full_name\n    const user = repository.owner?.login || repository.full_name?.split('/')[0];\n    const repo = repository.name;\n    \n    if (!user || !repo) {\n      console.error('Unable to extract user/repo from repository object:', repository);\n      return null;\n    }\n    \n    return { user, repo };\n  };\n\n  const getActionConfig = () => {\n    switch (effectiveAction) {\n      case 'edit':\n        return {\n          title: 'Select DAK to Edit',\n          description: 'Choose an existing DAK repository that you have permission to modify.',\n          buttonText: 'Continue to Edit Components',\n          nextRoute: '/dashboard'  // This will be constructed dynamically with user/repo\n        };\n      case 'fork':\n        return {\n          title: 'Select DAK to Fork',\n          description: 'Choose the source DAK repository that you want to fork.',\n          buttonText: 'Continue to Organization Selection',\n          nextRoute: '/organization-selection'\n        };\n      case 'create':\n        return {\n          title: 'Select Template DAK',\n          description: 'Choose a template repository to use as the base for your new DAK.',\n          buttonText: 'Continue to Organization Selection',\n          nextRoute: '/organization-selection',\n          showTemplate: true\n        };\n      default:\n        return {\n          title: 'Select DAK Repository',\n          description: 'Choose a DAK repository to work with.',\n          buttonText: 'Continue',\n          nextRoute: '/dashboard'  // This will be constructed dynamically with user/repo\n        };\n    }\n  };\n\n  const getMockRepositories = useCallback(() => {\n    const profile = effectiveProfileRef.current;\n    if (!profile || !profile.login) {\n      return [];\n    }\n    \n    // Mock repositories - only some have SMART guidelines compatibility\n    const allMockRepos = [\n      {\n        id: 1,\n        name: 'maternal-health-dak',\n        full_name: `${profile.login}/maternal-health-dak`,\n        description: 'WHO SMART Guidelines for Maternal Health - Digital Adaptation Kit',\n        html_url: `https://github.com/${profile.login}/maternal-health-dak`,\n        topics: ['who', 'smart-guidelines', 'maternal-health', 'dak'],\n        language: 'FML',\n        stargazers_count: 12,\n        forks_count: 3,\n        updated_at: '2024-01-15T10:30:00Z',\n        smart_guidelines_compatible: true\n      },\n      {\n        id: 2,\n        name: 'immunization-dak',\n        full_name: `${profile.login}/immunization-dak`,\n        description: 'Digital Adaptation Kit for Immunization Guidelines',\n        html_url: `https://github.com/${profile.login}/immunization-dak`,\n        topics: ['who', 'smart-guidelines', 'immunization', 'vaccines'],\n        language: 'FML',\n        stargazers_count: 8,\n        forks_count: 2,\n        updated_at: '2024-01-10T14:20:00Z',\n        smart_guidelines_compatible: true\n      },\n      {\n        id: 3,\n        name: 'anc-dak',\n        full_name: `${profile.login}/anc-dak`,\n        description: 'Antenatal Care Digital Adaptation Kit based on WHO guidelines',\n        html_url: `https://github.com/${profile.login}/anc-dak`,\n        topics: ['who', 'anc', 'antenatal-care', 'smart-guidelines'],\n        language: 'FML',\n        stargazers_count: 15,\n        forks_count: 5,\n        updated_at: '2024-01-12T09:15:00Z',\n        smart_guidelines_compatible: true\n      },\n      {\n        id: 4,\n        name: 'regular-health-app',\n        full_name: `${profile.login}/regular-health-app`,\n        description: 'A regular health application without SMART Guidelines',\n        html_url: `https://github.com/${profile.login}/regular-health-app`,\n        topics: ['health', 'app', 'javascript'],\n        language: 'JavaScript',\n        stargazers_count: 5,\n        forks_count: 1,\n        updated_at: '2024-01-08T16:45:00Z',\n        smart_guidelines_compatible: false // This one doesn't have sushi-config.yaml with smart.who.int.base\n      },\n      {\n        id: 5,\n        name: 'medical-database',\n        full_name: `${profile.login}/medical-database`,\n        description: 'Medical database with FHIR but not SMART Guidelines',\n        html_url: `https://github.com/${profile.login}/medical-database`,\n        topics: ['fhir', 'database', 'medical'],\n        language: 'SQL',\n        stargazers_count: 7,\n        forks_count: 2,\n        updated_at: '2024-01-05T11:20:00Z',\n        smart_guidelines_compatible: false // This one also doesn't have the required sushi-config.yaml\n      }\n    ];\n\n    // Filter to only return SMART guidelines compatible repositories\n    return allMockRepos.filter(repo => repo.smart_guidelines_compatible);\n  }, []);\n\n  const simulateEnhancedScanning = useCallback(async () => {\n    setIsScanning(true);\n    setRepositories([]); // Clear current repositories for progressive updates\n    \n    const mockRepos = getMockRepositories();\n    const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n    \n    try {\n      // Simulate concurrent scanning with enhanced display\n      for (let i = 0; i < mockRepos.length; i++) {\n        const repo = mockRepos[i];\n        \n        // Simulate starting to scan this repository\n        setScanProgress({\n          current: i + 1,\n          total: mockRepos.length,\n          currentRepo: repo.name,\n          progress: Math.round(((i + 1) / mockRepos.length) * 100),\n          completed: false,\n          started: true\n        });\n        \n        // Add to currently scanning repos\n        setCurrentlyScanningRepos(prev => new Set([...prev, repo.name]));\n        \n        // Simulate scanning time (1-2 seconds per repository)\n        await delay(1000 + Math.random() * 1000);\n        \n        // Add found repository to results in alphabetical order\n        setRepositories(prevRepos => {\n          const newRepos = [...prevRepos, repo];\n          return newRepos.sort((a, b) => a.name.localeCompare(b.name));\n        });\n        \n        // Simulate completion\n        setScanProgress({\n          current: i + 1,\n          total: mockRepos.length,\n          currentRepo: repo.name,\n          progress: Math.round(((i + 1) / mockRepos.length) * 100),\n          completed: true\n        });\n        \n        // Remove from currently scanning repos\n        setCurrentlyScanningRepos(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(repo.name);\n          return newSet;\n        });\n        \n        // Small delay before next repository\n        await delay(300);\n      }\n      \n      // After all repositories are scanned, stop the scanning state\n      console.log('🎉 Demo scanning completed, stopping scanning state');\n      setTimeout(() => {\n        setIsScanning(false);\n        setScanProgress(null);\n        setCurrentlyScanningRepos(new Set());\n      }, 500); // Small delay to show completion\n    } catch (error) {\n      console.error('Error in simulated scanning:', error);\n      // Make sure to stop scanning on error\n      setIsScanning(false);\n      setScanProgress(null);\n      setCurrentlyScanningRepos(new Set());\n    }\n  }, [getMockRepositories]);\n\n  const fetchRepositories = useCallback(async (forceRescan = false, useCachedData = false) => {\n    setLoading(true);\n    setError(null);\n    setIsScanning(false);\n    setScanProgress(null);\n    setCurrentlyScanningRepos(new Set());\n    setUsingCachedData(false);\n    setScanningErrors(null);\n    setUsingFallbackWhoRepositories(false);\n    \n    try {\n      let repos = [];\n      let cachedData = null;\n      \n      if (effectiveAction === 'create') {\n        // For create action, load templates from configuration\n        repos = dakTemplates.dakTemplates.map((template, index) => ({\n          id: -(index + 1),\n          name: template.repo,\n          full_name: `${template.owner}/${template.repo}`,\n          description: template.description,\n          html_url: template.repository,\n          clone_url: `${template.repository}.git`,\n          topics: template.tags.map(tag => tag.toLowerCase().replace(/\\s+/g, '-')),\n          language: 'FML',\n          stargazers_count: 15,\n          forks_count: 8,\n          updated_at: new Date().toISOString(),\n          smart_guidelines_compatible: true,\n          is_template: true,\n          template_config: template,\n          owner: {\n            login: template.owner,\n            avatar_url: template.owner === 'WorldHealthOrganization' \n              ? 'https://avatars.githubusercontent.com/u/9166906?s=200&v=4'\n              : 'https://github.com/favicon.ico'\n          }\n        }));\n        // Sort templates alphabetically by name\n        repos.sort((a, b) => a.name.localeCompare(b.name));\n        setRepositories(repos);\n      } else {\n        // For edit/fork actions, implement cache-first approach\n        \n        // Always check cache first unless explicitly forcing a rescan\n        if (githubService.isAuth() && !forceRescan) {\n          try {\n            cachedData = repositoryCacheService.getCachedRepositories(effectiveProfile.login, effectiveProfile.type === 'org' ? 'org' : 'user');\n          } catch (cacheError) {\n            console.warn('Error accessing repository cache:', cacheError);\n          }\n        }\n\n        if (cachedData && !forceRescan) {\n          // Use cached data - show immediately\n          console.log('Using cached repository data', repositoryCacheService.getCacheInfo(effectiveProfile.login, effectiveProfile.type === 'org' ? 'org' : 'user'));\n          repos = cachedData.repositories;\n          setUsingCachedData(true);\n          // Sort cached repositories alphabetically\n          repos.sort((a, b) => a.name.localeCompare(b.name));\n          setRepositories(repos);\n        } else {\n          // No cached data or forcing rescan - initiate progressive scanning\n          if (githubService.isAuth()) {\n            console.log(forceRescan ? '🔄 Force rescanning repositories...' : '🔍 No cached data, initiating scan...');\n            setIsScanning(true);\n            setLoading(false); // Stop loading state to show scanning progress\n            \n            // Important: Don't clear existing repositories when scanning\n            // This preserves any cached repos that were already displayed\n            console.log('📊 Starting enhanced scanning display for authenticated user');\n            \n            // Add timeout wrapper to prevent infinite scanning\n            const SCAN_TIMEOUT = 60000; // 60 seconds timeout\n            const timeoutPromise = new Promise((_, reject) => {\n              setTimeout(() => reject(new Error('Scanning timeout - operation took longer than 60 seconds')), SCAN_TIMEOUT);\n            });\n            \n            const scanPromise = githubService.getSmartGuidelinesRepositoriesProgressive(\n              effectiveProfile.login, \n              effectiveProfile.type === 'org' ? 'org' : 'user',\n              // onRepositoryFound callback - add repo to list immediately in alphabetical order\n              (foundRepo) => {\n                setRepositories(prevRepos => {\n                  // Avoid duplicates\n                  const exists = prevRepos.some(repo => repo.id === foundRepo.id);\n                  if (!exists) {\n                    // Add the new repository and sort alphabetically by name\n                    const newRepos = [...prevRepos, foundRepo];\n                    return newRepos.sort((a, b) => a.name.localeCompare(b.name));\n                  }\n                  return prevRepos;\n                });\n              },\n              // onProgress callback - update progress indicator with enhanced display\n              (progress) => {\n                console.log('📊 Real scanning progress:', progress);\n                setScanProgress(progress);\n                \n                // Update scanning errors if provided\n                if (progress.scanningErrors) {\n                  setScanningErrors(progress.scanningErrors);\n                }\n                \n                // Track repositories currently being scanned with enhanced display timing\n                if (progress.started && !progress.completed) {\n                  // Repository is being started - add to currently scanning set\n                  console.log('🔍 Started scanning:', progress.currentRepo);\n                  setCurrentlyScanningRepos(prev => new Set([...prev, progress.currentRepo]));\n                  \n                  // Ensure the scanning state is properly set\n                  setScanProgress({\n                    ...progress,\n                    started: true,\n                    completed: false\n                  });\n                } else if (progress.completed) {\n                  // Repository is completed - show completion state\n                  console.log('✅ Completed scanning:', progress.currentRepo);\n                  setScanProgress({\n                    ...progress,\n                    completed: true\n                  });\n                  \n                  // Remove from currently scanning set after a brief moment\n                  setTimeout(() => {\n                    setCurrentlyScanningRepos(prev => {\n                      const newSet = new Set(prev);\n                      newSet.delete(progress.currentRepo);\n                      return newSet;\n                    });\n                  }, 200);\n                  \n                  // Check if this is the last repository being scanned\n                  if (progress.current === progress.total) {\n                    // All repositories have been scanned, stop the scanning state\n                    console.log('🎉 All repositories scanned, stopping scanning state');\n                    setTimeout(() => {\n                      setIsScanning(false);\n                      setScanProgress(null);\n                      setCurrentlyScanningRepos(new Set());\n                    }, 500); // Small delay to show completion\n                  }\n                } else if (progress.total === 0 && progress.completed) {\n                  // Special case: no repositories to scan\n                  console.log('🎉 No repositories to scan, stopping scanning state');\n                  setTimeout(() => {\n                    setIsScanning(false);\n                    setScanProgress(null);\n                    setCurrentlyScanningRepos(new Set());\n                  }, 500);\n                }\n              },\n              // onError callback - track individual scanning errors\n              (errorInfo) => {\n                console.warn('Individual repository scan error:', errorInfo);\n              }\n            );\n            \n            try {\n              // Race between the scanning promise and timeout\n              const scanResult = await Promise.race([scanPromise, timeoutPromise]);\n              \n              // Handle new return format\n              if (scanResult && typeof scanResult === 'object' && scanResult.repositories) {\n                repos = scanResult.repositories;\n                if (scanResult.scanningErrors) {\n                  setScanningErrors(scanResult.scanningErrors);\n                }\n              } else {\n                // Fallback for old format or unexpected result\n                repos = Array.isArray(scanResult) ? scanResult : [];\n              }\n            } catch (timeoutError) {\n              console.error('⏰ Scanning timed out:', timeoutError.message);\n              // Stop scanning on timeout\n              setIsScanning(false);\n              setScanProgress(null);\n              setCurrentlyScanningRepos(new Set());\n              throw new Error('Repository scanning timed out. Please try again or use cached data if available.');\n            }\n            \n            // Cache the results for future quick access\n            repositoryCacheService.setCachedRepositories(\n              effectiveProfile.login, \n              effectiveProfile.type === 'org' ? 'org' : 'user', \n              repos\n            );\n            \n            // Update repositories with final results (in case callback missed any)\n            // Sort alphabetically to ensure consistent ordering\n            const sortedRepos = repos.sort((a, b) => a.name.localeCompare(b.name));\n            setRepositories(sortedRepos);\n          } else {\n            // Handle unauthenticated access - special handling for WHO organization\n            if (effectiveProfile.login === 'WorldHealthOrganization') {\n              console.log('🏥 WHO organization unauthenticated access - using known repositories');\n              \n              // Check for cached WHO data first (even for unauthenticated users)\n              let whoKnownRepos = null;\n              try {\n                whoKnownRepos = repositoryCacheService.getCachedRepositories(\n                  'WorldHealthOrganization', \n                  'org', \n                  'who-known-repos' // special cache key for WHO known repos\n                );\n              } catch (cacheError) {\n                console.warn('Error accessing WHO repository cache:', cacheError);\n              }\n\n              if (whoKnownRepos && !forceRescan) {\n                console.log('💾 Using cached WHO known repositories');\n                repos = whoKnownRepos.repositories;\n                setUsingCachedData(true);\n              } else {\n                console.log('🔍 Loading WHO known repositories...');\n                \n                // First try public GitHub API with rate limiting protection\n                try {\n                  // Check if we should skip API calls to avoid rate limiting\n                  const shouldSkipApiCalls = await githubService.shouldSkipApiCalls();\n                  \n                  if (shouldSkipApiCalls) {\n                    console.log('🚫 Skipping public API call due to rate limit protection, using fallback data');\n                    throw new Error('Rate limit protection - using fallback data');\n                  }\n                  \n                  const publicRepos = await githubService.getSmartGuidelinesRepositories(\n                    'WorldHealthOrganization', \n                    'org',\n                    true // Skip compatibility checks for unauthenticated WHO access to avoid rate limiting\n                  );\n                  \n                  if (publicRepos && publicRepos.length > 0) {\n                    console.log(`✅ Found ${publicRepos.length} WHO repositories via public API`);\n                    repos = publicRepos;\n                    \n                    // Cache the public API results\n                    repositoryCacheService.setCachedRepositories(\n                      'WorldHealthOrganization', \n                      'org', \n                      repos,\n                      'who-known-repos'\n                    );\n                  } else {\n                    throw new Error('No repositories found via public API');\n                  }\n                } catch (publicApiError) {\n                  console.warn('Public API failed for WHO, using known repositories:', publicApiError);\n                  \n                  // Set flag to indicate we're using fallback data\n                  setUsingFallbackWhoRepositories(true);\n                  \n                  // Fallback to known WHO repositories from config\n                  repos = whoRepositories.whoKnownRepositories.map(repo => ({\n                    ...repo,\n                    smart_guidelines_compatible: true\n                  }));\n                  \n                  // Cache the known repositories for future use\n                  repositoryCacheService.setCachedRepositories(\n                    'WorldHealthOrganization', \n                    'org', \n                    repos,\n                    'who-known-repos'\n                  );\n                  \n                  console.log(`📚 Using ${repos.length} known WHO SMART Guidelines repositories`);\n                }\n              }\n              \n              // Sort repositories alphabetically\n              repos.sort((a, b) => a.name.localeCompare(b.name));\n              setRepositories(repos);\n              \n            } else {\n              // Use public GitHub API for other organizations/users when not authenticated\n              console.log('🔍 Not authenticated, using public GitHub API...');\n              try {\n                // Check if we should skip API calls to avoid rate limiting\n                const shouldSkipApiCalls = await githubService.shouldSkipApiCalls();\n                \n                repos = await githubService.getSmartGuidelinesRepositories(\n                  effectiveProfile.login, \n                  effectiveProfile.type === 'org' ? 'org' : 'user',\n                  shouldSkipApiCalls // Skip compatibility checks if rate limited\n                );\n                // Sort repositories alphabetically\n                repos.sort((a, b) => a.name.localeCompare(b.name));\n                setRepositories(repos);\n              } catch (publicApiError) {\n                console.warn('Public API failed, falling back to demo data:', publicApiError);\n                // Only fall back to mock data if public API fails AND it's not WHO\n                await simulateEnhancedScanning();\n                repos = getMockRepositories();\n                // Sort mock repositories alphabetically\n                repos.sort((a, b) => a.name.localeCompare(b.name));\n                setRepositories(repos);\n              }\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching repositories:', error);\n      setError('Failed to fetch repositories. Please check your connection and try again.');\n      // Fallback to mock data for demonstration\n      const mockRepos = getMockRepositories();\n      mockRepos.sort((a, b) => a.name.localeCompare(b.name));\n      setRepositories(mockRepos);\n      // Make sure to stop scanning on error\n      setIsScanning(false);\n      setScanProgress(null);\n      setCurrentlyScanningRepos(new Set());\n    } finally {\n      setLoading(false);\n      // Don't automatically stop scanning here for authenticated progressive scans\n      // or for demo scanning - let them manage their own scanning state\n      if (!githubService.isAuth() && effectiveAction === 'create') {\n        // Only auto-stop for create action when not authenticated\n        setIsScanning(false);\n        setScanProgress(null);\n        setCurrentlyScanningRepos(new Set());\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [effectiveProfile, effectiveAction]);\n\n  useEffect(() => {\n    // Only proceed if we have valid profile, action and userParam consistency\n    if (!effectiveProfile || !effectiveAction || !userParam || effectiveProfile.login !== userParam) {\n      return;\n    }\n    \n    // Always check cache first on initial load\n    fetchRepositories(false, false); // forceRescan=false, useCachedData=false (but still check cache first)\n  }, [effectiveProfile, effectiveAction, userParam, fetchRepositories]);\n\n  const handleRepositorySelect = (repo) => {\n    setSelectedRepository(repo);\n    \n    // For 'edit' action, automatically navigate after selection\n    if (effectiveAction === 'edit') {\n      // Add a small delay for visual feedback before navigation\n      setTimeout(() => {\n        const repoPath = getRepositoryPath(repo);\n        if (repoPath) {\n          const dashboardUrl = `/dashboard/${repoPath.user}/${repoPath.repo}`;\n          navigate(dashboardUrl, {\n            state: {\n              profile: effectiveProfile,\n              repository: repo,\n              action: effectiveAction\n            }\n          });\n        } else {\n          // Fallback to original behavior if unable to extract path\n          const config = getActionConfig();\n          navigate(config.nextRoute, {\n            state: {\n              profile: effectiveProfile,\n              repository: repo,\n              action: effectiveAction\n            }\n          });\n        }\n      }, 300); // 300ms delay for visual feedback\n    }\n  };\n\n  const handleContinue = () => {\n    if (!selectedRepository) {\n      alert('Please select a repository to continue');\n      return;\n    }\n\n    const config = getActionConfig();\n    \n    if (effectiveAction === 'edit') {\n      // Go directly to dashboard for editing with user/repo parameters\n      const repoPath = getRepositoryPath(selectedRepository);\n      if (repoPath) {\n        const dashboardUrl = `/dashboard/${repoPath.user}/${repoPath.repo}`;\n        navigate(dashboardUrl, {\n          state: {\n            profile: effectiveProfile,\n            repository: selectedRepository,\n            action: effectiveAction\n          }\n        });\n      } else {\n        // Fallback to original behavior if unable to extract path\n        navigate(config.nextRoute, {\n          state: {\n            profile: effectiveProfile,\n            repository: selectedRepository,\n            action: effectiveAction\n          }\n        });\n      }\n    } else {\n      // Go to organization selection for fork/create\n      navigate(config.nextRoute, {\n        state: {\n          profile: effectiveProfile,\n          sourceRepository: selectedRepository,\n          action: effectiveAction\n        }\n      });\n    }\n  };\n\n  const handleRescan = () => {\n    fetchRepositories(true, false); // Force rescan, don't use cache\n  };\n\n  const handleUseCachedData = () => {\n    fetchRepositories(false, false); // Don't force rescan, check cache first (this should use cache if available)\n  };\n\n  const handleDemoScanning = async () => {\n    // Simulate the enhanced scanning display for demonstration purposes\n    await simulateEnhancedScanning();\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  if (!effectiveProfile || !effectiveAction || !userParam || effectiveProfile.login !== userParam) {\n    return <div className=\"dak-selection\"><div style={{color: 'white', textAlign: 'center', padding: '2rem'}}>Redirecting...</div></div>;\n  }\n\n  const config = getActionConfig();\n\n  return (\n    <div className=\"dak-selection\">\n      <div className=\"selection-content\">\n        <div className=\"selection-main\">\n          <div className=\"selection-header\">\n            <div className=\"selection-title\">\n              <h1>{config.title}</h1>\n              <p className=\"selection-subtitle\">{config.description}</p>\n            </div>\n          </div>\n          <div className=\"selection-intro\">\n            {effectiveAction === 'create' && (\n              <div className=\"template-notice\">\n                <span className=\"notice-icon\">ℹ️</span>\n                <span>You'll create a new repository based on the WHO SMART Guidelines template.</span>\n              </div>\n            )}\n            \n            {effectiveAction !== 'create' && githubService.isAuth() && (\n              <div className=\"cache-controls\">\n                {usingCachedData ? (\n                  <div className=\"cache-info\">\n                    <span className=\"cache-icon\">💾</span>\n                    <span>Using cached data. </span>\n                    <button \n                      onClick={handleRescan} \n                      className=\"rescan-link\"\n                      disabled={isScanning}\n                    >\n                      {isScanning ? 'Scanning...' : 'Refresh'}\n                    </button>\n                  </div>\n                ) : (\n                  <div className=\"scan-controls\">\n                    {!isScanning && !loading && (\n                      <>\n                        <button \n                          onClick={handleRescan} \n                          className=\"rescan-btn\"\n                          disabled={isScanning}\n                        >\n                          🔄 Rescan Repositories\n                        </button>\n                        {repositoryCacheService.getCachedRepositories(effectiveProfile.login, effectiveProfile.type === 'org' ? 'org' : 'user') && (\n                          <button \n                            onClick={handleUseCachedData} \n                            className=\"cache-btn\"\n                            disabled={isScanning}\n                          >\n                            💾 Use Cached Data\n                          </button>\n                        )}\n                      </>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n            {effectiveAction !== 'create' && !githubService.isAuth() && (\n              <>\n                {usingCachedData && effectiveProfile.login === 'WorldHealthOrganization' && (\n                  <div className=\"cache-info\">\n                    <span className=\"cache-icon\">💾</span>\n                    <span>Using cached WHO repositories. </span>\n                    <button \n                      onClick={handleRescan} \n                      className=\"rescan-link\"\n                      disabled={isScanning}\n                    >\n                      {isScanning ? 'Refreshing...' : 'Refresh'}\n                    </button>\n                  </div>\n                )}\n                {!isScanning && !loading && !usingCachedData && effectiveProfile.login === 'WorldHealthOrganization' && (\n                  <div className=\"who-scan-controls\">\n                    <div className=\"who-info\">\n                      <span className=\"who-icon\">🏥</span>\n                      <span>WHO organization public access. </span>\n                      <button \n                        onClick={handleRescan} \n                        className=\"rescan-btn\"\n                        disabled={isScanning}\n                      >\n                        🔄 Refresh WHO Repositories\n                      </button>\n                    </div>\n                  </div>\n                )}\n                {!isScanning && !loading && effectiveProfile.login !== 'WorldHealthOrganization' && (\n                  <div className=\"demo-controls\">\n                    <div className=\"demo-info\">\n                      <span className=\"demo-icon\">🎭</span>\n                      <span>Not authenticated. </span>\n                      <button \n                        onClick={handleDemoScanning} \n                        className=\"demo-scan-btn\"\n                        disabled={isScanning}\n                      >\n                        ✨ Demo Enhanced Scanning Display\n                      </button>\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n\n          {/* Warning message when using fallback WHO repositories */}\n          {usingFallbackWhoRepositories && effectiveProfile.login === 'WorldHealthOrganization' && (\n            <div className=\"fallback-warning\">\n              <div className=\"warning-content\">\n                <span className=\"warning-icon\">⚠️</span>\n                <div className=\"warning-text\">\n                  <strong>Connection Issue:</strong> There was a problem connecting to GitHub to fetch live repository data. \n                  Using known WHO SMART Guidelines repositories as fallback. \n                  <button \n                    onClick={handleRescan} \n                    className=\"retry-link\"\n                    disabled={isScanning}\n                  >\n                    {isScanning ? 'Retrying...' : 'Try again'}\n                  </button> to get the most up-to-date information.\n                </div>\n              </div>\n            </div>\n          )}\n\n          {loading ? (\n            <div className=\"loading\">\n              <div className=\"spinner\"></div>\n              <p>Loading repositories...</p>\n            </div>\n          ) : isScanning ? (\n            <div className=\"scanning-status\">\n              <div className=\"scanning-header\">\n                <div className=\"spinner\"></div>\n                <h3>Scanning repositories for SMART Guidelines compatibility...</h3>\n              </div>\n              {scanProgress && (\n                <div className=\"progress-container\">\n                  <div className=\"progress-bar\">\n                    <div \n                      className=\"progress-fill\" \n                      style={{ width: `${scanProgress.progress}%` }}\n                    ></div>\n                  </div>\n                  <div className=\"progress-info\">\n                    {/* Unified scanning status showing percentage and currently testing repos */}\n                    <div className=\"unified-scanning-status\">\n                      <div className=\"scanning-header-unified\">\n                        <div className=\"progress-stats\">\n                          <span className=\"progress-text\">\n                            {scanProgress.current}/{scanProgress.total} repositories\n                          </span>\n                          <span className=\"progress-percentage\">{scanProgress.progress}%</span>\n                        </div>\n                        {/* Always show Currently Testing section to maintain consistent height */}\n                        <div className=\"currently-testing-unified\">\n                          <span className=\"scanning-icon\">🔍</span>\n                          <span>Currently Testing:</span>\n                          <div className=\"currently-scanning-repos\">\n                            {currentlyScanningRepos.size > 0 ? (\n                              Array.from(currentlyScanningRepos).map((repoName) => (\n                                <div key={repoName} className=\"scanning-repo-item\">\n                                  <span className=\"repo-status-indicator\">⚡</span>\n                                  <span className=\"scanning-repo-name\">{repoName}</span>\n                                </div>\n                              ))\n                            ) : (\n                              <div className=\"scanning-repo-item\">\n                                <span className=\"repo-status-indicator\">⏳</span>\n                                <span className=\"scanning-repo-name\">Preparing scan...</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"scanning-note\">\n                    <span className=\"note-icon\">⚡</span>\n                    <span>Scanning up to 5 repositories concurrently to improve speed</span>\n                  </div>\n                </div>\n              )}\n              <div className=\"scanning-results\">\n                <p>Found repositories will appear below as they are discovered:</p>\n                <div className=\"repo-grid\">\n                  {repositories.map((repo) => (\n                    <div \n                      key={repo.id}\n                      className={`repo-card ${selectedRepository?.id === repo.id ? 'selected' : ''} scanning-found`}\n                      onClick={() => handleRepositorySelect(repo)}\n                    >\n                      <div className=\"repo-header-info\">\n                        <h3>{repo.name} <span className=\"new-badge\">✨ Found</span></h3>\n                        <div className=\"repo-meta\">\n                          {repo.is_template && (\n                            <span className=\"template-badge\">\n                              {repo.template_config?.name || 'Template'}\n                            </span>\n                          )}\n                          {repo.private && <span className=\"private-badge\">Private</span>}\n                          {repo.language && <span className=\"language-badge\">{repo.language}</span>}\n                          {repo.smart_guidelines_compatible && (\n                            <span className=\"compatible-badge\">SMART Guidelines</span>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <p className=\"repo-description\">{repo.description || 'No description available'}</p>\n                      \n                      <div className=\"repo-topics\">\n                        {(repo.topics || []).slice(0, 3).map((topic) => (\n                          <span key={topic} className=\"topic-tag\">{topic}</span>\n                        ))}\n                        {(repo.topics || []).length > 3 && (\n                          <span className=\"topic-more\">+{(repo.topics || []).length - 3} more</span>\n                        )}\n                      </div>\n                      \n                      <div className=\"repo-stats\">\n                        <div className=\"stat\">\n                          <span className=\"stat-icon\">⭐</span>\n                          <span>{repo.stargazers_count || 0}</span>\n                        </div>\n                        <div className=\"stat\">\n                          <span className=\"stat-icon\">🍴</span>\n                          <span>{repo.forks_count || 0}</span>\n                        </div>\n                        <div className=\"stat\">\n                          <span className=\"stat-icon\">📅</span>\n                          <span>Updated {formatDate(repo.updated_at)}</span>\n                        </div>\n                      </div>\n\n                      {selectedRepository?.id === repo.id && (\n                        <div className=\"selection-indicator\">\n                          <span>✓ Selected</span>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          ) : error ? (\n            <div className=\"error-state\">\n              <h3>Error loading repositories</h3>\n              <p>{error}</p>\n              <button onClick={fetchRepositories} className=\"retry-btn\">\n                Try Again\n              </button>\n            </div>\n          ) : repositories.length === 0 ? (\n            <div className=\"empty-state\">\n              <h3>No repositories found</h3>\n              <p>\n                {effectiveAction === 'create' \n                  ? 'Unable to load the WHO template repository.'\n                  : 'No DAK repositories found with SMART Guidelines compatibility.'\n                }\n              </p>\n              \n              {/* Special message for WHO organization when not authenticated */}\n              {userParam === 'WorldHealthOrganization' && !githubService.isAuth() && (\n                <div className=\"who-auth-notice\">\n                  <h4>🔐 Authentication Required for WHO Organization</h4>\n                  <p>\n                    To access WHO SMART Guidelines repositories, you need to authenticate with GitHub. \n                    The WHO organization has many repositories, and unauthenticated access is limited by GitHub's rate limits.\n                  </p>\n                  <div className=\"auth-instructions\">\n                    <p><strong>Expected repositories include:</strong></p>\n                    <ul>\n                      <li>smart-immunizations - WHO SMART Guidelines for Immunizations</li>\n                      <li>smart-trust - WHO SMART Guidelines for Trust and Verification</li>\n                      <li>smart-base - WHO SMART Guidelines Base Implementation Guide</li>\n                      <li>smart-anc - WHO SMART Guidelines for Antenatal Care</li>\n                    </ul>\n                    <p>\n                      <strong>To access these repositories:</strong> Please go back to the home page and authenticate with your GitHub account.\n                    </p>\n                  </div>\n                </div>\n              )}\n              \n              {/* Show scanning errors if any occurred */}\n              {scanningErrors && (\n                <div className=\"scanning-errors-summary\">\n                  <h4>⚠️ Scanning Issues Detected</h4>\n                  <p>\n                    {scanningErrors.totalErrors} out of {scanningErrors.totalScanned} repositories could not be checked:\n                  </p>\n                  <div className=\"error-types\">\n                    {scanningErrors.rateLimitedCount > 0 && (\n                      <div className=\"error-type\">\n                        <span className=\"error-icon\">🚫</span>\n                        <span>Rate Limited: {scanningErrors.rateLimitedCount} repositories</span>\n                      </div>\n                    )}\n                    {scanningErrors.networkErrorCount > 0 && (\n                      <div className=\"error-type\">\n                        <span className=\"error-icon\">🌐</span>\n                        <span>Network Issues: {scanningErrors.networkErrorCount} repositories</span>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"retry-suggestion\">\n                    <p>\n                      <strong>💡 Suggestion:</strong> These issues are usually temporary. \n                      <button \n                        className=\"retry-link\" \n                        onClick={() => fetchRepositories(true, false)}\n                      >\n                        Try scanning again\n                      </button> in a few minutes to find more repositories.\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            <>\n              {/* Show scanning errors if any occurred but we still found some repositories */}\n              {scanningErrors && (\n                <div className=\"scanning-errors\">\n                  <div className=\"error-summary\">\n                    <h3>⚠️ Some Repositories Could Not Be Checked</h3>\n                    <p>\n                      {scanningErrors.totalErrors} out of {scanningErrors.totalScanned} repositories could not be checked for SMART Guidelines compatibility:\n                    </p>\n                    <div className=\"error-breakdown\">\n                      {scanningErrors.rateLimitedCount > 0 && (\n                        <div className=\"error-item rate-limit\">\n                          <span className=\"error-icon\">🚫</span>\n                          <div className=\"error-details\">\n                            <strong>Rate Limited:</strong> {scanningErrors.rateLimitedCount} repositories\n                            <p className=\"error-help\">\n                              GitHub API rate limit exceeded. Some repositories couldn't be checked. \n                              <button \n                                className=\"retry-link\" \n                                onClick={() => fetchRepositories(true, false)}\n                              >\n                                Try again in a few minutes\n                              </button>\n                            </p>\n                          </div>\n                        </div>\n                      )}\n                      \n                      {scanningErrors.networkErrorCount > 0 && (\n                        <div className=\"error-item network\">\n                          <span className=\"error-icon\">🌐</span>\n                          <div className=\"error-details\">\n                            <strong>Network Issues:</strong> {scanningErrors.networkErrorCount} repositories\n                            <p className=\"error-help\">\n                              Network connectivity problems prevented checking some repositories.\n                              <button \n                                className=\"retry-link\" \n                                onClick={() => fetchRepositories(true, false)}\n                              >\n                                Retry scan\n                              </button>\n                            </p>\n                          </div>\n                        </div>\n                      )}\n                      \n                      {scanningErrors.hasRetryableErrors && (\n                        <div className=\"retry-suggestion\">\n                          <span className=\"suggestion-icon\">💡</span>\n                          <p>\n                            <strong>Suggestion:</strong> These issues are usually temporary. \n                            Retrying the scan in a few minutes may find more repositories.\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"repo-grid\">\n                {repositories.map((repo) => (\n                  <div \n                    key={repo.id}\n                    className={`repo-card ${selectedRepository?.id === repo.id ? 'selected' : ''}`}\n                    onClick={() => handleRepositorySelect(repo)}\n                  >\n                    <div className=\"repo-header-info\">\n                      <h3>{repo.name}</h3>\n                      <div className=\"repo-meta\">\n                        {repo.is_template && (\n                          <span className=\"template-badge\">\n                            {repo.template_config?.name || 'Template'}\n                          </span>\n                        )}\n                        {repo.private && <span className=\"private-badge\">Private</span>}\n                        {repo.language && <span className=\"language-badge\">{repo.language}</span>}\n                        {repo.smart_guidelines_compatible && (\n                          <span className=\"compatible-badge\">SMART Guidelines</span>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <p className=\"repo-description\">{repo.description || 'No description available'}</p>\n                    \n                    <div className=\"repo-topics\">\n                      {(repo.topics || []).slice(0, 3).map((topic) => (\n                        <span key={topic} className=\"topic-tag\">{topic}</span>\n                      ))}\n                      {(repo.topics || []).length > 3 && (\n                        <span className=\"topic-more\">+{(repo.topics || []).length - 3} more</span>\n                      )}\n                    </div>\n                    \n                    <div className=\"repo-stats\">\n                      <div className=\"stat\">\n                        <span className=\"stat-icon\">⭐</span>\n                        <span>{repo.stargazers_count || 0}</span>\n                      </div>\n                      <div className=\"stat\">\n                        <span className=\"stat-icon\">🍴</span>\n                        <span>{repo.forks_count || 0}</span>\n                      </div>\n                      <div className=\"stat\">\n                        <span className=\"stat-icon\">📅</span>\n                        <span>Updated {formatDate(repo.updated_at)}</span>\n                      </div>\n                    </div>\n\n                    {selectedRepository?.id === repo.id && (\n                      <div className=\"selection-indicator\">\n                        <span>✓ Selected</span>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"selection-footer\">\n                {action !== 'edit' && (\n                  <button \n                    className=\"continue-btn\"\n                    onClick={handleContinue}\n                    disabled={!selectedRepository}\n                  >\n                    {config.buttonText}\n                  </button>\n                )}\n                {effectiveAction === 'edit' && (\n                  <div className=\"direct-selection-note\">\n                    <span className=\"note-icon\">💡</span>\n                    <span>Click on a repository above to start editing its components</span>\n                  </div>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DAKSelection;"],"names":["DAKSelectionContent","_location$state","location","useLocation","navigate","useNavigate","params","profile","usePageParams","userParam","user","effectiveProfile","state","effectiveProfileRef","useRef","current","action","repositories","setRepositories","useState","selectedRepository","setSelectedRepository","loading","setLoading","error","setError","isScanning","setIsScanning","scanProgress","setScanProgress","currentlyScanningRepos","setCurrentlyScanningRepos","Set","usingCachedData","setUsingCachedData","scanningErrors","setScanningErrors","usingFallbackWhoRepositories","setUsingFallbackWhoRepositories","defaultAction","setDefaultAction","effectiveAction","useEffect","undefined","login","concat","replace","toLowerCase","includes","getRepositoryPath","repository","_repository$owner","_repository$full_name","owner","full_name","split","repo","name","console","getActionConfig","title","description","buttonText","nextRoute","showTemplate","getMockRepositories","useCallback","id","html_url","topics","language","stargazers_count","forks_count","updated_at","smart_guidelines_compatible","filter","simulateEnhancedScanning","async","mockRepos","delay","ms","Promise","resolve","setTimeout","i","length","total","currentRepo","progress","Math","round","completed","started","prev","random","prevRepos","sort","a","b","localeCompare","newSet","delete","log","fetchRepositories","forceRescan","arguments","repos","cachedData","dakTemplates","map","template","index","clone_url","tags","tag","Date","toISOString","is_template","template_config","avatar_url","githubService","isAuth","repositoryCacheService","getCachedRepositories","type","cacheError","warn","getCacheInfo","SCAN_TIMEOUT","timeoutPromise","_","reject","Error","scanPromise","getSmartGuidelinesRepositoriesProgressive","foundRepo","some","_objectSpread","errorInfo","scanResult","race","Array","isArray","timeoutError","message","setCachedRepositories","sortedRepos","whoKnownRepos","shouldSkipApiCalls","publicRepos","getSmartGuidelinesRepositories","publicApiError","whoRepositories","handleRepositorySelect","repoPath","dashboardUrl","config","handleRescan","formatDate","dateString","toLocaleDateString","year","month","day","_jsx","className","children","style","color","textAlign","padding","_jsxs","onClick","disabled","_Fragment","handleUseCachedData","width","size","from","repoName","_repo$template_config","private","slice","topic","totalErrors","totalScanned","rateLimitedCount","networkErrorCount","hasRetryableErrors","_repo$template_config2","handleContinue","alert","sourceRepository","DAKSelection","PageLayout","pageName","showHeader"],"sourceRoot":""}