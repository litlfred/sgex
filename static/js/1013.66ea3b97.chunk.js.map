{"version":3,"file":"static/js/1013.66ea3b97.chunk.js","mappings":"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","sources":["../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark-util-character/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/extend/index.js","../node_modules/style-to-js/src/utilities.ts","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/style-to-js/src/index.ts","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/inline-style-parser/index.js"],"sourcesContent":["import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * * if a processor is given,\n *   runs the (rehype) plugins used on it with a hast tree,\n *   then discards the result (*bridge mode*)\n * * otherwise,\n *   returns a hast tree,\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**:\n * > It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\n *   output the raw HTML.\n *   This is typically discouraged as noted by the option name but is useful if\n *   you completely trust authors\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *   into standard hast nodes (`element`, `text`, etc);\n *   this is a heavy task as it needs a full HTML parser,\n *   but it is the only way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark,\n * which we follow by default.\n * They are supported by GitHub,\n * so footnotes can be enabled in markdown with `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes,\n * which is hidden for sighted users but shown to assistive technology.\n * When your page is not in English,\n * you must define translated values.\n *\n * Back references use ARIA attributes,\n * but the section label itself uses a heading that is hidden with an\n * `sr-only` class.\n * To show it to sighted users,\n * define different attributes in `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem,\n * as it links footnote calls to footnote definitions on the page through `id`\n * attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * * when the node has a `value`\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\n *   see later),\n *   create a hast `text` node\n * * otherwise,\n *   create a `<div>` element (which could be changed with `data.hName`),\n *   with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @overload\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge | TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given,\n *   configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {Node, Point, Position} from 'unist'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file = ''\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual = undefined\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected = undefined\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note = undefined\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url = undefined\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","const CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nconst HYPHEN_REGEX = /-([a-z])/g;\nconst NO_HYPHEN_REGEX = /^[^-]+$/;\nconst VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nconst MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n\n/**\n * Checks whether to skip camelCase.\n */\nconst skipCamelCase = (property: string) =>\n  !property ||\n  NO_HYPHEN_REGEX.test(property) ||\n  CUSTOM_PROPERTY_REGEX.test(property);\n\n/**\n * Replacer that capitalizes first character.\n */\nconst capitalize = (match: string, character: string) =>\n  character.toUpperCase();\n\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nconst trimHyphen = (match: string, prefix: string) => `${prefix}-`;\n\n/**\n * CamelCase options.\n */\nexport interface CamelCaseOptions {\n  reactCompat?: boolean;\n}\n\n/**\n * CamelCases a CSS property.\n */\nexport const camelCase = (property: string, options: CamelCaseOptions = {}) => {\n  if (skipCamelCase(property)) {\n    return property;\n  }\n\n  property = property.toLowerCase();\n\n  if (options.reactCompat) {\n    // `-ms` vendor prefix should not be capitalized\n    property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n  } else {\n    // for non-React, remove first hyphen so vendor prefix is not capitalized\n    property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n  }\n\n  return property.replace(HYPHEN_REGEX, capitalize);\n};\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","import StyleToObject from 'style-to-object';\n\nimport { camelCase, CamelCaseOptions } from './utilities';\n\ntype StyleObject = Record<string, string>;\n\ninterface StyleToJSOptions extends CamelCaseOptions {}\n\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style: string, options?: StyleToJSOptions): StyleObject {\n  const output: StyleObject = {};\n\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  StyleToObject(style, (property, value) => {\n    // skip CSS comment\n    if (property && value) {\n      output[camelCase(property, options)] = value;\n    }\n  });\n\n  return output;\n}\n\nStyleToJS.default = StyleToJS;\n\nexport = StyleToJS;\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n"],"names":["normalizeUri","value","result","index","start","skip","length","code","charCodeAt","replace","asciiAlphanumeric","test","String","fromCharCode","next","push","slice","encodeURIComponent","join","defaultFootnoteBackContent","_","rereferenceIndex","type","tagName","properties","children","defaultFootnoteBackLabel","referenceIndex","revert","state","node","subtype","referenceType","suffix","label","identifier","alt","contents","all","head","unshift","tail","listItemLoose","spread","undefined","trimLines","source","search","match","exec","last","lines","trimLine","end","startIndex","endIndex","codePointAt","handlers","blockquote","wrap","patch","applyData","break","lang","className","meta","data","delete","emphasis","footnoteReference","clobberPrefix","options","id","toUpperCase","safeId","toLowerCase","footnoteOrder","indexOf","counter","reuseCounter","footnoteCounts","get","set","link","href","dataFootnoteRef","ariaDescribedBy","sup","heading","depth","html","allowDangerousHtml","imageReference","definition","definitionById","src","url","title","image","inlineCode","text","linkReference","listItem","parent","results","loose","listLoose","checked","paragraph","disabled","child","list","Array","isArray","includes","ordered","root","strong","table","rows","firstRow","shift","tableContent","body","pointStart","pointEnd","position","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","thematicBreak","toml","ignore","yaml","footnoteDefinition","own","hasOwnProperty","emptyOptions","from","to","hName","hChildren","hProperties","Object","assign","structuredClone","defaultUnknownHandler","call","nodes","trimMarkdownSpaceStart","toHast","tree","settings","Map","footnoteById","_objectSpread","defaultHandlers","values","one","handle","passThrough","shallow","_objectWithoutProperties","_excluded","unknownHandler","visit","map","has","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","content","backReferences","counts","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","assert","remarkRehype","destination","async","file","hastTree","run","splice","remove","items","parameters","chunkStart","VFileMessage","Error","constructor","causeOrReason","optionsOrParentOrPlace","origin","super","reason","legacyCause","place","ancestors","cause","message","ruleId","this","column","fatal","line","name","stringifyPosition","stack","actual","expected","note","prototype","classifyCharacter","markdownLineEndingOrSpace","unicodeWhitespace","unicodePunctuation","resolveAll","constructs","events","context","called","resolve","asciiAlpha","regexCheck","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownSpace","regex","bail","error","isPlainObject","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","_len","arguments","_key","middlewareIndex","callback","pop","TypeError","fn","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","apply","then","_len4","_key4","use","middelware","CallableInstance","property","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","compiler","freezeIndex","frozen","namespace","parser","transformers","copy","attacher","extend","key","assertUnfrozen","freeze","self","transformer","Number","POSITIVE_INFINITY","parse","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","stringify","Boolean","isUint8Array","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","add","plugin","plugins","entryIndex","primary","rest","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","VFile","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","existing","before","point","pos","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","hasOwn","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","arr","obj","hasOwnConstructor","hasIsPrototypeOf","setProperty","target","enumerable","configurable","newValue","writable","getProperty","module","exports","copyIsArray","clone","i","deep","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","capitalize","character","trimHyphen","concat","skipCamelCase","reactCompat","blankLine","partial","tokenize","nok","after","element","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","nameRe","nameReJsx","jsx","hastToReact","classId","dataType","itemId","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","typeOf","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlnsXLink","emptyMap","cap","tableElements","Set","tableCellElement","docs","toJsxRuntime","Fragment","filePath","create","development","jsxDEV","props","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsxs","productionCreate","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","space","svg","stylePropertyNameCase","tableCellAlignToStyle","parentSchema","findComponentFromName","prop","createProperty","style","createElementProps","createChildren","filter","whitespace","addNode","addChildren","estree","expression","evaluateExpression","crashEstree","mdxExpression","attribute","attributes","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","countsByName","count","info","find","isNaN","commaSeparated","commas","spaces","styleObject","styleToJs","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","object","computed","optional","toDash","$0","urlAttributes","action","cite","formAction","icon","manifest","ping","poster","style_to_object_1","require","utilities_1","StyleToJS","default","camelCase","includeImageAlt","includeHtml","normalizeIdentifier","declarations","inline_style_parser_1","hasIterator","forEach","declaration","__importDefault","minpath","basename","path","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","normalize","sep","JSON","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","history","messages","stored","field","assertNonEmpty","assertPart","stem","fail","encoding","TextDecoder","decode","part","SpliceBuffer","initial","RangeError","setCursor","stop","reverse","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","startPosition","startPositions","tokenizer","_contentTypeTextTrailing","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","defineSkip","_gfmTasklistFirstContentOfListItem","write","contentStart","attempt","contentInitial","lineStart","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","flowContinue","writeToChild","endOfFile","seen","entry","disable","null","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","sliceSerialize","flowInitial","afterConstruct","resolver","createResolver","string","initializeFactory","resolveAllLineSuffixes","notText","atBreak","extraResolver","chunks","tabs","bufferIndex","chunk","_bufferIndex","_index","marker","sequence","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","open","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","resolveTo","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","contentBefore","beforeContentChunk","contentChunk","numeric","characterEscape","lineEnding","labelEnd","newEvents","close","media","_inactive","_balanced","group","insideSpan","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","openingSequence","closingSequence","nextEvents","_close","_open","movePoint","attentionMarkers","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","returnState","instruction","tagOpen","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","tailExitIndex","headEnterIndex","between","resolveText","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","atTab","serializeChunks","main","expectedCode","startBufferIndex","endBufferIndex","view","sliceChunks","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","setextHeadingSlurpLineEnding","atHardBreak","inReference","ancestor","decodeString","fragment","characterReferenceType","postprocess","defaultConstructs","atCarriageReturn","endPosition","lastIndex","ceil","preprocess","d","combined","remarkParse","doc","re","thing","empty","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","lineno","updatePosition","Position","errorsList","msg","err","filename","silent","m","comments","rules","c","charAt","val","ret","decl","decls"],"sourceRoot":""}