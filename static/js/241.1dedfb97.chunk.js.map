{"version":3,"file":"static/js/241.1dedfb97.chunk.js","mappings":"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","sources":["services/dakComplianceService.js","components/SaveDialog.js","components/StagingGround.js","components/DAKPublicationGenerator.js","components/Publications.js","components/ForkStatusBar.js"],"sourcesContent":["/**\n * DAK Compliance Service\n * \n * Provides comprehensive validation for DAK components with support for error, warning, and info levels.\n * Designed to work in multiple environments: React client-side, command-line, and IDE integration.\n */\n\nimport { lazyLoadAjv, lazyLoadAjvFormats, lazyLoadYaml } from '../services/libraryLoaderService';\n\n// Import schema as a module\nconst sushiConfigSchema = require('../schemas/sushi-config.json');\n\nclass DAKComplianceService {\n  constructor() {\n    this.validators = new Map();\n    this.initializeSchemaValidator();\n    this.initializeDefaultValidators();\n  }\n\n  /**\n   * Initialize AJV schema validator for sushi-config.yaml\n   */\n  async initializeSchemaValidator() {\n    const Ajv = await lazyLoadAjv();\n    const addFormats = await lazyLoadAjvFormats();\n    \n    this.ajv = new Ajv({ allErrors: true, verbose: true });\n    addFormats(this.ajv);\n    this.sushiConfigValidator = this.ajv.compile(sushiConfigSchema);\n  }\n\n  /**\n   * Initialize default validators for common DAK file types\n   */\n  initializeDefaultValidators() {\n    // XML file validators (general)\n    this.addValidator('xml', 'xml-well-formed', {\n      level: 'error',\n      description: 'XML files must be well-formed',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    // BPMN file validators\n    this.addValidator('bpmn', 'xml-well-formed', {\n      level: 'error',\n      description: 'BPMN files must be well-formed XML',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    this.addValidator('bpmn', 'bpmn-namespace', {\n      level: 'error',\n      description: 'BPMN files must use correct BPMN 2.0 namespace',\n      validator: this.validateBPMNNamespace.bind(this)\n    });\n\n    this.addValidator('bpmn', 'has-start-event', {\n      level: 'warning',\n      description: 'BPMN process should have at least one start event',\n      validator: this.validateBPMNStartEvent.bind(this)\n    });\n\n    // DMN file validators\n    this.addValidator('dmn', 'xml-well-formed', {\n      level: 'error',\n      description: 'DMN files must be well-formed XML',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    this.addValidator('dmn', 'dmn-namespace', {\n      level: 'error',\n      description: 'DMN files must use correct DMN 1.3 namespace',\n      validator: this.validateDMNNamespace.bind(this)\n    });\n\n    // JSON file validators\n    this.addValidator('json', 'json-valid', {\n      level: 'error',\n      description: 'JSON files must be valid JSON',\n      validator: this.validateJSONSyntax.bind(this)\n    });\n\n    // FHIR resource validators\n    this.addValidator('json', 'fhir-resource-type', {\n      level: 'info',\n      description: 'FHIR resources should have valid resourceType',\n      validator: this.validateFHIRResourceType.bind(this)\n    });\n\n    // General file validators\n    this.addValidator('*', 'file-size-limit', {\n      level: 'warning',\n      description: 'Files should be under 1MB for optimal performance',\n      validator: this.validateFileSize.bind(this)\n    });\n\n    this.addValidator('*', 'filename-conventions', {\n      level: 'info',\n      description: 'Files should follow naming conventions',\n      validator: this.validateFilenameConventions.bind(this)\n    });\n\n    // WHO SMART Guidelines specific validators\n    this.addValidator('yaml', 'sushi-config-valid', {\n      level: 'error',\n      description: 'sushi-config.yaml must be valid and contain required fields',\n      validator: this.validateSushiConfig.bind(this)\n    });\n  }\n\n  /**\n   * Add a new validator\n   */\n  addValidator(fileType, validatorId, config) {\n    if (!this.validators.has(fileType)) {\n      this.validators.set(fileType, new Map());\n    }\n    this.validators.get(fileType).set(validatorId, config);\n  }\n\n  /**\n   * Remove a validator\n   */\n  removeValidator(fileType, validatorId) {\n    if (this.validators.has(fileType)) {\n      this.validators.get(fileType).delete(validatorId);\n    }\n  }\n\n  /**\n   * Validate a single file\n   */\n  async validateFile(filePath, content) {\n    const results = [];\n    const fileExtension = this.getFileExtension(filePath);\n    const fileName = this.getFileName(filePath);\n\n    // Get validators for this file type and universal validators\n    const typeValidators = this.validators.get(fileExtension) || new Map();\n    const universalValidators = this.validators.get('*') || new Map();\n\n    // Run type-specific validators\n    for (const [validatorId, config] of typeValidators) {\n      try {\n        const result = await config.validator(filePath, content, fileName);\n        if (result) {\n          results.push({\n            validatorId,\n            level: config.level,\n            description: config.description,\n            ...result\n          });\n        }\n      } catch (error) {\n        results.push({\n          validatorId,\n          level: 'error',\n          description: 'Validator execution failed',\n          message: error.message,\n          filePath\n        });\n      }\n    }\n\n    // Run universal validators\n    for (const [validatorId, config] of universalValidators) {\n      try {\n        const result = await config.validator(filePath, content, fileName);\n        if (result) {\n          results.push({\n            validatorId,\n            level: config.level,\n            description: config.description,\n            ...result\n          });\n        }\n      } catch (error) {\n        results.push({\n          validatorId,\n          level: 'error',\n          description: 'Validator execution failed',\n          message: error.message,\n          filePath\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Validate entire staging ground\n   */\n  async validateStagingGround(stagingGround) {\n    const results = {\n      summary: { error: 0, warning: 0, info: 0 },\n      files: {},\n      validatedAt: Date.now()\n    };\n\n    for (const file of stagingGround.files) {\n      const fileResults = await this.validateFile(file.path, file.content);\n      results.files[file.path] = fileResults;\n\n      // Update summary counts\n      fileResults.forEach(result => {\n        if (result.level === 'error') results.summary.error++;\n        else if (result.level === 'warning') results.summary.warning++;\n        else if (result.level === 'info') results.summary.info++;\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Check if staging ground can be saved (no error-level violations)\n   */\n  async canSave(stagingGround) {\n    const validation = await this.validateStagingGround(stagingGround);\n    return validation.summary.error === 0;\n  }\n\n  // Validator implementations\n\n  async validateXMLWellFormed(filePath, content) {\n    try {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, 'text/xml');\n      const parserError = doc.querySelector('parsererror');\n      \n      if (parserError) {\n        return {\n          message: 'XML is not well-formed: ' + parserError.textContent,\n          filePath\n        };\n      }\n      return null;\n    } catch (error) {\n      return {\n        message: 'Failed to parse XML: ' + error.message,\n        filePath\n      };\n    }\n  }\n\n  async validateBPMNNamespace(filePath, content) {\n    if (!content.includes('xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"')) {\n      return {\n        message: 'BPMN file missing correct BPMN 2.0 namespace declaration',\n        filePath,\n        suggestion: 'Add xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" to root element'\n      };\n    }\n    return null;\n  }\n\n  async validateBPMNStartEvent(filePath, content) {\n    if (!content.includes('<startEvent') && !content.includes('<bpmn:startEvent')) {\n      return {\n        message: 'BPMN process should contain at least one start event',\n        filePath,\n        suggestion: 'Add a start event to begin the process flow'\n      };\n    }\n    return null;\n  }\n\n  async validateDMNNamespace(filePath, content) {\n    if (!content.includes('xmlns:dmn=\"https://www.omg.org/spec/DMN/20191111/MODEL/\"')) {\n      return {\n        message: 'DMN file missing correct DMN 1.3 namespace declaration',\n        filePath,\n        suggestion: 'Add xmlns:dmn=\"https://www.omg.org/spec/DMN/20191111/MODEL/\" to root element'\n      };\n    }\n    return null;\n  }\n\n  async validateJSONSyntax(filePath, content) {\n    try {\n      JSON.parse(content);\n      return null;\n    } catch (error) {\n      return {\n        message: 'Invalid JSON syntax: ' + error.message,\n        filePath\n      };\n    }\n  }\n\n  async validateFHIRResourceType(filePath, content) {\n    try {\n      const json = JSON.parse(content);\n      const validResourceTypes = [\n        'StructureDefinition', 'ValueSet', 'CodeSystem', 'ConceptMap',\n        'Questionnaire', 'PlanDefinition', 'ActivityDefinition', 'Measure',\n        'Library', 'ImplementationGuide', 'Bundle', 'Patient', 'Practitioner'\n      ];\n\n      if (json.resourceType && !validResourceTypes.includes(json.resourceType)) {\n        return {\n          message: `Unknown FHIR resourceType: ${json.resourceType}`,\n          filePath,\n          suggestion: 'Verify the resourceType is correct for FHIR R4'\n        };\n      }\n      return null;\n    } catch (error) {\n      // Not JSON, skip this validator\n      return null;\n    }\n  }\n\n  async validateFileSize(filePath, content) {\n    const sizeInBytes = new Blob([content]).size;\n    const maxSize = 1024 * 1024; // 1MB\n\n    if (sizeInBytes > maxSize) {\n      return {\n        message: `File size (${(sizeInBytes / 1024 / 1024).toFixed(1)}MB) exceeds recommended limit of 1MB`,\n        filePath,\n        suggestion: 'Consider breaking large files into smaller components'\n      };\n    }\n    return null;\n  }\n\n  async validateFilenameConventions(filePath, content) {\n    const fileName = this.getFileName(filePath);\n    const issues = [];\n\n    // Check for spaces in filename\n    if (fileName.includes(' ')) {\n      issues.push('avoid spaces in filenames');\n    }\n\n    // Check for special characters\n    if (/[<>:\"|?*]/.test(fileName)) {\n      issues.push('avoid special characters (<>:\"|?*)');\n    }\n\n    // Check for very long names\n    if (fileName.length > 100) {\n      issues.push('filename is very long (>100 characters)');\n    }\n\n    if (issues.length > 0) {\n      return {\n        message: `Filename convention issues: ${issues.join(', ')}`,\n        filePath,\n        suggestion: 'Use lowercase letters, numbers, hyphens, and underscores'\n      };\n    }\n    return null;\n  }\n\n  async validateSushiConfig(filePath, content) {\n    if (!filePath.endsWith('sushi-config.yaml')) {\n      return null;\n    }\n\n    try {\n      // Parse YAML content\n      let parsedConfig;\n      try {\n        // Lazy load js-yaml to improve initial page responsiveness\n        const yaml = await lazyLoadYaml();\n        parsedConfig = yaml.load(content);\n      } catch (yamlError) {\n        return {\n          message: `Invalid YAML syntax: ${yamlError.message}`,\n          filePath,\n          suggestion: 'Fix YAML syntax errors and ensure proper indentation'\n        };\n      }\n\n      if (!parsedConfig || typeof parsedConfig !== 'object') {\n        return {\n          message: 'sushi-config.yaml must contain a valid YAML object',\n          filePath,\n          suggestion: 'Ensure the file contains proper YAML object structure'\n        };\n      }\n\n      // Validate against JSON schema\n      const isValid = this.sushiConfigValidator(parsedConfig);\n      \n      if (!isValid) {\n        const errors = this.sushiConfigValidator.errors;\n        const errorMessages = errors.map(error => {\n          const field = error.instancePath ? error.instancePath.replace('/', '') : error.params?.missingProperty || 'root';\n          let message = `${field}: ${error.message}`;\n          \n          if (error.params?.allowedValues) {\n            message += ` (allowed: ${error.params.allowedValues.join(', ')})`;\n          }\n          \n          return message;\n        });\n\n        return {\n          message: `sushi-config.yaml validation errors: ${errorMessages.join('; ')}`,\n          filePath,\n          suggestion: 'Review the sushi-config.yaml specification at https://fshschool.org/docs/sushi/configuration/',\n          details: errors\n        };\n      }\n\n      // Additional WHO SMART Guidelines specific validation\n      const whoValidation = this.validateWHOSmartGuidelines(parsedConfig);\n      if (whoValidation) {\n        return whoValidation;\n      }\n\n      return null;\n    } catch (error) {\n      return {\n        message: 'Failed to validate sushi-config.yaml: ' + error.message,\n        filePath,\n        suggestion: 'Check file format and content structure'\n      };\n    }\n  }\n\n  /**\n   * Additional validation for WHO SMART Guidelines compliance\n   */\n  validateWHOSmartGuidelines(config) {\n    const issues = [];\n\n    // Check for smart.who.int.base dependency\n    if (!config.dependencies || !config.dependencies['smart.who.int.base']) {\n      issues.push('missing smart.who.int.base dependency (required for WHO DAK compliance)');\n    }\n\n    // Check canonical URL pattern for WHO guidelines\n    if (config.canonical && config.canonical.includes('smart.who.int')) {\n      if (!config.id.startsWith('smart.who.int')) {\n        issues.push('id should start with \"smart.who.int\" when using WHO canonical URL');\n      }\n    }\n\n    // Check for required WHO metadata\n    if (config.canonical && config.canonical.includes('smart.who.int')) {\n      if (!config.publisher || !config.publisher.toLowerCase().includes('world health organization')) {\n        issues.push('publisher should include \"World Health Organization\" for WHO guidelines');\n      }\n\n      if (!config.jurisdiction || !Array.isArray(config.jurisdiction)) {\n        issues.push('jurisdiction should be specified for WHO guidelines');\n      }\n    }\n\n    if (issues.length > 0) {\n      return {\n        message: `WHO SMART Guidelines compliance issues: ${issues.join(', ')}`,\n        filePath: 'sushi-config.yaml',\n        suggestion: 'Ensure compliance with WHO SMART Guidelines requirements'\n      };\n    }\n\n    return null;\n  }\n\n  // Utility methods\n\n  getFileExtension(filePath) {\n    const parts = filePath.split('.');\n    return parts.length > 1 ? parts[parts.length - 1].toLowerCase() : '';\n  }\n\n  getFileName(filePath) {\n    return filePath.split('/').pop() || filePath;\n  }\n\n  /**\n   * Format validation results for display\n   */\n  formatValidationResults(validation) {\n    const formatted = {\n      canSave: validation.summary.error === 0,\n      summary: validation.summary,\n      files: []\n    };\n\n    Object.entries(validation.files).forEach(([filePath, results]) => {\n      if (results.length > 0) {\n        formatted.files.push({\n          path: filePath,\n          issues: results.map(result => ({\n            level: result.level,\n            message: result.message,\n            description: result.description,\n            suggestion: result.suggestion\n          }))\n        });\n      }\n    });\n\n    return formatted;\n  }\n\n  /**\n   * Get validation summary for UI display\n   */\n  getValidationSummary(validation) {\n    return {\n      error: validation.summary.error,\n      warning: validation.summary.warning,\n      info: validation.summary.info,\n      canSave: validation.summary.error === 0,\n      hasIssues: validation.summary.error + validation.summary.warning + validation.summary.info > 0\n    };\n  }\n}\n\n// Create singleton instance\nconst dakComplianceService = new DAKComplianceService();\n\nexport default dakComplianceService;","import React, { useState, useEffect } from 'react';\nimport githubService from '../services/githubService';\nimport dakComplianceService from '../services/dakComplianceService';\nimport stagingGroundService from '../services/stagingGroundService';\n\nconst SaveDialog = ({ \n  isOpen, \n  onClose, \n  stagingGround, \n  validation, \n  repository, \n  selectedBranch,\n  hasWriteAccess,\n  onSaveSuccess \n}) => {\n  const [commitMessage, setCommitMessage] = useState('');\n  const [overrideValidation, setOverrideValidation] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [showValidationDetails, setShowValidationDetails] = useState(false);\n\n  // Reset state when dialog opens\n  useEffect(() => {\n    if (isOpen) {\n      setCommitMessage(stagingGround?.message || '');\n      setOverrideValidation(false);\n      setIsSaving(false);\n      setError(null);\n      setShowValidationDetails(false);\n    }\n  }, [isOpen, stagingGround]);\n\n  if (!isOpen) return null;\n\n  const validationSummary = validation ? dakComplianceService.getValidationSummary(validation) : null;\n  const canSave = validationSummary ? (validationSummary.canSave || overrideValidation) : true;\n  const hasErrors = validationSummary ? validationSummary.error > 0 : false;\n\n  const handleSave = async () => {\n    if (!commitMessage.trim()) {\n      setError('Commit message is required');\n      return;\n    }\n\n    if (!hasWriteAccess) {\n      setError('You need write permissions to save changes');\n      return;\n    }\n\n    if (hasErrors && !overrideValidation) {\n      setError('Cannot save with validation errors. Enable override option to proceed anyway.');\n      return;\n    }\n\n    setIsSaving(true);\n    setError(null);\n\n    try {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      \n      if (repository.isDemo || (repository.owner && repository.owner.login === 'demo-user')) {\n        // Simulate save in demo mode\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        onSaveSuccess({\n          sha: 'demo-commit-sha',\n          message: commitMessage,\n          url: `https://github.com/${repository.full_name}/commit/demo-commit-sha`\n        });\n        return;\n      }\n\n      // Create commit with multiple files\n      const result = await githubService.createCommit(\n        owner,\n        repository.name,\n        selectedBranch,\n        commitMessage.trim(),\n        stagingGround.files\n      );\n\n      onSaveSuccess({\n        sha: result.sha,\n        message: commitMessage,\n        url: result.html_url\n      });\n\n    } catch (err) {\n      console.error('Error saving changes:', err);\n      setError(getErrorMessage(err));\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const getErrorMessage = (error) => {\n    if (error.status === 409) {\n      return 'Conflict detected. The branch has been updated since you started. Please refresh and try again.';\n    } else if (error.status === 403) {\n      return 'Permission denied. Check that your token has write access to this repository.';\n    } else if (error.status === 404) {\n      return 'Repository or branch not found. Please verify the repository exists and you have access.';\n    } else if (error.message) {\n      return error.message;\n    } else {\n      return 'An unexpected error occurred while saving. Please try again.';\n    }\n  };\n\n  const formatValidationIcon = (level) => {\n    switch (level) {\n      case 'error': return '🔴';\n      case 'warning': return '🟡';\n      case 'info': return '🟢';\n      default: return '❓';\n    }\n  };\n\n  // Handle removing individual file\n  const handleRemoveFile = (filePath) => {\n    if (window.confirm(`Are you sure you want to remove \"${filePath}\" from staging? This cannot be undone.`)) {\n      stagingGroundService.removeFile(filePath);\n    }\n  };\n\n  return (\n    <div className=\"save-dialog-overlay\">\n      <div className=\"save-dialog\">\n        <div className=\"dialog-header\">\n          <h3>💾 Save Changes</h3>\n          <button \n            className=\"dialog-close\"\n            onClick={onClose}\n            disabled={isSaving}\n          >\n            ×\n          </button>\n        </div>\n\n        <div className=\"dialog-content\">\n          {/* Files Summary */}\n          <div className=\"save-summary\">\n            <h4>Files to be committed ({stagingGround?.files?.length || 0}):</h4>\n            <div className=\"files-list\">\n              {stagingGround?.files?.map((file, index) => (\n                <div key={index} className=\"file-item\">\n                  <span className=\"file-icon\">📄</span>\n                  <span className=\"file-path\">{file.path}</span>\n                  <span className=\"file-size\">\n                    {(new Blob([file.content]).size / 1024).toFixed(1)} KB\n                  </span>\n                  <button\n                    className=\"remove-file-btn\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleRemoveFile(file.path);\n                    }}\n                    title={`Remove ${file.path} from staging`}\n                    disabled={isSaving}\n                  >\n                    🗑️\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Validation Status */}\n          {validationSummary && (\n            <div className=\"validation-section\">\n              <div \n                className={`validation-summary ${validationSummary.hasIssues ? 'has-issues' : 'clean'}`}\n                onClick={() => setShowValidationDetails(!showValidationDetails)}\n              >\n                <div className=\"validation-header\">\n                  <h4>🚦 Validation Status</h4>\n                  <div className=\"validation-badges\">\n                    {validationSummary.error > 0 && (\n                      <span className=\"validation-badge error\">\n                        🔴 {validationSummary.error}\n                      </span>\n                    )}\n                    {validationSummary.warning > 0 && (\n                      <span className=\"validation-badge warning\">\n                        🟡 {validationSummary.warning}\n                      </span>\n                    )}\n                    {validationSummary.info > 0 && (\n                      <span className=\"validation-badge info\">\n                        🟢 {validationSummary.info}\n                      </span>\n                    )}\n                    {!validationSummary.hasIssues && (\n                      <span className=\"validation-badge success\">\n                        ✅ All clear\n                      </span>\n                    )}\n                  </div>\n                  <span className={`expand-icon ${showValidationDetails ? 'expanded' : ''}`}>\n                    ▼\n                  </span>\n                </div>\n              </div>\n\n              {showValidationDetails && validation && (\n                <div className=\"validation-details\">\n                  {Object.entries(validation.files).map(([filePath, results]) => (\n                    results.length > 0 && (\n                      <div key={filePath} className=\"file-validation\">\n                        <h5>📄 {filePath}</h5>\n                        <div className=\"validation-issues\">\n                          {results.map((result, index) => (\n                            <div key={index} className={`validation-issue ${result.level}`}>\n                              <span className=\"issue-icon\">{formatValidationIcon(result.level)}</span>\n                              <div className=\"issue-content\">\n                                <div className=\"issue-message\">{result.message}</div>\n                                {result.suggestion && (\n                                  <div className=\"issue-suggestion\">💡 {result.suggestion}</div>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n\n              {/* Override option for errors */}\n              {hasErrors && (\n                <div className=\"override-section\">\n                  <label className=\"override-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      checked={overrideValidation}\n                      onChange={(e) => setOverrideValidation(e.target.checked)}\n                    />\n                    <span className=\"checkmark\"></span>\n                    Override validation errors and save anyway\n                  </label>\n                  <p className=\"override-warning\">\n                    ⚠️ Saving with validation errors may cause issues with your DAK.\n                    Only enable this if you're sure about your changes.\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Commit Message */}\n          <div className=\"commit-message-section\">\n            <label htmlFor=\"commit-message\">\n              <h4>✍️ Commit Message</h4>\n            </label>\n            <textarea\n              id=\"commit-message\"\n              className=\"commit-message-input\"\n              value={commitMessage}\n              onChange={(e) => setCommitMessage(e.target.value)}\n              placeholder=\"Describe your changes...\"\n              rows={3}\n              disabled={isSaving}\n              required\n            />\n            <div className=\"commit-tips\">\n              <p>💡 <strong>Tip:</strong> Write a clear, descriptive message about what you changed and why.</p>\n            </div>\n          </div>\n\n          {/* Error Display */}\n          {error && (\n            <div className=\"error-section\">\n              <div className=\"error-message\">\n                <span className=\"error-icon\">❌</span>\n                {error}\n              </div>\n            </div>\n          )}\n\n          {/* Repository Info */}\n          <div className=\"repo-info\">\n            <div className=\"info-item\">\n              <span className=\"info-label\">Repository:</span>\n              <span className=\"info-value\">{repository?.full_name}</span>\n            </div>\n            <div className=\"info-item\">\n              <span className=\"info-label\">Branch:</span>\n              <span className=\"info-value\">{selectedBranch}</span>\n            </div>\n            <div className=\"info-item\">\n              <span className=\"info-label\">Access:</span>\n              <span className={`info-value ${hasWriteAccess ? 'write' : 'read'}`}>\n                {hasWriteAccess ? '✏️ Write' : '👁️ Read-only'}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"dialog-actions\">\n          <button\n            className=\"action-btn secondary\"\n            onClick={onClose}\n            disabled={isSaving}\n          >\n            Cancel\n          </button>\n          <button\n            className=\"action-btn primary\"\n            onClick={handleSave}\n            disabled={!canSave || !commitMessage.trim() || isSaving || !hasWriteAccess}\n          >\n            {isSaving ? (\n              <>\n                <span className=\"saving-spinner\">⏳</span>\n                Saving...\n              </>\n            ) : (\n              <>💾 Save Changes</>\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SaveDialog;","import React, { useState, useEffect, useCallback } from 'react';\nimport stagingGroundService from '../services/stagingGroundService';\nimport dakComplianceService from '../services/dakComplianceService';\nimport SaveDialog from './SaveDialog';\n\nconst StagingGround = ({ repository, selectedBranch, hasWriteAccess, profile }) => {\n  const [stagingGround, setStagingGround] = useState(null);\n  const [validation, setValidation] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n\n  // Load staging ground data\n  const loadStagingGroundData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const currentStagingGround = stagingGroundService.getStagingGround();\n      setStagingGround(currentStagingGround);\n      \n      if (currentStagingGround.files.length > 0) {\n        await validateStagingGround(currentStagingGround);\n      }\n    } catch (err) {\n      setError('Failed to load staging ground data');\n      console.error('Error loading staging ground:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Initialize staging ground service\n  useEffect(() => {\n    if (repository && selectedBranch) {\n      stagingGroundService.initialize(repository, selectedBranch);\n      loadStagingGroundData();\n\n      // Subscribe to staging ground changes\n      const unsubscribe = stagingGroundService.addListener((updatedStagingGround) => {\n        setStagingGround(updatedStagingGround);\n        validateStagingGround(updatedStagingGround);\n      });\n\n      return unsubscribe;\n    }\n  }, [repository, selectedBranch, loadStagingGroundData]);\n\n  // Validate staging ground\n  const validateStagingGround = async (stagingGroundData) => {\n    if (!stagingGroundData || stagingGroundData.files.length === 0) {\n      setValidation(null);\n      return;\n    }\n\n    try {\n      const validationResult = await dakComplianceService.validateStagingGround(stagingGroundData);\n      setValidation(validationResult);\n    } catch (err) {\n      console.error('Error validating staging ground:', err);\n      setValidation(null);\n    }\n  };\n\n  // Handle saving changes\n  const handleSave = () => {\n    if (!hasWriteAccess) {\n      alert('You need write permissions to save changes to this repository.');\n      return;\n    }\n    \n    setShowSaveDialog(true);\n  };\n\n  // Handle successful save\n  const handleSaveSuccess = (result) => {\n    setShowSaveDialog(false);\n    \n    // Clear staging ground after successful save\n    stagingGroundService.clearStagingGround();\n    \n    // Show success message\n    alert(`Changes saved successfully! Commit: ${result.sha.substring(0, 7)}`);\n  };\n\n  // Handle clearing staging ground\n  const handleClearChanges = () => {\n    if (window.confirm('Are you sure you want to discard all changes? This cannot be undone.')) {\n      stagingGroundService.clearStagingGround();\n    }\n  };\n\n  // Handle removing individual file\n  const handleRemoveFile = (filePath) => {\n    if (window.confirm(`Are you sure you want to remove \"${filePath}\" from staging? This cannot be undone.`)) {\n      stagingGroundService.removeFile(filePath);\n    }\n  };\n\n  // Get validation summary for display\n  const getValidationSummary = () => {\n    if (!validation) {\n      return { error: 0, warning: 0, info: 0, canSave: true };\n    }\n    return dakComplianceService.getValidationSummary(validation);\n  };\n\n  // Format file list for display\n  const formatFileList = () => {\n    if (!stagingGround || !stagingGround.files) return [];\n    \n    return stagingGround.files.map(file => ({\n      path: file.path,\n      size: new Blob([file.content]).size,\n      lastModified: file.timestamp\n    }));\n  };\n\n  const validationSummary = getValidationSummary();\n  const hasChanges = stagingGround && stagingGround.files.length > 0;\n  const filesCount = stagingGround ? stagingGround.files.length : 0;\n\n  return (\n    <div className=\"staging-ground-section\">\n      <div className=\"section-header\">\n        <h3 className=\"section-title\">\n          <span className=\"section-icon\">📝</span>\n          Staging Ground\n          {hasChanges && (\n            <span className=\"files-badge\">\n              {filesCount} file{filesCount !== 1 ? 's' : ''}\n            </span>\n          )}\n        </h3>\n        <p className=\"section-description\">\n          Changes made through DAK component editors are staged here before being committed to the repository.\n          Review and commit your changes when ready.\n        </p>\n      </div>\n\n      <div className=\"staging-content\">\n        {loading ? (\n          <div className=\"loading-indicator\">\n            <span className=\"loading-spinner\">⏳</span>\n            Loading staging ground...\n          </div>\n        ) : error ? (\n          <div className=\"error-message\">\n            <span className=\"error-icon\">⚠️</span>\n            {error}\n          </div>\n        ) : (\n          <>\n            {/* Staging Status Bar */}\n            <div className=\"staging-status-bar\">\n              <div className=\"status-indicators\">\n                {/* Validation stoplight */}\n                <div className=\"validation-stoplight\">\n                  <div className={`stoplight-indicator error ${validationSummary.error === 0 ? 'lit' : ''}`}>\n                    🔴\n                    {validationSummary.error > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.error}</span>\n                    )}\n                  </div>\n                  <div className={`stoplight-indicator warning ${validationSummary.warning === 0 ? 'lit' : ''}`}>\n                    🟡\n                    {validationSummary.warning > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.warning}</span>\n                    )}\n                  </div>\n                  <div className={`stoplight-indicator info ${validationSummary.info === 0 ? 'lit' : ''}`}>\n                    🟢\n                    {validationSummary.info > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.info}</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Save button */}\n              <button\n                className={`save-btn ${!hasChanges || !validationSummary.canSave ? 'disabled' : ''}`}\n                onClick={handleSave}\n                disabled={!hasChanges || !hasWriteAccess}\n                title={\n                  !hasChanges ? 'No changes to save' :\n                  !hasWriteAccess ? 'Write access required' :\n                  !validationSummary.canSave ? 'Fix validation errors first' :\n                  'Save changes to repository'\n                }\n              >\n                💾 Save Changes\n              </button>\n            </div>\n\n            {/* Changed Files Section */}\n            <div className=\"staging-files-section\">\n              <h4>📁 Changed Files</h4>\n              {hasChanges ? (\n                <div className=\"changed-files\">\n                  {formatFileList().map((file, index) => (\n                    <div key={index} className=\"file-item\">\n                      <div className=\"file-info\">\n                        <span className=\"file-icon\">📄</span>\n                        <span className=\"file-path\">{file.path}</span>\n                      </div>\n                      <div className=\"file-meta\">\n                        <span className=\"file-size\">\n                          {(file.size / 1024).toFixed(1)} KB\n                        </span>\n                        <span className=\"file-time\">\n                          {new Date(file.lastModified).toLocaleTimeString()}\n                        </span>\n                        <button\n                          className=\"remove-file-btn\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleRemoveFile(file.path);\n                          }}\n                          title={`Remove ${file.path} from staging`}\n                        >\n                          🗑️\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"file-actions\">\n                    <button\n                      className=\"action-btn secondary small\"\n                      onClick={handleClearChanges}\n                    >\n                      🗑️ Clear All Changes\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"no-changes\">\n                  <p>No changes in staging ground</p>\n                  <p className=\"help-text\">\n                    Changes made through DAK component editors will appear here before being saved to the repository.\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {/* Commit Message Preview */}\n            {hasChanges && stagingGround.message && (\n              <div className=\"commit-message-section\">\n                <h4>✍️ Commit Message</h4>\n                <div className=\"commit-preview\">\n                  <p>{stagingGround.message}</p>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Save Dialog */}\n      <SaveDialog\n        isOpen={showSaveDialog}\n        onClose={() => setShowSaveDialog(false)}\n        stagingGround={stagingGround}\n        validation={validation}\n        repository={repository}\n        selectedBranch={selectedBranch}\n        hasWriteAccess={hasWriteAccess}\n        onSaveSuccess={handleSaveSuccess}\n      />\n    </div>\n  );\n};\n\nexport default StagingGround;","import React, { useState } from 'react';\nimport './DAKPublicationGenerator.css';\n\nconst DAKPublicationGenerator = ({ profile, repository, selectedBranch, hasWriteAccess }) => {\n  const [selectedFormat, setSelectedFormat] = useState('html');\n  const [selectedScope, setSelectedScope] = useState('full'); // 'full' or component id\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generatedPublications, setGeneratedPublications] = useState([]);\n  const [error, setError] = useState(null);\n\n  const owner = repository.owner?.login || repository.full_name.split('/')[0];\n  const repoName = repository.name;\n\n  const formatOptions = [\n    { value: 'html', label: 'HTML Publication', icon: '🌐', description: 'Web-ready HTML with WHO styling' },\n    { value: 'epub', label: 'EPUB E-book', icon: '📖', description: 'EPUB 3.0 format for e-readers' },\n    { value: 'docbook', label: 'DocBook XML', icon: '📄', description: 'Professional publishing format' },\n    { value: 'pdf', label: 'PDF Document', icon: '📋', description: 'Print to PDF using browser functionality' },\n  ];\n\n  const dakComponents = [\n    { id: 'full', name: 'Complete DAK', icon: '📚', description: 'Generate publication for the entire DAK' },\n    { id: 'health-interventions', name: 'Health Interventions', icon: '📖', description: 'Clinical guidelines and health intervention specifications' },\n    { id: 'generic-personas', name: 'Generic Personas', icon: '👥', description: 'Standardized user roles and actor definitions' },\n    { id: 'user-scenarios', name: 'User Scenarios', icon: '📝', description: 'Narrative descriptions of system interactions' },\n    { id: 'business-processes', name: 'Business Processes', icon: '🔄', description: 'BPMN workflows and business process definitions' },\n    { id: 'core-data-elements', name: 'Core Data Elements', icon: '🗃️', description: 'Essential data structures and terminology' },\n    { id: 'decision-support', name: 'Decision Support Logic', icon: '🎯', description: 'DMN decision tables and clinical decision support' },\n    { id: 'program-indicators', name: 'Program Indicators', icon: '📊', description: 'Performance indicators and measurement definitions' },\n    { id: 'functional-requirements', name: 'Functional Requirements', icon: '⚙️', description: 'System requirements specifications' },\n    { id: 'test-scenarios', name: 'Test Scenarios', icon: '🧪', description: 'Feature files and test scenarios' }\n  ];\n\n  const handleGeneratePublication = async () => {\n    // Handle PDF print functionality\n    if (selectedFormat === 'pdf') {\n      // Open current page in print mode\n      window.print();\n      return;\n    }\n\n    try {\n      setIsGenerating(true);\n      setError(null);\n\n      // Generate publications client-side\n      const selectedComponent = dakComponents.find(comp => comp.id === selectedScope);\n      const scopeName = selectedComponent ? selectedComponent.name : 'Full DAK';\n      const filePrefix = selectedScope === 'full' ? repoName : `${repoName}-${selectedScope}`;\n      \n      // Client-side publication generation\n      const publicationContent = await generatePublicationContent(selectedFormat, selectedScope, selectedComponent);\n      \n      // Create downloadable file\n      const blob = new Blob([publicationContent], { \n        type: getContentType(selectedFormat) \n      });\n      const downloadUrl = URL.createObjectURL(blob);\n      \n      const publication = {\n        id: `pub-${Date.now()}`,\n        format: selectedFormat,\n        scope: selectedScope,\n        scopeName: scopeName,\n        filename: `${filePrefix}-${selectedBranch}-publication.${getFileExtension(selectedFormat)}`,\n        downloadUrl: downloadUrl,\n        generatedAt: new Date().toISOString(),\n        size: formatFileSize(blob.size)\n      };\n      \n      setGeneratedPublications(prev => [publication, ...prev]);\n      setIsGenerating(false);\n    } catch (err) {\n      console.error('Publication generation error:', err);\n      setError(err.message || 'Failed to generate publication');\n      setIsGenerating(false);\n    }\n  };\n\n  const generatePublicationContent = async (format, scope, component) => {\n    const publicationTitle = scope === 'full' \n      ? `${repoName} - WHO SMART Guidelines Implementation Guide`\n      : `${repoName} - ${component.name}`;\n    \n    const currentDate = new Date().toLocaleDateString();\n    const currentYear = new Date().getFullYear();\n    \n    if (format === 'html') {\n      return generateHTMLPublication(publicationTitle, scope, component, currentDate);\n    } else if (format === 'epub') {\n      return generateEPUBPublication(publicationTitle, scope, component, currentDate);\n    } else if (format === 'docbook') {\n      return generateDocBookPublication(publicationTitle, scope, component, currentDate);\n    }\n    \n    throw new Error(`Unsupported format: ${format}`);\n  };\n\n  const generateHTMLPublication = (title, scope, component, date) => {\n    const scopeContent = scope === 'full' \n      ? generateFullDAKContent() \n      : generateComponentContent(component);\n    \n    return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${title}</title>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; margin: 2rem; color: #333; }\n        .header { background: linear-gradient(135deg, #0078d4 0%, #005a9e 100%); color: white; padding: 2rem; margin: -2rem -2rem 2rem -2rem; }\n        .who-logo { font-size: 2rem; font-weight: bold; margin-bottom: 0.5rem; }\n        h1 { color: #0078d4; border-bottom: 2px solid #0078d4; padding-bottom: 0.5rem; }\n        h2 { color: #005a9e; margin-top: 2rem; }\n        .metadata { background: #f8f9fa; padding: 1rem; border-left: 4px solid #0078d4; margin: 2rem 0; }\n        .component-section { margin: 2rem 0; padding: 1.5rem; border: 1px solid #dee2e6; border-radius: 8px; }\n        @media print { .header { background: #0078d4 !important; -webkit-print-color-adjust: exact; } }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <div class=\"who-logo\">WHO</div>\n        <h1 style=\"color: white; border: none; margin: 0;\">${title}</h1>\n        <p style=\"margin: 0.5rem 0 0 0;\">WHO SMART Guidelines Implementation Guide</p>\n    </div>\n\n    <div class=\"metadata\">\n        <h2>Publication Information</h2>\n        <p><strong>Repository:</strong> ${owner}/${repoName}</p>\n        <p><strong>Branch:</strong> ${selectedBranch}</p>\n        <p><strong>Generated:</strong> ${date}</p>\n        <p><strong>Version:</strong> 1.0.0</p>\n        <p><strong>Copyright:</strong> © ${new Date().getFullYear()} World Health Organization</p>\n    </div>\n\n    ${scopeContent}\n\n    <footer style=\"margin-top: 3rem; padding-top: 2rem; border-top: 1px solid #dee2e6; text-align: center; color: #6c757d;\">\n        <p>Generated by SGeX Workbench • WHO SMART Guidelines Digital Adaptation Kit</p>\n    </footer>\n</body>\n</html>`;\n  };\n\n  const generateEPUBPublication = (title, scope, component, date) => {\n    // Simplified EPUB content (could be enhanced with full EPUB structure)\n    const content = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title>${title}</title>\n    <style type=\"text/css\">\n        body { font-family: Georgia, serif; line-height: 1.6; margin: 2em; }\n        h1 { color: #0078d4; border-bottom: 2px solid #0078d4; }\n        h2 { color: #005a9e; margin-top: 2em; }\n        .metadata { background: #f8f9fa; padding: 1em; border-left: 4px solid #0078d4; }\n    </style>\n</head>\n<body>\n    <h1>${title}</h1>\n    \n    <div class=\"metadata\">\n        <h2>Publication Information</h2>\n        <p><strong>Repository:</strong> ${owner}/${repoName}</p>\n        <p><strong>Branch:</strong> ${selectedBranch}</p>\n        <p><strong>Generated:</strong> ${date}</p>\n        <p><strong>Copyright:</strong> © ${new Date().getFullYear()} World Health Organization</p>\n    </div>\n\n    ${scope === 'full' ? generateFullDAKContent() : generateComponentContent(component)}\n</body>\n</html>`;\n    return content;\n  };\n\n  const generateDocBookPublication = (title, scope, component, date) => {\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<book xmlns=\"http://docbook.org/ns/docbook\" version=\"5.0\">\n    <info>\n        <title>${title}</title>\n        <subtitle>WHO SMART Guidelines Implementation Guide</subtitle>\n        <author>\n            <orgname>World Health Organization</orgname>\n        </author>\n        <date>${date}</date>\n        <copyright>\n            <year>${new Date().getFullYear()}</year>\n            <holder>World Health Organization</holder>\n        </copyright>\n    </info>\n\n    <chapter xml:id=\"metadata\">\n        <title>Publication Information</title>\n        <para><emphasis>Repository:</emphasis> ${owner}/${repoName}</para>\n        <para><emphasis>Branch:</emphasis> ${selectedBranch}</para>\n        <para><emphasis>Generated:</emphasis> ${date}</para>\n        <para><emphasis>Version:</emphasis> 1.0.0</para>\n    </chapter>\n\n    <chapter xml:id=\"content\">\n        <title>${scope === 'full' ? 'Complete DAK Content' : component.name}</title>\n        ${scope === 'full' ? generateFullDAKDocBookContent() : generateComponentDocBookContent(component)}\n    </chapter>\n</book>`;\n  };\n\n  const generateFullDAKContent = () => {\n    return `\n    <div class=\"component-section\">\n        <h2>🔄 Business Processes</h2>\n        <p>This section contains BPMN workflows and business process definitions for the ${repoName} DAK.</p>\n        <p><em>Content would be dynamically loaded from the repository's business process files.</em></p>\n    </div>\n\n    <div class=\"component-section\">\n        <h2>🎯 Decision Support Logic</h2>\n        <p>DMN decision tables and clinical decision support logic.</p>\n        <p><em>Content would be dynamically loaded from the repository's decision support files.</em></p>\n    </div>\n\n    <div class=\"component-section\">\n        <h2>🗃️ Core Data Elements</h2>\n        <p>Essential data structures, terminology, and data dictionary.</p>\n        <p><em>Content would be dynamically loaded from the repository's data element definitions.</em></p>\n    </div>\n\n    <div class=\"component-section\">\n        <h2>📖 Health Interventions</h2>\n        <p>Clinical guidelines and health intervention specifications.</p>\n        <p><em>Content would be dynamically loaded from the repository's intervention guidelines.</em></p>\n    </div>\n\n    <div class=\"component-section\">\n        <h2>📊 Program Indicators</h2>\n        <p>Performance indicators and measurement definitions.</p>\n        <p><em>Content would be dynamically loaded from the repository's indicator definitions.</em></p>\n    </div>\n\n    <div class=\"component-section\">\n        <h2>⚙️ Additional Components</h2>\n        <p>Generic personas, user scenarios, functional requirements, and test scenarios.</p>\n        <p><em>Additional DAK components and documentation.</em></p>\n    </div>`;\n  };\n\n  const generateComponentContent = (component) => {\n    return `\n    <div class=\"component-section\">\n        <h2>${component.icon} ${component.name}</h2>\n        <p>${component.description}</p>\n        <p><strong>Component Details:</strong></p>\n        <ul>\n            <li>Repository: ${owner}/${repoName}</li>\n            <li>Branch: ${selectedBranch}</li>\n            <li>Component Type: ${component.name}</li>\n            <li>Generated: ${new Date().toLocaleString()}</li>\n        </ul>\n        <p><em>Detailed content for this component would be dynamically loaded from the repository files specific to ${component.id}.</em></p>\n        \n        <h3>Implementation Notes</h3>\n        <p>This component publication contains targeted content for ${component.name} from the DAK repository. \n        In a full implementation, this would include:</p>\n        <ul>\n            <li>Specific file content from the repository</li>\n            <li>Related documentation and specifications</li>\n            <li>Cross-references to other DAK components</li>\n            <li>Implementation guidance and examples</li>\n        </ul>\n    </div>`;\n  };\n\n  const generateFullDAKDocBookContent = () => {\n    return `\n        <section xml:id=\"business-processes\">\n            <title>Business Processes</title>\n            <para>BPMN workflows and business process definitions.</para>\n        </section>\n        <section xml:id=\"decision-support\">\n            <title>Decision Support Logic</title>\n            <para>DMN decision tables and clinical decision support.</para>\n        </section>\n        <section xml:id=\"core-data\">\n            <title>Core Data Elements</title>\n            <para>Essential data structures and terminology.</para>\n        </section>`;\n  };\n\n  const generateComponentDocBookContent = (component) => {\n    return `\n        <section xml:id=\"${component.id}\">\n            <title>${component.name}</title>\n            <para>${component.description}</para>\n            <para>Component-specific content and implementation details.</para>\n        </section>`;\n  };\n\n  const getContentType = (format) => {\n    switch (format) {\n      case 'html': return 'text/html';\n      case 'epub': return 'application/epub+zip';\n      case 'docbook': return 'application/xml';\n      default: return 'text/plain';\n    }\n  };\n\n  const getFileExtension = (format) => {\n    switch (format) {\n      case 'html': return 'html';\n      case 'epub': return 'xhtml'; // Simplified EPUB as XHTML\n      case 'docbook': return 'xml';\n      default: return 'txt';\n    }\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFormatIcon = (format) => {\n    const option = formatOptions.find(opt => opt.value === format);\n    return option ? option.icon : '📄';\n  };\n\n  const getSelectedComponentName = () => {\n    const component = dakComponents.find(comp => comp.id === selectedScope);\n    return component ? component.name : 'Unknown';\n  };\n\n  return (\n    <div className=\"dak-publication-generator\">\n      <div className=\"section-header\">\n        <h3 className=\"section-title\">📚 DAK Publication Generator</h3>\n        <p className=\"section-description\">\n          Generate professional WHO SMART Guidelines publications in multiple formats from your DAK repository content.\n        </p>\n      </div>\n\n      <div className=\"publication-generator-content\">\n        <div className=\"publication-scope-selection\">\n          <label className=\"scope-label\">Publication Scope:</label>\n          <div className=\"scope-options\">\n            {dakComponents.map((component) => (\n              <div\n                key={component.id}\n                className={`scope-option ${selectedScope === component.id ? 'selected' : ''}`}\n                onClick={() => setSelectedScope(component.id)}\n              >\n                <div className=\"scope-icon\">{component.icon}</div>\n                <div className=\"scope-info\">\n                  <div className=\"scope-name\">{component.name}</div>\n                  <div className=\"scope-description\">{component.description}</div>\n                </div>\n                {selectedScope === component.id && <div className=\"scope-selected\">✓</div>}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"format-selection\">\n          <label className=\"format-label\">Select Publication Format:</label>\n          <div className=\"format-options\">\n            {formatOptions.map((option) => (\n              <div\n                key={option.value}\n                className={`format-option ${selectedFormat === option.value ? 'selected' : ''}`}\n                onClick={() => setSelectedFormat(option.value)}\n              >\n                <div className=\"format-icon\">{option.icon}</div>\n                <div className=\"format-info\">\n                  <div className=\"format-name\">{option.label}</div>\n                  <div className=\"format-description\">{option.description}</div>\n                </div>\n                {selectedFormat === option.value && <div className=\"format-selected\">✓</div>}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"generation-controls\">\n          <button\n            className=\"generate-btn\"\n            onClick={handleGeneratePublication}\n            disabled={isGenerating}\n          >\n            {isGenerating ? (\n              <>\n                <span className=\"spinner\">⏳</span>\n                Generating {selectedFormat.toUpperCase()}...\n              </>\n            ) : selectedFormat === 'pdf' ? (\n              <>\n                🖨️ Print {getSelectedComponentName()} to PDF\n              </>\n            ) : (\n              <>\n                🚀 Generate {getSelectedComponentName()} {selectedFormat.toUpperCase()} Publication\n              </>\n            )}\n          </button>\n          \n          {!hasWriteAccess && !profile?.isDemo && (\n            <p className=\"permission-notice\">\n              ℹ️ Demo mode: Publications will be generated locally for preview\n            </p>\n          )}\n        </div>\n\n        {error && (\n          <div className=\"error-message\">\n            <span className=\"error-icon\">❌</span>\n            <span>{error}</span>\n          </div>\n        )}\n\n        {generatedPublications.length > 0 && (\n          <div className=\"generated-publications\">\n            <h4>📥 Generated Publications</h4>\n            <div className=\"publications-list\">\n              {generatedPublications.map((publication) => (\n                <div key={publication.id} className=\"publication-item\">\n                  <div className=\"publication-icon\">\n                    {getFormatIcon(publication.format)}\n                  </div>\n                  <div className=\"publication-details\">\n                    <div className=\"publication-name\">{publication.filename}</div>\n                    <div className=\"publication-scope\">\n                      {publication.scopeName || 'Complete DAK'} • {publication.format.toUpperCase()}\n                    </div>\n                    <div className=\"publication-meta\">\n                      Generated: {new Date(publication.generatedAt).toLocaleString()} • \n                      Size: {publication.size}\n                    </div>\n                  </div>\n                  <div className=\"publication-actions\">\n                    <a\n                      href={publication.downloadUrl}\n                      className=\"download-btn\"\n                      download={publication.filename}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      💾 Download\n                    </a>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        <div className=\"service-status\">\n          <div className=\"service-indicator\">\n            <span className=\"status-dot ready\"></span>\n            <span className=\"status-text\">Client-Side Generation: Ready</span>\n          </div>\n          <p className=\"service-note\">\n            Publications are generated directly in your browser using WHO SMART Guidelines templates.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DAKPublicationGenerator;","import React, { useState, useEffect } from 'react';\nimport githubService from '../services/githubService';\nimport StagingGround from './StagingGround';\nimport DAKPublicationGenerator from './DAKPublicationGenerator';\n\nconst Publications = ({ profile, repository, selectedBranch, hasWriteAccess }) => {\n  const [branches, setBranches] = useState([]);\n  const [workflows, setWorkflows] = useState([]);\n  const [workflowRuns, setWorkflowRuns] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const owner = repository.owner?.login || repository.full_name.split('/')[0];\n  const repoName = repository.name;\n\n  useEffect(() => {\n    const fetchPublicationData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Handle demo mode - provide mock data\n        if (profile?.isDemo) {\n          const mockBranches = [\n            { name: 'main', commit: { sha: 'abc123' } },\n            { name: 'feature/updates', commit: { sha: 'def456' } },\n            { name: 'dev', commit: { sha: 'ghi789' } }\n          ];\n          setBranches(mockBranches);\n\n          const mockWorkflows = [\n            { id: 'pages-build', name: 'Deploy to GitHub Pages', triggers: ['push', 'manual'] }\n          ];\n          setWorkflows(mockWorkflows);\n\n          // Mock workflow runs\n          const mockWorkflowRuns = {\n            'main': { \n              status: 'completed', \n              conclusion: 'success', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123456`,\n              updated_at: new Date().toISOString()\n            },\n            'feature/updates': { \n              status: 'completed', \n              conclusion: 'action_required', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123457`,\n              updated_at: new Date().toISOString()\n            },\n            'dev': { \n              status: 'completed', \n              conclusion: 'failure', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123458`,\n              updated_at: new Date().toISOString()\n            }\n          };\n          setWorkflowRuns(mockWorkflowRuns);\n          setLoading(false);\n          return;\n        }\n\n        // Fetch branches (excluding gh-pages)\n        const branchesData = await githubService.getBranches(owner, repoName);\n        const filteredBranches = branchesData.filter(branch => branch.name !== 'gh-pages');\n        setBranches(filteredBranches);\n\n        // Fetch workflows to find ghbuild workflow\n        const workflowsData = await githubService.getWorkflows(owner, repoName);\n        setWorkflows(workflowsData);\n\n        // Find the ghbuild workflow (look for workflow with 'build' or 'publish' in name)\n        const ghbuildWorkflow = workflowsData.find(workflow => \n          workflow.name.toLowerCase().includes('build') || \n          workflow.name.toLowerCase().includes('publish') ||\n          workflow.name.toLowerCase().includes('pages')\n        );\n\n        // Fetch recent workflow runs for each branch if ghbuild workflow exists and has valid ID\n        if (ghbuildWorkflow && ghbuildWorkflow.id) {\n          const runsByBranch = {};\n          for (const branch of filteredBranches) {\n            try {\n              const runs = await githubService.getWorkflowRunsForWorkflow(\n                owner, \n                repoName, \n                ghbuildWorkflow.id,\n                { branch: branch.name, per_page: 1 }\n              );\n              if (runs.length > 0) {\n                runsByBranch[branch.name] = runs[0];\n              }\n            } catch (err) {\n              console.warn(`Could not fetch workflow runs for branch ${branch.name}:`, err);\n            }\n          }\n          setWorkflowRuns(runsByBranch);\n        } else if (ghbuildWorkflow && !ghbuildWorkflow.id) {\n          console.warn('Found workflow but missing ID:', ghbuildWorkflow);\n        }\n\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching publication data:', err);\n        setError('Failed to load publication data');\n        setLoading(false);\n      }\n    };\n\n    fetchPublicationData();\n  }, [owner, repoName, profile?.isDemo]);\n\n  const getPublicationUrl = (branchName) => {\n    if (branchName === repository.default_branch || branchName === 'main') {\n      return `https://${owner}.github.io/${repoName}/`;\n    } else {\n      return `https://${owner}.github.io/${repoName}/branches/${branchName}/`;\n    }\n  };\n\n  const getWorkflowStatusIcon = (branchName) => {\n    const run = workflowRuns[branchName];\n    if (!run) return { icon: '⚪', title: 'No recent workflow runs', link: null };\n\n    const status = run.status;\n    const conclusion = run.conclusion;\n\n    if (status === 'in_progress' || status === 'queued') {\n      return { \n        icon: '🔄', \n        title: 'Workflow running', \n        link: run.html_url,\n        className: 'running' \n      };\n    } else if (conclusion === 'success') {\n      return { \n        icon: '✅', \n        title: 'Last build successful', \n        link: run.html_url,\n        className: 'success' \n      };\n    } else if (conclusion === 'failure') {\n      return { \n        icon: '❌', \n        title: 'Last build failed', \n        link: run.html_url,\n        className: 'failure' \n      };\n    } else if (conclusion === 'action_required') {\n      return { \n        icon: '⏳', \n        title: 'Workflow requires approval', \n        link: run.html_url,\n        className: 'approval-required' \n      };\n    } else {\n      return { \n        icon: '⚠️', \n        title: `Build ${conclusion || status}`, \n        link: run.html_url,\n        className: 'warning' \n      };\n    }\n  };\n\n  const handleRestartWorkflow = async (branchName) => {\n    // Handle demo mode\n    if (profile?.isDemo) {\n      alert(`Demo Mode: Workflow restart simulated for branch: ${branchName}`);\n      return;\n    }\n\n    const ghbuildWorkflow = workflows.find(workflow => \n      workflow.name.toLowerCase().includes('build') || \n      workflow.name.toLowerCase().includes('publish') ||\n      workflow.name.toLowerCase().includes('pages')\n    );\n\n    if (!ghbuildWorkflow) {\n      alert('No suitable workflow found to restart');\n      return;\n    }\n\n    if (!ghbuildWorkflow.id) {\n      alert('Workflow found but missing ID - cannot restart');\n      console.warn('Workflow missing ID:', ghbuildWorkflow);\n      return;\n    }\n\n    try {\n      await githubService.triggerWorkflow(owner, repoName, ghbuildWorkflow.id, branchName);\n      alert(`Workflow restarted for branch: ${branchName}`);\n      \n      // Refresh workflow runs after a delay\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    } catch (err) {\n      console.error('Error restarting workflow:', err);\n      alert('Failed to restart workflow. Please check your permissions.');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"publications-loading\">\n        <div className=\"loading-content\">\n          <h3>Loading Publications...</h3>\n          <p>Fetching branch and workflow information...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Note: Don't return early on error - still show DAK Publication Generator\n\n  return (\n    <div className=\"publications-section\">\n      {/* Staging Ground Section */}\n      <StagingGround\n        repository={repository}\n        selectedBranch={selectedBranch}\n        hasWriteAccess={hasWriteAccess}\n        profile={profile}\n      />\n      \n      {/* DAK Publication Generator Section */}\n      <DAKPublicationGenerator\n        repository={repository}\n        selectedBranch={selectedBranch}\n        hasWriteAccess={hasWriteAccess}\n        profile={profile}\n      />\n      \n      <div className=\"section-header\">\n        <h3 className=\"section-title\">Published DAK Content</h3>\n        <p className=\"section-description\">\n          Access published Implementation Guide content for this DAK repository. Each branch is published \n          automatically via GitHub Actions to GitHub Pages.\n        </p>\n      </div>\n\n      {error ? (\n        <div className=\"publications-error\">\n          <div className=\"error-content\">\n            <h3>Error Loading GitHub Pages Data</h3>\n            <p>{error}</p>\n          </div>\n        </div>\n      ) : (\n        <div className=\"publications-grid\">\n          {branches.map((branch) => {\n            const isMainBranch = branch.name === repository.default_branch || branch.name === 'main';\n            const publicationUrl = getPublicationUrl(branch.name);\n            const workflowStatus = getWorkflowStatusIcon(branch.name);\n\n            return (\n              <div key={branch.name} className={`publication-card ${isMainBranch ? 'main-branch' : ''}`}>\n                <div className=\"publication-header\">\n                  <div className=\"branch-info\">\n                    <span className=\"branch-icon\">🌿</span>\n                    <span className=\"branch-name\">{branch.name}</span>\n                    {isMainBranch && <span className=\"main-badge\">MAIN</span>}\n                  </div>\n                  <div className=\"workflow-status\">\n                    {workflowStatus.link ? (\n                      <a \n                        href={workflowStatus.link} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className={`status-icon ${workflowStatus.className || ''}`}\n                        title={workflowStatus.title}\n                      >\n                        {workflowStatus.icon}\n                      </a>\n                    ) : (\n                      <span \n                        className={`status-icon ${workflowStatus.className || ''}`}\n                        title={workflowStatus.title}\n                      >\n                        {workflowStatus.icon}\n                      </span>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"publication-content\">\n                  <div className=\"publication-url\">\n                    <label>Published at:</label>\n                    <a \n                      href={publicationUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"publication-link\"\n                    >\n                      {publicationUrl}\n                      <span className=\"external-link\">↗</span>\n                    </a>\n                  </div>\n\n                  <div className=\"publication-actions\">\n                    <button\n                      className=\"restart-workflow-btn\"\n                      onClick={() => handleRestartWorkflow(branch.name)}\n                      disabled={!hasWriteAccess}\n                      title={hasWriteAccess ? 'Restart build workflow for this branch' : 'Write permissions required'}\n                    >\n                      🔄 Rebuild\n                    </button>\n                    \n                    <a \n                      href={`https://github.com/${owner}/${repoName}/tree/${branch.name}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"view-source-btn\"\n                      title=\"View source code for this branch\"\n                    >\n                      👁️ View Source\n                    </a>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n\n      {!error && branches.length === 0 && (\n        <div className=\"no-branches\">\n          <p>No publishable branches found (excluding gh-pages).</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Publications;","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport { handleNavigationClick } from '../utils/navigationUtils';\n\nconst ForkStatusBar = ({ profile, repository, selectedBranch }) => {\n  const navigate = useNavigate();\n  \n  const [isExpanded, setIsExpanded] = useState(false);\n  const [forks, setForks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [parentRepository, setParentRepository] = useState(null);\n\n  // Get session storage key for this repository\n  const getStorageKey = React.useCallback(() => {\n    if (!repository) return null;\n    return `sgex_fork_status_${repository.full_name}`;\n  }, [repository]);\n\n  // Load expansion state from session storage\n  useEffect(() => {\n    const storageKey = getStorageKey();\n    if (storageKey) {\n      const savedState = sessionStorage.getItem(storageKey);\n      if (savedState !== null) {\n        setIsExpanded(JSON.parse(savedState));\n      }\n    }\n  }, [getStorageKey]);\n\n  // Save expansion state to session storage\n  const toggleExpansion = () => {\n    const newState = !isExpanded;\n    setIsExpanded(newState);\n    \n    const storageKey = getStorageKey();\n    if (storageKey) {\n      sessionStorage.setItem(storageKey, JSON.stringify(newState));\n    }\n  };\n\n  // Fetch forks and parent repository info when component mounts\n  useEffect(() => {\n    const fetchRepositoryInfo = async () => {\n      if (!repository) return;\n      \n      setLoading(true);\n      setError(null);\n      \n      try {\n        // Check if we need to fetch full repository details to get parent info\n        let fullRepository = repository;\n        if (!repository.parent && (repository.fork === true || repository.fork === undefined)) {\n          // Fetch full repository details to get parent information\n          try {\n            fullRepository = await githubService.getRepository(repository.owner.login, repository.name);\n          } catch (repoErr) {\n            console.warn('Could not fetch full repository details:', repoErr);\n            // Continue with existing repository data\n          }\n        }\n        \n        // Set parent repository if this is a fork\n        if (fullRepository.fork && fullRepository.parent) {\n          setParentRepository(fullRepository.parent);\n        }\n        \n        // Fetch forks for the current repository being viewed\n        const forks = await githubService.getRepositoryForks(repository.owner.login, repository.name);\n        setForks(forks);\n      } catch (err) {\n        console.error('Error fetching repository information:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRepositoryInfo();\n  }, [repository]);\n\n  // Generate DAK dashboard URL for a fork\n  const getForkDashboardUrl = (fork) => {\n    const owner = fork.owner.login;\n    const repoName = fork.name;\n    const branch = fork.default_branch || 'main';\n    return `/dashboard/${owner}/${repoName}/${branch}`;\n  };\n\n  // Handle parent repository navigation\n  const handleParentClick = (event) => {\n    if (!parentRepository) return;\n    \n    const dashboardUrl = getForkDashboardUrl(parentRepository);\n    const navigationState = {\n      profile: {\n        login: parentRepository.owner.login,\n        name: parentRepository.owner.login,\n        avatar_url: parentRepository.owner.avatar_url,\n        type: parentRepository.owner.type\n      },\n      repository: parentRepository,\n      selectedBranch: parentRepository.default_branch || 'main'\n    };\n    \n    handleNavigationClick(event, dashboardUrl, navigate, navigationState);\n  };\n\n  // Handle fork navigation\n  const handleForkClick = (event, fork) => {\n    const dashboardUrl = getForkDashboardUrl(fork);\n    const navigationState = {\n      profile: {\n        login: fork.owner.login,\n        name: fork.owner.login,\n        avatar_url: fork.owner.avatar_url,\n        type: fork.owner.type\n      },\n      repository: fork,\n      selectedBranch: fork.default_branch || 'main'\n    };\n    \n    handleNavigationClick(event, dashboardUrl, navigate, navigationState);\n  };\n\n  if (!repository || loading) {\n    return (\n      <div className=\"fork-status-bar loading\">\n        <div className=\"fork-status-header\">\n          <div className=\"fork-badge-placeholder\">\n            <span className=\"fork-icon\">🍴</span>\n            <span className=\"fork-count\">...</span>\n          </div>\n          <span className=\"fork-status-title\">Loading repository info...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"fork-status-bar error\">\n        <div className=\"fork-status-header\">\n          <div className=\"fork-badge\">\n            <span className=\"fork-icon\">🍴</span>\n            <span className=\"fork-count\">?</span>\n          </div>\n          <span className=\"fork-status-title\">Unable to load repository info</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`fork-status-bar ${isExpanded ? 'expanded' : 'collapsed'}`}>\n      <div className=\"fork-status-header\" onClick={toggleExpansion}>\n        <div className=\"fork-badge\">\n          <span className=\"fork-icon\">🍴</span>\n          <span className=\"fork-count\">{forks.length}</span>\n        </div>\n        <span className=\"fork-status-title\">\n          {parentRepository ? (\n            <>\n              Fork of{' '}\n              <span \n                className=\"parent-repo-link\" \n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleParentClick(e);\n                }}\n              >\n                {parentRepository.owner.login}/{parentRepository.name}\n              </span>\n              {forks.length > 0 && (\n                <> • {forks.length} fork{forks.length !== 1 ? 's' : ''}</>\n              )}\n            </>\n          ) : (\n            <>\n              {forks.length} fork{forks.length !== 1 ? 's' : ''} of {repository?.name || 'repository'}\n            </>\n          )}\n        </span>\n        <button className=\"fork-toggle-btn\" aria-label={isExpanded ? 'Collapse' : 'Expand'}>\n          <span className={`toggle-icon ${isExpanded ? 'expanded' : ''}`}>▼</span>\n        </button>\n      </div>\n      \n      {isExpanded && (\n        <div className=\"fork-list\">\n          {parentRepository && (\n            <div className=\"parent-section\">\n              <h4 className=\"section-title\">Parent Repository</h4>\n              <div \n                className=\"fork-item parent-item\"\n                onClick={(event) => handleParentClick(event)}\n              >\n                <div className=\"fork-avatar\">\n                  <img \n                    src={parentRepository.owner.avatar_url} \n                    alt={parentRepository.owner.login}\n                    className=\"fork-owner-avatar\"\n                  />\n                </div>\n                <div className=\"fork-info\">\n                  <div className=\"fork-name\">\n                    <strong>{parentRepository.owner.login}/{parentRepository.name}</strong>\n                    <span className=\"parent-badge\">Parent</span>\n                  </div>\n                  <div className=\"fork-description\">\n                    {parentRepository.description || 'No description available'}\n                  </div>\n                  <div className=\"fork-stats\">\n                    <span className=\"fork-stat\">\n                      ⭐ {parentRepository.stargazers_count}\n                    </span>\n                    <span className=\"fork-stat\">\n                      📝 {parentRepository.open_issues_count} issues\n                    </span>\n                    <span className=\"fork-stat\">\n                      📅 Updated {new Date(parentRepository.updated_at).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"fork-actions\">\n                  <span className=\"fork-link-hint\">Click to view DAK →</span>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {forks.length === 0 ? (\n            !parentRepository && (\n              <div className=\"no-forks\">\n                <p>No forks found for this repository.</p>\n              </div>\n            )\n          ) : (\n            <div className=\"forks-section\">\n              {parentRepository && <h4 className=\"section-title\">Forks ({forks.length})</h4>}\n              <div className=\"fork-items\">\n                {forks.map((fork) => (\n                  <div \n                    key={fork.id} \n                    className=\"fork-item\"\n                    onClick={(event) => handleForkClick(event, fork)}\n                  >\n                    <div className=\"fork-avatar\">\n                      <img \n                        src={fork.owner.avatar_url} \n                        alt={fork.owner.login}\n                        className=\"fork-owner-avatar\"\n                      />\n                    </div>\n                    <div className=\"fork-info\">\n                      <div className=\"fork-name\">\n                        <strong>{fork.owner.login}/{fork.name}</strong>\n                      </div>\n                      <div className=\"fork-description\">\n                        {fork.description || 'No description available'}\n                      </div>\n                      <div className=\"fork-stats\">\n                        <span className=\"fork-stat\">\n                          ⭐ {fork.stargazers_count}\n                        </span>\n                        <span className=\"fork-stat\">\n                          📝 {fork.open_issues_count} issues\n                        </span>\n                        <span className=\"fork-stat\">\n                          📅 Updated {new Date(fork.updated_at).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"fork-actions\">\n                      <span className=\"fork-link-hint\">Click to view DAK →</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ForkStatusBar;"],"names":["sushiConfigSchema","require","constructor","this","validators","Map","initializeSchemaValidator","initializeDefaultValidators","Ajv","lazyLoadAjv","addFormats","lazyLoadAjvFormats","ajv","allErrors","verbose","sushiConfigValidator","compile","addValidator","level","description","validator","validateXMLWellFormed","bind","validateBPMNNamespace","validateBPMNStartEvent","validateDMNNamespace","validateJSONSyntax","validateFHIRResourceType","validateFileSize","validateFilenameConventions","validateSushiConfig","fileType","validatorId","config","has","set","get","removeValidator","delete","validateFile","filePath","content","results","fileExtension","getFileExtension","fileName","getFileName","typeValidators","universalValidators","result","push","_objectSpread","error","message","validateStagingGround","stagingGround","summary","warning","info","files","validatedAt","Date","now","file","fileResults","path","forEach","canSave","parser","DOMParser","parserError","parseFromString","querySelector","textContent","includes","suggestion","JSON","parse","json","validResourceTypes","resourceType","concat","sizeInBytes","Blob","size","toFixed","issues","test","length","join","endsWith","parsedConfig","lazyLoadYaml","load","yamlError","errors","errorMessages","map","_error$params","_error$params2","field","instancePath","replace","params","missingProperty","allowedValues","details","whoValidation","validateWHOSmartGuidelines","dependencies","canonical","id","startsWith","publisher","toLowerCase","jurisdiction","Array","isArray","parts","split","pop","formatValidationResults","validation","formatted","Object","entries","_ref","getValidationSummary","hasIssues","_stagingGround$files","_stagingGround$files2","isOpen","onClose","repository","selectedBranch","hasWriteAccess","onSaveSuccess","commitMessage","setCommitMessage","useState","overrideValidation","setOverrideValidation","isSaving","setIsSaving","setError","showValidationDetails","setShowValidationDetails","useEffect","validationSummary","dakComplianceService","hasErrors","getErrorMessage","status","formatValidationIcon","_jsx","className","children","_jsxs","onClick","disabled","index","e","stopPropagation","window","confirm","stagingGroundService","removeFile","title","_ref2","type","checked","onChange","target","htmlFor","value","placeholder","rows","required","full_name","async","trim","_repository$owner","owner","login","isDemo","Promise","resolve","setTimeout","sha","url","githubService","createCommit","name","html_url","err","console","_Fragment","profile","setStagingGround","setValidation","loading","setLoading","showSaveDialog","setShowSaveDialog","loadStagingGroundData","useCallback","currentStagingGround","getStagingGround","initialize","addListener","updatedStagingGround","stagingGroundData","validationResult","hasChanges","filesCount","handleSave","alert","lastModified","timestamp","toLocaleTimeString","handleClearChanges","clearStagingGround","SaveDialog","substring","selectedFormat","setSelectedFormat","selectedScope","setSelectedScope","isGenerating","setIsGenerating","generatedPublications","setGeneratedPublications","repoName","formatOptions","label","icon","dakComponents","generatePublicationContent","format","scope","component","publicationTitle","currentDate","toLocaleDateString","getFullYear","generateHTMLPublication","generateEPUBPublication","generateDocBookPublication","Error","date","scopeContent","generateFullDAKContent","generateComponentContent","generateFullDAKDocBookContent","generateComponentDocBookContent","toLocaleString","getContentType","formatFileSize","bytes","i","Math","floor","log","parseFloat","pow","getFormatIcon","option","find","opt","getSelectedComponentName","comp","selectedComponent","scopeName","filePrefix","publicationContent","blob","downloadUrl","URL","createObjectURL","publication","filename","generatedAt","toISOString","prev","print","toUpperCase","href","download","rel","branches","setBranches","workflows","setWorkflows","workflowRuns","setWorkflowRuns","commit","triggers","mockWorkflowRuns","conclusion","updated_at","filteredBranches","getBranches","filter","branch","workflowsData","getWorkflows","ghbuildWorkflow","workflow","runsByBranch","runs","getWorkflowRunsForWorkflow","per_page","warn","fetchPublicationData","StagingGround","DAKPublicationGenerator","isMainBranch","default_branch","publicationUrl","branchName","workflowStatus","run","link","getWorkflowStatusIcon","triggerWorkflow","location","reload","handleRestartWorkflow","navigate","useNavigate","isExpanded","setIsExpanded","forks","setForks","parentRepository","setParentRepository","getStorageKey","React","storageKey","savedState","sessionStorage","getItem","fullRepository","parent","fork","undefined","getRepository","repoErr","getRepositoryForks","fetchRepositoryInfo","getForkDashboardUrl","handleParentClick","event","dashboardUrl","navigationState","avatar_url","handleNavigationClick","toggleExpansion","newState","setItem","stringify","src","alt","stargazers_count","open_issues_count","handleForkClick"],"sourceRoot":""}