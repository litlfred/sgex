{"version":3,"file":"static/js/242.925b6ace.chunk.js","mappings":"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","sources":["components/HelpButton.js","components/DAKDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport HelpModal from './HelpModal';\nimport useThemeImage from '../hooks/useThemeImage';\n\nconst HelpButton = ({ helpTopic, contextData = {} }) => {\n  const [showHelp, setShowHelp] = useState(false);\n\n  // Theme-aware mascot image\n  const mascotImage = useThemeImage('sgex-mascot.png');\n\n  const handleHelpClick = () => {\n    setShowHelp(true);\n  };\n\n  const handleCloseHelp = () => {\n    setShowHelp(false);\n  };\n\n  return (\n    <>\n      <button \n        className=\"help-button\"\n        onClick={handleHelpClick}\n        title=\"Get Help\"\n        aria-label=\"Get Help\"\n      >\n        <img \n          src={mascotImage} \n          alt=\"SGEX Helper\" \n          className=\"help-mascot-icon\"\n        />\n      </button>\n      \n      {showHelp && (\n        <HelpModal\n          topic={helpTopic}\n          contextData={contextData}\n          onClose={handleCloseHelp}\n        />\n      )}\n    </>\n  );\n};\n\nexport default HelpButton;","import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport githubService from '../services/githubService';\nimport dakValidationService from '../services/dakValidationService';\nimport branchContextService from '../services/branchContextService';\nimport HelpButton from './HelpButton';\nimport DAKStatusBox from './DAKStatusBox';\nimport Publications from './Publications';\nimport ForkStatusBar from './ForkStatusBar';\nimport { PageLayout } from './framework';\nimport { handleNavigationClick } from '../utils/navigationUtils';\nimport useThemeImage from '../hooks/useThemeImage';\nimport { ALT_TEXT_KEYS, getAltText } from '../utils/imageAltTextHelper';\n\nconst DAKDashboard = () => {\n  return (\n    <PageLayout pageName=\"dak-dashboard\">\n      <DAKDashboardContent />\n    </PageLayout>\n  );\n};\n\nconst DAKDashboardContent = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user, repo, branch } = useParams();\n  \n  // Theme-aware mascot image for dialog\n  const mascotImage = useThemeImage('sgex-mascot.png');\n  \n  // Try to get data from location.state first, then from URL params\n  const [profile, setProfile] = useState(location.state?.profile || null);\n  const [repository, setRepository] = useState(location.state?.repository || null);\n  const [loading, setLoading] = useState(!profile || !repository);\n  const [error, setError] = useState(null);\n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n  const [showPermissionDialog, setShowPermissionDialog] = useState(false);\n  const [activeTab, setActiveTab] = useState('core'); // 'core' or 'publications'\n  const [selectedBranch, setSelectedBranch] = useState(location.state?.selectedBranch || branch || null);\n  const [issueCounts, setIssueCounts] = useState({});\n  const [showUserMenu, setShowUserMenu] = useState(false);\n\n  // Component Card component defined within the dashboard\n  const ComponentCard = ({ component, handleComponentClick, t }) => {\n    const [imageLoaded, setImageLoaded] = useState(false);\n    const [imageError, setImageError] = useState(false);\n    \n    // Use the theme-aware image hook here instead of in the map function\n    const cardImagePath = useThemeImage(component.cardImage);\n\n    const handleImageLoad = () => {\n      setImageLoaded(true);\n      setImageError(false);\n    };\n\n    const handleImageError = () => {\n      setImageError(true);\n      setImageLoaded(false);\n    };\n\n    return (\n      <div \n        className={`component-card ${component.type.toLowerCase()} large-card ${imageLoaded ? 'image-loaded' : ''}`}\n        onClick={(event) => handleComponentClick(event, component)}\n        style={{ '--component-color': component.color }}\n        tabIndex={0}\n        role=\"button\"\n        aria-label={`${component.name} - ${component.description}`}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            handleComponentClick(event, component);\n          }\n        }}\n      >\n        <div className=\"component-main\">\n          <div className=\"component-header\">\n            <div className=\"component-image-container\">\n              <img \n                src={cardImagePath}\n                alt={getAltText(t, ALT_TEXT_KEYS.ICON_DAK_COMPONENT, component.name, { name: component.name })}\n                className=\"component-card-image\"\n                onLoad={handleImageLoad}\n                onError={handleImageError}\n                style={{ display: imageError ? 'none' : 'block' }}\n              />\n              {/* Fallback icon when image fails to load */}\n              {imageError && (\n                <div className=\"component-icon\" style={{ color: component.color }}>\n                  {component.icon}\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"component-content\">\n            <h4>\n              {component.name}\n            </h4>\n            <p>\n              {component.description}\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"component-meta-section\">\n          <div className=\"component-meta\">\n            <div className=\"file-types\">\n              {component.fileTypes.map((type) => (\n                <span key={type} className=\"file-type-tag\">{type}</span>\n              ))}\n            </div>\n            <div className=\"file-count\">\n              {component.count} files\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Fetch data from URL parameters if not available in location.state\n  useEffect(() => {\n    const fetchDataFromUrlParams = async () => {\n      if ((!profile || !repository) && user && repo) {\n        try {\n          setLoading(true);\n          setError(null);\n\n          // Check if githubService is authenticated\n          if (!githubService.isAuth()) {\n            // This is unauthenticated access to public repositories\n            const publicProfile = {\n              login: user,\n              name: user.charAt(0).toUpperCase() + user.slice(1),\n              avatar_url: `https://github.com/${user}.png`,\n              type: 'User'\n            };\n\n            const publicRepository = {\n              name: repo,\n              full_name: `${user}/${repo}`,\n              owner: { login: user },\n              default_branch: branch || 'main',\n              html_url: `https://github.com/${user}/${repo}`\n            };\n\n            setProfile(publicProfile);\n            setRepository(publicRepository);\n            setSelectedBranch(branch || 'main');\n            setLoading(false);\n            return;\n          }\n\n          // Fetch user profile\n          let userProfile = null;\n          try {\n            const userResponse = await githubService.getUser(user);\n            userProfile = userResponse;\n          } catch (err) {\n            console.error('Error fetching user:', err);\n            // Redirect to landing page with warning message\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. User '${user}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Fetch repository\n          let repoData = null;\n          try {\n            const repoResponse = await githubService.getRepository(user, repo);\n            repoData = repoResponse;\n          } catch (err) {\n            console.error('Error fetching repository:', err);\n            // Redirect to landing page with warning message\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Validate that this is actually a DAK repository\n          const isValidDAK = await dakValidationService.validateDAKRepository(user, repo, branch || repoData.default_branch);\n          \n          if (!isValidDAK) {\n            console.log(`Repository ${user}/${repo} is not a valid DAK repository`);\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Validate branch if specified\n          if (branch) {\n            try {\n              await githubService.getBranch(user, repo, branch);\n              setSelectedBranch(branch);\n            } catch (err) {\n              console.warn(`Branch '${branch}' not found, falling back to default branch`);\n              setSelectedBranch(repoData.default_branch);\n            }\n          } else {\n            setSelectedBranch(repoData.default_branch);\n          }\n\n          setProfile(userProfile);\n          setRepository(repoData);\n          setLoading(false);\n        } catch (err) {\n          console.error('Error fetching data from URL params:', err);\n          setError('Failed to load dashboard data. Please check the URL or try again.');\n          setLoading(false);\n        }\n      } else {\n        setLoading(false);\n      }\n    };\n\n    fetchDataFromUrlParams();\n  }, [user, repo, branch, profile, repository, navigate, t]);\n\n  // Initialize selected branch from session context\n  useEffect(() => {\n    if (repository) {\n      const storedBranch = branchContextService.getSelectedBranch(repository);\n      if (storedBranch) {\n        setSelectedBranch(storedBranch);\n      } else {\n        // Set a default branch\n        const defaultBranch = repository.default_branch || 'main';\n        setSelectedBranch(defaultBranch);\n        branchContextService.setSelectedBranch(repository, defaultBranch);\n      }\n    }\n  }, [repository, profile]);\n\n  // Load issue counts for repository\n  const loadIssueCounts = async () => {\n    if (!repository) return;\n    \n    try {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      \n      // Get all issues (includes pull requests in GitHub API)\n      const issues = await githubService.getIssues(owner, repoName, {\n        state: 'all',\n        per_page: 100\n      });\n      \n      // Filter out pull requests to get actual issues\n      const actualIssues = issues.filter(issue => !issue.pull_request);\n      \n      // Count issues by state\n      const openIssues = actualIssues.filter(issue => issue.state === 'open').length;\n      const closedIssues = actualIssues.filter(issue => issue.state === 'closed').length;\n      \n      setIssueCounts({\n        total: actualIssues.length,\n        open: openIssues,\n        closed: closedIssues\n      });\n    } catch (err) {\n      console.warn('Could not load issue counts:', err);\n      setIssueCounts({ total: 0, open: 0, closed: 0 });\n    }\n  };\n\n  // Load issue counts when repository changes\n  useEffect(() => {\n    if (repository && !loading) {\n      loadIssueCounts();\n    }\n  }, [repository, loading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Check write permissions on mount\n  useEffect(() => {\n    const checkPermissions = async () => {\n      if (repository && profile) {\n        try {\n          const writeAccess = await githubService.checkRepositoryWritePermissions(\n            repository.owner?.login || repository.full_name.split('/')[0],\n            repository.name\n          );\n          setHasWriteAccess(writeAccess);\n        } catch (error) {\n          console.warn('Could not check write permissions:', error);\n          setHasWriteAccess(false);\n        }\n      }\n      setLoading(false);\n    };\n\n    checkPermissions();\n  }, [repository, profile]);\n\n  // Close user menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (showUserMenu && !event.target.closest('.user-menu-container')) {\n        setShowUserMenu(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showUserMenu]);\n\n\n\n  // Define the 9 core DAK components based on WHO SMART Guidelines documentation\n  const coreDAKComponents = [\n    {\n      id: 'health-interventions',\n      name: t('dak.healthInterventions'),\n      description: 'Clinical guidelines and health intervention specifications that define evidence-based care recommendations',\n      icon: '📖',\n      cardImage: 'dashboard/dak_interventions.png',\n      type: 'L2',\n      color: '#0078d4',\n      fileTypes: ['IRIS', 'Publication'],\n      count: 5,\n      editor: 'Publication reference manager with IRIS integration'\n    },\n    {\n      id: 'generic-personas',\n      name: t('dak.genericPersonas'),\n      description: 'Standardized user roles and actor definitions that represent different types of healthcare workers and patients',\n      icon: '👥',\n      cardImage: 'dashboard/dak_personas.png',\n      type: 'L2',\n      color: '#107c10',\n      fileTypes: ['Actor', 'Role'],\n      count: 8,\n      editor: 'Persona definition editor with role-based access specifications'\n    },\n    {\n      id: 'user-scenarios',\n      name: t('dak.userScenarios'),\n      description: 'Narrative descriptions of how different personas interact with the system in specific healthcare contexts',\n      icon: '📝',\n      cardImage: 'dashboard/dak_user_scenarios.png',\n      type: 'L2',\n      color: '#881798',\n      fileTypes: ['Narrative', 'Use Case'],\n      count: 12,\n      editor: 'Scenario editor with workflow visualization'\n    },\n    {\n      id: 'business-processes',\n      name: t('dak.businessProcesses'),\n      description: 'BPMN workflows and business process definitions that model clinical workflows and care pathways',\n      icon: '🔄',\n      cardImage: 'dashboard/dak_business_processes.png',\n      type: 'L2',\n      color: '#d13438',\n      fileTypes: ['BPMN', 'XML'],\n      count: 15,\n      editor: 'Graphical BPMN editor with SVG visualization'\n    },\n    {\n      id: 'core-data-elements',\n      name: t('dak.coreDataElements'),\n      description: 'Essential data structures and terminology needed for clinical data capture and exchange (includes Terminology Services via OCL and Product Master Data via PCMT)',\n      icon: '🗃️',\n      cardImage: 'dashboard/dak_core_data_elements.png',\n      type: 'L2',\n      color: '#ff8c00',\n      fileTypes: ['OCL', 'Concept', 'PCMT', 'Product'],\n      count: issueCounts.total || 89,\n      editor: 'Data element editor with OCL and PCMT integration'\n    },\n    {\n      id: 'decision-support',\n      name: t('dak.decisionSupportLogic'),\n      description: 'DMN decision tables and clinical decision support rules that encode clinical logic',\n      icon: '🎯',\n      cardImage: 'dashboard/dak_decision_support_logic.png',\n      type: 'L2',\n      color: '#00bcf2',\n      fileTypes: ['DMN', 'XML'],\n      count: 24,\n      editor: 'DMN decision table editor with validation'\n    },\n    {\n      id: 'program-indicators',\n      name: t('dak.programIndicators'),\n      description: 'Performance indicators and measurement definitions for monitoring and evaluation',\n      icon: '📊',\n      cardImage: 'dashboard/dak_indicators.png',\n      type: 'L2',\n      color: '#498205',\n      fileTypes: ['Measure', 'Logic'],\n      count: 18,\n      editor: 'Indicator definition editor with measurement logic'\n    },\n    {\n      id: 'functional-requirements',\n      name: t('dak.requirements'),\n      description: 'System requirements specifications that define capabilities and constraints',\n      icon: '⚙️',\n      cardImage: 'dashboard/dak_requirements.png',\n      type: 'L2',\n      color: '#6b69d6',\n      fileTypes: ['Requirements', 'Specification'],\n      count: 32,\n      editor: 'Requirements editor with structured templates'\n    },\n    {\n      id: 'test-scenarios',\n      name: t('dak.testScenarios') || 'Test Scenarios',\n      description: 'Feature files and test scenarios for validating the DAK implementation',\n      icon: '🧪',\n      cardImage: 'dashboard/dak_testing.png',\n      type: 'L2',\n      color: '#8b5cf6',\n      fileTypes: ['Feature', 'Test'],\n      count: 0,\n      editor: 'Testing viewer with feature file browser'\n    }\n  ];\n\n\n\n  const handleComponentClick = (event, component) => {\n    const navigationState = {\n      profile,\n      repository,\n      component,\n      selectedBranch\n    };\n    \n    // For decision-support, always navigate to view page (no permission check needed)\n    if (component.id === 'decision-support') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/decision-support-logic/${owner}/${repoName}/${selectedBranch}`\n        : `/decision-support-logic/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For business processes, navigate to selection page without permission check\n    if (component.id === 'business-processes') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/business-process-selection/${owner}/${repoName}/${selectedBranch}`\n        : `/business-process-selection/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n\n\n    // For health-interventions (WHO Digital Library), allow access in read-only mode\n    if (component.id === 'health-interventions') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/health-interventions/${owner}/${repoName}/${selectedBranch}`\n        : `/health-interventions/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For core-data-elements (Component 2 Core Data Dictionary), navigate to viewer\n    if (component.id === 'core-data-elements') {\n      const owner = user || repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repo || repository.name;\n      const branchName = selectedBranch;\n      \n      const viewerPath = branchName ? \n        `/core-data-dictionary-viewer/${owner}/${repoName}/${branchName}` :\n        `/core-data-dictionary-viewer/${owner}/${repoName}`;\n        \n      handleNavigationClick(event, viewerPath, navigate, navigationState);\n      return;\n    }\n\n\n\n    // For generic-personas, navigate to actor editor\n    if (component.id === 'generic-personas') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/actor-editor/${owner}/${repoName}/${selectedBranch}`\n        : `/actor-editor/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For test-scenarios, navigate to testing viewer\n    if (component.id === 'test-scenarios') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/testing-viewer/${owner}/${repoName}/${selectedBranch}`\n        : `/testing-viewer/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For other components, check permissions before proceeding\n    if (!hasWriteAccess) {\n      // If command-click, still show permission dialog instead of opening new tab\n      // since the user needs to authenticate first\n      setShowPermissionDialog(true);\n      return;\n    }\n\n    // Navigate to component-specific routes for other components\n    const owner = repository.owner?.login || repository.full_name.split('/')[0];\n    const repoName = repository.name;\n    const path = selectedBranch \n      ? `/${component.id}/${owner}/${repoName}/${selectedBranch}`\n      : `/${component.id}/${owner}/${repoName}`;\n    \n    handleNavigationClick(event, path, navigate, navigationState);\n  };\n\n\n\n  if (loading) {\n    return (\n      <div className=\"dak-dashboard loading-state\">\n        <div className=\"loading-content\">\n          <h2>Loading Dashboard...</h2>\n          <p>Fetching repository and user data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dak-dashboard error-state\">\n        <div className=\"error-content\">\n          <h2>{t('dashboard.errorLoading')}</h2>\n          <p>{error}</p>\n          <div className=\"error-actions\">\n            <button onClick={() => navigate('/')} className=\"action-btn primary\">\n              {t('navigation.home')}\n            </button>\n            <button onClick={() => window.location.reload()} className=\"action-btn secondary\">\n              {t('common.retry')}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!profile || !repository) {\n    navigate('/');\n    return <div>Redirecting...</div>;\n  }\n\n  return (\n    <div className=\"dak-dashboard\">\n      <div className=\"dashboard-content\">\n        <div className=\"dashboard-main\">\n          <div className=\"dashboard-intro\">\n            <h2>{t('dak.components')}</h2>\n            <p>\n              Select a component to edit content for <strong>{repository.name}</strong>\n              {selectedBranch && (\n                <span> on branch <code className=\"branch-display\">{selectedBranch}</code></span>\n              )}. \n              Components are organized according to the WHO SMART Guidelines framework.\n            </p>\n          </div>\n\n          {/* Fork Status Bar - shows forks of sgex repository */}\n          <ForkStatusBar \n            profile={profile}\n            repository={repository}\n            selectedBranch={selectedBranch}\n          />\n\n          {/* DAK Status Box - only show when repository and branch are selected */}\n          {repository && selectedBranch && (\n            <DAKStatusBox \n              repository={repository}\n              selectedBranch={selectedBranch}\n              hasWriteAccess={hasWriteAccess}\n              profile={profile}\n            />\n          )}\n\n          {/* Tab Navigation - Full Width Toggle Buttons */}\n          <div className=\"tab-navigation-fullwidth\">\n            <button \n              className={`tab-button-fullwidth ${activeTab === 'core' ? 'active' : ''}`}\n              onClick={() => setActiveTab('core')}\n            >\n              <span className=\"tab-icon\">⭐</span>\n              <span className=\"tab-text\">9 Core Components</span>\n            </button>\n            <button\n              className={`tab-button-fullwidth ${activeTab === 'publications' ? 'active' : ''}`}\n              onClick={() => setActiveTab('publications')}\n            >\n              <span className=\"tab-icon\">📚</span>\n              <span className=\"tab-text\">Publications</span>\n            </button>\n            <button\n              className={`tab-button-fullwidth ${activeTab === 'other' ? 'active' : ''}`}\n              onClick={() => setActiveTab('other')}\n            >\n              <span className=\"tab-icon\">🔧</span>\n              <span className=\"tab-text\">Other DAK Components</span>\n            </button>\n          </div>\n\n          {/* 9 Core DAK Components Section */}\n          {activeTab === 'core' && (\n            <div className=\"components-section active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">{t('dak.components')}</h3>\n                <p className=\"section-description\">\n                  Essential components that form the foundation of any WHO SMART Guidelines Digital Adaptation Kit\n                </p>\n              </div>\n\n              <div className=\"components-grid core-components\">\n                {coreDAKComponents.map((component) => {\n                  return (\n                    <ComponentCard\n                      key={component.id}\n                      component={component}\n                      handleComponentClick={handleComponentClick}\n                      t={t}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Other DAK Components Section */}\n          {activeTab === 'other' && (\n            <div className=\"components-section other-components active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">Other DAK Components</h3>\n                <p className=\"section-description\">\n                  Additional specialized components for advanced DAK functionality and implementation\n                </p>\n              </div>\n\n              <div className=\"components-grid other-components\">\n                <div \n                  className=\"component-card l3\"\n                  onClick={(event) => {\n                    const component = {\n                      id: 'questionnaire-editor',\n                      name: 'FHIR Questionnaires',\n                      description: 'Structured questionnaires and forms for data collection using FHIR standard'\n                    };\n                    const owner = repository.owner?.login || repository.full_name.split('/')[0];\n                    const repoName = repository.name;\n                    const path = selectedBranch \n                      ? `/questionnaire-editor/${owner}/${repoName}/${selectedBranch}`\n                      : `/questionnaire-editor/${owner}/${repoName}`;\n                    \n                    const navigationState = {\n                      profile,\n                      repository,\n                      component,\n                      selectedBranch\n                    };\n                    \n                    handleNavigationClick(event, path, navigate, navigationState);\n                  }}\n                  style={{ '--component-color': '#17a2b8' }}\n                >\n                  <div className=\"component-header\">\n                    <div className=\"component-icon\" style={{ color: '#17a2b8' }}>\n                      📋\n                    </div>\n                  </div>\n                  \n                  <div className=\"component-content\">\n                    <h4>FHIR Questionnaires</h4>\n                    <p>Structured questionnaires and forms for data collection using FHIR Questionnaire standard</p>\n                    \n                    <div className=\"component-meta\">\n                      <div className=\"file-types\">\n                        <span className=\"file-type-tag\">JSON</span>\n                        <span className=\"file-type-tag\">FHIR</span>\n                      </div>\n                      <div className=\"file-count\">\n                        questionnaires/\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Publications Section */}\n          {activeTab === 'publications' && (\n            <div className=\"components-section publications-section active\">\n              <Publications\n                profile={profile}\n                repository={repository}\n                selectedBranch={selectedBranch}\n                hasWriteAccess={hasWriteAccess}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Permission Upgrade Dialog */}\n      {showPermissionDialog && (\n        <div className=\"permission-dialog-overlay\">\n          <div className=\"permission-dialog\">\n            <div className=\"dialog-header\">\n              <h3>Edit Access Required</h3>\n              <button \n                className=\"dialog-close\"\n                onClick={() => setShowPermissionDialog(false)}\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"dialog-content\">\n              <div className=\"dialog-mascot\">\n                <img src={mascotImage} alt={getAltText(t, ALT_TEXT_KEYS.MASCOT_HELPER, 'SGEX Helper')} className=\"dialog-mascot-img\" />\n                <div className=\"mascot-message\">\n                  <p>You need edit permissions to modify DAK components!</p>\n                  <p>Your current token only provides read access to this repository.</p>\n                </div>\n              </div>\n              <div className=\"permission-options\">\n                <div className=\"option-card\">\n                  <h4>🔧 Upgrade Your Token</h4>\n                  <p>Create a new fine-grained token with write permissions for this repository.</p>\n                  <div className=\"option-buttons\">\n                    <a \n                      href=\"https://github.com/settings/personal-access-tokens/new\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"btn-primary\"\n                    >\n                      Create New Token\n                    </a>\n                    <HelpButton \n                      helpTopic=\"github-token\"\n                      contextData={{ \n                        repository: { owner: repository.owner?.login || repository.full_name.split('/')[0], name: repository.name },\n                        requiredScopes: ['Contents: Write', 'Metadata: Read', 'Pull requests: Write'],\n                        permissionMode: 'edit',\n                        upgradeMode: true\n                      }}\n                    />\n                  </div>\n                </div>\n                <div className=\"option-card\">\n                  <h4>👁️ Continue in Read-Only Mode</h4>\n                  <p>Browse and view DAK components without editing capabilities.</p>\n                  <button \n                    className=\"btn-secondary\"\n                    onClick={() => setShowPermissionDialog(false)}\n                  >\n                    Continue Read-Only\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DAKDashboard;"],"names":["_ref","helpTopic","contextData","showHelp","setShowHelp","useState","mascotImage","useThemeImage","_jsxs","_Fragment","children","_jsx","className","onClick","handleHelpClick","title","src","alt","HelpModal","topic","onClose","handleCloseHelp","DAKDashboardContent","_location$state","_location$state2","_location$state3","_repository$owner1","t","useTranslation","location","useLocation","navigate","useNavigate","user","repo","branch","useParams","profile","setProfile","state","repository","setRepository","loading","setLoading","error","setError","hasWriteAccess","setHasWriteAccess","showPermissionDialog","setShowPermissionDialog","activeTab","setActiveTab","selectedBranch","setSelectedBranch","issueCounts","setIssueCounts","showUserMenu","setShowUserMenu","ComponentCard","component","handleComponentClick","imageLoaded","setImageLoaded","imageError","setImageError","cardImagePath","cardImage","concat","type","toLowerCase","event","style","color","tabIndex","role","name","description","onKeyDown","key","preventDefault","getAltText","ALT_TEXT_KEYS","ICON_DAK_COMPONENT","onLoad","handleImageLoad","onError","handleImageError","display","icon","fileTypes","map","count","useEffect","async","githubService","isAuth","publicProfile","login","charAt","toUpperCase","slice","avatar_url","publicRepository","full_name","owner","default_branch","html_url","userProfile","getUser","err","console","warningMessage","repoData","getRepository","dakValidationService","validateDAKRepository","log","getBranch","warn","fetchDataFromUrlParams","storedBranch","branchContextService","getSelectedBranch","defaultBranch","_repository$owner","split","repoName","actualIssues","getIssues","per_page","filter","issue","pull_request","openIssues","length","closedIssues","total","open","closed","loadIssueCounts","_repository$owner2","writeAccess","checkRepositoryWritePermissions","checkPermissions","handleClickOutside","target","closest","document","addEventListener","removeEventListener","coreDAKComponents","id","editor","_repository$owner9","navigationState","_repository$owner3","path","handleNavigationClick","_repository$owner4","_repository$owner5","_repository$owner6","branchName","viewerPath","_repository$owner7","_repository$owner8","window","reload","ForkStatusBar","DAKStatusBox","_repository$owner0","Publications","MASCOT_HELPER","href","rel","HelpButton","requiredScopes","permissionMode","upgradeMode","DAKDashboard","PageLayout","pageName"],"sourceRoot":""}