{"version":3,"file":"static/js/2661.ac7f2ff5.chunk.js","mappings":"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","sources":["components/BPMNSource.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport { PageLayout } from './framework';\n\nconst BPMNSource = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  \n  const { profile, repository, component, selectedFile, selectedBranch } = location.state || {};\n  \n  // Essential debug logging for troubleshooting branch URL issue\n  console.log('BPMNSource: Received selectedBranch =', selectedBranch);\n  \n  const [bpmnXml, setBpmnXml] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n\n  // Check write permissions\n  useEffect(() => {\n    const checkPermissions = async () => {\n      if (repository && profile) {\n        try {\n          // Simple permission check - in real app, this would use githubService\n          const writeAccess = profile.token && repository.permissions?.push;\n          setHasWriteAccess(writeAccess || false);\n        } catch (error) {\n          console.warn('Could not check write permissions:', error);\n          setHasWriteAccess(false);\n        }\n      }\n    };\n\n    checkPermissions();\n  }, [repository, profile]);\n\n  // Load BPMN XML source\n  useEffect(() => {\n    const loadBpmnSource = async () => {\n      if (!selectedFile || !repository) {\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        const owner = repository.owner?.login || repository.full_name.split('/')[0];\n        const repoName = repository.name;\n        const ref = selectedBranch || 'main';\n\n        console.log(`Loading BPMN source from ${owner}/${repoName}:${selectedFile.path} (ref: ${ref})`);\n        \n        // Use githubService to fetch file content (works for both public and private repos)\n        const xmlContent = await githubService.getFileContent(owner, repoName, selectedFile.path, ref);\n        \n        console.log('Successfully loaded BPMN source from repository');\n\n        setBpmnXml(xmlContent);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error loading BPMN source:', err);\n        \n        // Provide specific error messages based on the error type\n        if (err.status === 404) {\n          setError('BPMN file not found in the repository. The file may have been moved or deleted.');\n        } else if (err.status === 403) {\n          setError('Access denied. This repository may be private and require authentication.');\n        } else if (err.message.includes('rate limit')) {\n          setError('GitHub API rate limit exceeded. Please try again later or authenticate for higher limits.');\n        } else {\n          setError(`Failed to load BPMN source: ${err.message}`);\n        }\n        \n        setLoading(false);\n      }\n    };\n\n    loadBpmnSource();\n  }, [selectedFile, repository, selectedBranch]);\n\n  const handleCopyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(bpmnXml);\n      // Show temporary success message\n      const button = document.querySelector('.copy-btn');\n      const originalText = button.textContent;\n      button.textContent = '✓ Copied!';\n      setTimeout(() => {\n        button.textContent = originalText;\n      }, 2000);\n    } catch (err) {\n      console.error('Failed to copy to clipboard:', err);\n      alert('Failed to copy to clipboard');\n    }\n  };\n\n  const handleDownload = () => {\n    const blob = new Blob([bpmnXml], { type: 'application/xml' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = selectedFile.name;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const handleBackToSelection = () => {\n    navigate('/business-process-selection', {\n      state: {\n        profile,\n        repository,\n        component,\n        selectedBranch\n      }\n    });\n  };\n\n  const getGitHubUrl = () => {\n    const owner = repository.owner?.login || repository.full_name.split('/')[0];\n    const branch = selectedBranch || 'main';\n    \n    // Essential debug logging\n    console.log('BPMNSource GitHub URL: using branch =', branch);\n    \n    // Only encode the branch if it contains special characters, leave the file path as-is\n    const encodedBranch = encodeURIComponent(branch);\n    const url = `https://github.com/${owner}/${repository.name}/blob/${encodedBranch}/${selectedFile.path}`;\n    \n    console.log('BPMNSource GitHub URL generated:', url);\n    \n    return url;\n  };\n\n  const getGitHubEditUrl = () => {\n    const owner = repository.owner?.login || repository.full_name.split('/')[0];\n    const branch = selectedBranch || 'main';\n    \n    // Only encode the branch if it contains special characters, leave the file path as-is\n    const encodedBranch = encodeURIComponent(branch);\n    const url = `https://github.com/${owner}/${repository.name}/edit/${encodedBranch}/${selectedFile.path}`;\n    \n    return url;\n  };\n\n  // Redirect if missing required context - use useEffect to avoid render issues\n  useEffect(() => {\n    if (!profile || !repository || !selectedFile) {\n      navigate('/');\n    }\n  }, [profile, repository, selectedFile, navigate]);\n\n  return (\n    <PageLayout pageName=\"bpmn-source\">\n      <div className=\"bpmn-source\">\n        {!profile || !repository || !selectedFile ? (\n          <div className=\"redirecting-state\">\n            <h2>Redirecting...</h2>\n            <p>Missing required context. Redirecting to home page...</p>\n          </div>\n        ) : (\n          <div className=\"source-content\">\n        <div className=\"breadcrumb\">\n          <button onClick={() => navigate('/')} className=\"breadcrumb-link\">\n            Select Profile\n          </button>\n          <span className=\"breadcrumb-separator\">›</span>\n          <button onClick={() => navigate(`/dak-selection/${profile.login}`, { state: { profile } })} className=\"breadcrumb-link\">\n            Select Repository\n          </button>\n          <span className=\"breadcrumb-separator\">›</span>\n          <button onClick={() => navigate('/dashboard', { state: { profile, repository } })} className=\"breadcrumb-link\">\n            DAK Components\n          </button>\n          <span className=\"breadcrumb-separator\">›</span>\n          <button onClick={handleBackToSelection} className=\"breadcrumb-link\">\n            Business Processes\n          </button>\n          <span className=\"breadcrumb-separator\">›</span>\n          <span className=\"breadcrumb-current\">{selectedFile.name} (source)</span>\n        </div>\n\n        <div className=\"source-main\">\n          <div className=\"source-toolbar\">\n            <div className=\"toolbar-left\">\n              <h3>{selectedFile.name}</h3>\n              <span className=\"source-mode-badge\">📄 XML Source</span>\n            </div>\n            <div className=\"toolbar-right\">\n              <button \n                className=\"action-btn secondary\"\n                onClick={handleBackToSelection}\n              >\n                ← Back to List\n              </button>\n              <button \n                className=\"action-btn secondary\"\n                onClick={handleCopyToClipboard}\n                disabled={loading}\n              >\n                📋 Copy\n              </button>\n              <button \n                className=\"action-btn secondary\"\n                onClick={handleDownload}\n                disabled={loading}\n              >\n                💾 Download\n              </button>\n            </div>\n          </div>\n\n          <div className=\"source-container\">\n            {loading ? (\n              <div className=\"loading-overlay\">\n                <div className=\"spinner\"></div>\n                <p>Loading BPMN source code...</p>\n              </div>\n            ) : error ? (\n              <div className=\"error-overlay\">\n                <p>❌ {error}</p>\n                <button \n                  className=\"action-btn secondary\"\n                  onClick={() => window.location.reload()}\n                >\n                  Retry\n                </button>\n              </div>\n            ) : (\n              <pre className=\"source-code\">\n                <code className=\"xml-code\">{bpmnXml}</code>\n              </pre>\n            )}\n          </div>\n\n          <div className=\"source-actions\">\n            <div className=\"github-links\">\n              <h4>GitHub Actions</h4>\n              <div className=\"link-buttons\">\n                <a \n                  href={getGitHubUrl()}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"action-btn github-view\"\n                >\n                  👁️ View on GitHub\n                </a>\n                {hasWriteAccess && (\n                  <a \n                    href={getGitHubEditUrl()}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"action-btn github-edit\"\n                  >\n                    ✏️ Edit on GitHub\n                  </a>\n                )}\n              </div>\n            </div>\n\n            <div className=\"file-info\">\n              <h4>File Information</h4>\n              <div className=\"info-grid\">\n                <div className=\"info-item\">\n                  <label>File Path:</label>\n                  <span className=\"file-path\">{selectedFile.path}</span>\n                </div>\n                <div className=\"info-item\">\n                  <label>File Size:</label>\n                  <span>{(selectedFile.size / 1024).toFixed(1)} KB</span>\n                </div>\n                <div className=\"info-item\">\n                  <label>Format:</label>\n                  <span>BPMN 2.0 XML</span>\n                </div>\n                <div className=\"info-item\">\n                  <label>Access Level:</label>\n                  <span className={`access-badge ${hasWriteAccess ? 'write' : 'read'}`}>\n                    {hasWriteAccess ? '✏️ Edit Access' : '👁️ Read-Only'}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          </div>\n        </div>\n        )}\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default BPMNSource;"],"names":["BPMNSource","location","useLocation","navigate","useNavigate","profile","repository","component","selectedFile","selectedBranch","state","console","log","bpmnXml","setBpmnXml","useState","loading","setLoading","error","setError","hasWriteAccess","setHasWriteAccess","useEffect","async","_repository$permissio","writeAccess","token","permissions","push","warn","checkPermissions","_repository$owner","owner","login","full_name","split","repoName","name","ref","concat","path","xmlContent","githubService","getFileContent","err","status","message","includes","loadBpmnSource","handleBackToSelection","_jsx","PageLayout","pageName","children","className","_jsxs","onClick","navigator","clipboard","writeText","button","document","querySelector","originalText","textContent","setTimeout","alert","disabled","handleDownload","blob","Blob","type","url","URL","createObjectURL","a","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","window","reload","getGitHubUrl","_repository$owner2","branch","encodedBranch","encodeURIComponent","target","rel","getGitHubEditUrl","_repository$owner3","size","toFixed"],"sourceRoot":""}