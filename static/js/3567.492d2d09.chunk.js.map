{"version":3,"file":"static/js/3567.492d2d09.chunk.js","mappings":"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","sources":["hooks/useDAKUrlParams.js","components/BPMNPreview.js","components/BusinessProcessSelection.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport dakValidationService from '../services/dakValidationService';\n\n/**\n * Custom hook to handle DAK URL parameters (user, repo, branch) for DAK component pages.\n * This extracts and validates DAK parameters from the URL, similar to how DAKDashboard works.\n * \n * @returns {Object} Contains loading state, error, profile, repository, selectedBranch, and navigate function\n */\nconst useDAKUrlParams = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user, repo, branch } = useParams();\n  \n  // Try to get data from location.state first, then from URL params\n  const [profile, setProfile] = useState(location.state?.profile || null);\n  const [repository, setRepository] = useState(location.state?.repository || null);\n  const [selectedBranch, setSelectedBranch] = useState(location.state?.selectedBranch || branch || null);\n  const [loading, setLoading] = useState(!profile || !repository);\n  const [error, setError] = useState(null);\n\n  // Fetch data from URL parameters if not available in location.state\n  useEffect(() => {\n    const fetchDataFromUrlParams = async () => {\n      console.log('🔍 useDAKUrlParams: Starting data fetch analysis:', {\n        urlParams: { user, repo, branch },\n        currentState: {\n          hasProfile: !!profile,\n          hasRepository: !!repository,\n          profileLogin: profile?.login,\n          repositoryFullName: repository?.full_name,\n          repositoryOwner: repository?.owner?.login\n        },\n        hasLocationState: !!location.state,\n        locationStateSummary: location.state ? {\n          hasProfile: !!location.state.profile,\n          hasRepository: !!location.state.repository,\n          profileLogin: location.state.profile?.login,\n          repositoryFullName: location.state.repository?.full_name,\n          repositoryOwner: location.state.repository?.owner?.login\n        } : null,\n        isAuthenticated: githubService.isAuth(),\n        needsFetch: (!profile || !repository) && user && repo\n      });\n\n      if ((!profile || !repository) && user && repo) {\n        console.log('useDAKUrlParams: Fetching data from URL parameters:', {\n          user, \n          repo, \n          branch,\n          hasProfile: !!profile,\n          hasRepository: !!repository,\n          hasLocationState: !!location.state,\n          isAuthenticated: githubService.isAuth()\n        });\n        \n        try {\n          setLoading(true);\n          setError(null);\n\n          // Check if githubService is authenticated\n          if (!githubService.isAuth()) {\n            console.log('🚫 useDAKUrlParams: Not authenticated, using public access');\n            \n            // This is unauthenticated access to public repositories\n            // Create profile without isDemo flag for public repository access\n            console.log('👀 useDAKUrlParams: Unauthenticated public access, creating public profile');\n            \n            const publicProfile = {\n              login: user,\n              name: user.charAt(0).toUpperCase() + user.slice(1),\n              avatar_url: `https://github.com/${user}.png`,\n              type: 'User'\n            };\n\n            const publicRepository = {\n              name: repo,\n              full_name: `${user}/${repo}`,\n              owner: { login: user },\n              default_branch: branch || 'main',\n              html_url: `https://github.com/${user}/${repo}`\n            };\n\n            console.log('📋 useDAKUrlParams: Setting public access state:', {\n              profile: publicProfile,\n              repository: publicRepository,\n              selectedBranch: branch || 'main'\n            });\n\n            setProfile(publicProfile);\n            setRepository(publicRepository);\n            setSelectedBranch(branch || 'main');\n            setLoading(false);\n            return;\n          }\n\n          console.log('🔐 useDAKUrlParams: Authenticated, fetching real repository data');\n\n          // Fetch user profile\n          let userProfile = null;\n          try {\n            console.log(`🔍 useDAKUrlParams: Fetching user profile for: ${user}`);\n            const userResponse = await githubService.getUser(user);\n            userProfile = userResponse;\n            console.log('✅ useDAKUrlParams: User profile fetched:', {\n              login: userProfile.login,\n              name: userProfile.name,\n              type: userProfile.type\n            });\n          } catch (err) {\n            console.error('❌ useDAKUrlParams: Error fetching user:', err);\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. User '${user}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Fetch repository\n          let repoData = null;\n          try {\n            console.log(`useDAKUrlParams: Fetching repository data for ${user}/${repo}`);\n            const repoResponse = await githubService.getRepository(user, repo);\n            repoData = repoResponse;\n            console.log('useDAKUrlParams: Repository data fetched successfully:', {\n              name: repoData.name,\n              full_name: repoData.full_name,\n              owner: repoData.owner,\n              default_branch: repoData.default_branch\n            });\n          } catch (err) {\n            console.error('useDAKUrlParams: Error fetching repository:', err);\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Validate that this is actually a DAK repository\n          const isValidDAK = await dakValidationService.validateDAKRepository(user, repo, branch || repoData.default_branch);\n          \n          if (!isValidDAK) {\n            console.log(`Repository ${user}/${repo} is not a valid DAK repository`);\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Validate branch if specified\n          if (branch) {\n            try {\n              await githubService.getBranch(user, repo, branch);\n              setSelectedBranch(branch);\n            } catch (err) {\n              console.warn(`Branch '${branch}' not found, falling back to default branch`);\n              setSelectedBranch(repoData.default_branch);\n            }\n          } else {\n            setSelectedBranch(repoData.default_branch);\n          }\n\n          console.log('useDAKUrlParams: Setting final state:', {\n            profile: {\n              login: userProfile.login,\n              name: userProfile.name,\n              type: userProfile.type\n            },\n            repository: {\n              name: repoData.name,\n              full_name: repoData.full_name,\n              owner: repoData.owner,\n              default_branch: repoData.default_branch\n            },\n            selectedBranch: branch || repoData.default_branch\n          });\n\n          setProfile(userProfile);\n          setRepository(repoData);\n          setLoading(false);\n        } catch (err) {\n          console.error('Error fetching data from URL params:', err);\n          setError('Failed to load DAK data. Please check the URL or try again.');\n          setLoading(false);\n        }\n      } else {\n        console.log('📋 useDAKUrlParams: Not fetching from URL params, using existing state:', {\n          hasProfile: !!profile,\n          hasRepository: !!repository,\n          hasUserParam: !!user,\n          hasRepoParam: !!repo,\n          reason: !profile || !repository ? 'missing URL params' : 'state already populated'\n        });\n        setLoading(false);\n      }\n    };\n\n    fetchDataFromUrlParams();\n  }, [user, repo, branch, profile, repository, navigate, location.state]);\n\n  return {\n    profile,\n    repository,\n    selectedBranch,\n    loading,\n    error,\n    user,\n    repo,\n    branch: branch || selectedBranch,\n    navigate\n  };\n};\n\nexport default useDAKUrlParams;","import React, { useState, useEffect, useRef } from 'react';\nimport githubService from '../services/githubService';\nimport { createLazyBpmnViewer } from '../utils/lazyRouteUtils';\n\nconst BPMNPreview = ({ file, repository, selectedBranch, profile }) => {\n  const containerRef = useRef(null);\n  const viewerRef = useRef(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadPreview = async () => {\n      if (!file || !repository) {\n        console.log('🚫 BPMNPreview: Missing required props:', {\n          hasFile: !!file,\n          hasRepository: !!repository,\n          fileName: file?.name\n        });\n        return;\n      }\n\n      // Wait for container to be available in DOM\n      const waitForContainer = (attempt = 0) => {\n        const maxAttempts = 20; // Try for up to 2 seconds\n        \n        if (containerRef.current) {\n          console.log(`✅ BPMNPreview: Container found on attempt ${attempt + 1}`);\n          startPreviewLoad();\n        } else if (attempt < maxAttempts) {\n          console.log(`⏳ BPMNPreview: Container not ready, attempt ${attempt + 1}/${maxAttempts}`);\n          setTimeout(() => waitForContainer(attempt + 1), 100);\n        } else {\n          console.error('❌ BPMNPreview: Container never became available');\n          setError('Failed to initialize preview container');\n          setLoading(false);\n        }\n      };\n\n      const startPreviewLoad = async () => {\n        try {\n          setLoading(true);\n          setError(null);\n\n          // Clean container\n          if (containerRef.current) {\n            containerRef.current.innerHTML = '';\n          }\n\n          const owner = repository.owner?.login || repository.full_name.split('/')[0];\n          const repoName = repository.name;\n          const ref = selectedBranch || 'main';\n          const isDemo = file.path?.includes('demo/') || file.sha?.startsWith('demo-');\n\n          console.log('🎬 BPMNPreview: Starting preview load for file:', {\n            fileName: file.name,\n            filePath: file.path,\n            owner: owner,\n            repoName: repoName,\n            ref: ref,\n            isDemo: isDemo,\n            hasDownloadUrl: !!file.download_url\n          });\n\n          let bpmnXml;\n\n          if (isDemo) {\n            // For demo files, create a representative BPMN diagram\n            const processName = file.name.replace('.bpmn', '').replace(/[-_]/g, ' ');\n            bpmnXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn:definitions xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" \n                  xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" \n                  xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" \n                  xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" \n                  id=\"Definitions_1\" targetNamespace=\"http://bpmn.io/schema/bpmn\">\n  <bpmn:process id=\"Process_${file.name.replace(/[^a-zA-Z0-9]/g, '_')}\" isExecutable=\"false\">\n    <bpmn:startEvent id=\"StartEvent_1\" name=\"Start\">\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:task id=\"Task_1\" name=\"${processName}\">\n      <bpmn:incoming>Flow_1</bpmn:incoming>\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\n    </bpmn:task>\n    <bpmn:endEvent id=\"EndEvent_1\" name=\"End\">\n      <bpmn:incoming>Flow_2</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id=\"Flow_1\" sourceRef=\"StartEvent_1\" targetRef=\"Task_1\" />\n    <bpmn:sequenceFlow id=\"Flow_2\" sourceRef=\"Task_1\" targetRef=\"EndEvent_1\" />\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_${file.name.replace(/[^a-zA-Z0-9]/g, '_')}\">\n      <bpmndi:BPMNShape id=\"StartEvent_1_di\" bpmnElement=\"StartEvent_1\">\n        <dc:Bounds x=\"152\" y=\"82\" width=\"36\" height=\"36\" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x=\"158\" y=\"125\" width=\"24\" height=\"14\" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Task_1_di\" bpmnElement=\"Task_1\">\n        <dc:Bounds x=\"250\" y=\"60\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"EndEvent_1_di\" bpmnElement=\"EndEvent_1\">\n        <dc:Bounds x=\"402\" y=\"82\" width=\"36\" height=\"36\" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x=\"410\" y=\"125\" width=\"20\" height=\"14\" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id=\"Flow_1_di\" bpmnElement=\"Flow_1\">\n        <di:waypoint x=\"188\" y=\"100\" />\n        <di:waypoint x=\"250\" y=\"100\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_2_di\" bpmnElement=\"Flow_2\">\n        <di:waypoint x=\"350\" y=\"100\" />\n        <di:waypoint x=\"402\" y=\"100\" />\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>`;\n          } else {\n            // For real files, try to load the actual BPMN content\n            console.log('📥 BPMNPreview: Attempting to load real BPMN file content...');\n            try {\n              console.log('🌐 BPMNPreview: Calling githubService.getFileContent with params:', {\n                owner, repoName, path: file.path, ref\n              });\n              bpmnXml = await githubService.getFileContent(owner, repoName, file.path, ref);\n              console.log('✅ BPMNPreview: Successfully loaded BPMN content, length:', bpmnXml?.length);\n              console.log('🔍 BPMNPreview: Content preview (first 100 chars):', bpmnXml?.substring(0, 100));\n              \n              // Validate that we got actual BPMN content\n              if (!bpmnXml || typeof bpmnXml !== 'string') {\n                throw new Error('Invalid content received: not a string');\n              }\n              \n              if (!bpmnXml.includes('bpmn:definitions') && !bpmnXml.includes('<definitions')) {\n                console.warn('⚠️ BPMNPreview: Content does not appear to be valid BPMN XML');\n                console.log('🔍 BPMNPreview: Full content received:', bpmnXml);\n                throw new Error('Content does not appear to be valid BPMN');\n              }\n              \n              console.log('✅ BPMNPreview: BPMN content validation passed');\n            } catch (fileError) {\n              console.warn('❌ BPMNPreview: Could not load BPMN file content:', fileError.message, fileError.status);\n              console.error('🔍 BPMNPreview: File loading error details:', {\n                error: fileError,\n                stack: fileError.stack,\n                fileName: file.name,\n                filePath: file.path,\n                owner,\n                repoName,\n                ref\n              });\n              // Fallback to a generic BPMN diagram if file can't be loaded\n              const processName = file.name.replace('.bpmn', '').replace(/[-_]/g, ' ');\n              console.log('🔄 BPMNPreview: Using fallback BPMN diagram for:', processName);\n              bpmnXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn:definitions xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" \n                  xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" \n                  xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" \n                  xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" \n                  id=\"Definitions_1\" targetNamespace=\"http://bpmn.io/schema/bpmn\">\n  <bpmn:process id=\"Process_${file.name.replace(/[^a-zA-Z0-9]/g, '_')}\" isExecutable=\"false\">\n    <bpmn:startEvent id=\"StartEvent_1\" name=\"Start\">\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:task id=\"Task_1\" name=\"${processName}\">\n      <bpmn:incoming>Flow_1</bpmn:incoming>\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\n    </bpmn:task>\n    <bpmn:endEvent id=\"EndEvent_1\" name=\"End\">\n      <bpmn:incoming>Flow_2</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id=\"Flow_1\" sourceRef=\"StartEvent_1\" targetRef=\"Task_1\" />\n    <bpmn:sequenceFlow id=\"Flow_2\" sourceRef=\"Task_1\" targetRef=\"EndEvent_1\" />\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_${file.name.replace(/[^a-zA-Z0-9]/g, '_')}\">\n      <bpmndi:BPMNShape id=\"StartEvent_1_di\" bpmnElement=\"StartEvent_1\">\n        <dc:Bounds x=\"152\" y=\"82\" width=\"36\" height=\"36\" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x=\"158\" y=\"125\" width=\"24\" height=\"14\" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Task_1_di\" bpmnElement=\"Task_1\">\n        <dc:Bounds x=\"250\" y=\"60\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"EndEvent_1_di\" bpmnElement=\"EndEvent_1\">\n        <dc:Bounds x=\"402\" y=\"82\" width=\"36\" height=\"36\" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x=\"410\" y=\"125\" width=\"20\" height=\"14\" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id=\"Flow_1_di\" bpmnElement=\"Flow_1\">\n        <di:waypoint x=\"188\" y=\"100\" />\n        <di:waypoint x=\"250\" y=\"100\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_2_di\" bpmnElement=\"Flow_2\">\n        <di:waypoint x=\"350\" y=\"100\" />\n        <di:waypoint x=\"402\" y=\"100\" />\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>`;\n            }\n          }\n\n          console.log('🔧 BPMNPreview: Creating BPMN viewer...');\n          console.log('🔍 BPMNPreview: About to create viewer with BPMN content length:', bpmnXml?.length);\n          \n          // Create and initialize viewer with clean separation - lazy load BPMN.js\n          const viewer = await createLazyBpmnViewer();\n          viewerRef.current = viewer;\n          \n          console.log('✅ BPMNPreview: BPMN viewer instance created successfully');\n\n          try {\n            console.log('🔗 BPMNPreview: Attaching viewer to container...');\n            console.log('🔍 BPMNPreview: Container element details:', {\n              exists: !!containerRef.current,\n              className: containerRef.current?.className,\n              width: containerRef.current?.offsetWidth,\n              height: containerRef.current?.offsetHeight,\n              parentExists: !!containerRef.current?.parentElement\n            });\n            \n            // Create timeout promise for viewer operations\n            const createTimeoutPromise = (operation, timeoutMs = 10000) => {\n              return new Promise((_, reject) => {\n                setTimeout(() => {\n                  reject(new Error(`${operation} timeout after ${timeoutMs}ms`));\n                }, timeoutMs);\n              });\n            };\n            \n            // Attach viewer to container first with timeout\n            const attachPromise = viewer.attachTo(containerRef.current);\n            await Promise.race([attachPromise, createTimeoutPromise('Viewer attach', 5000)]);\n            console.log('✅ BPMNPreview: Successfully attached viewer to container');\n            \n            console.log('📊 BPMNPreview: Importing BPMN XML...');\n            console.log('🔍 BPMNPreview: XML content preview (first 200 chars):', bpmnXml?.substring(0, 200));\n            \n            // Import XML with timeout handling\n            const importStartTime = Date.now();\n            const importPromise = viewer.importXML(bpmnXml);\n            const importResult = await Promise.race([importPromise, createTimeoutPromise('XML import', 15000)]);\n            const importTime = Date.now() - importStartTime;\n            \n            console.log(`✅ BPMNPreview: Successfully imported BPMN XML in ${importTime}ms`);\n            console.log('📊 BPMNPreview: Import result details:', {\n              warnings: importResult?.warnings?.length || 0,\n              hasWarnings: !!(importResult?.warnings?.length),\n              warningDetails: importResult?.warnings\n            });\n            \n            if (importResult?.warnings?.length > 0) {\n              console.warn('⚠️ BPMNPreview: Import warnings:', importResult.warnings);\n            }\n            \n            console.log('🎯 BPMNPreview: Fitting to viewport...');\n            // Fit to viewport for preview\n            const canvas = viewer.get('canvas');\n            console.log('🔍 BPMNPreview: Canvas service retrieved:', !!canvas);\n            \n            const zoomStartTime = Date.now();\n            canvas.zoom('fit-viewport');\n            const zoomTime = Date.now() - zoomStartTime;\n            \n            console.log(`✅ BPMNPreview: Successfully fitted to viewport in ${zoomTime}ms`);\n\n            // Force immediate visibility for preview\n            setTimeout(() => {\n              if (containerRef.current) {\n                const svgElement = containerRef.current.querySelector('svg');\n                if (svgElement) {\n                  svgElement.style.opacity = '1';\n                  svgElement.style.visibility = 'visible';\n                  console.log('🎨 BPMNPreview: Forced SVG visibility');\n                }\n              }\n            }, 50);\n\n            // Final validation - check if diagram was actually rendered\n            const viewbox = canvas.viewbox();\n            console.log('🔍 BPMNPreview: Final viewport details:', {\n              viewbox,\n              hasElements: viewbox.inner?.width > 0 && viewbox.inner?.height > 0,\n              containerHasContent: containerRef.current?.children?.length > 0\n            });\n            \n            // Check if container actually has content\n            if (containerRef.current?.children?.length === 0) {\n              console.warn('⚠️ BPMNPreview: Container is empty after rendering - potential issue');\n            }\n\n            console.log(`🎉 BPMNPreview: Successfully rendered preview for: ${file.name}`);\n            setLoading(false);\n          } catch (importError) {\n            console.error('❌ BPMNPreview: Failed to import BPMN XML:', importError);\n            console.error('🔍 BPMNPreview: Import error details:', {\n              message: importError.message,\n              stack: importError.stack,\n              fileName: file.name,\n              xmlLength: bpmnXml?.length,\n              xmlPreview: bpmnXml?.substring(0, 300),\n              containerState: {\n                exists: !!containerRef.current,\n                hasChildren: containerRef.current?.children?.length || 0,\n                clientHeight: containerRef.current?.clientHeight,\n                clientWidth: containerRef.current?.clientWidth\n              }\n            });\n            setError(`Failed to load preview: ${importError.message}`);\n            setLoading(false);\n          }\n\n        } catch (renderError) {\n          console.error('❌ BPMNPreview: Failed to render BPMN preview:', renderError.message || renderError);\n          console.log('🔍 BPMNPreview: Error details:', {\n            fileName: file.name,\n            filePath: file.path,\n            errorMessage: renderError.message,\n            errorStack: renderError.stack\n          });\n          setError('Failed to load preview');\n          setLoading(false);\n        }\n      };\n\n      // Start the container waiting process\n      waitForContainer();\n    };\n\n    // Cleanup function\n    const cleanup = () => {\n      if (viewerRef.current) {\n        try {\n          viewerRef.current.destroy();\n        } catch (cleanupError) {\n          console.warn('Error cleaning up BPMN viewer:', cleanupError);\n        }\n        viewerRef.current = null;\n      }\n    };\n\n    // Only run if we have all required props\n    if (file && repository) {\n      console.log('🚀 BPMNPreview: Starting loadPreview for:', file.name);\n      loadPreview();\n    } else {\n      console.log('⏭️ BPMNPreview: Skipping loadPreview, missing props:', {\n        hasFile: !!file,\n        hasRepository: !!repository,\n        fileName: file?.name\n      });\n      setLoading(false);\n    }\n\n    return cleanup;\n  }, [file, repository, selectedBranch, profile]);\n\n  if (loading) {\n    return (\n      <div className=\"bpmn-preview\">\n        <div className=\"preview-loading\">\n          <div className=\"preview-spinner\"></div>\n          <span>Loading preview...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bpmn-preview\">\n        <div className=\"preview-error\">\n          <span>❌ {error}</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bpmn-preview\">\n      <div className=\"preview-container\" ref={containerRef}>\n        {/* BPMN viewer will be rendered here */}\n      </div>\n    </div>\n  );\n};\n\nexport default BPMNPreview;","import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport useDAKUrlParams from '../hooks/useDAKUrlParams';\nimport { PageLayout } from './framework';\nimport { handleNavigationClick } from '../utils/navigationUtils';\nimport BPMNPreview from './BPMNPreview';\n\nconst BusinessProcessSelection = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  \n  // Use the DAK URL params hook to get profile, repository, and branch\n  const { \n    profile, \n    repository, \n    selectedBranch, \n    loading: dakLoading, \n    error: dakError \n  } = useDAKUrlParams();\n\n  // Debug logging for repository data flow\n  console.log('🚀 BusinessProcessSelection: Hook data received:', {\n    hasProfile: !!profile,\n    hasRepository: !!repository,\n    profileLogin: profile?.login,\n    repositoryName: repository?.name,\n    repositoryFullName: repository?.full_name,\n    repositoryOwner: repository?.owner?.login,\n    selectedBranch,\n    dakLoading,\n    dakError\n  });\n  \n  // Get component from location.state if available (when navigating from dashboard)\n  const { component } = location.state || {};\n  \n  const [bpmnFiles, setBpmnFiles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n\n  // Check write permissions\n  useEffect(() => {\n    const checkPermissions = async () => {\n      if (repository && profile) {\n        try {\n          // Simple permission check - in real app, this would use githubService\n          const writeAccess = profile.token && repository.permissions?.push;\n          setHasWriteAccess(writeAccess || false);\n        } catch (error) {\n          console.warn('Could not check write permissions:', error);\n          setHasWriteAccess(false);\n        }\n      }\n    };\n\n    checkPermissions();\n  }, [repository, profile]);\n\n  // Load BPMN files from repository\n  useEffect(() => {\n    const loadBpmnFiles = async () => {\n      if (!repository) {\n        navigate('/');\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Debug logging to understand repository data flow\n        console.log('📂 BusinessProcessSelection - Repository object analysis:', {\n          name: repository.name,\n          full_name: repository.full_name,\n          owner: repository.owner,\n          ownerLogin: repository.owner?.login,\n          isDemo: repository.isDemo,\n          html_url: repository.html_url,\n          default_branch: repository.default_branch\n        });\n        console.log('👤 BusinessProcessSelection - Profile object analysis:', {\n          login: profile?.login,\n          name: profile?.name,\n          isDemo: profile?.isDemo,\n          type: profile?.type\n        });\n\n        const owner = repository.owner?.login || repository.full_name.split('/')[0];\n        const repoName = repository.name;\n        const ref = selectedBranch || 'main';\n\n        console.log(`📋 BusinessProcessSelection: Derived repository info:`, {\n          original_owner_login: repository.owner?.login,\n          original_full_name: repository.full_name,\n          derived_owner: owner,\n          derived_repoName: repoName,\n          selected_ref: ref,\n          derivation_method: repository.owner?.login ? 'owner.login' : 'full_name.split'\n        });\n\n        console.log(`🔍 BusinessProcessSelection: About to fetch BPMN files from ${owner}/${repoName} (branch: ${ref})`);\n        console.log('BusinessProcessSelection: Final repository access details:', {\n          derivedOwner: owner,\n          repositoryName: repoName,\n          ref: ref,\n          fullRepositoryData: {\n            name: repository.name,\n            full_name: repository.full_name,\n            owner: repository.owner,\n            default_branch: repository.default_branch\n          }\n        });\n        \n        const bpmnFiles = await githubService.getBpmnFiles(owner, repoName, ref);\n        \n        console.log('📊 BusinessProcessSelection: Received BPMN files:', {\n          count: bpmnFiles.length,\n          files: bpmnFiles.map(f => ({\n            name: f.name,\n            path: f.path,\n            size: f.size,\n            hasDownloadUrl: !!f.download_url,\n            sha: f.sha?.substring(0, 8)\n          }))\n        });\n        \n        // If no files found and we're in demo mode, provide fallback files\n        if (bpmnFiles.length === 0 && profile?.isDemo) {\n          console.log('No BPMN files found in demo mode, providing fallback demo files');\n          const demoFiles = [\n            {\n              name: 'patient-registration.bpmn',\n              path: 'demo/business-processes/patient-registration.bpmn',\n              sha: 'demo-sha-1',\n              size: 2048,\n              download_url: '#',\n              html_url: '#'\n            },\n            {\n              name: 'vaccination-workflow.bpmn',\n              path: 'demo/business-processes/vaccination-workflow.bpmn',\n              sha: 'demo-sha-2',\n              size: 3072,\n              download_url: '#'\n            },\n            {\n              name: 'appointment-scheduling.bpmn',\n              path: 'demo/business-processes/appointment-scheduling.bpmn',\n              sha: 'demo-sha-3',\n              size: 1536,\n              download_url: '#'\n            }\n          ];\n          setBpmnFiles(demoFiles);\n        } else {\n          setBpmnFiles(bpmnFiles);\n        }\n        \n        setLoading(false);\n      } catch (apiError) {\n        console.error('Failed to fetch BPMN files from repository:', apiError);\n        \n        // For demo mode or when network access fails, provide fallback BPMN files\n        if (profile?.isDemo || apiError.message?.includes('Failed to fetch')) {\n          console.log('Providing fallback demo BPMN files');\n          const demoFiles = [\n            {\n              name: 'patient-registration.bpmn',\n              path: 'demo/business-processes/patient-registration.bpmn',\n              sha: 'demo-sha-1',\n              size: 2048,\n              download_url: '#',\n              html_url: '#'\n            },\n            {\n              name: 'vaccination-workflow.bpmn',\n              path: 'demo/business-processes/vaccination-workflow.bpmn',\n              sha: 'demo-sha-2',\n              size: 3072,\n              download_url: '#'\n            },\n            {\n              name: 'appointment-scheduling.bpmn',\n              path: 'demo/business-processes/appointment-scheduling.bpmn',\n              sha: 'demo-sha-3',\n              size: 1536,\n              download_url: '#'\n            }\n          ];\n          setBpmnFiles(demoFiles);\n          setLoading(false);\n          return;\n        }\n        \n        // Check if this is an authentication error for a private repository\n        if (apiError.status === 401 || apiError.status === 403) {\n          setError('Authentication required to access this repository. Please ensure you have a valid GitHub token with appropriate permissions.');\n        } else if (apiError.status === 404) {\n          setError('Repository or branch not found. Please check the repository name and branch.');\n        } else {\n          setError(`Failed to load BPMN files from repository: ${apiError.message}`);\n        }\n        \n        setBpmnFiles([]);\n        setLoading(false);\n      }\n    };\n\n    loadBpmnFiles();\n  }, [profile, repository, navigate, selectedBranch]);\n\n  const handleEdit = (event, file) => {\n    if (!hasWriteAccess) {\n      // Show permission help message\n      alert('You need write permissions to edit BPMN files. Please check your GitHub token permissions.');\n      return;\n    }\n\n    const owner = repository.owner?.login || repository.full_name.split('/')[0];\n    const repoName = repository.name;\n    const branch = selectedBranch || 'main';\n    const path = `/bpmn-editor/${owner}/${repoName}/${branch}/${file.path}`;\n\n    const navigationState = {\n      profile,\n      repository,\n      component,\n      selectedFile: file,\n      selectedBranch,\n      mode: 'edit'\n    };\n    \n    handleNavigationClick(event, path, navigate, navigationState);\n  };\n\n  const handleView = (event, file) => {\n    const owner = repository.owner?.login || repository.full_name.split('/')[0];\n    const repoName = repository.name;\n    const branch = selectedBranch || 'main';\n    const path = `/bpmn-viewer/${owner}/${repoName}/${branch}/${file.path}`;\n\n    const navigationState = {\n      profile,\n      repository,\n      component,\n      selectedFile: file,\n      selectedBranch,\n      mode: 'view'\n    };\n    \n    handleNavigationClick(event, path, navigate, navigationState);\n  };\n\n  const handleViewSource = (event, file) => {\n    const owner = repository.owner?.login || repository.full_name.split('/')[0];\n    const repoName = repository.name;\n    const branch = selectedBranch || 'main';\n    const path = `/bpmn-source/${owner}/${repoName}/${branch}/${file.path}`;\n\n    const navigationState = {\n      profile,\n      repository,\n      component,\n      selectedFile: file,\n      selectedBranch\n    };\n    \n    handleNavigationClick(event, path, navigate, navigationState);\n  };\n\n  if (dakLoading) {\n    return (\n      <div className=\"business-process-selection loading-state\">\n        <div className=\"loading-content\">\n          <h2>Loading DAK Data...</h2>\n          <p>Fetching repository and user data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (dakError) {\n    return (\n      <div className=\"business-process-selection error-state\">\n        <div className=\"error-content\">\n          <h2>Error Loading DAK Data</h2>\n          <p>{dakError}</p>\n          <div className=\"error-actions\">\n            <button onClick={() => navigate('/')} className=\"action-btn primary\">\n              Return to Home\n            </button>\n            <button onClick={() => window.location.reload()} className=\"action-btn secondary\">\n              Retry\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!profile || !repository) {\n    navigate('/');\n    return <div>Redirecting...</div>;\n  }\n\n  return (\n    <PageLayout pageName=\"business-process-selection\">\n      <div className=\"business-process-selection\">\n      <div className=\"selection-content\">\n\n        <div className=\"selection-main\">\n          <div className=\"selection-intro\">\n            <h2>Business Process Files</h2>\n            <p>\n              Select a BPMN business process file to view, edit, or examine the source code.\n              Files are loaded from <code>input/business-processes/</code> or <code>input/business-process/</code> directories and subdirectories.\n            </p>\n          </div>\n\n          {loading ? (\n            <div className=\"loading\">\n              <div className=\"spinner\"></div>\n              <p>Loading business process files...</p>\n            </div>\n          ) : error ? (\n            <div className=\"error\">\n              <p>❌ {error}</p>\n            </div>\n          ) : bpmnFiles.length === 0 ? (\n            <div className=\"empty-state\">\n              <div className=\"empty-icon\">📋</div>\n              <h3>No BPMN Files Found</h3>\n              <p>No .bpmn files were found in the input/business-processes/ or input/business-process/ directories.</p>\n            </div>\n          ) : (\n            <div className=\"files-grid\">\n              {bpmnFiles.map((file) => (\n                <div key={file.sha} className=\"file-card\">\n                  <BPMNPreview \n                    file={file} \n                    repository={repository} \n                    selectedBranch={selectedBranch}\n                    profile={profile}\n                  />\n                  \n                  <div className=\"file-header\">\n                    <div className=\"file-icon\">🔄</div>\n                    <div className=\"file-details\">\n                      <h3 className=\"file-name\">{file.name}</h3>\n                      <div className=\"file-info-compact\">\n                        <span className=\"file-path\">{file.path}</span>\n                        <span className=\"file-size\">{(file.size / 1024).toFixed(1)} KB</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"file-actions\">\n                    <button \n                      className=\"action-btn view-btn\"\n                      onClick={(event) => handleView(event, file)}\n                      title=\"View BPMN diagram (read-only)\"\n                    >\n                      👁️ View\n                    </button>\n\n                    <button \n                      className={`action-btn edit-btn ${!hasWriteAccess ? 'disabled' : ''}`}\n                      onClick={(event) => handleEdit(event, file)}\n                      title={hasWriteAccess ? \"Edit BPMN diagram\" : \"Edit access required\"}\n                      disabled={!hasWriteAccess}\n                    >\n                      ✏️ Edit\n                    </button>\n\n                    <button \n                      className=\"action-btn source-btn\"\n                      onClick={(event) => handleViewSource(event, file)}\n                      title=\"View XML source code\"\n                    >\n                      📄 Source\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default BusinessProcessSelection;"],"names":["useDAKUrlParams","_location$state","_location$state2","_location$state3","location","useLocation","navigate","useNavigate","user","repo","branch","useParams","profile","setProfile","useState","state","repository","setRepository","selectedBranch","setSelectedBranch","loading","setLoading","error","setError","useEffect","async","_repository$owner","_location$state$profi","_location$state$repos","_location$state$repos2","_location$state$repos3","console","log","urlParams","currentState","hasProfile","hasRepository","profileLogin","login","repositoryFullName","full_name","repositoryOwner","owner","hasLocationState","locationStateSummary","isAuthenticated","githubService","isAuth","needsFetch","hasUserParam","hasRepoParam","reason","publicProfile","name","charAt","toUpperCase","slice","avatar_url","concat","type","publicRepository","default_branch","html_url","userProfile","getUser","err","warningMessage","repoData","getRepository","dakValidationService","validateDAKRepository","getBranch","warn","fetchDataFromUrlParams","_ref","file","containerRef","useRef","viewerRef","hasFile","fileName","waitForContainer","attempt","arguments","length","undefined","current","startPreviewLoad","setTimeout","_file$path","_file$sha","_bpmnXml3","innerHTML","split","repoName","ref","isDemo","path","includes","sha","startsWith","bpmnXml","filePath","hasDownloadUrl","download_url","processName","replace","_bpmnXml","_bpmnXml2","getFileContent","substring","Error","fileError","message","status","stack","viewer","createLazyBpmnViewer","_containerRef$current","_containerRef$current2","_containerRef$current3","_containerRef$current4","_bpmnXml4","_importResult$warning","_importResult$warning2","_importResult$warning3","_viewbox$inner","_viewbox$inner2","_containerRef$current5","_containerRef$current6","_containerRef$current7","_containerRef$current8","exists","className","width","offsetWidth","height","offsetHeight","parentExists","parentElement","createTimeoutPromise","operation","timeoutMs","Promise","_","reject","attachPromise","attachTo","race","importStartTime","Date","now","importPromise","importXML","importResult","importTime","warnings","hasWarnings","warningDetails","canvas","get","zoomStartTime","zoom","zoomTime","svgElement","querySelector","style","opacity","visibility","viewbox","hasElements","inner","containerHasContent","children","importError","_bpmnXml5","_bpmnXml6","_containerRef$current9","_containerRef$current0","_containerRef$current1","_containerRef$current10","xmlLength","xmlPreview","containerState","hasChildren","clientHeight","clientWidth","renderError","errorMessage","errorStack","loadPreview","cleanup","destroy","cleanupError","_jsx","_jsxs","BusinessProcessSelection","dakLoading","dakError","repositoryName","component","bpmnFiles","setBpmnFiles","hasWriteAccess","setHasWriteAccess","_repository$permissio","writeAccess","token","permissions","push","checkPermissions","_repository$owner2","_repository$owner3","_repository$owner4","_repository$owner5","ownerLogin","original_owner_login","original_full_name","derived_owner","derived_repoName","selected_ref","derivation_method","derivedOwner","fullRepositoryData","getBpmnFiles","count","files","map","f","_f$sha","size","apiError","_apiError$message","loadBpmnFiles","onClick","window","reload","PageLayout","pageName","BPMNPreview","toFixed","event","handleView","_repository$owner7","navigationState","selectedFile","mode","handleNavigationClick","title","handleEdit","_repository$owner6","alert","disabled","handleViewSource","_repository$owner8"],"sourceRoot":""}