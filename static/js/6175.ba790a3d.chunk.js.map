{"version":3,"file":"static/js/6175.ba790a3d.chunk.js","mappings":"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","sources":["components/SelectProfilePage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport githubService from '../services/githubService';\nimport repositoryCacheService from '../services/repositoryCacheService';\nimport { PageLayout } from './framework';\nimport { handleNavigationClick } from '../utils/navigationUtils';\n\nconst SelectProfilePage = () => {\n  const { t } = useTranslation();\n  const [user, setUser] = useState(null);\n  const [organizations, setOrganizations] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [dakCounts, setDakCounts] = useState({});\n  const [warningMessage, setWarningMessage] = useState(null);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Load cached DAK counts without initiating any scanning\n  const loadCachedDakCounts = useCallback((userData, orgsData) => {\n    if (!githubService.isAuth()) {\n      return;\n    }\n\n    const counts = {};\n    \n    // Check cache for user's personal repositories\n    if (userData) {\n      const userCache = repositoryCacheService.getCachedRepositories(userData.login, 'user');\n      if (userCache && userCache.repositories) {\n        counts[`user-${userData.login}`] = userCache.repositories.length;\n      }\n    }\n    \n    // Check cache for organization repositories\n    orgsData.forEach(org => {\n      const orgCache = repositoryCacheService.getCachedRepositories(org.login, 'org');\n      if (orgCache && orgCache.repositories) {\n        counts[`org-${org.login}`] = orgCache.repositories.length;\n      }\n    });\n    \n    setDakCounts(counts);\n  }, []);\n\n  const fetchUserData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      let userData = null;\n      \n      if (isAuthenticated) {\n        // Check token permissions first for authenticated users\n        await githubService.checkTokenPermissions();\n        \n        // Fetch user data using GitHub service\n        userData = await githubService.getCurrentUser();\n        setUser(userData);\n      } else {\n        // For unauthenticated users, don't create a user profile\n        userData = null;\n        setUser(null);\n      }\n      \n      // Fetch organizations inline\n      let orgsData = [];\n      \n      if (isAuthenticated) {\n        try {\n          orgsData = await githubService.getUserOrganizations();\n        } catch (error) {\n          console.error('Error fetching organizations:', error);\n          orgsData = [];\n        }\n      }\n      \n      // Always ensure WHO organization is included (using public API)\n      try {\n        const whoOrganization = await githubService.getWHOOrganization();\n        \n        // Check if WHO organization is already in the list\n        const whoIndex = orgsData.findIndex(org => org.login === 'WorldHealthOrganization');\n        \n        if (whoIndex >= 0) {\n          // Replace existing WHO org with fresh data and ensure isWHO flag\n          orgsData[whoIndex] = { ...orgsData[whoIndex], ...whoOrganization, isWHO: true };\n        } else {\n          // Add WHO organization at the beginning of the list\n          orgsData.unshift(whoOrganization);\n        }\n      } catch (whoError) {\n        console.warn('Could not fetch WHO organization data, using fallback:', whoError);\n        \n        // Fallback to hardcoded WHO organization\n        const whoOrganization = {\n          id: 'who-organization',\n          login: 'WorldHealthOrganization',\n          name: 'World Health Organization',\n          description: 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n          avatar_url: 'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',\n          html_url: 'https://github.com/WorldHealthOrganization',\n          type: 'Organization',\n          isWHO: true\n        };\n        \n        // Check if WHO organization is already in the list\n        const hasWHO = orgsData.some(org => org.login === 'WorldHealthOrganization');\n        \n        if (!hasWHO) {\n          // Add WHO organization at the beginning of the list\n          orgsData.unshift(whoOrganization);\n        } else {\n          // Ensure existing WHO organization has the isWHO flag\n          orgsData = orgsData.map(org => \n            org.login === 'WorldHealthOrganization' \n              ? { ...org, isWHO: true }\n              : org\n          );\n        }\n      }\n      \n      setOrganizations(orgsData);\n      \n      // Load cached DAK counts (if available and authenticated)\n      if (isAuthenticated) {\n        loadCachedDakCounts(userData, orgsData);\n      }\n      \n    } catch (error) {\n      console.error('Error fetching user data:', error);\n      \n      if (isAuthenticated) {\n        setError('Failed to fetch user data. Please check your connection and try again.');\n        setIsAuthenticated(false);\n        githubService.logout(); // Use secure logout method\n      } else {\n        // For unauthenticated users, show limited error message\n        setError('Unable to fetch additional data. Some features may be limited.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [loadCachedDakCounts, isAuthenticated]);\n\n  // Initial authentication check - don't redirect if not authenticated\n  useEffect(() => {\n    const initializeAuth = () => {\n      // Try to initialize from securely stored token\n      const success = githubService.initializeFromStoredToken();\n      if (success) {\n        setIsAuthenticated(true);\n      } else {\n        // Don't redirect - allow unauthenticated access\n        setIsAuthenticated(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // Handle warning message from navigation state\n  useEffect(() => {\n    if (location.state?.warningMessage) {\n      setWarningMessage(location.state.warningMessage);\n      // Clear the warning message from navigation state to prevent it from persisting\n      navigate(location.pathname, { replace: true, state: {} });\n    }\n  }, [location.state, navigate, location.pathname]);\n\n  // Fetch user data when component mounts or authentication state changes\n  useEffect(() => {\n    // Always fetch data regardless of authentication state\n    if (!user) {\n      fetchUserData();\n    }\n  }, [user, fetchUserData]);\n\n  const handleProfileSelect = (event, profile) => {\n    const navigationState = { profile };\n    handleNavigationClick(event, `/dak-action/${profile.login}`, navigate, navigationState);\n  };\n\n  const handleDismissWarning = () => {\n    setWarningMessage(null);\n  };\n\n  return (\n    <PageLayout pageName=\"select-profile\">\n      {loading && !user ? (\n        <div className=\"loading-section\">\n          <div className=\"spinner\"></div>\n          <p>Loading profile data...</p>\n        </div>\n      ) : (\n        <div className=\"select-profile-content\">\n        {warningMessage && (\n          <div className=\"warning-message\">\n            <div className=\"warning-content\">\n              <div className=\"warning-header\">\n                <span className=\"warning-icon\">⚠️</span>\n                <span className=\"warning-text\">{warningMessage}</span>\n              </div>\n              <button \n                className=\"warning-dismiss\" \n                onClick={handleDismissWarning}\n                aria-label=\"Dismiss warning\"\n              >\n                × Dismiss\n              </button>\n            </div>\n          </div>\n        )}\n        \n        {/* Authentication Status Indicator */}\n        {!isAuthenticated && (\n          <div className=\"auth-status-message\">\n            <div className=\"auth-status-content\">\n              <span className=\"auth-status-icon\">🔓</span>\n              <span className=\"auth-status-text\">\n                You are browsing in unauthenticated mode. Some features like saving to GitHub will be disabled, but you can still explore and use local staging.\n              </span>\n            </div>\n          </div>\n        )}\n        \n        {loading ? (\n          <div className=\"loading-section\">\n            <div className=\"spinner\"></div>\n            <p>Loading profile data...</p>\n          </div>\n        ) : (\n          <div className=\"profile-selection\">\n            <h2>{t('organization.select')}</h2>\n            <p>{t('organization.personal')}:</p>\n            \n            {error && <div className=\"error-message\">{error}</div>}\n            \n            {/* Horizontal profile grid */}\n            <div className=\"profile-grid-horizontal\">\n              {/* Personal Profile - Show only for authenticated users */}\n              {isAuthenticated && user && (\n                <div \n                  className=\"profile-card\"\n                  onClick={(event) => handleProfileSelect(event, { type: 'user', ...user })}\n                >\n                  <div className=\"profile-card-header\">\n                    <img src={user?.avatar_url} alt=\"Personal profile\" />\n                    {dakCounts[`user-${user?.login}`] > 0 && (\n                      <div className=\"dak-count-badge\">\n                        {dakCounts[`user-${user?.login}`]}\n                      </div>\n                    )}\n                  </div>\n                  <h3>{user?.name || user?.login}</h3>\n                  <p>Personal repositories</p>\n                  <div className=\"profile-badges\">\n                    <span className=\"profile-type\">Personal</span>\n                  </div>\n                </div>\n              )}\n              \n              {/* Organization Profiles */}\n              {organizations.map((org) => (\n                <div \n                  key={org.login}\n                  className={`profile-card ${org.isWHO ? 'who-org' : ''}`}\n                  onClick={(event) => handleProfileSelect(event, { type: 'org', ...org })}\n                >\n                  <div className=\"profile-card-header\">\n                    <img \n                      src={org.avatar_url || `https://github.com/${org.login}.png`} \n                      alt={`${org.name || org.login} organization`} \n                    />\n                    {dakCounts[`org-${org.login}`] > 0 && (\n                      <div className=\"dak-count-badge\">\n                        {dakCounts[`org-${org.login}`]}\n                      </div>\n                    )}\n                  </div>\n                  <h3>{org.name || org.login}</h3>\n                  <p>@{org.login}</p>\n                  <div className=\"profile-badges\">\n                    <span className=\"profile-type\">{t('organization.organizations')}</span>\n                    {org.isWHO && <span className=\"who-badge\">WHO Official</span>}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        </div>\n      )}\n    </PageLayout>\n  );\n};\n\nexport default SelectProfilePage;"],"names":["SelectProfilePage","t","useTranslation","user","setUser","useState","organizations","setOrganizations","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","dakCounts","setDakCounts","warningMessage","setWarningMessage","navigate","useNavigate","location","useLocation","loadCachedDakCounts","useCallback","userData","orgsData","githubService","isAuth","counts","userCache","repositoryCacheService","getCachedRepositories","login","repositories","concat","length","forEach","org","orgCache","fetchUserData","async","checkTokenPermissions","getCurrentUser","getUserOrganizations","console","whoOrganization","getWHOOrganization","whoIndex","findIndex","_objectSpread","isWHO","unshift","whoError","warn","id","name","description","avatar_url","html_url","type","some","map","logout","useEffect","initializeAuth","success","initializeFromStoredToken","_location$state","state","pathname","replace","handleProfileSelect","event","profile","navigationState","handleNavigationClick","_jsx","PageLayout","pageName","children","_jsxs","className","onClick","handleDismissWarning","src","alt"],"sourceRoot":""}