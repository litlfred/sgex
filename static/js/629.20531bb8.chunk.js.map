{"version":3,"file":"static/js/629.20531bb8.chunk.js","mappings":"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","sources":["dak/faq/components/FAQAnswer.js","components/DAKFAQDemo.js"],"sourcesContent":["/**\n * FAQ Answer React Component\n * Renders FAQ question results with internationalization support\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport faqExecutionEngine from '../engine/FAQExecutionEngine.js';\nimport DOMPurify from 'dompurify';\nimport './FAQAnswer.css';\n\nconst FAQAnswer = ({ \n  questionId, \n  parameters = {}, \n  githubService = null,\n  assetFiles = [],\n  showRawData = false,\n  className = ''\n}) => {\n  const { t, i18n } = useTranslation();\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const executeQuestion = useCallback(async () => {\n    if (!questionId || !githubService) {\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Prepare request\n      const request = {\n        questionId,\n        parameters: {\n          ...parameters,\n          locale: i18n.language.replace('-', '_') || 'en_US'\n        },\n        assetFiles\n      };\n\n      // Execute question\n      const context = { githubService };\n      const questionResult = await faqExecutionEngine.executeQuestion(request, context);\n      \n      setResult(questionResult);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [questionId, parameters, githubService, assetFiles, i18n.language]);\n\n  useEffect(() => {\n    executeQuestion();\n  }, [executeQuestion]);\n\n  const sanitizeHTML = (html) => {\n    return DOMPurify.sanitize(html, {\n      ALLOWED_TAGS: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'div', 'span', 'ul', 'ol', 'li', 'strong', 'em', 'code', 'pre', 'time', 'small'],\n      ALLOWED_ATTR: ['class', 'datetime']\n    });\n  };\n\n  const renderNarrative = () => {\n    if (!result?.narrative) return null;\n\n    return (\n      <div \n        className=\"faq-narrative\"\n        dangerouslySetInnerHTML={{ __html: sanitizeHTML(result.narrative) }}\n      />\n    );\n  };\n\n  const renderStructuredData = () => {\n    if (!showRawData || !result?.structured) return null;\n\n    return (\n      <details className=\"faq-structured-data\">\n        <summary>{t('dak.faq.structured_data')}</summary>\n        <pre>{JSON.stringify(result.structured, null, 2)}</pre>\n      </details>\n    );\n  };\n\n  const renderMessages = () => {\n    const warnings = result?.warnings || [];\n    const errors = result?.errors || [];\n    \n    if (warnings.length === 0 && errors.length === 0) return null;\n\n    return (\n      <div className=\"faq-messages\">\n        {errors.map((error, index) => (\n          <div key={`error-${index}`} className=\"faq-message faq-error\">\n            <span className=\"faq-message-icon\">⚠️</span>\n            {error}\n          </div>\n        ))}\n        {warnings.map((warning, index) => (\n          <div key={`warning-${index}`} className=\"faq-message faq-warning\">\n            <span className=\"faq-message-icon\">⚠️</span>\n            {warning}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderMetadata = () => {\n    if (!showRawData || !result?.meta) return null;\n\n    return (\n      <details className=\"faq-metadata\">\n        <summary>{t('dak.faq.metadata')}</summary>\n        <pre>{JSON.stringify(result.meta, null, 2)}</pre>\n      </details>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className={`faq-answer loading ${className}`}>\n        <div className=\"faq-loading-spinner\"></div>\n        <p>{t('dak.faq.loading')}</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`faq-answer error ${className}`}>\n        <h4>{t('dak.faq.error_title')}</h4>\n        <p className=\"faq-error-message\">{error}</p>\n        <button onClick={executeQuestion} className=\"faq-retry-button\">\n          {t('dak.faq.retry')}\n        </button>\n      </div>\n    );\n  }\n\n  if (!result) {\n    return (\n      <div className={`faq-answer empty ${className}`}>\n        <p>{t('dak.faq.no_data')}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`faq-answer success ${className}`}>\n      {renderNarrative()}\n      {renderMessages()}\n      {renderStructuredData()}\n      {renderMetadata()}\n    </div>\n  );\n};\n\nexport default FAQAnswer;","/**\n * DAK FAQ Demo Page\n * Demonstrates the FAQ functionality with sample questions\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\nimport FAQAnswer from '../dak/faq/components/FAQAnswer.js';\nimport faqExecutionEngine from '../dak/faq/engine/FAQExecutionEngine.js';\nimport githubService from '../services/githubService.js';\nimport { PageLayout, usePage } from './framework';\nimport './DAKFAQDemo.css';\n\nconst DAKFAQDemo = () => {\n  return (\n    <PageLayout pageName=\"dak-faq-demo\">\n      <DAKFAQDemoContent />\n    </PageLayout>\n  );\n};\n\nconst DAKFAQDemoContent = () => {\n  const { t } = useTranslation();\n  const { user, repository, branch } = usePage();\n  const location = useLocation();\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Get user and repo from page framework\n  const repo = repository?.name;\n\n  // Sample questions to demonstrate\n  const sampleQuestions = [\n    {\n      id: 'dak-name',\n      title: 'What is the name of this DAK?',\n      description: 'Extracts the DAK name from sushi-config.yaml'\n    },\n    {\n      id: 'dak-version',\n      title: 'What is the version of this DAK?',\n      description: 'Extracts the DAK version from sushi-config.yaml'\n    },\n    {\n      id: 'decision-table-inputs',\n      title: 'What are the inputs required for this decision table?',\n      description: 'Analyzes DMN files and extracts input requirements for decision tables'\n    }\n  ];\n\n  useEffect(() => {\n    initializeFAQEngine();\n  }, []);\n\n  const initializeFAQEngine = async () => {\n    try {\n      setLoading(true);\n      await faqExecutionEngine.initialize();\n      const catalog = faqExecutionEngine.getCatalog();\n      setQuestions(catalog);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getRepositoryContext = () => {\n    if (user && repo) {\n      return {\n        repository: `${user}/${repo}`,\n        branch: branch || 'main'\n      };\n    }\n    \n    // Fallback to location state\n    const state = location.state;\n    if (state?.user && state?.repo) {\n      return {\n        repository: `${state.user}/${state.repo}`,\n        branch: state.branch || 'main'\n      };\n    }\n    \n    return null;\n  };\n\n  const repositoryContext = getRepositoryContext();\n\n  if (loading) {\n    return (\n      <div className=\"dak-faq-demo loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>{t('dak.faq.loading')}</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dak-faq-demo error\">\n        <h2>FAQ System Error</h2>\n        <p>{error}</p>\n        <button onClick={initializeFAQEngine}>Retry</button>\n      </div>\n    );\n  }\n\n  if (!repositoryContext) {\n    return (\n      <div className=\"dak-faq-demo no-context\">\n        <h2>DAK FAQ Demo</h2>\n        <p>No repository context available. Please navigate from a DAK repository page.</p>\n        <div className=\"demo-info\">\n          <h3>Available Questions</h3>\n          <ul>\n            {questions.map(question => (\n              <li key={question.id}>\n                <strong>{question.title}</strong> - {question.description}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dak-faq-demo\">\n      <header className=\"dak-faq-demo-header\">\n        <h1>DAK FAQ Demo</h1>\n        <div className=\"repository-info\">\n          <span className=\"repo-name\">{repositoryContext.repository}</span>\n          <span className=\"branch-name\">({repositoryContext.branch})</span>\n        </div>\n      </header>\n\n      <div className=\"faq-questions\">\n        <h2>Available Questions</h2>\n        <p>Here are some example FAQ questions that can be answered about this DAK:</p>\n        \n        {sampleQuestions.map(question => (\n          <div key={question.id} className=\"faq-question-section\">\n            <h3>{question.title}</h3>\n            <p className=\"question-description\">{question.description}</p>\n            \n            {question.id === 'decision-table-inputs' ? (\n              // Special handling for asset-level DMN question\n              <div className=\"dmn-demo\">\n                <p><em>This is an asset-level question that analyzes individual DMN files. \n                In a real DAK repository, this would scan DMN files in directories like input/cql/ or input/dmn/.</em></p>\n                <FAQAnswer\n                  questionId={question.id}\n                  parameters={{\n                    ...repositoryContext,\n                    assetFile: 'input/cql/IMMZ.D2.DT.BCG.dmn' // Example DMN file path\n                  }}\n                  githubService={githubService}\n                  showRawData={true}\n                />\n              </div>\n            ) : (\n              // Regular DAK/component-level questions\n              <FAQAnswer\n                questionId={question.id}\n                parameters={repositoryContext}\n                githubService={githubService}\n                showRawData={true}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"faq-catalog\">\n        <h2>FAQ Question Catalog</h2>\n        <p>All available questions in the system:</p>\n        \n        <div className=\"catalog-grid\">\n          {questions.map(question => (\n            <div key={question.id} className=\"catalog-item\">\n              <h4>{question.title}</h4>\n              <p>{question.description}</p>\n              <div className=\"catalog-meta\">\n                <span className=\"level\">{question.level}</span>\n                <span className=\"version\">v{question.version}</span>\n              </div>\n              <div className=\"tags\">\n                {question.tags.map(tag => (\n                  <span key={tag} className=\"tag\">{tag}</span>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"mcp-info\">\n        <h2>MCP Server Integration</h2>\n        <p>\n          The FAQ system can also be accessed via the local MCP server API for programmatic access.\n          Start the MCP server and access:\n        </p>\n        <ul>\n          <li><code>GET http://127.0.0.1:3001/faq/questions/catalog</code> - Get question catalog</li>\n          <li><code>POST http://127.0.0.1:3001/faq/questions/execute</code> - Execute questions</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default DAKFAQDemo;"],"names":["_ref","questionId","parameters","githubService","assetFiles","showRawData","className","t","i18n","useTranslation","result","setResult","useState","loading","setLoading","error","setError","executeQuestion","useCallback","async","request","_objectSpread","locale","language","replace","context","questionResult","faqExecutionEngine","err","message","useEffect","_jsxs","concat","children","_jsx","onClick","renderNarrative","narrative","dangerouslySetInnerHTML","__html","html","DOMPurify","sanitize","ALLOWED_TAGS","ALLOWED_ATTR","renderMessages","warnings","errors","length","map","index","warning","structured","JSON","stringify","meta","DAKFAQDemoContent","user","repository","branch","usePage","location","useLocation","questions","setQuestions","repo","name","initializeFAQEngine","initialize","catalog","getCatalog","repositoryContext","getRepositoryContext","state","id","title","description","question","FAQAnswer","assetFile","level","version","tags","tag","DAKFAQDemo","PageLayout","pageName"],"sourceRoot":""}