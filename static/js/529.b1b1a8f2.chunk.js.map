{"version":3,"file":"static/js/529.b1b1a8f2.chunk.js","mappings":"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","sources":["services/actorDefinitionService.js","components/ActorEditor.js"],"sourcesContent":["/**\n * Actor Definition Service\n * \n * Manages actor definitions based on FHIR Persona logical model.\n * Handles conversion to FSH (FHIR Shorthand) format and integration with staging ground.\n * \n * REFACTORED: Now uses @sgex/dak-core for business logic to reduce duplication\n */\n\nimport stagingGroundService from './stagingGroundService';\nimport { ActorDefinitionCore, escapeFSHString, extractFSHMetadata } from '@sgex/dak-core/dist/browser';\n\nclass ActorDefinitionService {\n  constructor() {\n    this.actorSchema = null;\n    this.core = new ActorDefinitionCore();\n    this.loadSchema();\n  }\n\n  /**\n   * Load the actor definition JSON schema\n   */\n  async loadSchema() {\n    try {\n      const response = await fetch(`${process.env.PUBLIC_URL || ''}/schemas/actor-definition.json`);\n      this.actorSchema = await response.json();\n    } catch (error) {\n      console.warn('Could not load actor definition schema:', error);\n    }\n  }\n\n  /**\n   * Convert actor definition to FSH format\n   * Delegates to @sgex/dak-core ActorDefinitionCore\n   */\n  generateFSH(actorDefinition) {\n    if (!actorDefinition || !actorDefinition.id) {\n      throw new Error('Invalid actor definition: missing required fields');\n    }\n\n    const fsh = [];\n    \n    // Profile header\n    fsh.push(`Profile: ${actorDefinition.id}`);\n    fsh.push(`Parent: ActorDefinition`);\n    fsh.push(`Id: ${actorDefinition.id}`);\n    fsh.push(`Title: \"${this.escapeFSHString(actorDefinition.name)}\"`);\n    fsh.push(`Description: \"${this.escapeFSHString(actorDefinition.description)}\"`);\n    \n    if (actorDefinition.metadata?.status) {\n      fsh.push(`* status = #${actorDefinition.metadata.status}`);\n    }\n    \n    // Actor type\n    if (actorDefinition.type) {\n      fsh.push(`* type = #${actorDefinition.type}`);\n    }\n    \n    // Roles\n    if (actorDefinition.roles && actorDefinition.roles.length > 0) {\n      actorDefinition.roles.forEach((role, index) => {\n        if (role.system) {\n          fsh.push(`* role[${index}].coding.system = \"${role.system}\"`);\n        }\n        fsh.push(`* role[${index}].coding.code = #${role.code}`);\n        fsh.push(`* role[${index}].coding.display = \"${this.escapeFSHString(role.display)}\"`);\n      });\n    }\n    \n    // Qualifications\n    if (actorDefinition.qualifications && actorDefinition.qualifications.length > 0) {\n      actorDefinition.qualifications.forEach((qual, index) => {\n        fsh.push(`* qualification[${index}].code.coding.code = #${qual.code}`);\n        fsh.push(`* qualification[${index}].code.coding.display = \"${this.escapeFSHString(qual.display)}\"`);\n        if (qual.issuer) {\n          fsh.push(`* qualification[${index}].issuer.display = \"${this.escapeFSHString(qual.issuer)}\"`);\n        }\n      });\n    }\n    \n    // Specialties\n    if (actorDefinition.specialties && actorDefinition.specialties.length > 0) {\n      actorDefinition.specialties.forEach((specialty, index) => {\n        if (specialty.system) {\n          fsh.push(`* specialty[${index}].coding.system = \"${specialty.system}\"`);\n        }\n        fsh.push(`* specialty[${index}].coding.code = #${specialty.code}`);\n        fsh.push(`* specialty[${index}].coding.display = \"${this.escapeFSHString(specialty.display)}\"`);\n      });\n    }\n    \n    // Location context\n    if (actorDefinition.location) {\n      if (actorDefinition.location.type) {\n        fsh.push(`* location.type = #${actorDefinition.location.type}`);\n      }\n      if (actorDefinition.location.description) {\n        fsh.push(`* location.description = \"${this.escapeFSHString(actorDefinition.location.description)}\"`);\n      }\n    }\n    \n    // Access level as extension\n    if (actorDefinition.accessLevel) {\n      fsh.push(`* extension[accessLevel].valueCode = #${actorDefinition.accessLevel}`);\n    }\n    \n    // Interactions as extensions\n    if (actorDefinition.interactions && actorDefinition.interactions.length > 0) {\n      actorDefinition.interactions.forEach((interaction, index) => {\n        fsh.push(`* extension[interaction][${index}].extension[type].valueCode = #${interaction.type}`);\n        fsh.push(`* extension[interaction][${index}].extension[target].valueString = \"${this.escapeFSHString(interaction.target)}\"`);\n        if (interaction.description) {\n          fsh.push(`* extension[interaction][${index}].extension[description].valueString = \"${this.escapeFSHString(interaction.description)}\"`);\n        }\n      });\n    }\n    \n    // Add metadata\n    if (actorDefinition.metadata) {\n      if (actorDefinition.metadata.version) {\n        fsh.push(`* version = \"${actorDefinition.metadata.version}\"`);\n      }\n      if (actorDefinition.metadata.publisher) {\n        fsh.push(`* publisher = \"${this.escapeFSHString(actorDefinition.metadata.publisher)}\"`);\n      }\n      if (actorDefinition.metadata.contact && actorDefinition.metadata.contact.length > 0) {\n        actorDefinition.metadata.contact.forEach((contact, index) => {\n          if (contact.name) {\n            fsh.push(`* contact[${index}].name = \"${this.escapeFSHString(contact.name)}\"`);\n          }\n          if (contact.email) {\n            fsh.push(`* contact[${index}].telecom.system = #email`);\n            fsh.push(`* contact[${index}].telecom.value = \"${contact.email}\"`);\n          }\n        });\n      }\n    }\n    \n    return fsh.join('\\n');\n  }\n\n  /**\n   * Escape special characters in FSH strings\n   * Uses shared utility from @sgex/dak-core\n   */\n  escapeFSHString(str) {\n    return escapeFSHString(str);\n  }\n\n  /**\n   * Parse FSH content back to actor definition\n   * Uses shared utility from @sgex/dak-core (now async)\n   */\n  async parseFSH(fshContent) {\n    const metadata = await extractFSHMetadata(fshContent);\n    \n    return {\n      id: metadata.id || '',\n      name: metadata.title || metadata.name || '',\n      description: metadata.description || '',\n      type: metadata.type || 'person',\n      roles: [],\n      qualifications: [],\n      specialties: [],\n      interactions: [],\n      metadata: {\n        status: metadata.status || 'draft'\n      }\n    };\n  }\n\n  /**\n   * Validate actor definition against schema\n   */\n  validateActorDefinition(actorDefinition) {\n    const errors = [];\n    \n    // Basic validation\n    if (!actorDefinition.id || !actorDefinition.id.match(/^[a-zA-Z][a-zA-Z0-9_-]*$/)) {\n      errors.push('ID must start with a letter and contain only letters, numbers, underscores, and hyphens');\n    }\n    \n    if (!actorDefinition.name || actorDefinition.name.trim().length === 0) {\n      errors.push('Name is required');\n    }\n    \n    if (!actorDefinition.description || actorDefinition.description.trim().length === 0) {\n      errors.push('Description is required');\n    }\n    \n    if (!actorDefinition.type) {\n      errors.push('Actor type is required');\n    }\n    \n    if (!actorDefinition.roles || actorDefinition.roles.length === 0) {\n      errors.push('At least one role is required');\n    } else {\n      actorDefinition.roles.forEach((role, index) => {\n        if (!role.code || !role.display) {\n          errors.push(`Role ${index + 1} must have both code and display name`);\n        }\n      });\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Save actor definition to staging ground as FSH\n   */\n  async saveToStagingGround(actorDefinition) {\n    try {\n      // Validate first\n      const validation = this.validateActorDefinition(actorDefinition);\n      if (!validation.isValid) {\n        throw new Error(`Validation failed: ${validation.errors.join(', ')}`);\n      }\n\n      // Generate FSH content\n      const fshContent = this.generateFSH(actorDefinition);\n      \n      // Create file path in staging ground structure\n      const filePath = `input/fsh/actors/${actorDefinition.id}.fsh`;\n      \n      // Save to staging ground\n      const success = stagingGroundService.updateFile(filePath, fshContent, {\n        type: 'actor-definition',\n        actorId: actorDefinition.id,\n        actorName: actorDefinition.name,\n        lastModified: Date.now(),\n        source: 'actor-editor'\n      });\n      \n      if (!success) {\n        throw new Error('Failed to save to staging ground');\n      }\n      \n      return {\n        success: true,\n        filePath,\n        content: fshContent\n      };\n      \n    } catch (error) {\n      console.error('Error saving actor definition:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Load actor definition from staging ground\n   */\n  getFromStagingGround(actorId) {\n    try {\n      const stagingGround = stagingGroundService.getStagingGround();\n      const filePath = `input/fsh/actors/${actorId}.fsh`;\n      \n      const file = stagingGround.files.find(f => f.path === filePath);\n      if (!file) {\n        return null;\n      }\n      \n      // Parse FSH back to actor definition\n      const actorDefinition = this.parseFSH(file.content);\n      \n      return {\n        actorDefinition,\n        metadata: file.metadata,\n        lastModified: file.timestamp\n      };\n      \n    } catch (error) {\n      console.error('Error loading actor definition from staging ground:', error);\n      return null;\n    }\n  }\n\n  /**\n   * List all actor definitions in staging ground\n   */\n  listStagedActors() {\n    try {\n      const stagingGround = stagingGroundService.getStagingGround();\n      \n      return stagingGround.files\n        .filter(file => \n          file.path.startsWith('input/fsh/actors/') && \n          file.path.endsWith('.fsh') &&\n          file.metadata?.type === 'actor-definition'\n        )\n        .map(file => ({\n          id: file.metadata?.actorId || file.path.split('/').pop().replace('.fsh', ''),\n          name: file.metadata?.actorName || 'Unknown Actor',\n          filePath: file.path,\n          lastModified: file.timestamp,\n          metadata: file.metadata\n        }))\n        .sort((a, b) => b.lastModified - a.lastModified);\n        \n    } catch (error) {\n      console.error('Error listing staged actors:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Remove actor definition from staging ground\n   */\n  removeFromStagingGround(actorId) {\n    try {\n      const filePath = `input/fsh/actors/${actorId}.fsh`;\n      return stagingGroundService.removeFile(filePath);\n    } catch (error) {\n      console.error('Error removing actor definition:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Create a new empty actor definition with defaults\n   */\n  createEmptyActorDefinition() {\n    return {\n      id: '',\n      name: '',\n      description: '',\n      type: 'person',\n      roles: [\n        {\n          code: '',\n          display: '',\n          system: 'http://snomed.info/sct'\n        }\n      ],\n      qualifications: [],\n      specialties: [],\n      location: {\n        type: 'facility',\n        description: ''\n      },\n      accessLevel: 'standard',\n      interactions: [],\n      constraints: {\n        availability: '',\n        jurisdiction: '',\n        limitations: []\n      },\n      metadata: {\n        version: '1.0.0',\n        status: 'draft',\n        publisher: '',\n        contact: [],\n        tags: []\n      }\n    };\n  }\n\n  /**\n   * Get predefined actor templates\n   */\n  getActorTemplates() {\n    return [\n      {\n        id: 'clinician-template',\n        name: 'Healthcare Clinician',\n        description: 'A qualified healthcare practitioner who provides direct patient care',\n        type: 'practitioner',\n        roles: [\n          {\n            code: '158965000',\n            display: 'Medical practitioner',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Healthcare facility or clinic'\n        },\n        accessLevel: 'standard'\n      },\n      {\n        id: 'nurse-template',\n        name: 'Registered Nurse',\n        description: 'Licensed nursing professional providing patient care and health education',\n        type: 'practitioner',\n        roles: [\n          {\n            code: '224535009',\n            display: 'Registered nurse',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Hospital ward, clinic, or community health center'\n        },\n        accessLevel: 'standard'\n      },\n      {\n        id: 'patient-template',\n        name: 'Patient',\n        description: 'Individual receiving healthcare services',\n        type: 'patient',\n        roles: [\n          {\n            code: '116154003',\n            display: 'Patient',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Any healthcare setting where patient receives care'\n        },\n        accessLevel: 'read-only'\n      },\n      {\n        id: 'admin-template',\n        name: 'Healthcare Administrator',\n        description: 'Administrative staff managing healthcare operations and data',\n        type: 'person',\n        roles: [\n          {\n            code: '394738000',\n            display: 'Other related persons',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Administrative offices within healthcare organization'\n        },\n        accessLevel: 'administrative'\n      }\n    ];\n  }\n}\n\n// Create singleton instance\nconst actorDefinitionService = new ActorDefinitionService();\n\nexport default actorDefinitionService;","import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport actorDefinitionService from '../services/actorDefinitionService';\nimport { PageLayout, useDAKParams } from './framework';\n\nconst ActorEditor = () => {\n  const navigate = useNavigate();\n  const pageParams = useDAKParams();\n  \n  // For now, we'll set editActorId to null since it's not in URL params\n  // This could be enhanced later to support URL-based actor editing\n  const editActorId = null;\n\n  // State management - ALL HOOKS MUST BE AT THE TOP\n  const [actorDefinition, setActorDefinition] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [showPreview, setShowPreview] = useState(false);\n  const [fshPreview, setFshPreview] = useState('');\n  const [stagedActors, setStagedActors] = useState([]);\n  const [showActorList, setShowActorList] = useState(false);\n  const [activeTab, setActiveTab] = useState('basic');\n\n  // Handle Escape key for preview modal\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === 'Escape' && showPreview) {\n        setShowPreview(false);\n      }\n    };\n    if (showPreview) {\n      document.addEventListener('keydown', handleEscape);\n      return () => document.removeEventListener('keydown', handleEscape);\n    }\n  }, [showPreview]);\n\n  // Initialize component\n  const initializeEditor = useCallback(async () => {\n    setLoading(true);\n    \n    try {\n      if (editActorId) {\n        // Load existing actor definition from staging ground\n        const actorData = actorDefinitionService.getFromStagingGround(editActorId);\n        if (actorData) {\n          setActorDefinition(actorData.actorDefinition);\n        } else {\n          setActorDefinition(actorDefinitionService.createEmptyActorDefinition());\n        }\n      } else {\n        // Create new actor definition\n        setActorDefinition(actorDefinitionService.createEmptyActorDefinition());\n      }\n      \n      // Load staged actors list\n      const staged = actorDefinitionService.listStagedActors();\n      setStagedActors(staged);\n      \n    } catch (error) {\n      console.error('Error initializing actor editor:', error);\n      setErrors({ initialization: 'Failed to initialize editor' });\n    } finally {\n      setLoading(false);\n    }\n  }, [editActorId]);\n\n  useEffect(() => {\n    // Only initialize if we have valid page parameters\n    if (!pageParams.error && !pageParams.loading) {\n      initializeEditor();\n    }\n  }, [pageParams.error, pageParams.loading, initializeEditor]);\n\n  // Handle form field changes\n  const handleFieldChange = useCallback((field, value) => {\n    setActorDefinition(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    \n    // Clear field-specific errors\n    if (errors[field]) {\n      setErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n  }, [errors]);\n\n  // Handle nested field changes\n  const handleNestedFieldChange = useCallback((parentField, index, field, value) => {\n    setActorDefinition(prev => {\n      const newDefinition = { ...prev };\n      if (!newDefinition[parentField]) {\n        newDefinition[parentField] = [];\n      }\n      if (!newDefinition[parentField][index]) {\n        newDefinition[parentField][index] = {};\n      }\n      newDefinition[parentField][index][field] = value;\n      return newDefinition;\n    });\n  }, []);\n\n  // Add new item to array field\n  const addArrayItem = useCallback((field, defaultItem = {}) => {\n    setActorDefinition(prev => ({\n      ...prev,\n      [field]: [...(prev[field] || []), defaultItem]\n    }));\n  }, []);\n\n  // Remove item from array field\n  const removeArrayItem = useCallback((field, index) => {\n    setActorDefinition(prev => ({\n      ...prev,\n      [field]: prev[field].filter((_, i) => i !== index)\n    }));\n  }, []);\n\n  // Validate form data\n  const validateForm = useCallback(() => {\n    const newErrors = {};\n    \n    if (!actorDefinition?.id) {\n      newErrors.id = 'Actor ID is required';\n    }\n    \n    if (!actorDefinition?.name) {\n      newErrors.name = 'Actor name is required';\n    }\n    \n    if (!actorDefinition?.description) {\n      newErrors.description = 'Actor description is required';\n    }\n    \n    if (!actorDefinition?.type) {\n      newErrors.type = 'Actor type is required';\n    }\n    \n    // Validate roles\n    if (actorDefinition?.roles) {\n      actorDefinition.roles.forEach((role, index) => {\n        if (!role.code) {\n          newErrors[`roles.${index}.code`] = 'Role code is required';\n        }\n        if (!role.display) {\n          newErrors[`roles.${index}.display`] = 'Role display name is required';\n        }\n        if (!role.system) {\n          newErrors[`roles.${index}.system`] = 'Role system is required';\n        }\n      });\n    }\n    \n    // Validate qualifications\n    if (actorDefinition?.qualifications) {\n      actorDefinition.qualifications.forEach((qual, index) => {\n        if (!qual.code) {\n          newErrors[`qualifications.${index}.code`] = 'Qualification code is required';\n        }\n        if (!qual.display) {\n          newErrors[`qualifications.${index}.display`] = 'Qualification display name is required';\n        }\n      });\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  }, [actorDefinition]);\n\n  // Generate FSH preview\n  const generatePreview = useCallback(() => {\n    if (!actorDefinition) return;\n    \n    try {\n      const fsh = actorDefinitionService.generateFSH(actorDefinition);\n      setFshPreview(fsh);\n    } catch (error) {\n      console.error('Error generating FSH preview:', error);\n      setErrors({ general: 'Failed to generate FSH preview' });\n    }\n  }, [actorDefinition]);\n\n  // Save actor definition to staging ground\n  const handleSave = useCallback(async () => {\n    if (!validateForm()) {\n      return;\n    }\n    \n    setSaving(true);\n    \n    try {\n      actorDefinitionService.saveToStagingGround(actorDefinition, {\n        type: 'actor-definition',\n        actorId: actorDefinition.id,\n        actorName: actorDefinition.name,\n        branch: branch,\n        repository: repository?.name,\n        owner: profile?.login\n      });\n      \n      // Refresh staged actors list\n      const staged = actorDefinitionService.listStagedActors();\n      setStagedActors(staged);\n      \n      setErrors({});\n    } catch (error) {\n      console.error('Error saving actor definition:', error);\n      setErrors({ general: 'Failed to save actor definition' });\n    } finally {\n      setSaving(false);\n    }\n  }, [actorDefinition, validateForm, branch, repository, profile]);\n\n  // Load template\n  const loadTemplate = useCallback((templateId) => {\n    const templates = actorDefinitionService.getActorTemplates();\n    const template = templates.find(t => t.id === templateId);\n    if (template) {\n      setActorDefinition(template);\n    }\n  }, []);\n\n  // Load staged actor\n  const loadStagedActor = useCallback((actorId) => {\n    const actorData = actorDefinitionService.getFromStagingGround(actorId);\n    if (actorData) {\n      setActorDefinition(actorData.actorDefinition);\n      setShowActorList(false);\n    }\n  }, []);\n\n  // Delete staged actor\n  const deleteStagedActor = useCallback((actorId) => {\n    if (window.confirm('Are you sure you want to delete this staged actor?')) {\n      actorDefinitionService.removeFromStagingGround(actorId);\n      const staged = actorDefinitionService.listStagedActors();\n      setStagedActors(staged);\n    }\n  }, []);\n\n  // Handle PageProvider initialization issues - AFTER all hooks\n  if (pageParams.error) {\n    return (\n      <PageLayout pageName=\"actor-editor\">\n        <div className=\"actor-editor-container\">\n          <div className=\"error-message\">\n            <h2>Page Context Error</h2>\n            <p>{pageParams.error}</p>\n            <p>This component requires a DAK repository context to function properly.</p>\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n  \n  if (pageParams.loading) {\n    return (\n      <PageLayout pageName=\"actor-editor\">\n        <div className=\"actor-editor-container\">\n          <div className=\"loading-message\">\n            <h2>Loading...</h2>\n            <p>Initializing page context...</p>\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n  \n  const { profile, repository, branch } = pageParams;\n\n  return (\n    <PageLayout pageName=\"actor-editor\">\n      <div className=\"actor-editor\">\n        {!profile || !repository ? (\n          <div className=\"redirecting-state\">\n            <h2>Redirecting...</h2>\n            <p>Missing required context. Redirecting to home page...</p>\n          </div>\n        ) : loading ? (\n          <div className=\"loading-state\">\n            <div className=\"loading-content\">\n              <h2>Loading Actor Editor...</h2>\n              <p>Initializing editor and loading data...</p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"editor-content\">\n\n        <div className=\"editor-toolbar\">\n          <div className=\"toolbar-left\">\n            <button \n              onClick={() => setShowActorList(!showActorList)}\n              className=\"toolbar-btn\"\n              title=\"Browse staged actors\"\n            >\n              📋 Staged Actors ({stagedActors.length})\n            </button>\n            <button \n              onClick={generatePreview}\n              className=\"toolbar-btn\"\n              disabled={!actorDefinition?.id}\n              title=\"Preview FSH output\"\n            >\n              👁️ Preview FSH\n            </button>\n          </div>\n          <div className=\"toolbar-right\">\n            <button \n              onClick={handleSave}\n              disabled={saving || !actorDefinition?.id}\n              className=\"toolbar-btn primary\"\n              title=\"Save to staging ground\"\n            >\n              {saving ? '💾 Saving...' : '💾 Save'}\n            </button>\n          </div>\n        </div>\n\n        {errors.general && (\n          <div className=\"error-message\">\n            <strong>Error:</strong> {errors.general}\n          </div>\n        )}\n\n        <div className=\"editor-layout\">\n          {/* Staged Actors Sidebar */}\n          {showActorList && (\n            <div className=\"actor-list-sidebar\">\n              <div className=\"sidebar-header\">\n                <h3>Staged Actors</h3>\n                <button \n                  onClick={() => setShowActorList(false)}\n                  className=\"close-btn\"\n                >\n                  ✕\n                </button>\n              </div>\n              <div className=\"sidebar-content\">\n                <div className=\"templates-section\">\n                  <h4>Templates</h4>\n                  {actorDefinitionService.getActorTemplates().map(template => (\n                    <div key={template.id} className=\"template-item\">\n                      <span className=\"template-name\">{template.name}</span>\n                      <button \n                        onClick={() => loadTemplate(template)}\n                        className=\"load-btn\"\n                      >\n                        Use\n                      </button>\n                    </div>\n                  ))}\n                </div>\n                \n                {stagedActors.length > 0 && (\n                  <div className=\"staged-actors-section\">\n                    <h4>Staged Actors</h4>\n                    {stagedActors.map(actor => (\n                      <div key={actor.id} className=\"staged-actor-item\">\n                        <div className=\"actor-info\">\n                          <span className=\"actor-name\">{actor.name}</span>\n                          <span className=\"actor-id\">{actor.id}</span>\n                          <span className=\"actor-modified\">\n                            {new Date(actor.lastModified).toLocaleDateString()}\n                          </span>\n                        </div>\n                        <div className=\"actor-actions\">\n                          <button \n                            onClick={() => loadStagedActor(actor.id)}\n                            className=\"load-btn\"\n                          >\n                            Edit\n                          </button>\n                          <button \n                            onClick={() => deleteStagedActor(actor.id)}\n                            className=\"delete-btn\"\n                          >\n                            🗑️\n                          </button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Main Editor */}\n          <div className={`main-editor ${showActorList ? 'with-sidebar' : ''}`}>\n            {actorDefinition && (\n              <>\n                <div className=\"editor-tabs\">\n                  <button \n                    className={`tab ${activeTab === 'basic' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('basic')}\n                  >\n                    Basic Info\n                  </button>\n                  <button \n                    className={`tab ${activeTab === 'roles' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('roles')}\n                  >\n                    Roles & Qualifications\n                  </button>\n                  <button \n                    className={`tab ${activeTab === 'context' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('context')}\n                  >\n                    Context & Access\n                  </button>\n                  <button \n                    className={`tab ${activeTab === 'metadata' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('metadata')}\n                  >\n                    Metadata\n                  </button>\n                </div>\n\n                <div className=\"tab-content\">\n                  {activeTab === 'basic' && (\n                    <BasicInfoTab\n                      actorDefinition={actorDefinition}\n                      errors={errors}\n                      onFieldChange={handleFieldChange}\n                    />\n                  )}\n                  \n                  {activeTab === 'roles' && (\n                    <RolesTab\n                      actorDefinition={actorDefinition}\n                      errors={errors}\n                      onNestedFieldChange={handleNestedFieldChange}\n                      onAddItem={addArrayItem}\n                      onRemoveItem={removeArrayItem}\n                    />\n                  )}\n                  \n                  {activeTab === 'context' && (\n                    <ContextTab\n                      actorDefinition={actorDefinition}\n                      errors={errors}\n                      onFieldChange={handleFieldChange}\n                      onNestedFieldChange={handleNestedFieldChange}\n                      onAddItem={addArrayItem}\n                      onRemoveItem={removeArrayItem}\n                    />\n                  )}\n                  \n                  {activeTab === 'metadata' && (\n                    <MetadataTab\n                      actorDefinition={actorDefinition}\n                      errors={errors}\n                      onFieldChange={handleFieldChange}\n                      onNestedFieldChange={handleNestedFieldChange}\n                      onAddItem={addArrayItem}\n                      onRemoveItem={removeArrayItem}\n                    />\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n        )}\n\n        {/* FSH Preview Modal */}\n        {showPreview && (\n          <div \n            className=\"modal-overlay\" \n            onClick={(e) => {\n              if (e.target === e.currentTarget) {\n                setShowPreview(false);\n              }\n            }}\n            role=\"presentation\"\n          >\n            <div \n              className=\"modal-content\" \n              role=\"dialog\"\n              aria-labelledby=\"fsh-preview-title\"\n              aria-modal=\"true\"\n            >\n              <div className=\"modal-header\">\n                <h3 id=\"fsh-preview-title\">FSH Preview</h3>\n                <button \n                  onClick={() => setShowPreview(false)}\n                  className=\"close-btn\"\n                >\n                  ✕\n                </button>\n              </div>\n              <div className=\"modal-body\">\n                <pre className=\"fsh-preview\">{fshPreview}</pre>\n              </div>\n              <div className=\"modal-footer\">\n                <button \n                  onClick={() => {\n                    navigator.clipboard.writeText(fshPreview);\n                    alert('FSH copied to clipboard!');\n                  }}\n                  className=\"copy-btn\"\n                >\n                  📋 Copy to Clipboard\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </PageLayout>\n  );\n};\n\n// Basic Info Tab Component\nconst BasicInfoTab = ({ actorDefinition, errors, onFieldChange }) => (\n  <div className=\"form-section\">\n    <h3>Basic Information</h3>\n    \n    <div className=\"form-group\">\n      <label htmlFor=\"id\">Actor ID *</label>\n      <input\n        type=\"text\"\n        id=\"id\"\n        value={actorDefinition.id}\n        onChange={(e) => onFieldChange('id', e.target.value)}\n        className={errors.id ? 'error' : ''}\n        placeholder=\"e.g., primary-care-physician\"\n        pattern=\"[a-zA-Z][a-zA-Z0-9_-]*\"\n      />\n      {errors.id && <span className=\"error-text\">{errors.id}</span>}\n      <span className=\"help-text\">Unique identifier (letters, numbers, underscores, hyphens only)</span>\n    </div>\n\n    <div className=\"form-group\">\n      <label htmlFor=\"name\">Display Name *</label>\n      <input\n        type=\"text\"\n        id=\"name\"\n        value={actorDefinition.name}\n        onChange={(e) => onFieldChange('name', e.target.value)}\n        className={errors.name ? 'error' : ''}\n        placeholder=\"e.g., Primary Care Physician\"\n      />\n      {errors.name && <span className=\"error-text\">{errors.name}</span>}\n    </div>\n\n    <div className=\"form-group\">\n      <label htmlFor=\"description\">Description *</label>\n      <textarea\n        id=\"description\"\n        value={actorDefinition.description}\n        onChange={(e) => onFieldChange('description', e.target.value)}\n        className={errors.description ? 'error' : ''}\n        placeholder=\"Detailed description of the actor's role and responsibilities...\"\n        rows={4}\n      />\n      {errors.description && <span className=\"error-text\">{errors.description}</span>}\n    </div>\n\n    <div className=\"form-group\">\n      <label htmlFor=\"type\">Actor Type *</label>\n      <select\n        id=\"type\"\n        value={actorDefinition.type}\n        onChange={(e) => onFieldChange('type', e.target.value)}\n        className={errors.type ? 'error' : ''}\n      >\n        <option value=\"person\">Person</option>\n        <option value=\"practitioner\">Practitioner</option>\n        <option value=\"patient\">Patient</option>\n        <option value=\"relatedperson\">Related Person</option>\n        <option value=\"organization\">Organization</option>\n        <option value=\"device\">Device</option>\n        <option value=\"system\">System</option>\n      </select>\n      {errors.type && <span className=\"error-text\">{errors.type}</span>}\n    </div>\n  </div>\n);\n\n// Roles Tab Component\nconst RolesTab = ({ actorDefinition, errors, onNestedFieldChange, onAddItem, onRemoveItem }) => (\n  <div className=\"form-section\">\n    <h3>Roles & Qualifications</h3>\n    \n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Roles *</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('roles', { code: '', display: '', system: 'http://snomed.info/sct' })}\n          className=\"add-btn\"\n        >\n          + Add Role\n        </button>\n      </div>\n      {errors.roles && <span className=\"error-text\">{errors.roles}</span>}\n      \n      {actorDefinition.roles && actorDefinition.roles.map((role, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Role {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => onRemoveItem('roles', index)}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor={`role-code-${index}`}>Code</label>\n              <input\n                id={`role-code-${index}`}\n                type=\"text\"\n                value={role.code}\n                onChange={(e) => onNestedFieldChange('roles', index, 'code', e.target.value)}\n                placeholder=\"Role code\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor={`role-display-${index}`}>Display Name</label>\n              <input\n                id={`role-display-${index}`}\n                type=\"text\"\n                value={role.display}\n                onChange={(e) => onNestedFieldChange('roles', index, 'display', e.target.value)}\n                placeholder=\"Human-readable role name\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor={`role-system-${index}`}>Code System</label>\n            <input\n              id={`role-system-${index}`}\n              type=\"text\"\n              value={role.system || ''}\n              onChange={(e) => onNestedFieldChange('roles', index, 'system', e.target.value)}\n              placeholder=\"http://snomed.info/sct\"\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Qualifications</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('qualifications', { code: '', display: '', issuer: '' })}\n          className=\"add-btn\"\n        >\n          + Add Qualification\n        </button>\n      </div>\n      \n      {actorDefinition.qualifications && actorDefinition.qualifications.map((qual, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Qualification {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => onRemoveItem('qualifications', index)}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor={`qualification-code-${index}`}>Code</label>\n              <input\n                id={`qualification-code-${index}`}\n                type=\"text\"\n                value={qual.code}\n                onChange={(e) => onNestedFieldChange('qualifications', index, 'code', e.target.value)}\n                placeholder=\"Qualification code\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor={`qualification-display-${index}`}>Display Name</label>\n              <input\n                id={`qualification-display-${index}`}\n                type=\"text\"\n                value={qual.display}\n                onChange={(e) => onNestedFieldChange('qualifications', index, 'display', e.target.value)}\n                placeholder=\"Qualification name\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor={`qualification-issuer-${index}`}>Issuing Organization</label>\n            <input\n              id={`qualification-issuer-${index}`}\n              type=\"text\"\n              value={qual.issuer || ''}\n              onChange={(e) => onNestedFieldChange('qualifications', index, 'issuer', e.target.value)}\n              placeholder=\"Organization that issued this qualification\"\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Specialties</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('specialties', { code: '', display: '', system: 'http://snomed.info/sct' })}\n          className=\"add-btn\"\n        >\n          + Add Specialty\n        </button>\n      </div>\n      \n      {actorDefinition.specialties && actorDefinition.specialties.map((specialty, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Specialty {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => onRemoveItem('specialties', index)}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor={`specialty-code-${index}`}>Code</label>\n              <input\n                id={`specialty-code-${index}`}\n                type=\"text\"\n                value={specialty.code}\n                onChange={(e) => onNestedFieldChange('specialties', index, 'code', e.target.value)}\n                placeholder=\"Specialty code\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor={`specialty-display-${index}`}>Display Name</label>\n              <input\n                id={`specialty-display-${index}`}\n                type=\"text\"\n                value={specialty.display}\n                onChange={(e) => onNestedFieldChange('specialties', index, 'display', e.target.value)}\n                placeholder=\"Specialty name\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor={`specialty-system-${index}`}>Code System</label>\n            <input\n              id={`specialty-system-${index}`}\n              type=\"text\"\n              value={specialty.system || ''}\n              onChange={(e) => onNestedFieldChange('specialties', index, 'system', e.target.value)}\n              placeholder=\"http://snomed.info/sct\"\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\n// Context Tab Component\nconst ContextTab = ({ actorDefinition, errors, onFieldChange, onNestedFieldChange, onAddItem, onRemoveItem }) => (\n  <div className=\"form-section\">\n    <h3>Context & Access</h3>\n    \n    <div className=\"subsection\">\n      <h4>Typical Location</h4>\n      <div className=\"form-row\">\n        <div className=\"form-group\">\n          <label htmlFor=\"location-type\">Location Type</label>\n          <select\n            id=\"location-type\"\n            value={actorDefinition.location?.type || ''}\n            onChange={(e) => onFieldChange('location', { ...actorDefinition.location, type: e.target.value })}\n          >\n            <option value=\"facility\">Healthcare Facility</option>\n            <option value=\"community\">Community</option>\n            <option value=\"home\">Home</option>\n            <option value=\"mobile\">Mobile</option>\n            <option value=\"virtual\">Virtual/Remote</option>\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"location-description\">Description</label>\n          <input\n            id=\"location-description\"\n            type=\"text\"\n            value={actorDefinition.location?.description || ''}\n            onChange={(e) => onFieldChange('location', { ...actorDefinition.location, description: e.target.value })}\n            placeholder=\"Describe the typical location\"\n          />\n        </div>\n      </div>\n    </div>\n\n    <div className=\"subsection\">\n      <h4>System Access Level</h4>\n      <div className=\"form-group\">\n        <select\n          value={actorDefinition.accessLevel || 'standard'}\n          onChange={(e) => onFieldChange('accessLevel', e.target.value)}\n        >\n          <option value=\"read-only\">Read-Only</option>\n          <option value=\"standard\">Standard</option>\n          <option value=\"administrative\">Administrative</option>\n          <option value=\"system\">System</option>\n        </select>\n      </div>\n    </div>\n\n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Key Interactions</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('interactions', { type: 'reads', target: '', description: '' })}\n          className=\"add-btn\"\n        >\n          + Add Interaction\n        </button>\n      </div>\n      \n      {actorDefinition.interactions && actorDefinition.interactions.map((interaction, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Interaction {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => onRemoveItem('interactions', index)}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor={`interaction-type-${index}`}>Type</label>\n              <select\n                id={`interaction-type-${index}`}\n                value={interaction.type}\n                onChange={(e) => onNestedFieldChange('interactions', index, 'type', e.target.value)}\n              >\n                <option value=\"creates\">Creates</option>\n                <option value=\"reads\">Reads</option>\n                <option value=\"updates\">Updates</option>\n                <option value=\"deletes\">Deletes</option>\n                <option value=\"approves\">Approves</option>\n                <option value=\"reviews\">Reviews</option>\n                <option value=\"monitors\">Monitors</option>\n              </select>\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor={`interaction-target-${index}`}>Target</label>\n              <input\n                id={`interaction-target-${index}`}\n                type=\"text\"\n                value={interaction.target}\n                onChange={(e) => onNestedFieldChange('interactions', index, 'target', e.target.value)}\n                placeholder=\"What the actor interacts with\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor={`interaction-description-${index}`}>Description</label>\n            <input\n              id={`interaction-description-${index}`}\n              type=\"text\"\n              value={interaction.description || ''}\n              onChange={(e) => onNestedFieldChange('interactions', index, 'description', e.target.value)}\n              placeholder=\"Describe this interaction\"\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\n// Metadata Tab Component\nconst MetadataTab = ({ actorDefinition, errors, onFieldChange, onNestedFieldChange, onAddItem, onRemoveItem }) => (\n  <div className=\"form-section\">\n    <h3>Metadata</h3>\n    \n    <div className=\"form-row\">\n      <div className=\"form-group\">\n        <label htmlFor=\"metadata-version\">Version</label>\n        <input\n          id=\"metadata-version\"\n          type=\"text\"\n          value={actorDefinition.metadata?.version || ''}\n          onChange={(e) => onFieldChange('metadata', { ...actorDefinition.metadata, version: e.target.value })}\n          placeholder=\"1.0.0\"\n        />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"metadata-status\">Status</label>\n        <select\n          id=\"metadata-status\"\n          value={actorDefinition.metadata?.status || 'draft'}\n          onChange={(e) => onFieldChange('metadata', { ...actorDefinition.metadata, status: e.target.value })}\n        >\n          <option value=\"draft\">Draft</option>\n          <option value=\"active\">Active</option>\n          <option value=\"retired\">Retired</option>\n        </select>\n      </div>\n    </div>\n\n    <div className=\"form-group\">\n      <label htmlFor=\"metadata-publisher\">Publisher</label>\n      <input\n        id=\"metadata-publisher\"\n        type=\"text\"\n        value={actorDefinition.metadata?.publisher || ''}\n        onChange={(e) => onFieldChange('metadata', { ...actorDefinition.metadata, publisher: e.target.value })}\n        placeholder=\"Organization or person responsible\"\n      />\n    </div>\n\n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Contact Information</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('metadata.contact', { name: '', email: '' })}\n          className=\"add-btn\"\n        >\n          + Add Contact\n        </button>\n      </div>\n      \n      {actorDefinition.metadata?.contact && actorDefinition.metadata.contact.map((contact, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Contact {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => {\n                const newContacts = [...(actorDefinition.metadata.contact || [])];\n                newContacts.splice(index, 1);\n                onFieldChange('metadata', { ...actorDefinition.metadata, contact: newContacts });\n              }}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor={`contact-name-${index}`}>Name</label>\n              <input\n                id={`contact-name-${index}`}\n                type=\"text\"\n                value={contact.name || ''}\n                onChange={(e) => {\n                  const newContacts = [...(actorDefinition.metadata.contact || [])];\n                  newContacts[index] = { ...contact, name: e.target.value };\n                  onFieldChange('metadata', { ...actorDefinition.metadata, contact: newContacts });\n                }}\n                placeholder=\"Contact name\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor={`contact-email-${index}`}>Email</label>\n              <input\n                id={`contact-email-${index}`}\n                type=\"email\"\n                value={contact.email || ''}\n                onChange={(e) => {\n                  const newContacts = [...(actorDefinition.metadata.contact || [])];\n                  newContacts[index] = { ...contact, email: e.target.value };\n                  onFieldChange('metadata', { ...actorDefinition.metadata, contact: newContacts });\n                }}\n                placeholder=\"contact@example.com\"\n              />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"form-group\">\n      <label htmlFor=\"metadata-tags\">Tags</label>\n      <input\n        id=\"metadata-tags\"\n        type=\"text\"\n        value={actorDefinition.metadata?.tags?.join(', ') || ''}\n        onChange={(e) => onFieldChange('metadata', { \n          ...actorDefinition.metadata, \n          tags: e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag) \n        })}\n        placeholder=\"Enter tags separated by commas\"\n      />\n      <span className=\"help-text\">Comma-separated tags for categorization</span>\n    </div>\n  </div>\n);\n\nexport default ActorEditor;"],"names":["constructor","this","actorSchema","core","ActorDefinitionCore","loadSchema","response","fetch","concat","process","json","error","console","warn","generateFSH","actorDefinition","_actorDefinition$meta","id","Error","fsh","push","escapeFSHString","name","description","metadata","status","type","roles","length","forEach","role","index","system","code","display","qualifications","qual","issuer","specialties","specialty","location","accessLevel","interactions","interaction","target","version","publisher","contact","email","join","str","parseFSH","fshContent","extractFSHMetadata","title","validateActorDefinition","errors","match","trim","isValid","saveToStagingGround","validation","filePath","stagingGroundService","updateFile","actorId","actorName","lastModified","Date","now","source","success","content","message","getFromStagingGround","stagingGround","getStagingGround","file","files","find","f","path","timestamp","listStagedActors","filter","_file$metadata","startsWith","endsWith","map","_file$metadata2","_file$metadata3","split","pop","replace","sort","a","b","removeFromStagingGround","removeFile","createEmptyActorDefinition","constraints","availability","jurisdiction","limitations","tags","getActorTemplates","BasicInfoTab","_ref","onFieldChange","_jsxs","className","children","_jsx","htmlFor","value","onChange","e","placeholder","pattern","rows","RolesTab","_ref2","onNestedFieldChange","onAddItem","onRemoveItem","onClick","ContextTab","_ref3","_actorDefinition$loca","_actorDefinition$loca2","_objectSpread","MetadataTab","_ref4","_actorDefinition$meta2","_actorDefinition$meta3","_actorDefinition$meta4","_actorDefinition$meta5","_actorDefinition$meta6","newContacts","splice","tag","ActorEditor","useNavigate","pageParams","useDAKParams","editActorId","setActorDefinition","useState","loading","setLoading","saving","setSaving","setErrors","showPreview","setShowPreview","fshPreview","setFshPreview","stagedActors","setStagedActors","showActorList","setShowActorList","activeTab","setActiveTab","useEffect","handleEscape","key","document","addEventListener","removeEventListener","initializeEditor","useCallback","async","actorDefinitionService","staged","initialization","handleFieldChange","field","prev","newErrors","handleNestedFieldChange","parentField","newDefinition","addArrayItem","defaultItem","arguments","undefined","removeArrayItem","_","i","validateForm","Object","keys","generatePreview","general","handleSave","branch","repository","owner","profile","login","loadTemplate","templateId","template","t","loadStagedActor","actorData","deleteStagedActor","window","confirm","PageLayout","pageName","disabled","actor","toLocaleDateString","_Fragment","currentTarget","navigator","clipboard","writeText","alert"],"sourceRoot":""}