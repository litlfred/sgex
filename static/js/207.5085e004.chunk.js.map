{"version":3,"file":"static/js/207.5085e004.chunk.js","mappings":"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","sources":["components/RepositorySelection.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport repositoryCacheService from '../services/repositoryCacheService';\nimport { PageLayout } from './framework';\n\nconst RepositorySelection = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user } = useParams();\n  const [repositories, setRepositories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // Get profile from location state or fetch from GitHub using user param\n  const [profile, setProfile] = useState(location.state?.profile);\n\n  // Fetch profile if we have user param but no profile in state\n  useEffect(() => {\n    const fetchProfile = async () => {\n      if (user && !profile) {\n        try {\n          if (githubService.isAuth()) {\n            const fetchedProfile = await githubService.getUser(user);\n            setProfile(fetchedProfile);\n          } else {\n            // Create a profile for unauthenticated users (accessing public repositories)\n            setProfile({\n              login: user,\n              name: user.charAt(0).toUpperCase() + user.slice(1),\n              avatar_url: `https://github.com/${user}.png`,\n              type: 'User'\n              // Note: isDemo is NOT set - unauthenticated users should access real public repos\n            });\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n          navigate('/', {\n            state: {\n              warningMessage: `User '${user}' not found or not accessible.`\n            }\n          });\n        }\n      }\n    };\n\n    fetchProfile();\n  }, [user, profile, navigate]);\n\n  const fetchRepositories = useCallback(async (forceRefresh = false) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const profileType = profile.type;\n      \n      // First, check cache unless we're forcing a refresh\n      if (!forceRefresh) {\n        let cachedRepos = null;\n        try {\n          cachedRepos = repositoryCacheService.getCachedRepositories(profile.login, profileType);\n        } catch (cacheError) {\n          console.warn('Error accessing repository cache:', cacheError);\n        }\n        \n        if (cachedRepos) {\n          // Use cached repositories\n          console.log(`Using cached repositories for ${profile.login} (${profileType})`);\n          setRepositories(cachedRepos.repositories);\n          setLoading(false);\n          return;\n        }\n      }\n      \n      // No cached data or forced refresh - fetch from GitHub\n      console.log(`Fetching fresh repositories for ${profile.login} (${profileType})`);\n      const repos = await githubService.getRepositories(profile.login, profileType);\n      \n      // Cache the fetched repositories\n      try {\n        repositoryCacheService.setCachedRepositories(profile.login, profileType, repos);\n      } catch (cacheError) {\n        console.warn('Error caching repositories:', cacheError);\n      }\n      \n      setRepositories(repos);\n    } catch (error) {\n      console.error('Error fetching repositories:', error);\n      setError('Failed to fetch repositories. Please check your connection and try again.');\n    } finally {\n      setLoading(false);\n    }\n  }, [profile]);\n\n  useEffect(() => {\n    // Don't redirect if we're waiting for profile to be loaded from user param\n    if (!profile && !user) {\n      navigate('/');\n      return;\n    }\n    \n    // Only fetch repositories if we have a profile\n    if (profile) {\n      fetchRepositories();\n    }\n  }, [profile, user, navigate, fetchRepositories]);\n\n  const handleRepositorySelect = (repo) => {\n    navigate(`/dashboard/${repo.owner.login}/${repo.name}`, { \n      state: { \n        profile, \n        repository: repo \n      } \n    });\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <PageLayout pageName=\"repository-selection\">\n      {!profile ? (\n        <div>Redirecting...</div>\n      ) : (\n        <div className=\"repo-content\">\n        <div className=\"breadcrumb\">\n          <button onClick={() => navigate('/')} className=\"breadcrumb-link\">\n            Select Profile\n          </button>\n          <span className=\"breadcrumb-separator\">›</span>\n          <span className=\"breadcrumb-current\">Select Repository</span>\n        </div>\n\n        <div className=\"repo-main\">\n          <div className=\"repo-selection\">\n            <h2>Select DAK Repository</h2>\n            <p>Choose a repository containing WHO SMART Guidelines Digital Adaptation Kit content:</p>\n\n            {loading ? (\n              <div className=\"loading\">\n                <div className=\"spinner\"></div>\n                <p>Loading repositories...</p>\n              </div>\n            ) : error ? (\n              <div className=\"error-state\">\n                <h3>Error loading repositories</h3>\n                <p>{error}</p>\n              <button onClick={() => fetchRepositories(true)} className=\"retry-btn\">\n                Try Again\n              </button>\n            </div>\n          ) : repositories.length === 0 ? (\n            <div className=\"empty-state\">\n              <h3>No DAK repositories found</h3>\n              <p>\n                No repositories found with DAK-related topics or keywords. \n                Create a new repository or add topics like 'who', 'smart-guidelines', \n                'dak', or 'health' to existing repositories.\n              </p>\n            </div>\n          ) : (\n            <div className=\"repo-grid\">\n              {repositories.map((repo) => (\n                <div \n                  key={repo.id}\n                  className=\"repo-card\"\n                  onClick={() => handleRepositorySelect(repo)}\n                >\n                  <div className=\"repo-header-info\">\n                    <h3>{repo.name}</h3>\n                    <div className=\"repo-meta\">\n                      {repo.private && <span className=\"private-badge\">Private</span>}\n                      {repo.language && <span className=\"language-badge\">{repo.language}</span>}\n                    </div>\n                  </div>\n                  \n                  <p className=\"repo-description\">{repo.description || 'No description available'}</p>\n                  \n                  <div className=\"repo-topics\">\n                    {(repo.topics || []).slice(0, 3).map((topic) => (\n                      <span key={topic} className=\"topic-tag\">{topic}</span>\n                    ))}\n                    {(repo.topics || []).length > 3 && (\n                      <span className=\"topic-more\">+{(repo.topics || []).length - 3} more</span>\n                    )}\n                  </div>\n                  \n                  <div className=\"repo-stats\">\n                    <div className=\"stat\">\n                      <span className=\"stat-icon\">⭐</span>\n                      <span>{repo.stargazers_count || 0}</span>\n                    </div>\n                    <div className=\"stat\">\n                      <span className=\"stat-icon\">🍴</span>\n                      <span>{repo.forks_count || 0}</span>\n                    </div>\n                    <div className=\"stat\">\n                      <span className=\"stat-icon\">📅</span>\n                      <span>Updated {formatDate(repo.updated_at)}</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n          </div>\n        </div>\n        </div>\n      )}\n    </PageLayout>\n  );\n};\n\nexport default RepositorySelection;"],"names":["RepositorySelection","_location$state","location","useLocation","navigate","useNavigate","user","useParams","repositories","setRepositories","useState","loading","setLoading","error","setError","profile","setProfile","state","useEffect","async","githubService","isAuth","fetchedProfile","getUser","login","name","charAt","toUpperCase","slice","avatar_url","concat","type","console","warningMessage","fetchProfile","fetchRepositories","useCallback","forceRefresh","arguments","length","undefined","profileType","cachedRepos","repositoryCacheService","getCachedRepositories","cacheError","warn","log","repos","getRepositories","setCachedRepositories","_jsx","PageLayout","pageName","children","_jsxs","className","onClick","map","repo","owner","repository","handleRepositorySelect","private","language","description","topics","topic","stargazers_count","forks_count","dateString","updated_at","Date","toLocaleDateString","year","month","day","id"],"sourceRoot":""}