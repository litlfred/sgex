{"version":3,"file":"static/js/141.da971b12.chunk.js","mappings":"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","sources":["components/BPMNEditor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AssetEditorLayout, useDAKParams } from './framework';\nimport { createLazyBpmnModeler, createLazyOctokit } from '../utils/lazyRouteUtils';\n\nconst BPMNEditor = () => {\n  const navigate = useNavigate();\n  const { profile, repository, branch } = useDAKParams();\n  const modelerRef = useRef(null);\n  const containerRef = useRef(null);\n  \n  const [bpmnFiles, setBpmnFiles] = useState([]);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentXmlContent, setCurrentXmlContent] = useState('');\n  const [originalXmlContent, setOriginalXmlContent] = useState('');\n\n  // Initialize BPMN modeler\n  useEffect(() => {\n    // Initialize modeler when container is available and file is selected\n    const initializeModeler = async () => {\n      if (containerRef.current && !modelerRef.current && selectedFile) {\n        try {\n          // Lazy load BPMN.js modeler to improve initial page responsiveness\n          modelerRef.current = await createLazyBpmnModeler({\n            container: containerRef.current\n          });\n          console.log('BPMN modeler initialized successfully');\n        } catch (error) {\n          console.error('Failed to initialize BPMN modeler:', error);\n        }\n      }\n    };\n\n    // Try to initialize immediately if we have a selected file\n    if (selectedFile) {\n      initializeModeler();\n      \n      // If container is not ready, wait a bit and try again\n      const timer = setTimeout(initializeModeler, 100);\n      return () => clearTimeout(timer);\n    }\n\n    return () => {\n      if (modelerRef.current) {\n        try {\n          modelerRef.current.destroy();\n        } catch (error) {\n          console.error('Error destroying BPMN modeler:', error);\n        }\n        modelerRef.current = null;\n      }\n    };\n  }, [selectedFile]);\n\n  // Load BPMN files from repository\n  useEffect(() => {\n    const loadBpmnFiles = async () => {\n      if (!profile || !repository) {\n        navigate('/');\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Use GitHub API if profile has token, otherwise use mock data\n        if (profile.token) {\n          try {\n            // Lazy load Octokit to improve initial page responsiveness\n            const octokit = await createLazyOctokit({ auth: profile.token });\n            const { data } = await octokit.rest.repos.getContent({\n              owner: repository.owner?.login || repository.full_name.split('/')[0],\n              repo: repository.name,\n              path: 'input/business-processes'\n            });\n\n            // Filter for .bpmn files\n            const bpmnFiles = Array.isArray(data) \n              ? data.filter(file => file.name.endsWith('.bpmn'))\n              : data.name.endsWith('.bpmn') ? [data] : [];\n\n            setBpmnFiles(bpmnFiles);\n            setLoading(false);\n            return;\n          } catch (apiError) {\n            console.warn('GitHub API error, falling back to mock data:', apiError);\n            // Fall through to mock data\n          }\n        }\n\n        // Mock BPMN files for demonstration\n        const mockFiles = [\n          {\n            name: 'patient-registration.bpmn',\n            path: 'input/business-processes/patient-registration.bpmn',\n            sha: 'abc123',\n            size: 2048,\n            download_url: 'https://raw.githubusercontent.com/...'\n          },\n          {\n            name: 'vaccination-workflow.bpmn',\n            path: 'input/business-processes/vaccination-workflow.bpmn',\n            sha: 'def456',\n            size: 3072,\n            download_url: 'https://raw.githubusercontent.com/...'\n          },\n          {\n            name: 'appointment-scheduling.bpmn',\n            path: 'input/business-processes/appointment-scheduling.bpmn',\n            sha: 'ghi789',\n            size: 1536,\n            download_url: 'https://raw.githubusercontent.com/...'\n          }\n        ];\n\n        setBpmnFiles(mockFiles);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error loading BPMN files:', err);\n        setError('Failed to load BPMN files from repository');\n        setLoading(false);\n      }\n    };\n\n    loadBpmnFiles();\n  }, [profile, repository, navigate]);\n\n  // Track BPMN content changes\n  useEffect(() => {\n    if (modelerRef.current) {\n      const handleChanged = () => {\n        // Update current content when diagram changes\n        modelerRef.current.saveXML({ format: true })\n          .then(({ xml }) => {\n            setCurrentXmlContent(xml);\n          })\n          .catch(error => {\n            console.error('Error getting XML content:', error);\n          });\n      };\n\n      modelerRef.current.on('commandStack.changed', handleChanged);\n      \n      return () => {\n        if (modelerRef.current) {\n          modelerRef.current.off('commandStack.changed', handleChanged);\n        }\n      };\n    }\n  }, [selectedFile]);\n\n  // Handle save completion\n  const handleSave = async (content, saveType) => {\n    console.log(`BPMN diagram saved to ${saveType}`);\n    if (saveType === 'github') {\n      // After GitHub save, update the original content\n      setOriginalXmlContent(content);\n    }\n  };\n\n  // Custom save to GitHub function that exports XML and uses GitHub API\n  const customSaveToGitHub = async (commitMessage) => {\n    if (!commitMessage.trim() || !selectedFile || !modelerRef.current) {\n      return false;\n    }\n\n    try {\n      // Export BPMN XML\n      const { xml } = await modelerRef.current.saveXML({ format: true });\n\n      // Use GitHub API if profile has token\n      if (profile.token && repository) {\n        // Lazy load Octokit to improve initial page responsiveness\n        const octokit = await createLazyOctokit({ auth: profile.token });\n        \n        // Get current file to get SHA for update\n        let currentSha = selectedFile.sha;\n        try {\n          const { data: currentFile } = await octokit.rest.repos.getContent({\n            owner: repository.owner?.login || repository.full_name.split('/')[0],\n            repo: repository.name,\n            path: selectedFile.path\n          });\n          currentSha = currentFile.sha;\n        } catch (getError) {\n          console.warn('Could not get current file SHA, using provided SHA:', getError);\n        }\n\n        // Commit the updated BPMN file\n        await octokit.rest.repos.createOrUpdateFileContents({\n          owner: repository.owner?.login || repository.full_name.split('/')[0],\n          repo: repository.name,\n          path: selectedFile.path,\n          message: commitMessage,\n          content: btoa(xml), // Base64 encode the XML content\n          sha: currentSha,\n          committer: {\n            name: profile.name || profile.login,\n            email: profile.email || `${profile.login}@users.noreply.github.com`\n          }\n        });\n\n        console.log('BPMN file committed to GitHub successfully');\n        return true;\n      }\n\n      // Fallback: return false for demo mode\n      return false;\n    } catch (error) {\n      console.error('Error saving BPMN to GitHub:', error);\n      throw error;\n    }\n  };\n\n  // Load selected BPMN file content\n  const loadBpmnFile = async (file) => {\n    try {\n      setLoading(true);\n      setError(null);\n      setSelectedFile(file);\n\n      // Wait for the next render cycle to ensure container is visible\n      setTimeout(async () => {\n        try {\n          // Initialize modeler if not already done\n          if (!modelerRef.current && containerRef.current) {\n            // Lazy load BPMN.js modeler to improve initial page responsiveness\n            modelerRef.current = await createLazyBpmnModeler({\n              container: containerRef.current\n            });\n            console.log('BPMN modeler initialized for file loading');\n          }\n\n          // Ensure modeler is initialized\n          if (!modelerRef.current) {\n            console.error('BPMN modeler not available');\n            setError('BPMN editor not ready. Please try again.');\n            setLoading(false);\n            return;\n          }\n\n          // Load actual BPMN content from GitHub if available\n          let bpmnXml = null;\n          if (profile.token && file.download_url) {\n            try {\n              const response = await fetch(file.download_url);\n              if (response.ok) {\n                bpmnXml = await response.text();\n                console.log('Loaded BPMN content from GitHub');\n              }\n            } catch (fetchError) {\n              console.warn('Could not fetch BPMN content from GitHub:', fetchError);\n            }\n          }\n\n          // Use mock content if we couldn't load from GitHub\n          if (!bpmnXml) {\n            bpmnXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn:definitions xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" id=\"Definitions_1\" targetNamespace=\"http://bpmn.io/schema/bpmn\" exporter=\"bpmn-js (https://demo.bpmn.io)\" exporterVersion=\"17.11.1\">\n  <bpmn:process id=\"Process_${file.name.replace('.bpmn', '')}\" isExecutable=\"true\">\n    <bpmn:startEvent id=\"StartEvent_1\">\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:task id=\"Task_1\" name=\"${file.name.replace('.bpmn', '').replace('-', ' ').toUpperCase()}\">\n      <bpmn:incoming>Flow_1</bpmn:incoming>\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\n    </bpmn:task>\n    <bpmn:endEvent id=\"EndEvent_1\">\n      <bpmn:incoming>Flow_2</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id=\"Flow_1\" sourceRef=\"StartEvent_1\" targetRef=\"Task_1\" />\n    <bpmn:sequenceFlow id=\"Flow_2\" sourceRef=\"Task_1\" targetRef=\"EndEvent_1\" />\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_${file.name.replace('.bpmn', '')}\">\n      <bpmndi:BPMNShape id=\"_BPMNShape_StartEvent_2\" bpmnElement=\"StartEvent_1\">\n        <dc:Bounds x=\"179\" y=\"99\" width=\"36\" height=\"36\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Activity_1\" bpmnElement=\"Task_1\">\n        <dc:Bounds x=\"270\" y=\"77\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Event_1\" bpmnElement=\"EndEvent_1\">\n        <dc:Bounds x=\"432\" y=\"99\" width=\"36\" height=\"36\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id=\"Flow_1_di\" bpmnElement=\"Flow_1\">\n        <di:waypoint x=\"215\" y=\"117\" />\n        <di:waypoint x=\"270\" y=\"117\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_2_di\" bpmnElement=\"Flow_2\">\n        <di:waypoint x=\"370\" y=\"117\" />\n        <di:waypoint x=\"432\" y=\"117\" />\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>`;\n          }\n\n          // Load the BPMN diagram\n          await modelerRef.current.importXML(bpmnXml);\n          \n          // Set the content states\n          setOriginalXmlContent(bpmnXml);\n          setCurrentXmlContent(bpmnXml);\n          \n          setLoading(false);\n        } catch (err) {\n          console.error('Error loading BPMN file:', err);\n          setError('Failed to load BPMN diagram');\n          setLoading(false);\n        }\n      }, 100);\n\n    } catch (err) {\n      console.error('Error initializing BPMN file load:', err);\n      setError('Failed to initialize BPMN editor');\n      setLoading(false);\n    }\n  };\n\n  if (!profile || !repository) {\n    navigate('/');\n    return <div>Redirecting...</div>;\n  }\n\n  // Check if there are changes in the BPMN diagram\n  const hasChanges = currentXmlContent !== originalXmlContent;\n\n  return (\n    <AssetEditorLayout\n      pageName=\"bpmn-editor\"\n      file={selectedFile}\n      repository={repository}\n      branch={branch || 'main'}\n      content={currentXmlContent}\n      originalContent={originalXmlContent}\n      hasChanges={hasChanges}\n      onSave={handleSave}\n      saveButtonsPosition=\"top\"\n      // Custom save function for GitHub to handle BPMN XML export\n      customSaveToGitHub={customSaveToGitHub}\n    >\n      <div className=\"bpmn-editor\">\n        <div className=\"editor-content\">\n          <div className=\"bpmn-workspace\">\n            <div className=\"file-browser\">\n              <div className=\"file-browser-header\">\n                <h3>BPMN Files</h3>\n                <span className=\"file-path\">input/business-processes/</span>\n              </div>\n              \n              {loading && !selectedFile ? (\n                <div className=\"loading\">\n                  <div className=\"spinner\"></div>\n                  <p>Loading BPMN files...</p>\n                </div>\n              ) : error ? (\n                <div className=\"error\">\n                  <p>❌ {error}</p>\n                </div>\n              ) : (\n                <div className=\"file-list\">\n                  {bpmnFiles.map((file) => (\n                    <div \n                      key={file.sha}\n                      className={`file-item ${selectedFile?.sha === file.sha ? 'selected' : ''}`}\n                      onClick={() => loadBpmnFile(file)}\n                    >\n                      <div className=\"file-icon\">📋</div>\n                      <div className=\"file-details\">\n                        <div className=\"file-name\">{file.name}</div>\n                        <div className=\"file-size\">{(file.size / 1024).toFixed(1)} KB</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            <div className=\"diagram-editor\">\n              {selectedFile ? (\n                <>\n                  <div className=\"editor-toolbar\">\n                    <div className=\"toolbar-left\">\n                      <h4>{selectedFile.name}</h4>\n                    </div>\n                  </div>\n                  <div className=\"bpmn-container\" ref={containerRef}></div>\n                </>\n              ) : (\n                <div className=\"diagram-placeholder\">\n                  <div className=\"placeholder-content\">\n                    <div className=\"placeholder-icon\">🔄</div>\n                    <h3>Select a BPMN File</h3>\n                    <p>Choose a .bpmn file from the list to start editing business processes.</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </AssetEditorLayout>\n  );\n};\n\nexport default BPMNEditor;"],"names":["BPMNEditor","navigate","useNavigate","profile","repository","branch","useDAKParams","modelerRef","useRef","containerRef","bpmnFiles","setBpmnFiles","useState","selectedFile","setSelectedFile","loading","setLoading","error","setError","currentXmlContent","setCurrentXmlContent","originalXmlContent","setOriginalXmlContent","useEffect","initializeModeler","async","current","createLazyBpmnModeler","container","console","log","timer","setTimeout","clearTimeout","destroy","token","_repository$owner","octokit","createLazyOctokit","auth","data","rest","repos","getContent","owner","login","full_name","split","repo","name","path","Array","isArray","filter","file","endsWith","apiError","warn","sha","size","download_url","err","loadBpmnFiles","handleChanged","saveXML","format","then","_ref","xml","catch","on","off","_jsx","children","hasChanges","AssetEditorLayout","pageName","content","originalContent","onSave","saveType","concat","saveButtonsPosition","customSaveToGitHub","commitMessage","trim","_repository$owner3","currentSha","_repository$owner2","currentFile","getError","createOrUpdateFileContents","message","btoa","committer","email","className","_jsxs","map","onClick","bpmnXml","response","fetch","ok","text","fetchError","replace","toUpperCase","importXML","loadBpmnFile","toFixed","_Fragment","ref"],"sourceRoot":""}