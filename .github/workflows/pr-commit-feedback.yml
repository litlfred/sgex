name: PR Commit Feedback

on:
  # Trigger on pushes to feature branches (for copilot commits and direct pushes)
  push:
    branches-ignore:
      - main
      - develop
      - gh-pages
      - deploy
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
  # Additional trigger for pull request events to ensure comprehensive coverage
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]  # Only for PRs targeting main branch
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'

permissions:
  contents: read
  actions: read
  pull-requests: write
  deployments: write

jobs:
  check-deployment-status:
    runs-on: ubuntu-latest
    
    steps:
      - name: Get commit and PR information
        id: pr_info
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = context.ref.replace('refs/heads/', '');
            const commitSha = context.sha;
            
            // Find PR for this branch
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${branchName}`
            });
            
            const prNumber = prs.length > 0 ? prs[0].number : null;
            
            console.log(`Branch: ${branchName}, PR: ${prNumber}, Commit: ${commitSha}`);
            
            core.setOutput('pr_number', prNumber);
            core.setOutput('branch_name', branchName);
            core.setOutput('commit_sha', commitSha);
            
            return { prNumber, branchName, commitSha };

      - name: Comment on PR with workflow access and controls
        if: steps.pr_info.outputs.pr_number
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ steps.pr_info.outputs.branch_name }}';
            const prNumber = '${{ steps.pr_info.outputs.pr_number }}';
            const commitSha = '${{ steps.pr_info.outputs.commit_sha }}';
            const timestampUTC = new Date().toISOString().replace('T', ' ').substring(0, 19) + ' UTC';
            
            // Create direct workflow dispatch URLs with pre-filled parameters
            const branchDeploymentUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/workflows/branch-deployment.yml`;
            const landingPageDeploymentUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/workflows/landing-page-deployment.yml`;
            const workflowsListUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions`;
            
            // Create improved deployment comment with requested structure
            const previewUrl = `https://litlfred.github.io/sgex/${branchName.replace(/\//g, '-')}/`;
            
            // Get commit message for recent change summary
            const commitInfo = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: commitSha
            });
            const commitMessage = commitInfo.data.commit.message.split('\n')[0]; // First line only
            
            const commentBody = `## üöÄ Deployment Status: Not Deployed
            
            **üîó Quick Actions:**
            - üåø [Deploy ${branchName} for preview](${branchDeploymentUrl}) üìã
            - üìÑ [View build logs](${workflowsListUrl})
            
            ---
            
            ## üìù Recent Change Summary
            **Latest commit:** \`${commitSha.substring(0, 7)}\` - ${commitMessage}
            **Updated:** ${timestampUTC}
            
            ---
            
            ## üìä Overall Progress
            **Branch:** \`${branchName}\`
            **Preview URL (after deployment):** <a href="${previewUrl}" target="_blank">${previewUrl}</a> üìã
            
            **Available Actions:**
            - üè† [Deploy main to landing page](${landingPageDeploymentUrl})
            
            ---
            
            üí° *Click deploy links above, then "Run workflow" to deploy. Branch name will be pre-filled.*`;
            
            // Find existing workflow access comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const existingWorkflowComment = comments.find(comment => 
              comment.body.includes('Deployment Status:') ||
              comment.body.includes('Deployment Available') ||
              comment.body.includes('Deployment Workflows Available') ||
              comment.body.includes('Manual deployment workflows are now accessible')
            );
            
            if (existingWorkflowComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingWorkflowComment.id,
                body: commentBody
              });
              console.log(`‚úÖ Updated existing workflow access comment on PR #${prNumber}`);
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log(`‚úÖ Created new workflow access comment on PR #${prNumber}`);
            }

      - name: Wait for deployment workflow to start
        if: steps.pr_info.outputs.pr_number
        run: |
          echo "Waiting 30 seconds for deployment workflow to start..."
          sleep 30

      - name: Check deployment workflow status
        id: workflow_status
        if: steps.pr_info.outputs.pr_number
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ steps.pr_info.outputs.branch_name }}';
            const commitSha = '${{ steps.pr_info.outputs.commit_sha }}';
            
            // Find recent workflow runs for the branch deployment workflow
            const { data: workflowRuns } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'branch-deployment.yml',
              head_sha: commitSha,
              per_page: 5
            });
            
            console.log(`Found ${workflowRuns.total_count} workflow runs for commit ${commitSha}`);
            
            let latestRun = null;
            let needsApproval = false;
            let isCompleted = false;
            let deploymentStatus = 'unknown';
            
            if (workflowRuns.total_count > 0) {
              latestRun = workflowRuns.workflow_runs[0];
              
              console.log(`Latest run: ${latestRun.id}, Status: ${latestRun.status}, Conclusion: ${latestRun.conclusion}`);
              
              // Check if workflow needs approval
              if (latestRun.status === 'queued' && latestRun.conclusion === 'action_required') {
                needsApproval = true;
                deploymentStatus = 'approval_required';
              } else if (latestRun.status === 'completed') {
                isCompleted = true;
                if (latestRun.conclusion === 'success') {
                  deploymentStatus = 'success';
                } else if (latestRun.conclusion === 'failure') {
                  deploymentStatus = 'failure';
                } else {
                  deploymentStatus = latestRun.conclusion;
                }
              } else if (latestRun.status === 'in_progress') {
                deploymentStatus = 'running';
              }
            }
            
            core.setOutput('needs_approval', needsApproval.toString());
            core.setOutput('is_completed', isCompleted.toString());
            core.setOutput('deployment_status', deploymentStatus);
            core.setOutput('workflow_run_id', latestRun ? latestRun.id : '');
            core.setOutput('workflow_run_url', latestRun ? latestRun.html_url : '');
            
            return {
              needsApproval,
              isCompleted,
              deploymentStatus,
              workflowRunId: latestRun ? latestRun.id : null,
              workflowRunUrl: latestRun ? latestRun.html_url : null
            };

      - name: Comment on PR for build in progress
        if: steps.pr_info.outputs.pr_number && steps.workflow_status.outputs.deployment_status == 'running'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.pr_info.outputs.pr_number }}';
            const branchName = '${{ steps.pr_info.outputs.branch_name }}';
            const commitSha = '${{ steps.pr_info.outputs.commit_sha }}';
            const workflowRunId = '${{ steps.workflow_status.outputs.workflow_run_id }}';
            const workflowRunUrl = '${{ steps.workflow_status.outputs.workflow_run_url }}';
            const startedAt = new Date().toISOString().replace('T', ' ').substring(0, 19) + ' UTC';
            
            // Get commit message for recent change summary
            const commitInfo = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: commitSha
            });
            const commitMessage = commitInfo.data.commit.message.split('\n')[0]; // First line only
            
            const commentBody = `## üöÄ Deployment Status: Building üîµ
            
            **üîó Quick Actions:**
            - üìä [Watch build progress](${workflowRunUrl})
            - üîÑ [Restart build](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/workflows/branch-deployment.yml)
            
            ---
            
            ## üìù Recent Change Summary
            **Latest commit:** \`${commitSha.substring(0, 7)}\` - ${commitMessage}
            **Build started:** ${startedAt}
            
            ---
            
            ## üìä Overall Progress
            **Branch:** \`${branchName}\`
            **Status:** üîµ Building in progress
            **Preview URL (after completion):** https://litlfred.github.io/sgex/${branchName.replace(/\//g, '-')}/
            
            ---
            
            üí° *Build started for commit \`${commitSha.substring(0, 7)}\`. Will update when complete.*`;
            
            // Find existing deployment-related comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('Deployment Status:') ||
              comment.body.includes('Deployment Approval Required') || 
              comment.body.includes('Branch Preview Ready!') ||
              comment.body.includes('Branch Preview Failed!') ||
              comment.body.includes('Build In Progress') ||
              comment.body.includes('Deployment Available')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
              console.log(`‚úÖ Updated existing comment on PR #${prNumber} with build progress`);
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log(`‚úÖ Created new build progress comment on PR #${prNumber}`);
            }

      - name: Comment on PR for approval needed
        if: steps.pr_info.outputs.pr_number && steps.workflow_status.outputs.needs_approval == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.pr_info.outputs.pr_number }}';
            const branchName = '${{ steps.pr_info.outputs.branch_name }}';
            const commitSha = '${{ steps.pr_info.outputs.commit_sha }}';
            const workflowRunId = '${{ steps.workflow_status.outputs.workflow_run_id }}';
            const workflowRunUrl = '${{ steps.workflow_status.outputs.workflow_run_url }}';
            const createdAt = new Date().toISOString().replace('T', ' ').substring(0, 19) + ' UTC';
            
            // Get commit message for recent change summary
            const commitInfo = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: commitSha
            });
            const commitMessage = commitInfo.data.commit.message.split('\n')[0]; // First line only
            
            // Create direct workflow dispatch URL with pre-filled branch name
            const approvalUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${workflowRunId}`;
            
            const commentBody = `## üöÄ Deployment Status: Awaiting Approval üü°
            
            **üîó Quick Actions:**
            - ‚úÖ [Approve & Run](${approvalUrl})
            - üìÑ [View build logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${workflowRunId})
            
            ---
            
            ## üìù Recent Change Summary
            **Latest commit:** \`${commitSha.substring(0, 7)}\` - ${commitMessage}
            **Approval needed since:** ${createdAt}
            
            ---
            
            ## üìä Overall Progress
            **Branch:** \`${branchName}\`
            **Status:** üü° Awaiting manual approval to deploy
            **Preview URL (after approval):** https://litlfred.github.io/sgex/${branchName.replace(/\//g, '-')}/
            
            ---
            
            üí° *Click "Approve & Run" above, then "Approve and run" on the workflow page.*`;
            
            // Find existing approval/deployment comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('Deployment Status:') ||
              comment.body.includes('Deployment Approval Required') || 
              comment.body.includes('Branch Preview Ready!') ||
              comment.body.includes('Branch Preview Failed!') ||
              comment.body.includes('Build In Progress') ||
              comment.body.includes('Deployment Available')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
              console.log(`‚úÖ Updated existing comment on PR #${prNumber} with approval request`);
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log(`‚úÖ Created new approval comment on PR #${prNumber}`);
            }

      - name: Comment on PR for deployment status update
        if: steps.pr_info.outputs.pr_number && steps.workflow_status.outputs.is_completed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.pr_info.outputs.pr_number }}';
            const branchName = '${{ steps.pr_info.outputs.branch_name }}';
            const commitSha = '${{ steps.pr_info.outputs.commit_sha }}';
            const deploymentStatus = '${{ steps.workflow_status.outputs.deployment_status }}';
            const workflowRunUrl = '${{ steps.workflow_status.outputs.workflow_run_url }}';
            const completedAt = new Date().toISOString().replace('T', ' ').substring(0, 19) + ' UTC';
            
            // Get commit message for recent change summary
            const commitInfo = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: commitSha
            });
            const commitMessage = commitInfo.data.commit.message.split('\n')[0]; // First line only
            
            let statusIcon, statusText, statusColor;
            
            if (deploymentStatus === 'success') {
              statusIcon = '‚úÖ';
              statusText = 'üü¢ Successfully Deployed';
              statusColor = 'success';
            } else if (deploymentStatus === 'failure') {
              statusIcon = '‚ùå';
              statusText = 'üî¥ Deployment Failed';
              statusColor = 'failure';
            } else {
              statusIcon = '‚ö†Ô∏è';
              statusText = `üü° ${deploymentStatus}`;
              statusColor = 'warning';
            }
            
            // Calculate deployment URLs
            const safeBranchName = branchName.replace(/[^a-zA-Z0-9]/g, '-');
            const branchTargetName = `sgex-preview-${safeBranchName}`;
            const mainTargetName = 'sgex-main-app';
            const branchUrl = `https://litlfred.github.io/sgex/${branchName === 'main' ? 'main' : safeBranchName}/`;
            const mainAppUrl = 'https://litlfred.github.io/sgex/main/';
            
            let commentBody;
            
            if (deploymentStatus === 'success') {
              commentBody = `## üöÄ Deployment Status: Successfully Deployed ‚úÖ
              
              **üîó Quick Actions:**
              - üåê <a href="${branchUrl}" target="_blank">Open Branch Preview</a> üìã
              - üè† <a href="${mainAppUrl}" target="_blank">Main App</a>
              - üîÑ [Redeploy branch](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/workflows/branch-deployment.yml)
              
              ---
              
              ## üìù Recent Change Summary
              **Latest commit:** \`${commitSha.substring(0, 7)}\` - ${commitMessage}
              **Deployed at:** ${completedAt}
              
              ---
              
              ## üìä Overall Progress
              **Branch:** \`${branchName}\`
              **Status:** üü¢ Live and accessible
              **Preview URL:** <a href="${branchUrl}" target="_blank">${branchUrl}</a> üìã
              
              **Actions:**
              - üìÑ [Build logs](${workflowRunUrl})
              
              ---
              üí° *Branch preview deployed successfully and ready for testing.*`;
            } else {
              commentBody = `## üöÄ Deployment Status: Failed ‚ùå
              
              **üîó Quick Actions:**
              - üìÑ [Check error logs](${workflowRunUrl})
              - üîÑ [Retry deployment](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/workflows/branch-deployment.yml)
              
              ---
              
              ## üìù Recent Change Summary
              **Latest commit:** \`${commitSha.substring(0, 7)}\` - ${commitMessage}
              **Failed at:** ${completedAt}
              
              ---
              
              ## üìä Overall Progress
              **Branch:** \`${branchName}\`
              **Status:** üî¥ Deployment failed - needs attention
              **Target URL:** https://litlfred.github.io/sgex/${branchName.replace(/\//g, '-')}/
              
              ---
              ‚ùó *Check build logs and fix issues before retrying deployment.*`;
            }
            
            // Find existing deployment comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('Deployment Status:') ||
              comment.body.includes('Deployment Approval Required') ||
              comment.body.includes('Branch Preview Ready!') || 
              comment.body.includes('Branch Preview Failed!') ||
              comment.body.includes('Build In Progress') ||
              comment.body.includes('Deployment Available')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
              console.log(`‚úÖ Updated existing comment on PR #${prNumber} with deployment status`);
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log(`‚úÖ Created new deployment status comment on PR #${prNumber}`);
            }

      - name: Update deployment status for PR
        if: steps.pr_info.outputs.pr_number
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ steps.pr_info.outputs.branch_name }}';
            const prNumber = '${{ steps.pr_info.outputs.pr_number }}';
            const commitSha = '${{ steps.pr_info.outputs.commit_sha }}';
            const deploymentStatus = '${{ steps.workflow_status.outputs.deployment_status }}';
            
            // Calculate deployment URL
            const safeBranchName = branchName.replace(/[^a-zA-Z0-9]/g, '-');
            const deploymentUrl = `https://litlfred.github.io/sgex/${branchName === 'main' ? 'main' : safeBranchName}/`;
            
            console.log(`Creating deployment status for branch: ${branchName}, status: ${deploymentStatus}`);
            
            try {
              // Create or update deployment for this branch
              const { data: deployment } = await github.rest.repos.createDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: commitSha,
                environment: `branch-preview-${safeBranchName}`,
                description: `Branch preview deployment for ${branchName}`,
                auto_merge: false,
                required_contexts: []
              });
              
              console.log(`Created deployment ${deployment.id} for ${branchName}`);
              
              // Set deployment status based on workflow result
              let state = 'pending';
              let description = 'Deployment in progress';
              
              if (deploymentStatus === 'success') {
                state = 'success';
                description = 'Branch preview deployed successfully';
              } else if (deploymentStatus === 'failure') {
                state = 'failure';
                description = 'Branch preview deployment failed';
              } else if (deploymentStatus === 'running') {
                state = 'in_progress';
                description = 'Branch preview deployment in progress';
              }
              
              // Update deployment status
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id,
                state: state,
                description: description,
                environment_url: deploymentStatus === 'success' ? deploymentUrl : undefined,
                log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }}`
              });
              
              console.log(`Updated deployment status to: ${state}`);
              
            } catch (error) {
              console.error('Error creating/updating deployment:', error);
              // Don't fail the workflow if deployment status update fails
            }