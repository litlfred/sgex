name: Deploy Landing Page

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/qa-report.html'
      - 'public/docs/qa-report.html'
      - 'docs/github-issues-analysis.md'
  workflow_dispatch:
    inputs:
      source_branch:
        description: 'Branch to use for build scripts (defaults to deploy branch)'
        required: false
        default: 'deploy'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "landing-page-deploy"
  cancel-in-progress: false

jobs:
  deploy-landing-page:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout deploy branch (or fallback to main)
        uses: actions/checkout@v4
        with:
          ref: main  # Use main branch since deploy branch doesn't exist yet
          fetch-depth: 0  # Fetch full history for gh-pages branch

      - name: Configure git user
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci

      - name: Build self-contained landing page
        shell: bash
        run: |
          set -e
          
          echo "Building self-contained landing page..."
          
          # Check if we have landing page assets from deploy branch
          if [[ -f "public/branch-listing.html" ]]; then
            echo "Using landing page assets from deploy branch..."
            npm run build:landing
          else
            echo "Deploy branch assets not available, creating basic landing page..."
            
            # Create a minimal landing page build
            mkdir -p build
            
            cat > build/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SGEX Workbench</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .container { max-width: 800px; margin: 0 auto; }
        .section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ SGEX Workbench</h1>
        <p>WHO SMART Guidelines Exchange</p>
        
        <div class="section">
            <h2>üåü Main Application</h2>
            <p><a href="./main/">Launch SGEX Workbench (Main Branch)</a></p>
        </div>
        
        <div class="section">
            <h2>üìù Branch & PR Previews</h2>
            <p>Branch and pull request previews are automatically deployed to subdirectories.</p>
            <p>Each branch is accessible at <code>/branch-name/</code></p>
        </div>
        
        <div class="section">
            <h2>‚ÑπÔ∏è About</h2>
            <p>SGEX is an experimental collaborative project developing a workbench of tools to make it easier and faster to develop high fidelity SMART Guidelines Digital Adaptation Kits (DAKs).</p>
        </div>
    </div>
</body>
</html>
EOF
          fi
          
          # Verify index.html exists
          if [[ ! -f "build/index.html" ]]; then
            echo "ERROR: index.html not found in build output"
            exit 1
          fi
          
          echo "‚úÖ Landing page build completed"

      - name: Deploy to gh-pages root (preserving existing branches)
        shell: bash
        run: |
          set -e
          
          # Save the landing page build
          echo "Preserving landing page build..."
          mkdir -p /tmp/landing-build
          cp -a build/. /tmp/landing-build/
          
          # Checkout gh-pages branch
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            echo "Checking out existing gh-pages branch"
            git stash -u -m "Stash before gh-pages checkout" || echo "Nothing to stash"
            git clean -fd -e node_modules
            git checkout gh-pages
          else
            echo "Creating new gh-pages branch"
            git checkout --orphan gh-pages
            git rm -rf .
            echo "# GitHub Pages" > README.md
            git add README.md
            git commit -m "Initial gh-pages branch"
            git push origin gh-pages
          fi
          
          # CRITICAL: Only remove files, NEVER remove directories (to preserve branch builds)
          echo "Removing only root-level files (preserving all branch directories)..."
          
          # List what directories exist for safety verification
          echo "Existing directories before cleanup:"
          ls -la */ 2>/dev/null || echo "No directories found"
          
          # Remove only specific files that could conflict with landing page
          rm -f index.html
          rm -f manifest.json  
          rm -f asset-manifest.json
          rm -f service-worker.js
          rm -f robots.txt
          rm -f favicon.ico
          rm -f logo*.png
          rm -f README.md
          rm -f package.json
          rm -f package-lock.json
          
          # Remove static directory only if it exists at root (not in branch subdirs)
          if [[ -d "static" ]]; then
            echo "Removing root static directory..."
            rm -rf static
          fi
          
          # Deploy landing page to root (this will not affect any subdirectories)
          echo "Deploying landing page to root..."
          cp -a /tmp/landing-build/. .
          
          # Verify existing directories are still there
          echo "Directories after deployment:"
          ls -la */ 2>/dev/null || echo "No directories found"
          
          # Clean up temporary build
          rm -rf /tmp/landing-build
          
          echo "‚úÖ Landing page deployed to gh-pages root while preserving all branch directories"

      - name: Commit and push changes
        shell: bash
        run: |
          set -e
          
          # Verify we're on gh-pages branch
          current_branch=$(git branch --show-current)
          if [[ "$current_branch" != "gh-pages" ]]; then
            echo "ERROR: Not on gh-pages branch! Current branch: $current_branch"
            exit 1
          fi
          
          # Stage all changes
          git add -A
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            echo "Committing landing page deployment..."
            
            # Determine deployment type for commit message
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              deployment_type="manual"
              trigger_info="Triggered from deploy branch"
            else
              deployment_type="automatic"
              trigger_info="Auto-triggered by push to main"
            fi
            
            git commit -m "üè† Deploy landing page (${deployment_type})

            - Updated landing page with self-contained assets from deploy branch
            - ${trigger_info}
            - Deployed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            - Commit: ${{ github.sha }}"
            
            echo "Pushing to gh-pages..."
            git pull origin gh-pages --rebase || echo "Pull failed, attempting to push anyway..."
            git push origin gh-pages
            
            echo "‚úÖ Landing page deployment completed successfully"
          fi

      - name: Output deployment info
        shell: bash
        run: |
          landing_url="https://litlfred.github.io/sgex/"
          
          # Determine deployment type for output message
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            deployment_type="Manual"
            trigger_info="Triggered from deploy branch"
          else
            deployment_type="Automatic"
            trigger_info="Auto-triggered by push to main"
          fi
          
          echo "üè† Landing Page Deployment Summary:"
          echo "- Landing Page URL: $landing_url"
          echo "- Deployment Type: $deployment_type"
          echo "- $trigger_info"
          echo "- Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "- Source Branch: ${{ github.event.inputs.source_branch || 'deploy' }}"
          echo "- Commit: ${{ github.sha }}"