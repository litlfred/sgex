name: Deploy Landing Page

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/qa-report.html'
      - 'public/docs/qa-report.html'
      - 'docs/github-issues-analysis.md'
  workflow_dispatch:
    inputs:
      source_branch:
        description: 'Branch to use for build scripts (defaults to current branch)'
        required: false
        default: ''

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "landing-page-deploy"
  cancel-in-progress: false

jobs:
  deploy-landing-page:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for gh-pages branch

      - name: Configure git user
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci

      - name: Build self-contained landing page
        shell: bash
        run: |
          set -e
          
          echo "Building self-contained landing page..."
          # Use current branch for build scripts unless specified
          source_branch="${{ github.event.inputs.source_branch }}"
          if [[ -z "$source_branch" ]]; then
            source_branch="${{ github.ref_name }}"
          fi
          
          echo "Using build scripts from branch: $source_branch"
          
          # Build the landing page with self-contained assets
          node scripts/build-multi-branch.js landing
          
          # Verify index.html exists
          if [[ ! -f "build/index.html" ]]; then
            echo "ERROR: index.html not found in build output"
            exit 1
          fi
          
          echo "‚úÖ Landing page build completed"

      - name: Deploy to gh-pages root
        shell: bash
        run: |
          set -e
          
          # Save the landing page build
          echo "Preserving landing page build..."
          mkdir -p /tmp/landing-build
          cp -a build/. /tmp/landing-build/
          
          # Checkout gh-pages branch
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            echo "Checking out existing gh-pages branch"
            git stash -u -m "Stash before gh-pages checkout" || echo "Nothing to stash"
            git clean -fd -e node_modules
            git checkout gh-pages
          else
            echo "Creating new gh-pages branch"
            git checkout --orphan gh-pages
            git rm -rf .
            echo "# GitHub Pages" > README.md
            git add README.md
            git commit -m "Initial gh-pages branch"
            git push origin gh-pages
          fi
          
          # Preserve all existing branch directories (exclude problematic cache directories)
          echo "Preserving existing branch directories..."
          if ls -d */ > /dev/null 2>&1; then
            mkdir -p /tmp/branch-backup
            for dir in */; do
              if [[ "$dir" != "node_modules/" && "$dir" != ".cache/" ]]; then
                echo "Backing up directory: $dir"
                # Exclude cache subdirectories when copying
                rsync -av --exclude='*/node_modules/.cache' --exclude='*/.cache' "$dir" /tmp/branch-backup/
              fi
            done
          fi
          
          # Clear root (except .git and branch directories)
          echo "Clearing root directory for landing page deployment..."
          find . -maxdepth 1 -not -name '.' -not -name '.git' -not -name '.github' -exec rm -rf {} +
          
          # Also clean up any cache directories that might exist
          echo "Cleaning up cache directories..."
          find . -name "node_modules/.cache" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name ".cache" -type d -exec rm -rf {} + 2>/dev/null || true
          
          # Deploy landing page to root
          echo "Deploying landing page to root..."
          cp -a /tmp/landing-build/. .
          
          # Restore all branch directories
          if [[ -d /tmp/branch-backup ]]; then
            echo "Restoring branch directories..."
            cp -r /tmp/branch-backup/* .
            rm -rf /tmp/branch-backup
          fi
          
          # Clean up temporary build
          rm -rf /tmp/landing-build
          
          echo "‚úÖ Landing page deployed to gh-pages root"

      - name: Commit and push changes
        shell: bash
        run: |
          set -e
          
          # Verify we're on gh-pages branch
          current_branch=$(git branch --show-current)
          if [[ "$current_branch" != "gh-pages" ]]; then
            echo "ERROR: Not on gh-pages branch! Current branch: $current_branch"
            exit 1
          fi
          
          # Stage all changes
          git add -A
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            echo "Committing landing page deployment..."
            
            # Determine deployment type for commit message
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              deployment_type="manual"
              trigger_info="Triggered from branch: ${{ github.ref_name }}"
            else
              deployment_type="automatic"
              trigger_info="Auto-triggered by push to main"
            fi
            
            git commit -m "üè† Deploy landing page (${deployment_type})

            - Updated landing page with self-contained assets
            - ${trigger_info}
            - Deployed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            - Commit: ${{ github.sha }}"
            
            echo "Pushing to gh-pages..."
            git pull origin gh-pages --rebase || echo "Pull failed, attempting to push anyway..."
            git push origin gh-pages
            
            echo "‚úÖ Landing page deployment completed successfully"
          fi

      - name: Output deployment info
        shell: bash
        run: |
          landing_url="https://litlfred.github.io/sgex/"
          
          # Determine deployment type for output message
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            deployment_type="Manual"
            trigger_info="Triggered from branch: ${{ github.ref_name }}"
          else
            deployment_type="Automatic"
            trigger_info="Auto-triggered by push to main"
          fi
          
          echo "üè† Landing Page Deployment Summary:"
          echo "- Landing Page URL: $landing_url"
          echo "- Deployment Type: $deployment_type"
          echo "- $trigger_info"
          echo "- Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "- Commit: ${{ github.sha }}"