name: Branch Preview Deployment

on:
  push:
    branches-ignore:
      - 'gh-pages'  # Never run on gh-pages branch
    paths-ignore:
      - 'docs/qa-report.html'
      - 'public/docs/qa-report.html'
      - 'docs/github-issues-analysis.md'

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages-${{ github.ref_name }}"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.deployment_info.outputs.branch_name }}
      target_directory: ${{ steps.deployment_info.outputs.target_directory }}
      branch_url: ${{ steps.deployment_info.outputs.branch_url }}
      landing_url: ${{ steps.deployment_info.outputs.landing_url }}
      main_url: ${{ steps.deployment_info.outputs.main_url }}
      commit_sha: ${{ steps.deployment_info.outputs.commit_sha }}
      deployment_status: ${{ steps.deployment_info.outputs.deployment_status }}
      deployment_json: ${{ steps.deployment_info.outputs.deployment_json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for gh-pages branch

      - name: Configure git user
        shell: bash
        run: |
          # Configure git user early to avoid "empty ident name" errors
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci

      - name: Generate QA Report
        run: node scripts/generate-qa-report.js

      - name: Generate Issues Analysis
        run: node scripts/analyze-github-issues.js

      - name: Build branch-specific React app
        run: |
          # Set the correct base path for the branch deployment
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            export BASE_PATH="/main/"
          else
            safe_branch_name=$(echo "${{ github.ref_name }}" | tr '/' '-')
            export BASE_PATH="/${safe_branch_name}/"
          fi
          echo "Building with BASE_PATH: $BASE_PATH"
          node scripts/build-multi-branch.js branch
        env:
          CI: false
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Validate branch directory safety
        id: validate_branch
        shell: bash
        run: |
          set -e
          
          # Get and sanitize branch name
          branch="${{ github.ref_name }}"
          echo "Processing branch: $branch"
          
          # Validate branch name (no dangerous characters)
          if [[ "$branch" =~ [^a-zA-Z0-9._/-] ]]; then
            echo "ERROR: Branch name contains unsafe characters: $branch"
            exit 1
          fi
          
          # Replace slashes with dashes for safe directory names
          safe_branch_name=$(echo "$branch" | tr '/' '-')
          echo "Safe branch name: $safe_branch_name"
          
          # Use simplified path structure: main goes to /main/, others to /safe-branch-name/
          if [[ "$branch" == "main" ]]; then
            target_subdir="main"
          else
            target_subdir="$safe_branch_name"
          fi
          
          # Ensure we're in the repository root
          repo_root="$(pwd)"
          echo "Repository root: $repo_root"
          
          # Calculate target directory path using simplified structure
          target_dir="$repo_root/$target_subdir"
          
          echo "Target directory: $target_dir"
          
          # Critical safety validation
          if [[ "$target_dir" != "$repo_root"* ]]; then
            echo "ERROR: Target directory is outside repository root"
            echo "Repository root: $repo_root"
            echo "Target directory: $target_dir"
            exit 1
          fi
          
          if [[ ${#target_dir} -le ${#repo_root} ]]; then
            echo "ERROR: Target directory path is not longer than repository root"
            echo "Repository root length: ${#repo_root}"
            echo "Target directory length: ${#target_dir}"
            exit 1
          fi
          
          # Additional safety: ensure target is exactly one level deeper
          expected_path="$repo_root/$target_subdir"
          if [[ "$target_dir" != "$expected_path" ]]; then
            echo "ERROR: Target directory does not match expected path"
            echo "Expected: $expected_path"
            echo "Target: $target_dir"
            exit 1
          fi
          
          # Don't create the directory here - we'll create it on the gh-pages branch
          # Just validate the path structure for safety
          resolved_target="$target_dir"
          
          # Validate the target would be safe when resolved
          if [[ "$resolved_target" != "$repo_root"* ]] || [[ ${#resolved_target} -le ${#repo_root} ]]; then
            echo "ERROR: Target validation failed"
            echo "Repository root: $repo_root"
            echo "Target directory: $resolved_target"
            exit 1
          fi
          
          echo "✅ Branch directory validation passed"
          echo "branch_dir=$resolved_target" >> "$GITHUB_OUTPUT"
          echo "branch_name=$branch" >> "$GITHUB_OUTPUT"
          echo "safe_branch_name=$safe_branch_name" >> "$GITHUB_OUTPUT"
          echo "target_subdir=$target_subdir" >> "$GITHUB_OUTPUT"

      - name: Checkout gh-pages branch
        shell: bash
        run: |
          set -e
          
          # Check if gh-pages branch exists
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            echo "Checking out existing gh-pages branch"
            # Clean React build artifacts that could conflict with branch switching
            if [[ -f "asset-manifest.json" ]]; then
              echo "Removing React build artifacts before checkout"
              rm -f asset-manifest.json index.html static/js/*.js static/css/*.css 2>/dev/null || true
            fi
            # Stash any uncommitted changes including untracked files before checkout
            git stash -u -m "Stash before gh-pages checkout" || echo "Nothing to stash"
            # Handle potential conflicts by cleaning untracked files that would be overwritten
            # Preserve node_modules to avoid reinstalling dependencies
            git clean -fd -e node_modules
            git checkout gh-pages
          else
            echo "Creating new gh-pages branch"
            git checkout --orphan gh-pages
            git rm -rf .
            echo "# GitHub Pages" > README.md
            git add README.md
            git commit -m "Initial gh-pages branch"
            git push origin gh-pages
          fi

      - name: Clean old deployment for this branch (with validation)
        shell: bash
        run: |
          set -e
          
          branch_dir="${{ steps.validate_branch.outputs.branch_dir }}"
          repo_root="$(pwd)"
          
          echo "Cleaning old deployment"
          echo "Branch directory: $branch_dir"
          echo "Repository root: $repo_root"
          
          # Validate before any destructive operations
          if [[ "$branch_dir" != "$repo_root"* ]] || [[ ${#branch_dir} -le ${#repo_root} ]]; then
            echo "ERROR: Safety validation failed during cleanup"
            exit 1
          fi
          
          # Use git to safely remove the branch directory
          if [[ -d "$branch_dir" ]]; then
            echo "Removing existing deployment: $branch_dir"
            git rm -rf "$branch_dir" || echo "Directory didn't exist in git"
          else
            echo "No existing deployment to clean"
          fi

      - name: Copy new build to branch directory (with validation)
        shell: bash
        run: |
          set -e
          
          branch_dir="${{ steps.validate_branch.outputs.branch_dir }}"
          repo_root="$(pwd)"
          
          echo "Copying new build to branch directory"
          echo "Branch directory: $branch_dir"
          echo "Repository root: $repo_root"
          
          # Validation before copy
          if [[ "$branch_dir" != "$repo_root"* ]] || [[ ${#branch_dir} -le ${#repo_root} ]]; then
            echo "ERROR: Safety validation failed during copy"
            exit 1
          fi
          
          # Create branch directory and copy build
          mkdir -p "$branch_dir"
          cp -a build/. "$branch_dir/"
          
          # Verify index.html exists
          if [[ ! -f "$branch_dir/index.html" ]]; then
            echo "ERROR: index.html not found in build output"
            exit 1
          fi
          
          echo "✅ Build copied successfully to $branch_dir"

      # Note: Landing page deployment is now handled by a separate workflow
      # This workflow focuses solely on branch-specific deployments

      - name: Stage and commit changes (with validation)
        shell: bash
        run: |
          set -e
          
          repo_root="$(pwd)"
          
          # Critical safety check: ensure we're on gh-pages branch
          current_branch=$(git branch --show-current)
          echo "Current branch: $current_branch"
          
          if [[ "$current_branch" != "gh-pages" ]]; then
            echo "ERROR: Not on gh-pages branch! Current branch: $current_branch"
            echo "This is a critical safety failure - aborting deployment"
            exit 1
          fi
          
          # Additional validation: ensure we're not on a source branch
          if [[ "$current_branch" == "${{ github.ref_name }}" ]]; then
            echo "ERROR: Still on source branch ${{ github.ref_name }}!"
            echo "This should not happen - branch switching failed"
            exit 1
          fi
          
          # Verify we have the expected gh-pages branch structure
          if [[ ! -f "README.md" ]] || ! grep -q "GitHub Pages" README.md 2>/dev/null; then
            echo "WARNING: Expected gh-pages branch structure not found"
            echo "This might indicate we're on the wrong branch or the branch is corrupted"
          fi
          
          echo "✅ Branch validation passed - proceeding with staging changes"
          echo "Staging changes for commit"
          
          # Clean up any build directory and React build artifacts that shouldn't be in gh-pages root
          if [[ -d "build" ]]; then
            echo "Removing build directory from gh-pages..."
            rm -rf build
          fi
          
          # Remove any React build artifacts that might have been accidentally staged
          for artifact in asset-manifest.json manifest.json service-worker.js; do
            if [[ -f "$artifact" ]]; then
              echo "Removing React build artifact: $artifact"
              rm -f "$artifact"
            fi
          done
          
          # Add all changes
          git add -A
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            echo "Committing changes..."
            git commit -m "🚀 Deploy ${{ github.ref_name }} branch preview

            - Updated branch preview for ${{ github.ref_name }}
            - Deployed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            - Commit: ${{ github.sha }}"
            
            # Final safety check before push
            push_branch=$(git branch --show-current)
            if [[ "$push_branch" != "gh-pages" ]]; then
              echo "ERROR: Branch changed during commit process! Now on: $push_branch"
              echo "Aborting push for safety"
              exit 1
            fi
            
            echo "Pushing to gh-pages..."
            # Fetch latest remote changes first to avoid conflicts
            git fetch origin gh-pages
            
            # Try to merge remote changes if they exist
            if git rev-parse --verify origin/gh-pages >/dev/null 2>&1; then
              echo "Checking for remote changes on gh-pages..."
              # Check if we need to merge remote changes
              LOCAL=$(git rev-parse HEAD)
              REMOTE=$(git rev-parse origin/gh-pages)
              
              if [ "$LOCAL" != "$REMOTE" ]; then
                echo "Remote changes detected, attempting to merge..."
                # Try to merge remote changes
                if git merge origin/gh-pages --no-edit; then
                  echo "Successfully merged remote changes"
                else
                  echo "Merge failed, using force push with lease for safety"
                  git push --force-with-lease origin gh-pages
                  exit 0
                fi
              fi
            fi
            
            # Push normally if no conflicts or after successful merge
            git push origin gh-pages
            
            echo "✅ Deployment completed successfully"
          fi

      - name: Output deployment info
        id: deployment_info
        shell: bash
        run: |
          target_subdir="${{ steps.validate_branch.outputs.target_subdir }}"
          branch_name="${{ steps.validate_branch.outputs.branch_name }}"
          commit_sha="${{ github.sha }}"
          branch_url="https://litlfred.github.io/sgex/$target_subdir/"
          main_url="https://litlfred.github.io/sgex/main/"
          
          # Human-readable output (preserving existing format)
          echo "🎉 Branch Deployment Summary:"
          echo "- Branch: $branch_name"
          echo "- Target Directory: $target_subdir"
          echo "- Branch Preview: $branch_url"
          echo "- Main App: $main_url"
          echo "- Commit: $commit_sha"
          echo ""
          echo "ℹ️  Note: Landing page deployment is handled separately"
          echo "   Use the 'Deploy Landing Page' workflow to update the root page"
          
          # GitHub Actions outputs for downstream tools
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          echo "target_directory=$target_subdir" >> $GITHUB_OUTPUT
          echo "branch_url=$branch_url" >> $GITHUB_OUTPUT
          echo "main_url=$main_url" >> $GITHUB_OUTPUT
          echo "commit_sha=$commit_sha" >> $GITHUB_OUTPUT
          echo "deployment_status=success" >> $GITHUB_OUTPUT
          
          # JSON output for easy parsing
          deployment_json=$(cat <<EOF
          {
            "branch_name": "$branch_name",
            "target_directory": "$target_subdir",
            "branch_url": "$branch_url",
            "main_url": "$main_url",
            "commit_sha": "$commit_sha",
            "deployment_status": "success",
            "deployed_at": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          }
          EOF
          )
          echo "deployment_json<<EOF" >> $GITHUB_OUTPUT
          echo "$deployment_json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo ""
          echo "📋 Deployment info for downstream tools:"
          echo "$deployment_json"

      - name: Comment PR with deployment URLs
        if: always() && steps.deployment_info.outputs.deployment_status == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Get deployment info
              const branchName = '${{ steps.deployment_info.outputs.branch_name }}';
              const branchUrl = '${{ steps.deployment_info.outputs.branch_url }}';
              const mainUrl = '${{ steps.deployment_info.outputs.main_url }}';
              const commitSha = '${{ steps.deployment_info.outputs.commit_sha }}';
              const deployedAt = new Date().toISOString().replace('T', ' ').substring(0, 19) + ' UTC';
              
              // Find PR associated with this commit
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${branchName}`
              });
              
              let prNumber = null;
              
              // Check if this push is from a PR branch
              if (prs.length > 0) {
                prNumber = prs[0].number;
              } else {
                // Also check if this commit exists in any open PR
                const { data: allPrs } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open'
                });
                
                for (const pr of allPrs) {
                  try {
                    const { data: commits } = await github.rest.pulls.listCommits({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: pr.number
                    });
                    
                    if (commits.some(commit => commit.sha === commitSha)) {
                      prNumber = pr.number;
                      break;
                    }
                  } catch (error) {
                    console.log(`Error checking commits for PR ${pr.number}:`, error.message);
                  }
                }
              }
              
              if (!prNumber) {
                console.log('No associated pull request found for this deployment');
                return;
              }
              
              console.log(`Found associated PR #${prNumber} for branch ${branchName}`);
              
              // Create comment body with escaped template literals
              const commentBody = '## 🚀 Branch Preview Ready!\n\n' +
                '**Branch:** `' + branchName + '`\n' +
                '**Commit:** `' + commitSha.substring(0, 7) + '`\n' +
                '**Deployed:** ' + deployedAt + '\n\n' +
                '### 🌐 Preview URLs\n' +
                '- **Branch Preview:** [' + branchUrl + '](' + branchUrl + ')\n' +
                '- **Main App:** [' + mainUrl + '](' + mainUrl + ')\n\n' +
                '---\n' +
                'The branch preview is automatically updated with each push to this branch.\n\n' +
                '_Note: Landing page deployment is handled separately via manual workflow._';
              
              // Find existing deployment comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
              });
              
              const existingComment = comments.find(comment => 
                comment.body.includes('🚀 Branch Preview Ready!')
              );
              
              if (existingComment) {
                // Update existing comment
                console.log('Updating existing deployment comment');
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: commentBody
                });
              } else {
                // Create new comment
                console.log('Creating new deployment comment');
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: commentBody
                });
              }
              
              console.log(`✅ Successfully posted deployment URLs to PR #${prNumber}`);
              
            } catch (error) {
              console.error('Error posting deployment comment:', error);
              // Don't fail the workflow if commenting fails
            }
