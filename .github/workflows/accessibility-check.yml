name: Accessibility Check

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**/*.js'
      - 'src/**/*.jsx'
      - '.eslintrc.js'
      - 'package.json'
      - 'package-lock.json'

permissions:
  contents: read
  pull-requests: write

jobs:
  accessibility-lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run accessibility lint check
      id: a11y-lint
      run: |
        echo "Running accessibility lint check..."
        # Run only accessibility-related ESLint rules
        npm run lint:a11y > accessibility-report.txt 2>&1 || true
        
        # Count accessibility warnings
        WARNINGS=$(grep -c "jsx-a11y/" accessibility-report.txt || echo "0")
        echo "accessibility_warnings=$WARNINGS" >> $GITHUB_OUTPUT
        
        # Save report for PR comment
        echo "ACCESSIBILITY_REPORT<<EOF" >> $GITHUB_ENV
        cat accessibility-report.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        # Display results
        echo "Found $WARNINGS accessibility warnings"
        cat accessibility-report.txt

    - name: Comment PR with accessibility results
      uses: actions/github-script@v7
      with:
        script: |
          const warningCount = '${{ steps.a11y-lint.outputs.accessibility_warnings }}';
          const report = process.env.ACCESSIBILITY_REPORT;
          
          let body;
          if (warningCount === '0') {
            body = `## ✅ Accessibility Check Passed
            
            No accessibility warnings found! Great work on maintaining accessible code.
            
            This check validates compliance with [jsx-a11y](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y) rules to ensure your React components are accessible to users with disabilities.`;
          } else {
            body = `## ⚠️ Accessibility Check Results
            
            Found **${warningCount}** accessibility warnings that should be addressed:
            
            <details>
            <summary>View accessibility warnings</summary>
            
            \`\`\`
            ${report}
            \`\`\`
            
            </details>
            
            ### How to fix accessibility issues:
            
            1. **Run locally**: \`npm run lint:a11y\` to see all warnings
            2. **Auto-fix**: \`npm run lint:fix\` to automatically fix some issues
            3. **Documentation**: Check [docs/accessibility-linting.md](docs/accessibility-linting.md) for guidance
            
            ### Common fixes:
            - Add \`htmlFor\` attributes to \`<label>\` elements
            - Use semantic HTML elements instead of \`<div>\` for interactive components
            - Add keyboard event handlers (\`onKeyDown\`) for clickable elements
            - Include proper ARIA roles and labels for complex components
            
            **Note**: These are warnings, not errors, so the build will still succeed. However, addressing these issues improves the experience for users with disabilities.`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Upload accessibility report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-report
        path: accessibility-report.txt
        retention-days: 30

  # Optional: Fail the check if accessibility warnings exceed a threshold
  accessibility-threshold:
    runs-on: ubuntu-latest
    needs: accessibility-lint
    if: always()
    
    steps:
    - name: Check accessibility threshold
      run: |
        # Set threshold for maximum acceptable warnings (optional)
        # You can adjust this number based on your project's current state
        MAX_WARNINGS=200
        CURRENT_WARNINGS="${{ needs.accessibility-lint.outputs.accessibility_warnings }}"
        
        echo "Current accessibility warnings: $CURRENT_WARNINGS"
        echo "Maximum allowed warnings: $MAX_WARNINGS"
        
        if [ "$CURRENT_WARNINGS" -gt "$MAX_WARNINGS" ]; then
          echo "❌ Accessibility warnings ($CURRENT_WARNINGS) exceed threshold ($MAX_WARNINGS)"
          echo "Please address some accessibility warnings before merging."
          exit 1
        else
          echo "✅ Accessibility warnings within acceptable threshold"
        fi