name: Desktop App Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Add permissions for the entire workflow
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # First job: Build desktop installers (independent from pages)
  build-installers:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build React app
        run: CI=false npm run build

      - name: Build Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            dist/*.exe
            dist/*.msi

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: |
            dist/*.dmg
            dist/*.pkg

  # Second job: Deploy GitHub Pages (independent from installers)  
  deploy-pages:
    runs-on: ubuntu-latest
    # Only run on main branch push, not on PRs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build React app
        run: CI=false npm run build

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: './build'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # Third job: Create GitHub Release (depends on installers, only on main branch)
  create-release:
    needs: build-installers
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: desktop-v${{ github.run_number }}
          release_name: SGEX Desktop v${{ github.run_number }}
          body: |
            # SGEX Workbench Desktop App
            
            Cross-platform desktop application for WHO SMART Guidelines Exchange.
            
            ## Features
            - üñ•Ô∏è Cross-platform support (Windows, macOS, Linux)
            - üîß System tray integration
            - üåê Automatic browser launch
            - üìä Random port selection (40000-49999)
            - üîÑ Service auto-restart on failure
            - üìù Comprehensive logging
            - üöÄ One-click installation
            
            ## Downloads
            - **Windows**: .exe installer
            - **macOS**: .dmg disk image or .pkg installer  
            - **Linux**: .AppImage portable app
            
            ## Installation
            1. Download the appropriate installer for your platform
            2. Run the installer
            3. Launch SGEX Workbench from your desktop or applications menu
            4. The app will appear in your system tray and automatically open your browser
            
            Built from commit ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Linux Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux-installer
          asset_name: sgex-workbench-linux
          asset_content_type: application/octet-stream

      - name: Upload Windows Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-installer
          asset_name: sgex-workbench-windows
          asset_content_type: application/octet-stream

      - name: Upload macOS Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos-installer
          asset_name: sgex-workbench-macos
          asset_content_type: application/octet-stream