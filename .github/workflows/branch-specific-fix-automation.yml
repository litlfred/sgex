name: Branch-Specific Issue Fix Automation

on:
  issue_comment:
    types: [created]
  issues:
    types: [labeled]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  detect-branch-specific-fix:
    runs-on: ubuntu-latest
    if: >
      (github.event.issue_comment && contains(github.event.comment.body, '@copilot') && contains(github.event.comment.body, 'branch:')) ||
      (github.event.issue && contains(github.event.issue.labels.*.name, 'branch-specific'))
    
    steps:
      - name: Parse branch-specific fix request
        id: parse_request
        uses: actions/github-script@v7
        with:
          script: |
            let targetBranch = '';
            let issueNumber = '';
            let requestType = '';
            
            if (context.eventName === 'issue_comment') {
              // Parse comment for branch information
              const comment = context.payload.comment.body;
              const branchMatch = comment.match(/branch:\s*([^\s]+)/);
              targetBranch = branchMatch ? branchMatch[1] : '';
              issueNumber = context.payload.issue.number;
              requestType = 'comment';
              
              console.log(`Comment-triggered: branch=${targetBranch}, issue=#${issueNumber}`);
            } else if (context.eventName === 'issues') {
              // Check for branch-specific label and parse issue body
              const issue = context.payload.issue;
              const branchLabel = issue.labels.find(label => label.name.startsWith('branch:'));
              if (branchLabel) {
                targetBranch = branchLabel.name.replace('branch:', '');
              }
              issueNumber = issue.number;
              requestType = 'label';
              
              console.log(`Label-triggered: branch=${targetBranch}, issue=#${issueNumber}`);
            }
            
            // Validate branch name
            if (!targetBranch || !issueNumber) {
              console.log('Invalid request - missing branch or issue number');
              core.setOutput('should_proceed', 'false');
              return;
            }
            
            // Generate branch name using the convention
            const fixBranchName = targetBranch === 'main' 
              ? `copilot/fix-${issueNumber}`
              : `copilot/${targetBranch.replace(/\//g, '-')}-fix-${issueNumber}`;
            
            core.setOutput('should_proceed', 'true');
            core.setOutput('target_branch', targetBranch);
            core.setOutput('issue_number', issueNumber);
            core.setOutput('fix_branch_name', fixBranchName);
            core.setOutput('request_type', requestType);
            
            return {
              targetBranch,
              issueNumber,
              fixBranchName,
              requestType
            };

      - name: Check if target branch exists
        id: check_branch
        if: steps.parse_request.outputs.should_proceed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const targetBranch = '${{ steps.parse_request.outputs.target_branch }}';
            
            try {
              const { data: branch } = await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: targetBranch
              });
              
              console.log(`‚úÖ Target branch '${targetBranch}' exists`);
              core.setOutput('branch_exists', 'true');
              core.setOutput('branch_sha', branch.commit.sha);
              
              return true;
            } catch (error) {
              console.log(`‚ùå Target branch '${targetBranch}' does not exist: ${error.message}`);
              core.setOutput('branch_exists', 'false');
              
              return false;
            }

      - name: Comment on issue with next steps
        if: steps.parse_request.outputs.should_proceed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const targetBranch = '${{ steps.parse_request.outputs.target_branch }}';
            const fixBranchName = '${{ steps.parse_request.outputs.fix_branch_name }}';
            const issueNumber = '${{ steps.parse_request.outputs.issue_number }}';
            const branchExists = '${{ steps.check_branch.outputs.branch_exists }}' === 'true';
            const requestType = '${{ steps.parse_request.outputs.request_type }}';
            
            let commentBody = '';
            
            if (!branchExists) {
              commentBody = `## ‚ùå Branch-Specific Fix Setup Failed
              
**Target Branch:** \`${targetBranch}\`
**Issue:** #${issueNumber}

The target branch \`${targetBranch}\` does not exist in this repository. Please:

1. **Verify the branch name** is correct
2. **Create the branch** if it should exist
3. **Re-trigger this workflow** by commenting with the correct branch name

### Available Branches
You can check available branches at: https://github.com/${context.repo.owner}/${context.repo.repo}/branches

### Re-trigger Command
\`\`\`
@copilot branch: {correct_branch_name}
\`\`\``;
            } else {
              commentBody = `## üîß Branch-Specific Fix Setup Ready
              
**Target Branch:** \`${targetBranch}\`
**Fix Branch:** \`${fixBranchName}\`
**Issue:** #${issueNumber}

### Next Steps for @copilot

1. **Create the fix branch:**
   \`\`\`bash
   git fetch origin
   git checkout -b ${fixBranchName} origin/${targetBranch}
   \`\`\`

2. **Make targeted fixes** for this specific issue in the context of the \`${targetBranch}\` branch

3. **Create a PR** targeting \`${targetBranch}\` (not main) with:
   - **Title:** \`Fix {issue description} in ${targetBranch} branch - Fixes #${issueNumber}\`
   - **Base branch:** \`${targetBranch}\`
   - **Target:** Address only the specific issue mentioned

### Workflow Information
- **Trigger:** ${requestType === 'comment' ? 'Issue comment' : 'Issue label'}
- **Convention:** Following \`copilot/{branch}-fix-{issue}\` naming pattern
- **Documentation:** See [branch-specific PR workflow](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/public/docs/branch-specific-pr-workflow.md)

### Quick Links
- [View target branch](https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${targetBranch})
- [Create PR template](https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${targetBranch}...${fixBranchName})
- [Workflow documentation](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/public/docs/branch-specific-pr-workflow.md)`;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: commentBody
            });
            
            console.log(`‚úÖ Posted setup comment on issue #${issueNumber}`);

      - name: Add branch-specific label
        if: steps.parse_request.outputs.should_proceed == 'true' && steps.check_branch.outputs.branch_exists == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const targetBranch = '${{ steps.parse_request.outputs.target_branch }}';
            const issueNumber = '${{ steps.parse_request.outputs.issue_number }}';
            
            // Add branch-specific label
            const labelName = `branch:${targetBranch}`;
            
            try {
              // Check if label exists, create if not
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: labelName
                });
              } catch (error) {
                if (error.status === 404) {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: labelName,
                    description: `Issues specific to the ${targetBranch} branch`,
                    color: targetBranch === 'deploy' ? 'ff6b6b' : (targetBranch === 'main' ? '4ecdc4' : 'ffd93d')
                  });
                  console.log(`‚úÖ Created label: ${labelName}`);
                }
              }
              
              // Add label to issue
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: [labelName, 'copilot-ready']
              });
              
              console.log(`‚úÖ Added labels to issue #${issueNumber}`);
            } catch (error) {
              console.log(`‚ö†Ô∏è Failed to add labels: ${error.message}`);
            }