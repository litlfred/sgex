{"version":3,"file":"static/js/728.4507e0a6.chunk.js","mappings":"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","sources":["utils/navigationUtils.js","services/sushiService.js","services/dakComplianceService.js","components/SaveDialog.js","components/StagingGround.js","components/SushiStatus.js","components/Publications.js","components/ForkStatusBar.js","components/DAKDashboardWithFramework.js"],"sourcesContent":["/**\n * Utility functions for handling navigation with command-click support\n */\n\n/**\n * Detects if a click event should open in a new tab\n * @param {MouseEvent} event - The click event\n * @returns {boolean} - True if should open in new tab (Ctrl/Cmd+click)\n */\nexport const shouldOpenInNewTab = (event) => {\n  return !!(event?.ctrlKey || event?.metaKey); // Ctrl on Windows/Linux, Cmd on Mac\n};\n\n/**\n * Constructs a full URL from a relative path using the current base URL\n * @param {string} relativePath - The relative path (e.g., '/dashboard/user/repo')\n * @returns {string} - The full URL\n */\nexport const constructFullUrl = (relativePath) => {\n  const basePath = process.env.PUBLIC_URL || '';\n  const baseUrl = window.location.origin;\n  \n  // Remove leading slash from relativePath if present to avoid double slashes\n  const cleanPath = relativePath.startsWith('/') ? relativePath.slice(1) : relativePath;\n  \n  // Only add basePath if it's not empty\n  if (!basePath) {\n    return `${baseUrl}/${cleanPath}`;\n  }\n  \n  // Ensure basePath ends with slash for proper joining\n  const cleanBasePath = basePath.endsWith('/') ? basePath : basePath + '/';\n  \n  return `${baseUrl}${cleanBasePath}${cleanPath}`;\n};\n\n/**\n * Handles navigation with command-click support\n * @param {MouseEvent} event - The click event\n * @param {string} path - The navigation path\n * @param {Function} navigate - React Router navigate function\n * @param {Object} state - Optional state to pass with navigation\n */\nexport const handleNavigationClick = (event, path, navigate, state = null) => {\n  if (shouldOpenInNewTab(event)) {\n    // Open in new tab\n    const fullUrl = constructFullUrl(path);\n    window.open(fullUrl, '_blank', 'noopener,noreferrer');\n  } else {\n    // Navigate in same tab\n    if (state) {\n      navigate(path, { state });\n    } else {\n      navigate(path);\n    }\n  }\n};\n\n/**\n * Creates a click handler that supports command-click for new tabs\n * @param {string} path - The navigation path\n * @param {Function} navigate - React Router navigate function\n * @param {Object} state - Optional state to pass with navigation\n * @returns {Function} - Click handler function\n */\nexport const createNavigationClickHandler = (path, navigate, state = null) => {\n  return (event) => {\n    handleNavigationClick(event, path, navigate, state);\n  };\n};","/**\n * SUSHI Service\n * \n * Provides client-side FSH file loading and management for SGEX Workbench.\n * Integrates with GitHub repositories and staging ground to load and process FSH files.\n * \n * Key features:\n * - Load FSH files from GitHub repositories\n * - Override with staging ground files  \n * - Provide file merging logic as requested\n * - Detailed logging and error reporting\n * - Future SUSHI compilation support when library is compatible\n */\n\nimport githubService from './githubService';\nimport stagingGroundService from './stagingGroundService';\nimport yaml from 'js-yaml';\n\nclass SushiService {\n  constructor() {\n    this.initialized = true; // Simplified for now\n    this.compilationResults = null;\n    this.logs = [];\n    this.listeners = new Set();\n  }\n\n  /**\n   * Load all FSH files from GitHub repository and staging ground\n   * GitHub files are loaded first, then overridden by staging ground files\n   */\n  async loadFSHFiles(repository, branch, profile) {\n    this.log('info', `Loading FSH files from ${repository.full_name}/${branch}`);\n    \n    try {\n      // Step 1: Load all FSH files from GitHub repository\n      const githubFiles = await this.loadGitHubFSHFiles(repository, branch, profile);\n      this.log('info', `Loaded ${githubFiles.length} FSH files from GitHub`);\n      \n      // Step 2: Load staging ground files and override GitHub files\n      const stagingFiles = await this.loadStagingGroundFSHFiles();\n      this.log('info', `Loaded ${stagingFiles.length} FSH files from staging ground`);\n      \n      // Step 3: Merge files - staging ground overrides GitHub\n      const mergedFiles = this.mergeFSHFiles(githubFiles, stagingFiles);\n      this.log('info', `Total FSH files after merge: ${mergedFiles.length}`);\n      \n      return mergedFiles;\n    } catch (error) {\n      this.log('error', `Failed to load FSH files: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Load FSH files from GitHub repository\n   */\n  async loadGitHubFSHFiles(repository, branch, profile) {\n    const fshFiles = [];\n    \n    try {\n      // Common FSH directories to check\n      const fshDirectories = [\n        'input/fsh',\n        'fsh', \n        'input/fsh/profiles',\n        'input/fsh/extensions',\n        'input/fsh/valuesets',\n        'input/fsh/codesystems',\n        'input/fsh/examples',\n        'input/fsh/rules',\n        'input/fsh/aliases'\n      ];\n\n      for (const directory of fshDirectories) {\n        try {\n          const files = await githubService.getRepositoryContents(\n            repository.owner.login,\n            repository.name,\n            directory,\n            branch,\n            profile.token\n          );\n\n          if (Array.isArray(files)) {\n            for (const file of files) {\n              if (file.type === 'file' && file.name.endsWith('.fsh')) {\n                const content = await githubService.getFileContent(\n                  repository.owner.login,\n                  repository.name,\n                  file.path,\n                  branch,\n                  profile.token\n                );\n                \n                fshFiles.push({\n                  path: file.path,\n                  name: file.name,\n                  content: content,\n                  source: 'github',\n                  size: file.size\n                });\n              }\n            }\n          }\n        } catch (error) {\n          // Directory might not exist, continue with next\n          this.log('debug', `Directory ${directory} not found or inaccessible`);\n        }\n      }\n\n      // Also check for any .fsh files in the root\n      try {\n        const rootFiles = await githubService.getRepositoryContents(\n          repository.owner.login,\n          repository.name,\n          '',\n          branch,\n          profile.token\n        );\n\n        if (Array.isArray(rootFiles)) {\n          for (const file of rootFiles) {\n            if (file.type === 'file' && file.name.endsWith('.fsh')) {\n              const content = await githubService.getFileContent(\n                repository.owner.login,\n                repository.name,\n                file.path,\n                branch,\n                profile.token\n              );\n              \n              fshFiles.push({\n                path: file.path,\n                name: file.name,\n                content: content,\n                source: 'github',\n                size: file.size\n              });\n            }\n          }\n        }\n      } catch (error) {\n        this.log('debug', `Root directory check failed: ${error.message}`);\n      }\n\n    } catch (error) {\n      this.log('error', `Failed to load GitHub FSH files: ${error.message}`);\n      throw error;\n    }\n\n    return fshFiles;\n  }\n\n  /**\n   * Load FSH files from staging ground\n   */\n  async loadStagingGroundFSHFiles() {\n    const fshFiles = [];\n    \n    try {\n      const stagingGround = stagingGroundService.getStagingGround();\n      \n      if (stagingGround && stagingGround.files) {\n        for (const file of stagingGround.files) {\n          if (file.path.endsWith('.fsh')) {\n            fshFiles.push({\n              path: file.path,\n              name: file.path.split('/').pop(),\n              content: file.content,\n              source: 'staging',\n              metadata: file.metadata,\n              timestamp: file.timestamp\n            });\n          }\n        }\n      }\n    } catch (error) {\n      this.log('error', `Failed to load staging ground FSH files: ${error.message}`);\n      throw error;\n    }\n\n    return fshFiles;\n  }\n\n  /**\n   * Merge GitHub and staging ground FSH files\n   * Staging ground files override GitHub files with the same path\n   */\n  mergeFSHFiles(githubFiles, stagingFiles) {\n    const mergedFiles = [...githubFiles];\n    \n    // Override GitHub files with staging ground files\n    for (const stagingFile of stagingFiles) {\n      const existingIndex = mergedFiles.findIndex(f => f.path === stagingFile.path);\n      \n      if (existingIndex >= 0) {\n        // Override existing file\n        mergedFiles[existingIndex] = stagingFile;\n        this.log('debug', `Overriding ${stagingFile.path} with staging ground version`);\n      } else {\n        // Add new file from staging ground\n        mergedFiles.push(stagingFile);\n        this.log('debug', `Adding new file ${stagingFile.path} from staging ground`);\n      }\n    }\n\n    return mergedFiles;\n  }\n\n  /**\n   * Load SUSHI configuration from repository and staging ground\n   */\n  async loadSushiConfig(repository, branch, profile) {\n    try {\n      let githubConfig = null;\n      let stagingConfig = null;\n\n      // Load from GitHub\n      try {\n        const configContent = await githubService.getFileContent(\n          repository.owner.login,\n          repository.name,\n          'sushi-config.yaml',\n          branch,\n          profile.token\n        );\n        githubConfig = yaml.load(configContent);\n        this.log('info', `Loaded SUSHI configuration from GitHub: ${githubConfig.id || 'unnamed'}`);\n      } catch (error) {\n        this.log('warn', `Could not load sushi-config.yaml from GitHub: ${error.message}`);\n      }\n\n      // Load from staging ground if available\n      try {\n        const stagingFiles = stagingGroundService.getStagingFiles();\n        const stagingConfigFile = stagingFiles.find(file => file.path === 'sushi-config.yaml');\n        if (stagingConfigFile) {\n          stagingConfig = yaml.load(stagingConfigFile.content);\n          this.log('info', `Loaded SUSHI configuration from staging: ${stagingConfig.id || 'unnamed'}`);\n        }\n      } catch (error) {\n        this.log('warn', `Could not load sushi-config.yaml from staging: ${error.message}`);\n      }\n\n      // Return staging config if available, otherwise GitHub config\n      const config = stagingConfig || githubConfig;\n      if (!config) {\n        throw new Error('No sushi-config.yaml found in repository or staging');\n      }\n\n      return {\n        config,\n        hasGithubVersion: !!githubConfig,\n        hasStagingVersion: !!stagingConfig,\n        isUsingStaging: !!stagingConfig\n      };\n    } catch (error) {\n      this.log('error', `Failed to load sushi-config.yaml: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Save SUSHI configuration to staging ground\n   */\n  async saveSushiConfigToStaging(config) {\n    try {\n      const yamlContent = yaml.dump(config, {\n        indent: 2,\n        lineWidth: 120,\n        quotingType: '\"'\n      });\n\n      stagingGroundService.saveFile('sushi-config.yaml', yamlContent);\n      this.log('info', 'Saved SUSHI configuration to staging ground');\n      return true;\n    } catch (error) {\n      this.log('error', `Failed to save sushi-config.yaml to staging: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate SUSHI configuration\n   */\n  validateSushiConfig(config) {\n    const errors = [];\n    const warnings = [];\n\n    // Required fields validation\n    if (!config.id) {\n      errors.push('id field is required');\n    } else if (!/^[a-z0-9]+(\\.[a-z0-9]+)*$/.test(config.id)) {\n      errors.push('id must be lowercase alphanumeric with dots only (e.g., who.fhir.anc)');\n    }\n\n    if (!config.name) {\n      errors.push('name field is required');\n    } else if (/\\s/.test(config.name)) {\n      errors.push('name should not contain spaces (use PascalCase, e.g., WHOANCGuidelines)');\n    }\n\n    if (!config.version) {\n      errors.push('version field is required');\n    } else if (!/^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9]+)?$/.test(config.version)) {\n      errors.push('version must follow semantic versioning (e.g., 1.0.0)');\n    }\n\n    if (!config.fhirVersion) {\n      warnings.push('fhirVersion not specified, defaulting to 4.0.1');\n    } else if (!['4.0.1', '4.3.0', '5.0.0'].includes(config.fhirVersion)) {\n      warnings.push('fhirVersion should be one of: 4.0.1, 4.3.0, 5.0.0');\n    }\n\n    // Publisher validation\n    if (!config.publisher) {\n      warnings.push('publisher information is recommended');\n    } else if (typeof config.publisher === 'object') {\n      if (!config.publisher.name) {\n        warnings.push('publisher.name is recommended');\n      }\n      if (config.publisher.url && !/^https?:\\/\\//.test(config.publisher.url)) {\n        errors.push('publisher.url must be a valid URL starting with http:// or https://');\n      }\n      if (config.publisher.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(config.publisher.email)) {\n        errors.push('publisher.email must be a valid email address');\n      }\n    }\n\n    // Dependencies validation - ensure WHO base dependency for DAKs\n    if (!config.dependencies) {\n      warnings.push('dependencies section is recommended for WHO SMART Guidelines DAKs');\n    } else if (!config.dependencies['hl7.fhir.uv.sdc'] && !config.dependencies['smart.who.int.base']) {\n      warnings.push('WHO SMART Guidelines DAKs should include smart.who.int.base dependency');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\n   * Get pages from sushi config and link to source files\n   */\n  async loadPagesWithSources(repository, branch, profile, config) {\n    const pages = [];\n    \n    if (config.pages) {\n      for (const [pageKey, pageValue] of Object.entries(config.pages)) {\n        const page = {\n          key: pageKey,\n          ...pageValue,\n          sources: {\n            github: null,\n            staging: null\n          }\n        };\n\n        // Check for source file in input/pagecontent\n        const sourceFileName = `input/pagecontent/${pageKey}.md`;\n        \n        // Check GitHub\n        try {\n          const content = await githubService.getFileContent(\n            repository.owner.login,\n            repository.name,\n            sourceFileName,\n            branch,\n            profile.token\n          );\n          page.sources.github = {\n            path: sourceFileName,\n            url: `https://github.com/${repository.owner.login}/${repository.name}/blob/${branch}/${sourceFileName}`,\n            size: content.length\n          };\n        } catch (error) {\n          // Page source not found in GitHub\n        }\n\n        // Check staging\n        try {\n          const stagingFiles = stagingGroundService.getStagingFiles();\n          const stagingFile = stagingFiles.find(file => file.path === sourceFileName);\n          if (stagingFile) {\n            page.sources.staging = {\n              path: sourceFileName,\n              size: stagingFile.content.length\n            };\n          }\n        } catch (error) {\n          // Page source not found in staging\n        }\n\n        pages.push(page);\n      }\n    }\n\n    return pages;\n  }\n\n  /**\n   * Run FSH file loading and analysis (simplified version)\n   * This loads and validates FSH files without full SUSHI compilation\n   */\n  async runSUSHI(repository, branch, profile, options = {}) {\n    this.log('info', 'Starting FSH file loading and analysis...');\n    this.clearLogs();\n\n    try {\n      // Load FSH files and configuration\n      const fshFiles = await this.loadFSHFiles(repository, branch, profile);\n      const configResult = await this.loadSushiConfig(repository, branch, profile);\n\n      if (fshFiles.length === 0) {\n        this.log('warn', 'No FSH files found to process');\n        return {\n          success: false,\n          message: 'No FSH files found to process',\n          files: [],\n          logs: this.logs\n        };\n      }\n\n      // Analyze FSH files\n      const analysis = this.analyzeFSHFiles(fshFiles);\n\n      this.compilationResults = {\n        files: fshFiles,\n        config: configResult.config,\n        analysis: analysis,\n        configSources: {\n          hasGithubVersion: configResult.hasGithubVersion,\n          hasStagingVersion: configResult.hasStagingVersion,\n          isUsingStaging: configResult.isUsingStaging\n        }\n      };\n      \n      this.log('info', 'FSH file loading and analysis completed');\n      this.notifyListeners();\n\n      return {\n        success: true,\n        result: {\n          files: fshFiles,\n          config: configResult.config,\n          configSources: configResult,\n          analysis: analysis,\n          message: 'FSH files loaded successfully. Full SUSHI compilation will be available in future releases.'\n        },\n        files: fshFiles,\n        logs: this.logs,\n        stats: this.getAnalysisStats(analysis)\n      };\n\n    } catch (error) {\n      this.log('error', `FSH processing failed: ${error.message}`);\n      this.notifyListeners();\n      \n      return {\n        success: false,\n        error: error.message,\n        logs: this.logs\n      };\n    }\n  }\n\n  /**\n   * Analyze FSH files to provide useful information\n   */\n  analyzeFSHFiles(fshFiles) {\n    const analysis = {\n      totalFiles: fshFiles.length,\n      githubFiles: fshFiles.filter(f => f.source === 'github').length,\n      stagingFiles: fshFiles.filter(f => f.source === 'staging').length,\n      overrides: [],\n      fileTypes: {},\n      totalLines: 0,\n      profiles: 0,\n      extensions: 0,\n      valueSets: 0,\n      codeSystems: 0,\n      instances: 0\n    };\n\n    fshFiles.forEach(file => {\n      // Count basic FSH constructs\n      const content = file.content;\n      analysis.totalLines += content.split('\\n').length;\n\n      // Basic FSH construct detection\n      if (content.includes('Profile:')) analysis.profiles++;\n      if (content.includes('Extension:')) analysis.extensions++;\n      if (content.includes('ValueSet:')) analysis.valueSets++;\n      if (content.includes('CodeSystem:')) analysis.codeSystems++;\n      if (content.includes('Instance:')) analysis.instances++;\n\n      // Track overrides\n      if (file.source === 'staging') {\n        analysis.overrides.push(file.path);\n      }\n\n      // File type analysis\n      const extension = file.path.split('.').pop();\n      analysis.fileTypes[extension] = (analysis.fileTypes[extension] || 0) + 1;\n    });\n\n    return analysis;\n  }\n\n  /**\n   * Get analysis statistics\n   */\n  getAnalysisStats(analysis) {\n    return {\n      files: analysis.totalFiles,\n      lines: analysis.totalLines,\n      sources: {\n        github: analysis.githubFiles,\n        staging: analysis.stagingFiles\n      },\n      constructs: {\n        profiles: analysis.profiles,\n        extensions: analysis.extensions,\n        valueSets: analysis.valueSets,\n        codeSystems: analysis.codeSystems,\n        instances: analysis.instances\n      },\n      overrides: analysis.overrides.length\n    };\n  }\n\n  /**\n   * Clear compilation logs\n   */\n  clearLogs() {\n    this.logs = [];\n  }\n\n  /**\n   * Add a log entry\n   */\n  log(level, message, location = null) {\n    const logEntry = {\n      level: level,\n      message: message,\n      location: location,\n      timestamp: new Date().toISOString()\n    };\n    \n    this.logs.push(logEntry);\n    console[level] && console[level](`[SUSHI] ${message}`);\n  }\n\n  /**\n   * Get all logs\n   */\n  getLogs() {\n    return this.logs;\n  }\n\n  /**\n   * Get logs filtered by level\n   */\n  getLogsByLevel(level) {\n    return this.logs.filter(log => log.level === level);\n  }\n\n  /**\n   * Search logs by content\n   */\n  searchLogs(searchTerm) {\n    return this.logs.filter(log => \n      log.message.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  }\n\n  /**\n   * Export logs as text\n   */\n  exportLogsAsText() {\n    return this.logs.map(log => \n      `[${log.timestamp}] [${log.level.toUpperCase()}] ${log.message}${log.location ? ` (${log.location})` : ''}`\n    ).join('\\n');\n  }\n\n  /**\n   * Get compilation results\n   */\n  getCompilationResults() {\n    return this.compilationResults;\n  }\n\n  /**\n   * Add change listener\n   */\n  addListener(listener) {\n    this.listeners.add(listener);\n    return () => this.listeners.delete(listener);\n  }\n\n  /**\n   * Notify all listeners of changes\n   */\n  notifyListeners() {\n    this.listeners.forEach(listener => {\n      try {\n        listener({\n          logs: this.logs,\n          results: this.compilationResults,\n          stats: this.compilationResults ? this.getAnalysisStats(this.compilationResults.analysis) : null\n        });\n      } catch (error) {\n        console.error('Error notifying SUSHI service listener:', error);\n      }\n    });\n  }\n\n  /**\n   * Check if SUSHI is available and initialized\n   */\n  isInitialized() {\n    return this.initialized;\n  }\n\n  /**\n   * Validate FSH syntax (basic validation for now)\n   */\n  async validateFSH(fshContent) {\n    try {\n      // Basic FSH validation - check for common syntax patterns\n      const errors = [];\n      const warnings = [];\n      \n      const lines = fshContent.split('\\n');\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        \n        // Basic syntax checks\n        if (line.includes('Profile:') && !line.includes('=')) {\n          warnings.push(`Line ${i + 1}: Profile declaration might be missing metadata`);\n        }\n        \n        if (line.includes('*') && !line.includes('=') && !line.includes('//')) {\n          warnings.push(`Line ${i + 1}: Rule might be missing assignment`);\n        }\n      }\n      \n      return {\n        valid: errors.length === 0,\n        errors: errors,\n        warnings: warnings\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        errors: [error.message],\n        warnings: []\n      };\n    }\n  }\n}\n\n// Export singleton instance\nconst sushiService = new SushiService();\nexport default sushiService;","/**\n * DAK Compliance Service\n * \n * Provides comprehensive validation for DAK components with support for error, warning, and info levels.\n * Designed to work in multiple environments: React client-side, command-line, and IDE integration.\n */\n\nimport yaml from 'js-yaml';\nimport Ajv from 'ajv';\nimport addFormats from 'ajv-formats';\n\n// Import schema as a module\nconst sushiConfigSchema = require('../schemas/sushi-config.json');\n\nclass DAKComplianceService {\n  constructor() {\n    this.validators = new Map();\n    this.initializeSchemaValidator();\n    this.initializeDefaultValidators();\n  }\n\n  /**\n   * Initialize AJV schema validator for sushi-config.yaml\n   */\n  initializeSchemaValidator() {\n    this.ajv = new Ajv({ allErrors: true, verbose: true });\n    addFormats(this.ajv);\n    this.sushiConfigValidator = this.ajv.compile(sushiConfigSchema);\n  }\n\n  /**\n   * Initialize default validators for common DAK file types\n   */\n  initializeDefaultValidators() {\n    // XML file validators (general)\n    this.addValidator('xml', 'xml-well-formed', {\n      level: 'error',\n      description: 'XML files must be well-formed',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    // BPMN file validators\n    this.addValidator('bpmn', 'xml-well-formed', {\n      level: 'error',\n      description: 'BPMN files must be well-formed XML',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    this.addValidator('bpmn', 'bpmn-namespace', {\n      level: 'error',\n      description: 'BPMN files must use correct BPMN 2.0 namespace',\n      validator: this.validateBPMNNamespace.bind(this)\n    });\n\n    this.addValidator('bpmn', 'has-start-event', {\n      level: 'warning',\n      description: 'BPMN process should have at least one start event',\n      validator: this.validateBPMNStartEvent.bind(this)\n    });\n\n    // DMN file validators\n    this.addValidator('dmn', 'xml-well-formed', {\n      level: 'error',\n      description: 'DMN files must be well-formed XML',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    this.addValidator('dmn', 'dmn-namespace', {\n      level: 'error',\n      description: 'DMN files must use correct DMN 1.3 namespace',\n      validator: this.validateDMNNamespace.bind(this)\n    });\n\n    // JSON file validators\n    this.addValidator('json', 'json-valid', {\n      level: 'error',\n      description: 'JSON files must be valid JSON',\n      validator: this.validateJSONSyntax.bind(this)\n    });\n\n    // FHIR resource validators\n    this.addValidator('json', 'fhir-resource-type', {\n      level: 'info',\n      description: 'FHIR resources should have valid resourceType',\n      validator: this.validateFHIRResourceType.bind(this)\n    });\n\n    // General file validators\n    this.addValidator('*', 'file-size-limit', {\n      level: 'warning',\n      description: 'Files should be under 1MB for optimal performance',\n      validator: this.validateFileSize.bind(this)\n    });\n\n    this.addValidator('*', 'filename-conventions', {\n      level: 'info',\n      description: 'Files should follow naming conventions',\n      validator: this.validateFilenameConventions.bind(this)\n    });\n\n    // WHO SMART Guidelines specific validators\n    this.addValidator('yaml', 'sushi-config-valid', {\n      level: 'error',\n      description: 'sushi-config.yaml must be valid and contain required fields',\n      validator: this.validateSushiConfig.bind(this)\n    });\n  }\n\n  /**\n   * Add a new validator\n   */\n  addValidator(fileType, validatorId, config) {\n    if (!this.validators.has(fileType)) {\n      this.validators.set(fileType, new Map());\n    }\n    this.validators.get(fileType).set(validatorId, config);\n  }\n\n  /**\n   * Remove a validator\n   */\n  removeValidator(fileType, validatorId) {\n    if (this.validators.has(fileType)) {\n      this.validators.get(fileType).delete(validatorId);\n    }\n  }\n\n  /**\n   * Validate a single file\n   */\n  async validateFile(filePath, content) {\n    const results = [];\n    const fileExtension = this.getFileExtension(filePath);\n    const fileName = this.getFileName(filePath);\n\n    // Get validators for this file type and universal validators\n    const typeValidators = this.validators.get(fileExtension) || new Map();\n    const universalValidators = this.validators.get('*') || new Map();\n\n    // Run type-specific validators\n    for (const [validatorId, config] of typeValidators) {\n      try {\n        const result = await config.validator(filePath, content, fileName);\n        if (result) {\n          results.push({\n            validatorId,\n            level: config.level,\n            description: config.description,\n            ...result\n          });\n        }\n      } catch (error) {\n        results.push({\n          validatorId,\n          level: 'error',\n          description: 'Validator execution failed',\n          message: error.message,\n          filePath\n        });\n      }\n    }\n\n    // Run universal validators\n    for (const [validatorId, config] of universalValidators) {\n      try {\n        const result = await config.validator(filePath, content, fileName);\n        if (result) {\n          results.push({\n            validatorId,\n            level: config.level,\n            description: config.description,\n            ...result\n          });\n        }\n      } catch (error) {\n        results.push({\n          validatorId,\n          level: 'error',\n          description: 'Validator execution failed',\n          message: error.message,\n          filePath\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Validate entire staging ground\n   */\n  async validateStagingGround(stagingGround) {\n    const results = {\n      summary: { error: 0, warning: 0, info: 0 },\n      files: {},\n      validatedAt: Date.now()\n    };\n\n    for (const file of stagingGround.files) {\n      const fileResults = await this.validateFile(file.path, file.content);\n      results.files[file.path] = fileResults;\n\n      // Update summary counts\n      fileResults.forEach(result => {\n        if (result.level === 'error') results.summary.error++;\n        else if (result.level === 'warning') results.summary.warning++;\n        else if (result.level === 'info') results.summary.info++;\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Check if staging ground can be saved (no error-level violations)\n   */\n  async canSave(stagingGround) {\n    const validation = await this.validateStagingGround(stagingGround);\n    return validation.summary.error === 0;\n  }\n\n  // Validator implementations\n\n  async validateXMLWellFormed(filePath, content) {\n    try {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, 'text/xml');\n      const parserError = doc.querySelector('parsererror');\n      \n      if (parserError) {\n        return {\n          message: 'XML is not well-formed: ' + parserError.textContent,\n          filePath\n        };\n      }\n      return null;\n    } catch (error) {\n      return {\n        message: 'Failed to parse XML: ' + error.message,\n        filePath\n      };\n    }\n  }\n\n  async validateBPMNNamespace(filePath, content) {\n    if (!content.includes('xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"')) {\n      return {\n        message: 'BPMN file missing correct BPMN 2.0 namespace declaration',\n        filePath,\n        suggestion: 'Add xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" to root element'\n      };\n    }\n    return null;\n  }\n\n  async validateBPMNStartEvent(filePath, content) {\n    if (!content.includes('<startEvent') && !content.includes('<bpmn:startEvent')) {\n      return {\n        message: 'BPMN process should contain at least one start event',\n        filePath,\n        suggestion: 'Add a start event to begin the process flow'\n      };\n    }\n    return null;\n  }\n\n  async validateDMNNamespace(filePath, content) {\n    if (!content.includes('xmlns:dmn=\"https://www.omg.org/spec/DMN/20191111/MODEL/\"')) {\n      return {\n        message: 'DMN file missing correct DMN 1.3 namespace declaration',\n        filePath,\n        suggestion: 'Add xmlns:dmn=\"https://www.omg.org/spec/DMN/20191111/MODEL/\" to root element'\n      };\n    }\n    return null;\n  }\n\n  async validateJSONSyntax(filePath, content) {\n    try {\n      JSON.parse(content);\n      return null;\n    } catch (error) {\n      return {\n        message: 'Invalid JSON syntax: ' + error.message,\n        filePath\n      };\n    }\n  }\n\n  async validateFHIRResourceType(filePath, content) {\n    try {\n      const json = JSON.parse(content);\n      const validResourceTypes = [\n        'StructureDefinition', 'ValueSet', 'CodeSystem', 'ConceptMap',\n        'Questionnaire', 'PlanDefinition', 'ActivityDefinition', 'Measure',\n        'Library', 'ImplementationGuide', 'Bundle', 'Patient', 'Practitioner'\n      ];\n\n      if (json.resourceType && !validResourceTypes.includes(json.resourceType)) {\n        return {\n          message: `Unknown FHIR resourceType: ${json.resourceType}`,\n          filePath,\n          suggestion: 'Verify the resourceType is correct for FHIR R4'\n        };\n      }\n      return null;\n    } catch (error) {\n      // Not JSON, skip this validator\n      return null;\n    }\n  }\n\n  async validateFileSize(filePath, content) {\n    const sizeInBytes = new Blob([content]).size;\n    const maxSize = 1024 * 1024; // 1MB\n\n    if (sizeInBytes > maxSize) {\n      return {\n        message: `File size (${(sizeInBytes / 1024 / 1024).toFixed(1)}MB) exceeds recommended limit of 1MB`,\n        filePath,\n        suggestion: 'Consider breaking large files into smaller components'\n      };\n    }\n    return null;\n  }\n\n  async validateFilenameConventions(filePath, content) {\n    const fileName = this.getFileName(filePath);\n    const issues = [];\n\n    // Check for spaces in filename\n    if (fileName.includes(' ')) {\n      issues.push('avoid spaces in filenames');\n    }\n\n    // Check for special characters\n    if (/[<>:\"|?*]/.test(fileName)) {\n      issues.push('avoid special characters (<>:\"|?*)');\n    }\n\n    // Check for very long names\n    if (fileName.length > 100) {\n      issues.push('filename is very long (>100 characters)');\n    }\n\n    if (issues.length > 0) {\n      return {\n        message: `Filename convention issues: ${issues.join(', ')}`,\n        filePath,\n        suggestion: 'Use lowercase letters, numbers, hyphens, and underscores'\n      };\n    }\n    return null;\n  }\n\n  async validateSushiConfig(filePath, content) {\n    if (!filePath.endsWith('sushi-config.yaml')) {\n      return null;\n    }\n\n    try {\n      // Parse YAML content\n      let parsedConfig;\n      try {\n        parsedConfig = yaml.load(content);\n      } catch (yamlError) {\n        return {\n          message: `Invalid YAML syntax: ${yamlError.message}`,\n          filePath,\n          suggestion: 'Fix YAML syntax errors and ensure proper indentation'\n        };\n      }\n\n      if (!parsedConfig || typeof parsedConfig !== 'object') {\n        return {\n          message: 'sushi-config.yaml must contain a valid YAML object',\n          filePath,\n          suggestion: 'Ensure the file contains proper YAML object structure'\n        };\n      }\n\n      // Validate against JSON schema\n      const isValid = this.sushiConfigValidator(parsedConfig);\n      \n      if (!isValid) {\n        const errors = this.sushiConfigValidator.errors;\n        const errorMessages = errors.map(error => {\n          const field = error.instancePath ? error.instancePath.replace('/', '') : error.params?.missingProperty || 'root';\n          let message = `${field}: ${error.message}`;\n          \n          if (error.params?.allowedValues) {\n            message += ` (allowed: ${error.params.allowedValues.join(', ')})`;\n          }\n          \n          return message;\n        });\n\n        return {\n          message: `sushi-config.yaml validation errors: ${errorMessages.join('; ')}`,\n          filePath,\n          suggestion: 'Review the sushi-config.yaml specification at https://fshschool.org/docs/sushi/configuration/',\n          details: errors\n        };\n      }\n\n      // Additional WHO SMART Guidelines specific validation\n      const whoValidation = this.validateWHOSmartGuidelines(parsedConfig);\n      if (whoValidation) {\n        return whoValidation;\n      }\n\n      return null;\n    } catch (error) {\n      return {\n        message: 'Failed to validate sushi-config.yaml: ' + error.message,\n        filePath,\n        suggestion: 'Check file format and content structure'\n      };\n    }\n  }\n\n  /**\n   * Additional validation for WHO SMART Guidelines compliance\n   */\n  validateWHOSmartGuidelines(config) {\n    const issues = [];\n\n    // Check for smart.who.int.base dependency\n    if (!config.dependencies || !config.dependencies['smart.who.int.base']) {\n      issues.push('missing smart.who.int.base dependency (required for WHO DAK compliance)');\n    }\n\n    // Check canonical URL pattern for WHO guidelines\n    if (config.canonical && config.canonical.includes('smart.who.int')) {\n      if (!config.id.startsWith('smart.who.int')) {\n        issues.push('id should start with \"smart.who.int\" when using WHO canonical URL');\n      }\n    }\n\n    // Check for required WHO metadata\n    if (config.canonical && config.canonical.includes('smart.who.int')) {\n      if (!config.publisher || !config.publisher.toLowerCase().includes('world health organization')) {\n        issues.push('publisher should include \"World Health Organization\" for WHO guidelines');\n      }\n\n      if (!config.jurisdiction || !Array.isArray(config.jurisdiction)) {\n        issues.push('jurisdiction should be specified for WHO guidelines');\n      }\n    }\n\n    if (issues.length > 0) {\n      return {\n        message: `WHO SMART Guidelines compliance issues: ${issues.join(', ')}`,\n        filePath: 'sushi-config.yaml',\n        suggestion: 'Ensure compliance with WHO SMART Guidelines requirements'\n      };\n    }\n\n    return null;\n  }\n\n  // Utility methods\n\n  getFileExtension(filePath) {\n    const parts = filePath.split('.');\n    return parts.length > 1 ? parts[parts.length - 1].toLowerCase() : '';\n  }\n\n  getFileName(filePath) {\n    return filePath.split('/').pop() || filePath;\n  }\n\n  /**\n   * Format validation results for display\n   */\n  formatValidationResults(validation) {\n    const formatted = {\n      canSave: validation.summary.error === 0,\n      summary: validation.summary,\n      files: []\n    };\n\n    Object.entries(validation.files).forEach(([filePath, results]) => {\n      if (results.length > 0) {\n        formatted.files.push({\n          path: filePath,\n          issues: results.map(result => ({\n            level: result.level,\n            message: result.message,\n            description: result.description,\n            suggestion: result.suggestion\n          }))\n        });\n      }\n    });\n\n    return formatted;\n  }\n\n  /**\n   * Get validation summary for UI display\n   */\n  getValidationSummary(validation) {\n    return {\n      error: validation.summary.error,\n      warning: validation.summary.warning,\n      info: validation.summary.info,\n      canSave: validation.summary.error === 0,\n      hasIssues: validation.summary.error + validation.summary.warning + validation.summary.info > 0\n    };\n  }\n}\n\n// Create singleton instance\nconst dakComplianceService = new DAKComplianceService();\n\nexport default dakComplianceService;","import React, { useState, useEffect } from 'react';\nimport githubService from '../services/githubService';\nimport dakComplianceService from '../services/dakComplianceService';\nimport stagingGroundService from '../services/stagingGroundService';\n\nconst SaveDialog = ({ \n  isOpen, \n  onClose, \n  stagingGround, \n  validation, \n  repository, \n  selectedBranch,\n  hasWriteAccess,\n  onSaveSuccess \n}) => {\n  const [commitMessage, setCommitMessage] = useState('');\n  const [overrideValidation, setOverrideValidation] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [showValidationDetails, setShowValidationDetails] = useState(false);\n\n  // Reset state when dialog opens\n  useEffect(() => {\n    if (isOpen) {\n      setCommitMessage(stagingGround?.message || '');\n      setOverrideValidation(false);\n      setIsSaving(false);\n      setError(null);\n      setShowValidationDetails(false);\n    }\n  }, [isOpen, stagingGround]);\n\n  if (!isOpen) return null;\n\n  const validationSummary = validation ? dakComplianceService.getValidationSummary(validation) : null;\n  const canSave = validationSummary ? (validationSummary.canSave || overrideValidation) : true;\n  const hasErrors = validationSummary ? validationSummary.error > 0 : false;\n\n  const handleSave = async () => {\n    if (!commitMessage.trim()) {\n      setError('Commit message is required');\n      return;\n    }\n\n    if (!hasWriteAccess) {\n      setError('You need write permissions to save changes');\n      return;\n    }\n\n    if (hasErrors && !overrideValidation) {\n      setError('Cannot save with validation errors. Enable override option to proceed anyway.');\n      return;\n    }\n\n    setIsSaving(true);\n    setError(null);\n\n    try {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      \n      if (repository.isDemo || (repository.owner && repository.owner.login === 'demo-user')) {\n        // Simulate save in demo mode\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        onSaveSuccess({\n          sha: 'demo-commit-sha',\n          message: commitMessage,\n          url: `https://github.com/${repository.full_name}/commit/demo-commit-sha`\n        });\n        return;\n      }\n\n      // Create commit with multiple files\n      const result = await githubService.createCommit(\n        owner,\n        repository.name,\n        selectedBranch,\n        commitMessage.trim(),\n        stagingGround.files\n      );\n\n      onSaveSuccess({\n        sha: result.sha,\n        message: commitMessage,\n        url: result.html_url\n      });\n\n    } catch (err) {\n      console.error('Error saving changes:', err);\n      setError(getErrorMessage(err));\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const getErrorMessage = (error) => {\n    if (error.status === 409) {\n      return 'Conflict detected. The branch has been updated since you started. Please refresh and try again.';\n    } else if (error.status === 403) {\n      return 'Permission denied. Check that your token has write access to this repository.';\n    } else if (error.status === 404) {\n      return 'Repository or branch not found. Please verify the repository exists and you have access.';\n    } else if (error.message) {\n      return error.message;\n    } else {\n      return 'An unexpected error occurred while saving. Please try again.';\n    }\n  };\n\n  const formatValidationIcon = (level) => {\n    switch (level) {\n      case 'error': return '🔴';\n      case 'warning': return '🟡';\n      case 'info': return '🟢';\n      default: return '❓';\n    }\n  };\n\n  // Handle removing individual file\n  const handleRemoveFile = (filePath) => {\n    if (window.confirm(`Are you sure you want to remove \"${filePath}\" from staging? This cannot be undone.`)) {\n      stagingGroundService.removeFile(filePath);\n    }\n  };\n\n  return (\n    <div className=\"save-dialog-overlay\">\n      <div className=\"save-dialog\">\n        <div className=\"dialog-header\">\n          <h3>💾 Save Changes</h3>\n          <button \n            className=\"dialog-close\"\n            onClick={onClose}\n            disabled={isSaving}\n          >\n            ×\n          </button>\n        </div>\n\n        <div className=\"dialog-content\">\n          {/* Files Summary */}\n          <div className=\"save-summary\">\n            <h4>Files to be committed ({stagingGround?.files?.length || 0}):</h4>\n            <div className=\"files-list\">\n              {stagingGround?.files?.map((file, index) => (\n                <div key={index} className=\"file-item\">\n                  <span className=\"file-icon\">📄</span>\n                  <span className=\"file-path\">{file.path}</span>\n                  <span className=\"file-size\">\n                    {(new Blob([file.content]).size / 1024).toFixed(1)} KB\n                  </span>\n                  <button\n                    className=\"remove-file-btn\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleRemoveFile(file.path);\n                    }}\n                    title={`Remove ${file.path} from staging`}\n                    disabled={isSaving}\n                  >\n                    🗑️\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Validation Status */}\n          {validationSummary && (\n            <div className=\"validation-section\">\n              <div \n                className={`validation-summary ${validationSummary.hasIssues ? 'has-issues' : 'clean'}`}\n                onClick={() => setShowValidationDetails(!showValidationDetails)}\n              >\n                <div className=\"validation-header\">\n                  <h4>🚦 Validation Status</h4>\n                  <div className=\"validation-badges\">\n                    {validationSummary.error > 0 && (\n                      <span className=\"validation-badge error\">\n                        🔴 {validationSummary.error}\n                      </span>\n                    )}\n                    {validationSummary.warning > 0 && (\n                      <span className=\"validation-badge warning\">\n                        🟡 {validationSummary.warning}\n                      </span>\n                    )}\n                    {validationSummary.info > 0 && (\n                      <span className=\"validation-badge info\">\n                        🟢 {validationSummary.info}\n                      </span>\n                    )}\n                    {!validationSummary.hasIssues && (\n                      <span className=\"validation-badge success\">\n                        ✅ All clear\n                      </span>\n                    )}\n                  </div>\n                  <span className={`expand-icon ${showValidationDetails ? 'expanded' : ''}`}>\n                    ▼\n                  </span>\n                </div>\n              </div>\n\n              {showValidationDetails && validation && (\n                <div className=\"validation-details\">\n                  {Object.entries(validation.files).map(([filePath, results]) => (\n                    results.length > 0 && (\n                      <div key={filePath} className=\"file-validation\">\n                        <h5>📄 {filePath}</h5>\n                        <div className=\"validation-issues\">\n                          {results.map((result, index) => (\n                            <div key={index} className={`validation-issue ${result.level}`}>\n                              <span className=\"issue-icon\">{formatValidationIcon(result.level)}</span>\n                              <div className=\"issue-content\">\n                                <div className=\"issue-message\">{result.message}</div>\n                                {result.suggestion && (\n                                  <div className=\"issue-suggestion\">💡 {result.suggestion}</div>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n\n              {/* Override option for errors */}\n              {hasErrors && (\n                <div className=\"override-section\">\n                  <label className=\"override-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      checked={overrideValidation}\n                      onChange={(e) => setOverrideValidation(e.target.checked)}\n                    />\n                    <span className=\"checkmark\"></span>\n                    Override validation errors and save anyway\n                  </label>\n                  <p className=\"override-warning\">\n                    ⚠️ Saving with validation errors may cause issues with your DAK.\n                    Only enable this if you're sure about your changes.\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Commit Message */}\n          <div className=\"commit-message-section\">\n            <label htmlFor=\"commit-message\">\n              <h4>✍️ Commit Message</h4>\n            </label>\n            <textarea\n              id=\"commit-message\"\n              className=\"commit-message-input\"\n              value={commitMessage}\n              onChange={(e) => setCommitMessage(e.target.value)}\n              placeholder=\"Describe your changes...\"\n              rows={3}\n              disabled={isSaving}\n              required\n            />\n            <div className=\"commit-tips\">\n              <p>💡 <strong>Tip:</strong> Write a clear, descriptive message about what you changed and why.</p>\n            </div>\n          </div>\n\n          {/* Error Display */}\n          {error && (\n            <div className=\"error-section\">\n              <div className=\"error-message\">\n                <span className=\"error-icon\">❌</span>\n                {error}\n              </div>\n            </div>\n          )}\n\n          {/* Repository Info */}\n          <div className=\"repo-info\">\n            <div className=\"info-item\">\n              <span className=\"info-label\">Repository:</span>\n              <span className=\"info-value\">{repository?.full_name}</span>\n            </div>\n            <div className=\"info-item\">\n              <span className=\"info-label\">Branch:</span>\n              <span className=\"info-value\">{selectedBranch}</span>\n            </div>\n            <div className=\"info-item\">\n              <span className=\"info-label\">Access:</span>\n              <span className={`info-value ${hasWriteAccess ? 'write' : 'read'}`}>\n                {hasWriteAccess ? '✏️ Write' : '👁️ Read-only'}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"dialog-actions\">\n          <button\n            className=\"action-btn secondary\"\n            onClick={onClose}\n            disabled={isSaving}\n          >\n            Cancel\n          </button>\n          <button\n            className=\"action-btn primary\"\n            onClick={handleSave}\n            disabled={!canSave || !commitMessage.trim() || isSaving || !hasWriteAccess}\n          >\n            {isSaving ? (\n              <>\n                <span className=\"saving-spinner\">⏳</span>\n                Saving...\n              </>\n            ) : (\n              <>💾 Save Changes</>\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SaveDialog;","import React, { useState, useEffect, useCallback } from 'react';\nimport stagingGroundService from '../services/stagingGroundService';\nimport dakComplianceService from '../services/dakComplianceService';\nimport SaveDialog from './SaveDialog';\n\nconst StagingGround = ({ repository, selectedBranch, hasWriteAccess, profile }) => {\n  const [stagingGround, setStagingGround] = useState(null);\n  const [validation, setValidation] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n\n  // Load staging ground data\n  const loadStagingGroundData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const currentStagingGround = stagingGroundService.getStagingGround();\n      setStagingGround(currentStagingGround);\n      \n      if (currentStagingGround.files.length > 0) {\n        await validateStagingGround(currentStagingGround);\n      }\n    } catch (err) {\n      setError('Failed to load staging ground data');\n      console.error('Error loading staging ground:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Initialize staging ground service\n  useEffect(() => {\n    if (repository && selectedBranch) {\n      stagingGroundService.initialize(repository, selectedBranch);\n      loadStagingGroundData();\n\n      // Subscribe to staging ground changes\n      const unsubscribe = stagingGroundService.addListener((updatedStagingGround) => {\n        setStagingGround(updatedStagingGround);\n        validateStagingGround(updatedStagingGround);\n      });\n\n      return unsubscribe;\n    }\n  }, [repository, selectedBranch, loadStagingGroundData]);\n\n  // Validate staging ground\n  const validateStagingGround = async (stagingGroundData) => {\n    if (!stagingGroundData || stagingGroundData.files.length === 0) {\n      setValidation(null);\n      return;\n    }\n\n    try {\n      const validationResult = await dakComplianceService.validateStagingGround(stagingGroundData);\n      setValidation(validationResult);\n    } catch (err) {\n      console.error('Error validating staging ground:', err);\n      setValidation(null);\n    }\n  };\n\n  // Handle saving changes\n  const handleSave = () => {\n    if (!hasWriteAccess) {\n      alert('You need write permissions to save changes to this repository.');\n      return;\n    }\n    \n    setShowSaveDialog(true);\n  };\n\n  // Handle successful save\n  const handleSaveSuccess = (result) => {\n    setShowSaveDialog(false);\n    \n    // Clear staging ground after successful save\n    stagingGroundService.clearStagingGround();\n    \n    // Show success message\n    alert(`Changes saved successfully! Commit: ${result.sha.substring(0, 7)}`);\n  };\n\n  // Handle clearing staging ground\n  const handleClearChanges = () => {\n    if (window.confirm('Are you sure you want to discard all changes? This cannot be undone.')) {\n      stagingGroundService.clearStagingGround();\n    }\n  };\n\n  // Handle removing individual file\n  const handleRemoveFile = (filePath) => {\n    if (window.confirm(`Are you sure you want to remove \"${filePath}\" from staging? This cannot be undone.`)) {\n      stagingGroundService.removeFile(filePath);\n    }\n  };\n\n  // Get validation summary for display\n  const getValidationSummary = () => {\n    if (!validation) {\n      return { error: 0, warning: 0, info: 0, canSave: true };\n    }\n    return dakComplianceService.getValidationSummary(validation);\n  };\n\n  // Format file list for display\n  const formatFileList = () => {\n    if (!stagingGround || !stagingGround.files) return [];\n    \n    return stagingGround.files.map(file => ({\n      path: file.path,\n      size: new Blob([file.content]).size,\n      lastModified: file.timestamp\n    }));\n  };\n\n  const validationSummary = getValidationSummary();\n  const hasChanges = stagingGround && stagingGround.files.length > 0;\n  const filesCount = stagingGround ? stagingGround.files.length : 0;\n\n  return (\n    <div className=\"staging-ground-section\">\n      <div className=\"section-header\">\n        <h3 className=\"section-title\">\n          <span className=\"section-icon\">📝</span>\n          Staging Ground\n          {hasChanges && (\n            <span className=\"files-badge\">\n              {filesCount} file{filesCount !== 1 ? 's' : ''}\n            </span>\n          )}\n        </h3>\n        <p className=\"section-description\">\n          Changes made through DAK component editors are staged here before being committed to the repository.\n          Review and commit your changes when ready.\n        </p>\n      </div>\n\n      <div className=\"staging-content\">\n        {loading ? (\n          <div className=\"loading-indicator\">\n            <span className=\"loading-spinner\">⏳</span>\n            Loading staging ground...\n          </div>\n        ) : error ? (\n          <div className=\"error-message\">\n            <span className=\"error-icon\">⚠️</span>\n            {error}\n          </div>\n        ) : (\n          <>\n            {/* Staging Status Bar */}\n            <div className=\"staging-status-bar\">\n              <div className=\"status-indicators\">\n                {/* Validation stoplight */}\n                <div className=\"validation-stoplight\">\n                  <div className={`stoplight-indicator error ${validationSummary.error === 0 ? 'lit' : ''}`}>\n                    🔴\n                    {validationSummary.error > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.error}</span>\n                    )}\n                  </div>\n                  <div className={`stoplight-indicator warning ${validationSummary.warning === 0 ? 'lit' : ''}`}>\n                    🟡\n                    {validationSummary.warning > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.warning}</span>\n                    )}\n                  </div>\n                  <div className={`stoplight-indicator info ${validationSummary.info === 0 ? 'lit' : ''}`}>\n                    🟢\n                    {validationSummary.info > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.info}</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Save button */}\n              <button\n                className={`save-btn ${!hasChanges || !validationSummary.canSave ? 'disabled' : ''}`}\n                onClick={handleSave}\n                disabled={!hasChanges || !hasWriteAccess}\n                title={\n                  !hasChanges ? 'No changes to save' :\n                  !hasWriteAccess ? 'Write access required' :\n                  !validationSummary.canSave ? 'Fix validation errors first' :\n                  'Save changes to repository'\n                }\n              >\n                💾 Save Changes\n              </button>\n            </div>\n\n            {/* Changed Files Section */}\n            <div className=\"staging-files-section\">\n              <h4>📁 Changed Files</h4>\n              {hasChanges ? (\n                <div className=\"changed-files\">\n                  {formatFileList().map((file, index) => (\n                    <div key={index} className=\"file-item\">\n                      <div className=\"file-info\">\n                        <span className=\"file-icon\">📄</span>\n                        <span className=\"file-path\">{file.path}</span>\n                      </div>\n                      <div className=\"file-meta\">\n                        <span className=\"file-size\">\n                          {(file.size / 1024).toFixed(1)} KB\n                        </span>\n                        <span className=\"file-time\">\n                          {new Date(file.lastModified).toLocaleTimeString()}\n                        </span>\n                        <button\n                          className=\"remove-file-btn\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleRemoveFile(file.path);\n                          }}\n                          title={`Remove ${file.path} from staging`}\n                        >\n                          🗑️\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"file-actions\">\n                    <button\n                      className=\"action-btn secondary small\"\n                      onClick={handleClearChanges}\n                    >\n                      🗑️ Clear All Changes\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"no-changes\">\n                  <p>No changes in staging ground</p>\n                  <p className=\"help-text\">\n                    Changes made through DAK component editors will appear here before being saved to the repository.\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {/* Commit Message Preview */}\n            {hasChanges && stagingGround.message && (\n              <div className=\"commit-message-section\">\n                <h4>✍️ Commit Message</h4>\n                <div className=\"commit-preview\">\n                  <p>{stagingGround.message}</p>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Save Dialog */}\n      <SaveDialog\n        isOpen={showSaveDialog}\n        onClose={() => setShowSaveDialog(false)}\n        stagingGround={stagingGround}\n        validation={validation}\n        repository={repository}\n        selectedBranch={selectedBranch}\n        hasWriteAccess={hasWriteAccess}\n        onSaveSuccess={handleSaveSuccess}\n      />\n    </div>\n  );\n};\n\nexport default StagingGround;","import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport sushiService from '../services/sushiService';\nimport stagingGroundService from '../services/stagingGroundService';\nimport { handleNavigationClick } from '../utils/navigationUtils';\nimport './SushiStatus.css';\n\nconst SushiStatus = ({ profile, repository, selectedBranch, hasWriteAccess }) => {\n  const navigate = useNavigate();\n  const [expanded, setExpanded] = useState(false);\n  const [sushiConfig, setSushiConfig] = useState(null);\n  const [configSources, setConfigSources] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [editMode, setEditMode] = useState(false);\n  const [editingConfig, setEditingConfig] = useState(null);\n  const [validation, setValidation] = useState(null);\n  const [pages, setPages] = useState([]);\n  const [showSource, setShowSource] = useState(false);\n  const [sourceContent, setSourceContent] = useState('');\n  const [expandedPages, setExpandedPages] = useState(false);\n  const [expandedDependencies, setExpandedDependencies] = useState(false);\n  const [expandedAdvanced, setExpandedAdvanced] = useState(false);\n\n  const owner = repository.owner?.login || repository.full_name.split('/')[0];\n  const repoName = repository.name;\n\n  // Load SUSHI configuration function\n  const loadSushiConfig = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const configResult = await sushiService.loadSushiConfig(repository, selectedBranch, profile);\n      setSushiConfig(configResult.config);\n      setConfigSources(configResult);\n      setEditingConfig({ ...configResult.config });\n\n      // Validate the config\n      const validationResult = sushiService.validateSushiConfig(configResult.config);\n      setValidation(validationResult);\n\n      // Load pages with sources\n      const pagesWithSources = await sushiService.loadPagesWithSources(\n        repository, \n        selectedBranch, \n        profile, \n        configResult.config\n      );\n      setPages(pagesWithSources);\n\n    } catch (err) {\n      console.error('Error loading SUSHI config:', err);\n      setError(`Failed to load SUSHI configuration: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [repository, selectedBranch, profile]);\n\n  // Load SUSHI configuration when component becomes expanded\n  useEffect(() => {\n    if (expanded && !sushiConfig && repository && selectedBranch) {\n      loadSushiConfig();\n    }\n  }, [expanded, repository, selectedBranch, sushiConfig, loadSushiConfig]);\n\n  const handleSushiRunnerClick = (event) => {\n    const path = selectedBranch \n      ? `/sushi-runner/${owner}/${repoName}/${selectedBranch}`\n      : `/sushi-runner/${owner}/${repoName}`;\n    \n    const navigationState = {\n      profile,\n      repository,\n      selectedBranch\n    };\n    \n    handleNavigationClick(event, path, navigate, navigationState);\n  };\n\n  const handleEditToggle = () => {\n    if (!hasWriteAccess) {\n      alert('You need write permissions to edit the SUSHI configuration.');\n      return;\n    }\n    \n    if (editMode) {\n      // Cancel edit\n      setEditingConfig({ ...sushiConfig });\n      setEditMode(false);\n    } else {\n      // Start edit\n      setEditMode(true);\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      // Validate before saving\n      const validationResult = sushiService.validateSushiConfig(editingConfig);\n      setValidation(validationResult);\n\n      if (validationResult.errors.length > 0) {\n        alert('Please fix validation errors before saving.');\n        return;\n      }\n\n      // Save to staging ground\n      await sushiService.saveSushiConfigToStaging(editingConfig);\n      setSushiConfig({ ...editingConfig });\n      setConfigSources(prev => ({ ...prev, hasStagingVersion: true, isUsingStaging: true }));\n      setEditMode(false);\n      \n      alert('SUSHI configuration saved to staging ground successfully!');\n    } catch (err) {\n      console.error('Error saving SUSHI config:', err);\n      alert(`Failed to save SUSHI configuration: ${err.message}`);\n    }\n  };\n\n  const handleFieldChange = (field, value) => {\n    setEditingConfig(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handlePublisherChange = (field, value) => {\n    setEditingConfig(prev => ({\n      ...prev,\n      publisher: {\n        ...prev.publisher,\n        [field]: value\n      }\n    }));\n  };\n\n  const handleDependencyAdd = () => {\n    const name = prompt('Enter dependency name (e.g., smart.who.int.base):');\n    const version = prompt('Enter version (e.g., 1.0.0):');\n    \n    if (name && version) {\n      setEditingConfig(prev => ({\n        ...prev,\n        dependencies: {\n          ...prev.dependencies,\n          [name]: version\n        }\n      }));\n    }\n  };\n\n  const handleDependencyRemove = (depName) => {\n    if (window.confirm(`Remove dependency ${depName}?`)) {\n      setEditingConfig(prev => {\n        const newDeps = { ...prev.dependencies };\n        delete newDeps[depName];\n        return {\n          ...prev,\n          dependencies: newDeps\n        };\n      });\n    }\n  };\n\n  const viewSource = async (sourceType) => {\n    try {\n      setShowSource(true);\n      if (sourceType === 'staging' && configSources.hasStagingVersion) {\n        // Get staging version from staging ground service\n        const stagingFiles = stagingGroundService.getStagingFiles();\n        const stagingFile = stagingFiles.find(file => file.path === 'sushi-config.yaml');\n        setSourceContent(stagingFile ? stagingFile.content : 'Staging version not found');\n      } else {\n        // Get GitHub version\n        import('js-yaml').then(yaml => {\n          const yamlContent = yaml.dump(sushiConfig, { indent: 2 });\n          setSourceContent(yamlContent);\n        });\n      }\n    } catch (err) {\n      setSourceContent(`Error loading source: ${err.message}`);\n    }\n  };\n\n  const copyToClipboard = (text) => {\n    navigator.clipboard.writeText(text).then(() => {\n      alert('Copied to clipboard!');\n    }).catch(err => {\n      console.error('Failed to copy: ', err);\n    });\n  };\n\n  if (!expanded) {\n    return (\n      <div className=\"sushi-status-collapsed\">\n        <div className=\"sushi-status-header\" onClick={() => setExpanded(true)}>\n          <div className=\"sushi-status-info\">\n            <span className=\"sushi-status-icon\">🍣</span>\n            <span className=\"sushi-status-title\">SUSHI Status</span>\n            <span className=\"expand-indicator\">▶</span>\n          </div>\n          <div className=\"sushi-actions\">\n            <button\n              className=\"sushi-runner-btn\"\n              onClick={handleSushiRunnerClick}\n              title=\"Open SUSHI Runner\"\n            >\n              🏃 SUSHI Runner\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"sushi-status-expanded\">\n      <div className=\"sushi-status-header\" onClick={() => setExpanded(false)}>\n        <div className=\"sushi-status-info\">\n          <span className=\"sushi-status-icon\">🍣</span>\n          <span className=\"sushi-status-title\">SUSHI Status</span>\n          <span className=\"expand-indicator\">▼</span>\n        </div>\n        <div className=\"sushi-actions\">\n          <button\n            className=\"sushi-runner-btn\"\n            onClick={handleSushiRunnerClick}\n            title=\"Open SUSHI Runner\"\n          >\n            🏃 SUSHI Runner\n          </button>\n        </div>\n      </div>\n\n      <div className=\"sushi-status-content\">\n        {loading && (\n          <div className=\"sushi-loading\">\n            <p>Loading SUSHI configuration...</p>\n          </div>\n        )}\n\n        {error && (\n          <div className=\"sushi-error\">\n            <p>{error}</p>\n            <button onClick={loadSushiConfig} className=\"retry-btn\">\n              🔄 Retry\n            </button>\n          </div>\n        )}\n\n        {sushiConfig && (\n          <div className=\"sushi-config-container\">\n            {/* Source Indicators */}\n            <div className=\"source-indicators\">\n              {configSources.hasGithubVersion && (\n                <span className=\"source-badge github\">\n                  📁 GitHub: sushi-config.yaml\n                </span>\n              )}\n              {configSources.hasStagingVersion && (\n                <span className=\"source-badge staging active\">\n                  📝 Staging: sushi-config.yaml (override)\n                </span>\n              )}\n            </div>\n\n            {/* Validation Messages */}\n            {validation && (validation.errors.length > 0 || validation.warnings.length > 0) && (\n              <div className=\"validation-messages\">\n                {validation.errors.map((error, idx) => (\n                  <div key={idx} className=\"validation-error\">\n                    ❌ {error}\n                  </div>\n                ))}\n                {validation.warnings.map((warning, idx) => (\n                  <div key={idx} className=\"validation-warning\">\n                    ⚠️ {warning}\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {/* Summary Section */}\n            <div className=\"config-summary\">\n              <h4>Summary</h4>\n              <div className=\"summary-grid\">\n                <div className=\"summary-field\">\n                  <label>ID:</label>\n                  {editMode ? (\n                    <input\n                      type=\"text\"\n                      value={editingConfig.id || ''}\n                      onChange={(e) => handleFieldChange('id', e.target.value)}\n                      className=\"edit-input\"\n                    />\n                  ) : (\n                    <span>{sushiConfig.id}</span>\n                  )}\n                </div>\n\n                <div className=\"summary-field\">\n                  <label>FHIR Version:</label>\n                  {editMode ? (\n                    <select\n                      value={editingConfig.fhirVersion || '4.0.1'}\n                      onChange={(e) => handleFieldChange('fhirVersion', e.target.value)}\n                      className=\"edit-input\"\n                    >\n                      <option value=\"4.0.1\">4.0.1</option>\n                      <option value=\"4.3.0\">4.3.0</option>\n                      <option value=\"5.0.0\">5.0.0</option>\n                    </select>\n                  ) : (\n                    <span>{sushiConfig.fhirVersion || '4.0.1'}</span>\n                  )}\n                </div>\n\n                <div className=\"summary-field\">\n                  <label>Name:</label>\n                  {editMode ? (\n                    <input\n                      type=\"text\"\n                      value={editingConfig.name || ''}\n                      onChange={(e) => handleFieldChange('name', e.target.value)}\n                      className=\"edit-input\"\n                    />\n                  ) : (\n                    <span>{sushiConfig.name}</span>\n                  )}\n                </div>\n\n                <div className=\"summary-field\">\n                  <label>Version:</label>\n                  {editMode ? (\n                    <input\n                      type=\"text\"\n                      value={editingConfig.version || ''}\n                      onChange={(e) => handleFieldChange('version', e.target.value)}\n                      className=\"edit-input\"\n                    />\n                  ) : (\n                    <span>{sushiConfig.version}</span>\n                  )}\n                </div>\n\n                <div className=\"summary-field full-width\">\n                  <label>Title:</label>\n                  {editMode ? (\n                    <input\n                      type=\"text\"\n                      value={editingConfig.title || ''}\n                      onChange={(e) => handleFieldChange('title', e.target.value)}\n                      className=\"edit-input\"\n                    />\n                  ) : (\n                    <span>{sushiConfig.title}</span>\n                  )}\n                </div>\n\n                <div className=\"summary-field full-width\">\n                  <label>Description:</label>\n                  {editMode ? (\n                    <textarea\n                      value={editingConfig.description || ''}\n                      onChange={(e) => handleFieldChange('description', e.target.value)}\n                      className=\"edit-input\"\n                      rows=\"3\"\n                    />\n                  ) : (\n                    <span>{sushiConfig.description}</span>\n                  )}\n                </div>\n              </div>\n\n              {/* Publisher Section */}\n              <div className=\"publisher-section\">\n                <h5>Publisher</h5>\n                <div className=\"publisher-fields\">\n                  <div className=\"summary-field\">\n                    <label>Name:</label>\n                    {editMode ? (\n                      <input\n                        type=\"text\"\n                        value={editingConfig.publisher?.name || ''}\n                        onChange={(e) => handlePublisherChange('name', e.target.value)}\n                        className=\"edit-input\"\n                      />\n                    ) : (\n                      <span>{sushiConfig.publisher?.name || 'Not specified'}</span>\n                    )}\n                  </div>\n\n                  <div className=\"summary-field\">\n                    <label>URL:</label>\n                    {editMode ? (\n                      <input\n                        type=\"url\"\n                        value={editingConfig.publisher?.url || ''}\n                        onChange={(e) => handlePublisherChange('url', e.target.value)}\n                        className=\"edit-input\"\n                      />\n                    ) : (\n                      <span>\n                        {sushiConfig.publisher?.url ? (\n                          <a href={sushiConfig.publisher.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                            {sushiConfig.publisher.url}\n                          </a>\n                        ) : (\n                          'Not specified'\n                        )}\n                      </span>\n                    )}\n                  </div>\n\n                  <div className=\"summary-field\">\n                    <label>Email:</label>\n                    {editMode ? (\n                      <input\n                        type=\"email\"\n                        value={editingConfig.publisher?.email || ''}\n                        onChange={(e) => handlePublisherChange('email', e.target.value)}\n                        className=\"edit-input\"\n                      />\n                    ) : (\n                      <span>\n                        {sushiConfig.publisher?.email ? (\n                          <a href={`mailto:${sushiConfig.publisher.email}`}>\n                            {sushiConfig.publisher.email}\n                          </a>\n                        ) : (\n                          'Not specified'\n                        )}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Dependencies Section */}\n            <div className=\"dependencies-section\">\n              <div \n                className=\"section-toggle\"\n                onClick={() => setExpandedDependencies(!expandedDependencies)}\n              >\n                <h4>Dependencies {expandedDependencies ? '▼' : '▶'}</h4>\n              </div>\n              \n              {expandedDependencies && (\n                <div className=\"dependencies-content\">\n                  {editingConfig.dependencies && Object.keys(editingConfig.dependencies).length > 0 ? (\n                    <div className=\"dependencies-list\">\n                      {Object.entries(editingConfig.dependencies).map(([name, version]) => (\n                        <div key={name} className=\"dependency-item\">\n                          <span className=\"dep-name\">{name}</span>\n                          <span className=\"dep-version\">{version}</span>\n                          {editMode && (\n                            <button \n                              onClick={() => handleDependencyRemove(name)}\n                              className=\"remove-dep-btn\"\n                              title=\"Remove dependency\"\n                            >\n                              ❌\n                            </button>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p>No dependencies defined</p>\n                  )}\n                  \n                  {editMode && (\n                    <button onClick={handleDependencyAdd} className=\"add-dep-btn\">\n                      ➕ Add Dependency\n                    </button>\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Pages Section */}\n            <div className=\"pages-section\">\n              <div \n                className=\"section-toggle\"\n                onClick={() => setExpandedPages(!expandedPages)}\n              >\n                <h4>Pages ({pages.length}) {expandedPages ? '▼' : '▶'}</h4>\n              </div>\n              \n              {expandedPages && (\n                <div className=\"pages-content\">\n                  {pages.length > 0 ? (\n                    <div className=\"pages-list\">\n                      {pages.map((page, idx) => (\n                        <div key={idx} className=\"page-item\">\n                          <div className=\"page-info\">\n                            <strong>{page.key}</strong>\n                            {page.title && <span className=\"page-title\">: {page.title}</span>}\n                          </div>\n                          <div className=\"page-sources\">\n                            {page.sources.github && (\n                              <a \n                                href={page.sources.github.url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                className=\"source-link github\"\n                              >\n                                📁 GitHub\n                              </a>\n                            )}\n                            {page.sources.staging && (\n                              <span className=\"source-link staging\">\n                                📝 Staging\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p>No pages defined</p>\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Advanced Section */}\n            <div className=\"advanced-section\">\n              <div \n                className=\"section-toggle\"\n                onClick={() => setExpandedAdvanced(!expandedAdvanced)}\n              >\n                <h4>Advanced Configuration {expandedAdvanced ? '▼' : '▶'}</h4>\n              </div>\n              \n              {expandedAdvanced && (\n                <div className=\"advanced-content\">\n                  <p>Additional SUSHI configuration fields can be viewed and edited in the source view.</p>\n                  <div className=\"advanced-fields\">\n                    <div className=\"field-info\">\n                      <label>Canonical URL:</label>\n                      <span>{sushiConfig.canonical || 'Not specified'}</span>\n                    </div>\n                    <div className=\"field-info\">\n                      <label>Status:</label>\n                      <span>{sushiConfig.status || 'Not specified'}</span>\n                    </div>\n                    <div className=\"field-info\">\n                      <label>Copyright Year:</label>\n                      <span>{sushiConfig.copyrightYear || 'Not specified'}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"config-actions\">\n              {editMode ? (\n                <>\n                  <button onClick={handleSave} className=\"save-btn\">\n                    💾 Save to Staging\n                  </button>\n                  <button onClick={handleEditToggle} className=\"cancel-btn\">\n                    ❌ Cancel\n                  </button>\n                </>\n              ) : (\n                <button \n                  onClick={handleEditToggle} \n                  className=\"edit-btn\"\n                  disabled={!hasWriteAccess}\n                  title={hasWriteAccess ? 'Edit configuration' : 'Write permissions required'}\n                >\n                  ✏️ Edit\n                </button>\n              )}\n              \n              <button onClick={() => viewSource('current')} className=\"view-source-btn\">\n                👁️ View Source\n              </button>\n              \n              {configSources.hasGithubVersion && (\n                <a \n                  href={`https://github.com/${owner}/${repoName}/blob/${selectedBranch}/sushi-config.yaml`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"github-source-btn\"\n                >\n                  🔗 GitHub Source\n                </a>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Source View Modal */}\n      {showSource && (\n        <div className=\"source-modal-overlay\" onClick={() => setShowSource(false)}>\n          <div className=\"source-modal\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"source-modal-header\">\n              <h3>SUSHI Configuration Source</h3>\n              <button onClick={() => setShowSource(false)} className=\"modal-close\">❌</button>\n            </div>\n            <div className=\"source-modal-content\">\n              <pre><code>{sourceContent}</code></pre>\n            </div>\n            <div className=\"source-modal-actions\">\n              <button onClick={() => copyToClipboard(sourceContent)} className=\"copy-btn\">\n                📋 Copy to Clipboard\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SushiStatus;","import React, { useState, useEffect } from 'react';\nimport githubService from '../services/githubService';\nimport StagingGround from './StagingGround';\nimport SushiStatus from './SushiStatus';\n\nconst Publications = ({ profile, repository, selectedBranch, hasWriteAccess }) => {\n  const [branches, setBranches] = useState([]);\n  const [workflows, setWorkflows] = useState([]);\n  const [workflowRuns, setWorkflowRuns] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const owner = repository.owner?.login || repository.full_name.split('/')[0];\n  const repoName = repository.name;\n\n  useEffect(() => {\n    const fetchPublicationData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Handle demo mode - provide mock data\n        if (profile?.isDemo) {\n          const mockBranches = [\n            { name: 'main', commit: { sha: 'abc123' } },\n            { name: 'feature/updates', commit: { sha: 'def456' } },\n            { name: 'dev', commit: { sha: 'ghi789' } }\n          ];\n          setBranches(mockBranches);\n\n          const mockWorkflows = [\n            { id: 'pages-build', name: 'Deploy to GitHub Pages', triggers: ['push', 'manual'] }\n          ];\n          setWorkflows(mockWorkflows);\n\n          // Mock workflow runs\n          const mockWorkflowRuns = {\n            'main': { \n              status: 'completed', \n              conclusion: 'success', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123456`,\n              updated_at: new Date().toISOString()\n            },\n            'feature/updates': { \n              status: 'completed', \n              conclusion: 'action_required', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123457`,\n              updated_at: new Date().toISOString()\n            },\n            'dev': { \n              status: 'completed', \n              conclusion: 'failure', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123458`,\n              updated_at: new Date().toISOString()\n            }\n          };\n          setWorkflowRuns(mockWorkflowRuns);\n          setLoading(false);\n          return;\n        }\n\n        // Fetch branches (excluding gh-pages)\n        const branchesData = await githubService.getBranches(owner, repoName);\n        const filteredBranches = branchesData.filter(branch => branch.name !== 'gh-pages');\n        setBranches(filteredBranches);\n\n        // Fetch workflows to find ghbuild workflow\n        const workflowsData = await githubService.getWorkflows(owner, repoName);\n        setWorkflows(workflowsData);\n\n        // Find the ghbuild workflow (look for workflow with 'build' or 'publish' in name)\n        const ghbuildWorkflow = workflowsData.find(workflow => \n          workflow.name.toLowerCase().includes('build') || \n          workflow.name.toLowerCase().includes('publish') ||\n          workflow.name.toLowerCase().includes('pages')\n        );\n\n        // Fetch recent workflow runs for each branch if ghbuild workflow exists and has valid ID\n        if (ghbuildWorkflow && ghbuildWorkflow.id) {\n          const runsByBranch = {};\n          for (const branch of filteredBranches) {\n            try {\n              const runs = await githubService.getWorkflowRunsForWorkflow(\n                owner, \n                repoName, \n                ghbuildWorkflow.id,\n                { branch: branch.name, per_page: 1 }\n              );\n              if (runs.length > 0) {\n                runsByBranch[branch.name] = runs[0];\n              }\n            } catch (err) {\n              console.warn(`Could not fetch workflow runs for branch ${branch.name}:`, err);\n            }\n          }\n          setWorkflowRuns(runsByBranch);\n        } else if (ghbuildWorkflow && !ghbuildWorkflow.id) {\n          console.warn('Found workflow but missing ID:', ghbuildWorkflow);\n        }\n\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching publication data:', err);\n        setError('Failed to load publication data');\n        setLoading(false);\n      }\n    };\n\n    fetchPublicationData();\n  }, [owner, repoName, profile?.isDemo]);\n\n  const getPublicationUrl = (branchName) => {\n    if (branchName === repository.default_branch || branchName === 'main') {\n      return `https://${owner}.github.io/${repoName}/`;\n    } else {\n      return `https://${owner}.github.io/${repoName}/branches/${branchName}/`;\n    }\n  };\n\n  const getWorkflowStatusIcon = (branchName) => {\n    const run = workflowRuns[branchName];\n    if (!run) return { icon: '⚪', title: 'No recent workflow runs', link: null };\n\n    const status = run.status;\n    const conclusion = run.conclusion;\n\n    if (status === 'in_progress' || status === 'queued') {\n      return { \n        icon: '🔄', \n        title: 'Workflow running', \n        link: run.html_url,\n        className: 'running' \n      };\n    } else if (conclusion === 'success') {\n      return { \n        icon: '✅', \n        title: 'Last build successful', \n        link: run.html_url,\n        className: 'success' \n      };\n    } else if (conclusion === 'failure') {\n      return { \n        icon: '❌', \n        title: 'Last build failed', \n        link: run.html_url,\n        className: 'failure' \n      };\n    } else if (conclusion === 'action_required') {\n      return { \n        icon: '⏳', \n        title: 'Workflow requires approval', \n        link: run.html_url,\n        className: 'approval-required' \n      };\n    } else {\n      return { \n        icon: '⚠️', \n        title: `Build ${conclusion || status}`, \n        link: run.html_url,\n        className: 'warning' \n      };\n    }\n  };\n\n  const handleRestartWorkflow = async (branchName) => {\n    // Handle demo mode\n    if (profile?.isDemo) {\n      alert(`Demo Mode: Workflow restart simulated for branch: ${branchName}`);\n      return;\n    }\n\n    const ghbuildWorkflow = workflows.find(workflow => \n      workflow.name.toLowerCase().includes('build') || \n      workflow.name.toLowerCase().includes('publish') ||\n      workflow.name.toLowerCase().includes('pages')\n    );\n\n    if (!ghbuildWorkflow) {\n      alert('No suitable workflow found to restart');\n      return;\n    }\n\n    if (!ghbuildWorkflow.id) {\n      alert('Workflow found but missing ID - cannot restart');\n      console.warn('Workflow missing ID:', ghbuildWorkflow);\n      return;\n    }\n\n    try {\n      await githubService.triggerWorkflow(owner, repoName, ghbuildWorkflow.id, branchName);\n      alert(`Workflow restarted for branch: ${branchName}`);\n      \n      // Refresh workflow runs after a delay\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    } catch (err) {\n      console.error('Error restarting workflow:', err);\n      alert('Failed to restart workflow. Please check your permissions.');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"publications-loading\">\n        <div className=\"loading-content\">\n          <h3>Loading Publications...</h3>\n          <p>Fetching branch and workflow information...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"publications-error\">\n        <div className=\"error-content\">\n          <h3>Error Loading Publications</h3>\n          <p>{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"publications-section\">\n      {/* Staging Ground Section */}\n      <StagingGround\n        repository={repository}\n        selectedBranch={selectedBranch}\n        hasWriteAccess={hasWriteAccess}\n        profile={profile}\n      />\n      \n      <div className=\"section-header\">\n        <h3 className=\"section-title\">Published DAK Content</h3>\n        <p className=\"section-description\">\n          Access published Implementation Guide content for this DAK repository. Each branch is published \n          automatically via GitHub Actions to GitHub Pages.\n        </p>\n      </div>\n\n      <div className=\"publications-grid\">\n        {branches.map((branch) => {\n          const isMainBranch = branch.name === repository.default_branch || branch.name === 'main';\n          const publicationUrl = getPublicationUrl(branch.name);\n          const workflowStatus = getWorkflowStatusIcon(branch.name);\n\n          return (\n            <div key={branch.name} className={`publication-card ${isMainBranch ? 'main-branch' : ''}`}>\n              <div className=\"publication-header\">\n                <div className=\"branch-info\">\n                  <span className=\"branch-icon\">🌿</span>\n                  <span className=\"branch-name\">{branch.name}</span>\n                  {isMainBranch && <span className=\"main-badge\">MAIN</span>}\n                </div>\n                <div className=\"workflow-status\">\n                  {workflowStatus.link ? (\n                    <a \n                      href={workflowStatus.link} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className={`status-icon ${workflowStatus.className || ''}`}\n                      title={workflowStatus.title}\n                    >\n                      {workflowStatus.icon}\n                    </a>\n                  ) : (\n                    <span \n                      className={`status-icon ${workflowStatus.className || ''}`}\n                      title={workflowStatus.title}\n                    >\n                      {workflowStatus.icon}\n                    </span>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"publication-content\">\n                <div className=\"publication-url\">\n                  <label>Published at:</label>\n                  <a \n                    href={publicationUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"publication-link\"\n                  >\n                    {publicationUrl}\n                    <span className=\"external-link\">↗</span>\n                  </a>\n                </div>\n\n                <div className=\"publication-actions\">\n                  <button\n                    className=\"restart-workflow-btn\"\n                    onClick={() => handleRestartWorkflow(branch.name)}\n                    disabled={!hasWriteAccess}\n                    title={hasWriteAccess ? 'Restart build workflow for this branch' : 'Write permissions required'}\n                  >\n                    🔄 Rebuild\n                  </button>\n                  \n                  <a \n                    href={`https://github.com/${owner}/${repoName}/tree/${branch.name}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"view-source-btn\"\n                    title=\"View source code for this branch\"\n                  >\n                    👁️ View Source\n                  </a>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {branches.length === 0 && (\n        <div className=\"no-branches\">\n          <p>No publishable branches found (excluding gh-pages).</p>\n        </div>\n      )}\n\n      {/* SUSHI Status Section */}\n      <SushiStatus\n        profile={profile}\n        repository={repository}\n        selectedBranch={selectedBranch}\n        hasWriteAccess={hasWriteAccess}\n      />\n    </div>\n  );\n};\n\nexport default Publications;","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport { handleNavigationClick } from '../utils/navigationUtils';\n\nconst ForkStatusBar = ({ profile, repository, selectedBranch }) => {\n  const navigate = useNavigate();\n  \n  const [isExpanded, setIsExpanded] = useState(false);\n  const [forks, setForks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [parentRepository, setParentRepository] = useState(null);\n\n  // Get session storage key for this repository\n  const getStorageKey = React.useCallback(() => {\n    if (!repository) return null;\n    return `sgex_fork_status_${repository.full_name}`;\n  }, [repository]);\n\n  // Load expansion state from session storage\n  useEffect(() => {\n    const storageKey = getStorageKey();\n    if (storageKey) {\n      const savedState = sessionStorage.getItem(storageKey);\n      if (savedState !== null) {\n        setIsExpanded(JSON.parse(savedState));\n      }\n    }\n  }, [getStorageKey]);\n\n  // Save expansion state to session storage\n  const toggleExpansion = () => {\n    const newState = !isExpanded;\n    setIsExpanded(newState);\n    \n    const storageKey = getStorageKey();\n    if (storageKey) {\n      sessionStorage.setItem(storageKey, JSON.stringify(newState));\n    }\n  };\n\n  // Fetch forks and parent repository info when component mounts\n  useEffect(() => {\n    const fetchRepositoryInfo = async () => {\n      if (!repository) return;\n      \n      setLoading(true);\n      setError(null);\n      \n      try {\n        // Check if we need to fetch full repository details to get parent info\n        let fullRepository = repository;\n        if (!repository.parent && (repository.fork === true || repository.fork === undefined)) {\n          // Fetch full repository details to get parent information\n          try {\n            fullRepository = await githubService.getRepository(repository.owner.login, repository.name);\n          } catch (repoErr) {\n            console.warn('Could not fetch full repository details:', repoErr);\n            // Continue with existing repository data\n          }\n        }\n        \n        // Set parent repository if this is a fork\n        if (fullRepository.fork && fullRepository.parent) {\n          setParentRepository(fullRepository.parent);\n        }\n        \n        // Fetch forks for the current repository being viewed\n        const forks = await githubService.getRepositoryForks(repository.owner.login, repository.name);\n        setForks(forks);\n      } catch (err) {\n        console.error('Error fetching repository information:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRepositoryInfo();\n  }, [repository]);\n\n  // Generate DAK dashboard URL for a fork\n  const getForkDashboardUrl = (fork) => {\n    const owner = fork.owner.login;\n    const repoName = fork.name;\n    const branch = fork.default_branch || 'main';\n    return `/dashboard/${owner}/${repoName}/${branch}`;\n  };\n\n  // Handle parent repository navigation\n  const handleParentClick = (event) => {\n    if (!parentRepository) return;\n    \n    const dashboardUrl = getForkDashboardUrl(parentRepository);\n    const navigationState = {\n      profile: {\n        login: parentRepository.owner.login,\n        name: parentRepository.owner.login,\n        avatar_url: parentRepository.owner.avatar_url,\n        type: parentRepository.owner.type\n      },\n      repository: parentRepository,\n      selectedBranch: parentRepository.default_branch || 'main'\n    };\n    \n    handleNavigationClick(event, dashboardUrl, navigate, navigationState);\n  };\n\n  // Handle fork navigation\n  const handleForkClick = (event, fork) => {\n    const dashboardUrl = getForkDashboardUrl(fork);\n    const navigationState = {\n      profile: {\n        login: fork.owner.login,\n        name: fork.owner.login,\n        avatar_url: fork.owner.avatar_url,\n        type: fork.owner.type\n      },\n      repository: fork,\n      selectedBranch: fork.default_branch || 'main'\n    };\n    \n    handleNavigationClick(event, dashboardUrl, navigate, navigationState);\n  };\n\n  if (!repository || loading) {\n    return (\n      <div className=\"fork-status-bar loading\">\n        <div className=\"fork-status-header\">\n          <div className=\"fork-badge-placeholder\">\n            <span className=\"fork-icon\">🍴</span>\n            <span className=\"fork-count\">...</span>\n          </div>\n          <span className=\"fork-status-title\">Loading repository info...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"fork-status-bar error\">\n        <div className=\"fork-status-header\">\n          <div className=\"fork-badge\">\n            <span className=\"fork-icon\">🍴</span>\n            <span className=\"fork-count\">?</span>\n          </div>\n          <span className=\"fork-status-title\">Unable to load repository info</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`fork-status-bar ${isExpanded ? 'expanded' : 'collapsed'}`}>\n      <div className=\"fork-status-header\" onClick={toggleExpansion}>\n        <div className=\"fork-badge\">\n          <span className=\"fork-icon\">🍴</span>\n          <span className=\"fork-count\">{forks.length}</span>\n        </div>\n        <span className=\"fork-status-title\">\n          {parentRepository ? (\n            <>\n              Fork of{' '}\n              <span \n                className=\"parent-repo-link\" \n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleParentClick(e);\n                }}\n              >\n                {parentRepository.owner.login}/{parentRepository.name}\n              </span>\n              {forks.length > 0 && (\n                <> • {forks.length} fork{forks.length !== 1 ? 's' : ''}</>\n              )}\n            </>\n          ) : (\n            <>\n              {forks.length} fork{forks.length !== 1 ? 's' : ''} of {repository?.name || 'repository'}\n            </>\n          )}\n        </span>\n        <button className=\"fork-toggle-btn\" aria-label={isExpanded ? 'Collapse' : 'Expand'}>\n          <span className={`toggle-icon ${isExpanded ? 'expanded' : ''}`}>▼</span>\n        </button>\n      </div>\n      \n      {isExpanded && (\n        <div className=\"fork-list\">\n          {parentRepository && (\n            <div className=\"parent-section\">\n              <h4 className=\"section-title\">Parent Repository</h4>\n              <div \n                className=\"fork-item parent-item\"\n                onClick={(event) => handleParentClick(event)}\n              >\n                <div className=\"fork-avatar\">\n                  <img \n                    src={parentRepository.owner.avatar_url} \n                    alt={parentRepository.owner.login}\n                    className=\"fork-owner-avatar\"\n                  />\n                </div>\n                <div className=\"fork-info\">\n                  <div className=\"fork-name\">\n                    <strong>{parentRepository.owner.login}/{parentRepository.name}</strong>\n                    <span className=\"parent-badge\">Parent</span>\n                  </div>\n                  <div className=\"fork-description\">\n                    {parentRepository.description || 'No description available'}\n                  </div>\n                  <div className=\"fork-stats\">\n                    <span className=\"fork-stat\">\n                      ⭐ {parentRepository.stargazers_count}\n                    </span>\n                    <span className=\"fork-stat\">\n                      📝 {parentRepository.open_issues_count} issues\n                    </span>\n                    <span className=\"fork-stat\">\n                      📅 Updated {new Date(parentRepository.updated_at).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"fork-actions\">\n                  <span className=\"fork-link-hint\">Click to view DAK →</span>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {forks.length === 0 ? (\n            !parentRepository && (\n              <div className=\"no-forks\">\n                <p>No forks found for this repository.</p>\n              </div>\n            )\n          ) : (\n            <div className=\"forks-section\">\n              {parentRepository && <h4 className=\"section-title\">Forks ({forks.length})</h4>}\n              <div className=\"fork-items\">\n                {forks.map((fork) => (\n                  <div \n                    key={fork.id} \n                    className=\"fork-item\"\n                    onClick={(event) => handleForkClick(event, fork)}\n                  >\n                    <div className=\"fork-avatar\">\n                      <img \n                        src={fork.owner.avatar_url} \n                        alt={fork.owner.login}\n                        className=\"fork-owner-avatar\"\n                      />\n                    </div>\n                    <div className=\"fork-info\">\n                      <div className=\"fork-name\">\n                        <strong>{fork.owner.login}/{fork.name}</strong>\n                      </div>\n                      <div className=\"fork-description\">\n                        {fork.description || 'No description available'}\n                      </div>\n                      <div className=\"fork-stats\">\n                        <span className=\"fork-stat\">\n                          ⭐ {fork.stargazers_count}\n                        </span>\n                        <span className=\"fork-stat\">\n                          📝 {fork.open_issues_count} issues\n                        </span>\n                        <span className=\"fork-stat\">\n                          📅 Updated {new Date(fork.updated_at).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"fork-actions\">\n                      <span className=\"fork-link-hint\">Click to view DAK →</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ForkStatusBar;","import React, { useState, useEffect } from 'react';\nimport { PageLayout, useDAKParams } from './framework';\nimport githubService from '../services/githubService';\nimport branchContextService from '../services/branchContextService';\nimport DAKStatusBox from './DAKStatusBox';\nimport Publications from './Publications';\nimport ForkStatusBar from './ForkStatusBar';\n\nconst DAKDashboardWithFramework = () => {\n  return (\n    <PageLayout pageName=\"dashboard\">\n      <DAKDashboardContent />\n    </PageLayout>\n  );\n};\n\nconst DAKDashboardContent = () => {\n  const { profile, repository, branch, navigate } = useDAKParams();\n  \n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n  const [showPermissionDialog, setShowPermissionDialog] = useState(false);\n  const [activeTab, setActiveTab] = useState('core'); // 'core', 'additional', or 'publications'\n  const [issueCounts, setIssueCounts] = useState({});\n\n  // Check write permissions\n  useEffect(() => {\n    const checkWritePermissions = async () => {\n      if (!repository || !githubService.isAuth()) {\n        setHasWriteAccess(false);\n        return;\n      }\n\n      try {\n        // Check repository permissions\n        const hasPermission = await githubService.checkRepositoryWritePermissions(repository.owner.login, repository.name);\n        setHasWriteAccess(hasPermission);\n      } catch (error) {\n        console.error('Error checking repository permissions:', error);\n        setHasWriteAccess(false);\n      }\n    };\n\n    checkWritePermissions();\n  }, [repository]);\n\n  // Set branch context\n  useEffect(() => {\n    if (profile && repository && branch) {\n      branchContextService.setBranchContext(profile.login, repository.name, branch);\n    }\n  }, [profile, repository, branch]);\n\n  // Fetch issue counts for repository (if authenticated)\n  useEffect(() => {\n    const fetchIssueCounts = async () => {\n      if (!repository || !githubService.isAuth()) {\n        return;\n      }\n\n      try {\n        const issues = await githubService.getIssues(repository.owner.login, repository.name);\n        \n        // Count issues by label\n        const counts = {};\n        issues.forEach(issue => {\n          issue.labels.forEach(label => {\n            counts[label.name] = (counts[label.name] || 0) + 1;\n          });\n        });\n        \n        setIssueCounts(counts);\n      } catch (error) {\n        console.warn('Could not fetch issue counts:', error);\n      }\n    };\n\n    fetchIssueCounts();\n  }, [repository]);\n\n  const handleComponentNavigate = (componentPath) => {\n    if (profile && repository) {\n      navigate(`/${componentPath}/${profile.login}/${repository.name}/${branch}`, {\n        state: {\n          profile,\n          repository,\n          selectedBranch: branch\n        }\n      });\n    }\n  };\n\n  const handlePublicationNavigate = () => {\n    if (profile && repository) {\n      navigate(`/publications/${profile.login}/${repository.name}/${branch}`, {\n        state: {\n          profile,\n          repository,\n          selectedBranch: branch\n        }\n      });\n    }\n  };\n\n  // Define the 9 core DAK components based on WHO SMART Guidelines documentation\n  const dakComponents = [\n    // Core Components (Level 2)\n    {\n      id: 'health-interventions',\n      title: 'Health Interventions and Recommendations',\n      description: 'Clinical guidelines and health intervention specifications that define evidence-based care recommendations',\n      icon: '📖',\n      path: 'health-interventions',\n      level: 'Level 2: Core Components',\n      color: '#0078d4'\n    },\n    {\n      id: 'generic-personas',\n      title: 'Generic Personas',\n      description: 'Standardized user roles and actor definitions that represent different types of healthcare workers and patients',\n      icon: '👥',\n      path: 'actor-editor',\n      level: 'Level 2: Core Components',\n      color: '#107c10'\n    },\n    {\n      id: 'user-scenarios',\n      title: 'User Scenarios',\n      description: 'Narrative descriptions of how different personas interact with the system in specific healthcare contexts',\n      icon: '📝',\n      path: 'user-scenarios',\n      level: 'Level 2: Core Components',\n      color: '#881798'\n    },\n    {\n      id: 'business-processes',\n      title: 'Generic Business Processes and Workflows',\n      description: 'BPMN workflows and business process definitions that model clinical workflows and care pathways',\n      icon: '🔄',\n      path: 'business-process-selection',\n      level: 'Level 2: Core Components',\n      color: '#d13438'\n    },\n    {\n      id: 'core-data-elements',\n      title: 'Core Data Elements',\n      description: 'Essential data structures and terminology needed for clinical data capture and exchange',\n      icon: '🗃️',\n      path: 'core-data-dictionary-viewer',\n      level: 'Level 2: Core Components',\n      color: '#ff8c00'\n    },\n    {\n      id: 'decision-support',\n      title: 'Decision-Support Logic',\n      description: 'DMN decision tables and clinical decision support rules that encode clinical logic',\n      icon: '🎯',\n      path: 'decision-support-logic',\n      level: 'Level 2: Core Components',\n      color: '#00bcf2'\n    },\n    {\n      id: 'program-indicators',\n      title: 'Program Indicators',\n      description: 'Performance indicators and measurement definitions for monitoring and evaluation',\n      icon: '📊',\n      path: 'program-indicators',\n      level: 'Level 2: Core Components',\n      color: '#498205'\n    },\n    {\n      id: 'functional-requirements',\n      title: 'Functional and Non-Functional Requirements',\n      description: 'System requirements specifications that define capabilities and constraints',\n      icon: '⚙️',\n      path: 'functional-requirements',\n      level: 'Level 2: Core Components',\n      color: '#6b69d6'\n    },\n    {\n      id: 'testing',\n      title: 'Testing',\n      description: 'Feature files and test scenarios for validating the DAK implementation',\n      icon: '🧪',\n      path: 'testing-viewer',\n      level: 'Level 2: Core Components',\n      color: '#8b5cf6'\n    },\n    // Additional Components (Level 3)\n    {\n      id: 'terminology',\n      title: 'Terminology',\n      description: 'Code systems, value sets, and concept maps',\n      icon: '🏷️',\n      path: 'terminology',\n      level: 'Level 3: Technical Implementation',\n      color: '#ff8c00'\n    },\n    {\n      id: 'profiles',\n      title: 'FHIR Profiles',\n      description: 'FHIR resource profiles and constraints',\n      icon: '🔧',\n      path: 'profiles',\n      level: 'Level 3: Technical Implementation',\n      color: '#00bcf2'\n    },\n    {\n      id: 'extensions',\n      title: 'FHIR Extensions',\n      description: 'Custom FHIR extensions and modifications',\n      icon: '🧩',\n      path: 'extensions',\n      level: 'Level 3: Technical Implementation',\n      color: '#498205'\n    },\n    {\n      id: 'test-data',\n      title: 'Test Data & Examples',\n      description: 'Sample data and testing resources',\n      icon: '🧪',\n      path: 'test-data',\n      level: 'Level 3: Technical Implementation',\n      color: '#8b5cf6'\n    },\n    {\n      id: 'questionnaire-editor',\n      title: 'FHIR Questionnaires',\n      description: 'Structured questionnaires and forms for data collection using FHIR standard',\n      icon: '📋',\n      path: 'questionnaire-editor',\n      level: 'Level 3: Technical Implementation',\n      color: '#17a2b8'\n    }\n  ];\n\n  const coreComponents = dakComponents.filter(comp => comp.level.includes('Level 2: Core Components'));\n  const additionalComponents = dakComponents.filter(comp => comp.level.includes('Level 3: Technical Implementation'));\n\n  return (\n    <div className=\"dak-dashboard\">\n        <div className=\"dashboard-header\">\n          <div className=\"dashboard-title\">\n            <h1>{repository?.name} Dashboard</h1>\n            <p className=\"dashboard-subtitle\">\n              Digital Adaptation Kit for {profile?.name || profile?.login}\n            </p>\n          </div>\n        </div>\n\n        {/* Fork Status Bar - shows forks of sgex repository */}\n        <ForkStatusBar \n          profile={profile}\n          repository={repository}\n          selectedBranch={branch}\n        />\n\n        {repository && (\n          <DAKStatusBox \n            repository={repository}\n            profile={profile}\n            selectedBranch={branch}\n            issueCounts={issueCounts}\n          />\n        )}\n\n        <div className=\"tab-navigation\">\n          <button \n            className={`tab-button ${activeTab === 'core' ? 'active' : ''}`}\n            onClick={() => setActiveTab('core')}\n          >\n            <span className=\"tab-icon\">⭐</span>\n            <span className=\"tab-text\">9 Core Components</span>\n          </button>\n          <button \n            className={`tab-button ${activeTab === 'additional' ? 'active' : ''}`}\n            onClick={() => setActiveTab('additional')}\n          >\n            <span className=\"tab-icon\">🔧</span>\n            <span className=\"tab-text\">Additional Components ({additionalComponents.length})</span>\n          </button>\n          <button \n            className={`tab-button ${activeTab === 'publications' ? 'active' : ''}`}\n            onClick={() => setActiveTab('publications')}\n          >\n            <span className=\"tab-icon\">📚</span>\n            <span className=\"tab-text\">Publications</span>\n          </button>\n        </div>\n\n        <div className=\"dashboard-content\">\n          {activeTab === 'core' && (\n            <div className=\"components-grid core-components\">\n              {coreComponents.map(component => (\n                <div \n                  key={component.id}\n                  className=\"component-card\"\n                  onClick={() => handleComponentNavigate(component.path)}\n                >\n                  <div className=\"component-icon\">{component.icon}</div>\n                  <h3>{component.title}</h3>\n                  <p>{component.description}</p>\n                  {issueCounts[component.id] > 0 && (\n                    <div className=\"issue-badge\">\n                      {issueCounts[component.id]} issues\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n\n          {activeTab === 'additional' && (\n            <div className=\"components-grid additional-components\">\n              {additionalComponents.map(component => (\n                <div \n                  key={component.id}\n                  className=\"component-card\"\n                  onClick={() => handleComponentNavigate(component.path)}\n                >\n                  <div className=\"component-icon\">{component.icon}</div>\n                  <h3>{component.title}</h3>\n                  <p>{component.description}</p>\n                  {issueCounts[component.id] > 0 && (\n                    <div className=\"issue-badge\">\n                      {issueCounts[component.id]} issues\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n\n          {activeTab === 'publications' && (\n            <div className=\"publications-section\">\n              <Publications \n                repository={repository}\n                profile={profile}\n                selectedBranch={branch}\n                onNavigate={handlePublicationNavigate}\n              />\n            </div>\n          )}\n        </div>\n\n        {showPermissionDialog && (\n          <div className=\"permission-dialog\">\n            <div className=\"dialog-overlay\" onClick={() => setShowPermissionDialog(false)}></div>\n            <div className=\"dialog-content\">\n              <h3>Repository Permissions</h3>\n              <p>\n                You have {hasWriteAccess ? 'write' : 'read-only'} access to this repository.\n                {!hasWriteAccess && ' You can view content but cannot make changes.'}\n              </p>\n              <button onClick={() => setShowPermissionDialog(false)}>\n                Got it\n              </button>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default DAKDashboardWithFramework;"],"names":["handleNavigationClick","event","path","navigate","state","arguments","length","undefined","ctrlKey","metaKey","shouldOpenInNewTab","fullUrl","relativePath","basePath","process","baseUrl","window","location","origin","cleanPath","startsWith","slice","concat","cleanBasePath","endsWith","constructFullUrl","open","constructor","this","initialized","compilationResults","logs","listeners","Set","loadFSHFiles","repository","branch","profile","log","full_name","githubFiles","loadGitHubFSHFiles","stagingFiles","loadStagingGroundFSHFiles","mergedFiles","mergeFSHFiles","error","message","fshFiles","fshDirectories","directory","files","githubService","getRepositoryContents","owner","login","name","token","Array","isArray","file","type","content","getFileContent","push","source","size","rootFiles","stagingGround","stagingGroundService","getStagingGround","split","pop","metadata","timestamp","stagingFile","existingIndex","findIndex","f","loadSushiConfig","githubConfig","stagingConfig","configContent","yaml","id","stagingConfigFile","getStagingFiles","find","config","Error","hasGithubVersion","hasStagingVersion","isUsingStaging","saveSushiConfigToStaging","yamlContent","indent","lineWidth","quotingType","saveFile","validateSushiConfig","errors","warnings","test","version","fhirVersion","includes","publisher","url","email","dependencies","valid","loadPagesWithSources","pages","pageKey","pageValue","Object","entries","page","_objectSpread","key","sources","github","staging","sourceFileName","runSUSHI","clearLogs","configResult","success","analysis","analyzeFSHFiles","configSources","notifyListeners","result","stats","getAnalysisStats","totalFiles","filter","overrides","fileTypes","totalLines","profiles","extensions","valueSets","codeSystems","instances","forEach","extension","lines","constructs","level","logEntry","Date","toISOString","console","getLogs","getLogsByLevel","searchLogs","searchTerm","toLowerCase","exportLogsAsText","map","toUpperCase","join","getCompilationResults","addListener","listener","add","delete","results","isInitialized","validateFSH","fshContent","i","line","trim","sushiConfigSchema","require","validators","Map","initializeSchemaValidator","initializeDefaultValidators","ajv","Ajv","allErrors","verbose","addFormats","sushiConfigValidator","compile","addValidator","description","validator","validateXMLWellFormed","bind","validateBPMNNamespace","validateBPMNStartEvent","validateDMNNamespace","validateJSONSyntax","validateFHIRResourceType","validateFileSize","validateFilenameConventions","fileType","validatorId","has","set","get","removeValidator","validateFile","filePath","fileExtension","getFileExtension","fileName","getFileName","typeValidators","universalValidators","validateStagingGround","summary","warning","info","validatedAt","now","fileResults","canSave","parser","DOMParser","parserError","parseFromString","querySelector","textContent","suggestion","JSON","parse","json","validResourceTypes","resourceType","sizeInBytes","Blob","toFixed","issues","parsedConfig","yamlError","errorMessages","_error$params","_error$params2","field","instancePath","replace","params","missingProperty","allowedValues","details","whoValidation","validateWHOSmartGuidelines","canonical","jurisdiction","parts","formatValidationResults","validation","formatted","_ref","getValidationSummary","hasIssues","_stagingGround$files","_stagingGround$files2","isOpen","onClose","selectedBranch","hasWriteAccess","onSaveSuccess","commitMessage","setCommitMessage","useState","overrideValidation","setOverrideValidation","isSaving","setIsSaving","setError","showValidationDetails","setShowValidationDetails","useEffect","validationSummary","dakComplianceService","hasErrors","getErrorMessage","status","formatValidationIcon","_jsx","className","children","_jsxs","onClick","disabled","index","e","stopPropagation","confirm","removeFile","title","_ref2","checked","onChange","target","htmlFor","value","placeholder","rows","required","async","_repository$owner","isDemo","Promise","resolve","setTimeout","sha","createCommit","html_url","err","_Fragment","setStagingGround","setValidation","loading","setLoading","showSaveDialog","setShowSaveDialog","loadStagingGroundData","useCallback","currentStagingGround","initialize","updatedStagingGround","stagingGroundData","validationResult","hasChanges","filesCount","handleSave","alert","lastModified","toLocaleTimeString","handleClearChanges","clearStagingGround","SaveDialog","substring","_editingConfig$publis","_sushiConfig$publishe","_editingConfig$publis2","_sushiConfig$publishe2","_editingConfig$publis3","_sushiConfig$publishe3","useNavigate","expanded","setExpanded","sushiConfig","setSushiConfig","setConfigSources","editMode","setEditMode","editingConfig","setEditingConfig","setPages","showSource","setShowSource","sourceContent","setSourceContent","expandedPages","setExpandedPages","expandedDependencies","setExpandedDependencies","expandedAdvanced","setExpandedAdvanced","repoName","sushiService","pagesWithSources","handleSushiRunnerClick","navigationState","handleEditToggle","handleFieldChange","prev","handlePublisherChange","idx","href","rel","keys","handleDependencyRemove","depName","newDeps","handleDependencyAdd","prompt","copyrightYear","sourceType","then","dump","viewSource","copyToClipboard","text","navigator","clipboard","writeText","catch","branches","setBranches","workflows","setWorkflows","workflowRuns","setWorkflowRuns","commit","triggers","mockWorkflowRuns","conclusion","updated_at","filteredBranches","getBranches","workflowsData","getWorkflows","ghbuildWorkflow","workflow","runsByBranch","runs","getWorkflowRunsForWorkflow","per_page","warn","fetchPublicationData","StagingGround","isMainBranch","default_branch","publicationUrl","branchName","workflowStatus","run","icon","link","getWorkflowStatusIcon","triggerWorkflow","reload","handleRestartWorkflow","SushiStatus","isExpanded","setIsExpanded","forks","setForks","parentRepository","setParentRepository","getStorageKey","React","storageKey","savedState","sessionStorage","getItem","fullRepository","parent","fork","getRepository","repoErr","getRepositoryForks","fetchRepositoryInfo","getForkDashboardUrl","handleParentClick","dashboardUrl","avatar_url","toggleExpansion","newState","setItem","stringify","src","alt","stargazers_count","open_issues_count","toLocaleDateString","handleForkClick","DAKDashboardContent","useDAKParams","setHasWriteAccess","showPermissionDialog","setShowPermissionDialog","activeTab","setActiveTab","issueCounts","setIssueCounts","isAuth","hasPermission","checkRepositoryWritePermissions","checkWritePermissions","branchContextService","setBranchContext","getIssues","counts","issue","labels","label","fetchIssueCounts","handleComponentNavigate","componentPath","dakComponents","color","coreComponents","comp","additionalComponents","ForkStatusBar","DAKStatusBox","component","Publications","onNavigate","handlePublicationNavigate","DAKDashboardWithFramework","PageLayout","pageName"],"sourceRoot":""}