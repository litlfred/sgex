# GitHub Authentication Configuration for SGEX Workbench
#
# SGEX Workbench supports two authentication methods:
#
# 1. üîê GitHub OAuth Device Flow (Recommended)
# 2. üîë GitHub Personal Access Tokens (PATs) - Fallback
#
# ============================================================================
# OAuth Device Flow Configuration (Optional but Recommended)
# ============================================================================
# 
# To enable OAuth authentication, set your GitHub OAuth App Client ID:
# REACT_APP_SGEX_GITHUB_OAUTH_CLIENT_ID=your_oauth_app_client_id_here
#
# üìã OAuth Setup Instructions:
# 1. Create a GitHub OAuth App at https://github.com/settings/applications/new
# 2. Set these values in your OAuth app:
#    - Application name: "SGEX Workbench" (or your preferred name)
#    - Homepage URL: "https://yourusername.github.io/sgex/"
#    - Authorization callback URL: "https://yourusername.github.io/sgex/" 
#      (Note: Not used in Device Flow, but required by GitHub)
# 3. Copy the "Client ID" from your OAuth app
# 4. For GitHub Pages deployment:
#    - Go to repository Settings ‚Üí Secrets and variables ‚Üí Actions
#    - Add secret: SGEX_GITHUB_OAUTH_CLIENT_ID = your_client_id
#    - The deployment workflows will automatically use this secret
#
# ‚úÖ OAuth Benefits:
# - Higher rate limits (5000 requests/hour vs 60 for unauthenticated)
# - Seamless authentication without manual token creation  
# - Better user experience with standard OAuth flow
# - No client secrets needed (frontend-safe)
#
# üîí Security Notes:
# - OAuth Client IDs are safe to expose publicly (like API keys for frontend apps)
# - No sensitive information is contained in the Client ID
# - This is standard practice for Single Page Applications (SPAs)
# - Examples: GitHub Desktop, VS Code, GitLens all expose their Client IDs
#
# ============================================================================
# Personal Access Token Fallback
# ============================================================================
#
# If OAuth is not configured, the app will guide users through creating
# their own Personal Access Tokens with built-in instructions for:
# 1. Creating fine-grained or classic Personal Access Tokens
# 2. Setting the correct permissions (Contents, Metadata, Pull requests)  
# 3. Securely entering the token into the application
#
# üîê Token Security:
# - All authentication tokens are stored securely in the user's browser
# - Uses XOR encryption for local storage
# - Tokens never transmitted outside the browser
# - No backend server means no server-side credential exposure
#
# ============================================================================
# For Development
# ============================================================================
#
# For local development, you can create a .env.local file with:
# REACT_APP_SGEX_GITHUB_OAUTH_CLIENT_ID=your_oauth_app_client_id
#
# This file is git-ignored and safe for local development testing.