{"version":3,"file":"static/js/166.d62c559b.chunk.js","mappings":"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","sources":["components/BPMNViewer.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport { PageLayout, useDAKParams } from './framework';\nimport { createLazyBpmnViewer } from '../utils/lazyRouteUtils';\n\nconst BPMNViewerComponent = () => {\n  return (\n    <PageLayout pageName=\"bpmn-viewer\">\n      <BPMNViewerContent />\n    </PageLayout>\n  );\n};\n\nconst BPMNViewerContent = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const viewerRef = useRef(null);\n  const containerRef = useRef(null);\n  \n  // Try to get data from framework params first, then fall back to location state\n  const frameworkData = useDAKParams();\n  \n  console.log('BPMNViewer: Framework data received:', frameworkData);\n  console.log('BPMNViewer: Location state:', location.state);\n  \n  const { profile, repository, component, selectedFile, selectedBranch } = location.state || {};\n  \n  // Use framework data if available, otherwise use location state\n  const currentProfile = frameworkData?.profile || profile;\n  const currentRepository = frameworkData?.repository || repository;\n  const currentBranch = frameworkData?.branch || selectedBranch;\n  const assetPath = frameworkData?.asset;\n  \n  console.log('BPMNViewer: Final computed values:', {\n    currentProfile: !!currentProfile,\n    currentRepository: !!currentRepository,\n    currentBranch,\n    assetPath\n  });\n  \n  // If we have asset path from URL, create a selectedFile object\n  const currentSelectedFile = useMemo(() => {\n    return assetPath ? {\n      name: assetPath.split('/').pop(),\n      path: assetPath\n    } : selectedFile;\n  }, [assetPath, selectedFile]);\n  \n  const [loading, setLoading] = useState(true);\n  const [loadingStep, setLoadingStep] = useState('initializing');\n  const [error, setError] = useState(null);\n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n  const [enhancedFullwidth, setEnhancedFullwidth] = useState(false);\n  const [autoHide, setAutoHide] = useState(false);\n\n  // Check write permissions\n  useEffect(() => {\n    const checkPermissions = async () => {\n      if (currentRepository && currentProfile) {\n        try {\n          // Simple permission check - in real app, this would use githubService\n          const writeAccess = currentProfile.token && currentRepository.permissions?.push;\n          setHasWriteAccess(writeAccess || false);\n        } catch (error) {\n          console.warn('Could not check write permissions:', error);\n          setHasWriteAccess(false);\n        }\n      }\n    };\n\n    checkPermissions();\n  }, [currentRepository, currentProfile]);\n\n  // Load BPMN file content with enhanced loading states\n  const loadBpmnContent = useCallback(async () => {\n    console.log('🚀 BPMNViewer: loadBpmnContent called with:', {\n      hasViewer: !!viewerRef.current,\n      selectedFile: currentSelectedFile,\n      repository: currentRepository ? {\n        name: currentRepository.name,\n        owner: currentRepository.owner\n      } : null\n    });\n\n    if (!viewerRef.current || !currentSelectedFile || !currentRepository) {\n      console.warn('❌ BPMNViewer: Missing required parameters for loadBpmnContent:', {\n        hasViewer: !!viewerRef.current,\n        hasSelectedFile: !!currentSelectedFile,\n        hasRepository: !!currentRepository\n      });\n      return;\n    }\n\n    // Declare variables outside try block so they're accessible in catch block\n    const owner = currentRepository.owner?.login || currentRepository.full_name.split('/')[0];\n    const repoName = currentRepository.name;\n    const ref = currentBranch || 'main';\n    try {\n      setLoading(true);\n      setError(null);\n      setLoadingStep('initializing');\n\n      console.log('🔍 BPMNViewer: Repository and file analysis:', {\n        repository: {\n          name: currentRepository.name,\n          full_name: currentRepository.full_name,\n          owner: currentRepository.owner,\n          isDemo: currentRepository.isDemo,\n          default_branch: currentRepository.default_branch\n        },\n        selectedFile: {\n          name: currentSelectedFile.name,\n          path: currentSelectedFile.path,\n          size: currentSelectedFile.size\n        },\n        derivedOwner: owner,\n        repoName: repoName,\n        ref: ref,\n        githubServiceAuthenticated: githubService.isAuth()\n      });\n\n      setLoadingStep('fetching');\n      console.log(`📂 BPMNViewer: Preparing to load BPMN content from ${owner}/${repoName}:${currentSelectedFile.path} (ref: ${ref})`);\n      console.log('📋 BPMNViewer: Full selected file object:', JSON.stringify(currentSelectedFile, null, 2));\n\n      let bpmnXml;\n      const isDemo = currentSelectedFile.path?.includes('demo/') || currentSelectedFile.sha?.startsWith('demo-');\n      \n      if (isDemo) {\n        // For demo files, generate BPMN XML locally\n        console.log('🎭 BPMNViewer: Demo file detected, generating BPMN content locally');\n        setLoadingStep('generating');\n        const processName = currentSelectedFile.name.replace('.bpmn', '').replace(/[-_]/g, ' ');\n        bpmnXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn:definitions xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" \n                  xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" \n                  xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" \n                  xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" \n                  id=\"Definitions_1\" targetNamespace=\"http://bpmn.io/schema/bpmn\">\n  <bpmn:process id=\"Process_${currentSelectedFile.name.replace(/[^a-zA-Z0-9]/g, '_')}\" isExecutable=\"false\">\n    <bpmn:startEvent id=\"StartEvent_1\" name=\"Start\">\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:task id=\"Task_1\" name=\"${processName}\">\n      <bpmn:incoming>Flow_1</bpmn:incoming>\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\n    </bpmn:task>\n    <bpmn:endEvent id=\"EndEvent_1\" name=\"End\">\n      <bpmn:incoming>Flow_2</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id=\"Flow_1\" sourceRef=\"StartEvent_1\" targetRef=\"Task_1\" />\n    <bpmn:sequenceFlow id=\"Flow_2\" sourceRef=\"Task_1\" targetRef=\"EndEvent_1\" />\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_${currentSelectedFile.name.replace(/[^a-zA-Z0-9]/g, '_')}\">\n      <bpmndi:BPMNShape id=\"StartEvent_1_di\" bpmnElement=\"StartEvent_1\">\n        <dc:Bounds x=\"152\" y=\"82\" width=\"36\" height=\"36\" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x=\"158\" y=\"125\" width=\"24\" height=\"14\" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Task_1_di\" bpmnElement=\"Task_1\">\n        <dc:Bounds x=\"250\" y=\"60\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"EndEvent_1_di\" bpmnElement=\"EndEvent_1\">\n        <dc:Bounds x=\"402\" y=\"82\" width=\"36\" height=\"36\" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x=\"410\" y=\"125\" width=\"20\" height=\"14\" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id=\"Flow_1_di\" bpmnElement=\"Flow_1\">\n        <di:waypoint x=\"188\" y=\"100\" />\n        <di:waypoint x=\"250\" y=\"100\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_2_di\" bpmnElement=\"Flow_2\">\n        <di:waypoint x=\"350\" y=\"100\" />\n        <di:waypoint x=\"402\" y=\"100\" />\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>`;\n      } else {\n        // For real files, use githubService to fetch file content\n        setLoadingStep('downloading');\n        bpmnXml = await githubService.getFileContent(owner, repoName, currentSelectedFile.path, ref);\n      }\n      \n      // Validate BPMN content\n      setLoadingStep('validating');\n      if (!bpmnXml || !bpmnXml.trim()) {\n        throw new Error('Empty or invalid BPMN file content');\n      }\n      \n      if (!bpmnXml.includes('bpmn:definitions') && !bpmnXml.includes('<definitions')) {\n        throw new Error('File does not appear to contain valid BPMN XML content');\n      }\n\n      // Import XML into viewer\n      setLoadingStep('importing');\n      console.log('🎨 BPMNViewer: Importing XML into BPMN viewer...');\n      await viewerRef.current.importXML(bpmnXml);\n      \n      // Center the diagram\n      setLoadingStep('centering');\n      try {\n        const canvas = viewerRef.current.get('canvas');\n        canvas.zoom('fit-viewport');\n        console.log('✅ BPMNViewer: Successfully loaded and centered BPMN diagram');\n      } catch (centerError) {\n        console.warn('⚠️ BPMNViewer: Could not center diagram:', centerError);\n      }\n      \n      // Force immediate and comprehensive visibility\n      const forceVisibility = () => {\n        const container = containerRef.current;\n        if (container) {\n          // Force visibility on all SVG elements and their children\n          const svgElements = container.querySelectorAll('svg, svg *');\n          svgElements.forEach(element => {\n            element.style.opacity = '1';\n            element.style.visibility = 'visible';\n            element.style.display = element.tagName.toLowerCase() === 'svg' ? 'block' : '';\n          });\n          \n          // Also force the container itself to be visible\n          container.style.opacity = '1';\n          container.style.visibility = 'visible';\n          container.style.display = 'block';\n          \n          console.log('🎨 BPMNViewer: Forced comprehensive SVG visibility');\n        }\n      };\n      \n      // Apply immediately\n      forceVisibility();\n      \n      // Also apply after a short delay to catch any delayed rendering\n      setTimeout(forceVisibility, 50);\n      setTimeout(forceVisibility, 200);\n      \n      setLoadingStep('complete');\n      setLoading(false);\n    } catch (err) {\n      console.error('💥 BPMNViewer: Error loading BPMN file:', err);\n      console.error('🔍 BPMNViewer: Full error details:', {\n        message: err.message,\n        status: err.status,\n        stack: err.stack,\n        repository: {\n          owner: owner,\n          name: repoName,\n          ref: ref\n        },\n        file: {\n          name: currentSelectedFile.name,\n          path: currentSelectedFile.path\n        }\n      });\n      \n      setLoadingStep('error');\n      // Provide specific error messages\n      if (err.status === 404) {\n        setError('BPMN file not found in the repository.');\n      } else if (err.status === 403) {\n        setError('Access denied. This repository may be private and require authentication.');\n      } else if (err.message.includes('Empty or invalid BPMN')) {\n        setError('The selected file appears to be empty or corrupted.');\n      } else if (err.message.includes('does not appear to contain valid BPMN')) {\n        setError('The selected file does not appear to contain valid BPMN XML content.');\n      } else {\n        setError(`Failed to load BPMN diagram: ${err.message}`);\n      }\n      \n      setLoading(false);\n    }\n  }, [currentSelectedFile, currentRepository, currentBranch]);\n\n  const cleanupContainer = useCallback(() => {\n    if (containerRef.current) {\n      containerRef.current.innerHTML = '';\n      console.log('🧹 BPMNViewer: Container cleaned up');\n    }\n  }, []);\n\n  // Initialize BPMN viewer - simplified to avoid race conditions\n  useEffect(() => {\n    const initializeViewer = async () => {\n      console.log('🛠️ BPMNViewer: initializeViewer called with:', {\n        hasContainer: !!containerRef.current,\n        hasViewer: !!viewerRef.current,\n        selectedFile: currentSelectedFile ? currentSelectedFile.name : 'none',\n        containerRefCurrent: containerRef.current,\n        viewerRefCurrent: viewerRef.current\n      });\n\n      if (containerRef.current && !viewerRef.current && currentSelectedFile) {\n        try {\n          // Clean the container before creating a new viewer\n          cleanupContainer();\n          \n          console.log('🔧 BPMNViewer: Creating new BPMN viewer...');\n          console.log('🔧 BPMNViewer: Container element details:', {\n            tagName: containerRef.current.tagName,\n            className: containerRef.current.className,\n            clientWidth: containerRef.current.clientWidth,\n            clientHeight: containerRef.current.clientHeight,\n            innerHTML: containerRef.current.innerHTML.length\n          });\n          \n          // Lazy load BPMN.js viewer to improve initial page responsiveness\n          viewerRef.current = await createLazyBpmnViewer({\n            container: containerRef.current\n          });\n          console.log('✅ BPMNViewer: BPMN viewer initialized successfully');\n          console.log('📞 BPMNViewer: About to call loadBpmnContent()...');\n          \n          loadBpmnContent();\n        } catch (error) {\n          console.error('❌ BPMNViewer: Failed to initialize BPMN viewer:', error);\n          console.error('🔍 BPMNViewer: Initialization error details:', {\n            message: error.message,\n            stack: error.stack,\n            containerExists: !!containerRef.current,\n            containerContent: containerRef.current ? containerRef.current.innerHTML : 'N/A'\n          });\n          \n          // If it's an \"element already exists\" error, try to clean up and retry once\n          if (error.message.includes('already exists')) {\n            console.log('🔄 BPMNViewer: Detected \"element already exists\" error, attempting cleanup and retry...');\n            cleanupContainer();\n            \n            // Wait a bit and try again\n            setTimeout(async () => {\n              if (containerRef.current && !viewerRef.current) {\n                try {\n                  console.log('🔄 BPMNViewer: Retrying viewer creation after cleanup...');\n                  // Lazy load BPMN.js viewer to improve initial page responsiveness\n                  viewerRef.current = await createLazyBpmnViewer({\n                    container: containerRef.current\n                  });\n                  console.log('✅ BPMNViewer: BPMN viewer initialized successfully on retry');\n                  loadBpmnContent();\n                } catch (retryError) {\n                  console.error('❌ BPMNViewer: Failed to initialize BPMN viewer on retry:', retryError);\n                  setError(`Failed to initialize BPMN viewer: ${retryError.message}`);\n                  setLoading(false);\n                }\n              }\n            }, 100);\n          } else {\n            setError(`Failed to initialize BPMN viewer: ${error.message}`);\n            setLoading(false);\n          }\n        }\n      } else {\n        console.log('⚠️ BPMNViewer: Skipping viewer initialization:', {\n          hasContainer: !!containerRef.current,\n          hasViewer: !!viewerRef.current,\n          hasSelectedFile: !!currentSelectedFile,\n          reason: !containerRef.current ? 'No container' : \n                  viewerRef.current ? 'Viewer already exists' : \n                  !currentSelectedFile ? 'No selected file' : 'Unknown'\n        });\n      }\n    };\n\n    const waitForContainer = (attempt = 0) => {\n      const maxAttempts = 50; // Try for up to 5 seconds (50 * 100ms)\n      \n      if (containerRef.current) {\n        console.log(`✅ BPMNViewer: Container found on attempt ${attempt + 1}`);\n        initializeViewer();\n      } else if (attempt < maxAttempts) {\n        console.log(`⏳ BPMNViewer: Container not ready, attempt ${attempt + 1}/${maxAttempts}, retrying in 100ms...`);\n        setTimeout(() => waitForContainer(attempt + 1), 100);\n      } else {\n        console.error('❌ BPMNViewer: Container never became available after maximum attempts');\n        setError('Failed to initialize BPMN viewer: container not available');\n        setLoading(false);\n      }\n    };\n\n    if (currentSelectedFile) {\n      console.log('⏰ BPMNViewer: Starting container readiness check for selectedFile:', currentSelectedFile.name);\n      waitForContainer();\n    } else {\n      console.log('❌ BPMNViewer: No currentSelectedFile, skipping viewer initialization');\n    }\n\n    return () => {\n      if (viewerRef.current) {\n        try {\n          viewerRef.current.destroy();\n        } catch (error) {\n          console.warn('Warning cleaning up BPMN viewer:', error);\n        }\n        viewerRef.current = null;\n      }\n    };\n  }, [currentSelectedFile, loadBpmnContent, cleanupContainer]);\n\n  const handleEditMode = () => {\n    if (!hasWriteAccess) {\n      alert('You need write permissions to edit BPMN files. Please check your GitHub token permissions.');\n      return;\n    }\n\n    const owner = currentRepository.owner?.login || currentRepository.full_name.split('/')[0];\n    const repoName = currentRepository.name;\n    const path = currentBranch \n      ? `/bpmn-editor/${owner}/${repoName}/${currentBranch}`\n      : `/bpmn-editor/${owner}/${repoName}`;\n\n    navigate(path, {\n      state: {\n        profile: currentProfile,\n        repository: currentRepository,\n        component,\n        selectedFile: currentSelectedFile,\n        selectedBranch: currentBranch,\n        mode: 'edit'\n      }\n    });\n  };\n\n  const handleBackToSelection = () => {\n    navigate('/business-process-selection', {\n      state: {\n        profile: currentProfile,\n        repository: currentRepository,\n        component,\n        selectedBranch: currentBranch\n      }\n    });\n  };\n\n  const handleToggleEnhancedFullwidth = () => {\n    const newState = !enhancedFullwidth;\n    setEnhancedFullwidth(newState);\n    \n    // Add/remove class on body for enhanced fullwidth mode\n    if (newState) {\n      document.body.classList.add('enhanced-fullwidth-active');\n    } else {\n      document.body.classList.remove('enhanced-fullwidth-active');\n    }\n  };\n\n  const handleToggleAutoHide = () => {\n    setAutoHide(!autoHide);\n  };\n\n  // Cleanup effect for enhanced fullwidth\n  useEffect(() => {\n    return () => {\n      // Clean up body class on unmount\n      document.body.classList.remove('enhanced-fullwidth-active');\n    };\n  }, []);\n\n  // Update body class when enhanced fullwidth changes\n  useEffect(() => {\n    if (enhancedFullwidth) {\n      document.body.classList.add('enhanced-fullwidth-active');\n    } else {\n      document.body.classList.remove('enhanced-fullwidth-active');\n    }\n    \n    return () => {\n      document.body.classList.remove('enhanced-fullwidth-active');\n    };\n  }, [enhancedFullwidth]);\n\n  // Handle redirect when data is missing\n  useEffect(() => {\n    // Check if we're on an asset URL pattern (has more than 5 path segments after /sgex)\n    const pathSegments = location.pathname.split('/').filter(segment => segment);\n    const isAssetURL = pathSegments.length > 5; // /sgex/bpmn-viewer/user/repo/branch/asset...\n    \n    // If we're on an asset URL, wait for framework to load before deciding to redirect\n    if (isAssetURL) {\n      // Only redirect if we have both no framework data AND no location state\n      if (!frameworkData?.profile && !frameworkData?.repository && !frameworkData?.asset && \n          !currentProfile && !currentRepository && !currentSelectedFile) {\n        console.log('BPMNViewer: On asset URL but no data available from framework or location state, redirecting to home');\n        navigate('/');\n      }\n    } else {\n      // For non-asset URLs, use the original logic\n      if (!currentProfile || !currentRepository || !currentSelectedFile) {\n        console.log('BPMNViewer: Missing required data, redirecting to home:', {\n          hasProfile: !!currentProfile,\n          hasRepository: !!currentRepository,\n          hasSelectedFile: !!currentSelectedFile\n        });\n        navigate('/');\n      }\n    }\n  }, [currentProfile, currentRepository, currentSelectedFile, frameworkData, location.pathname, navigate]);\n\n  // Don't render the component if we're missing required data, unless we're on asset URL and framework is loading\n  const pathSegments = location.pathname.split('/').filter(segment => segment);\n  const isAssetURL = pathSegments.length > 5;\n  \n  if (!currentProfile || !currentRepository || !currentSelectedFile) {\n    if (isAssetURL && (!frameworkData?.profile || !frameworkData?.repository || !frameworkData?.asset)) {\n      // Framework might still be loading for asset URL\n      return <div>Loading framework data...</div>;\n    }\n    return <div>Loading or redirecting...</div>;\n  }\n\n  return (\n      <div className={`bpmn-viewer ${enhancedFullwidth ? 'enhanced-fullwidth' : ''} ${autoHide ? 'auto-hide' : ''}`}>\n      <div className=\"viewer-content\">\n\n        <div className=\"viewer-main\">\n          <div className=\"viewer-toolbar\">\n            <div className=\"toolbar-left\">\n              <h3>{currentSelectedFile.name}</h3>\n              <div className=\"artifact-badges\">\n                <span className=\"artifact-badge bpmn\">📊 BPMN</span>\n                <span className=\"dak-component-badge\">🔄 Business Process</span>\n              </div>\n              <span className=\"view-mode-badge\">👁️ Read-Only View</span>\n            </div>\n            <div className=\"toolbar-right\">\n              <button \n                className=\"action-btn secondary\"\n                onClick={handleToggleAutoHide}\n                title=\"Toggle auto-hide headers/footers\"\n              >\n                {autoHide ? '📌' : '👁️'} Auto-Hide\n              </button>\n              <button \n                className=\"action-btn secondary\"\n                onClick={handleToggleEnhancedFullwidth}\n                title=\"Toggle enhanced fullwidth mode\"\n              >\n                {enhancedFullwidth ? '🔳' : '⛶'} Full Container\n              </button>\n              <button \n                className=\"action-btn secondary\"\n                onClick={handleBackToSelection}\n              >\n                ← Back to List\n              </button>\n              {hasWriteAccess && (\n                <button \n                  className=\"action-btn primary\"\n                  onClick={handleEditMode}\n                >\n                  ✏️ Edit\n                </button>\n              )}\n            </div>\n          </div>\n\n          <div className=\"diagram-container\">\n            {loading ? (\n              <div className=\"loading-overlay\">\n                <div className=\"spinner\"></div>\n                <div className=\"loading-info\">\n                  <p>Loading BPMN diagram...</p>\n                  <p className=\"loading-details\">\n                    Fetching {currentSelectedFile.name} from {currentRepository.name}\n                  </p>\n                  <div className=\"loading-progress\">\n                    <div className={`loading-step ${loadingStep === 'initializing' ? 'active' : loadingStep === 'fetching' || loadingStep === 'downloading' || loadingStep === 'generating' || loadingStep === 'validating' || loadingStep === 'importing' || loadingStep === 'centering' || loadingStep === 'complete' ? 'complete' : ''}`}>\n                      Initializing viewer\n                    </div>\n                    <div className={`loading-step ${loadingStep === 'fetching' || loadingStep === 'downloading' || loadingStep === 'generating' ? 'active' : loadingStep === 'validating' || loadingStep === 'importing' || loadingStep === 'centering' || loadingStep === 'complete' ? 'complete' : ''}`}>\n                      {loadingStep === 'generating' ? 'Generating demo content' : 'Fetching BPMN file'}\n                    </div>\n                    <div className={`loading-step ${loadingStep === 'validating' ? 'active' : loadingStep === 'importing' || loadingStep === 'centering' || loadingStep === 'complete' ? 'complete' : ''}`}>\n                      Validating BPMN XML\n                    </div>\n                    <div className={`loading-step ${loadingStep === 'importing' ? 'active' : loadingStep === 'centering' || loadingStep === 'complete' ? 'complete' : ''}`}>\n                      Importing diagram\n                    </div>\n                    <div className={`loading-step ${loadingStep === 'centering' ? 'active' : loadingStep === 'complete' ? 'complete' : ''}`}>\n                      Centering view\n                    </div>\n                  </div>\n                  <p className=\"loading-hint\">\n                    This may take a few moments for large files or slow connections.\n                  </p>\n                </div>\n              </div>\n            ) : error ? (\n              <div className=\"error-overlay\">\n                <p>❌ {error}</p>\n                <div className=\"error-actions\">\n                  <button \n                    className=\"action-btn secondary\"\n                    onClick={() => loadBpmnContent()}\n                  >\n                    🔄 Retry\n                  </button>\n                  <button \n                    className=\"action-btn secondary\"\n                    onClick={() => navigate('/business-process-selection', {\n                      state: { profile: currentProfile, repository: currentRepository, component, selectedBranch: currentBranch }\n                    })}\n                  >\n                    ← Back to List\n                  </button>\n                </div>\n              </div>\n            ) : null}\n            \n            {/* Always render the BPMN container so the ref can be set */}\n            <div \n              className=\"bpmn-container\" \n              ref={containerRef}\n              style={{ \n                display: loading || error ? 'none' : 'block',\n                width: '100%',\n                height: '100%'\n              }}\n            ></div>\n          </div>\n\n          <div className=\"diagram-info\">\n            <div className=\"condensed-file-info\">\n              <div className=\"condensed-info-item\">\n                <span className=\"label\">📁</span>\n                <span className=\"value\">{currentSelectedFile?.name || 'No file'}</span>\n              </div>\n              <div className=\"condensed-info-item\">\n                <span className=\"label\">📏</span>\n                <span className=\"value\">{currentSelectedFile?.size ? `${(currentSelectedFile.size / 1024).toFixed(1)} KB` : 'N/A'}</span>\n              </div>\n              <div className=\"condensed-info-item\">\n                <span className=\"label\">🌿</span>\n                <span className=\"value\">{currentBranch || 'main'}</span>\n              </div>\n            </div>\n            <div className=\"condensed-view-mode\">\n              <span className={`condensed-access-badge ${hasWriteAccess ? 'write' : 'read'}`}>\n                {hasWriteAccess ? '✏️ Edit' : '👁️ Read'}\n              </span>\n              <span className=\"condensed-info-item\">\n                <span className=\"value\">\n                  {enhancedFullwidth ? '⛶ Full Container' : autoHide ? '👁️ Auto-Hide' : '📺 Fullwidth'}\n                </span>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      </div>\n  );\n};\n\nexport default BPMNViewerComponent;"],"names":["BPMNViewerContent","location","useLocation","navigate","useNavigate","viewerRef","useRef","containerRef","frameworkData","useDAKParams","console","log","state","profile","repository","component","selectedFile","selectedBranch","currentProfile","currentRepository","currentBranch","branch","assetPath","asset","currentSelectedFile","useMemo","name","split","pop","path","loading","setLoading","useState","loadingStep","setLoadingStep","error","setError","hasWriteAccess","setHasWriteAccess","enhancedFullwidth","setEnhancedFullwidth","autoHide","setAutoHide","useEffect","async","_currentRepository$pe","writeAccess","token","permissions","push","warn","checkPermissions","loadBpmnContent","useCallback","_currentRepository$ow","hasViewer","current","owner","hasSelectedFile","hasRepository","login","full_name","repoName","ref","_currentSelectedFile$","_currentSelectedFile$2","bpmnXml","isDemo","default_branch","size","derivedOwner","githubServiceAuthenticated","githubService","isAuth","concat","JSON","stringify","includes","sha","startsWith","processName","replace","getFileContent","trim","Error","importXML","get","zoom","centerError","forceVisibility","container","querySelectorAll","forEach","element","style","opacity","visibility","display","tagName","toLowerCase","setTimeout","err","message","status","stack","file","cleanupContainer","innerHTML","waitForContainer","attempt","arguments","length","undefined","hasContainer","containerRefCurrent","viewerRefCurrent","className","clientWidth","clientHeight","createLazyBpmnViewer","containerExists","containerContent","retryError","reason","initializeViewer","destroy","document","body","classList","remove","add","pathname","filter","segment","hasProfile","isAssetURL","_jsx","children","_jsxs","onClick","handleToggleAutoHide","title","handleToggleEnhancedFullwidth","newState","handleBackToSelection","handleEditMode","_currentRepository$ow2","alert","mode","width","height","toFixed","BPMNViewerComponent","PageLayout","pageName"],"sourceRoot":""}