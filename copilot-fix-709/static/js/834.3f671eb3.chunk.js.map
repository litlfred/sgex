{"version":3,"file":"static/js/834.3f671eb3.chunk.js","mappings":"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","sources":["components/PageViewModal.js","components/PageEditModal.js","components/PagesManager.js"],"sourcesContent":["import React from 'react';\n\nconst PageViewModal = ({ page, onClose }) => {\n  if (!page) return null;\n\n  const handleOverlayClick = (e) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  // Decode the markdown content\n  const markdownContent = page.content ? atob(page.content.content) : '';\n\n  // Simple markdown to HTML conversion for basic formatting\n  const formatMarkdown = (markdown) => {\n    return markdown\n      .replace(/^# (.*$)/gim, '<h1>$1</h1>')\n      .replace(/^## (.*$)/gim, '<h2>$1</h2>')\n      .replace(/^### (.*$)/gim, '<h3>$1</h3>')\n      .replace(/^\\* (.*$)/gim, '<li>$1</li>')\n      .replace(/^- (.*$)/gim, '<li>$1</li>')\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n      .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n      .replace(/`(.*?)`/g, '<code>$1</code>')\n      .replace(/\\n/g, '<br>');\n  };\n\n  return (\n    <div className=\"page-view-modal-overlay\" onClick={handleOverlayClick}>\n      <div className=\"page-view-modal\">\n        <div className=\"page-view-modal-header\">\n          <h2>{page.title}</h2>\n          <button \n            className=\"close-btn\"\n            onClick={onClose}\n            aria-label=\"Close page view\"\n          >\n            ×\n          </button>\n        </div>\n        \n        <div className=\"page-view-modal-content\">\n          <div className=\"page-info\">\n            <span className=\"page-filename\">{page.filename}</span>\n            <span className=\"page-path\">{page.path}</span>\n          </div>\n          \n          <div className=\"page-content\">\n            <div className=\"content-tabs\">\n              <button className=\"tab-btn active\">Rendered</button>\n              <button className=\"tab-btn\" onClick={() => {\n                // Toggle between rendered and raw view\n                const rendered = document.querySelector('.rendered-content');\n                const raw = document.querySelector('.raw-content');\n                const tabs = document.querySelectorAll('.tab-btn');\n                \n                if (rendered.style.display === 'none') {\n                  rendered.style.display = 'block';\n                  raw.style.display = 'none';\n                  tabs[0].classList.add('active');\n                  tabs[1].classList.remove('active');\n                } else {\n                  rendered.style.display = 'none';\n                  raw.style.display = 'block';\n                  tabs[0].classList.remove('active');\n                  tabs[1].classList.add('active');\n                }\n              }}>Raw Markdown</button>\n            </div>\n            \n            <div className=\"rendered-content\" dangerouslySetInnerHTML={{ \n              __html: formatMarkdown(markdownContent) \n            }} />\n            \n            <div className=\"raw-content\" style={{ display: 'none' }}>\n              <pre>{markdownContent}</pre>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PageViewModal;","import React, { useState } from 'react';\nimport MDEditor from '@uiw/react-md-editor';\nimport stagingGroundService from '../services/stagingGroundService';\n\nconst PageEditModal = ({ page, onClose, onSave }) => {\n  const [content, setContent] = useState(page?.content ? atob(page.content.content) : '');\n  const [isSaving, setIsSaving] = useState(false);\n\n  if (!page) return null;\n\n  const handleOverlayClick = (e) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  const handleSave = async () => {\n    setIsSaving(true);\n    try {\n      // Save content to staging ground instead of directly to GitHub\n      const success = stagingGroundService.updateFile(\n        page.path,\n        content,\n        {\n          title: page.title,\n          filename: page.filename,\n          tool: 'PageEditor',\n          contentType: 'markdown'\n        }\n      );\n      \n      if (success) {\n        // Notify parent that changes were staged successfully\n        if (onSave) {\n          await onSave(page, content, 'staged');\n        }\n        onClose();\n      } else {\n        throw new Error('Failed to save to staging ground');\n      }\n    } catch (error) {\n      console.error('Failed to save page:', error);\n      alert('Failed to save page to staging ground. Please try again.');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  return (\n    <div className=\"page-edit-modal-overlay\" onClick={handleOverlayClick}>\n      <div className=\"page-edit-modal\">\n        <div className=\"page-edit-modal-header\">\n          <h2>Edit {page.title}</h2>\n          <div className=\"header-actions\">\n            <button \n              className=\"btn-secondary\"\n              onClick={onClose}\n              disabled={isSaving}\n            >\n              Cancel\n            </button>\n            <button \n              className=\"btn-primary\"\n              onClick={handleSave}\n              disabled={isSaving}\n            >\n              {isSaving ? 'Staging...' : 'Stage Changes'}\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"page-edit-modal-content\">\n          <div className=\"page-info\">\n            <span className=\"page-filename\">{page.filename}</span>\n            <span className=\"page-path\">{page.path}</span>\n          </div>\n          \n          <div className=\"md-editor-container\">\n            <MDEditor\n              value={content}\n              onChange={(val) => setContent(val || '')}\n              preview=\"edit\"\n              height={500}\n              visibleDragBar={false}\n              data-color-mode=\"light\"\n              hideToolbar={isSaving}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PageEditModal;","import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport stagingGroundService from '../services/stagingGroundService';\nimport { PageLayout } from './framework';\nimport PageViewModal from './PageViewModal';\nimport PageEditModal from './PageEditModal';\nimport DAKStatusBox from './DAKStatusBox';\n\nconst PagesManager = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  \n  const { profile, repository, selectedBranch } = location.state || {};\n  \n  const [pages, setPages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n  const [initializingAuth, setInitializingAuth] = useState(true);\n  const [viewModalPage, setViewModalPage] = useState(null);\n  const [editModalPage, setEditModalPage] = useState(null);\n\n  // Initialize authentication if needed\n  useEffect(() => {\n    const initializeAuthentication = async () => {\n      // Check if GitHub service is already authenticated\n      if (githubService.isAuth()) {\n        setInitializingAuth(false);\n        return;\n      }\n\n      // Try to restore authentication from stored token\n      const token = sessionStorage.getItem('github_token') || localStorage.getItem('github_token');\n      if (token) {\n        console.log('Restoring GitHub authentication from stored token');\n        const success = githubService.authenticate(token);\n        if (success) {\n          console.log('GitHub authentication restored successfully');\n        } else {\n          console.warn('Failed to restore GitHub authentication');\n          // Clean up invalid tokens\n          sessionStorage.removeItem('github_token');\n          localStorage.removeItem('github_token');\n        }\n      } else {\n        console.warn('No stored GitHub token found');\n      }\n\n      setInitializingAuth(false);\n    };\n\n    initializeAuthentication();\n  }, []);\n\n  // Check write permissions\n  useEffect(() => {\n    const checkPermissions = async () => {\n      if (repository && profile && !initializingAuth) {\n        try {\n          const writeAccess = await githubService.checkRepositoryWritePermissions(\n            repository.owner?.login || repository.full_name.split('/')[0],\n            repository.name\n          );\n          setHasWriteAccess(writeAccess);\n        } catch (error) {\n          console.warn('Could not check write permissions:', error);\n          setHasWriteAccess(false);\n        }\n      }\n    };\n\n    if (!initializingAuth) {\n      checkPermissions();\n    }\n  }, [repository, profile, initializingAuth]);\n\n  // Initialize staging ground service\n  useEffect(() => {\n    if (repository && selectedBranch && !initializingAuth) {\n      stagingGroundService.initialize(repository, selectedBranch);\n    }\n  }, [repository, selectedBranch, initializingAuth]);\n\n  // Load pages from sushi-config.yaml\n  useEffect(() => {\n    const loadPages = async () => {\n      if (!profile || !repository) {\n        navigate('/');\n        return;\n      }\n\n      // Wait for authentication to be initialized\n      if (initializingAuth) {\n        return;\n      }\n\n      // Check if we have authentication after initialization\n      if (!githubService.isAuth()) {\n        setError('GitHub authentication not available. Please return to the home page and sign in again.');\n        setLoading(false);\n        return;\n      }\n\n      // Retry logic for GitHub service authentication\n      let retries = 0;\n      const maxRetries = 3;\n      \n      while (retries < maxRetries) {\n        try {\n          setLoading(true);\n          setError(null);\n\n          const owner = repository.owner?.login || repository.full_name.split('/')[0];\n          const repo = repository.name;\n          const branch = selectedBranch || 'main';\n\n          console.log(`Loading pages for ${owner}/${repo} on branch: ${branch} (attempt ${retries + 1})`);\n          console.log('selectedBranch:', selectedBranch);\n          console.log('GitHub auth status:', githubService.isAuth());\n          console.log('GitHub octokit:', !!githubService.octokit);\n\n          // Double-check authentication status\n          if (!githubService.isAuth() || !githubService.octokit) {\n            if (retries < maxRetries - 1) {\n              console.log('GitHub service not ready, waiting...');\n              await new Promise(resolve => setTimeout(resolve, 1000));\n              retries++;\n              continue;\n            } else {\n              throw new Error('GitHub service not authenticated. Please return to the home page and sign in again.');\n            }\n          }\n\n          // Fetch sushi-config.yaml\n          const sushiConfigContent = await fetchSushiConfig(owner, repo, branch);\n          if (!sushiConfigContent) {\n            throw new Error(`sushi-config.yaml not found in repository on branch \"${branch}\"`);\n          }\n        \n          // Parse pages from sushi-config.yaml\n          const parsedPages = parsePagesFromSushiConfig(sushiConfigContent);\n          \n          // Check if page files exist and get their status\n          const pagesWithStatus = await checkPagesExistence(owner, repo, branch, parsedPages);\n          \n          setPages(pagesWithStatus);\n          break; // Success, exit retry loop\n          \n        } catch (error) {\n          console.error('Failed to load pages:', error);\n          \n          if (retries < maxRetries - 1) {\n            retries++;\n            await new Promise(resolve => setTimeout(resolve, 500));\n            continue;\n          }\n          \n          // Final error after all retries\n          setError(error.message);\n        } finally {\n          setLoading(false);\n        }\n        break;\n      }\n    };\n\n    loadPages();\n  }, [profile, repository, selectedBranch, navigate, initializingAuth]);\n\n  const fetchSushiConfig = async (owner, repo, branch) => {\n    try {\n      // Check if GitHub service is authenticated and available\n      if (!githubService.isAuth() || !githubService.octokit) {\n        throw new Error('GitHub service not authenticated');\n      }\n\n      console.log(`Fetching sushi-config.yaml from ${owner}/${repo} on branch ${branch}`);\n      \n      const { data } = await githubService.octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path: 'sushi-config.yaml',\n        ref: branch\n      });\n\n      if (data.type === 'file' && data.content) {\n        console.log('Successfully fetched sushi-config.yaml');\n        return atob(data.content);\n      }\n      \n      console.log('sushi-config.yaml found but no content or not a file');\n      return null;\n    } catch (error) {\n      console.error('Failed to fetch sushi-config.yaml:', error);\n      \n      // Provide more specific error messages\n      if (error.status === 404) {\n        throw new Error(`sushi-config.yaml not found in repository on branch \"${branch}\"`);\n      } else if (error.status === 403) {\n        throw new Error('Access denied - insufficient permissions to read repository contents');\n      } else if (error.status === 401) {\n        throw new Error('Authentication failed - please check your GitHub token');\n      } else if (!githubService.isAuth()) {\n        throw new Error('GitHub service not authenticated');\n      } else {\n        throw new Error(`Failed to fetch sushi-config.yaml: ${error.message}`);\n      }\n    }\n  };\n\n  const parsePagesFromSushiConfig = (configContent) => {\n    const pages = [];\n    \n    try {\n      // Simple YAML parsing for pages section\n      const lines = configContent.split('\\n');\n      let inPagesSection = false;\n      let currentIndent = 0;\n      \n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        const trimmedLine = line.trim();\n        \n        if (trimmedLine === 'pages:') {\n          inPagesSection = true;\n          currentIndent = line.length - line.trimStart().length;\n          continue;\n        }\n        \n        if (inPagesSection) {\n          const lineIndent = line.length - line.trimStart().length;\n          \n          // If we've moved back to the same or lesser indent level, we're out of pages section\n          if (trimmedLine && lineIndent <= currentIndent) {\n            break;\n          }\n          \n          // Look for markdown file entries (e.g., \"index.md:\")\n          if (trimmedLine.endsWith('.md:')) {\n            const filename = trimmedLine.replace(':', '').trim();\n            let title = filename; // Default title to filename if no title found\n            \n            // Look ahead for the title on the next line(s)\n            for (let j = i + 1; j < lines.length; j++) {\n              const nextLine = lines[j];\n              const nextTrimmed = nextLine.trim();\n              const nextIndent = nextLine.length - nextLine.trimStart().length;\n              \n              // If we've moved to same or lesser indent, stop looking for title\n              if (nextTrimmed && nextIndent <= lineIndent) {\n                break;\n              }\n              \n              // Look for title line\n              if (nextTrimmed.startsWith('title:')) {\n                title = nextTrimmed.replace('title:', '').trim();\n                break;\n              }\n            }\n            \n            pages.push({\n              title,\n              filename,\n              path: `input/pagecontent/${filename}`,\n              level: Math.floor((lineIndent - currentIndent) / 2)\n            });\n          }\n          // Handle nested sections (lines that end with : but aren't .md files)\n          else if (trimmedLine.endsWith(':') && !trimmedLine.includes('.md')) {\n            const sectionName = trimmedLine.replace(':', '').trim();\n            if (sectionName) {\n              pages.push({\n                title: sectionName,\n                isSection: true,\n                level: Math.floor((lineIndent - currentIndent) / 2)\n              });\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Failed to parse pages from sushi-config.yaml:', error);\n    }\n    \n    return pages;\n  };\n\n  const checkPagesExistence = async (owner, repo, branch, parsedPages) => {\n    const pagesWithStatus = [];\n    \n    for (const page of parsedPages) {\n      if (page.isSection) {\n        pagesWithStatus.push(page);\n        continue;\n      }\n      \n      let exists = false;\n      let content = null;\n      \n      try {\n        // Check if GitHub service is authenticated and available\n        if (githubService.isAuth() && githubService.octokit) {\n          const { data } = await githubService.octokit.rest.repos.getContent({\n            owner,\n            repo,\n            path: page.path,\n            ref: branch\n          });\n          \n          if (data.type === 'file') {\n            exists = true;\n            content = data;\n          }\n        }\n      } catch (error) {\n        exists = false;\n      }\n      \n      pagesWithStatus.push({\n        ...page,\n        exists,\n        content,\n        githubUrl: `https://github.com/${owner}/${repo}/blob/${branch}/${page.path}`\n      });\n    }\n    \n    return pagesWithStatus;\n  };\n\n  const handleViewPage = (page) => {\n    setViewModalPage(page);\n  };\n\n  const handleEditPage = (page) => {\n    setEditModalPage(page);\n  };\n\n  const handleSavePage = async (page, content, action = 'staged') => {\n    // For staging ground integration, we don't need write access check here\n    // as the content is being staged, not directly committed\n    if (action === 'staged') {\n      // Content has been successfully staged, no further action needed\n      console.log(`Page ${page.filename} has been staged for commit`);\n      return;\n    }\n    \n    // Legacy direct save functionality (if needed for backward compatibility)\n    if (action === 'direct' && !hasWriteAccess) {\n      throw new Error('You need write access to save changes. Please upgrade your GitHub token permissions.');\n    }\n\n    // This direct save path should not be used anymore with staging ground integration\n    if (action === 'direct') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const branch = selectedBranch || 'main';\n      \n      // Encode content to base64\n      const encodedContent = btoa(content);\n      \n      // Get current file SHA for update\n      const currentSha = page.content?.sha;\n      \n      await githubService.octokit.rest.repos.createOrUpdateFileContents({\n        owner,\n        repo: repository.name,\n        path: page.path,\n        message: `Update ${page.filename} via SGEX Workbench`,\n        content: encodedContent,\n        branch,\n        sha: currentSha\n      });\n\n      // Refresh pages after save\n      const owner2 = repository.owner?.login || repository.full_name.split('/')[0];\n      const sushiConfigContent = await fetchSushiConfig(owner2, repository.name, branch);\n      if (sushiConfigContent) {\n        const parsedPages = parsePagesFromSushiConfig(sushiConfigContent);\n        const pagesWithStatus = await checkPagesExistence(owner2, repository.name, branch, parsedPages);\n        setPages(pagesWithStatus);\n      }\n    }\n  };\n\n\n\n  // Redirect if missing required context - use useEffect to avoid render issues\n  useEffect(() => {\n    if (!profile || !repository) {\n      navigate('/');\n    }\n  }, [profile, repository, navigate]);\n\n  if (!profile || !repository) {\n    return (\n      <PageLayout pageName=\"pages-manager\">\n        <div className=\"pages-manager\">\n          <div className=\"redirecting-state\">\n            <h2>Redirecting...</h2>\n            <p>Missing required context. Redirecting to home page...</p>\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  return (\n    <PageLayout pageName=\"pages-manager\">\n      <div className=\"pages-manager\">\n        <div className=\"pages-content\">\n\n        {/* Staging Ground Status */}\n        <DAKStatusBox\n          repository={repository}\n          selectedBranch={selectedBranch}\n          hasWriteAccess={hasWriteAccess}\n          profile={profile}\n        />\n\n        <div className=\"pages-main\">\n          <div className=\"pages-intro\">\n            <h2>\n              <span className=\"component-icon\" style={{ color: '#8b5cf6' }}>📄</span>\n              Pages\n            </h2>\n            <p>\n              Published page content and documentation for <strong>{repository.name}</strong>\n              {selectedBranch && (\n                <span> on branch <code className=\"branch-display\">{selectedBranch}</code></span>\n              )}. \n              Pages are defined in <code>sushi-config.yaml</code> and stored as Markdown files in <code>input/pagecontent/</code>.\n            </p>\n          </div>\n\n          {(loading || initializingAuth) && (\n            <div className=\"loading-state\">\n              <div className=\"loading-spinner\"></div>\n              <p>{initializingAuth ? 'Initializing GitHub authentication...' : 'Loading pages from sushi-config.yaml...'}</p>\n            </div>\n          )}\n\n          {error && (\n            <div className=\"error-state\">\n              <div className=\"error-icon\">⚠️</div>\n              <div className=\"error-content\">\n                <h3>Could not load pages</h3>\n                <p>{error}</p>\n                <div className=\"error-suggestions\">\n                  <p>Make sure:</p>\n                  <ul>\n                    <li>The repository contains a <code>sushi-config.yaml</code> file{selectedBranch && ` on branch \"${selectedBranch}\"`}</li>\n                    <li>The sushi-config.yaml file has a <code>pages:</code> section</li>\n                    <li>You have access to view the repository contents</li>\n                    {selectedBranch && selectedBranch !== 'main' && <li>The branch \"{selectedBranch}\" exists and is accessible</li>}\n                  </ul>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {!loading && !initializingAuth && !error && pages.length === 0 && (\n            <div className=\"empty-state\">\n              <div className=\"empty-icon\">📄</div>\n              <h3>No pages found</h3>\n              <p>This repository doesn't have any pages defined in sushi-config.yaml</p>\n              <div className=\"empty-actions\">\n                <a \n                  href={`https://github.com/${repository.full_name}/blob/${selectedBranch || 'main'}/sushi-config.yaml`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"btn-secondary\"\n                >\n                  View sushi-config.yaml\n                </a>\n              </div>\n            </div>\n          )}\n\n          {!loading && !initializingAuth && !error && pages.length > 0 && (\n            <div className=\"pages-list\">\n              <div className=\"pages-header-info\">\n                <div className=\"pages-count\">\n                  {pages.filter(p => !p.isSection).length} pages found\n                </div>\n                <div className=\"pages-actions\">\n                  <a\n                    href={`https://github.com/${repository.full_name}/blob/${selectedBranch || 'main'}/sushi-config.yaml`}\n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"btn-secondary small\"\n                  >\n                    View sushi-config.yaml\n                  </a>\n                </div>\n              </div>\n\n              <div className=\"pages-tree\">\n                {pages.map((page, index) => (\n                  <div \n                    key={index}\n                    className={`page-item ${page.isSection ? 'section' : 'page'} level-${page.level}`}\n                    style={{ '--indent-level': page.level }}\n                  >\n                    {page.isSection ? (\n                      <div className=\"section-header\">\n                        <span className=\"section-icon\">📁</span>\n                        <span className=\"section-title\">{page.title}</span>\n                      </div>\n                    ) : (\n                      <div className=\"page-row\">\n                        <div className=\"page-info\">\n                          <div className=\"page-title\">\n                            <span className={`page-status ${page.exists ? 'exists' : 'missing'}`}>\n                              {page.exists ? '✅' : '❌'}\n                            </span>\n                            <span className=\"page-name\">{page.title}</span>\n                            <span className=\"page-filename\">({page.filename})</span>\n                          </div>\n                          {!page.exists && (\n                            <div className=\"page-error\">\n                              File not found in repository\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"page-actions\">\n                          {page.exists && (\n                            <button\n                              onClick={() => handleViewPage(page)}\n                              className=\"btn-action view\"\n                              title=\"View page content\"\n                            >\n                              👁️ View\n                            </button>\n                          )}\n                          \n                          <button\n                            onClick={() => handleEditPage(page)}\n                            className=\"btn-action edit\"\n                            title=\"Edit page with WYSIWYG editor\"\n                          >\n                            ✏️ Edit\n                          </button>\n                          \n                          <a\n                            href={page.githubUrl}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"btn-action source\"\n                            title=\"View source on GitHub\"\n                          >\n                            🔗 Source\n                          </a>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* View Modal */}\n      {viewModalPage && (\n        <PageViewModal\n          page={viewModalPage}\n          onClose={() => setViewModalPage(null)}\n        />\n      )}\n\n      {/* Edit Modal */}\n      {editModalPage && (\n        <PageEditModal\n          page={editModalPage}\n          onClose={() => setEditModalPage(null)}\n          onSave={handleSavePage}\n        />\n      )}\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default PagesManager;"],"names":["_ref","page","onClose","markdownContent","content","atob","_jsx","className","onClick","e","target","currentTarget","children","_jsxs","title","filename","path","rendered","document","querySelector","raw","tabs","querySelectorAll","style","display","classList","add","remove","dangerouslySetInnerHTML","__html","markdown","replace","onSave","setContent","useState","isSaving","setIsSaving","disabled","async","stagingGroundService","updateFile","tool","contentType","Error","error","console","alert","MDEditor","value","onChange","val","preview","height","visibleDragBar","hideToolbar","PagesManager","location","useLocation","navigate","useNavigate","profile","repository","selectedBranch","state","pages","setPages","loading","setLoading","setError","hasWriteAccess","setHasWriteAccess","initializingAuth","setInitializingAuth","viewModalPage","setViewModalPage","editModalPage","setEditModalPage","useEffect","githubService","isAuth","token","sessionStorage","getItem","localStorage","log","authenticate","warn","removeItem","initializeAuthentication","_repository$owner","writeAccess","checkRepositoryWritePermissions","owner","login","full_name","split","name","checkPermissions","initialize","retries","_repository$owner2","repo","branch","concat","octokit","maxRetries","Promise","resolve","setTimeout","sushiConfigContent","fetchSushiConfig","parsedPages","parsePagesFromSushiConfig","pagesWithStatus","checkPagesExistence","message","loadPages","data","rest","repos","getContent","ref","type","status","configContent","lines","inPagesSection","currentIndent","i","length","line","trimmedLine","trim","lineIndent","trimStart","endsWith","j","nextLine","nextTrimmed","nextIndent","startsWith","push","level","Math","floor","includes","sectionName","isSection","exists","_objectSpread","githubUrl","PageLayout","pageName","DAKStatusBox","color","href","rel","filter","p","map","index","handleViewPage","handleEditPage","PageViewModal","PageEditModal","action","arguments","undefined","_repository$owner3","_page$content","_repository$owner4","encodedContent","btoa","currentSha","sha","createOrUpdateFileContents","owner2"],"sourceRoot":""}