"use strict";(self.webpackChunksgex_workbench=self.webpackChunksgex_workbench||[]).push([[141],{85141:(e,n,t)=>{t.r(n),t.d(n,{default:()=>c});var i=t(65043),o=t(73537),r=t(9783),s=t(97036),a=t(62148),l=t(70579);const c=()=>{const e=(0,o.Zp)(),{profile:n,repository:t,branch:c}=(0,a.oc)(),d=(0,i.useRef)(null),m=(0,i.useRef)(null),[p,u]=(0,i.useState)([]),[h,b]=(0,i.useState)(null),[g,f]=(0,i.useState)(!0),[w,N]=(0,i.useState)(null),[v,x]=(0,i.useState)(""),[P,B]=(0,i.useState)("");(0,i.useEffect)(()=>{const e=()=>{if(m.current&&!d.current&&h)try{d.current=new r.A({container:m.current}),console.log("BPMN modeler initialized successfully")}catch(w){console.error("Failed to initialize BPMN modeler:",w)}};if(h){e();const n=setTimeout(e,100);return()=>clearTimeout(n)}return()=>{if(d.current){try{d.current.destroy()}catch(w){console.error("Error destroying BPMN modeler:",w)}d.current=null}}},[h]),(0,i.useEffect)(()=>{(async()=>{if(n&&t)try{if(f(!0),N(null),n.token)try{var i;const e=new s.Octokit({auth:n.token}),{data:o}=await e.rest.repos.getContent({owner:(null===(i=t.owner)||void 0===i?void 0:i.login)||t.full_name.split("/")[0],repo:t.name,path:"input/business-processes"}),r=Array.isArray(o)?o.filter(e=>e.name.endsWith(".bpmn")):o.name.endsWith(".bpmn")?[o]:[];return u(r),void f(!1)}catch(o){console.warn("GitHub API error, falling back to mock data:",o)}u([{name:"patient-registration.bpmn",path:"input/business-processes/patient-registration.bpmn",sha:"abc123",size:2048,download_url:"https://raw.githubusercontent.com/..."},{name:"vaccination-workflow.bpmn",path:"input/business-processes/vaccination-workflow.bpmn",sha:"def456",size:3072,download_url:"https://raw.githubusercontent.com/..."},{name:"appointment-scheduling.bpmn",path:"input/business-processes/appointment-scheduling.bpmn",sha:"ghi789",size:1536,download_url:"https://raw.githubusercontent.com/..."}]),f(!1)}catch(r){console.error("Error loading BPMN files:",r),N("Failed to load BPMN files from repository"),f(!1)}else e("/")})()},[n,t,e]),(0,i.useEffect)(()=>{if(d.current){const e=()=>{d.current.saveXML({format:!0}).then(e=>{let{xml:n}=e;x(n)}).catch(e=>{console.error("Error getting XML content:",e)})};return d.current.on("commandStack.changed",e),()=>{d.current&&d.current.off("commandStack.changed",e)}}},[h]);if(!n||!t)return e("/"),(0,l.jsx)("div",{children:"Redirecting..."});const M=v!==P;return(0,l.jsx)(a.ox,{pageName:"bpmn-editor",file:h,repository:t,branch:c||"main",content:v,originalContent:P,hasChanges:M,onSave:async(e,n)=>{console.log("BPMN diagram saved to ".concat(n)),"github"===n&&B(e)},saveButtonsPosition:"top",customSaveToGitHub:async e=>{if(!e.trim()||!h||!d.current)return!1;try{const{xml:a}=await d.current.saveXML({format:!0});if(n.token&&t){var i;const l=new s.Octokit({auth:n.token});let c=h.sha;try{var o;const{data:e}=await l.rest.repos.getContent({owner:(null===(o=t.owner)||void 0===o?void 0:o.login)||t.full_name.split("/")[0],repo:t.name,path:h.path});c=e.sha}catch(r){console.warn("Could not get current file SHA, using provided SHA:",r)}return await l.rest.repos.createOrUpdateFileContents({owner:(null===(i=t.owner)||void 0===i?void 0:i.login)||t.full_name.split("/")[0],repo:t.name,path:h.path,message:e,content:btoa(a),sha:c,committer:{name:n.name||n.login,email:n.email||"".concat(n.login,"@users.noreply.github.com")}}),console.log("BPMN file committed to GitHub successfully"),!0}return!1}catch(w){throw console.error("Error saving BPMN to GitHub:",w),w}},children:(0,l.jsx)("div",{className:"bpmn-editor",children:(0,l.jsx)("div",{className:"editor-content",children:(0,l.jsxs)("div",{className:"bpmn-workspace",children:[(0,l.jsxs)("div",{className:"file-browser",children:[(0,l.jsxs)("div",{className:"file-browser-header",children:[(0,l.jsx)("h3",{children:"BPMN Files"}),(0,l.jsx)("span",{className:"file-path",children:"input/business-processes/"})]}),g&&!h?(0,l.jsxs)("div",{className:"loading",children:[(0,l.jsx)("div",{className:"spinner"}),(0,l.jsx)("p",{children:"Loading BPMN files..."})]}):w?(0,l.jsx)("div",{className:"error",children:(0,l.jsxs)("p",{children:["\u274c ",w]})}):(0,l.jsx)("div",{className:"file-list",children:p.map(e=>(0,l.jsxs)("div",{className:"file-item ".concat((null===h||void 0===h?void 0:h.sha)===e.sha?"selected":""),onClick:()=>(async e=>{try{f(!0),N(null),b(e),setTimeout(async()=>{try{if(!d.current&&m.current&&(d.current=new r.A({container:m.current}),console.log("BPMN modeler initialized for file loading")),!d.current)return console.error("BPMN modeler not available"),N("BPMN editor not ready. Please try again."),void f(!1);let i=null;if(n.token&&e.download_url)try{const n=await fetch(e.download_url);n.ok&&(i=await n.text(),console.log("Loaded BPMN content from GitHub"))}catch(t){console.warn("Could not fetch BPMN content from GitHub:",t)}i||(i='<?xml version="1.0" encoding="UTF-8"?>\n<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" id="Definitions_1" targetNamespace="http://bpmn.io/schema/bpmn" exporter="bpmn-js (https://demo.bpmn.io)" exporterVersion="17.11.1">\n  <bpmn:process id="Process_'.concat(e.name.replace(".bpmn",""),'" isExecutable="true">\n    <bpmn:startEvent id="StartEvent_1">\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:task id="Task_1" name="').concat(e.name.replace(".bpmn","").replace("-"," ").toUpperCase(),'">\n      <bpmn:incoming>Flow_1</bpmn:incoming>\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\n    </bpmn:task>\n    <bpmn:endEvent id="EndEvent_1">\n      <bpmn:incoming>Flow_2</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id="Flow_1" sourceRef="StartEvent_1" targetRef="Task_1" />\n    <bpmn:sequenceFlow id="Flow_2" sourceRef="Task_1" targetRef="EndEvent_1" />\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id="BPMNDiagram_1">\n    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_').concat(e.name.replace(".bpmn",""),'">\n      <bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1">\n        <dc:Bounds x="179" y="99" width="36" height="36" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Activity_1" bpmnElement="Task_1">\n        <dc:Bounds x="270" y="77" width="100" height="80" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Event_1" bpmnElement="EndEvent_1">\n        <dc:Bounds x="432" y="99" width="36" height="36" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id="Flow_1_di" bpmnElement="Flow_1">\n        <di:waypoint x="215" y="117" />\n        <di:waypoint x="270" y="117" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_2_di" bpmnElement="Flow_2">\n        <di:waypoint x="370" y="117" />\n        <di:waypoint x="432" y="117" />\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>')),await d.current.importXML(i),B(i),x(i),f(!1)}catch(i){console.error("Error loading BPMN file:",i),N("Failed to load BPMN diagram"),f(!1)}},100)}catch(t){console.error("Error initializing BPMN file load:",t),N("Failed to initialize BPMN editor"),f(!1)}})(e),children:[(0,l.jsx)("div",{className:"file-icon",children:"\ud83d\udccb"}),(0,l.jsxs)("div",{className:"file-details",children:[(0,l.jsx)("div",{className:"file-name",children:e.name}),(0,l.jsxs)("div",{className:"file-size",children:[(e.size/1024).toFixed(1)," KB"]})]})]},e.sha))})]}),(0,l.jsx)("div",{className:"diagram-editor",children:h?(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)("div",{className:"editor-toolbar",children:(0,l.jsx)("div",{className:"toolbar-left",children:(0,l.jsx)("h4",{children:h.name})})}),(0,l.jsx)("div",{className:"bpmn-container",ref:m})]}):(0,l.jsx)("div",{className:"diagram-placeholder",children:(0,l.jsxs)("div",{className:"placeholder-content",children:[(0,l.jsx)("div",{className:"placeholder-icon",children:"\ud83d\udd04"}),(0,l.jsx)("h3",{children:"Select a BPMN File"}),(0,l.jsx)("p",{children:"Choose a .bpmn file from the list to start editing business processes."})]})})})]})})})})}}}]);
//# sourceMappingURL=141.0695951a.chunk.js.map