{"version":3,"file":"static/js/41.28ac7871.chunk.js","mappings":"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","sources":["dak/faq/questions/dak/DakVersionQuestion.js"],"sourcesContent":["/**\n * DAK Version Question Component\n * Returns the version of the DAK from sushi-config.yaml\n */\n\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { QuestionDefinition, QuestionResult, CacheHint, QuestionLevel } from '../../types/QuestionDefinition.js';\nimport yaml from 'js-yaml';\n\n// Question metadata\nexport const metadata = new QuestionDefinition({\n  id: 'dak-version',\n  level: QuestionLevel.DAK,\n  title: 'DAK Version',\n  description: 'Extracts the version of the DAK from sushi-config.yaml',\n  parameters: [],\n  tags: ['dak', 'metadata', 'version'],\n  version: '1.0.0'\n});\n\n/**\n * Execute the DAK version question\n * @param {Object} input - Question input parameters\n * @param {string} input.repository - Repository identifier\n * @param {string} input.locale - Locale for response\n * @param {string} input.branch - Git branch\n * @param {Storage} input.storage - Storage interface\n * @returns {Promise<QuestionResult>} - Question result\n */\nexport async function execute(input) {\n  const { locale = 'en_US', storage } = input;\n  const warnings = [];\n  const errors = [];\n\n  try {\n    // Check if sushi-config.yaml exists\n    const sushiConfigExists = await storage.fileExists('sushi-config.yaml');\n    if (!sushiConfigExists) {\n      return new QuestionResult({\n        structured: { version: null },\n        narrative: getLocalizedNarrative(locale, 'file_not_found'),\n        errors: [getLocalizedError(locale, 'sushi_config_missing')],\n        meta: {\n          cacheHint: new CacheHint({\n            scope: 'repository',\n            key: 'dak-version',\n            ttl: 3600,\n            dependencies: ['sushi-config.yaml']\n          })\n        }\n      });\n    }\n\n    // Read and parse sushi-config.yaml\n    const sushiConfigContent = await storage.readFile('sushi-config.yaml');\n    const sushiConfig = yaml.load(sushiConfigContent.toString('utf-8'));\n\n    // Extract DAK version\n    let version = null;\n    let status = null;\n    let releaseDate = null;\n\n    if (sushiConfig && typeof sushiConfig === 'object') {\n      version = sushiConfig.version;\n      status = sushiConfig.status;\n      releaseDate = sushiConfig.releaseDate || sushiConfig.date;\n    }\n\n    if (!version) {\n      warnings.push(getLocalizedError(locale, 'version_not_found'));\n    }\n\n    // Parse semantic version if available\n    let semanticVersion = null;\n    if (version && typeof version === 'string') {\n      const semverMatch = version.match(/^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/);\n      if (semverMatch) {\n        semanticVersion = {\n          major: parseInt(semverMatch[1]),\n          minor: parseInt(semverMatch[2]),\n          patch: parseInt(semverMatch[3]),\n          prerelease: semverMatch[5] || null,\n          raw: version\n        };\n      }\n    }\n\n    return new QuestionResult({\n      structured: { \n        version,\n        semanticVersion,\n        status,\n        releaseDate,\n        name: sushiConfig?.name,\n        id: sushiConfig?.id\n      },\n      narrative: getLocalizedNarrative(locale, 'success', { version, status, releaseDate }),\n      warnings,\n      errors,\n      meta: {\n        cacheHint: new CacheHint({\n          scope: 'repository',\n          key: 'dak-version',\n          ttl: 3600,\n          dependencies: ['sushi-config.yaml']\n        })\n      }\n    });\n\n  } catch (error) {\n    return new QuestionResult({\n      structured: { version: null },\n      narrative: getLocalizedNarrative(locale, 'error'),\n      errors: [getLocalizedError(locale, 'parse_error', { error: error.message })],\n      meta: {\n        cacheHint: new CacheHint({\n          scope: 'repository',\n          key: 'dak-version',\n          ttl: 60, // Short cache on error\n          dependencies: ['sushi-config.yaml']\n        })\n      }\n    });\n  }\n}\n\n/**\n * React component for rendering DAK version narrative\n */\nexport function Render({ result, locale = 'en_US' }) {\n  const { t } = useTranslation();\n\n  if (!result || !result.structured) {\n    return <div className=\"faq-answer error\">{t('dak.faq.version.no_data')}</div>;\n  }\n\n  const { version, semanticVersion, status, releaseDate } = result.structured;\n\n  if (!version) {\n    return (\n      <div className=\"faq-answer warning\">\n        <h4>{t('dak.faq.version.title')}</h4>\n        <p>{t('dak.faq.version.not_found')}</p>\n        {result.errors?.map((error, index) => (\n          <div key={index} className=\"error-message\">{error}</div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"faq-answer success\">\n      <h4>{t('dak.faq.version.title')}</h4>\n      <div className=\"version-metadata\">\n        <div className=\"version-info\">\n          <strong>{t('dak.faq.version.version_label')}: </strong>\n          <span className=\"highlight version-number\">{version}</span>\n          {semanticVersion && (\n            <div className=\"semantic-version\">\n              <small>\n                Major: {semanticVersion.major}, \n                Minor: {semanticVersion.minor}, \n                Patch: {semanticVersion.patch}\n                {semanticVersion.prerelease && ` (${semanticVersion.prerelease})`}\n              </small>\n            </div>\n          )}\n        </div>\n        {status && (\n          <div className=\"version-status\">\n            <strong>{t('dak.faq.version.status_label')}: </strong>\n            <span className={`status ${status.toLowerCase()}`}>{status}</span>\n          </div>\n        )}\n        {releaseDate && (\n          <div className=\"release-date\">\n            <strong>{t('dak.faq.version.release_date_label')}: </strong>\n            <time>{new Date(releaseDate).toLocaleDateString(locale.replace('_', '-'))}</time>\n          </div>\n        )}\n      </div>\n      {result.warnings?.map((warning, index) => (\n        <div key={index} className=\"warning-message\">{warning}</div>\n      ))}\n    </div>\n  );\n}\n\n/**\n * Get localized narrative text\n */\nfunction getLocalizedNarrative(locale, type, params = {}) {\n  const narratives = {\n    en_US: {\n      success: (() => {\n        if (!params.version) return `<h4>DAK Version</h4><p>No version found in sushi-config.yaml.</p>`;\n        let html = `<h4>DAK Version</h4><p>This DAK is version <strong>${params.version}</strong>.</p>`;\n        if (params.status) html += `<p>Status: <span class=\"status\">${params.status}</span></p>`;\n        if (params.releaseDate) html += `<p>Released: ${new Date(params.releaseDate).toLocaleDateString()}</p>`;\n        return html;\n      })(),\n      file_not_found: `<h4>DAK Version</h4><p class=\"error\">The sushi-config.yaml file was not found in this repository.</p>`,\n      error: `<h4>DAK Version</h4><p class=\"error\">An error occurred while reading the DAK configuration.</p>`\n    },\n    fr_FR: {\n      success: (() => {\n        if (!params.version) return `<h4>Version DAK</h4><p>Aucune version trouvée dans sushi-config.yaml.</p>`;\n        let html = `<h4>Version DAK</h4><p>Ce DAK est la version <strong>${params.version}</strong>.</p>`;\n        if (params.status) html += `<p>Statut: <span class=\"status\">${params.status}</span></p>`;\n        if (params.releaseDate) html += `<p>Publié: ${new Date(params.releaseDate).toLocaleDateString('fr-FR')}</p>`;\n        return html;\n      })(),\n      file_not_found: `<h4>Version DAK</h4><p class=\"error\">Le fichier sushi-config.yaml n'a pas été trouvé dans ce référentiel.</p>`,\n      error: `<h4>Version DAK</h4><p class=\"error\">Une erreur s'est produite lors de la lecture de la configuration DAK.</p>`\n    },\n    es_ES: {\n      success: (() => {\n        if (!params.version) return `<h4>Versión DAK</h4><p>No se encontró versión en sushi-config.yaml.</p>`;\n        let html = `<h4>Versión DAK</h4><p>Este DAK es la versión <strong>${params.version}</strong>.</p>`;\n        if (params.status) html += `<p>Estado: <span class=\"status\">${params.status}</span></p>`;\n        if (params.releaseDate) html += `<p>Lanzado: ${new Date(params.releaseDate).toLocaleDateString('es-ES')}</p>`;\n        return html;\n      })(),\n      file_not_found: `<h4>Versión DAK</h4><p class=\"error\">El archivo sushi-config.yaml no se encontró en este repositorio.</p>`,\n      error: `<h4>Versión DAK</h4><p class=\"error\">Ocurrió un error al leer la configuración del DAK.</p>`\n    }\n  };\n\n  const localeData = narratives[locale] || narratives['en_US'];\n  return localeData[type] || localeData.error;\n}\n\n/**\n * Get localized error message\n */\nfunction getLocalizedError(locale, type, params = {}) {\n  const errors = {\n    en_US: {\n      sushi_config_missing: 'sushi-config.yaml file not found',\n      version_not_found: 'No version field found in sushi-config.yaml',\n      parse_error: `Failed to parse sushi-config.yaml: ${params.error || 'Unknown error'}`\n    },\n    fr_FR: {\n      sushi_config_missing: 'Fichier sushi-config.yaml non trouvé',\n      version_not_found: 'Aucun champ version trouvé dans sushi-config.yaml',\n      parse_error: `Échec de l'analyse de sushi-config.yaml: ${params.error || 'Erreur inconnue'}`\n    },\n    es_ES: {\n      sushi_config_missing: 'Archivo sushi-config.yaml no encontrado',\n      version_not_found: 'No se encontró campo de versión en sushi-config.yaml',\n      parse_error: `Error al analizar sushi-config.yaml: ${params.error || 'Error desconocido'}`\n    }\n  };\n\n  const localeData = errors[locale] || errors['en_US'];\n  return localeData[type] || `Unknown error: ${type}`;\n}"],"names":["metadata","QuestionDefinition","id","level","QuestionLevel","DAK","title","description","parameters","tags","version","async","execute","input","locale","storage","warnings","errors","fileExists","QuestionResult","structured","narrative","getLocalizedNarrative","getLocalizedError","meta","cacheHint","CacheHint","scope","key","ttl","dependencies","sushiConfigContent","readFile","sushiConfig","yaml","toString","status","releaseDate","date","push","semanticVersion","semverMatch","match","major","parseInt","minor","patch","prerelease","raw","name","error","message","Render","_ref","_result$warnings","result","t","useTranslation","_jsx","className","children","_result$errors","_jsxs","concat","toLowerCase","Date","toLocaleDateString","replace","map","warning","index","type","params","arguments","length","undefined","narratives","en_US","success","html","file_not_found","fr_FR","es_ES","localeData","sushi_config_missing","version_not_found","parse_error"],"sourceRoot":""}