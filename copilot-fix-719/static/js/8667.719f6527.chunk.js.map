{"version":3,"file":"static/js/8667.719f6527.chunk.js","mappings":"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","sources":["components/DAKFAQDemo.js"],"sourcesContent":["/**\n * DAK FAQ Demo Page\n * Demonstrates the FAQ functionality with sample questions\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams, useLocation } from 'react-router-dom';\nimport FAQAnswer from '../dak/faq/components/FAQAnswer.js';\nimport faqExecutionEngine from '../dak/faq/engine/FAQExecutionEngine.js';\nimport githubService from '../services/githubService.js';\nimport './DAKFAQDemo.css';\n\nconst DAKFAQDemo = () => {\n  const { t } = useTranslation();\n  const { user, repo, branch } = useParams();\n  const location = useLocation();\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Sample questions to demonstrate\n  const sampleQuestions = [\n    {\n      id: 'dak-name',\n      title: 'What is the name of this DAK?',\n      description: 'Extracts the DAK name from sushi-config.yaml'\n    },\n    {\n      id: 'dak-version',\n      title: 'What is the version of this DAK?',\n      description: 'Extracts the DAK version from sushi-config.yaml'\n    },\n    {\n      id: 'decision-table-inputs',\n      title: 'What are the inputs required for this decision table?',\n      description: 'Analyzes DMN files and extracts input requirements for decision tables'\n    }\n  ];\n\n  useEffect(() => {\n    initializeFAQEngine();\n  }, []);\n\n  const initializeFAQEngine = async () => {\n    try {\n      setLoading(true);\n      await faqExecutionEngine.initialize();\n      const catalog = faqExecutionEngine.getCatalog();\n      setQuestions(catalog);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getRepositoryContext = () => {\n    if (user && repo) {\n      return {\n        repository: `${user}/${repo}`,\n        branch: branch || 'main'\n      };\n    }\n    \n    // Fallback to location state\n    const state = location.state;\n    if (state?.user && state?.repo) {\n      return {\n        repository: `${state.user}/${state.repo}`,\n        branch: state.branch || 'main'\n      };\n    }\n    \n    return null;\n  };\n\n  const repositoryContext = getRepositoryContext();\n\n  if (loading) {\n    return (\n      <div className=\"dak-faq-demo loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>{t('dak.faq.loading')}</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dak-faq-demo error\">\n        <h2>FAQ System Error</h2>\n        <p>{error}</p>\n        <button onClick={initializeFAQEngine}>Retry</button>\n      </div>\n    );\n  }\n\n  if (!repositoryContext) {\n    return (\n      <div className=\"dak-faq-demo no-context\">\n        <h2>DAK FAQ Demo</h2>\n        <p>No repository context available. Please navigate from a DAK repository page.</p>\n        <div className=\"demo-info\">\n          <h3>Available Questions</h3>\n          <ul>\n            {questions.map(question => (\n              <li key={question.id}>\n                <strong>{question.title}</strong> - {question.description}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dak-faq-demo\">\n      <header className=\"dak-faq-demo-header\">\n        <h1>DAK FAQ Demo</h1>\n        <div className=\"repository-info\">\n          <span className=\"repo-name\">{repositoryContext.repository}</span>\n          <span className=\"branch-name\">({repositoryContext.branch})</span>\n        </div>\n      </header>\n\n      <div className=\"faq-questions\">\n        <h2>Available Questions</h2>\n        <p>Here are some example FAQ questions that can be answered about this DAK:</p>\n        \n        {sampleQuestions.map(question => (\n          <div key={question.id} className=\"faq-question-section\">\n            <h3>{question.title}</h3>\n            <p className=\"question-description\">{question.description}</p>\n            \n            {question.id === 'decision-table-inputs' ? (\n              // Special handling for asset-level DMN question\n              <div className=\"dmn-demo\">\n                <p><em>This is an asset-level question that analyzes individual DMN files. \n                In a real DAK repository, this would scan DMN files in directories like input/cql/ or input/dmn/.</em></p>\n                <FAQAnswer\n                  questionId={question.id}\n                  parameters={{\n                    ...repositoryContext,\n                    assetFile: 'input/cql/IMMZ.D2.DT.BCG.dmn' // Example DMN file path\n                  }}\n                  githubService={githubService}\n                  showRawData={true}\n                />\n              </div>\n            ) : (\n              // Regular DAK/component-level questions\n              <FAQAnswer\n                questionId={question.id}\n                parameters={repositoryContext}\n                githubService={githubService}\n                showRawData={true}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"faq-catalog\">\n        <h2>FAQ Question Catalog</h2>\n        <p>All available questions in the system:</p>\n        \n        <div className=\"catalog-grid\">\n          {questions.map(question => (\n            <div key={question.id} className=\"catalog-item\">\n              <h4>{question.title}</h4>\n              <p>{question.description}</p>\n              <div className=\"catalog-meta\">\n                <span className=\"level\">{question.level}</span>\n                <span className=\"version\">v{question.version}</span>\n              </div>\n              <div className=\"tags\">\n                {question.tags.map(tag => (\n                  <span key={tag} className=\"tag\">{tag}</span>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"mcp-info\">\n        <h2>MCP Server Integration</h2>\n        <p>\n          The FAQ system can also be accessed via the local MCP server API for programmatic access.\n          Start the MCP server and access:\n        </p>\n        <ul>\n          <li><code>GET http://127.0.0.1:3001/faq/questions/catalog</code> - Get question catalog</li>\n          <li><code>POST http://127.0.0.1:3001/faq/questions/execute</code> - Execute questions</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default DAKFAQDemo;"],"names":["DAKFAQDemo","t","useTranslation","user","repo","branch","useParams","location","useLocation","questions","setQuestions","useState","loading","setLoading","error","setError","useEffect","initializeFAQEngine","async","faqExecutionEngine","initialize","catalog","getCatalog","err","message","repositoryContext","getRepositoryContext","repository","concat","state","_jsxs","className","children","_jsx","onClick","id","title","description","map","question","FAQAnswer","questionId","parameters","_objectSpread","assetFile","githubService","showRawData","level","version","tags","tag"],"sourceRoot":""}