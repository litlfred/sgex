{"version":3,"file":"static/js/733.c0070025.chunk.js","mappings":"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","sources":["dak/faq/types/QuestionDefinition.js","dak/faq/registry/ParameterRegistryService.js","dak/faq/storage/Storage.js","dak/faq/engine/FAQExecutionEngine.js","dak/faq/components/FAQAnswer.js","components/DAKFAQDemo.js"],"sourcesContent":["/**\n * Core types and interfaces for DAK FAQ system\n */\n\n/**\n * Question hierarchy levels\n */\nexport const QuestionLevel = {\n  DAK: 'dak',\n  COMPONENT: 'component', \n  ASSET: 'asset'\n};\n\n/**\n * Question metadata definition\n */\nexport class QuestionDefinition {\n  constructor({\n    id,\n    level,\n    title,\n    description,\n    parameters = [],\n    tags = [],\n    version = '1.0.0',\n    isTemplate = false,\n    componentTypes = [],\n    assetTypes = []\n  }) {\n    this.id = id;\n    this.level = level;\n    this.title = title;\n    this.description = description;\n    this.parameters = parameters;\n    this.tags = tags;\n    this.version = version;\n    this.isTemplate = isTemplate;\n    this.componentTypes = componentTypes;\n    this.assetTypes = assetTypes;\n  }\n}\n\n/**\n * Parameter definition for questions\n */\nexport class ParameterDefinition {\n  constructor({\n    name,\n    type = 'string',\n    required = false,\n    description = '',\n    defaultValue = null,\n    validation = {}\n  }) {\n    this.name = name;\n    this.type = type;\n    this.required = required;\n    this.description = description;\n    this.defaultValue = defaultValue;\n    this.validation = validation;\n  }\n}\n\n/**\n * Question execution context\n */\nexport class QuestionContext {\n  constructor({\n    repository,\n    locale = 'en_US',\n    branch = 'main',\n    user = null,\n    assetFile = null,\n    componentType = null,\n    storage = null\n  }) {\n    this.repository = repository;\n    this.locale = locale;\n    this.branch = branch;\n    this.user = user;\n    this.assetFile = assetFile;\n    this.componentType = componentType;\n    this.storage = storage;\n  }\n}\n\n/**\n * Question execution result\n */\nexport class QuestionResult {\n  constructor({\n    structured = {},\n    narrative = '',\n    warnings = [],\n    errors = [],\n    meta = {}\n  }) {\n    this.structured = structured;\n    this.narrative = narrative;\n    this.warnings = warnings;\n    this.errors = errors;\n    this.meta = meta;\n  }\n}\n\n/**\n * Cache hint for FAQ answers\n */\nexport class CacheHint {\n  constructor({\n    scope = 'repository',\n    key = '',\n    ttl = 3600, // 1 hour default\n    dependencies = []\n  }) {\n    this.scope = scope;\n    this.key = key;\n    this.ttl = ttl;\n    this.dependencies = dependencies;\n  }\n}","/**\n * Parameter registry service for DAK FAQ system\n * Manages parameter definitions and validation\n */\n\nimport yaml from 'js-yaml';\nimport { ParameterDefinition } from '../types/QuestionDefinition.js';\n\nclass ParameterRegistryService {\n  constructor() {\n    this.registry = null;\n    this.loaded = false;\n  }\n\n  /**\n   * Load parameter registry from YAML\n   * @param {string} yamlContent - YAML content as string\n   */\n  loadFromYaml(yamlContent) {\n    try {\n      this.registry = yaml.load(yamlContent);\n      this.loaded = true;\n    } catch (error) {\n      throw new Error(`Failed to parse parameter registry YAML: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get parameters for a specific context\n   * @param {string} level - Question level (dak, component, asset)\n   * @param {string} type - Component or asset type\n   * @returns {ParameterDefinition[]} - Array of parameter definitions\n   */\n  getParameters(level, type = null) {\n    if (!this.loaded || !this.registry) {\n      throw new Error('Parameter registry not loaded');\n    }\n\n    const parameters = [];\n    \n    // Add global defaults\n    if (this.registry.defaults) {\n      for (const [name, config] of Object.entries(this.registry.defaults)) {\n        parameters.push(new ParameterDefinition({\n          name,\n          type: config.type,\n          required: config.required || false,\n          description: config.description || '',\n          defaultValue: config.default || null,\n          validation: config.validation || {}\n        }));\n      }\n    }\n\n    // Add level-specific parameters\n    if (this.registry[level]) {\n      if (type && this.registry[level][type]) {\n        // Type-specific parameters\n        for (const [name, config] of Object.entries(this.registry[level][type])) {\n          parameters.push(new ParameterDefinition({\n            name,\n            ...config\n          }));\n        }\n      } else if (!type) {\n        // All parameters for the level\n        for (const [paramName, config] of Object.entries(this.registry[level])) {\n          if (typeof config === 'object' && config.type) {\n            // Direct parameter definition\n            parameters.push(new ParameterDefinition({\n              name: paramName,\n              ...config\n            }));\n          }\n        }\n      }\n    }\n\n    // Remove duplicates (later definitions override earlier ones)\n    const uniqueParams = new Map();\n    parameters.forEach(param => {\n      uniqueParams.set(param.name, param);\n    });\n\n    return Array.from(uniqueParams.values());\n  }\n\n  /**\n   * Validate parameters against registry\n   * @param {Object} parameters - Parameters to validate\n   * @param {string} level - Question level\n   * @param {string} type - Component or asset type\n   * @returns {Object} - Validation result with normalized parameters and errors\n   */\n  validateParameters(parameters, level, type = null) {\n    const definitions = this.getParameters(level, type);\n    const normalized = {};\n    const errors = [];\n\n    // Check required parameters\n    for (const definition of definitions) {\n      const value = parameters[definition.name];\n      \n      if (definition.required && (value === undefined || value === null)) {\n        errors.push(`Required parameter '${definition.name}' is missing`);\n        continue;\n      }\n\n      // Use default value if not provided\n      const finalValue = value !== undefined ? value : definition.defaultValue;\n      \n      // Type validation\n      if (finalValue !== null && finalValue !== undefined) {\n        const typeError = this.validateParameterType(finalValue, definition);\n        if (typeError) {\n          errors.push(`Parameter '${definition.name}': ${typeError}`);\n          continue;\n        }\n\n        // Custom validation\n        const validationError = this.validateParameterCustom(finalValue, definition);\n        if (validationError) {\n          errors.push(`Parameter '${definition.name}': ${validationError}`);\n          continue;\n        }\n      }\n\n      normalized[definition.name] = finalValue;\n    }\n\n    // Check for unknown parameters\n    for (const paramName of Object.keys(parameters)) {\n      if (!definitions.find(def => def.name === paramName)) {\n        errors.push(`Unknown parameter '${paramName}'`);\n      }\n    }\n\n    return {\n      normalized,\n      errors,\n      isValid: errors.length === 0\n    };\n  }\n\n  /**\n   * Validate parameter type\n   * @param {any} value - Parameter value\n   * @param {ParameterDefinition} definition - Parameter definition\n   * @returns {string|null} - Error message or null if valid\n   */\n  validateParameterType(value, definition) {\n    const expectedType = definition.type;\n    const actualType = typeof value;\n\n    switch (expectedType) {\n      case 'string':\n        if (actualType !== 'string') {\n          return `Expected string, got ${actualType}`;\n        }\n        break;\n      case 'boolean':\n        if (actualType !== 'boolean') {\n          return `Expected boolean, got ${actualType}`;\n        }\n        break;\n      case 'number':\n        if (actualType !== 'number' || isNaN(value)) {\n          return `Expected number, got ${actualType}`;\n        }\n        break;\n      case 'array':\n        if (!Array.isArray(value)) {\n          return `Expected array, got ${actualType}`;\n        }\n        break;\n      case 'object':\n        if (actualType !== 'object' || Array.isArray(value)) {\n          return `Expected object, got ${actualType}`;\n        }\n        break;\n      default:\n        return `Unknown type: ${expectedType}`;\n    }\n\n    return null;\n  }\n\n  /**\n   * Validate parameter against custom rules\n   * @param {any} value - Parameter value\n   * @param {ParameterDefinition} definition - Parameter definition\n   * @returns {string|null} - Error message or null if valid\n   */\n  validateParameterCustom(value, definition) {\n    if (!definition.validation) {\n      return null;\n    }\n\n    const validation = definition.validation;\n\n    // Pattern validation\n    if (validation.pattern && typeof value === 'string') {\n      const regex = new RegExp(validation.pattern);\n      if (!regex.test(value)) {\n        return `Value does not match pattern ${validation.pattern}`;\n      }\n    }\n\n    // Enum validation\n    if (validation.enum && Array.isArray(validation.enum)) {\n      if (!validation.enum.includes(value)) {\n        return `Value must be one of: ${validation.enum.join(', ')}`;\n      }\n    }\n\n    // Length validation\n    if (validation.minLength !== undefined && typeof value === 'string') {\n      if (value.length < validation.minLength) {\n        return `String must be at least ${validation.minLength} characters`;\n      }\n    }\n\n    if (validation.maxLength !== undefined && typeof value === 'string') {\n      if (value.length > validation.maxLength) {\n        return `String must be at most ${validation.maxLength} characters`;\n      }\n    }\n\n    // Numeric range validation\n    if (validation.min !== undefined && typeof value === 'number') {\n      if (value < validation.min) {\n        return `Number must be at least ${validation.min}`;\n      }\n    }\n\n    if (validation.max !== undefined && typeof value === 'number') {\n      if (value > validation.max) {\n        return `Number must be at most ${validation.max}`;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get parameter schema for OpenAPI/JSON Schema generation\n   * @param {string} level - Question level\n   * @param {string} type - Component or asset type\n   * @returns {Object} - JSON Schema object\n   */\n  getParameterSchema(level, type = null) {\n    const definitions = this.getParameters(level, type);\n    const properties = {};\n    const required = [];\n\n    for (const definition of definitions) {\n      const property = {\n        type: definition.type,\n        description: definition.description\n      };\n\n      if (definition.defaultValue !== null) {\n        property.default = definition.defaultValue;\n      }\n\n      if (definition.validation) {\n        Object.assign(property, definition.validation);\n      }\n\n      properties[definition.name] = property;\n\n      if (definition.required) {\n        required.push(definition.name);\n      }\n    }\n\n    return {\n      type: 'object',\n      properties,\n      required\n    };\n  }\n}\n\n// Default registry content\nconst DEFAULT_REGISTRY_YAML = `\ndefaults:\n  repository:\n    type: string\n    required: true\n    description: \"Repository context (always required)\"\n  locale:\n    type: string\n    required: false\n    default: \"en_US\"\n    description: \"Locale for responses\"\n  branch:\n    type: string\n    required: false\n    default: \"main\"\n    description: \"Git branch context\"\n\ndak:\n\ncomponent:\n  businessProcess:\n    componentType:\n      type: string\n      required: true\n      default: \"businessProcess\"\n      description: \"Type of component being analyzed\"\n\nasset:\n  lesson:\n    assetFile:\n      type: string\n      required: true\n      description: \"Relative path to the lesson file\"\n`;\n\n// Singleton instance\nconst parameterRegistryService = new ParameterRegistryService();\n\n// Load default registry\nparameterRegistryService.loadFromYaml(DEFAULT_REGISTRY_YAML);\n\nexport default parameterRegistryService;","/**\n * Storage abstraction interface for FAQ questions\n * Provides unified access to file system operations for local repositories\n */\n\nexport class Storage {\n  /**\n   * Read a file from the repository\n   * @param {string} path - Relative path to the file\n   * @returns {Promise<Buffer>} - File content as Buffer\n   */\n  async readFile(path) {\n    throw new Error('readFile must be implemented by subclass');\n  }\n\n  /**\n   * Check if a file exists\n   * @param {string} path - Relative path to the file\n   * @returns {Promise<boolean>} - Whether the file exists\n   */\n  async fileExists(path) {\n    throw new Error('fileExists must be implemented by subclass');\n  }\n\n  /**\n   * List files matching a pattern\n   * @param {string} pattern - Glob pattern or prefix\n   * @param {Object} options - Options for listing\n   * @returns {Promise<string[]>} - Array of matching file paths\n   */\n  async listFiles(pattern, options = {}) {\n    throw new Error('listFiles must be implemented by subclass');\n  }\n\n  /**\n   * Get file metadata\n   * @param {string} path - Relative path to the file\n   * @returns {Promise<Object>} - File metadata (size, modified, etc.)\n   */\n  async getFileInfo(path) {\n    throw new Error('getFileInfo must be implemented by subclass');\n  }\n}\n\n/**\n * GitHub-based storage implementation\n * Provides access to files in GitHub repositories\n */\nexport class GitHubStorage extends Storage {\n  constructor(githubService, repository, branch = 'main') {\n    super();\n    this.githubService = githubService;\n    this.repository = repository;\n    this.branch = branch;\n    this.cache = new Map();\n  }\n\n  /**\n   * Parse repository string into owner/repo\n   * @param {string} repository - Repository in format \"owner/repo\" or GitHub URL\n   * @returns {Object} - {owner, repo}\n   */\n  parseRepository(repository) {\n    if (typeof repository === 'string') {\n      // Handle GitHub URLs\n      if (repository.includes('github.com')) {\n        const match = repository.match(/github\\.com\\/([^/]+)\\/([^/?#]+)/);\n        if (match) {\n          return { owner: match[1], repo: match[2].replace(/\\.git$/, '') };\n        }\n      }\n      \n      // Handle owner/repo format\n      const parts = repository.split('/');\n      if (parts.length === 2) {\n        return { owner: parts[0], repo: parts[1] };\n      }\n    }\n    \n    throw new Error(`Invalid repository format: ${repository}`);\n  }\n\n  async readFile(path) {\n    const cacheKey = `${this.repository}:${this.branch}:${path}`;\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey);\n    }\n\n    try {\n      const { owner, repo } = this.parseRepository(this.repository);\n      const response = await this.githubService.getFileContent(owner, repo, path, this.branch);\n      \n      // GitHub API returns base64 encoded content\n      const content = Buffer.from(response.content, 'base64');\n      this.cache.set(cacheKey, content);\n      return content;\n    } catch (error) {\n      throw new Error(`Failed to read file ${path}: ${error.message}`);\n    }\n  }\n\n  async fileExists(path) {\n    try {\n      await this.readFile(path);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async listFiles(pattern, options = {}) {\n    try {\n      const { owner, repo } = this.parseRepository(this.repository);\n      \n      // For GitHub API, we need to get the repository tree\n      const tree = await this.githubService.getRepositoryTree(owner, repo, this.branch, true);\n      \n      // Filter files based on pattern\n      const files = tree.tree\n        .filter(item => item.type === 'blob')\n        .map(item => item.path);\n\n      // Simple pattern matching (could be enhanced with proper glob support)\n      if (pattern.includes('*') || pattern.includes('?')) {\n        const regexPattern = pattern\n          .replace(/\\./g, '\\\\.')\n          .replace(/\\*/g, '.*')\n          .replace(/\\?/g, '.');\n        const regex = new RegExp(`^${regexPattern}$`);\n        return files.filter(file => regex.test(file));\n      } else {\n        // Prefix matching\n        return files.filter(file => file.startsWith(pattern));\n      }\n    } catch (error) {\n      throw new Error(`Failed to list files: ${error.message}`);\n    }\n  }\n\n  async getFileInfo(path) {\n    try {\n      const { owner, repo } = this.parseRepository(this.repository);\n      const response = await this.githubService.getFileContent(owner, repo, path, this.branch);\n      \n      return {\n        size: Buffer.from(response.content, 'base64').length,\n        sha: response.sha,\n        path: response.path,\n        type: response.type,\n        url: response.html_url\n      };\n    } catch (error) {\n      throw new Error(`Failed to get file info for ${path}: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Mock storage implementation for browser testing\n * Can be used when no real storage is available\n */\nexport class MockStorage extends Storage {\n  constructor(mockFiles = {}) {\n    super();\n    this.mockFiles = mockFiles;\n  }\n\n  async readFile(path) {\n    if (this.mockFiles[path]) {\n      return Buffer.from(this.mockFiles[path], 'utf-8');\n    }\n    throw new Error(`File not found: ${path}`);\n  }\n\n  async fileExists(path) {\n    return this.mockFiles.hasOwnProperty(path);\n  }\n\n  async listFiles(pattern, options = {}) {\n    const files = Object.keys(this.mockFiles);\n    \n    if (pattern.includes('*') || pattern.includes('?')) {\n      const regexPattern = pattern\n        .replace(/\\./g, '\\\\.')\n        .replace(/\\*/g, '.*')\n        .replace(/\\?/g, '.');\n      const regex = new RegExp(`^${regexPattern}$`);\n      return files.filter(file => regex.test(file));\n    } else {\n      return files.filter(file => file.startsWith(pattern));\n    }\n  }\n\n  async getFileInfo(path) {\n    if (this.mockFiles[path]) {\n      return {\n        size: Buffer.from(this.mockFiles[path], 'utf-8').length,\n        path: path,\n        type: 'file'\n      };\n    }\n    throw new Error(`File not found: ${path}`);\n  }\n}","/**\n * FAQ Execution Engine\n * Manages the execution of FAQ questions and batch processing\n */\n\nimport { QuestionContext, QuestionResult } from '../types/QuestionDefinition.js';\nimport parameterRegistryService from '../registry/ParameterRegistryService.js';\nimport { GitHubStorage } from '../storage/Storage.js';\n\nclass FAQExecutionEngine {\n  constructor() {\n    this.questionRegistry = new Map();\n    this.initialized = false;\n  }\n\n  /**\n   * Initialize the engine with available questions\n   */\n  async initialize() {\n    if (this.initialized) return;\n\n    try {\n      // Import and register all question components\n      await this.loadQuestions();\n      this.initialized = true;\n    } catch (error) {\n      throw new Error(`Failed to initialize FAQ engine: ${error.message}`);\n    }\n  }\n\n  /**\n   * Load all question components from the questions directory\n   */\n  async loadQuestions() {\n    const questions = [\n      // DAK-level questions\n      {\n        id: 'dak-name',\n        module: () => import('../questions/dak/DakNameQuestion.js')\n      },\n      {\n        id: 'dak-version', \n        module: () => import('../questions/dak/DakVersionQuestion.js')\n      },\n      // Component-level questions\n      {\n        id: 'business-process-workflows',\n        module: () => import('../questions/component/businessProcess/BusinessProcessWorkflowsQuestion.js')\n      },\n      // Asset-level questions\n      {\n        id: 'decision-table-inputs',\n        module: () => import('../questions/asset/decisionSupportLogic/DecisionTableInputsQuestion.js')\n      }\n    ];\n\n    for (const questionConfig of questions) {\n      try {\n        const questionModule = await questionConfig.module();\n        \n        if (questionModule.metadata && questionModule.execute) {\n          this.questionRegistry.set(questionConfig.id, {\n            metadata: questionModule.metadata,\n            execute: questionModule.execute,\n            Render: questionModule.Render || null\n          });\n        } else {\n          console.warn(`Question ${questionConfig.id} is missing required exports (metadata, execute)`);\n        }\n      } catch (error) {\n        console.error(`Failed to load question ${questionConfig.id}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Get catalog of all available questions\n   * @param {Object} filters - Optional filters (level, tags, etc.)\n   * @returns {Array} - Array of question metadata\n   */\n  getCatalog(filters = {}) {\n    if (!this.initialized) {\n      throw new Error('FAQ engine not initialized');\n    }\n\n    const questions = Array.from(this.questionRegistry.values()).map(q => q.metadata);\n\n    // Apply filters\n    let filteredQuestions = questions;\n\n    if (filters.level) {\n      filteredQuestions = filteredQuestions.filter(q => q.level === filters.level);\n    }\n\n    if (filters.tags && Array.isArray(filters.tags)) {\n      filteredQuestions = filteredQuestions.filter(q => \n        filters.tags.some(tag => q.tags.includes(tag))\n      );\n    }\n\n    if (filters.componentType) {\n      filteredQuestions = filteredQuestions.filter(q => \n        !q.componentTypes || q.componentTypes.length === 0 || q.componentTypes.includes(filters.componentType)\n      );\n    }\n\n    if (filters.assetType) {\n      filteredQuestions = filteredQuestions.filter(q => \n        !q.assetTypes || q.assetTypes.length === 0 || q.assetTypes.includes(filters.assetType)\n      );\n    }\n\n    return filteredQuestions;\n  }\n\n  /**\n   * Execute a batch of FAQ questions\n   * @param {Array} requests - Array of question requests\n   * @param {Object} context - Execution context (githubService, etc.)\n   * @returns {Promise<Array>} - Array of execution results\n   */\n  async executeBatch(requests, context = {}) {\n    if (!this.initialized) {\n      await this.initialize();\n    }\n\n    const results = [];\n\n    for (const request of requests) {\n      try {\n        const result = await this.executeQuestion(request, context);\n        results.push({\n          questionId: request.questionId,\n          success: true,\n          result\n        });\n      } catch (error) {\n        results.push({\n          questionId: request.questionId,\n          success: false,\n          error: error.message,\n          result: new QuestionResult({\n            structured: {},\n            narrative: this.getErrorNarrative(request.locale || 'en_US', error.message),\n            errors: [error.message],\n            meta: {}\n          })\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Execute a single FAQ question\n   * @param {Object} request - Question request\n   * @param {Object} context - Execution context\n   * @returns {Promise<QuestionResult>} - Question result\n   */\n  async executeQuestion(request, context = {}) {\n    const { questionId, parameters = {}, assetFiles = [] } = request;\n\n    // Get question from registry\n    const question = this.questionRegistry.get(questionId);\n    if (!question) {\n      throw new Error(`Question not found: ${questionId}`);\n    }\n\n    // Handle template questions (asset-level questions that need to be instantiated per asset)\n    if (question.metadata.isTemplate && assetFiles.length > 0) {\n      return await this.executeTemplateQuestion(question, request, context);\n    }\n\n    // Validate and normalize parameters\n    const validation = parameterRegistryService.validateParameters(\n      parameters,\n      question.metadata.level,\n      this.getQuestionType(question.metadata)\n    );\n\n    if (!validation.isValid) {\n      throw new Error(`Parameter validation failed: ${validation.errors.join(', ')}`);\n    }\n\n    // Create storage interface\n    const storage = this.createStorage(validation.normalized, context);\n\n    // Create execution context\n    const executionContext = new QuestionContext({\n      repository: validation.normalized.repository,\n      locale: validation.normalized.locale || 'en_US',\n      branch: validation.normalized.branch || 'main',\n      user: context.user || null,\n      assetFile: validation.normalized.assetFile || null,\n      componentType: validation.normalized.componentType || null,\n      storage\n    });\n\n    // Execute the question\n    const input = {\n      ...validation.normalized,\n      storage,\n      context: executionContext\n    };\n\n    return await question.execute(input);\n  }\n\n  /**\n   * Execute template question for multiple assets\n   * @param {Object} question - Question definition\n   * @param {Object} request - Original request\n   * @param {Object} context - Execution context\n   * @returns {Promise<QuestionResult>} - Aggregated result\n   */\n  async executeTemplateQuestion(question, request, context) {\n    const { parameters = {}, assetFiles = [] } = request;\n    const results = [];\n    const allWarnings = [];\n    const allErrors = [];\n\n    for (const assetFile of assetFiles) {\n      try {\n        const assetParameters = { ...parameters, assetFile };\n        \n        // Validate parameters for this asset\n        const validation = parameterRegistryService.validateParameters(\n          assetParameters,\n          question.metadata.level,\n          this.getQuestionType(question.metadata)\n        );\n\n        if (!validation.isValid) {\n          allErrors.push(`Asset ${assetFile}: ${validation.errors.join(', ')}`);\n          continue;\n        }\n\n        // Create storage and context for this asset\n        const storage = this.createStorage(validation.normalized, context);\n        const executionContext = new QuestionContext({\n          repository: validation.normalized.repository,\n          locale: validation.normalized.locale || 'en_US',\n          branch: validation.normalized.branch || 'main',\n          user: context.user || null,\n          assetFile: assetFile,\n          componentType: validation.normalized.componentType || null,\n          storage\n        });\n\n        const input = {\n          ...validation.normalized,\n          storage,\n          context: executionContext\n        };\n\n        const result = await question.execute(input);\n        results.push({\n          assetFile,\n          result\n        });\n\n        // Collect warnings and errors\n        if (result.warnings) allWarnings.push(...result.warnings);\n        if (result.errors) allErrors.push(...result.errors);\n\n      } catch (error) {\n        allErrors.push(`Asset ${assetFile}: ${error.message}`);\n      }\n    }\n\n    // Aggregate results\n    const aggregatedStructured = {\n      assets: results.map(r => ({\n        assetFile: r.assetFile,\n        ...r.result.structured\n      })),\n      summary: {\n        totalAssets: assetFiles.length,\n        successfulAssets: results.length,\n        failedAssets: assetFiles.length - results.length\n      }\n    };\n\n    const aggregatedNarrative = this.aggregateNarratives(results, request.locale || 'en_US');\n\n    return new QuestionResult({\n      structured: aggregatedStructured,\n      narrative: aggregatedNarrative,\n      warnings: allWarnings,\n      errors: allErrors,\n      meta: {\n        isAggregated: true,\n        questionId: question.metadata.id,\n        assetCount: assetFiles.length\n      }\n    });\n  }\n\n  /**\n   * Create storage interface based on parameters and context\n   * @param {Object} parameters - Validated parameters\n   * @param {Object} context - Execution context\n   * @returns {Storage} - Storage interface\n   */\n  createStorage(parameters, context) {\n    if (context.githubService) {\n      // Use GitHub storage for web application\n      return new GitHubStorage(\n        context.githubService,\n        parameters.repository,\n        parameters.branch || 'main'\n      );\n    } else {\n      // This would be implemented for MCP server with local storage\n      throw new Error('Local storage not implemented in web context');\n    }\n  }\n\n  /**\n   * Get question type for parameter validation\n   * @param {Object} metadata - Question metadata\n   * @returns {string} - Question type\n   */\n  getQuestionType(metadata) {\n    if (metadata.componentTypes && metadata.componentTypes.length > 0) {\n      return metadata.componentTypes[0];\n    }\n    if (metadata.assetTypes && metadata.assetTypes.length > 0) {\n      return metadata.assetTypes[0];\n    }\n    return null;\n  }\n\n  /**\n   * Aggregate narratives from multiple results\n   * @param {Array} results - Array of asset results\n   * @param {string} locale - Locale for output\n   * @returns {string} - Aggregated narrative HTML\n   */\n  aggregateNarratives(results, locale) {\n    if (results.length === 0) {\n      return `<h4>No Results</h4><p>No assets were processed successfully.</p>`;\n    }\n\n    let html = `<h4>Asset Analysis Results</h4>`;\n    html += `<p>Processed ${results.length} asset(s):</p>`;\n    html += `<ul>`;\n\n    for (const { assetFile, result } of results) {\n      html += `<li><strong>${assetFile}</strong>`;\n      if (result.errors && result.errors.length > 0) {\n        html += ` <span class=\"error\">(${result.errors.length} error(s))</span>`;\n      } else if (result.warnings && result.warnings.length > 0) {\n        html += ` <span class=\"warning\">(${result.warnings.length} warning(s))</span>`;\n      } else {\n        html += ` <span class=\"success\">✓</span>`;\n      }\n      html += `</li>`;\n    }\n\n    html += `</ul>`;\n    return html;\n  }\n\n  /**\n   * Get error narrative\n   * @param {string} locale - Locale for error message\n   * @param {string} error - Error message\n   * @returns {string} - Error narrative HTML\n   */\n  getErrorNarrative(locale, error) {\n    const errorMessages = {\n      en_US: `<h4>Error</h4><p class=\"error\">An error occurred while executing the question: ${error}</p>`,\n      fr_FR: `<h4>Erreur</h4><p class=\"error\">Une erreur s'est produite lors de l'exécution de la question: ${error}</p>`,\n      es_ES: `<h4>Error</h4><p class=\"error\">Ocurrió un error al ejecutar la pregunta: ${error}</p>`\n    };\n\n    return errorMessages[locale] || errorMessages['en_US'];\n  }\n\n  /**\n   * Normalize locale string\n   * @param {string} locale - Input locale\n   * @returns {string} - Normalized locale\n   */\n  normalizeLocale(locale) {\n    if (!locale) return 'en_US';\n    \n    // Handle common locale formats\n    const normalized = locale.replace('-', '_');\n    \n    // Map to supported locales\n    const supportedLocales = ['en_US', 'fr_FR', 'es_ES', 'ar_AR', 'zh_CN', 'ru_RU'];\n    \n    if (supportedLocales.includes(normalized)) {\n      return normalized;\n    }\n    \n    // Try base language\n    const baseLanguage = normalized.split('_')[0];\n    const baseLocaleMap = {\n      'en': 'en_US',\n      'fr': 'fr_FR', \n      'es': 'es_ES',\n      'ar': 'ar_AR',\n      'zh': 'zh_CN',\n      'ru': 'ru_RU'\n    };\n    \n    return baseLocaleMap[baseLanguage] || 'en_US';\n  }\n}\n\n// Singleton instance\nconst faqExecutionEngine = new FAQExecutionEngine();\n\nexport default faqExecutionEngine;","/**\n * FAQ Answer React Component\n * Renders FAQ question results with internationalization support\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport faqExecutionEngine from '../engine/FAQExecutionEngine.js';\nimport DOMPurify from 'dompurify';\nimport './FAQAnswer.css';\n\nconst FAQAnswer = ({ \n  questionId, \n  parameters = {}, \n  githubService = null,\n  assetFiles = [],\n  showRawData = false,\n  className = ''\n}) => {\n  const { t, i18n } = useTranslation();\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const executeQuestion = useCallback(async () => {\n    if (!questionId || !githubService) {\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Prepare request\n      const request = {\n        questionId,\n        parameters: {\n          ...parameters,\n          locale: i18n.language.replace('-', '_') || 'en_US'\n        },\n        assetFiles\n      };\n\n      // Execute question\n      const context = { githubService };\n      const questionResult = await faqExecutionEngine.executeQuestion(request, context);\n      \n      setResult(questionResult);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [questionId, parameters, githubService, assetFiles, i18n.language]);\n\n  useEffect(() => {\n    executeQuestion();\n  }, [executeQuestion]);\n\n  const sanitizeHTML = (html) => {\n    return DOMPurify.sanitize(html, {\n      ALLOWED_TAGS: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'div', 'span', 'ul', 'ol', 'li', 'strong', 'em', 'code', 'pre', 'time', 'small'],\n      ALLOWED_ATTR: ['class', 'datetime']\n    });\n  };\n\n  const renderNarrative = () => {\n    if (!result?.narrative) return null;\n\n    return (\n      <div \n        className=\"faq-narrative\"\n        dangerouslySetInnerHTML={{ __html: sanitizeHTML(result.narrative) }}\n      />\n    );\n  };\n\n  const renderStructuredData = () => {\n    if (!showRawData || !result?.structured) return null;\n\n    return (\n      <details className=\"faq-structured-data\">\n        <summary>{t('dak.faq.structured_data')}</summary>\n        <pre>{JSON.stringify(result.structured, null, 2)}</pre>\n      </details>\n    );\n  };\n\n  const renderMessages = () => {\n    const warnings = result?.warnings || [];\n    const errors = result?.errors || [];\n    \n    if (warnings.length === 0 && errors.length === 0) return null;\n\n    return (\n      <div className=\"faq-messages\">\n        {errors.map((error, index) => (\n          <div key={`error-${index}`} className=\"faq-message faq-error\">\n            <span className=\"faq-message-icon\">⚠️</span>\n            {error}\n          </div>\n        ))}\n        {warnings.map((warning, index) => (\n          <div key={`warning-${index}`} className=\"faq-message faq-warning\">\n            <span className=\"faq-message-icon\">⚠️</span>\n            {warning}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderMetadata = () => {\n    if (!showRawData || !result?.meta) return null;\n\n    return (\n      <details className=\"faq-metadata\">\n        <summary>{t('dak.faq.metadata')}</summary>\n        <pre>{JSON.stringify(result.meta, null, 2)}</pre>\n      </details>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className={`faq-answer loading ${className}`}>\n        <div className=\"faq-loading-spinner\"></div>\n        <p>{t('dak.faq.loading')}</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`faq-answer error ${className}`}>\n        <h4>{t('dak.faq.error_title')}</h4>\n        <p className=\"faq-error-message\">{error}</p>\n        <button onClick={executeQuestion} className=\"faq-retry-button\">\n          {t('dak.faq.retry')}\n        </button>\n      </div>\n    );\n  }\n\n  if (!result) {\n    return (\n      <div className={`faq-answer empty ${className}`}>\n        <p>{t('dak.faq.no_data')}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`faq-answer success ${className}`}>\n      {renderNarrative()}\n      {renderMessages()}\n      {renderStructuredData()}\n      {renderMetadata()}\n    </div>\n  );\n};\n\nexport default FAQAnswer;","/**\n * DAK FAQ Demo Page\n * Demonstrates the FAQ functionality with sample questions\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams, useLocation } from 'react-router-dom';\nimport FAQAnswer from '../dak/faq/components/FAQAnswer.js';\nimport faqExecutionEngine from '../dak/faq/engine/FAQExecutionEngine.js';\nimport githubService from '../services/githubService.js';\nimport './DAKFAQDemo.css';\n\nconst DAKFAQDemo = () => {\n  const { t } = useTranslation();\n  const { user, repo, branch } = useParams();\n  const location = useLocation();\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Sample questions to demonstrate\n  const sampleQuestions = [\n    {\n      id: 'dak-name',\n      title: 'What is the name of this DAK?',\n      description: 'Extracts the DAK name from sushi-config.yaml'\n    },\n    {\n      id: 'dak-version',\n      title: 'What is the version of this DAK?',\n      description: 'Extracts the DAK version from sushi-config.yaml'\n    },\n    {\n      id: 'decision-table-inputs',\n      title: 'What are the inputs required for this decision table?',\n      description: 'Analyzes DMN files and extracts input requirements for decision tables'\n    }\n  ];\n\n  useEffect(() => {\n    initializeFAQEngine();\n  }, []);\n\n  const initializeFAQEngine = async () => {\n    try {\n      setLoading(true);\n      await faqExecutionEngine.initialize();\n      const catalog = faqExecutionEngine.getCatalog();\n      setQuestions(catalog);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getRepositoryContext = () => {\n    if (user && repo) {\n      return {\n        repository: `${user}/${repo}`,\n        branch: branch || 'main'\n      };\n    }\n    \n    // Fallback to location state\n    const state = location.state;\n    if (state?.user && state?.repo) {\n      return {\n        repository: `${state.user}/${state.repo}`,\n        branch: state.branch || 'main'\n      };\n    }\n    \n    return null;\n  };\n\n  const repositoryContext = getRepositoryContext();\n\n  if (loading) {\n    return (\n      <div className=\"dak-faq-demo loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>{t('dak.faq.loading')}</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dak-faq-demo error\">\n        <h2>FAQ System Error</h2>\n        <p>{error}</p>\n        <button onClick={initializeFAQEngine}>Retry</button>\n      </div>\n    );\n  }\n\n  if (!repositoryContext) {\n    return (\n      <div className=\"dak-faq-demo no-context\">\n        <h2>DAK FAQ Demo</h2>\n        <p>No repository context available. Please navigate from a DAK repository page.</p>\n        <div className=\"demo-info\">\n          <h3>Available Questions</h3>\n          <ul>\n            {questions.map(question => (\n              <li key={question.id}>\n                <strong>{question.title}</strong> - {question.description}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dak-faq-demo\">\n      <header className=\"dak-faq-demo-header\">\n        <h1>DAK FAQ Demo</h1>\n        <div className=\"repository-info\">\n          <span className=\"repo-name\">{repositoryContext.repository}</span>\n          <span className=\"branch-name\">({repositoryContext.branch})</span>\n        </div>\n      </header>\n\n      <div className=\"faq-questions\">\n        <h2>Available Questions</h2>\n        <p>Here are some example FAQ questions that can be answered about this DAK:</p>\n        \n        {sampleQuestions.map(question => (\n          <div key={question.id} className=\"faq-question-section\">\n            <h3>{question.title}</h3>\n            <p className=\"question-description\">{question.description}</p>\n            \n            {question.id === 'decision-table-inputs' ? (\n              // Special handling for asset-level DMN question\n              <div className=\"dmn-demo\">\n                <p><em>This is an asset-level question that analyzes individual DMN files. \n                In a real DAK repository, this would scan DMN files in directories like input/cql/ or input/dmn/.</em></p>\n                <FAQAnswer\n                  questionId={question.id}\n                  parameters={{\n                    ...repositoryContext,\n                    assetFile: 'input/cql/IMMZ.D2.DT.BCG.dmn' // Example DMN file path\n                  }}\n                  githubService={githubService}\n                  showRawData={true}\n                />\n              </div>\n            ) : (\n              // Regular DAK/component-level questions\n              <FAQAnswer\n                questionId={question.id}\n                parameters={repositoryContext}\n                githubService={githubService}\n                showRawData={true}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"faq-catalog\">\n        <h2>FAQ Question Catalog</h2>\n        <p>All available questions in the system:</p>\n        \n        <div className=\"catalog-grid\">\n          {questions.map(question => (\n            <div key={question.id} className=\"catalog-item\">\n              <h4>{question.title}</h4>\n              <p>{question.description}</p>\n              <div className=\"catalog-meta\">\n                <span className=\"level\">{question.level}</span>\n                <span className=\"version\">v{question.version}</span>\n              </div>\n              <div className=\"tags\">\n                {question.tags.map(tag => (\n                  <span key={tag} className=\"tag\">{tag}</span>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"mcp-info\">\n        <h2>MCP Server Integration</h2>\n        <p>\n          The FAQ system can also be accessed via the local MCP server API for programmatic access.\n          Start the MCP server and access:\n        </p>\n        <ul>\n          <li><code>GET http://127.0.0.1:3001/faq/questions/catalog</code> - Get question catalog</li>\n          <li><code>POST http://127.0.0.1:3001/faq/questions/execute</code> - Execute questions</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default DAKFAQDemo;"],"names":["QuestionLevel","DAK","COMPONENT","ASSET","QuestionDefinition","constructor","_ref","id","level","title","description","parameters","tags","version","isTemplate","componentTypes","assetTypes","this","ParameterDefinition","_ref2","name","type","required","defaultValue","validation","QuestionContext","_ref3","repository","locale","branch","user","assetFile","componentType","storage","QuestionResult","_ref4","structured","narrative","warnings","errors","meta","CacheHint","_ref5","scope","key","ttl","dependencies","parameterRegistryService","registry","loaded","loadFromYaml","yamlContent","yaml","error","Error","concat","message","getParameters","arguments","length","undefined","defaults","config","Object","entries","push","default","_objectSpread","paramName","uniqueParams","Map","forEach","param","set","Array","from","values","validateParameters","definitions","normalized","definition","value","finalValue","typeError","validateParameterType","validationError","validateParameterCustom","keys","find","def","isValid","expectedType","actualType","isNaN","isArray","pattern","RegExp","test","enum","includes","join","minLength","maxLength","min","max","getParameterSchema","properties","property","assign","Storage","readFile","path","fileExists","listFiles","getFileInfo","GitHubStorage","githubService","super","cache","parseRepository","match","owner","repo","replace","parts","split","cacheKey","has","get","response","getFileContent","content","Buffer","files","getRepositoryTree","tree","filter","item","map","regexPattern","regex","file","startsWith","size","sha","url","html_url","questionRegistry","initialized","initialize","loadQuestions","questions","module","questionConfig","questionModule","metadata","execute","Render","console","warn","getCatalog","filters","filteredQuestions","q","some","tag","assetType","executeBatch","requests","context","results","request","result","executeQuestion","questionId","success","getErrorNarrative","assetFiles","question","executeTemplateQuestion","getQuestionType","createStorage","executionContext","input","allWarnings","allErrors","assetParameters","aggregatedStructured","assets","r","summary","totalAssets","successfulAssets","failedAssets","aggregatedNarrative","aggregateNarratives","isAggregated","assetCount","html","errorMessages","en_US","fr_FR","es_ES","normalizeLocale","showRawData","className","t","i18n","useTranslation","setResult","useState","loading","setLoading","setError","useCallback","async","language","questionResult","faqExecutionEngine","err","useEffect","_jsxs","children","_jsx","onClick","renderNarrative","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","ALLOWED_TAGS","ALLOWED_ATTR","renderMessages","index","warning","JSON","stringify","DAKFAQDemo","useParams","location","useLocation","setQuestions","initializeFAQEngine","catalog","repositoryContext","getRepositoryContext","state","FAQAnswer"],"sourceRoot":""}