{"version":3,"file":"static/js/814.8cdf2f04.chunk.js","mappings":"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","sources":["components/HelpButton.js","components/DAKDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport HelpModal from './HelpModal';\nimport useThemeImage from '../hooks/useThemeImage';\n\nconst HelpButton = ({ helpTopic, contextData = {} }) => {\n  const [showHelp, setShowHelp] = useState(false);\n\n  // Theme-aware mascot image\n  const mascotImage = useThemeImage('sgex-mascot.png');\n\n  const handleHelpClick = () => {\n    setShowHelp(true);\n  };\n\n  const handleCloseHelp = () => {\n    setShowHelp(false);\n  };\n\n  return (\n    <>\n      <button \n        className=\"help-button\"\n        onClick={handleHelpClick}\n        title=\"Get Help\"\n        aria-label=\"Get Help\"\n      >\n        <img \n          src={mascotImage} \n          alt=\"SGEX Helper\" \n          className=\"help-mascot-icon\"\n        />\n      </button>\n      \n      {showHelp && (\n        <HelpModal\n          topic={helpTopic}\n          contextData={contextData}\n          onClose={handleCloseHelp}\n        />\n      )}\n    </>\n  );\n};\n\nexport default HelpButton;","import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport githubService from '../services/githubService';\nimport dakValidationService from '../services/dakValidationService';\nimport branchContextService from '../services/branchContextService';\nimport HelpButton from './HelpButton';\nimport DAKStatusBox from './DAKStatusBox';\nimport Publications from './Publications';\nimport ForkStatusBar from './ForkStatusBar';\nimport { PageLayout } from './framework';\nimport { handleNavigationClick } from '../utils/navigationUtils';\nimport useThemeImage from '../hooks/useThemeImage';\nimport FAQAnswer from '../dak/faq/components/FAQAnswer.js';\nimport faqExecutionEngine from '../dak/faq/engine/FAQExecutionEngine.js';\nimport { ALT_TEXT_KEYS, getAltText } from '../utils/imageAltTextHelper';\n\nconst DAKDashboard = () => {\n  return (\n    <PageLayout pageName=\"dak-dashboard\">\n      <DAKDashboardContent />\n    </PageLayout>\n  );\n};\n\nconst DAKDashboardContent = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user, repo, branch } = useParams();\n  \n  // Theme-aware mascot image for dialog\n  const mascotImage = useThemeImage('sgex-mascot.png');\n  \n  // Try to get data from location.state first, then from URL params\n  const [profile, setProfile] = useState(location.state?.profile || null);\n  const [repository, setRepository] = useState(location.state?.repository || null);\n  const [loading, setLoading] = useState(!profile || !repository);\n  const [error, setError] = useState(null);\n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n  const [showPermissionDialog, setShowPermissionDialog] = useState(false);\n  const [activeTab, setActiveTab] = useState('core'); // 'core', 'publications', 'other', or 'faq'\n  const [selectedBranch, setSelectedBranch] = useState(location.state?.selectedBranch || branch || null);\n  const [issueCounts, setIssueCounts] = useState({});\n  const [showUserMenu, setShowUserMenu] = useState(false);\n  const [faqQuestions, setFaqQuestions] = useState([]);\n  const [faqLoading, setFaqLoading] = useState(false);\n  const [faqError, setFaqError] = useState(null);\n\n  // Component Card component defined within the dashboard\n  const ComponentCard = ({ component, handleComponentClick, t }) => {\n    const [imageLoaded, setImageLoaded] = useState(false);\n    const [imageError, setImageError] = useState(false);\n    \n    // Use the theme-aware image hook here instead of in the map function\n    const cardImagePath = useThemeImage(component.cardImage);\n\n    const handleImageLoad = () => {\n      setImageLoaded(true);\n      setImageError(false);\n    };\n\n    const handleImageError = () => {\n      setImageError(true);\n      setImageLoaded(false);\n    };\n\n    return (\n      <div \n        className={`component-card ${component.type.toLowerCase()} large-card ${imageLoaded ? 'image-loaded' : ''}`}\n        onClick={(event) => handleComponentClick(event, component)}\n        style={{ '--component-color': component.color }}\n        tabIndex={0}\n        role=\"button\"\n        aria-label={`${component.name} - ${component.description}`}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            handleComponentClick(event, component);\n          }\n        }}\n      >\n        <div className=\"component-header\">\n          <div className=\"component-image-container\">\n            <img \n              src={cardImagePath}\n              alt={getAltText(t, ALT_TEXT_KEYS.ICON_DAK_COMPONENT, component.name, { name: component.name })}\n              className=\"component-card-image\"\n              onLoad={handleImageLoad}\n              onError={handleImageError}\n              style={{ display: imageError ? 'none' : 'block' }}\n            />\n            {/* Fallback icon when image fails to load */}\n            {imageError && (\n              <div className=\"component-icon\" style={{ color: component.color }}>\n                {component.icon}\n              </div>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"component-content\">\n          {/* Only show title text if image failed to load or as screen reader backup */}\n          <h4 className={imageLoaded && !imageError ? 'visually-hidden' : ''}>\n            {component.name}\n          </h4>\n          <p className={imageLoaded && !imageError ? 'visually-hidden' : ''}>\n            {component.description}\n          </p>\n          \n          <div className=\"component-meta\">\n            <div className=\"file-types\">\n              {component.fileTypes.map((type) => (\n                <span key={type} className=\"file-type-tag\">{type}</span>\n              ))}\n            </div>\n            <div className=\"file-count\">\n              {component.count} files\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Fetch data from URL parameters if not available in location.state\n  useEffect(() => {\n    const fetchDataFromUrlParams = async () => {\n      if ((!profile || !repository) && user && repo) {\n        try {\n          setLoading(true);\n          setError(null);\n\n          // Check if githubService is authenticated (allow demo mode to proceed without auth)\n          if (!githubService.isAuth()) {\n            // In demo mode, use the DAK validation service for demo repositories\n            if (window.location.pathname.includes('/dashboard/')) {\n              const isValidDAK = dakValidationService.validateDemoDAKRepository(user, repo);\n              \n              if (!isValidDAK) {\n                navigate('/', { \n                  state: { \n                    warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n                  } \n                });\n                return;\n              }\n\n              const demoProfile = {\n                login: user,\n                name: user.charAt(0).toUpperCase() + user.slice(1),\n                avatar_url: `https://github.com/${user}.png`,\n                type: 'User',\n                isDemo: true\n              };\n\n              const demoRepository = {\n                name: repo,\n                full_name: `${user}/${repo}`,\n                owner: { login: user },\n                default_branch: branch || 'main',\n                html_url: `https://github.com/${user}/${repo}`,\n                isDemo: true\n              };\n\n              setProfile(demoProfile);\n              setRepository(demoRepository);\n              setSelectedBranch(branch || 'main');\n              setLoading(false);\n              return;\n            } else {\n              setError(t('auth.authRequired'));\n              setLoading(false);\n              return;\n            }\n          }\n\n          // Fetch user profile\n          let userProfile = null;\n          try {\n            const userResponse = await githubService.getUser(user);\n            userProfile = userResponse;\n          } catch (err) {\n            console.error('Error fetching user:', err);\n            // Redirect to landing page with warning message\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. User '${user}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Fetch repository\n          let repoData = null;\n          try {\n            const repoResponse = await githubService.getRepository(user, repo);\n            repoData = repoResponse;\n          } catch (err) {\n            console.error('Error fetching repository:', err);\n            // Redirect to landing page with warning message\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Validate that this is actually a DAK repository\n          const isValidDAK = await dakValidationService.validateDAKRepository(user, repo, branch || repoData.default_branch);\n          \n          if (!isValidDAK) {\n            console.log(`Repository ${user}/${repo} is not a valid DAK repository`);\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Validate branch if specified\n          if (branch) {\n            try {\n              await githubService.getBranch(user, repo, branch);\n              setSelectedBranch(branch);\n            } catch (err) {\n              console.warn(`Branch '${branch}' not found, falling back to default branch`);\n              setSelectedBranch(repoData.default_branch);\n            }\n          } else {\n            setSelectedBranch(repoData.default_branch);\n          }\n\n          setProfile(userProfile);\n          setRepository(repoData);\n          setLoading(false);\n        } catch (err) {\n          console.error('Error fetching data from URL params:', err);\n          setError('Failed to load dashboard data. Please check the URL or try again.');\n          setLoading(false);\n        }\n      } else {\n        setLoading(false);\n      }\n    };\n\n    fetchDataFromUrlParams();\n  }, [user, repo, branch, profile, repository, navigate, t]);\n\n  // Initialize selected branch from session context\n  useEffect(() => {\n    if (repository) {\n      const storedBranch = branchContextService.getSelectedBranch(repository);\n      if (storedBranch) {\n        setSelectedBranch(storedBranch);\n      } else if (profile && profile.login === 'demo-user') {\n        // For demo mode, set a default branch\n        const defaultBranch = repository.default_branch || 'main';\n        setSelectedBranch(defaultBranch);\n        branchContextService.setSelectedBranch(repository, defaultBranch);\n      }\n    }\n  }, [repository, profile]);\n\n  // Load issue counts for repository\n  const loadIssueCounts = async () => {\n    if (!repository) return;\n    \n    try {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      \n      // Get all issues (includes pull requests in GitHub API)\n      const issues = await githubService.getIssues(owner, repoName, {\n        state: 'all',\n        per_page: 100\n      });\n      \n      // Filter out pull requests to get actual issues\n      const actualIssues = issues.filter(issue => !issue.pull_request);\n      \n      // Count issues by state\n      const openIssues = actualIssues.filter(issue => issue.state === 'open').length;\n      const closedIssues = actualIssues.filter(issue => issue.state === 'closed').length;\n      \n      setIssueCounts({\n        total: actualIssues.length,\n        open: openIssues,\n        closed: closedIssues\n      });\n    } catch (err) {\n      console.warn('Could not load issue counts:', err);\n      setIssueCounts({ total: 0, open: 0, closed: 0 });\n    }\n  };\n\n  // Load issue counts when repository changes\n  useEffect(() => {\n    if (repository && !loading) {\n      loadIssueCounts();\n    }\n  }, [repository, loading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Initialize FAQ engine when component mounts\n  useEffect(() => {\n    initializeFAQEngine();\n  }, []);\n\n  const initializeFAQEngine = async () => {\n    try {\n      setFaqLoading(true);\n      await faqExecutionEngine.initialize();\n      const catalog = faqExecutionEngine.getCatalog();\n      setFaqQuestions(catalog);\n      setFaqError(null);\n    } catch (err) {\n      console.error('Failed to initialize FAQ engine:', err);\n      setFaqError(err.message);\n    } finally {\n      setFaqLoading(false);\n    }\n  };\n\n  // Check write permissions on mount\n  useEffect(() => {\n    const checkPermissions = async () => {\n      if (repository && profile) {\n        try {\n          const writeAccess = await githubService.checkRepositoryWritePermissions(\n            repository.owner?.login || repository.full_name.split('/')[0],\n            repository.name\n          );\n          setHasWriteAccess(writeAccess);\n        } catch (error) {\n          console.warn('Could not check write permissions:', error);\n          setHasWriteAccess(false);\n        }\n      }\n      setLoading(false);\n    };\n\n    checkPermissions();\n  }, [repository, profile]);\n\n  // Close user menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (showUserMenu && !event.target.closest('.user-menu-container')) {\n        setShowUserMenu(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showUserMenu]);\n\n\n\n  // Define the 9 core DAK components based on WHO SMART Guidelines documentation\n  const coreDAKComponents = [\n    {\n      id: 'health-interventions',\n      name: t('dak.healthInterventions'),\n      description: 'Clinical guidelines and health intervention specifications that define evidence-based care recommendations',\n      icon: '📖',\n      cardImage: 'dashboard/dak_interventions.png',\n      type: 'L2',\n      color: '#0078d4',\n      fileTypes: ['IRIS', 'Publication'],\n      count: 5,\n      editor: 'Publication reference manager with IRIS integration'\n    },\n    {\n      id: 'generic-personas',\n      name: t('dak.genericPersonas'),\n      description: 'Standardized user roles and actor definitions that represent different types of healthcare workers and patients',\n      icon: '👥',\n      cardImage: 'dashboard/dak_personas.png',\n      type: 'L2',\n      color: '#107c10',\n      fileTypes: ['Actor', 'Role'],\n      count: 8,\n      editor: 'Persona definition editor with role-based access specifications'\n    },\n    {\n      id: 'user-scenarios',\n      name: t('dak.userScenarios'),\n      description: 'Narrative descriptions of how different personas interact with the system in specific healthcare contexts',\n      icon: '📝',\n      cardImage: 'dashboard/dak_user_scenarios.png',\n      type: 'L2',\n      color: '#881798',\n      fileTypes: ['Narrative', 'Use Case'],\n      count: 12,\n      editor: 'Scenario editor with workflow visualization'\n    },\n    {\n      id: 'business-processes',\n      name: t('dak.businessProcesses'),\n      description: 'BPMN workflows and business process definitions that model clinical workflows and care pathways',\n      icon: '🔄',\n      cardImage: 'dashboard/dak_business_processes.png',\n      type: 'L2',\n      color: '#d13438',\n      fileTypes: ['BPMN', 'XML'],\n      count: 15,\n      editor: 'Graphical BPMN editor with SVG visualization'\n    },\n    {\n      id: 'core-data-elements',\n      name: t('dak.coreDataElements'),\n      description: 'Essential data structures and terminology needed for clinical data capture and exchange (includes Terminology Services via OCL and Product Master Data via PCMT)',\n      icon: '🗃️',\n      cardImage: 'dashboard/dak_core_data_elements.png',\n      type: 'L2',\n      color: '#ff8c00',\n      fileTypes: ['OCL', 'Concept', 'PCMT', 'Product'],\n      count: issueCounts.total || 89,\n      editor: 'Data element editor with OCL and PCMT integration'\n    },\n    {\n      id: 'decision-support',\n      name: t('dak.decisionSupportLogic'),\n      description: 'DMN decision tables and clinical decision support rules that encode clinical logic',\n      icon: '🎯',\n      cardImage: 'dashboard/dak_decision_support_logic.png',\n      type: 'L2',\n      color: '#00bcf2',\n      fileTypes: ['DMN', 'XML'],\n      count: 24,\n      editor: 'DMN decision table editor with validation'\n    },\n    {\n      id: 'program-indicators',\n      name: t('dak.programIndicators'),\n      description: 'Performance indicators and measurement definitions for monitoring and evaluation',\n      icon: '📊',\n      cardImage: 'dashboard/dak_indicators.png',\n      type: 'L2',\n      color: '#498205',\n      fileTypes: ['Measure', 'Logic'],\n      count: 18,\n      editor: 'Indicator definition editor with measurement logic'\n    },\n    {\n      id: 'functional-requirements',\n      name: t('dak.requirements'),\n      description: 'System requirements specifications that define capabilities and constraints',\n      icon: '⚙️',\n      cardImage: 'dashboard/dak_requirements.png',\n      type: 'L2',\n      color: '#6b69d6',\n      fileTypes: ['Requirements', 'Specification'],\n      count: 32,\n      editor: 'Requirements editor with structured templates'\n    },\n    {\n      id: 'test-scenarios',\n      name: t('dak.testScenarios') || 'Test Scenarios',\n      description: 'Feature files and test scenarios for validating the DAK implementation',\n      icon: '🧪',\n      cardImage: 'dashboard/dak_testing.png',\n      type: 'L2',\n      color: '#8b5cf6',\n      fileTypes: ['Feature', 'Test'],\n      count: 0,\n      editor: 'Testing viewer with feature file browser'\n    }\n  ];\n\n\n\n  const handleComponentClick = (event, component) => {\n    const navigationState = {\n      profile,\n      repository,\n      component,\n      selectedBranch\n    };\n    \n    // For decision-support, always navigate to view page (no permission check needed)\n    if (component.id === 'decision-support') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/decision-support-logic/${owner}/${repoName}/${selectedBranch}`\n        : `/decision-support-logic/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For business processes, navigate to selection page without permission check\n    if (component.id === 'business-processes') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/business-process-selection/${owner}/${repoName}/${selectedBranch}`\n        : `/business-process-selection/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n\n\n    // For health-interventions (WHO Digital Library), allow access in read-only mode\n    if (component.id === 'health-interventions') {\n      handleNavigationClick(event, `/editor/${component.id}`, navigate, navigationState);\n      return;\n    }\n\n    // For core-data-elements (Component 2 Core Data Dictionary), navigate to viewer\n    if (component.id === 'core-data-elements') {\n      const owner = user || repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repo || repository.name;\n      const branchName = selectedBranch;\n      \n      const viewerPath = branchName ? \n        `/core-data-dictionary-viewer/${owner}/${repoName}/${branchName}` :\n        `/core-data-dictionary-viewer/${owner}/${repoName}`;\n        \n      handleNavigationClick(event, viewerPath, navigate, navigationState);\n      return;\n    }\n\n\n\n    // For generic-personas, navigate to actor editor\n    if (component.id === 'generic-personas') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/actor-editor/${owner}/${repoName}/${selectedBranch}`\n        : `/actor-editor/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For test-scenarios, navigate to testing viewer\n    if (component.id === 'test-scenarios') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/testing-viewer/${owner}/${repoName}/${selectedBranch}`\n        : `/testing-viewer/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For other components, check permissions before proceeding\n    if (!hasWriteAccess) {\n      // If command-click, still show permission dialog instead of opening new tab\n      // since the user needs to authenticate first\n      setShowPermissionDialog(true);\n      return;\n    }\n\n    // Navigate to generic component editor for other components\n    handleNavigationClick(event, `/editor/${component.id}`, navigate, navigationState);\n  };\n\n\n\n  if (loading) {\n    return (\n      <div className=\"dak-dashboard loading-state\">\n        <div className=\"loading-content\">\n          <h2>Loading Dashboard...</h2>\n          <p>Fetching repository and user data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dak-dashboard error-state\">\n        <div className=\"error-content\">\n          <h2>{t('dashboard.errorLoading')}</h2>\n          <p>{error}</p>\n          <div className=\"error-actions\">\n            <button onClick={() => navigate('/')} className=\"action-btn primary\">\n              {t('navigation.home')}\n            </button>\n            <button onClick={() => window.location.reload()} className=\"action-btn secondary\">\n              {t('common.retry')}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!profile || !repository) {\n    navigate('/');\n    return <div>Redirecting...</div>;\n  }\n\n  return (\n    <div className=\"dak-dashboard\">\n      <div className=\"dashboard-content\">\n        <div className=\"dashboard-main\">\n          <div className=\"dashboard-intro\">\n            <h2>{t('dak.components')}</h2>\n            <p>\n              Select a component to edit content for <strong>{repository.name}</strong>\n              {selectedBranch && (\n                <span> on branch <code className=\"branch-display\">{selectedBranch}</code></span>\n              )}. \n              Components are organized according to the WHO SMART Guidelines framework.\n            </p>\n          </div>\n\n          {/* Fork Status Bar - shows forks of sgex repository */}\n          <ForkStatusBar \n            profile={profile}\n            repository={repository}\n            selectedBranch={selectedBranch}\n          />\n\n          {/* DAK Status Box - only show when repository and branch are selected */}\n          {repository && selectedBranch && (\n            <DAKStatusBox \n              repository={repository}\n              selectedBranch={selectedBranch}\n              hasWriteAccess={hasWriteAccess}\n              profile={profile}\n            />\n          )}\n\n          {/* Tab Navigation - Full Width Toggle Buttons */}\n          <div className=\"tab-navigation-fullwidth\">\n            <button \n              className={`tab-button-fullwidth ${activeTab === 'core' ? 'active' : ''}`}\n              onClick={() => setActiveTab('core')}\n            >\n              <span className=\"tab-icon\">⭐</span>\n              <span className=\"tab-text\">9 Core Components</span>\n            </button>\n            <button\n              className={`tab-button-fullwidth ${activeTab === 'publications' ? 'active' : ''}`}\n              onClick={() => setActiveTab('publications')}\n            >\n              <span className=\"tab-icon\">📚</span>\n              <span className=\"tab-text\">Publications</span>\n            </button>\n            <button\n              className={`tab-button-fullwidth ${activeTab === 'other' ? 'active' : ''}`}\n              onClick={() => setActiveTab('other')}\n            >\n              <span className=\"tab-icon\">🔧</span>\n              <span className=\"tab-text\">Other DAK Components</span>\n            </button>\n            <button\n              className={`tab-button-fullwidth ${activeTab === 'faq' ? 'active' : ''}`}\n              onClick={() => setActiveTab('faq')}\n            >\n              <span className=\"tab-icon\">❓</span>\n              <span className=\"tab-text\">DAK FAQ</span>\n            </button>\n          </div>\n\n          {/* 9 Core DAK Components Section */}\n          {activeTab === 'core' && (\n            <div className=\"components-section active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">{t('dak.components')}</h3>\n                <p className=\"section-description\">\n                  Essential components that form the foundation of any WHO SMART Guidelines Digital Adaptation Kit\n                </p>\n              </div>\n\n              <div className=\"components-grid core-components\">\n                {coreDAKComponents.map((component) => {\n                  return (\n                    <ComponentCard\n                      key={component.id}\n                      component={component}\n                      handleComponentClick={handleComponentClick}\n                      t={t}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Other DAK Components Section */}\n          {activeTab === 'other' && (\n            <div className=\"components-section other-components active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">Other DAK Components</h3>\n                <p className=\"section-description\">\n                  Additional specialized components for advanced DAK functionality and implementation\n                </p>\n              </div>\n\n              <div className=\"components-grid other-components\">\n                <div \n                  className=\"component-card l3\"\n                  onClick={(event) => {\n                    const component = {\n                      id: 'questionnaire-editor',\n                      name: 'FHIR Questionnaires',\n                      description: 'Structured questionnaires and forms for data collection using FHIR standard'\n                    };\n                    const owner = repository.owner?.login || repository.full_name.split('/')[0];\n                    const repoName = repository.name;\n                    const path = selectedBranch \n                      ? `/questionnaire-editor/${owner}/${repoName}/${selectedBranch}`\n                      : `/questionnaire-editor/${owner}/${repoName}`;\n                    \n                    const navigationState = {\n                      profile,\n                      repository,\n                      component,\n                      selectedBranch\n                    };\n                    \n                    handleNavigationClick(event, path, navigate, navigationState);\n                  }}\n                  style={{ '--component-color': '#17a2b8' }}\n                >\n                  <div className=\"component-header\">\n                    <div className=\"component-icon\" style={{ color: '#17a2b8' }}>\n                      📋\n                    </div>\n                  </div>\n                  \n                  <div className=\"component-content\">\n                    <h4>FHIR Questionnaires</h4>\n                    <p>Structured questionnaires and forms for data collection using FHIR Questionnaire standard</p>\n                    \n                    <div className=\"component-meta\">\n                      <div className=\"file-types\">\n                        <span className=\"file-type-tag\">JSON</span>\n                        <span className=\"file-type-tag\">FHIR</span>\n                      </div>\n                      <div className=\"file-count\">\n                        questionnaires/\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Publications Section */}\n          {activeTab === 'publications' && (\n            <div className=\"components-section publications-section active\">\n              <Publications\n                profile={profile}\n                repository={repository}\n                selectedBranch={selectedBranch}\n                hasWriteAccess={hasWriteAccess}\n              />\n            </div>\n          )}\n\n          {/* DAK FAQ Section */}\n          {activeTab === 'faq' && (\n            <div className=\"components-section faq-section active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">DAK FAQ System</h3>\n                <p className=\"section-description\">\n                  Ask questions about this DAK and get automated answers based on repository analysis\n                </p>\n              </div>\n\n              {faqLoading && (\n                <div className=\"faq-loading\">\n                  <div className=\"loading-spinner\"></div>\n                  <p>Initializing FAQ system...</p>\n                </div>\n              )}\n\n              {faqError && (\n                <div className=\"faq-error\">\n                  <h4>FAQ System Error</h4>\n                  <p>{faqError}</p>\n                  <button onClick={initializeFAQEngine} className=\"btn-secondary\">\n                    Retry\n                  </button>\n                </div>\n              )}\n\n              {!faqLoading && !faqError && (\n                <div className=\"faq-content\">\n                  {/* Sample Questions */}\n                  <div className=\"faq-questions\">\n                    <h4>Example Questions</h4>\n                    <p>Here are some example questions you can ask about this DAK:</p>\n                    \n                    <div className=\"faq-question-grid\">\n                      <div className=\"faq-question-section\">\n                        <h5>What is the name of this DAK?</h5>\n                        <p className=\"question-description\">Extracts the DAK name from sushi-config.yaml</p>\n                        <FAQAnswer\n                          questionId=\"dak-name\"\n                          parameters={{\n                            repository: `${user}/${repo}`,\n                            branch: selectedBranch || 'main'\n                          }}\n                          githubService={githubService}\n                          showRawData={false}\n                        />\n                      </div>\n\n                      <div className=\"faq-question-section\">\n                        <h5>What is the version of this DAK?</h5>\n                        <p className=\"question-description\">Extracts the DAK version from sushi-config.yaml</p>\n                        <FAQAnswer\n                          questionId=\"dak-version\"\n                          parameters={{\n                            repository: `${user}/${repo}`,\n                            branch: selectedBranch || 'main'\n                          }}\n                          githubService={githubService}\n                          showRawData={false}\n                        />\n                      </div>\n\n                      <div className=\"faq-question-section\">\n                        <h5>What DMN decision tables are available?</h5>\n                        <p className=\"question-description\">Analyzes DMN files for decision table inputs and structure</p>\n                        <FAQAnswer\n                          questionId=\"decision-table-inputs\"\n                          parameters={{\n                            repository: `${user}/${repo}`,\n                            branch: selectedBranch || 'main',\n                            assetFile: 'input/cql/IMMZ.D2.DT.BCG.dmn'\n                          }}\n                          githubService={githubService}\n                          showRawData={false}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Question Catalog */}\n                  <div className=\"faq-catalog\">\n                    <h4>Available Questions ({faqQuestions.length})</h4>\n                    <p>All questions available in the FAQ system:</p>\n                    \n                    <div className=\"catalog-grid\">\n                      {faqQuestions.map(question => (\n                        <div key={question.id} className=\"catalog-item\">\n                          <h5>{question.title}</h5>\n                          <p>{question.description}</p>\n                          <div className=\"catalog-meta\">\n                            <span className=\"level\">{question.level}</span>\n                            <span className=\"version\">v{question.version || '1.0'}</span>\n                          </div>\n                          <div className=\"tags\">\n                            {question.tags && question.tags.map(tag => (\n                              <span key={tag} className=\"tag\">{tag}</span>\n                            ))}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* MCP Server Info */}\n                  <div className=\"mcp-info\">\n                    <h4>MCP Server API</h4>\n                    <p>\n                      The FAQ system can also be accessed programmatically via the MCP server API:\n                    </p>\n                    <ul>\n                      <li><code>GET http://127.0.0.1:3001/faq/questions/catalog</code> - Get question catalog</li>\n                      <li><code>POST http://127.0.0.1:3001/faq/questions/execute</code> - Execute questions</li>\n                    </ul>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Permission Upgrade Dialog */}\n      {showPermissionDialog && (\n        <div className=\"permission-dialog-overlay\">\n          <div className=\"permission-dialog\">\n            <div className=\"dialog-header\">\n              <h3>Edit Access Required</h3>\n              <button \n                className=\"dialog-close\"\n                onClick={() => setShowPermissionDialog(false)}\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"dialog-content\">\n              <div className=\"dialog-mascot\">\n                <img src={mascotImage} alt={getAltText(t, ALT_TEXT_KEYS.MASCOT_HELPER, 'SGEX Helper')} className=\"dialog-mascot-img\" />\n                <div className=\"mascot-message\">\n                  <p>You need edit permissions to modify DAK components!</p>\n                  <p>Your current token only provides read access to this repository.</p>\n                </div>\n              </div>\n              <div className=\"permission-options\">\n                <div className=\"option-card\">\n                  <h4>🔧 Upgrade Your Token</h4>\n                  <p>Create a new fine-grained token with write permissions for this repository.</p>\n                  <div className=\"option-buttons\">\n                    <a \n                      href=\"https://github.com/settings/personal-access-tokens/new\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"btn-primary\"\n                    >\n                      Create New Token\n                    </a>\n                    <HelpButton \n                      helpTopic=\"github-token\"\n                      contextData={{ \n                        repository: { owner: repository.owner?.login || repository.full_name.split('/')[0], name: repository.name },\n                        requiredScopes: ['Contents: Write', 'Metadata: Read', 'Pull requests: Write'],\n                        permissionMode: 'edit',\n                        upgradeMode: true\n                      }}\n                    />\n                  </div>\n                </div>\n                <div className=\"option-card\">\n                  <h4>👁️ Continue in Read-Only Mode</h4>\n                  <p>Browse and view DAK components without editing capabilities.</p>\n                  <button \n                    className=\"btn-secondary\"\n                    onClick={() => setShowPermissionDialog(false)}\n                  >\n                    Continue Read-Only\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DAKDashboard;"],"names":["_ref","helpTopic","contextData","showHelp","setShowHelp","useState","mascotImage","useThemeImage","_jsxs","_Fragment","children","_jsx","className","onClick","handleHelpClick","title","src","alt","HelpModal","topic","onClose","handleCloseHelp","DAKDashboardContent","_location$state","_location$state2","_location$state3","_repository$owner9","t","useTranslation","location","useLocation","navigate","useNavigate","user","repo","branch","useParams","profile","setProfile","state","repository","setRepository","loading","setLoading","error","setError","hasWriteAccess","setHasWriteAccess","showPermissionDialog","setShowPermissionDialog","activeTab","setActiveTab","selectedBranch","setSelectedBranch","issueCounts","setIssueCounts","showUserMenu","setShowUserMenu","faqQuestions","setFaqQuestions","faqLoading","setFaqLoading","faqError","setFaqError","ComponentCard","component","handleComponentClick","imageLoaded","setImageLoaded","imageError","setImageError","cardImagePath","cardImage","concat","type","toLowerCase","event","style","color","tabIndex","role","name","description","onKeyDown","key","preventDefault","getAltText","ALT_TEXT_KEYS","ICON_DAK_COMPONENT","onLoad","handleImageLoad","onError","handleImageError","display","icon","fileTypes","map","count","useEffect","async","githubService","isAuth","window","pathname","includes","dakValidationService","validateDemoDAKRepository","warningMessage","demoProfile","login","charAt","toUpperCase","slice","avatar_url","isDemo","demoRepository","full_name","owner","default_branch","html_url","userProfile","getUser","err","console","repoData","getRepository","validateDAKRepository","log","getBranch","warn","fetchDataFromUrlParams","storedBranch","branchContextService","getSelectedBranch","defaultBranch","_repository$owner","split","repoName","actualIssues","getIssues","per_page","filter","issue","pull_request","openIssues","length","closedIssues","total","open","closed","loadIssueCounts","initializeFAQEngine","faqExecutionEngine","initialize","catalog","getCatalog","message","_repository$owner2","writeAccess","checkRepositoryWritePermissions","checkPermissions","handleClickOutside","target","closest","document","addEventListener","removeEventListener","coreDAKComponents","id","editor","navigationState","_repository$owner3","path","handleNavigationClick","_repository$owner4","_repository$owner5","branchName","viewerPath","_repository$owner6","_repository$owner7","reload","ForkStatusBar","DAKStatusBox","_repository$owner8","Publications","FAQAnswer","questionId","parameters","showRawData","assetFile","question","level","version","tags","tag","MASCOT_HELPER","href","rel","HelpButton","requiredScopes","permissionMode","upgradeMode","DAKDashboard","PageLayout","pageName"],"sourceRoot":""}