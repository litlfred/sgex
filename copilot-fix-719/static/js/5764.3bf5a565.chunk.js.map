{"version":3,"file":"static/js/5764.3bf5a565.chunk.js","mappings":"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","sources":["dak/faq/components/FAQAnswer.js","dak/faq/types/QuestionDefinition.js","dak/faq/registry/ParameterRegistryService.js","dak/faq/storage/Storage.js","dak/faq/engine/FAQExecutionEngine.js"],"sourcesContent":["/**\n * FAQ Answer React Component\n * Renders FAQ question results with internationalization support\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport faqExecutionEngine from '../engine/FAQExecutionEngine.js';\nimport DOMPurify from 'dompurify';\nimport './FAQAnswer.css';\n\nconst FAQAnswer = ({ \n  questionId, \n  parameters = {}, \n  githubService = null,\n  assetFiles = [],\n  showRawData = false,\n  className = ''\n}) => {\n  const { t, i18n } = useTranslation();\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const executeQuestion = useCallback(async () => {\n    if (!questionId || !githubService) {\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Prepare request\n      const request = {\n        questionId,\n        parameters: {\n          ...parameters,\n          locale: i18n.language.replace('-', '_') || 'en_US'\n        },\n        assetFiles\n      };\n\n      // Execute question\n      const context = { githubService };\n      const questionResult = await faqExecutionEngine.executeQuestion(request, context);\n      \n      setResult(questionResult);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [questionId, parameters, githubService, assetFiles, i18n.language]);\n\n  useEffect(() => {\n    executeQuestion();\n  }, [executeQuestion]);\n\n  const sanitizeHTML = (html) => {\n    return DOMPurify.sanitize(html, {\n      ALLOWED_TAGS: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'div', 'span', 'ul', 'ol', 'li', 'strong', 'em', 'code', 'pre', 'time', 'small'],\n      ALLOWED_ATTR: ['class', 'datetime']\n    });\n  };\n\n  const renderNarrative = () => {\n    if (!result?.narrative) return null;\n\n    return (\n      <div \n        className=\"faq-narrative\"\n        dangerouslySetInnerHTML={{ __html: sanitizeHTML(result.narrative) }}\n      />\n    );\n  };\n\n  const renderStructuredData = () => {\n    if (!showRawData || !result?.structured) return null;\n\n    return (\n      <details className=\"faq-structured-data\">\n        <summary>{t('dak.faq.structured_data')}</summary>\n        <pre>{JSON.stringify(result.structured, null, 2)}</pre>\n      </details>\n    );\n  };\n\n  const renderMessages = () => {\n    const warnings = result?.warnings || [];\n    const errors = result?.errors || [];\n    \n    if (warnings.length === 0 && errors.length === 0) return null;\n\n    return (\n      <div className=\"faq-messages\">\n        {errors.map((error, index) => (\n          <div key={`error-${index}`} className=\"faq-message faq-error\">\n            <span className=\"faq-message-icon\">⚠️</span>\n            {error}\n          </div>\n        ))}\n        {warnings.map((warning, index) => (\n          <div key={`warning-${index}`} className=\"faq-message faq-warning\">\n            <span className=\"faq-message-icon\">⚠️</span>\n            {warning}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderMetadata = () => {\n    if (!showRawData || !result?.meta) return null;\n\n    return (\n      <details className=\"faq-metadata\">\n        <summary>{t('dak.faq.metadata')}</summary>\n        <pre>{JSON.stringify(result.meta, null, 2)}</pre>\n      </details>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className={`faq-answer loading ${className}`}>\n        <div className=\"faq-loading-spinner\"></div>\n        <p>{t('dak.faq.loading')}</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`faq-answer error ${className}`}>\n        <h4>{t('dak.faq.error_title')}</h4>\n        <p className=\"faq-error-message\">{error}</p>\n        <button onClick={executeQuestion} className=\"faq-retry-button\">\n          {t('dak.faq.retry')}\n        </button>\n      </div>\n    );\n  }\n\n  if (!result) {\n    return (\n      <div className={`faq-answer empty ${className}`}>\n        <p>{t('dak.faq.no_data')}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`faq-answer success ${className}`}>\n      {renderNarrative()}\n      {renderMessages()}\n      {renderStructuredData()}\n      {renderMetadata()}\n    </div>\n  );\n};\n\nexport default FAQAnswer;","/**\n * Core types and interfaces for DAK FAQ system\n */\n\n/**\n * Question hierarchy levels\n */\nexport const QuestionLevel = {\n  DAK: 'dak',\n  COMPONENT: 'component', \n  ASSET: 'asset'\n};\n\n/**\n * Question metadata definition\n */\nexport class QuestionDefinition {\n  constructor({\n    id,\n    level,\n    title,\n    description,\n    parameters = [],\n    tags = [],\n    version = '1.0.0',\n    isTemplate = false,\n    componentTypes = [],\n    assetTypes = []\n  }) {\n    this.id = id;\n    this.level = level;\n    this.title = title;\n    this.description = description;\n    this.parameters = parameters;\n    this.tags = tags;\n    this.version = version;\n    this.isTemplate = isTemplate;\n    this.componentTypes = componentTypes;\n    this.assetTypes = assetTypes;\n  }\n}\n\n/**\n * Parameter definition for questions\n */\nexport class ParameterDefinition {\n  constructor({\n    name,\n    type = 'string',\n    required = false,\n    description = '',\n    defaultValue = null,\n    validation = {}\n  }) {\n    this.name = name;\n    this.type = type;\n    this.required = required;\n    this.description = description;\n    this.defaultValue = defaultValue;\n    this.validation = validation;\n  }\n}\n\n/**\n * Question execution context\n */\nexport class QuestionContext {\n  constructor({\n    repository,\n    locale = 'en_US',\n    branch = 'main',\n    user = null,\n    assetFile = null,\n    componentType = null,\n    storage = null\n  }) {\n    this.repository = repository;\n    this.locale = locale;\n    this.branch = branch;\n    this.user = user;\n    this.assetFile = assetFile;\n    this.componentType = componentType;\n    this.storage = storage;\n  }\n}\n\n/**\n * Question execution result\n */\nexport class QuestionResult {\n  constructor({\n    structured = {},\n    narrative = '',\n    warnings = [],\n    errors = [],\n    meta = {}\n  }) {\n    this.structured = structured;\n    this.narrative = narrative;\n    this.warnings = warnings;\n    this.errors = errors;\n    this.meta = meta;\n  }\n}\n\n/**\n * Cache hint for FAQ answers\n */\nexport class CacheHint {\n  constructor({\n    scope = 'repository',\n    key = '',\n    ttl = 3600, // 1 hour default\n    dependencies = []\n  }) {\n    this.scope = scope;\n    this.key = key;\n    this.ttl = ttl;\n    this.dependencies = dependencies;\n  }\n}","/**\n * Parameter registry service for DAK FAQ system\n * Manages parameter definitions and validation\n */\n\nimport yaml from 'js-yaml';\nimport { ParameterDefinition } from '../types/QuestionDefinition.js';\n\nclass ParameterRegistryService {\n  constructor() {\n    this.registry = null;\n    this.loaded = false;\n  }\n\n  /**\n   * Load parameter registry from YAML\n   * @param {string} yamlContent - YAML content as string\n   */\n  loadFromYaml(yamlContent) {\n    try {\n      this.registry = yaml.load(yamlContent);\n      this.loaded = true;\n    } catch (error) {\n      throw new Error(`Failed to parse parameter registry YAML: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get parameters for a specific context\n   * @param {string} level - Question level (dak, component, asset)\n   * @param {string} type - Component or asset type\n   * @returns {ParameterDefinition[]} - Array of parameter definitions\n   */\n  getParameters(level, type = null) {\n    if (!this.loaded || !this.registry) {\n      throw new Error('Parameter registry not loaded');\n    }\n\n    const parameters = [];\n    \n    // Add global defaults\n    if (this.registry.defaults) {\n      for (const [name, config] of Object.entries(this.registry.defaults)) {\n        parameters.push(new ParameterDefinition({\n          name,\n          type: config.type,\n          required: config.required || false,\n          description: config.description || '',\n          defaultValue: config.default || null,\n          validation: config.validation || {}\n        }));\n      }\n    }\n\n    // Add level-specific parameters\n    if (this.registry[level]) {\n      if (type && this.registry[level][type]) {\n        // Type-specific parameters\n        for (const [name, config] of Object.entries(this.registry[level][type])) {\n          parameters.push(new ParameterDefinition({\n            name,\n            ...config\n          }));\n        }\n      } else if (!type) {\n        // All parameters for the level\n        for (const [paramName, config] of Object.entries(this.registry[level])) {\n          if (typeof config === 'object' && config.type) {\n            // Direct parameter definition\n            parameters.push(new ParameterDefinition({\n              name: paramName,\n              ...config\n            }));\n          }\n        }\n      }\n    }\n\n    // Remove duplicates (later definitions override earlier ones)\n    const uniqueParams = new Map();\n    parameters.forEach(param => {\n      uniqueParams.set(param.name, param);\n    });\n\n    return Array.from(uniqueParams.values());\n  }\n\n  /**\n   * Validate parameters against registry\n   * @param {Object} parameters - Parameters to validate\n   * @param {string} level - Question level\n   * @param {string} type - Component or asset type\n   * @returns {Object} - Validation result with normalized parameters and errors\n   */\n  validateParameters(parameters, level, type = null) {\n    const definitions = this.getParameters(level, type);\n    const normalized = {};\n    const errors = [];\n\n    // Check required parameters\n    for (const definition of definitions) {\n      const value = parameters[definition.name];\n      \n      if (definition.required && (value === undefined || value === null)) {\n        errors.push(`Required parameter '${definition.name}' is missing`);\n        continue;\n      }\n\n      // Use default value if not provided\n      const finalValue = value !== undefined ? value : definition.defaultValue;\n      \n      // Type validation\n      if (finalValue !== null && finalValue !== undefined) {\n        const typeError = this.validateParameterType(finalValue, definition);\n        if (typeError) {\n          errors.push(`Parameter '${definition.name}': ${typeError}`);\n          continue;\n        }\n\n        // Custom validation\n        const validationError = this.validateParameterCustom(finalValue, definition);\n        if (validationError) {\n          errors.push(`Parameter '${definition.name}': ${validationError}`);\n          continue;\n        }\n      }\n\n      normalized[definition.name] = finalValue;\n    }\n\n    // Check for unknown parameters\n    for (const paramName of Object.keys(parameters)) {\n      if (!definitions.find(def => def.name === paramName)) {\n        errors.push(`Unknown parameter '${paramName}'`);\n      }\n    }\n\n    return {\n      normalized,\n      errors,\n      isValid: errors.length === 0\n    };\n  }\n\n  /**\n   * Validate parameter type\n   * @param {any} value - Parameter value\n   * @param {ParameterDefinition} definition - Parameter definition\n   * @returns {string|null} - Error message or null if valid\n   */\n  validateParameterType(value, definition) {\n    const expectedType = definition.type;\n    const actualType = typeof value;\n\n    switch (expectedType) {\n      case 'string':\n        if (actualType !== 'string') {\n          return `Expected string, got ${actualType}`;\n        }\n        break;\n      case 'boolean':\n        if (actualType !== 'boolean') {\n          return `Expected boolean, got ${actualType}`;\n        }\n        break;\n      case 'number':\n        if (actualType !== 'number' || isNaN(value)) {\n          return `Expected number, got ${actualType}`;\n        }\n        break;\n      case 'array':\n        if (!Array.isArray(value)) {\n          return `Expected array, got ${actualType}`;\n        }\n        break;\n      case 'object':\n        if (actualType !== 'object' || Array.isArray(value)) {\n          return `Expected object, got ${actualType}`;\n        }\n        break;\n      default:\n        return `Unknown type: ${expectedType}`;\n    }\n\n    return null;\n  }\n\n  /**\n   * Validate parameter against custom rules\n   * @param {any} value - Parameter value\n   * @param {ParameterDefinition} definition - Parameter definition\n   * @returns {string|null} - Error message or null if valid\n   */\n  validateParameterCustom(value, definition) {\n    if (!definition.validation) {\n      return null;\n    }\n\n    const validation = definition.validation;\n\n    // Pattern validation\n    if (validation.pattern && typeof value === 'string') {\n      const regex = new RegExp(validation.pattern);\n      if (!regex.test(value)) {\n        return `Value does not match pattern ${validation.pattern}`;\n      }\n    }\n\n    // Enum validation\n    if (validation.enum && Array.isArray(validation.enum)) {\n      if (!validation.enum.includes(value)) {\n        return `Value must be one of: ${validation.enum.join(', ')}`;\n      }\n    }\n\n    // Length validation\n    if (validation.minLength !== undefined && typeof value === 'string') {\n      if (value.length < validation.minLength) {\n        return `String must be at least ${validation.minLength} characters`;\n      }\n    }\n\n    if (validation.maxLength !== undefined && typeof value === 'string') {\n      if (value.length > validation.maxLength) {\n        return `String must be at most ${validation.maxLength} characters`;\n      }\n    }\n\n    // Numeric range validation\n    if (validation.min !== undefined && typeof value === 'number') {\n      if (value < validation.min) {\n        return `Number must be at least ${validation.min}`;\n      }\n    }\n\n    if (validation.max !== undefined && typeof value === 'number') {\n      if (value > validation.max) {\n        return `Number must be at most ${validation.max}`;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get parameter schema for OpenAPI/JSON Schema generation\n   * @param {string} level - Question level\n   * @param {string} type - Component or asset type\n   * @returns {Object} - JSON Schema object\n   */\n  getParameterSchema(level, type = null) {\n    const definitions = this.getParameters(level, type);\n    const properties = {};\n    const required = [];\n\n    for (const definition of definitions) {\n      const property = {\n        type: definition.type,\n        description: definition.description\n      };\n\n      if (definition.defaultValue !== null) {\n        property.default = definition.defaultValue;\n      }\n\n      if (definition.validation) {\n        Object.assign(property, definition.validation);\n      }\n\n      properties[definition.name] = property;\n\n      if (definition.required) {\n        required.push(definition.name);\n      }\n    }\n\n    return {\n      type: 'object',\n      properties,\n      required\n    };\n  }\n}\n\n// Default registry content\nconst DEFAULT_REGISTRY_YAML = `\ndefaults:\n  repository:\n    type: string\n    required: true\n    description: \"Repository context (always required)\"\n  locale:\n    type: string\n    required: false\n    default: \"en_US\"\n    description: \"Locale for responses\"\n  branch:\n    type: string\n    required: false\n    default: \"main\"\n    description: \"Git branch context\"\n\ndak:\n\ncomponent:\n  businessProcess:\n    componentType:\n      type: string\n      required: true\n      default: \"businessProcess\"\n      description: \"Type of component being analyzed\"\n\nasset:\n  lesson:\n    assetFile:\n      type: string\n      required: true\n      description: \"Relative path to the lesson file\"\n`;\n\n// Singleton instance\nconst parameterRegistryService = new ParameterRegistryService();\n\n// Load default registry\nparameterRegistryService.loadFromYaml(DEFAULT_REGISTRY_YAML);\n\nexport default parameterRegistryService;","/**\n * Storage abstraction interface for FAQ questions\n * Provides unified access to file system operations for local repositories\n */\n\nexport class Storage {\n  /**\n   * Read a file from the repository\n   * @param {string} path - Relative path to the file\n   * @returns {Promise<Buffer>} - File content as Buffer\n   */\n  async readFile(path) {\n    throw new Error('readFile must be implemented by subclass');\n  }\n\n  /**\n   * Check if a file exists\n   * @param {string} path - Relative path to the file\n   * @returns {Promise<boolean>} - Whether the file exists\n   */\n  async fileExists(path) {\n    throw new Error('fileExists must be implemented by subclass');\n  }\n\n  /**\n   * List files matching a pattern\n   * @param {string} pattern - Glob pattern or prefix\n   * @param {Object} options - Options for listing\n   * @returns {Promise<string[]>} - Array of matching file paths\n   */\n  async listFiles(pattern, options = {}) {\n    throw new Error('listFiles must be implemented by subclass');\n  }\n\n  /**\n   * Get file metadata\n   * @param {string} path - Relative path to the file\n   * @returns {Promise<Object>} - File metadata (size, modified, etc.)\n   */\n  async getFileInfo(path) {\n    throw new Error('getFileInfo must be implemented by subclass');\n  }\n}\n\n/**\n * GitHub-based storage implementation\n * Provides access to files in GitHub repositories\n */\nexport class GitHubStorage extends Storage {\n  constructor(githubService, repository, branch = 'main') {\n    super();\n    this.githubService = githubService;\n    this.repository = repository;\n    this.branch = branch;\n    this.cache = new Map();\n  }\n\n  /**\n   * Parse repository string into owner/repo\n   * @param {string} repository - Repository in format \"owner/repo\" or GitHub URL\n   * @returns {Object} - {owner, repo}\n   */\n  parseRepository(repository) {\n    if (typeof repository === 'string') {\n      // Handle GitHub URLs\n      if (repository.includes('github.com')) {\n        const match = repository.match(/github\\.com\\/([^/]+)\\/([^/?#]+)/);\n        if (match) {\n          return { owner: match[1], repo: match[2].replace(/\\.git$/, '') };\n        }\n      }\n      \n      // Handle owner/repo format\n      const parts = repository.split('/');\n      if (parts.length === 2) {\n        return { owner: parts[0], repo: parts[1] };\n      }\n    }\n    \n    throw new Error(`Invalid repository format: ${repository}`);\n  }\n\n  async readFile(path) {\n    const cacheKey = `${this.repository}:${this.branch}:${path}`;\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey);\n    }\n\n    try {\n      const { owner, repo } = this.parseRepository(this.repository);\n      const response = await this.githubService.getFileContent(owner, repo, path, this.branch);\n      \n      // GitHub API returns base64 encoded content\n      const content = Buffer.from(response.content, 'base64');\n      this.cache.set(cacheKey, content);\n      return content;\n    } catch (error) {\n      throw new Error(`Failed to read file ${path}: ${error.message}`);\n    }\n  }\n\n  async fileExists(path) {\n    try {\n      await this.readFile(path);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async listFiles(pattern, options = {}) {\n    try {\n      const { owner, repo } = this.parseRepository(this.repository);\n      \n      // For GitHub API, we need to get the repository tree\n      const tree = await this.githubService.getRepositoryTree(owner, repo, this.branch, true);\n      \n      // Filter files based on pattern\n      const files = tree.tree\n        .filter(item => item.type === 'blob')\n        .map(item => item.path);\n\n      // Simple pattern matching (could be enhanced with proper glob support)\n      if (pattern.includes('*') || pattern.includes('?')) {\n        const regexPattern = pattern\n          .replace(/\\./g, '\\\\.')\n          .replace(/\\*/g, '.*')\n          .replace(/\\?/g, '.');\n        const regex = new RegExp(`^${regexPattern}$`);\n        return files.filter(file => regex.test(file));\n      } else {\n        // Prefix matching\n        return files.filter(file => file.startsWith(pattern));\n      }\n    } catch (error) {\n      throw new Error(`Failed to list files: ${error.message}`);\n    }\n  }\n\n  async getFileInfo(path) {\n    try {\n      const { owner, repo } = this.parseRepository(this.repository);\n      const response = await this.githubService.getFileContent(owner, repo, path, this.branch);\n      \n      return {\n        size: Buffer.from(response.content, 'base64').length,\n        sha: response.sha,\n        path: response.path,\n        type: response.type,\n        url: response.html_url\n      };\n    } catch (error) {\n      throw new Error(`Failed to get file info for ${path}: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Mock storage implementation for browser testing\n * Can be used when no real storage is available\n */\nexport class MockStorage extends Storage {\n  constructor(mockFiles = {}) {\n    super();\n    this.mockFiles = mockFiles;\n  }\n\n  async readFile(path) {\n    if (this.mockFiles[path]) {\n      return Buffer.from(this.mockFiles[path], 'utf-8');\n    }\n    throw new Error(`File not found: ${path}`);\n  }\n\n  async fileExists(path) {\n    return this.mockFiles.hasOwnProperty(path);\n  }\n\n  async listFiles(pattern, options = {}) {\n    const files = Object.keys(this.mockFiles);\n    \n    if (pattern.includes('*') || pattern.includes('?')) {\n      const regexPattern = pattern\n        .replace(/\\./g, '\\\\.')\n        .replace(/\\*/g, '.*')\n        .replace(/\\?/g, '.');\n      const regex = new RegExp(`^${regexPattern}$`);\n      return files.filter(file => regex.test(file));\n    } else {\n      return files.filter(file => file.startsWith(pattern));\n    }\n  }\n\n  async getFileInfo(path) {\n    if (this.mockFiles[path]) {\n      return {\n        size: Buffer.from(this.mockFiles[path], 'utf-8').length,\n        path: path,\n        type: 'file'\n      };\n    }\n    throw new Error(`File not found: ${path}`);\n  }\n}","/**\n * FAQ Execution Engine\n * Manages the execution of FAQ questions and batch processing\n */\n\nimport { QuestionContext, QuestionResult } from '../types/QuestionDefinition.js';\nimport parameterRegistryService from '../registry/ParameterRegistryService.js';\nimport { GitHubStorage } from '../storage/Storage.js';\n\nclass FAQExecutionEngine {\n  constructor() {\n    this.questionRegistry = new Map();\n    this.initialized = false;\n  }\n\n  /**\n   * Initialize the engine with available questions\n   */\n  async initialize() {\n    if (this.initialized) return;\n\n    try {\n      // Import and register all question components\n      await this.loadQuestions();\n      this.initialized = true;\n    } catch (error) {\n      throw new Error(`Failed to initialize FAQ engine: ${error.message}`);\n    }\n  }\n\n  /**\n   * Load all question components from the questions directory\n   */\n  async loadQuestions() {\n    const questions = [\n      // DAK-level questions\n      {\n        id: 'dak-name',\n        module: () => import('../questions/dak/DakNameQuestion.js')\n      },\n      {\n        id: 'dak-version', \n        module: () => import('../questions/dak/DakVersionQuestion.js')\n      },\n      // Component-level questions\n      {\n        id: 'business-process-workflows',\n        module: () => import('../questions/component/businessProcess/BusinessProcessWorkflowsQuestion.js')\n      },\n      // Asset-level questions\n      {\n        id: 'decision-table-inputs',\n        module: () => import('../questions/asset/decisionSupportLogic/DecisionTableInputsQuestion.js')\n      }\n    ];\n\n    for (const questionConfig of questions) {\n      try {\n        const questionModule = await questionConfig.module();\n        \n        if (questionModule.metadata && questionModule.execute) {\n          this.questionRegistry.set(questionConfig.id, {\n            metadata: questionModule.metadata,\n            execute: questionModule.execute,\n            Render: questionModule.Render || null\n          });\n        } else {\n          console.warn(`Question ${questionConfig.id} is missing required exports (metadata, execute)`);\n        }\n      } catch (error) {\n        console.error(`Failed to load question ${questionConfig.id}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Get catalog of all available questions\n   * @param {Object} filters - Optional filters (level, tags, etc.)\n   * @returns {Array} - Array of question metadata\n   */\n  getCatalog(filters = {}) {\n    if (!this.initialized) {\n      throw new Error('FAQ engine not initialized');\n    }\n\n    const questions = Array.from(this.questionRegistry.values()).map(q => q.metadata);\n\n    // Apply filters\n    let filteredQuestions = questions;\n\n    if (filters.level) {\n      filteredQuestions = filteredQuestions.filter(q => q.level === filters.level);\n    }\n\n    if (filters.tags && Array.isArray(filters.tags)) {\n      filteredQuestions = filteredQuestions.filter(q => \n        filters.tags.some(tag => q.tags.includes(tag))\n      );\n    }\n\n    if (filters.componentType) {\n      filteredQuestions = filteredQuestions.filter(q => \n        !q.componentTypes || q.componentTypes.length === 0 || q.componentTypes.includes(filters.componentType)\n      );\n    }\n\n    if (filters.assetType) {\n      filteredQuestions = filteredQuestions.filter(q => \n        !q.assetTypes || q.assetTypes.length === 0 || q.assetTypes.includes(filters.assetType)\n      );\n    }\n\n    return filteredQuestions;\n  }\n\n  /**\n   * Execute a batch of FAQ questions\n   * @param {Array} requests - Array of question requests\n   * @param {Object} context - Execution context (githubService, etc.)\n   * @returns {Promise<Array>} - Array of execution results\n   */\n  async executeBatch(requests, context = {}) {\n    if (!this.initialized) {\n      await this.initialize();\n    }\n\n    const results = [];\n\n    for (const request of requests) {\n      try {\n        const result = await this.executeQuestion(request, context);\n        results.push({\n          questionId: request.questionId,\n          success: true,\n          result\n        });\n      } catch (error) {\n        results.push({\n          questionId: request.questionId,\n          success: false,\n          error: error.message,\n          result: new QuestionResult({\n            structured: {},\n            narrative: this.getErrorNarrative(request.locale || 'en_US', error.message),\n            errors: [error.message],\n            meta: {}\n          })\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Execute a single FAQ question\n   * @param {Object} request - Question request\n   * @param {Object} context - Execution context\n   * @returns {Promise<QuestionResult>} - Question result\n   */\n  async executeQuestion(request, context = {}) {\n    const { questionId, parameters = {}, assetFiles = [] } = request;\n\n    // Get question from registry\n    const question = this.questionRegistry.get(questionId);\n    if (!question) {\n      throw new Error(`Question not found: ${questionId}`);\n    }\n\n    // Handle template questions (asset-level questions that need to be instantiated per asset)\n    if (question.metadata.isTemplate && assetFiles.length > 0) {\n      return await this.executeTemplateQuestion(question, request, context);\n    }\n\n    // Validate and normalize parameters\n    const validation = parameterRegistryService.validateParameters(\n      parameters,\n      question.metadata.level,\n      this.getQuestionType(question.metadata)\n    );\n\n    if (!validation.isValid) {\n      throw new Error(`Parameter validation failed: ${validation.errors.join(', ')}`);\n    }\n\n    // Create storage interface\n    const storage = this.createStorage(validation.normalized, context);\n\n    // Create execution context\n    const executionContext = new QuestionContext({\n      repository: validation.normalized.repository,\n      locale: validation.normalized.locale || 'en_US',\n      branch: validation.normalized.branch || 'main',\n      user: context.user || null,\n      assetFile: validation.normalized.assetFile || null,\n      componentType: validation.normalized.componentType || null,\n      storage\n    });\n\n    // Execute the question\n    const input = {\n      ...validation.normalized,\n      storage,\n      context: executionContext\n    };\n\n    return await question.execute(input);\n  }\n\n  /**\n   * Execute template question for multiple assets\n   * @param {Object} question - Question definition\n   * @param {Object} request - Original request\n   * @param {Object} context - Execution context\n   * @returns {Promise<QuestionResult>} - Aggregated result\n   */\n  async executeTemplateQuestion(question, request, context) {\n    const { parameters = {}, assetFiles = [] } = request;\n    const results = [];\n    const allWarnings = [];\n    const allErrors = [];\n\n    for (const assetFile of assetFiles) {\n      try {\n        const assetParameters = { ...parameters, assetFile };\n        \n        // Validate parameters for this asset\n        const validation = parameterRegistryService.validateParameters(\n          assetParameters,\n          question.metadata.level,\n          this.getQuestionType(question.metadata)\n        );\n\n        if (!validation.isValid) {\n          allErrors.push(`Asset ${assetFile}: ${validation.errors.join(', ')}`);\n          continue;\n        }\n\n        // Create storage and context for this asset\n        const storage = this.createStorage(validation.normalized, context);\n        const executionContext = new QuestionContext({\n          repository: validation.normalized.repository,\n          locale: validation.normalized.locale || 'en_US',\n          branch: validation.normalized.branch || 'main',\n          user: context.user || null,\n          assetFile: assetFile,\n          componentType: validation.normalized.componentType || null,\n          storage\n        });\n\n        const input = {\n          ...validation.normalized,\n          storage,\n          context: executionContext\n        };\n\n        const result = await question.execute(input);\n        results.push({\n          assetFile,\n          result\n        });\n\n        // Collect warnings and errors\n        if (result.warnings) allWarnings.push(...result.warnings);\n        if (result.errors) allErrors.push(...result.errors);\n\n      } catch (error) {\n        allErrors.push(`Asset ${assetFile}: ${error.message}`);\n      }\n    }\n\n    // Aggregate results\n    const aggregatedStructured = {\n      assets: results.map(r => ({\n        assetFile: r.assetFile,\n        ...r.result.structured\n      })),\n      summary: {\n        totalAssets: assetFiles.length,\n        successfulAssets: results.length,\n        failedAssets: assetFiles.length - results.length\n      }\n    };\n\n    const aggregatedNarrative = this.aggregateNarratives(results, request.locale || 'en_US');\n\n    return new QuestionResult({\n      structured: aggregatedStructured,\n      narrative: aggregatedNarrative,\n      warnings: allWarnings,\n      errors: allErrors,\n      meta: {\n        isAggregated: true,\n        questionId: question.metadata.id,\n        assetCount: assetFiles.length\n      }\n    });\n  }\n\n  /**\n   * Create storage interface based on parameters and context\n   * @param {Object} parameters - Validated parameters\n   * @param {Object} context - Execution context\n   * @returns {Storage} - Storage interface\n   */\n  createStorage(parameters, context) {\n    if (context.githubService) {\n      // Use GitHub storage for web application\n      return new GitHubStorage(\n        context.githubService,\n        parameters.repository,\n        parameters.branch || 'main'\n      );\n    } else {\n      // This would be implemented for MCP server with local storage\n      throw new Error('Local storage not implemented in web context');\n    }\n  }\n\n  /**\n   * Get question type for parameter validation\n   * @param {Object} metadata - Question metadata\n   * @returns {string} - Question type\n   */\n  getQuestionType(metadata) {\n    if (metadata.componentTypes && metadata.componentTypes.length > 0) {\n      return metadata.componentTypes[0];\n    }\n    if (metadata.assetTypes && metadata.assetTypes.length > 0) {\n      return metadata.assetTypes[0];\n    }\n    return null;\n  }\n\n  /**\n   * Aggregate narratives from multiple results\n   * @param {Array} results - Array of asset results\n   * @param {string} locale - Locale for output\n   * @returns {string} - Aggregated narrative HTML\n   */\n  aggregateNarratives(results, locale) {\n    if (results.length === 0) {\n      return `<h4>No Results</h4><p>No assets were processed successfully.</p>`;\n    }\n\n    let html = `<h4>Asset Analysis Results</h4>`;\n    html += `<p>Processed ${results.length} asset(s):</p>`;\n    html += `<ul>`;\n\n    for (const { assetFile, result } of results) {\n      html += `<li><strong>${assetFile}</strong>`;\n      if (result.errors && result.errors.length > 0) {\n        html += ` <span class=\"error\">(${result.errors.length} error(s))</span>`;\n      } else if (result.warnings && result.warnings.length > 0) {\n        html += ` <span class=\"warning\">(${result.warnings.length} warning(s))</span>`;\n      } else {\n        html += ` <span class=\"success\">✓</span>`;\n      }\n      html += `</li>`;\n    }\n\n    html += `</ul>`;\n    return html;\n  }\n\n  /**\n   * Get error narrative\n   * @param {string} locale - Locale for error message\n   * @param {string} error - Error message\n   * @returns {string} - Error narrative HTML\n   */\n  getErrorNarrative(locale, error) {\n    const errorMessages = {\n      en_US: `<h4>Error</h4><p class=\"error\">An error occurred while executing the question: ${error}</p>`,\n      fr_FR: `<h4>Erreur</h4><p class=\"error\">Une erreur s'est produite lors de l'exécution de la question: ${error}</p>`,\n      es_ES: `<h4>Error</h4><p class=\"error\">Ocurrió un error al ejecutar la pregunta: ${error}</p>`\n    };\n\n    return errorMessages[locale] || errorMessages['en_US'];\n  }\n\n  /**\n   * Normalize locale string\n   * @param {string} locale - Input locale\n   * @returns {string} - Normalized locale\n   */\n  normalizeLocale(locale) {\n    if (!locale) return 'en_US';\n    \n    // Handle common locale formats\n    const normalized = locale.replace('-', '_');\n    \n    // Map to supported locales\n    const supportedLocales = ['en_US', 'fr_FR', 'es_ES', 'ar_AR', 'zh_CN', 'ru_RU'];\n    \n    if (supportedLocales.includes(normalized)) {\n      return normalized;\n    }\n    \n    // Try base language\n    const baseLanguage = normalized.split('_')[0];\n    const baseLocaleMap = {\n      'en': 'en_US',\n      'fr': 'fr_FR', \n      'es': 'es_ES',\n      'ar': 'ar_AR',\n      'zh': 'zh_CN',\n      'ru': 'ru_RU'\n    };\n    \n    return baseLocaleMap[baseLanguage] || 'en_US';\n  }\n}\n\n// Singleton instance\nconst faqExecutionEngine = new FAQExecutionEngine();\n\nexport default faqExecutionEngine;"],"names":["_ref","questionId","parameters","githubService","assetFiles","showRawData","className","t","i18n","useTranslation","result","setResult","useState","loading","setLoading","error","setError","executeQuestion","useCallback","async","request","_objectSpread","locale","language","replace","context","questionResult","faqExecutionEngine","err","message","useEffect","_jsxs","concat","children","_jsx","onClick","renderNarrative","narrative","dangerouslySetInnerHTML","__html","html","DOMPurify","sanitize","ALLOWED_TAGS","ALLOWED_ATTR","renderMessages","warnings","errors","length","map","index","warning","structured","JSON","stringify","meta","QuestionLevel","DAK","COMPONENT","ASSET","QuestionDefinition","constructor","id","level","title","description","tags","version","isTemplate","componentTypes","assetTypes","this","ParameterDefinition","_ref2","name","type","required","defaultValue","validation","QuestionContext","_ref3","repository","branch","user","assetFile","componentType","storage","QuestionResult","_ref4","CacheHint","_ref5","scope","key","ttl","dependencies","parameterRegistryService","registry","loaded","loadFromYaml","yamlContent","yaml","Error","getParameters","arguments","undefined","defaults","config","Object","entries","push","default","paramName","uniqueParams","Map","forEach","param","set","Array","from","values","validateParameters","definitions","normalized","definition","value","finalValue","typeError","validateParameterType","validationError","validateParameterCustom","keys","find","def","isValid","expectedType","actualType","isNaN","isArray","pattern","RegExp","test","enum","includes","join","minLength","maxLength","min","max","getParameterSchema","properties","property","assign","Storage","readFile","path","fileExists","listFiles","getFileInfo","GitHubStorage","super","cache","parseRepository","match","owner","repo","parts","split","cacheKey","has","get","response","getFileContent","content","Buffer","files","getRepositoryTree","tree","filter","item","regexPattern","regex","file","startsWith","size","sha","url","html_url","questionRegistry","initialized","initialize","loadQuestions","questions","module","questionConfig","questionModule","metadata","execute","Render","console","warn","getCatalog","filters","filteredQuestions","q","some","tag","assetType","executeBatch","requests","results","success","getErrorNarrative","question","executeTemplateQuestion","getQuestionType","createStorage","executionContext","input","allWarnings","allErrors","assetParameters","aggregatedStructured","assets","r","summary","totalAssets","successfulAssets","failedAssets","aggregatedNarrative","aggregateNarratives","isAggregated","assetCount","errorMessages","en_US","fr_FR","es_ES","normalizeLocale"],"sourceRoot":""}