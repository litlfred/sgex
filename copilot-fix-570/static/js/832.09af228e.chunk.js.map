{"version":3,"file":"static/js/832.09af228e.chunk.js","mappings":"mLAkcA,MAEA,EAF+B,IAzb/B,MACEA,WAAAA,GACEC,KAAKC,YAAc,KACnBD,KAAKE,YACP,CAKA,gBAAMA,GACJ,IACE,MAAMC,QAAiBC,MAAM,kCAC7BJ,KAAKC,kBAAoBE,EAASE,MACpC,CAAE,MAAOC,GACPC,QAAQC,KAAK,0CAA2CF,EAC1D,CACF,CAKAG,WAAAA,CAAYC,GAAkB,IAADC,EAC3B,IAAKD,IAAoBA,EAAgBE,GACvC,MAAM,IAAIC,MAAM,qDAGlB,MAAMC,EAAM,GAkGZ,OA/FAA,EAAIC,KAAK,YAAYL,EAAgBE,MACrCE,EAAIC,KAAK,2BACTD,EAAIC,KAAK,OAAOL,EAAgBE,MAChCE,EAAIC,KAAK,WAAWf,KAAKgB,gBAAgBN,EAAgBO,UACzDH,EAAIC,KAAK,iBAAiBf,KAAKgB,gBAAgBN,EAAgBQ,iBAEnC,QAA5BP,EAAID,EAAgBS,gBAAQ,IAAAR,GAAxBA,EAA0BS,QAC5BN,EAAIC,KAAK,eAAeL,EAAgBS,SAASC,UAI/CV,EAAgBW,MAClBP,EAAIC,KAAK,aAAaL,EAAgBW,QAIpCX,EAAgBY,OAASZ,EAAgBY,MAAMC,OAAS,GAC1Db,EAAgBY,MAAME,QAAQ,CAACC,EAAMC,KAC/BD,EAAKE,QACPb,EAAIC,KAAK,UAAUW,uBAA2BD,EAAKE,WAErDb,EAAIC,KAAK,UAAUW,qBAAyBD,EAAKG,QACjDd,EAAIC,KAAK,UAAUW,wBAA4B1B,KAAKgB,gBAAgBS,EAAKI,eAKzEnB,EAAgBoB,gBAAkBpB,EAAgBoB,eAAeP,OAAS,GAC5Eb,EAAgBoB,eAAeN,QAAQ,CAACO,EAAML,KAC5CZ,EAAIC,KAAK,mBAAmBW,0BAA8BK,EAAKH,QAC/Dd,EAAIC,KAAK,mBAAmBW,6BAAiC1B,KAAKgB,gBAAgBe,EAAKF,aACnFE,EAAKC,QACPlB,EAAIC,KAAK,mBAAmBW,wBAA4B1B,KAAKgB,gBAAgBe,EAAKC,cAMpFtB,EAAgBuB,aAAevB,EAAgBuB,YAAYV,OAAS,GACtEb,EAAgBuB,YAAYT,QAAQ,CAACU,EAAWR,KAC1CQ,EAAUP,QACZb,EAAIC,KAAK,eAAeW,uBAA2BQ,EAAUP,WAE/Db,EAAIC,KAAK,eAAeW,qBAAyBQ,EAAUN,QAC3Dd,EAAIC,KAAK,eAAeW,wBAA4B1B,KAAKgB,gBAAgBkB,EAAUL,eAKnFnB,EAAgByB,WACdzB,EAAgByB,SAASd,MAC3BP,EAAIC,KAAK,sBAAsBL,EAAgByB,SAASd,QAEtDX,EAAgByB,SAASjB,aAC3BJ,EAAIC,KAAK,6BAA6Bf,KAAKgB,gBAAgBN,EAAgByB,SAASjB,kBAKpFR,EAAgB0B,aAClBtB,EAAIC,KAAK,yCAAyCL,EAAgB0B,eAIhE1B,EAAgB2B,cAAgB3B,EAAgB2B,aAAad,OAAS,GACxEb,EAAgB2B,aAAab,QAAQ,CAACc,EAAaZ,KACjDZ,EAAIC,KAAK,4BAA4BW,mCAAuCY,EAAYjB,QACxFP,EAAIC,KAAK,4BAA4BW,uCAA2C1B,KAAKgB,gBAAgBsB,EAAYC,YAC7GD,EAAYpB,aACdJ,EAAIC,KAAK,4BAA4BW,4CAAgD1B,KAAKgB,gBAAgBsB,EAAYpB,mBAMxHR,EAAgBS,WACdT,EAAgBS,SAASqB,SAC3B1B,EAAIC,KAAK,gBAAgBL,EAAgBS,SAASqB,YAEhD9B,EAAgBS,SAASsB,WAC3B3B,EAAIC,KAAK,kBAAkBf,KAAKgB,gBAAgBN,EAAgBS,SAASsB,eAEvE/B,EAAgBS,SAASuB,SAAWhC,EAAgBS,SAASuB,QAAQnB,OAAS,GAChFb,EAAgBS,SAASuB,QAAQlB,QAAQ,CAACkB,EAAShB,KAC7CgB,EAAQzB,MACVH,EAAIC,KAAK,aAAaW,cAAkB1B,KAAKgB,gBAAgB0B,EAAQzB,UAEnEyB,EAAQC,QACV7B,EAAIC,KAAK,aAAaW,8BACtBZ,EAAIC,KAAK,aAAaW,uBAA2BgB,EAAQC,cAM1D7B,EAAI8B,KAAK,KAClB,CAKA5B,eAAAA,CAAgB6B,GACd,OAAKA,EACEA,EAAIC,QAAQ,MAAO,QAAQA,QAAQ,KAAM,OAAOA,QAAQ,MAAO,OADrD,EAEnB,CAKAC,QAAAA,CAASC,GAEP,MAAMC,EAAQD,EAAWE,MAAM,MAAMC,IAAIC,GAAQA,EAAKC,QAAQC,OAAOF,GAAQA,GACvE1C,EAAkB,CACtBY,MAAO,GACPQ,eAAgB,GAChBG,YAAa,GACbI,aAAc,GACdlB,SAAU,CAAC,GAGb,IAAK,MAAMiC,KAAQH,EACbG,EAAKG,WAAW,aAETH,EAAKG,WAAW,OADzB7C,EAAgBE,GAAKwC,EAAKF,MAAM,KAAK,GAAGG,OAG/BD,EAAKG,WAAW,UACzB7C,EAAgBO,KAAOmC,EAAKF,MAAM,KAAK,GAAGG,OAAOP,QAAQ,KAAM,IACtDM,EAAKG,WAAW,gBACzB7C,EAAgBQ,YAAckC,EAAKF,MAAM,KAAK,GAAGG,OAAOP,QAAQ,KAAM,IAC7DM,EAAKI,SAAS,cACvB9C,EAAgBW,KAAO+B,EAAKF,MAAM,KAAK,GAAGG,QAK9C,OAAO3C,CACT,CAKA+C,uBAAAA,CAAwB/C,GACtB,MAAMgD,EAAS,GA6Bf,OA1BKhD,EAAgBE,IAAOF,EAAgBE,GAAG+C,MAAM,6BACnDD,EAAO3C,KAAK,2FAGTL,EAAgBO,MAA+C,IAAvCP,EAAgBO,KAAKoC,OAAO9B,QACvDmC,EAAO3C,KAAK,oBAGTL,EAAgBQ,aAA6D,IAA9CR,EAAgBQ,YAAYmC,OAAO9B,QACrEmC,EAAO3C,KAAK,2BAGTL,EAAgBW,MACnBqC,EAAO3C,KAAK,0BAGTL,EAAgBY,OAA0C,IAAjCZ,EAAgBY,MAAMC,OAGlDb,EAAgBY,MAAME,QAAQ,CAACC,EAAMC,KAC9BD,EAAKG,MAASH,EAAKI,SACtB6B,EAAO3C,KAAK,QAAQW,EAAQ,4CAJhCgC,EAAO3C,KAAK,iCASP,CACL6C,QAA2B,IAAlBF,EAAOnC,OAChBmC,SAEJ,CAKA,yBAAMG,CAAoBnD,GACxB,IAEE,MAAMoD,EAAa9D,KAAKyD,wBAAwB/C,GAChD,IAAKoD,EAAWF,QACd,MAAM,IAAI/C,MAAM,sBAAsBiD,EAAWJ,OAAOd,KAAK,SAI/D,MAAMI,EAAahD,KAAKS,YAAYC,GAG9BqD,EAAW,oBAAoBrD,EAAgBE,SAWrD,IARgBoD,EAAAA,EAAqBC,WAAWF,EAAUf,EAAY,CACpE3B,KAAM,mBACN6C,QAASxD,EAAgBE,GACzBuD,UAAWzD,EAAgBO,KAC3BmD,aAAcC,KAAKC,MACnBC,OAAQ,iBAIR,MAAM,IAAI1D,MAAM,oCAGlB,MAAO,CACL2D,SAAS,EACTT,WACAU,QAASzB,EAGb,CAAE,MAAO1C,GAEP,OADAC,QAAQD,MAAM,iCAAkCA,GACzC,CACLkE,SAAS,EACTlE,MAAOA,EAAMoE,QAEjB,CACF,CAKAC,oBAAAA,CAAqBT,GACnB,IACE,MAAMU,EAAgBZ,EAAAA,EAAqBa,mBACrCd,EAAW,oBAAoBG,QAE/BY,EAAOF,EAAcG,MAAMC,KAAKC,GAAKA,EAAEC,OAASnB,GACtD,IAAKe,EACH,OAAO,KAMT,MAAO,CACLpE,gBAHsBV,KAAK+C,SAAS+B,EAAKL,SAIzCtD,SAAU2D,EAAK3D,SACfiD,aAAcU,EAAKK,UAGvB,CAAE,MAAO7E,GAEP,OADAC,QAAQD,MAAM,sDAAuDA,GAC9D,IACT,CACF,CAKA8E,gBAAAA,GACE,IAGE,OAFsBpB,EAAAA,EAAqBa,mBAEtBE,MAClBzB,OAAOwB,IAAI,IAAAO,EAAA,OACVP,EAAKI,KAAK3B,WAAW,sBACrBuB,EAAKI,KAAKI,SAAS,SACK,sBAAX,QAAbD,EAAAP,EAAK3D,gBAAQ,IAAAkE,OAAA,EAAbA,EAAehE,QAEhB8B,IAAI2B,IAAI,IAAAS,EAAAC,EAAA,MAAK,CACZ5E,IAAiB,QAAb2E,EAAAT,EAAK3D,gBAAQ,IAAAoE,OAAA,EAAbA,EAAerB,UAAWY,EAAKI,KAAKhC,MAAM,KAAKuC,MAAM3C,QAAQ,OAAQ,IACzE7B,MAAmB,QAAbuE,EAAAV,EAAK3D,gBAAQ,IAAAqE,OAAA,EAAbA,EAAerB,YAAa,gBAClCJ,SAAUe,EAAKI,KACfd,aAAcU,EAAKK,UACnBhE,SAAU2D,EAAK3D,YAEhBuE,KAAK,CAACC,EAAGC,IAAMA,EAAExB,aAAeuB,EAAEvB,aAEvC,CAAE,MAAO9D,GAEP,OADAC,QAAQD,MAAM,+BAAgCA,GACvC,EACT,CACF,CAKAuF,uBAAAA,CAAwB3B,GACtB,IACE,MAAMH,EAAW,oBAAoBG,QACrC,OAAOF,EAAAA,EAAqB8B,WAAW/B,EACzC,CAAE,MAAOzD,GAEP,OADAC,QAAQD,MAAM,mCAAoCA,IAC3C,CACT,CACF,CAKAyF,0BAAAA,GACE,MAAO,CACLnF,GAAI,GACJK,KAAM,GACNC,YAAa,GACbG,KAAM,SACNC,MAAO,CACL,CACEM,KAAM,GACNC,QAAS,GACTF,OAAQ,2BAGZG,eAAgB,GAChBG,YAAa,GACbE,SAAU,CACRd,KAAM,WACNH,YAAa,IAEfkB,YAAa,WACbC,aAAc,GACd2D,YAAa,CACXC,aAAc,GACdC,aAAc,GACdC,YAAa,IAEfhF,SAAU,CACRqB,QAAS,QACTpB,OAAQ,QACRqB,UAAW,GACXC,QAAS,GACT0D,KAAM,IAGZ,CAKAC,iBAAAA,GACE,MAAO,CACL,CACEzF,GAAI,qBACJK,KAAM,uBACNC,YAAa,uEACbG,KAAM,eACNC,MAAO,CACL,CACEM,KAAM,YACNC,QAAS,uBACTF,OAAQ,2BAGZQ,SAAU,CACRd,KAAM,WACNH,YAAa,iCAEfkB,YAAa,YAEf,CACExB,GAAI,iBACJK,KAAM,mBACNC,YAAa,4EACbG,KAAM,eACNC,MAAO,CACL,CACEM,KAAM,YACNC,QAAS,mBACTF,OAAQ,2BAGZQ,SAAU,CACRd,KAAM,WACNH,YAAa,qDAEfkB,YAAa,YAEf,CACExB,GAAI,mBACJK,KAAM,UACNC,YAAa,2CACbG,KAAM,UACNC,MAAO,CACL,CACEM,KAAM,YACNC,QAAS,UACTF,OAAQ,2BAGZQ,SAAU,CACRd,KAAM,WACNH,YAAa,sDAEfkB,YAAa,aAEf,CACExB,GAAI,iBACJK,KAAM,2BACNC,YAAa,+DACbG,KAAM,SACNC,MAAO,CACL,CACEM,KAAM,YACNC,QAAS,wBACTF,OAAQ,2BAGZQ,SAAU,CACRd,KAAM,WACNH,YAAa,yDAEfkB,YAAa,kBAGnB,G,0BCxbF,MAQMkE,EAAqBA,KACzB,MAAMC,GAAWC,EAAAA,EAAAA,OACX,QAAEC,EAAO,WAAEC,EAAU,OAAEC,IAAWC,EAAAA,EAAAA,MAIlCC,EAAc,MAGbnG,EAAiBoG,IAAsBC,EAAAA,EAAAA,UAAS,OAChDC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAQC,IAAaJ,EAAAA,EAAAA,WAAS,IAC9BrD,EAAQ0D,IAAaL,EAAAA,EAAAA,UAAS,CAAC,IAC/BM,EAAaC,IAAkBP,EAAAA,EAAAA,WAAS,IACxCQ,EAAYC,IAAiBT,EAAAA,EAAAA,UAAS,KACtCU,EAAcC,IAAmBX,EAAAA,EAAAA,UAAS,KAC1CY,EAAeC,IAAoBb,EAAAA,EAAAA,WAAS,IAC5Cc,EAAWC,IAAgBf,EAAAA,EAAAA,UAAS,UAG3CgB,EAAAA,EAAAA,WAAU,KACiBC,WACvBf,GAAW,GAEX,IAYIH,EAAmBmB,EAAuBlC,8BAI5C2B,EAAgBO,EAAuB7C,mBAEzC,CAAE,MAAO9E,GACPC,QAAQD,MAAM,mCAAoCA,GAClD8G,EAAU,CAAEc,QAAS,+BACvB,CAEAjB,GAAW,IAGbkB,IACC,CAACtB,IAGJ,MAAMuB,GAAoBC,EAAAA,EAAAA,aAAY,CAACC,EAAOC,KAC5CzB,EAAmB0B,IAAI,IAClBA,EACH,CAACF,GAAQC,KAIP7E,EAAO4E,IACTlB,EAAUoB,IACR,MAAMC,EAAY,IAAKD,GAEvB,cADOC,EAAUH,GACVG,KAGV,CAAC/E,IAGEgF,GAA0BL,EAAAA,EAAAA,aAAY,CAACM,EAAajH,EAAO4G,EAAOC,KACtEzB,EAAmB0B,IACjB,MAAMI,EAAgB,IAAKJ,GAU3B,OATKI,EAAcD,KACjBC,EAAcD,GAAe,IAG1BC,EAAcD,GAAajH,KAC9BkH,EAAcD,GAAajH,GAAS,CAAC,GAGvCkH,EAAcD,GAAajH,GAAO4G,GAASC,EACpCK,KAER,IAGGC,GAAeR,EAAAA,EAAAA,aAAY,SAACC,GAA6B,IAAtBQ,EAAWC,UAAAxH,OAAA,QAAAyH,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtDjC,EAAmB0B,IAAI,IAClBA,EACH,CAACF,GAAQ,IAAKE,EAAKF,IAAU,GAAKQ,KAEtC,EAAG,IAGGG,GAAkBZ,EAAAA,EAAAA,aAAY,CAACC,EAAO5G,KAC1CoF,EAAmB0B,IAAI,IAClBA,EACH,CAACF,GAAQE,EAAKF,GAAOhF,OAAO,CAAC4F,EAAGC,IAAMA,IAAMzH,OAE7C,IAGG0H,GAAef,EAAAA,EAAAA,aAAY,KAC/B,IAAK3H,EAAiB,OAAO,EAE7B,MAAMoD,EAAamE,EAAuBxE,wBAAwB/C,GAElE,IAAKoD,EAAWF,QAAS,CACvB,MAAMyF,EAAc,CAAC,EAUrB,OATAvF,EAAWJ,OAAOlC,QAAQlB,IACpBA,EAAMkD,SAAS,MAAO6F,EAAYzI,GAAKN,EAClCA,EAAMkD,SAAS,QAAS6F,EAAYpI,KAAOX,EAC3CA,EAAMkD,SAAS,eAAgB6F,EAAYnI,YAAcZ,EACzDA,EAAMkD,SAAS,QAAS6F,EAAYhI,KAAOf,EAC3CA,EAAMkD,SAAS,QAAS6F,EAAY/H,MAAQhB,EAChD+I,EAAYnB,QAAU5H,IAE7B8G,EAAUiC,IACH,CACT,CAGA,OADAjC,EAAU,CAAC,IACJ,GACN,CAAC1G,IAoCE4I,GAAkBjB,EAAAA,EAAAA,aAAY,KAClC,GAAK3H,EAEL,IACE,MAAMI,EAAMmH,EAAuBxH,YAAYC,GAC/C8G,EAAc1G,GACdwG,GAAe,EACjB,CAAE,MAAOhH,GACPC,QAAQD,MAAM,gCAAiCA,GAC/C8G,EAAU,CAAEc,QAAS,kCACvB,GACC,CAACxH,IAqDJ,OANAqH,EAAAA,EAAAA,WAAU,KACHtB,GAAYC,GACfH,EAAS,MAEV,CAACE,EAASC,EAAYH,IAEpBE,GAAYC,EAabM,GAEAuC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,SAAS,eAAcC,UACjCH,EAAAA,EAAAA,KAAA,OAAKI,UAAU,6BAA4BD,UACzCE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,kBAAiBD,SAAA,EAC9BH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,6BACJH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,oDAQXH,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,SAAS,eAAcC,UACjCE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,eAAcD,SAAA,EAC3BE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,iBAAgBD,SAAA,EAE/BE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,iBAAgBD,SAAA,EAC7BE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,eAAcD,SAAA,EAC3BE,EAAAA,EAAAA,MAAA,UACEC,QAASA,IAAMjC,GAAkBD,GACjCgC,UAAU,cACVG,MAAM,uBAAsBJ,SAAA,CAC7B,+BACoBjC,EAAalG,OAAO,QAEzCgI,EAAAA,EAAAA,KAAA,UACEM,QAASP,EACTK,UAAU,cACVI,WAA0B,OAAfrJ,QAAe,IAAfA,GAAAA,EAAiBE,IAC5BkJ,MAAM,qBAAoBJ,SAC3B,uCAIHH,EAAAA,EAAAA,KAAA,OAAKI,UAAU,gBAAeD,UAC5BH,EAAAA,EAAAA,KAAA,UACEM,QApJO7B,UACjB,GAAKoB,IAAL,CAIAjC,GAAU,GAEV,IACE,MAAM6C,QAAe/B,EAAuBpE,oBAAoBnD,GAE5DsJ,EAAOxF,SAETkD,EAAgBO,EAAuB7C,oBAGvC6E,MAAM,0DAIJ1D,EAAS,iBAAwB,OAAPE,QAAO,IAAPA,OAAO,EAAPA,EAASyD,SAAmB,OAAVxD,QAAU,IAAVA,OAAU,EAAVA,EAAYzF,OAAO0F,GAAqB,SAAXA,EAAoB,IAAIA,IAAW,OAG9GS,EAAU,CAAEc,QAAS8B,EAAO1J,OAEhC,CAAE,MAAOA,GACPC,QAAQD,MAAM,iCAAkCA,GAChD8G,EAAU,CAAEc,QAAS,mCACvB,CAEAf,GAAU,EA1BV,GAkJU4C,SAAU7C,KAA0B,OAAfxG,QAAe,IAAfA,GAAAA,EAAiBE,IACtC+I,UAAU,sBACVG,MAAM,yBAAwBJ,SAE7BxC,EAAS,yBAAiB,2BAKhCxD,EAAOwE,UACN0B,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gBAAeD,SAAA,EAC5BH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,WAAe,IAAEhG,EAAOwE,YAIpC0B,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gBAAeD,SAAA,CAE3B/B,IACCiC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,qBAAoBD,SAAA,EACjCE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,iBAAgBD,SAAA,EAC7BH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,mBACJH,EAAAA,EAAAA,KAAA,UACEM,QAASA,IAAMjC,GAAiB,GAChC+B,UAAU,YAAWD,SACtB,eAIHE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,kBAAiBD,SAAA,EAC9BE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBD,SAAA,EAChCH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,cACHzB,EAAuB5B,oBAAoBlD,IAAIgH,IAC9CP,EAAAA,EAAAA,MAAA,OAAuBD,UAAU,gBAAeD,SAAA,EAC9CH,EAAAA,EAAAA,KAAA,QAAMI,UAAU,gBAAeD,SAAES,EAASlJ,QAC1CsI,EAAAA,EAAAA,KAAA,UACEM,QAASA,IAzITM,KACpBrD,EAAmB,IACdmB,EAAuBlC,gCACvBoE,EACHhJ,SAAU,IACL8G,EAAuBlC,6BAA6B5E,YACpDgJ,EAAShJ,YAGhBiG,EAAU,CAAC,IAgIwBgD,CAAaD,GAC5BR,UAAU,WAAUD,SACrB,UALOS,EAASvJ,QAYtB6G,EAAalG,OAAS,IACrBqI,EAAAA,EAAAA,MAAA,OAAKD,UAAU,wBAAuBD,SAAA,EACpCH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,kBACHjC,EAAatE,IAAIkH,IAChBT,EAAAA,EAAAA,MAAA,OAAoBD,UAAU,oBAAmBD,SAAA,EAC/CE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,QAAMI,UAAU,aAAYD,SAAEW,EAAMpJ,QACpCsI,EAAAA,EAAAA,KAAA,QAAMI,UAAU,WAAUD,SAAEW,EAAMzJ,MAClC2I,EAAAA,EAAAA,KAAA,QAAMI,UAAU,iBAAgBD,SAC7B,IAAIrF,KAAKgG,EAAMjG,cAAckG,2BAGlCV,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gBAAeD,SAAA,EAC5BH,EAAAA,EAAAA,KAAA,UACEM,QAASA,IAnJV3F,KACvB,MAAM8F,EAAS/B,EAAuBtD,qBAAqBT,GACvD8F,IACFlD,EAAmBkD,EAAOtJ,iBAC1B0G,EAAU,CAAC,GACXQ,GAAiB,GAGjBrB,EAAS,iBAAwB,OAAPE,QAAO,IAAPA,OAAO,EAAPA,EAASyD,SAAmB,OAAVxD,QAAU,IAAVA,OAAU,EAAVA,EAAYzF,OAAO0F,GAAqB,SAAXA,EAAoB,IAAIA,IAAW,QA2IvE4D,CAAgBF,EAAMzJ,IACrC+I,UAAU,WAAUD,SACrB,UAGDH,EAAAA,EAAAA,KAAA,UACEM,QAASA,KAAMW,OA5IdtG,EA4IgCmG,EAAMzJ,QA3I3D6J,OAAOC,QAAQ,8CAA8CxG,QAC/C+D,EAAuBpC,wBAAwB3B,KAE7DwD,EAAgBO,EAAuB7C,oBAGnCyB,IAAgB3C,IAClB4C,EAAmBmB,EAAuBlC,8BAC1CQ,EAAS,iBAAwB,OAAPE,QAAO,IAAPA,OAAO,EAAPA,EAASyD,SAAmB,OAAVxD,QAAU,IAAVA,OAAU,EAAVA,EAAYzF,OAAO0F,GAAqB,SAAXA,EAAoB,IAAIA,IAAW,SATzFzC,OA6IDyF,UAAU,aAAYD,SACvB,4BAlBKW,EAAMzJ,eA+B5B2I,EAAAA,EAAAA,KAAA,OAAKI,UAAW,gBAAehC,EAAgB,eAAiB,IAAK+B,SAClEhJ,IACCkJ,EAAAA,EAAAA,MAAAe,EAAAA,SAAA,CAAAjB,SAAA,EACEE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,cAAaD,SAAA,EAC1BH,EAAAA,EAAAA,KAAA,UACEI,UAAW,QAAqB,UAAd9B,EAAwB,SAAW,IACrDgC,QAASA,IAAM/B,EAAa,SAAS4B,SACtC,gBAGDH,EAAAA,EAAAA,KAAA,UACEI,UAAW,QAAqB,UAAd9B,EAAwB,SAAW,IACrDgC,QAASA,IAAM/B,EAAa,SAAS4B,SACtC,4BAGDH,EAAAA,EAAAA,KAAA,UACEI,UAAW,QAAqB,YAAd9B,EAA0B,SAAW,IACvDgC,QAASA,IAAM/B,EAAa,WAAW4B,SACxC,sBAGDH,EAAAA,EAAAA,KAAA,UACEI,UAAW,QAAqB,aAAd9B,EAA2B,SAAW,IACxDgC,QAASA,IAAM/B,EAAa,YAAY4B,SACzC,iBAKHE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,cAAaD,SAAA,CACX,UAAd7B,IACC0B,EAAAA,EAAAA,KAACqB,EAAY,CACXlK,gBAAiBA,EACjBgD,OAAQA,EACRmH,cAAezC,IAIJ,UAAdP,IACC0B,EAAAA,EAAAA,KAACuB,EAAQ,CACPpK,gBAAiBA,EACjBgD,OAAQA,EACRqH,oBAAqBrC,EACrBsC,UAAWnC,EACXoC,aAAchC,IAIH,YAAdpB,IACC0B,EAAAA,EAAAA,KAAC2B,EAAU,CACTxK,gBAAiBA,EACjBgD,OAAQA,EACRmH,cAAezC,EACf2C,oBAAqBrC,EACrBsC,UAAWnC,EACXoC,aAAchC,IAIH,aAAdpB,IACC0B,EAAAA,EAAAA,KAAC4B,EAAW,CACVzK,gBAAiBA,EACjBgD,OAAQA,EACRmH,cAAezC,EACf2C,oBAAqBrC,EACrBsC,UAAWnC,EACXoC,aAAchC,kBAW7B5B,IACCkC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,gBAAgBE,QAASA,IAAMvC,GAAe,GAAOoC,UAClEE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gBAAgBE,QAASuB,GAAKA,EAAEC,kBAAkB3B,SAAA,EAC/DE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,eAAcD,SAAA,EAC3BH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,iBACJH,EAAAA,EAAAA,KAAA,UACEM,QAASA,IAAMvC,GAAe,GAC9BqC,UAAU,YAAWD,SACtB,eAIHH,EAAAA,EAAAA,KAAA,OAAKI,UAAU,aAAYD,UACzBH,EAAAA,EAAAA,KAAA,OAAKI,UAAU,cAAaD,SAAEnC,OAEhCgC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAcD,UAC3BH,EAAAA,EAAAA,KAAA,UACEM,QAASA,KACPyB,UAAUC,UAAUC,UAAUjE,GAC9B0C,MAAM,6BAERN,UAAU,WAAUD,SACrB,gDArOTH,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,SAAS,eAAcC,UACjCH,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAcD,UAC3BE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBD,SAAA,EAChCH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,oBACJH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,kEA+OTkB,EAAea,IAAA,IAAC,gBAAE/K,EAAe,OAAEgD,EAAM,cAAEmH,GAAeY,EAAA,OAC9D7B,EAAAA,EAAAA,MAAA,OAAKD,UAAU,eAAcD,SAAA,EAC3BH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,uBAEJE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAOmC,QAAQ,KAAIhC,SAAC,gBACpBH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLT,GAAG,KACH2H,MAAO7H,EAAgBE,GACvB+K,SAAWP,GAAMP,EAAc,KAAMO,EAAE7I,OAAOgG,OAC9CoB,UAAWjG,EAAO9C,GAAK,QAAU,GACjCgL,YAAY,+BACZC,QAAQ,2BAETnI,EAAO9C,KAAM2I,EAAAA,EAAAA,KAAA,QAAMI,UAAU,aAAYD,SAAEhG,EAAO9C,MACnD2I,EAAAA,EAAAA,KAAA,QAAMI,UAAU,YAAWD,SAAC,wEAG9BE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAOmC,QAAQ,OAAMhC,SAAC,oBACtBH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLT,GAAG,OACH2H,MAAO7H,EAAgBO,KACvB0K,SAAWP,GAAMP,EAAc,OAAQO,EAAE7I,OAAOgG,OAChDoB,UAAWjG,EAAOzC,KAAO,QAAU,GACnC2K,YAAY,iCAEblI,EAAOzC,OAAQsI,EAAAA,EAAAA,KAAA,QAAMI,UAAU,aAAYD,SAAEhG,EAAOzC,WAGvD2I,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAOmC,QAAQ,cAAahC,SAAC,mBAC7BH,EAAAA,EAAAA,KAAA,YACE3I,GAAG,cACH2H,MAAO7H,EAAgBQ,YACvByK,SAAWP,GAAMP,EAAc,cAAeO,EAAE7I,OAAOgG,OACvDoB,UAAWjG,EAAOxC,YAAc,QAAU,GAC1C0K,YAAY,mEACZE,KAAM,IAEPpI,EAAOxC,cAAeqI,EAAAA,EAAAA,KAAA,QAAMI,UAAU,aAAYD,SAAEhG,EAAOxC,kBAG9D0I,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAOmC,QAAQ,OAAMhC,SAAC,kBACtBE,EAAAA,EAAAA,MAAA,UACEhJ,GAAG,OACH2H,MAAO7H,EAAgBW,KACvBsK,SAAWP,GAAMP,EAAc,OAAQO,EAAE7I,OAAOgG,OAChDoB,UAAWjG,EAAOrC,KAAO,QAAU,GAAGqI,SAAA,EAEtCH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,SAAQmB,SAAC,YACvBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,eAAcmB,SAAC,kBAC7BH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,UAASmB,SAAC,aACxBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,gBAAemB,SAAC,oBAC9BH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,eAAcmB,SAAC,kBAC7BH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,SAAQmB,SAAC,YACvBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,SAAQmB,SAAC,cAExBhG,EAAOrC,OAAQkI,EAAAA,EAAAA,KAAA,QAAMI,UAAU,aAAYD,SAAEhG,EAAOrC,cAMrDyJ,EAAWiB,IAAA,IAAC,gBAAErL,EAAe,OAAEgD,EAAM,oBAAEqH,EAAmB,UAAEC,EAAS,aAAEC,GAAcc,EAAA,OACzFnC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,eAAcD,SAAA,EAC3BH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,4BAEJE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBD,SAAA,EAChCH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,aACJH,EAAAA,EAAAA,KAAA,UACElI,KAAK,SACLwI,QAASA,IAAMmB,EAAU,QAAS,CAAEpJ,KAAM,GAAIC,QAAS,GAAIF,OAAQ,2BACnEgI,UAAU,UAASD,SACpB,kBAIFhG,EAAOpC,QAASiI,EAAAA,EAAAA,KAAA,QAAMI,UAAU,aAAYD,SAAEhG,EAAOpC,QAErDZ,EAAgBY,OAASZ,EAAgBY,MAAM6B,IAAI,CAAC1B,EAAMC,KACzDkI,EAAAA,EAAAA,MAAA,OAAiBD,UAAU,aAAYD,SAAA,EACrCE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBD,SAAA,EAChCE,EAAAA,EAAAA,MAAA,QAAAF,SAAA,CAAM,QAAMhI,EAAQ,MACpB6H,EAAAA,EAAAA,KAAA,UACElI,KAAK,SACLwI,QAASA,IAAMoB,EAAa,QAASvJ,GACrCiI,UAAU,aAAYD,SACvB,eAIHE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,WAAUD,SAAA,EACvBE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,UACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,MAAO9G,EAAKG,KACZ+J,SAAWP,GAAML,EAAoB,QAASrJ,EAAO,OAAQ0J,EAAE7I,OAAOgG,OACtEqD,YAAY,kBAGhBhC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,kBACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,MAAO9G,EAAKI,QACZ8J,SAAWP,GAAML,EAAoB,QAASrJ,EAAO,UAAW0J,EAAE7I,OAAOgG,OACzEqD,YAAY,oCAIlBhC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,iBACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,MAAO9G,EAAKE,QAAU,GACtBgK,SAAWP,GAAML,EAAoB,QAASrJ,EAAO,SAAU0J,EAAE7I,OAAOgG,OACxEqD,YAAY,gCArCRlK,QA4CdkI,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBD,SAAA,EAChCH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,oBACJH,EAAAA,EAAAA,KAAA,UACElI,KAAK,SACLwI,QAASA,IAAMmB,EAAU,iBAAkB,CAAEpJ,KAAM,GAAIC,QAAS,GAAIG,OAAQ,KAC5E2H,UAAU,UAASD,SACpB,2BAKFhJ,EAAgBoB,gBAAkBpB,EAAgBoB,eAAeqB,IAAI,CAACpB,EAAML,KAC3EkI,EAAAA,EAAAA,MAAA,OAAiBD,UAAU,aAAYD,SAAA,EACrCE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBD,SAAA,EAChCE,EAAAA,EAAAA,MAAA,QAAAF,SAAA,CAAM,iBAAehI,EAAQ,MAC7B6H,EAAAA,EAAAA,KAAA,UACElI,KAAK,SACLwI,QAASA,IAAMoB,EAAa,iBAAkBvJ,GAC9CiI,UAAU,aAAYD,SACvB,eAIHE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,WAAUD,SAAA,EACvBE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,UACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,MAAOxG,EAAKH,KACZ+J,SAAWP,GAAML,EAAoB,iBAAkBrJ,EAAO,OAAQ0J,EAAE7I,OAAOgG,OAC/EqD,YAAY,2BAGhBhC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,kBACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,MAAOxG,EAAKF,QACZ8J,SAAWP,GAAML,EAAoB,iBAAkBrJ,EAAO,UAAW0J,EAAE7I,OAAOgG,OAClFqD,YAAY,8BAIlBhC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,0BACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,MAAOxG,EAAKC,QAAU,GACtB2J,SAAWP,GAAML,EAAoB,iBAAkBrJ,EAAO,SAAU0J,EAAE7I,OAAOgG,OACjFqD,YAAY,qDArCRlK,QA4CdkI,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBD,SAAA,EAChCH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,iBACJH,EAAAA,EAAAA,KAAA,UACElI,KAAK,SACLwI,QAASA,IAAMmB,EAAU,cAAe,CAAEpJ,KAAM,GAAIC,QAAS,GAAIF,OAAQ,2BACzEgI,UAAU,UAASD,SACpB,uBAKFhJ,EAAgBuB,aAAevB,EAAgBuB,YAAYkB,IAAI,CAACjB,EAAWR,KAC1EkI,EAAAA,EAAAA,MAAA,OAAiBD,UAAU,aAAYD,SAAA,EACrCE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBD,SAAA,EAChCE,EAAAA,EAAAA,MAAA,QAAAF,SAAA,CAAM,aAAWhI,EAAQ,MACzB6H,EAAAA,EAAAA,KAAA,UACElI,KAAK,SACLwI,QAASA,IAAMoB,EAAa,cAAevJ,GAC3CiI,UAAU,aAAYD,SACvB,eAIHE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,WAAUD,SAAA,EACvBE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,UACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,MAAOrG,EAAUN,KACjB+J,SAAWP,GAAML,EAAoB,cAAerJ,EAAO,OAAQ0J,EAAE7I,OAAOgG,OAC5EqD,YAAY,uBAGhBhC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,kBACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,MAAOrG,EAAUL,QACjB8J,SAAWP,GAAML,EAAoB,cAAerJ,EAAO,UAAW0J,EAAE7I,OAAOgG,OAC/EqD,YAAY,0BAIlBhC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,iBACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,MAAOrG,EAAUP,QAAU,GAC3BgK,SAAWP,GAAML,EAAoB,cAAerJ,EAAO,SAAU0J,EAAE7I,OAAOgG,OAC9EqD,YAAY,gCArCRlK,WA+CZwJ,EAAac,IAAA,IAAAC,EAAAC,EAAA,IAAC,gBAAExL,EAAe,OAAEgD,EAAM,cAAEmH,EAAa,oBAAEE,EAAmB,UAAEC,EAAS,aAAEC,GAAce,EAAA,OAC1GpC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,eAAcD,SAAA,EAC3BH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,sBAEJE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,sBACJE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,WAAUD,SAAA,EACvBE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,mBACPE,EAAAA,EAAAA,MAAA,UACErB,OAA+B,QAAxB0D,EAAAvL,EAAgByB,gBAAQ,IAAA8J,OAAA,EAAxBA,EAA0B5K,OAAQ,GACzCsK,SAAWP,GAAMP,EAAc,WAAY,IAAKnK,EAAgByB,SAAUd,KAAM+J,EAAE7I,OAAOgG,QAASmB,SAAA,EAElGH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,WAAUmB,SAAC,yBACzBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,YAAWmB,SAAC,eAC1BH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,OAAMmB,SAAC,UACrBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,SAAQmB,SAAC,YACvBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,UAASmB,SAAC,0BAG5BE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,iBACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,OAA+B,QAAxB2D,EAAAxL,EAAgByB,gBAAQ,IAAA+J,OAAA,EAAxBA,EAA0BhL,cAAe,GAChDyK,SAAWP,GAAMP,EAAc,WAAY,IAAKnK,EAAgByB,SAAUjB,YAAakK,EAAE7I,OAAOgG,QAChGqD,YAAY,4CAMpBhC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,yBACJH,EAAAA,EAAAA,KAAA,OAAKI,UAAU,aAAYD,UACzBE,EAAAA,EAAAA,MAAA,UACErB,MAAO7H,EAAgB0B,aAAe,WACtCuJ,SAAWP,GAAMP,EAAc,cAAeO,EAAE7I,OAAOgG,OAAOmB,SAAA,EAE9DH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,YAAWmB,SAAC,eAC1BH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,WAAUmB,SAAC,cACzBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,iBAAgBmB,SAAC,oBAC/BH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,SAAQmB,SAAC,oBAK7BE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBD,SAAA,EAChCH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,sBACJH,EAAAA,EAAAA,KAAA,UACElI,KAAK,SACLwI,QAASA,IAAMmB,EAAU,eAAgB,CAAE3J,KAAM,QAASkB,OAAQ,GAAIrB,YAAa,KACnFyI,UAAU,UAASD,SACpB,yBAKFhJ,EAAgB2B,cAAgB3B,EAAgB2B,aAAac,IAAI,CAACb,EAAaZ,KAC9EkI,EAAAA,EAAAA,MAAA,OAAiBD,UAAU,aAAYD,SAAA,EACrCE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBD,SAAA,EAChCE,EAAAA,EAAAA,MAAA,QAAAF,SAAA,CAAM,eAAahI,EAAQ,MAC3B6H,EAAAA,EAAAA,KAAA,UACElI,KAAK,SACLwI,QAASA,IAAMoB,EAAa,eAAgBvJ,GAC5CiI,UAAU,aAAYD,SACvB,eAIHE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,WAAUD,SAAA,EACvBE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,UACPE,EAAAA,EAAAA,MAAA,UACErB,MAAOjG,EAAYjB,KACnBsK,SAAWP,GAAML,EAAoB,eAAgBrJ,EAAO,OAAQ0J,EAAE7I,OAAOgG,OAAOmB,SAAA,EAEpFH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,UAASmB,SAAC,aACxBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,QAAOmB,SAAC,WACtBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,UAASmB,SAAC,aACxBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,UAASmB,SAAC,aACxBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,WAAUmB,SAAC,cACzBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,UAASmB,SAAC,aACxBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,WAAUmB,SAAC,oBAG7BE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,YACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,MAAOjG,EAAYC,OACnBoJ,SAAWP,GAAML,EAAoB,eAAgBrJ,EAAO,SAAU0J,EAAE7I,OAAOgG,OAC/EqD,YAAY,yCAIlBhC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,iBACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,MAAOjG,EAAYpB,aAAe,GAClCyK,SAAWP,GAAML,EAAoB,eAAgBrJ,EAAO,cAAe0J,EAAE7I,OAAOgG,OACpFqD,YAAY,mCA3CRlK,WAqDZyJ,EAAcgB,IAAA,IAAAxL,EAAAyL,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAAC,gBAAE9L,EAAe,OAAEgD,EAAM,cAAEmH,EAAa,oBAAEE,EAAmB,UAAEC,EAAS,aAAEC,GAAckB,EAAA,OAC3GvC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,eAAcD,SAAA,EAC3BH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,cAEJE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,WAAUD,SAAA,EACvBE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,aACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,OAA+B,QAAxB5H,EAAAD,EAAgBS,gBAAQ,IAAAR,OAAA,EAAxBA,EAA0B6B,UAAW,GAC5CmJ,SAAWP,GAAMP,EAAc,WAAY,IAAKnK,EAAgBS,SAAUqB,QAAS4I,EAAE7I,OAAOgG,QAC5FqD,YAAY,cAGhBhC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,YACPE,EAAAA,EAAAA,MAAA,UACErB,OAA+B,QAAxB6D,EAAA1L,EAAgBS,gBAAQ,IAAAiL,OAAA,EAAxBA,EAA0BhL,SAAU,QAC3CuK,SAAWP,GAAMP,EAAc,WAAY,IAAKnK,EAAgBS,SAAUC,OAAQgK,EAAE7I,OAAOgG,QAASmB,SAAA,EAEpGH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,QAAOmB,SAAC,WACtBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,SAAQmB,SAAC,YACvBH,EAAAA,EAAAA,KAAA,UAAQhB,MAAM,UAASmB,SAAC,sBAK9BE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,eACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,OAA+B,QAAxB8D,EAAA3L,EAAgBS,gBAAQ,IAAAkL,OAAA,EAAxBA,EAA0B5J,YAAa,GAC9CkJ,SAAWP,GAAMP,EAAc,WAAY,IAAKnK,EAAgBS,SAAUsB,UAAW2I,EAAE7I,OAAOgG,QAC9FqD,YAAY,2CAIhBhC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBD,SAAA,EAChCH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,yBACJH,EAAAA,EAAAA,KAAA,UACElI,KAAK,SACLwI,QAASA,IAAMmB,EAAU,mBAAoB,CAAE/J,KAAM,GAAI0B,MAAO,KAChEgH,UAAU,UAASD,SACpB,sBAKsB,QAAxB4C,EAAA5L,EAAgBS,gBAAQ,IAAAmL,OAAA,EAAxBA,EAA0B5J,UAAWhC,EAAgBS,SAASuB,QAAQS,IAAI,CAACT,EAAShB,KACnFkI,EAAAA,EAAAA,MAAA,OAAiBD,UAAU,aAAYD,SAAA,EACrCE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBD,SAAA,EAChCE,EAAAA,EAAAA,MAAA,QAAAF,SAAA,CAAM,WAAShI,EAAQ,MACvB6H,EAAAA,EAAAA,KAAA,UACElI,KAAK,SACLwI,QAASA,KACP,MAAM4C,EAAc,IAAK/L,EAAgBS,SAASuB,SAAW,IAC7D+J,EAAYC,OAAOhL,EAAO,GAC1BmJ,EAAc,WAAY,IAAKnK,EAAgBS,SAAUuB,QAAS+J,KAEpE9C,UAAU,aAAYD,SACvB,eAIHE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,WAAUD,SAAA,EACvBE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,UACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,MAAO7F,EAAQzB,MAAQ,GACvB0K,SAAWP,IACT,MAAMqB,EAAc,IAAK/L,EAAgBS,SAASuB,SAAW,IAC7D+J,EAAY/K,GAAS,IAAKgB,EAASzB,KAAMmK,EAAE7I,OAAOgG,OAClDsC,EAAc,WAAY,IAAKnK,EAAgBS,SAAUuB,QAAS+J,KAEpEb,YAAY,qBAGhBhC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,WACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,QACLkH,MAAO7F,EAAQC,OAAS,GACxBgJ,SAAWP,IACT,MAAMqB,EAAc,IAAK/L,EAAgBS,SAASuB,SAAW,IAC7D+J,EAAY/K,GAAS,IAAKgB,EAASC,MAAOyI,EAAE7I,OAAOgG,OACnDsC,EAAc,WAAY,IAAKnK,EAAgBS,SAAUuB,QAAS+J,KAEpEb,YAAY,gCAvCVlK,QA+CdkI,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,UACPH,EAAAA,EAAAA,KAAA,SACElI,KAAK,OACLkH,OAA+B,QAAxBgE,EAAA7L,EAAgBS,gBAAQ,IAAAoL,GAAM,QAANC,EAAxBD,EAA0BnG,YAAI,IAAAoG,OAAN,EAAxBA,EAAgC5J,KAAK,QAAS,GACrD+I,SAAWP,GAAMP,EAAc,WAAY,IACtCnK,EAAgBS,SACnBiF,KAAMgF,EAAE7I,OAAOgG,MAAMrF,MAAM,KAAKC,IAAIwJ,GAAOA,EAAItJ,QAAQC,OAAOqJ,GAAOA,KAEvEf,YAAY,oCAEdrC,EAAAA,EAAAA,KAAA,QAAMI,UAAU,YAAWD,SAAC,mDAKlC,EAt7BoBkD,KAEhBrD,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,SAAS,eAAcC,UACjCH,EAAAA,EAAAA,KAACjD,EAAkB,K","sources":["services/actorDefinitionService.js","components/ActorEditor.js"],"sourcesContent":["/**\n * Actor Definition Service\n * \n * Manages actor definitions based on FHIR Persona logical model.\n * Handles conversion to FSH (FHIR Shorthand) format and integration with staging ground.\n */\n\nimport stagingGroundService from './stagingGroundService';\n\nclass ActorDefinitionService {\n  constructor() {\n    this.actorSchema = null;\n    this.loadSchema();\n  }\n\n  /**\n   * Load the actor definition JSON schema\n   */\n  async loadSchema() {\n    try {\n      const response = await fetch('/schemas/actor-definition.json');\n      this.actorSchema = await response.json();\n    } catch (error) {\n      console.warn('Could not load actor definition schema:', error);\n    }\n  }\n\n  /**\n   * Convert actor definition to FSH format\n   */\n  generateFSH(actorDefinition) {\n    if (!actorDefinition || !actorDefinition.id) {\n      throw new Error('Invalid actor definition: missing required fields');\n    }\n\n    const fsh = [];\n    \n    // Profile header\n    fsh.push(`Profile: ${actorDefinition.id}`);\n    fsh.push(`Parent: ActorDefinition`);\n    fsh.push(`Id: ${actorDefinition.id}`);\n    fsh.push(`Title: \"${this.escapeFSHString(actorDefinition.name)}\"`);\n    fsh.push(`Description: \"${this.escapeFSHString(actorDefinition.description)}\"`);\n    \n    if (actorDefinition.metadata?.status) {\n      fsh.push(`* status = #${actorDefinition.metadata.status}`);\n    }\n    \n    // Actor type\n    if (actorDefinition.type) {\n      fsh.push(`* type = #${actorDefinition.type}`);\n    }\n    \n    // Roles\n    if (actorDefinition.roles && actorDefinition.roles.length > 0) {\n      actorDefinition.roles.forEach((role, index) => {\n        if (role.system) {\n          fsh.push(`* role[${index}].coding.system = \"${role.system}\"`);\n        }\n        fsh.push(`* role[${index}].coding.code = #${role.code}`);\n        fsh.push(`* role[${index}].coding.display = \"${this.escapeFSHString(role.display)}\"`);\n      });\n    }\n    \n    // Qualifications\n    if (actorDefinition.qualifications && actorDefinition.qualifications.length > 0) {\n      actorDefinition.qualifications.forEach((qual, index) => {\n        fsh.push(`* qualification[${index}].code.coding.code = #${qual.code}`);\n        fsh.push(`* qualification[${index}].code.coding.display = \"${this.escapeFSHString(qual.display)}\"`);\n        if (qual.issuer) {\n          fsh.push(`* qualification[${index}].issuer.display = \"${this.escapeFSHString(qual.issuer)}\"`);\n        }\n      });\n    }\n    \n    // Specialties\n    if (actorDefinition.specialties && actorDefinition.specialties.length > 0) {\n      actorDefinition.specialties.forEach((specialty, index) => {\n        if (specialty.system) {\n          fsh.push(`* specialty[${index}].coding.system = \"${specialty.system}\"`);\n        }\n        fsh.push(`* specialty[${index}].coding.code = #${specialty.code}`);\n        fsh.push(`* specialty[${index}].coding.display = \"${this.escapeFSHString(specialty.display)}\"`);\n      });\n    }\n    \n    // Location context\n    if (actorDefinition.location) {\n      if (actorDefinition.location.type) {\n        fsh.push(`* location.type = #${actorDefinition.location.type}`);\n      }\n      if (actorDefinition.location.description) {\n        fsh.push(`* location.description = \"${this.escapeFSHString(actorDefinition.location.description)}\"`);\n      }\n    }\n    \n    // Access level as extension\n    if (actorDefinition.accessLevel) {\n      fsh.push(`* extension[accessLevel].valueCode = #${actorDefinition.accessLevel}`);\n    }\n    \n    // Interactions as extensions\n    if (actorDefinition.interactions && actorDefinition.interactions.length > 0) {\n      actorDefinition.interactions.forEach((interaction, index) => {\n        fsh.push(`* extension[interaction][${index}].extension[type].valueCode = #${interaction.type}`);\n        fsh.push(`* extension[interaction][${index}].extension[target].valueString = \"${this.escapeFSHString(interaction.target)}\"`);\n        if (interaction.description) {\n          fsh.push(`* extension[interaction][${index}].extension[description].valueString = \"${this.escapeFSHString(interaction.description)}\"`);\n        }\n      });\n    }\n    \n    // Add metadata\n    if (actorDefinition.metadata) {\n      if (actorDefinition.metadata.version) {\n        fsh.push(`* version = \"${actorDefinition.metadata.version}\"`);\n      }\n      if (actorDefinition.metadata.publisher) {\n        fsh.push(`* publisher = \"${this.escapeFSHString(actorDefinition.metadata.publisher)}\"`);\n      }\n      if (actorDefinition.metadata.contact && actorDefinition.metadata.contact.length > 0) {\n        actorDefinition.metadata.contact.forEach((contact, index) => {\n          if (contact.name) {\n            fsh.push(`* contact[${index}].name = \"${this.escapeFSHString(contact.name)}\"`);\n          }\n          if (contact.email) {\n            fsh.push(`* contact[${index}].telecom.system = #email`);\n            fsh.push(`* contact[${index}].telecom.value = \"${contact.email}\"`);\n          }\n        });\n      }\n    }\n    \n    return fsh.join('\\n');\n  }\n\n  /**\n   * Escape special characters in FSH strings\n   */\n  escapeFSHString(str) {\n    if (!str) return '';\n    return str.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n');\n  }\n\n  /**\n   * Parse FSH content back to actor definition (basic implementation)\n   */\n  parseFSH(fshContent) {\n    // This is a simplified parser - a full implementation would need a proper FSH parser\n    const lines = fshContent.split('\\n').map(line => line.trim()).filter(line => line);\n    const actorDefinition = {\n      roles: [],\n      qualifications: [],\n      specialties: [],\n      interactions: [],\n      metadata: {}\n    };\n\n    for (const line of lines) {\n      if (line.startsWith('Profile:')) {\n        actorDefinition.id = line.split(':')[1].trim();\n      } else if (line.startsWith('Id:')) {\n        actorDefinition.id = line.split(':')[1].trim();\n      } else if (line.startsWith('Title:')) {\n        actorDefinition.name = line.split(':')[1].trim().replace(/\"/g, '');\n      } else if (line.startsWith('Description:')) {\n        actorDefinition.description = line.split(':')[1].trim().replace(/\"/g, '');\n      } else if (line.includes('type = #')) {\n        actorDefinition.type = line.split('#')[1].trim();\n      }\n      // Add more parsing logic as needed\n    }\n\n    return actorDefinition;\n  }\n\n  /**\n   * Validate actor definition against schema\n   */\n  validateActorDefinition(actorDefinition) {\n    const errors = [];\n    \n    // Basic validation\n    if (!actorDefinition.id || !actorDefinition.id.match(/^[a-zA-Z][a-zA-Z0-9_-]*$/)) {\n      errors.push('ID must start with a letter and contain only letters, numbers, underscores, and hyphens');\n    }\n    \n    if (!actorDefinition.name || actorDefinition.name.trim().length === 0) {\n      errors.push('Name is required');\n    }\n    \n    if (!actorDefinition.description || actorDefinition.description.trim().length === 0) {\n      errors.push('Description is required');\n    }\n    \n    if (!actorDefinition.type) {\n      errors.push('Actor type is required');\n    }\n    \n    if (!actorDefinition.roles || actorDefinition.roles.length === 0) {\n      errors.push('At least one role is required');\n    } else {\n      actorDefinition.roles.forEach((role, index) => {\n        if (!role.code || !role.display) {\n          errors.push(`Role ${index + 1} must have both code and display name`);\n        }\n      });\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Save actor definition to staging ground as FSH\n   */\n  async saveToStagingGround(actorDefinition) {\n    try {\n      // Validate first\n      const validation = this.validateActorDefinition(actorDefinition);\n      if (!validation.isValid) {\n        throw new Error(`Validation failed: ${validation.errors.join(', ')}`);\n      }\n\n      // Generate FSH content\n      const fshContent = this.generateFSH(actorDefinition);\n      \n      // Create file path in staging ground structure\n      const filePath = `input/fsh/actors/${actorDefinition.id}.fsh`;\n      \n      // Save to staging ground\n      const success = stagingGroundService.updateFile(filePath, fshContent, {\n        type: 'actor-definition',\n        actorId: actorDefinition.id,\n        actorName: actorDefinition.name,\n        lastModified: Date.now(),\n        source: 'actor-editor'\n      });\n      \n      if (!success) {\n        throw new Error('Failed to save to staging ground');\n      }\n      \n      return {\n        success: true,\n        filePath,\n        content: fshContent\n      };\n      \n    } catch (error) {\n      console.error('Error saving actor definition:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Load actor definition from staging ground\n   */\n  getFromStagingGround(actorId) {\n    try {\n      const stagingGround = stagingGroundService.getStagingGround();\n      const filePath = `input/fsh/actors/${actorId}.fsh`;\n      \n      const file = stagingGround.files.find(f => f.path === filePath);\n      if (!file) {\n        return null;\n      }\n      \n      // Parse FSH back to actor definition\n      const actorDefinition = this.parseFSH(file.content);\n      \n      return {\n        actorDefinition,\n        metadata: file.metadata,\n        lastModified: file.timestamp\n      };\n      \n    } catch (error) {\n      console.error('Error loading actor definition from staging ground:', error);\n      return null;\n    }\n  }\n\n  /**\n   * List all actor definitions in staging ground\n   */\n  listStagedActors() {\n    try {\n      const stagingGround = stagingGroundService.getStagingGround();\n      \n      return stagingGround.files\n        .filter(file => \n          file.path.startsWith('input/fsh/actors/') && \n          file.path.endsWith('.fsh') &&\n          file.metadata?.type === 'actor-definition'\n        )\n        .map(file => ({\n          id: file.metadata?.actorId || file.path.split('/').pop().replace('.fsh', ''),\n          name: file.metadata?.actorName || 'Unknown Actor',\n          filePath: file.path,\n          lastModified: file.timestamp,\n          metadata: file.metadata\n        }))\n        .sort((a, b) => b.lastModified - a.lastModified);\n        \n    } catch (error) {\n      console.error('Error listing staged actors:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Remove actor definition from staging ground\n   */\n  removeFromStagingGround(actorId) {\n    try {\n      const filePath = `input/fsh/actors/${actorId}.fsh`;\n      return stagingGroundService.removeFile(filePath);\n    } catch (error) {\n      console.error('Error removing actor definition:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Create a new empty actor definition with defaults\n   */\n  createEmptyActorDefinition() {\n    return {\n      id: '',\n      name: '',\n      description: '',\n      type: 'person',\n      roles: [\n        {\n          code: '',\n          display: '',\n          system: 'http://snomed.info/sct'\n        }\n      ],\n      qualifications: [],\n      specialties: [],\n      location: {\n        type: 'facility',\n        description: ''\n      },\n      accessLevel: 'standard',\n      interactions: [],\n      constraints: {\n        availability: '',\n        jurisdiction: '',\n        limitations: []\n      },\n      metadata: {\n        version: '1.0.0',\n        status: 'draft',\n        publisher: '',\n        contact: [],\n        tags: []\n      }\n    };\n  }\n\n  /**\n   * Get predefined actor templates\n   */\n  getActorTemplates() {\n    return [\n      {\n        id: 'clinician-template',\n        name: 'Healthcare Clinician',\n        description: 'A qualified healthcare practitioner who provides direct patient care',\n        type: 'practitioner',\n        roles: [\n          {\n            code: '158965000',\n            display: 'Medical practitioner',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Healthcare facility or clinic'\n        },\n        accessLevel: 'standard'\n      },\n      {\n        id: 'nurse-template',\n        name: 'Registered Nurse',\n        description: 'Licensed nursing professional providing patient care and health education',\n        type: 'practitioner',\n        roles: [\n          {\n            code: '224535009',\n            display: 'Registered nurse',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Hospital ward, clinic, or community health center'\n        },\n        accessLevel: 'standard'\n      },\n      {\n        id: 'patient-template',\n        name: 'Patient',\n        description: 'Individual receiving healthcare services',\n        type: 'patient',\n        roles: [\n          {\n            code: '116154003',\n            display: 'Patient',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Any healthcare setting where patient receives care'\n        },\n        accessLevel: 'read-only'\n      },\n      {\n        id: 'admin-template',\n        name: 'Healthcare Administrator',\n        description: 'Administrative staff managing healthcare operations and data',\n        type: 'person',\n        roles: [\n          {\n            code: '394738000',\n            display: 'Other related persons',\n            system: 'http://snomed.info/sct'\n          }\n        ],\n        location: {\n          type: 'facility',\n          description: 'Administrative offices within healthcare organization'\n        },\n        accessLevel: 'administrative'\n      }\n    ];\n  }\n}\n\n// Create singleton instance\nconst actorDefinitionService = new ActorDefinitionService();\n\nexport default actorDefinitionService;","import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport actorDefinitionService from '../services/actorDefinitionService';\nimport { PageLayout, useDAKParams } from './framework';\nimport './ActorEditor.css';\n\nconst ActorEditor = () => {\n  return (\n    <PageLayout pageName=\"actor-editor\">\n      <ActorEditorContent />\n    </PageLayout>\n  );\n};\n\nconst ActorEditorContent = () => {\n  const navigate = useNavigate();\n  const { profile, repository, branch } = useDAKParams();\n  \n  // For now, we'll set editActorId to null since it's not in URL params\n  // This could be enhanced later to support URL-based actor editing\n  const editActorId = null;\n\n  // State management\n  const [actorDefinition, setActorDefinition] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [showPreview, setShowPreview] = useState(false);\n  const [fshPreview, setFshPreview] = useState('');\n  const [stagedActors, setStagedActors] = useState([]);\n  const [showActorList, setShowActorList] = useState(false);\n  const [activeTab, setActiveTab] = useState('basic');\n\n  // Initialize component\n  useEffect(() => {\n    const initializeEditor = async () => {\n      setLoading(true);\n      \n      try {\n        if (editActorId) {\n          // Load existing actor from staging ground\n          const result = actorDefinitionService.getFromStagingGround(editActorId);\n          if (result) {\n            setActorDefinition(result.actorDefinition);\n          } else {\n            // Actor not found, create new one\n            setActorDefinition(actorDefinitionService.createEmptyActorDefinition());\n          }\n        } else {\n          // Create new actor\n          setActorDefinition(actorDefinitionService.createEmptyActorDefinition());\n        }\n        \n        // Load list of staged actors\n        setStagedActors(actorDefinitionService.listStagedActors());\n        \n      } catch (error) {\n        console.error('Error initializing actor editor:', error);\n        setErrors({ general: 'Failed to initialize editor' });\n      }\n      \n      setLoading(false);\n    };\n\n    initializeEditor();\n  }, [editActorId]);\n\n  // Handle form field changes\n  const handleFieldChange = useCallback((field, value) => {\n    setActorDefinition(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    \n    // Clear field-specific errors\n    if (errors[field]) {\n      setErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n  }, [errors]);\n\n  // Handle nested field changes\n  const handleNestedFieldChange = useCallback((parentField, index, field, value) => {\n    setActorDefinition(prev => {\n      const newDefinition = { ...prev };\n      if (!newDefinition[parentField]) {\n        newDefinition[parentField] = [];\n      }\n      \n      if (!newDefinition[parentField][index]) {\n        newDefinition[parentField][index] = {};\n      }\n      \n      newDefinition[parentField][index][field] = value;\n      return newDefinition;\n    });\n  }, []);\n\n  // Add new item to array fields\n  const addArrayItem = useCallback((field, defaultItem = {}) => {\n    setActorDefinition(prev => ({\n      ...prev,\n      [field]: [...(prev[field] || []), defaultItem]\n    }));\n  }, []);\n\n  // Remove item from array fields\n  const removeArrayItem = useCallback((field, index) => {\n    setActorDefinition(prev => ({\n      ...prev,\n      [field]: prev[field].filter((_, i) => i !== index)\n    }));\n  }, []);\n\n  // Validate form\n  const validateForm = useCallback(() => {\n    if (!actorDefinition) return false;\n    \n    const validation = actorDefinitionService.validateActorDefinition(actorDefinition);\n    \n    if (!validation.isValid) {\n      const fieldErrors = {};\n      validation.errors.forEach(error => {\n        if (error.includes('ID')) fieldErrors.id = error;\n        else if (error.includes('Name')) fieldErrors.name = error;\n        else if (error.includes('Description')) fieldErrors.description = error;\n        else if (error.includes('type')) fieldErrors.type = error;\n        else if (error.includes('role')) fieldErrors.roles = error;\n        else fieldErrors.general = error;\n      });\n      setErrors(fieldErrors);\n      return false;\n    }\n    \n    setErrors({});\n    return true;\n  }, [actorDefinition]);\n\n  // Save actor definition\n  const handleSave = async () => {\n    if (!validateForm()) {\n      return;\n    }\n    \n    setSaving(true);\n    \n    try {\n      const result = await actorDefinitionService.saveToStagingGround(actorDefinition);\n      \n      if (result.success) {\n        // Refresh staged actors list\n        setStagedActors(actorDefinitionService.listStagedActors());\n        \n        // Show success message (could be a toast notification)\n        alert('Actor definition saved to staging ground successfully!');\n        \n        // Update the URL to reflect we're now editing this actor\n        if (!editActorId) {\n          navigate(`/actor-editor/${profile?.login}/${repository?.name}${branch && branch !== 'main' ? `/${branch}` : ''}`);\n        }\n      } else {\n        setErrors({ general: result.error });\n      }\n    } catch (error) {\n      console.error('Error saving actor definition:', error);\n      setErrors({ general: 'Failed to save actor definition' });\n    }\n    \n    setSaving(false);\n  };\n\n  // Generate FSH preview\n  const generatePreview = useCallback(() => {\n    if (!actorDefinition) return;\n    \n    try {\n      const fsh = actorDefinitionService.generateFSH(actorDefinition);\n      setFshPreview(fsh);\n      setShowPreview(true);\n    } catch (error) {\n      console.error('Error generating FSH preview:', error);\n      setErrors({ general: 'Failed to generate FSH preview' });\n    }\n  }, [actorDefinition]);\n\n  // Load actor template\n  const loadTemplate = (template) => {\n    setActorDefinition({\n      ...actorDefinitionService.createEmptyActorDefinition(),\n      ...template,\n      metadata: {\n        ...actorDefinitionService.createEmptyActorDefinition().metadata,\n        ...template.metadata\n      }\n    });\n    setErrors({});\n  };\n\n  // Load existing staged actor\n  const loadStagedActor = (actorId) => {\n    const result = actorDefinitionService.getFromStagingGround(actorId);\n    if (result) {\n      setActorDefinition(result.actorDefinition);\n      setErrors({});\n      setShowActorList(false);\n      \n      // Update URL\n      navigate(`/actor-editor/${profile?.login}/${repository?.name}${branch && branch !== 'main' ? `/${branch}` : ''}`);\n    }\n  };\n\n  // Delete staged actor\n  const deleteStagedActor = (actorId) => {\n    if (window.confirm(`Are you sure you want to delete the actor \"${actorId}\"?`)) {\n      const success = actorDefinitionService.removeFromStagingGround(actorId);\n      if (success) {\n        setStagedActors(actorDefinitionService.listStagedActors());\n        \n        // If we're currently editing this actor, create a new one\n        if (editActorId === actorId) {\n          setActorDefinition(actorDefinitionService.createEmptyActorDefinition());\n          navigate(`/actor-editor/${profile?.login}/${repository?.name}${branch && branch !== 'main' ? `/${branch}` : ''}`);\n        }\n      }\n    }\n  };\n\n\n\n  // Redirect if missing required context - use useEffect to avoid render issues\n  useEffect(() => {\n    if (!profile || !repository) {\n      navigate('/');\n    }\n  }, [profile, repository, navigate]);\n\n  if (!profile || !repository) {\n    return (\n      <PageLayout pageName=\"actor-editor\">\n        <div className=\"actor-editor\">\n          <div className=\"redirecting-state\">\n            <h2>Redirecting...</h2>\n            <p>Missing required context. Redirecting to home page...</p>\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  if (loading) {\n    return (\n      <PageLayout pageName=\"actor-editor\">\n        <div className=\"actor-editor loading-state\">\n          <div className=\"loading-content\">\n            <h2>Loading Actor Editor...</h2>\n            <p>Initializing editor and loading data...</p>\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  return (\n    <PageLayout pageName=\"actor-editor\">\n      <div className=\"actor-editor\">\n        <div className=\"editor-content\">\n\n        <div className=\"editor-toolbar\">\n          <div className=\"toolbar-left\">\n            <button \n              onClick={() => setShowActorList(!showActorList)}\n              className=\"toolbar-btn\"\n              title=\"Browse staged actors\"\n            >\n              📋 Staged Actors ({stagedActors.length})\n            </button>\n            <button \n              onClick={generatePreview}\n              className=\"toolbar-btn\"\n              disabled={!actorDefinition?.id}\n              title=\"Preview FSH output\"\n            >\n              👁️ Preview FSH\n            </button>\n          </div>\n          <div className=\"toolbar-right\">\n            <button \n              onClick={handleSave}\n              disabled={saving || !actorDefinition?.id}\n              className=\"toolbar-btn primary\"\n              title=\"Save to staging ground\"\n            >\n              {saving ? '💾 Saving...' : '💾 Save'}\n            </button>\n          </div>\n        </div>\n\n        {errors.general && (\n          <div className=\"error-message\">\n            <strong>Error:</strong> {errors.general}\n          </div>\n        )}\n\n        <div className=\"editor-layout\">\n          {/* Staged Actors Sidebar */}\n          {showActorList && (\n            <div className=\"actor-list-sidebar\">\n              <div className=\"sidebar-header\">\n                <h3>Staged Actors</h3>\n                <button \n                  onClick={() => setShowActorList(false)}\n                  className=\"close-btn\"\n                >\n                  ✕\n                </button>\n              </div>\n              <div className=\"sidebar-content\">\n                <div className=\"templates-section\">\n                  <h4>Templates</h4>\n                  {actorDefinitionService.getActorTemplates().map(template => (\n                    <div key={template.id} className=\"template-item\">\n                      <span className=\"template-name\">{template.name}</span>\n                      <button \n                        onClick={() => loadTemplate(template)}\n                        className=\"load-btn\"\n                      >\n                        Use\n                      </button>\n                    </div>\n                  ))}\n                </div>\n                \n                {stagedActors.length > 0 && (\n                  <div className=\"staged-actors-section\">\n                    <h4>Staged Actors</h4>\n                    {stagedActors.map(actor => (\n                      <div key={actor.id} className=\"staged-actor-item\">\n                        <div className=\"actor-info\">\n                          <span className=\"actor-name\">{actor.name}</span>\n                          <span className=\"actor-id\">{actor.id}</span>\n                          <span className=\"actor-modified\">\n                            {new Date(actor.lastModified).toLocaleDateString()}\n                          </span>\n                        </div>\n                        <div className=\"actor-actions\">\n                          <button \n                            onClick={() => loadStagedActor(actor.id)}\n                            className=\"load-btn\"\n                          >\n                            Edit\n                          </button>\n                          <button \n                            onClick={() => deleteStagedActor(actor.id)}\n                            className=\"delete-btn\"\n                          >\n                            🗑️\n                          </button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Main Editor */}\n          <div className={`main-editor ${showActorList ? 'with-sidebar' : ''}`}>\n            {actorDefinition && (\n              <>\n                <div className=\"editor-tabs\">\n                  <button \n                    className={`tab ${activeTab === 'basic' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('basic')}\n                  >\n                    Basic Info\n                  </button>\n                  <button \n                    className={`tab ${activeTab === 'roles' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('roles')}\n                  >\n                    Roles & Qualifications\n                  </button>\n                  <button \n                    className={`tab ${activeTab === 'context' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('context')}\n                  >\n                    Context & Access\n                  </button>\n                  <button \n                    className={`tab ${activeTab === 'metadata' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('metadata')}\n                  >\n                    Metadata\n                  </button>\n                </div>\n\n                <div className=\"tab-content\">\n                  {activeTab === 'basic' && (\n                    <BasicInfoTab\n                      actorDefinition={actorDefinition}\n                      errors={errors}\n                      onFieldChange={handleFieldChange}\n                    />\n                  )}\n                  \n                  {activeTab === 'roles' && (\n                    <RolesTab\n                      actorDefinition={actorDefinition}\n                      errors={errors}\n                      onNestedFieldChange={handleNestedFieldChange}\n                      onAddItem={addArrayItem}\n                      onRemoveItem={removeArrayItem}\n                    />\n                  )}\n                  \n                  {activeTab === 'context' && (\n                    <ContextTab\n                      actorDefinition={actorDefinition}\n                      errors={errors}\n                      onFieldChange={handleFieldChange}\n                      onNestedFieldChange={handleNestedFieldChange}\n                      onAddItem={addArrayItem}\n                      onRemoveItem={removeArrayItem}\n                    />\n                  )}\n                  \n                  {activeTab === 'metadata' && (\n                    <MetadataTab\n                      actorDefinition={actorDefinition}\n                      errors={errors}\n                      onFieldChange={handleFieldChange}\n                      onNestedFieldChange={handleNestedFieldChange}\n                      onAddItem={addArrayItem}\n                      onRemoveItem={removeArrayItem}\n                    />\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* FSH Preview Modal */}\n      {showPreview && (\n        <div className=\"modal-overlay\" onClick={() => setShowPreview(false)}>\n          <div className=\"modal-content\" onClick={e => e.stopPropagation()}>\n            <div className=\"modal-header\">\n              <h3>FSH Preview</h3>\n              <button \n                onClick={() => setShowPreview(false)}\n                className=\"close-btn\"\n              >\n                ✕\n              </button>\n            </div>\n            <div className=\"modal-body\">\n              <pre className=\"fsh-preview\">{fshPreview}</pre>\n            </div>\n            <div className=\"modal-footer\">\n              <button \n                onClick={() => {\n                  navigator.clipboard.writeText(fshPreview);\n                  alert('FSH copied to clipboard!');\n                }}\n                className=\"copy-btn\"\n              >\n                📋 Copy to Clipboard\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      </div>\n    </PageLayout>\n  );\n};\n\n// Basic Info Tab Component\nconst BasicInfoTab = ({ actorDefinition, errors, onFieldChange }) => (\n  <div className=\"form-section\">\n    <h3>Basic Information</h3>\n    \n    <div className=\"form-group\">\n      <label htmlFor=\"id\">Actor ID *</label>\n      <input\n        type=\"text\"\n        id=\"id\"\n        value={actorDefinition.id}\n        onChange={(e) => onFieldChange('id', e.target.value)}\n        className={errors.id ? 'error' : ''}\n        placeholder=\"e.g., primary-care-physician\"\n        pattern=\"[a-zA-Z][a-zA-Z0-9_-]*\"\n      />\n      {errors.id && <span className=\"error-text\">{errors.id}</span>}\n      <span className=\"help-text\">Unique identifier (letters, numbers, underscores, hyphens only)</span>\n    </div>\n\n    <div className=\"form-group\">\n      <label htmlFor=\"name\">Display Name *</label>\n      <input\n        type=\"text\"\n        id=\"name\"\n        value={actorDefinition.name}\n        onChange={(e) => onFieldChange('name', e.target.value)}\n        className={errors.name ? 'error' : ''}\n        placeholder=\"e.g., Primary Care Physician\"\n      />\n      {errors.name && <span className=\"error-text\">{errors.name}</span>}\n    </div>\n\n    <div className=\"form-group\">\n      <label htmlFor=\"description\">Description *</label>\n      <textarea\n        id=\"description\"\n        value={actorDefinition.description}\n        onChange={(e) => onFieldChange('description', e.target.value)}\n        className={errors.description ? 'error' : ''}\n        placeholder=\"Detailed description of the actor's role and responsibilities...\"\n        rows={4}\n      />\n      {errors.description && <span className=\"error-text\">{errors.description}</span>}\n    </div>\n\n    <div className=\"form-group\">\n      <label htmlFor=\"type\">Actor Type *</label>\n      <select\n        id=\"type\"\n        value={actorDefinition.type}\n        onChange={(e) => onFieldChange('type', e.target.value)}\n        className={errors.type ? 'error' : ''}\n      >\n        <option value=\"person\">Person</option>\n        <option value=\"practitioner\">Practitioner</option>\n        <option value=\"patient\">Patient</option>\n        <option value=\"relatedperson\">Related Person</option>\n        <option value=\"organization\">Organization</option>\n        <option value=\"device\">Device</option>\n        <option value=\"system\">System</option>\n      </select>\n      {errors.type && <span className=\"error-text\">{errors.type}</span>}\n    </div>\n  </div>\n);\n\n// Roles Tab Component\nconst RolesTab = ({ actorDefinition, errors, onNestedFieldChange, onAddItem, onRemoveItem }) => (\n  <div className=\"form-section\">\n    <h3>Roles & Qualifications</h3>\n    \n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Roles *</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('roles', { code: '', display: '', system: 'http://snomed.info/sct' })}\n          className=\"add-btn\"\n        >\n          + Add Role\n        </button>\n      </div>\n      {errors.roles && <span className=\"error-text\">{errors.roles}</span>}\n      \n      {actorDefinition.roles && actorDefinition.roles.map((role, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Role {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => onRemoveItem('roles', index)}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label>Code</label>\n              <input\n                type=\"text\"\n                value={role.code}\n                onChange={(e) => onNestedFieldChange('roles', index, 'code', e.target.value)}\n                placeholder=\"Role code\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Display Name</label>\n              <input\n                type=\"text\"\n                value={role.display}\n                onChange={(e) => onNestedFieldChange('roles', index, 'display', e.target.value)}\n                placeholder=\"Human-readable role name\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label>Code System</label>\n            <input\n              type=\"text\"\n              value={role.system || ''}\n              onChange={(e) => onNestedFieldChange('roles', index, 'system', e.target.value)}\n              placeholder=\"http://snomed.info/sct\"\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Qualifications</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('qualifications', { code: '', display: '', issuer: '' })}\n          className=\"add-btn\"\n        >\n          + Add Qualification\n        </button>\n      </div>\n      \n      {actorDefinition.qualifications && actorDefinition.qualifications.map((qual, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Qualification {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => onRemoveItem('qualifications', index)}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label>Code</label>\n              <input\n                type=\"text\"\n                value={qual.code}\n                onChange={(e) => onNestedFieldChange('qualifications', index, 'code', e.target.value)}\n                placeholder=\"Qualification code\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Display Name</label>\n              <input\n                type=\"text\"\n                value={qual.display}\n                onChange={(e) => onNestedFieldChange('qualifications', index, 'display', e.target.value)}\n                placeholder=\"Qualification name\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label>Issuing Organization</label>\n            <input\n              type=\"text\"\n              value={qual.issuer || ''}\n              onChange={(e) => onNestedFieldChange('qualifications', index, 'issuer', e.target.value)}\n              placeholder=\"Organization that issued this qualification\"\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Specialties</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('specialties', { code: '', display: '', system: 'http://snomed.info/sct' })}\n          className=\"add-btn\"\n        >\n          + Add Specialty\n        </button>\n      </div>\n      \n      {actorDefinition.specialties && actorDefinition.specialties.map((specialty, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Specialty {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => onRemoveItem('specialties', index)}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label>Code</label>\n              <input\n                type=\"text\"\n                value={specialty.code}\n                onChange={(e) => onNestedFieldChange('specialties', index, 'code', e.target.value)}\n                placeholder=\"Specialty code\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Display Name</label>\n              <input\n                type=\"text\"\n                value={specialty.display}\n                onChange={(e) => onNestedFieldChange('specialties', index, 'display', e.target.value)}\n                placeholder=\"Specialty name\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label>Code System</label>\n            <input\n              type=\"text\"\n              value={specialty.system || ''}\n              onChange={(e) => onNestedFieldChange('specialties', index, 'system', e.target.value)}\n              placeholder=\"http://snomed.info/sct\"\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\n// Context Tab Component\nconst ContextTab = ({ actorDefinition, errors, onFieldChange, onNestedFieldChange, onAddItem, onRemoveItem }) => (\n  <div className=\"form-section\">\n    <h3>Context & Access</h3>\n    \n    <div className=\"subsection\">\n      <h4>Typical Location</h4>\n      <div className=\"form-row\">\n        <div className=\"form-group\">\n          <label>Location Type</label>\n          <select\n            value={actorDefinition.location?.type || ''}\n            onChange={(e) => onFieldChange('location', { ...actorDefinition.location, type: e.target.value })}\n          >\n            <option value=\"facility\">Healthcare Facility</option>\n            <option value=\"community\">Community</option>\n            <option value=\"home\">Home</option>\n            <option value=\"mobile\">Mobile</option>\n            <option value=\"virtual\">Virtual/Remote</option>\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label>Description</label>\n          <input\n            type=\"text\"\n            value={actorDefinition.location?.description || ''}\n            onChange={(e) => onFieldChange('location', { ...actorDefinition.location, description: e.target.value })}\n            placeholder=\"Describe the typical location\"\n          />\n        </div>\n      </div>\n    </div>\n\n    <div className=\"subsection\">\n      <h4>System Access Level</h4>\n      <div className=\"form-group\">\n        <select\n          value={actorDefinition.accessLevel || 'standard'}\n          onChange={(e) => onFieldChange('accessLevel', e.target.value)}\n        >\n          <option value=\"read-only\">Read-Only</option>\n          <option value=\"standard\">Standard</option>\n          <option value=\"administrative\">Administrative</option>\n          <option value=\"system\">System</option>\n        </select>\n      </div>\n    </div>\n\n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Key Interactions</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('interactions', { type: 'reads', target: '', description: '' })}\n          className=\"add-btn\"\n        >\n          + Add Interaction\n        </button>\n      </div>\n      \n      {actorDefinition.interactions && actorDefinition.interactions.map((interaction, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Interaction {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => onRemoveItem('interactions', index)}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label>Type</label>\n              <select\n                value={interaction.type}\n                onChange={(e) => onNestedFieldChange('interactions', index, 'type', e.target.value)}\n              >\n                <option value=\"creates\">Creates</option>\n                <option value=\"reads\">Reads</option>\n                <option value=\"updates\">Updates</option>\n                <option value=\"deletes\">Deletes</option>\n                <option value=\"approves\">Approves</option>\n                <option value=\"reviews\">Reviews</option>\n                <option value=\"monitors\">Monitors</option>\n              </select>\n            </div>\n            <div className=\"form-group\">\n              <label>Target</label>\n              <input\n                type=\"text\"\n                value={interaction.target}\n                onChange={(e) => onNestedFieldChange('interactions', index, 'target', e.target.value)}\n                placeholder=\"What the actor interacts with\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label>Description</label>\n            <input\n              type=\"text\"\n              value={interaction.description || ''}\n              onChange={(e) => onNestedFieldChange('interactions', index, 'description', e.target.value)}\n              placeholder=\"Describe this interaction\"\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\n// Metadata Tab Component\nconst MetadataTab = ({ actorDefinition, errors, onFieldChange, onNestedFieldChange, onAddItem, onRemoveItem }) => (\n  <div className=\"form-section\">\n    <h3>Metadata</h3>\n    \n    <div className=\"form-row\">\n      <div className=\"form-group\">\n        <label>Version</label>\n        <input\n          type=\"text\"\n          value={actorDefinition.metadata?.version || ''}\n          onChange={(e) => onFieldChange('metadata', { ...actorDefinition.metadata, version: e.target.value })}\n          placeholder=\"1.0.0\"\n        />\n      </div>\n      <div className=\"form-group\">\n        <label>Status</label>\n        <select\n          value={actorDefinition.metadata?.status || 'draft'}\n          onChange={(e) => onFieldChange('metadata', { ...actorDefinition.metadata, status: e.target.value })}\n        >\n          <option value=\"draft\">Draft</option>\n          <option value=\"active\">Active</option>\n          <option value=\"retired\">Retired</option>\n        </select>\n      </div>\n    </div>\n\n    <div className=\"form-group\">\n      <label>Publisher</label>\n      <input\n        type=\"text\"\n        value={actorDefinition.metadata?.publisher || ''}\n        onChange={(e) => onFieldChange('metadata', { ...actorDefinition.metadata, publisher: e.target.value })}\n        placeholder=\"Organization or person responsible\"\n      />\n    </div>\n\n    <div className=\"subsection\">\n      <div className=\"subsection-header\">\n        <h4>Contact Information</h4>\n        <button \n          type=\"button\"\n          onClick={() => onAddItem('metadata.contact', { name: '', email: '' })}\n          className=\"add-btn\"\n        >\n          + Add Contact\n        </button>\n      </div>\n      \n      {actorDefinition.metadata?.contact && actorDefinition.metadata.contact.map((contact, index) => (\n        <div key={index} className=\"array-item\">\n          <div className=\"array-item-header\">\n            <span>Contact {index + 1}</span>\n            <button \n              type=\"button\"\n              onClick={() => {\n                const newContacts = [...(actorDefinition.metadata.contact || [])];\n                newContacts.splice(index, 1);\n                onFieldChange('metadata', { ...actorDefinition.metadata, contact: newContacts });\n              }}\n              className=\"remove-btn\"\n            >\n              Remove\n            </button>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label>Name</label>\n              <input\n                type=\"text\"\n                value={contact.name || ''}\n                onChange={(e) => {\n                  const newContacts = [...(actorDefinition.metadata.contact || [])];\n                  newContacts[index] = { ...contact, name: e.target.value };\n                  onFieldChange('metadata', { ...actorDefinition.metadata, contact: newContacts });\n                }}\n                placeholder=\"Contact name\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Email</label>\n              <input\n                type=\"email\"\n                value={contact.email || ''}\n                onChange={(e) => {\n                  const newContacts = [...(actorDefinition.metadata.contact || [])];\n                  newContacts[index] = { ...contact, email: e.target.value };\n                  onFieldChange('metadata', { ...actorDefinition.metadata, contact: newContacts });\n                }}\n                placeholder=\"contact@example.com\"\n              />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"form-group\">\n      <label>Tags</label>\n      <input\n        type=\"text\"\n        value={actorDefinition.metadata?.tags?.join(', ') || ''}\n        onChange={(e) => onFieldChange('metadata', { \n          ...actorDefinition.metadata, \n          tags: e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag) \n        })}\n        placeholder=\"Enter tags separated by commas\"\n      />\n      <span className=\"help-text\">Comma-separated tags for categorization</span>\n    </div>\n  </div>\n);\n\nexport default ActorEditor;"],"names":["constructor","this","actorSchema","loadSchema","response","fetch","json","error","console","warn","generateFSH","actorDefinition","_actorDefinition$meta","id","Error","fsh","push","escapeFSHString","name","description","metadata","status","type","roles","length","forEach","role","index","system","code","display","qualifications","qual","issuer","specialties","specialty","location","accessLevel","interactions","interaction","target","version","publisher","contact","email","join","str","replace","parseFSH","fshContent","lines","split","map","line","trim","filter","startsWith","includes","validateActorDefinition","errors","match","isValid","saveToStagingGround","validation","filePath","stagingGroundService","updateFile","actorId","actorName","lastModified","Date","now","source","success","content","message","getFromStagingGround","stagingGround","getStagingGround","file","files","find","f","path","timestamp","listStagedActors","_file$metadata","endsWith","_file$metadata2","_file$metadata3","pop","sort","a","b","removeFromStagingGround","removeFile","createEmptyActorDefinition","constraints","availability","jurisdiction","limitations","tags","getActorTemplates","ActorEditorContent","navigate","useNavigate","profile","repository","branch","useDAKParams","editActorId","setActorDefinition","useState","loading","setLoading","saving","setSaving","setErrors","showPreview","setShowPreview","fshPreview","setFshPreview","stagedActors","setStagedActors","showActorList","setShowActorList","activeTab","setActiveTab","useEffect","async","actorDefinitionService","general","initializeEditor","handleFieldChange","useCallback","field","value","prev","newErrors","handleNestedFieldChange","parentField","newDefinition","addArrayItem","defaultItem","arguments","undefined","removeArrayItem","_","i","validateForm","fieldErrors","generatePreview","_jsx","PageLayout","pageName","children","className","_jsxs","onClick","title","disabled","result","alert","login","template","loadTemplate","actor","toLocaleDateString","loadStagedActor","deleteStagedActor","window","confirm","_Fragment","BasicInfoTab","onFieldChange","RolesTab","onNestedFieldChange","onAddItem","onRemoveItem","ContextTab","MetadataTab","e","stopPropagation","navigator","clipboard","writeText","_ref","htmlFor","onChange","placeholder","pattern","rows","_ref2","_ref3","_actorDefinition$loca","_actorDefinition$loca2","_ref4","_actorDefinition$meta2","_actorDefinition$meta3","_actorDefinition$meta4","_actorDefinition$meta5","_actorDefinition$meta6","newContacts","splice","tag","ActorEditor"],"sourceRoot":""}