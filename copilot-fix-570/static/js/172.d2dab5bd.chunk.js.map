{"version":3,"file":"static/js/172.d2dab5bd.chunk.js","mappings":"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","sources":["components/BranchListingPage.js","components/PATLogin.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { PageLayout } from './framework';\nimport PATLogin from './PATLogin';\nimport useThemeImage from '../hooks/useThemeImage';\nimport './BranchListingPage.css';\n\nconst BranchListingPage = () => {\n    const [pullRequests, setPullRequests] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [prPage, setPrPage] = useState(1);\n    const [prSearchTerm, setPrSearchTerm] = useState('');\n    const [prSortBy, setPrSortBy] = useState('updated');\n    const [prSortOrder, setPrSortOrder] = useState('desc');\n    const [deploymentStatuses, setDeploymentStatuses] = useState({});\n    const [prFilter, setPrFilter] = useState('open');\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const [githubToken, setGithubToken] = useState(null);\n    const [prComments, setPrComments] = useState({});\n    const [loadingComments] = useState(false); // Removed setLoadingComments as it's not used\n    const [commentInputs, setCommentInputs] = useState({});\n    const [submittingComments, setSubmittingComments] = useState({});\n    const [expandedDiscussions, setExpandedDiscussions] = useState({});\n    const [discussionSummaries, setDiscussionSummaries] = useState({});\n    const [loadingSummaries, setLoadingSummaries] = useState(false);\n\n    const ITEMS_PER_PAGE = 10;\n\n    // Theme-aware image paths\n    const mascotImage = useThemeImage('sgex-mascot.png');\n\n    // GitHub authentication functions\n    const handleAuthSuccess = (token) => {\n        setGithubToken(token);\n        setIsAuthenticated(true);\n        sessionStorage.setItem('github_token', token);\n    };\n\n    // Function to fetch PR comments summary\n    const fetchPRCommentsSummary = async (prNumber) => {\n        try {\n            const headers = {\n                'Accept': 'application/vnd.github.v3+json'\n            };\n            \n            // Add auth header if available for better rate limits\n            if (githubToken) {\n                headers['Authorization'] = `token ${githubToken}`;\n            }\n            \n            const response = await fetch(\n                `https://api.github.com/repos/litlfred/sgex/issues/${prNumber}/comments`,\n                { headers }\n            );\n            \n            if (!response.ok) {\n                console.warn(`Failed to fetch comments for PR ${prNumber}: ${response.status}`);\n                return { count: 0, lastComment: null, error: true };\n            }\n            \n            const comments = await response.json();\n            if (comments.length === 0) {\n                return { count: 0, lastComment: null };\n            }\n            \n            const lastComment = comments[comments.length - 1];\n            return {\n                count: comments.length,\n                lastComment: {\n                    author: lastComment.user.login,\n                    created_at: new Date(lastComment.created_at),\n                    avatar_url: lastComment.user.avatar_url\n                }\n            };\n        } catch (error) {\n            console.warn(`Error fetching comment summary for PR ${prNumber}:`, error);\n            return { count: 0, lastComment: null, error: true };\n        }\n    };\n\n    // Function to fetch all PR comments (for expanded view)\n    const fetchAllPRComments = async (prNumber) => {\n        try {\n            const headers = {\n                'Accept': 'application/vnd.github.v3+json'\n            };\n            \n            // Add auth header if available for better rate limits\n            if (githubToken) {\n                headers['Authorization'] = `token ${githubToken}`;\n            }\n            \n            const response = await fetch(\n                `https://api.github.com/repos/litlfred/sgex/issues/${prNumber}/comments`,\n                { headers }\n            );\n            \n            if (!response.ok) {\n                console.warn(`Failed to fetch comments for PR ${prNumber}: ${response.status}`);\n                return [];\n            }\n            \n            const comments = await response.json();\n            return comments.map(comment => ({\n                id: comment.id,\n                author: comment.user.login,\n                body: comment.body,\n                created_at: new Date(comment.created_at).toLocaleDateString(),\n                avatar_url: comment.user.avatar_url\n            }));\n        } catch (error) {\n            console.warn(`Error fetching all comments for PR ${prNumber}:`, error);\n            return [];\n        }\n    };\n\n    // Function to load discussion summaries for visible PRs\n    const loadDiscussionSummaries = useCallback(async (prs) => {\n        if (prs.length === 0) return;\n        \n        setLoadingSummaries(true);\n        const summaries = {};\n        \n        for (const pr of prs) {\n            summaries[pr.number] = await fetchPRCommentsSummary(pr.number);\n        }\n        \n        setDiscussionSummaries(summaries);\n        setLoadingSummaries(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [githubToken]);\n\n    // Function to toggle discussion expansion\n    const toggleDiscussion = async (prNumber) => {\n        const isExpanded = expandedDiscussions[prNumber];\n        \n        if (!isExpanded) {\n            // Load all comments when expanding\n            const comments = await fetchAllPRComments(prNumber);\n            setPrComments(prev => ({ ...prev, [prNumber]: comments }));\n        }\n        \n        setExpandedDiscussions(prev => ({\n            ...prev,\n            [prNumber]: !isExpanded\n        }));\n    };\n\n    // Function to get discussion summary text\n    const getDiscussionSummaryText = (prNumber) => {\n        const summary = discussionSummaries[prNumber];\n        \n        if (loadingSummaries) {\n            return \"Loading discussion...\";\n        }\n        \n        if (!summary) {\n            return \"No comments yet\";\n        }\n        \n        if (summary.error) {\n            return \"Unable to load comments\";\n        }\n        \n        if (summary.count === 0) {\n            return \"No comments yet\";\n        }\n        \n        const { count, lastComment } = summary;\n        const timeAgo = lastComment ? getTimeAgo(lastComment.created_at) : '';\n        \n        return `${count} comment${count > 1 ? 's' : ''}, last by ${lastComment.author} ${timeAgo}`;\n    };\n\n    // Helper function to get relative time\n    const getTimeAgo = (date) => {\n        const now = new Date();\n        const diffMs = now - date;\n        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n        \n        if (diffDays === 0) return 'today';\n        if (diffDays === 1) return '1 day ago';\n        if (diffDays < 7) return `${diffDays} days ago`;\n        if (diffDays < 30) return `${Math.floor(diffDays / 7)} week${Math.floor(diffDays / 7) > 1 ? 's' : ''} ago`;\n        return `${Math.floor(diffDays / 30)} month${Math.floor(diffDays / 30) > 1 ? 's' : ''} ago`;\n    };\n\n    // Function to submit a comment\n    const submitComment = async (prNumber, commentText) => {\n        if (!githubToken || !commentText.trim()) return false;\n        \n        setSubmittingComments(prev => ({ ...prev, [prNumber]: true }));\n        \n        try {\n            const response = await fetch(\n                `https://api.github.com/repos/litlfred/sgex/issues/${prNumber}/comments`,\n                {\n                    method: 'POST',\n                    headers: {\n                        'Authorization': `token ${githubToken}`,\n                        'Accept': 'application/vnd.github.v3+json',\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        body: commentText\n                    })\n                }\n            );\n            \n            if (!response.ok) {\n                throw new Error(`Failed to submit comment: ${response.status}`);\n            }\n            \n            setCommentInputs(prev => ({ ...prev, [prNumber]: '' }));\n            \n            // Refresh both full comments (if expanded) and summary\n            if (expandedDiscussions[prNumber]) {\n                const updatedComments = await fetchAllPRComments(prNumber);\n                setPrComments(prev => ({ ...prev, [prNumber]: updatedComments }));\n            }\n            \n            // Refresh the discussion summary\n            const updatedSummary = await fetchPRCommentsSummary(prNumber);\n            setDiscussionSummaries(prev => ({ ...prev, [prNumber]: updatedSummary }));\n            \n            return true;\n        } catch (error) {\n            console.error(`Error submitting comment for PR ${prNumber}:`, error);\n            return false;\n        } finally {\n            setSubmittingComments(prev => ({ ...prev, [prNumber]: false }));\n        }\n    };\n\n    // Function to check deployment status for a branch\n    const checkDeploymentStatus = async (safeBranchName) => {\n        try {\n            const response = await fetch(\n                `https://api.github.com/repos/litlfred/sgex/actions/workflows/deploy.yml/runs?branch=${safeBranchName}&per_page=1`,\n                {\n                    headers: githubToken ? {\n                        'Authorization': `token ${githubToken}`,\n                        'Accept': 'application/vnd.github.v3+json'\n                    } : {\n                        'Accept': 'application/vnd.github.v3+json'\n                    }\n                }\n            );\n            \n            if (!response.ok) {\n                throw new Error(`Failed to fetch deployment status: ${response.status}`);\n            }\n            \n            const data = await response.json();\n            if (data.workflow_runs && data.workflow_runs.length > 0) {\n                const latestRun = data.workflow_runs[0];\n                return {\n                    status: latestRun.status,\n                    conclusion: latestRun.conclusion,\n                    html_url: latestRun.html_url,\n                    created_at: latestRun.created_at\n                };\n            }\n            \n            return { status: 'unknown', conclusion: null };\n        } catch (error) {\n            console.error(`Error checking deployment status for ${safeBranchName}:`, error);\n            return { status: 'error', conclusion: 'error' };\n        }\n    };\n\n    // Function to update deployment statuses for visible PRs\n    const updateDeploymentStatuses = useCallback(async (prs) => {\n        if (prs.length === 0) return;\n        \n        const statuses = {};\n        for (const pr of prs) {\n            statuses[pr.safeBranchName] = await checkDeploymentStatus(pr.safeBranchName);\n        }\n        \n        setDeploymentStatuses(prev => ({ ...prev, ...statuses }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [githubToken]);\n\n    // Function to get deployment status display info\n    const getDeploymentStatusInfo = (safeBranchName) => {\n        const status = deploymentStatuses[safeBranchName];\n        if (!status) return { text: 'Checking...', class: 'unknown' };\n        \n        if (status.status === 'completed' && status.conclusion === 'success') {\n            return { text: '✅ Deployed', class: 'success' };\n        } else if (status.status === 'completed' && status.conclusion === 'failure') {\n            return { text: '❌ Failed', class: 'failed' };\n        } else if (status.status === 'in_progress') {\n            return { text: '🔄 Deploying', class: 'in-progress' };\n        } else if (status.status === 'queued') {\n            return { text: '⏳ Queued', class: 'queued' };\n        } else if (status.status === 'error') {\n            return { text: '⚠️ Error', class: 'error' };\n        } else {\n            return { text: '❓ Unknown', class: 'unknown' };\n        }\n    };\n\n    // Sorting functions\n    const sortPRs = (prs, sortBy, sortOrder = 'desc') => {\n        return [...prs].sort((a, b) => {\n            let comparison = 0;\n            switch (sortBy) {\n                case 'number':\n                    comparison = b.number - a.number;\n                    break;\n                case 'alphabetical':\n                    comparison = a.title.localeCompare(b.title);\n                    break;\n                case 'updated':\n                default:\n                    const dateA = new Date(a.updatedAt);\n                    const dateB = new Date(b.updatedAt);\n                    comparison = dateB - dateA;\n                    break;\n            }\n            \n            // Reverse comparison for ascending order\n            return sortOrder === 'asc' ? -comparison : comparison;\n        });\n    };\n\n    // Check for existing authentication on component mount\n    useEffect(() => {\n        const token = sessionStorage.getItem('github_token');\n        if (token) {\n            setGithubToken(token);\n            setIsAuthenticated(true);\n        }\n    }, []);\n\n    // Fetch data\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                setLoading(true);\n                \n                const owner = 'litlfred';\n                const repo = 'sgex';\n                \n                const prState = prFilter === 'all' ? 'all' : prFilter;\n                const prResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/pulls?state=${prState}&sort=updated&per_page=100`);\n                if (!prResponse.ok) {\n                    throw new Error(`Failed to fetch pull requests: ${prResponse.status}`);\n                }\n                const prData = await prResponse.json();\n                \n                const formattedPRs = prData.map(pr => {\n                    const safeBranchName = pr.head.ref.replace(/\\//g, '-');\n                    return {\n                        id: pr.id,\n                        number: pr.number,\n                        title: pr.title,\n                        state: pr.state,\n                        author: pr.user.login,\n                        branchName: pr.head.ref,\n                        safeBranchName: safeBranchName,\n                        url: `./${safeBranchName}/index.html`,\n                        prUrl: pr.html_url,\n                        updatedAt: new Date(pr.updated_at).toLocaleDateString(),\n                        createdAt: new Date(pr.created_at).toLocaleDateString()\n                    };\n                });\n                \n                setPullRequests(formattedPRs);\n                \n                // Always try to load discussion summaries\n                await loadDiscussionSummaries(formattedPRs.slice(0, ITEMS_PER_PAGE));\n            } catch (err) {\n                console.error('Error fetching data:', err);\n                setError(err.message);\n                \n                // Fallback mock data\n                if (err.message.includes('Failed to fetch')) {\n                    console.log('Using fallback mock data...');\n                    const mockPRs = [\n                        {\n                            id: 1,\n                            number: 460,\n                            title: 'Improve multi-page selector landing page for GitHub deployment',\n                            state: 'open',\n                            author: 'copilot',\n                            branchName: 'copilot/fix-459',\n                            safeBranchName: 'copilot-fix-459',\n                            url: './sgex/copilot-fix-459/index.html',\n                            prUrl: 'https://github.com/litlfred/sgex/pull/460',\n                            updatedAt: new Date().toLocaleDateString(),\n                            createdAt: new Date(Date.now() - 86400000).toLocaleDateString()\n                        },\n                        {\n                            id: 2,\n                            number: 459,\n                            title: 'Add enhanced PR preview functionality',\n                            state: 'open',\n                            author: 'developer',\n                            branchName: 'feature/pr-preview',\n                            safeBranchName: 'feature-pr-preview',\n                            url: './sgex/feature-pr-preview/index.html',\n                            prUrl: 'https://github.com/litlfred/sgex/pull/459',\n                            updatedAt: new Date(Date.now() - 172800000).toLocaleDateString(),\n                            createdAt: new Date(Date.now() - 345600000).toLocaleDateString()\n                        }\n                    ];\n                    setPullRequests(mockPRs);\n                    setError(null);\n                }\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, [prFilter, githubToken, loadDiscussionSummaries]);\n\n    // Poll deployment statuses every 7 seconds for visible PRs\n    useEffect(() => {\n        if (pullRequests.length === 0) return;\n        \n        const filtered = pullRequests.filter(pr => \n            pr.title.toLowerCase().includes(prSearchTerm.toLowerCase()) ||\n            pr.author.toLowerCase().includes(prSearchTerm.toLowerCase()) ||\n            pr.branchName.toLowerCase().includes(prSearchTerm.toLowerCase())\n        );\n        const sorted = sortPRs(filtered, prSortBy, prSortOrder);\n        const paginated = sorted.slice((prPage - 1) * ITEMS_PER_PAGE, prPage * ITEMS_PER_PAGE);\n        \n        // Initial status check\n        updateDeploymentStatuses(paginated);\n        \n        // Set up polling every 7 seconds\n        const interval = setInterval(() => {\n            updateDeploymentStatuses(paginated);\n        }, 7000);\n        \n        return () => clearInterval(interval);\n    }, [pullRequests, prSearchTerm, prSortBy, prSortOrder, prPage, updateDeploymentStatuses]);\n\n    // Load comments when pagination changes\n    useEffect(() => {\n        if (pullRequests.length > 0) {\n            const filtered = pullRequests.filter(pr => \n                pr.title.toLowerCase().includes(prSearchTerm.toLowerCase()) ||\n                pr.author.toLowerCase().includes(prSearchTerm.toLowerCase()) ||\n                pr.branchName.toLowerCase().includes(prSearchTerm.toLowerCase())\n            );\n            const sorted = sortPRs(filtered, prSortBy, prSortOrder);\n            const paginated = sorted.slice((prPage - 1) * ITEMS_PER_PAGE, prPage * ITEMS_PER_PAGE);\n            loadDiscussionSummaries(paginated);\n        }\n    }, [prPage, prSearchTerm, prSortBy, prSortOrder, pullRequests, loadDiscussionSummaries]);\n\n    // Filter and sort PRs\n    const filteredPRs = pullRequests.filter(pr => \n        pr.title.toLowerCase().includes(prSearchTerm.toLowerCase()) ||\n        pr.author.toLowerCase().includes(prSearchTerm.toLowerCase()) ||\n        pr.branchName.toLowerCase().includes(prSearchTerm.toLowerCase())\n    );\n    const sortedPRs = sortPRs(filteredPRs, prSortBy, prSortOrder);\n    const paginatedPRs = sortedPRs.slice((prPage - 1) * ITEMS_PER_PAGE, prPage * ITEMS_PER_PAGE);\n    const totalPRPages = Math.ceil(sortedPRs.length / ITEMS_PER_PAGE);\n\n    if (loading) {\n        return (\n            <PageLayout pageName=\"branch-listing-loading\" showBreadcrumbs={false}>\n                <div className=\"branch-listing-content\">\n                    <div className=\"branch-listing-header\">\n                        <h1><img src={mascotImage} alt=\"SGEX Icon\" className=\"sgex-icon\" /> SGEX</h1>\n                        <p className=\"subtitle\">a collaborative workbench for WHO SMART Guidelines</p>\n                        <div className=\"loading\">Loading previews...</div>\n                    </div>\n                </div>\n            </PageLayout>\n        );\n    }\n\n    if (error) {\n        return (\n            <PageLayout pageName=\"branch-listing-error\" showBreadcrumbs={false}>\n                <div className=\"branch-listing-content\">\n                    <div className=\"branch-listing-header\">\n                        <h1><img src={mascotImage} alt=\"SGEX Icon\" className=\"sgex-icon\" /> SGEX</h1>\n                        <p className=\"subtitle\">a collaborative workbench for WHO SMART Guidelines</p>\n                        <div className=\"error\">\n                            <p>Failed to load previews: {error}</p>\n                            <p>Please try refreshing the page or check back later.</p>\n                        </div>\n                    </div>\n                </div>\n            </PageLayout>\n        );\n    }\n\n    return (\n        <PageLayout pageName=\"branch-listing\" showBreadcrumbs={false}>\n            <div className=\"branch-listing-content\">\n                <header className=\"branch-listing-header\">\n                    <h1><img src={mascotImage} alt=\"SGEX Icon\" className=\"sgex-icon\" /> SGEX</h1>\n                    <p className=\"subtitle\">a collaborative workbench for WHO SMART Guidelines</p>\n                    \n                    <div className=\"prominent-info\">\n                        <p className=\"info-text\">\n                            🐾 This landing page lists all available previews. \n                            Each branch and PR is automatically deployed to its own preview environment.\n                        </p>\n                    </div>\n                </header>\n\n                <div className=\"action-cards\">\n                    <div className=\"action-card main-site-card\">\n                        <a \n                            href=\"https://litlfred.github.io/sgex/main\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"card-link\"\n                        >\n                            <img src={mascotImage} alt=\"SGEX Mascot\" className=\"card-icon\" />\n                            <h3>View Main Site</h3>\n                            <p>Access the main SGEX workbench</p>\n                        </a>\n                    </div>\n                    \n                    {!isAuthenticated && (\n                        <div className=\"action-card login-card\">\n                            <div className=\"card-content\">\n                                <div className=\"login-icon\">🔐</div>\n                                <h3>GitHub Login</h3>\n                                <p>Login to view and add comments</p>\n                                <PATLogin onAuthSuccess={handleAuthSuccess} />\n                            </div>\n                        </div>\n                    )}\n                </div>\n\n                <div className=\"preview-tabs\">\n                    <button className=\"tab-button active\">\n                        🔄 Pull Request Previews ({sortedPRs.length})\n                    </button>\n                </div>\n\n                <div className=\"pr-section\">\n                    <div className=\"pr-controls\">\n                        <div className=\"pr-filter-section\">\n                            <label htmlFor=\"pr-filter\">Filter PRs:</label>\n                            <select\n                                id=\"pr-filter\"\n                                value={prFilter}\n                                onChange={(e) => {\n                                    setPrFilter(e.target.value);\n                                    setPrPage(1);\n                                }}\n                                className=\"filter-select\"\n                            >\n                                <option value=\"open\">Open PRs Only</option>\n                                <option value=\"closed\">Closed PRs Only</option>\n                                <option value=\"all\">All PRs</option>\n                            </select>\n                        </div>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search pull requests by title, author, or branch name...\"\n                            value={prSearchTerm}\n                            onChange={(e) => {\n                                setPrSearchTerm(e.target.value);\n                                setPrPage(1);\n                            }}\n                            className=\"pr-search\"\n                        />\n                        <select\n                            value={prSortBy}\n                            onChange={(e) => {\n                                setPrSortBy(e.target.value);\n                                setPrPage(1);\n                            }}\n                            className=\"sort-select\"\n                        >\n                            <option value=\"updated\">Sort by Recent Updates</option>\n                            <option value=\"number\">Sort by PR Number</option>\n                            <option value=\"alphabetical\">Sort Alphabetically</option>\n                        </select>\n                        <select\n                            value={prSortOrder}\n                            onChange={(e) => {\n                                setPrSortOrder(e.target.value);\n                                setPrPage(1);\n                            }}\n                            className=\"sort-select\"\n                        >\n                            <option value=\"desc\">Descending</option>\n                            <option value=\"asc\">Ascending</option>\n                        </select>\n                    </div>\n\n                    <div className=\"pr-cards\">\n                        {paginatedPRs.length === 0 ? (\n                            <div className=\"no-items\">\n                                {prSearchTerm ? (\n                                    <p>No pull requests match your search \"{prSearchTerm}\".</p>\n                                ) : (\n                                    <p>No pull request previews available at the moment.</p>\n                                )}\n                            </div>\n                        ) : (\n                            paginatedPRs.map((pr) => (\n                                <div key={pr.id} className=\"preview-card pr-card\">\n                                    <div className=\"card-header\">\n                                        <h3 className=\"item-name\">#{pr.number}: {pr.title}</h3>\n                                        <div className=\"card-badges\">\n                                            <span className={`state-badge ${pr.state}`}>\n                                                {pr.state === 'open' ? '🟢' : '🔴'} {pr.state}\n                                            </span>\n                                            <span className={`deployment-status ${getDeploymentStatusInfo(pr.safeBranchName).class}`}>\n                                                {getDeploymentStatusInfo(pr.safeBranchName).text}\n                                            </span>\n                                        </div>\n                                    </div>\n                                    \n                                    <div className=\"card-body\">\n                                        <p className=\"pr-meta\">\n                                            <strong>Branch:</strong> {pr.branchName} • <strong>Author:</strong> {pr.author}\n                                        </p>\n                                        <p className=\"item-date\">\n                                            Created: {pr.createdAt} • Updated: {pr.updatedAt}\n                                        </p>\n                                        \n                                        {/* Discussion Summary Status Bar - Always show */}\n                                        <div \n                                            className=\"discussion-summary-bar\"\n                                            onClick={() => toggleDiscussion(pr.number)}\n                                        >\n                                            <div className=\"discussion-summary-text\">\n                                                <span className=\"discussion-summary-icon\">💬</span>\n                                                {getDiscussionSummaryText(pr.number)}\n                                            </div>\n                                            <span className={`discussion-expand-icon ${expandedDiscussions[pr.number] ? 'expanded' : ''}`}>\n                                                ▶\n                                            </span>\n                                        </div>\n\n                                        {/* Expanded Discussion Section */}\n                                        {expandedDiscussions[pr.number] && (\n                                            <div className=\"discussion-expanded-section\">\n                                                <div className=\"discussion-header\">\n                                                    <h4 className=\"discussion-title\">Discussion</h4>\n                                                    <div className=\"discussion-actions\">\n                                                        <a \n                                                            href={`https://github.com/litlfred/sgex/pull/${pr.number}/files`}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                            className=\"discussion-action-btn\"\n                                                        >\n                                                            📁 View Files\n                                                        </a>\n                                                        <a \n                                                            href={pr.prUrl}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                            className=\"discussion-action-btn secondary\"\n                                                        >\n                                                            🔗 View PR\n                                                        </a>\n                                                    </div>\n                                                </div>\n                                                \n                                                {/* Comment Input at Top - Only for authenticated users */}\n                                                {isAuthenticated && (\n                                                    <div className=\"comment-input-section\">\n                                                        <textarea\n                                                            value={commentInputs[pr.number] || ''}\n                                                            onChange={(e) => setCommentInputs(prev => ({\n                                                                ...prev,\n                                                                [pr.number]: e.target.value\n                                                            }))}\n                                                            placeholder=\"Add a comment...\"\n                                                            className=\"comment-input\"\n                                                            rows={3}\n                                                        />\n                                                        <button\n                                                            onClick={() => submitComment(pr.number, commentInputs[pr.number])}\n                                                            disabled={!commentInputs[pr.number]?.trim() || submittingComments[pr.number]}\n                                                            className=\"submit-comment-btn\"\n                                                        >\n                                                            {submittingComments[pr.number] ? 'Submitting...' : 'Add Comment'}\n                                                        </button>\n                                                    </div>\n                                                )}\n                                                \n                                                {/* Scrollable Comments Area - Show for everyone */}\n                                                <div className=\"discussion-scroll-area\">\n                                                    {loadingComments ? (\n                                                        <div className=\"comments-loading\">Loading full discussion...</div>\n                                                    ) : prComments[pr.number] && prComments[pr.number].length > 0 ? (\n                                                        <div className=\"comments-list\">\n                                                            {prComments[pr.number].slice(-5).map((comment) => (\n                                                                <div key={comment.id} className=\"comment-item\">\n                                                                    <div className=\"comment-header\">\n                                                                        <img \n                                                                            src={comment.avatar_url} \n                                                                            alt={comment.author} \n                                                                            className=\"comment-avatar\"\n                                                                        />\n                                                                        <span className=\"comment-author\">{comment.author}</span>\n                                                                        <span className=\"comment-date\">{comment.created_at}</span>\n                                                                    </div>\n                                                                    <div className=\"comment-body\">\n                                                                        {comment.body.length > 200 ? \n                                                                            `${comment.body.substring(0, 200)}...` : \n                                                                            comment.body\n                                                                        }\n                                                                    </div>\n                                                                </div>\n                                                            ))}\n                                                        </div>\n                                                    ) : (\n                                                        <div className=\"no-comments\">\n                                                            {!isAuthenticated ? \n                                                                \"No comments yet. Login to add the first comment!\" :\n                                                                \"No comments yet. Be the first to comment!\"\n                                                            }\n                                                        </div>\n                                                    )}\n                                                </div>\n                                            </div>\n                                        )}\n                                        \n                                        <div className=\"pr-actions\">\n                                            <a \n                                                href={pr.url} \n                                                className=\"preview-link\"\n                                                target=\"_blank\"\n                                                rel=\"noopener noreferrer\"\n                                            >\n                                                <span>🚀 View Preview</span>\n                                            </a>\n                                            \n                                            <a \n                                                href={pr.prUrl} \n                                                className=\"pr-link\"\n                                                target=\"_blank\"\n                                                rel=\"noopener noreferrer\"\n                                            >\n                                                <span>📋 View PR</span>\n                                            </a>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"card-footer\">\n                                        <small className=\"preview-path\">\n                                            Preview URL: {pr.url}\n                                        </small>\n                                    </div>\n                                </div>\n                            ))\n                        )}\n                    </div>\n\n                    {totalPRPages > 1 && (\n                        <div className=\"pagination\">\n                            <button \n                                className=\"pagination-btn\"\n                                onClick={() => setPrPage(Math.max(1, prPage - 1))}\n                                disabled={prPage === 1}\n                            >\n                                ← Previous\n                            </button>\n                            <span className=\"pagination-info\">\n                                Page {prPage} of {totalPRPages} ({sortedPRs.length} total)\n                            </span>\n                            <button \n                                className=\"pagination-btn\"\n                                onClick={() => setPrPage(Math.min(totalPRPages, prPage + 1))}\n                                disabled={prPage === totalPRPages}\n                            >\n                                Next →\n                            </button>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </PageLayout>\n    );\n};\n\nexport default BranchListingPage;\n","import React, { useState } from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport logger from \"../utils/logger\";\nimport \"./PATLogin.css\";\n\nconst PATLogin = ({ onAuthSuccess }) => {\n  const { t } = useTranslation();\n  const [token, setToken] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const componentLogger = logger.getLogger('PATLogin');\n\n  React.useEffect(() => {\n    componentLogger.componentMount({ hasOnAuthSuccess: !!onAuthSuccess });\n    return () => componentLogger.componentUnmount();\n  }, [componentLogger, onAuthSuccess]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    componentLogger.userAction('PAT login attempt', { tokenProvided: !!token.trim() });\n    \n    if (!token.trim()) {\n      const errorMsg = \"Please enter a GitHub Personal Access Token\";\n      setError(errorMsg);\n      componentLogger.warn('PAT login failed - no token provided');\n      return;\n    }\n\n    setLoading(true);\n    setError(\"\");\n    const startTime = Date.now();\n    componentLogger.auth('Starting PAT authentication');\n    \n    try {\n      // Test the token by creating an Octokit instance and making a test request\n      const { Octokit } = await import('@octokit/rest');\n      const octokit = new Octokit({ auth: token.trim() });\n      componentLogger.debug('Octokit instance created for PAT validation');\n      \n      // Test the token by fetching user info\n      componentLogger.apiCall('GET', '/user', null);\n      const userResponse = await octokit.rest.users.getAuthenticated();\n      const duration = Date.now() - startTime;\n      componentLogger.apiResponse('GET', '/user', userResponse.status, duration);\n      \n      componentLogger.auth('PAT authentication successful', { \n        username: userResponse.data.login,\n        duration \n      });\n      \n      // Call success callback with token and octokit instance\n      onAuthSuccess(token.trim(), octokit);\n    } catch (err) {\n      const duration = Date.now() - startTime;\n      componentLogger.apiError('GET', '/user', err);\n      componentLogger.auth('PAT authentication failed', { \n        status: err.status, \n        message: err.message,\n        duration \n      });\n      console.error('PAT authentication failed:', err);\n      \n      if (err.status === 401) {\n        setError(\"Invalid Personal Access Token. Please check your token and try again.\");\n      } else if (err.status === 403) {\n        setError(\"Token doesn't have sufficient permissions. Please ensure your token has 'repo' and 'read:org' scopes.\");\n      } else {\n        setError(\"Authentication failed. Please check your connection and try again.\");\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTokenChange = (e) => {\n    setToken(e.target.value);\n    if (error) setError(\"\"); // Clear error when user starts typing\n  };\n\n  return (\n    <div className=\"pat-login\">\n      <div className=\"pat-login-section\">\n        <form onSubmit={handleSubmit} className=\"pat-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"pat-token\">{t('auth.setupToken')}:</label>\n            <input\n              id=\"pat-token\"\n              type=\"password\"\n              value={token}\n              onChange={handleTokenChange}\n              placeholder=\"ghp_xxxxxxxxxxxxxxxxxxxx\"\n              className={`token-input ${error ? 'error' : ''}`}\n              disabled={loading}\n              autoComplete=\"off\"\n            />\n          </div>\n          \n          <button \n            type=\"submit\" \n            className=\"github-login-btn\" \n            disabled={loading || !token.trim()}\n          >\n            {loading ? (\n              <>\n                <span className=\"spinner small\"></span>\n                {t('common.loading')}...\n              </>\n            ) : (\n              <>\n                <span className=\"github-icon\">🔑</span>\n                {t('auth.signInWithPAT')}\n              </>\n            )}\n          </button>\n        </form>\n        \n        {error && <div className=\"error-message\">{error}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default PATLogin;"],"names":["BranchListingPage","pullRequests","setPullRequests","useState","loading","setLoading","error","setError","prPage","setPrPage","prSearchTerm","setPrSearchTerm","prSortBy","setPrSortBy","prSortOrder","setPrSortOrder","deploymentStatuses","setDeploymentStatuses","prFilter","setPrFilter","isAuthenticated","setIsAuthenticated","githubToken","setGithubToken","prComments","setPrComments","loadingComments","commentInputs","setCommentInputs","submittingComments","setSubmittingComments","expandedDiscussions","setExpandedDiscussions","discussionSummaries","setDiscussionSummaries","loadingSummaries","setLoadingSummaries","ITEMS_PER_PAGE","mascotImage","useThemeImage","fetchPRCommentsSummary","async","headers","response","fetch","prNumber","ok","console","warn","status","count","lastComment","comments","json","length","author","user","login","created_at","Date","avatar_url","fetchAllPRComments","map","comment","id","body","toLocaleDateString","loadDiscussionSummaries","useCallback","prs","summaries","pr","number","getDiscussionSummaryText","summary","timeAgo","getTimeAgo","date","diffMs","diffDays","Math","floor","checkDeploymentStatus","safeBranchName","Error","data","workflow_runs","latestRun","conclusion","html_url","updateDeploymentStatuses","statuses","prev","getDeploymentStatusInfo","text","class","sortPRs","sortBy","sortOrder","arguments","undefined","sort","a","b","comparison","title","localeCompare","dateA","updatedAt","useEffect","token","sessionStorage","getItem","owner","repo","prState","prResponse","formattedPRs","head","ref","replace","state","branchName","url","prUrl","updated_at","createdAt","slice","err","message","includes","log","mockPRs","now","fetchData","filtered","filter","toLowerCase","paginated","interval","setInterval","clearInterval","filteredPRs","sortedPRs","paginatedPRs","totalPRPages","ceil","_jsx","PageLayout","pageName","showBreadcrumbs","children","className","_jsxs","src","alt","href","target","rel","PATLogin","onAuthSuccess","setItem","htmlFor","value","onChange","e","type","placeholder","_commentInputs$pr$num","onClick","isExpanded","toggleDiscussion","rows","commentText","trim","method","JSON","stringify","updatedComments","updatedSummary","submitComment","disabled","substring","max","min","_ref","t","useTranslation","setToken","componentLogger","logger","getLogger","React","componentMount","hasOnAuthSuccess","componentUnmount","onSubmit","preventDefault","userAction","tokenProvided","startTime","auth","Octokit","octokit","debug","apiCall","userResponse","rest","users","getAuthenticated","duration","apiResponse","username","apiError","autoComplete","_Fragment"],"sourceRoot":""}