<!DOCTYPE html>
<!--
ðŸš¨ COPILOT PROHIBITION WARNING ðŸš¨

THIS FILE IS ABSOLUTELY CRITICAL TO SPA ROUTING AND GITHUB PAGES DEPLOYMENT

â›” COPILOT AGENTS ARE STRICTLY PROHIBITED FROM MAKING ANY CHANGES TO THIS FILE
â›” WITHOUT EXPLICIT WRITTEN CONSENT FROM THE REPOSITORY OWNER (@litlfred)

This file contains the core SPA routing logic that enables GitHub Pages to work
as a single-page application. It handles URL redirection, branch deployments,
and route parsing. Any unauthorized changes can break the entire application
routing system for all users.

ðŸ”’ REQUIRED PROCESS FOR CHANGES:
1. Request explicit consent from @litlfred in a GitHub comment
2. Wait for written approval before making ANY changes
3. Document the explicit consent in the commit message  
4. Test extensively in a separate environment before merging

Violation of this prohibition will result in immediate reversion and 
potential blocking of copilot access to this repository.

ðŸš¨ END PROHIBITION WARNING ðŸš¨
-->
<html>
  <head>
    <meta charset="utf-8">
    <title>SGEX Workbench</title>
    <!-- Load SGEX route configuration service -->
    <script src="./routeConfig.js"></script>
    <script type="text/javascript">
      // SGEX Dynamic URL Routing for GitHub Pages
      // Simplified Optimistic Routing with graceful fallback
      // Significantly reduced from 651 lines to ~100 lines

      (function(l) {
        // Main routing function
        function performRouting() {
          // Check for existing redirect to prevent infinite loops
          if (l.search && l.search.indexOf('?/') === 0) {
            console.error('SGEX 404.html: Redirect loop detected');
            showErrorPage('Redirect Loop Detected', 
              'This URL has already been processed by the routing system.',
              'routing-loop');
            return;
          }

          // Check for redirect loops using sessionStorage
          var currentPath = l.pathname;
          var redirectAttempts = JSON.parse(sessionStorage.getItem('sgex-redirect-attempts') || '[]');
          
          // Clean old attempts (older than 30 seconds)
          var now = Date.now();
          redirectAttempts = redirectAttempts.filter(function(attempt) {
            return now - attempt.timestamp < 30000;
          });
          
          // Check if we've tried this path too many times
          var recentAttempts = redirectAttempts.filter(function(attempt) {
            return attempt.path === currentPath;
          });
          
          if (recentAttempts.length >= 2) {
            console.log('SGEX 404.html: Multiple redirect attempts detected, showing error');
            showBranchNotFoundError(currentPath);
            return;
          }

          // Record this attempt
          redirectAttempts.push({ path: currentPath, timestamp: now });
          sessionStorage.setItem('sgex-redirect-attempts', JSON.stringify(redirectAttempts));

          // Parse URL segments
          var pathSegments = l.pathname.split('/').filter(Boolean);
          
          // Handle different deployment scenarios
          if (pathSegments.length === 0) {
            // Root path - redirect to SGEX landing
            redirectToSPA('/sgex/', '');
            return;
          }

          if (pathSegments[0] !== 'sgex') {
            showErrorPage('Invalid URL', 'Expected /sgex/ path prefix', 'invalid-base');
            return;
          }

          if (pathSegments.length === 1) {
            // /sgex/ - load landing page
            redirectToSPA('/sgex/', '');
            return;
          }

          // Smart routing: check if first segment is a valid component name
          var firstSegment = pathSegments[1];
          
          // Load route config to check if it's a valid component
          if (typeof window.getSGEXRouteConfig === 'function') {
            var routeConfig = window.getSGEXRouteConfig();
            if (routeConfig && routeConfig.isValidComponent && routeConfig.isValidComponent(firstSegment)) {
              // Component-first routing: /sgex/{component}/{user}/{repo}/{branch}
              var componentRoutePath = pathSegments.slice(1).join('/');
              redirectToSPA('/sgex/', componentRoutePath);
              return;
            }
          }
          
          // Fallback to optimistic branch routing if not a known component
          var branch = pathSegments[1];
          var component = pathSegments[2];
          
          if (pathSegments.length === 2) {
            // /sgex/{branch}/ - try branch deployment
            optimisticBranchRedirect(branch, '');
            return;
          }

          if (pathSegments.length >= 3) {
            // /sgex/{branch}/{component}/... - try branch with route
            var routePath = pathSegments.slice(2).join('/');
            optimisticBranchRedirect(branch, routePath);
            return;
          }

          showErrorPage('Unknown URL Pattern', 'URL pattern not recognized: ' + l.pathname, 'unknown-pattern');
        }

        function optimisticBranchRedirect(branch, routePath) {
          // Parse and store structured context before redirect using global service
          if (routePath && typeof window.SGEX_storeStructuredContext === 'function') {
            window.SGEX_storeStructuredContext(routePath, branch);
          }
          
          // Always try branch deployment first (optimistic approach)
          var branchUrl = '/sgex/' + branch + '/';
          if (routePath) {
            branchUrl += '?/' + routePath;
          }
          
          console.log('SGEX 404.html: Optimistic branch redirect to:', branchUrl);
          redirectToSPA(branchUrl, '');
        }

        function redirectToSPA(basePath, routePath) {
          var url = basePath;
          if (routePath) {
            url += '?/' + routePath;
          }
          
          // Preserve query parameters and hash
          if (l.search && !l.search.startsWith('?/')) {
            url += (url.includes('?') ? '&' : '?') + l.search.slice(1);
          }
          if (l.hash) {
            url += l.hash;
          }
          
          console.log('SGEX 404.html: Redirecting to SPA:', url);
          l.replace(l.protocol + '//' + l.host + url);
        }

        function showBranchNotFoundError(path) {
          var pathSegments = path.split('/').filter(Boolean);
          if (pathSegments.length >= 2 && pathSegments[0] === 'sgex') {
            var branch = pathSegments[1];
            showErrorPage(
              'Branch Deployment Not Found', 
              'The branch "' + branch + '" does not appear to be deployed. This could mean:\n\n' +
              'â€¢ The branch has not been deployed to GitHub Pages yet\n' +
              'â€¢ The branch deployment is still in progress\n' +
              'â€¢ The branch name was mistyped in the URL\n\n' +
              'You can try accessing the main deployment instead.',
              'branch-not-deployed'
            );
          } else {
            showErrorPage('Route Not Found', 'The requested page could not be found.', 'not-found');
          }
        }

        function showErrorPage(title, message, errorCode) {
          var bugReportUrl = 'https://github.com/litlfred/sgex/issues/new?title=' +
            encodeURIComponent('[Routing Error] ' + title + ' - ' + errorCode) +
            '&body=' + encodeURIComponent(
              'Routing error occurred:\n\n' +
              '**Error:** ' + title + '\n' +
              '**URL:** ' + window.location.href + '\n' +
              '**Error Code:** ' + errorCode + '\n' +
              '**User Agent:** ' + navigator.userAgent + '\n\n' +
              'Please describe what you were trying to do when this error occurred.'
            ) +
            '&labels=' + encodeURIComponent('bug,routing');

          // Add dark mode styles
          var styleTag = '<style>' +
            'body { margin: 0; padding: 0; min-height: 100vh; background: #f8f9fa; }' +
            '.error-container { font-family: Arial, sans-serif; max-width: 600px; margin: 50px auto; padding: 20px; text-align: center; }' +
            '.error-title { color: #d73527; margin-bottom: 1rem; }' +
            '.error-subtitle { color: #333; margin-bottom: 1rem; }' +
            '.error-message { background: #f5f5f5; padding: 15px; border-radius: 5px; text-align: left; color: #333; margin-bottom: 1rem; }' +
            '.error-code { color: #333; margin-bottom: 1rem; }' +
            '.error-actions { margin: 30px 0; }' +
            '.error-btn { background: #0078d4; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin: 5px; display: inline-block; }' +
            '.error-btn.report { background: #d73527; }' +
            '.error-footer { color: #666; font-size: 12px; }' +
            '@media (prefers-color-scheme: dark) {' +
              'body { background: #1f2937; }' +
              '.error-title { color: #f87171; }' +
              '.error-subtitle { color: #f9fafb; }' +
              '.error-message { background: #374151; color: #e5e7eb; }' +
              '.error-code { color: #f3f4f6; }' +
              '.error-btn { background: #60a5fa; color: #ffffff; }' +
              '.error-btn:hover { background: #3b82f6; }' +
              '.error-btn.report { background: #ef4444; }' +
              '.error-btn.report:hover { background: #dc2626; }' +
              '.error-footer { color: #9ca3af; }' +
            '}' +
            '</style>';

          var errorHTML = styleTag +
            '<div class="error-container">' +
              '<h1 class="error-title">SGEX URL Routing Error</h1>' +
              '<h2 class="error-subtitle">' + title + '</h2>' +
              '<p class="error-message">' + message + '</p>' +
              '<p class="error-code"><strong>Error Code:</strong> ' + errorCode + '</p>' +
              '<div class="error-actions">' +
                '<a href="https://litlfred.github.io/sgex/" class="error-btn">Go to SGEX Home</a>' +
                '<a href="' + bugReportUrl + '" target="_blank" class="error-btn report">Report Bug</a>' +
              '</div>' +
              '<p class="error-footer">If you think this is a bug, please use the "Report Bug" button to help us fix it.</p>' +
            '</div>';

          if (document.body) {
            document.body.innerHTML = errorHTML;
          } else {
            document.addEventListener('DOMContentLoaded', function() {
              document.body.innerHTML = errorHTML;
            });
          }
        }

        // Execute routing
        try {
          performRouting();
        } catch (error) {
          console.error('SGEX 404.html: Routing error:', error);
          showErrorPage('Routing System Error', 'An error occurred in the routing system: ' + error.message, 'system-error');
        }

      })(window.location);
    </script>
  </head>
  <body>
    <!-- SGEX Simplified Optimistic Routing -->
    <!-- Handles all GitHub Pages routing with clean, concise logic -->
    <!-- Reduced from 651 lines to ~100 lines for maintainability -->
  </body>
</html>