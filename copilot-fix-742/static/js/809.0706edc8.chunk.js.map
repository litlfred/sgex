{"version":3,"file":"static/js/809.0706edc8.chunk.js","mappings":"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","sources":["components/HelpButton.js","services/validations/dak-sushi-base.ts","services/validations/json-valid.ts","services/validations/bpmn-business-rule-task-id.ts","services/validations/dmn-decision-label-id.ts","services/validations/xml-well-formed.ts","services/validations/file-naming-conventions.ts","services/validations/dmn-bpmn-cross-reference.ts","services/dakValidationRegistry.ts","services/enhancedDAKValidationService.ts","services/runtimeValidationService.ts","components/ValidationPanel.tsx","components/DAKDashboard.js","../node_modules/ajv-formats/src/formats.ts","../node_modules/ajv-formats/src/index.ts","../node_modules/ajv-formats/src/limit.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport HelpModal from './HelpModal';\nimport useThemeImage from '../hooks/useThemeImage';\n\nconst HelpButton = ({ helpTopic, contextData = {} }) => {\n  const [showHelp, setShowHelp] = useState(false);\n\n  // Theme-aware mascot image\n  const mascotImage = useThemeImage('sgex-mascot.png');\n\n  const handleHelpClick = () => {\n    setShowHelp(true);\n  };\n\n  const handleCloseHelp = () => {\n    setShowHelp(false);\n  };\n\n  return (\n    <>\n      <button \n        className=\"help-button\"\n        onClick={handleHelpClick}\n        title=\"Get Help\"\n        aria-label=\"Get Help\"\n      >\n        <img \n          src={mascotImage} \n          alt=\"SGEX Helper\" \n          className=\"help-mascot-icon\"\n        />\n      </button>\n      \n      {showHelp && (\n        <HelpModal\n          topic={helpTopic}\n          contextData={contextData}\n          onClose={handleCloseHelp}\n        />\n      )}\n    </>\n  );\n};\n\nexport default HelpButton;","/**\n * DAK-SUSHI-BASE Validation\n * \n * A DAK IG SHALL have smart.who.int.base as a dependency\n */\n\nimport * as yaml from 'js-yaml';\nimport { ValidationDefinition, ValidationContext, DAKValidationResult, SushiConfig } from '../../types/core';\n\nconst dakSushiBase: ValidationDefinition = {\n  id: 'dak-sushi-base',\n  component: 'dak-structure',\n  level: 'error',\n  fileTypes: ['yaml'],\n  descriptionKey: 'validation.dak.sushiBase.description',\n  description: 'DAK IG SHALL have smart.who.int.base as a dependency',\n  \n  async validate(filePath: string, content: string, context: ValidationContext): Promise<DAKValidationResult | null> {\n    // Only validate sushi-config.yaml files\n    if (!filePath.endsWith('sushi-config.yaml')) {\n      return null;\n    }\n    \n    try {\n      const config = yaml.load(content) as SushiConfig;\n      \n      if (!config || typeof config !== 'object') {\n        return {\n          validationId: 'dak-sushi-base',\n          component: 'dak-structure',\n          level: 'error',\n          description: 'DAK IG SHALL have smart.who.int.base as a dependency',\n          filePath,\n          message: 'sushi-config.yaml must contain a valid YAML object',\n          line: 1,\n          column: 1,\n          suggestion: 'Ensure the file contains proper YAML object structure'\n        };\n      }\n      \n      // Check for dependencies section\n      if (!config.dependencies || typeof config.dependencies !== 'object') {\n        return {\n          validationId: 'dak-sushi-base',\n          component: 'dak-structure',\n          level: 'error',\n          description: 'DAK IG SHALL have smart.who.int.base as a dependency',\n          filePath,\n          message: 'sushi-config.yaml missing dependencies section',\n          line: dakSushiBase.findLineNumber ? dakSushiBase.findLineNumber(content, 'dependencies') || 1 : 1,\n          column: 1,\n          suggestion: 'Add dependencies section with smart.who.int.base dependency'\n        };\n      }\n      \n      // Check for smart.who.int.base dependency\n      if (!config.dependencies['smart.who.int.base']) {\n        return {\n          validationId: 'dak-sushi-base',\n          component: 'dak-structure',\n          level: 'error',\n          description: 'DAK IG SHALL have smart.who.int.base as a dependency',\n          filePath,\n          message: 'Missing required smart.who.int.base dependency',\n          line: dakSushiBase.findLineNumber ? dakSushiBase.findLineNumber(content, 'dependencies') || 1 : 1,\n          column: 1,\n          suggestion: 'Add \"smart.who.int.base: current\" to dependencies section'\n        };\n      }\n      \n      return null; // Valid\n      \n    } catch (error: any) {\n      return {\n        validationId: 'dak-sushi-base',\n        component: 'dak-structure',\n        level: 'error',\n        description: 'DAK IG SHALL have smart.who.int.base as a dependency',\n        filePath,\n        message: `YAML parsing error: ${error.message}`,\n        line: error.mark?.line || 1,\n        column: error.mark?.column || 1,\n        suggestion: 'Fix YAML syntax errors'\n      };\n    }\n  },\n  \n  findLineNumber(content: string, searchTerm: string): number | null {\n    const lines = content.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n      if (lines[i].includes(searchTerm)) {\n        return i + 1;\n      }\n    }\n    return null;\n  }\n};\n\n// Add metadata for reference\nexport const metadata = {\n  standard: 'WHO SMART Guidelines',\n  reference: 'https://smart.who.int/ig-starter-kit/authoring_conventions.html',\n  severity: 'critical'\n};\n\nexport default dakSushiBase;","/**\n * JSON-VALID Validation\n * \n * JSON files must be valid JSON\n */\n\nimport { ValidationDefinition, ValidationContext, DAKValidationResult } from '../../types/core';\n\n// Helper function for checking JSON content\nfunction isJSONContent(content: string): boolean {\n  const trimmedContent = content.trim();\n  return (trimmedContent.startsWith('{') && trimmedContent.endsWith('}')) ||\n         (trimmedContent.startsWith('[') && trimmedContent.endsWith(']'));\n}\n\nconst jsonValid: ValidationDefinition = {\n  id: 'json-valid',\n  component: 'file-structure',\n  level: 'error',\n  fileTypes: ['json'],\n  descriptionKey: 'validation.json.valid.description',\n  description: 'JSON files must be valid JSON',\n  \n  async validate(filePath: string, content: string, context: ValidationContext): Promise<DAKValidationResult | null> {\n    // Only validate JSON files\n    if (!filePath.endsWith('.json') && !isJSONContent(content)) {\n      return null;\n    }\n    \n    try {\n      JSON.parse(content);\n      return null; // Valid JSON\n      \n    } catch (error: any) {\n      // Extract line and column information from error message\n      const lineMatch = error.message.match(/line (\\d+)/i);\n      const columnMatch = error.message.match(/column (\\d+)/i);\n      const positionMatch = error.message.match(/position (\\d+)/i);\n      \n      let line = 1;\n      let column = 1;\n      \n      if (lineMatch) {\n        line = parseInt(lineMatch[1], 10);\n      } else if (positionMatch) {\n        // Calculate line and column from position\n        const position = parseInt(positionMatch[1], 10);\n        const lines = content.substring(0, position).split('\\n');\n        line = lines.length;\n        column = lines[lines.length - 1].length + 1;\n      }\n      \n      if (columnMatch) {\n        column = parseInt(columnMatch[1], 10);\n      }\n      \n      return {\n        validationId: 'json-valid',\n        component: 'file-structure',\n        level: 'error',\n        description: 'JSON files must be valid JSON',\n        filePath,\n        message: `JSON syntax error: ${error.message}`,\n        line: line,\n        column: column,\n        suggestion: 'Fix JSON syntax errors such as missing commas, quotes, or brackets'\n      };\n    }\n  }\n};\n\n// Add metadata for reference\nexport const metadata = {\n  standard: 'JSON',\n  reference: 'https://www.json.org/',\n  severity: 'critical'\n};\n\nexport default jsonValid;","/**\n * BPMN-BUSINESS-RULE-TASK-ID Validation (TypeScript)\n * \n * In BPMN diagrams a bpmn:businessRuleTask SHALL have an @id attribute\n */\n\nimport { ValidationDefinition, ValidationContext, DAKValidationResult } from '../../types/core';\n\n// Helper functions\nconst isBPMNContent = (content: string): boolean => {\n  return content.includes('http://www.omg.org/spec/BPMN/') || \n         content.includes('businessRuleTask') ||\n         content.includes('bpmn:');\n};\n\nconst findElementLineNumber = (content: string, element: string, index: number): number => {\n  // Try to find approximate line number by searching for businessRuleTask\n  const lines = content.split('\\n');\n  let foundCount = 0;\n  \n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].includes(element)) {\n      if (foundCount === index) {\n        return i + 1;\n      }\n      foundCount++;\n    }\n  }\n  \n  return 1; // Fallback\n};\n\nconst bpmnBusinessRuleTaskId: ValidationDefinition = {\n  id: 'bpmn-business-rule-task-id',\n  component: 'business-processes',\n  level: 'error',\n  fileTypes: ['bpmn', 'xml'],\n  descriptionKey: 'validation.bpmn.businessRuleTaskId.description',\n  description: 'In BPMN diagrams a bpmn:businessRuleTask SHALL have an @id attribute',\n  \n  async validate(filePath: string, content: string, context: ValidationContext): Promise<DAKValidationResult | null> {\n    // Only validate BPMN files or XML files that contain BPMN content\n    if (!filePath.endsWith('.bpmn') && !filePath.endsWith('.xml') && !isBPMNContent(content)) {\n      return null;\n    }\n    \n    try {\n      // Check for businessRuleTask elements without id\n      const businessRuleTaskRegex = /<bpmn:businessRuleTask(?![^>]*\\sid\\s*=)[^>]*>/g;\n      const matches = content.match(businessRuleTaskRegex);\n      \n      if (matches && matches.length > 0) {\n        // Find the first businessRuleTask without an id\n        const firstMatch = matches[0];\n        const matchIndex = content.indexOf(firstMatch);\n        const lineNumber = content.substring(0, matchIndex).split('\\n').length;\n        \n        return {\n          validationId: 'bpmn-business-rule-task-id',\n          component: 'business-processes',\n          level: 'error',\n          description: 'In BPMN diagrams a bpmn:businessRuleTask SHALL have an @id attribute',\n          filePath,\n          message: `Found ${matches.length} businessRuleTask${matches.length > 1 ? 's' : ''} without required @id attribute`,\n          line: lineNumber,\n          column: 1,\n          suggestion: 'Add id attribute to each bpmn:businessRuleTask element, e.g., <bpmn:businessRuleTask id=\"BusinessRuleTask_1\">'\n        };\n      }\n      \n      return null; // Valid\n      \n    } catch (error: any) {\n      return {\n        validationId: 'bpmn-business-rule-task-id',\n        component: 'business-processes',\n        level: 'error',\n        description: 'In BPMN diagrams a bpmn:businessRuleTask SHALL have an @id attribute',\n        filePath,\n        message: `Error parsing BPMN: ${error.message}`,\n        line: 1,\n        column: 1,\n        suggestion: 'Ensure the BPMN file is well-formed XML'\n      };\n    }\n  },\n  \n  findLineNumber(content: string, searchTerm: string): number | null {\n    const lines = content.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n      if (lines[i].includes(searchTerm)) {\n        return i + 1;\n      }\n    }\n    return null;\n  }\n};\n\n// Add metadata for reference\nexport const metadata = {\n  standard: 'BPMN 2.0',\n  reference: 'http://www.omg.org/spec/BPMN/20100524/BPMN20.xsd',\n  severity: 'critical'\n};\n\nexport default bpmnBusinessRuleTaskId;","/**\n * DMN-DECISION-LABEL-ID Validation (TypeScript)\n * \n * In DMN diagrams, decisions SHALL have both label and id attributes\n */\n\nimport { ValidationDefinition, ValidationContext, DAKValidationResult } from '../../types/core';\n\n// Helper functions\nconst isDMNContent = (content: string): boolean => {\n  return content.includes('http://www.omg.org/spec/DMN/') || \n         content.includes('dmndi:') ||\n         content.includes('dmn:') ||\n         content.includes('decision');\n};\n\nconst findDecisionLineNumber = (content: string, index: number): number => {\n  const lines = content.split('\\n');\n  let foundCount = 0;\n  \n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].includes('<dmn:decision') || lines[i].includes('<decision')) {\n      if (foundCount === index) {\n        return i + 1;\n      }\n      foundCount++;\n    }\n  }\n  \n  return 1; // Fallback\n};\n\nconst dmnDecisionLabelId: ValidationDefinition = {\n  id: 'dmn-decision-label-id',\n  component: 'decision-support-logic',\n  level: 'error',\n  fileTypes: ['dmn', 'xml'],\n  descriptionKey: 'validation.dmn.decisionLabelId.description',\n  description: 'In DMN diagrams, decisions SHALL have both label and id attributes',\n  \n  async validate(filePath: string, content: string, context: ValidationContext): Promise<DAKValidationResult | null> {\n    // Only validate DMN files or XML files that contain DMN content\n    if (!filePath.endsWith('.dmn') && !filePath.endsWith('.xml') && !isDMNContent(content)) {\n      return null;\n    }\n    \n    try {\n      // Check for decision elements without required attributes\n      const decisionRegex = /<dmn:decision[^>]*>/g;\n      const matches = Array.from(content.matchAll(decisionRegex));\n      \n      for (let i = 0; i < matches.length; i++) {\n        const match = matches[i];\n        const decisionTag = match[0];\n        \n        // Check for id attribute\n        const hasId = /\\sid\\s*=\\s*[\"'][^\"']*[\"']/.test(decisionTag);\n        // Check for label attribute\n        const hasLabel = /\\slabel\\s*=\\s*[\"'][^\"']*[\"']/.test(decisionTag);\n        \n        if (!hasId || !hasLabel) {\n          const matchIndex = match.index || 0;\n          const lineNumber = content.substring(0, matchIndex).split('\\n').length;\n          \n          let message = 'Decision element missing required attributes: ';\n          const missing = [];\n          if (!hasId) missing.push('id');\n          if (!hasLabel) missing.push('label');\n          message += missing.join(', ');\n          \n          return {\n            validationId: 'dmn-decision-label-id',\n            component: 'decision-support-logic',\n            level: 'error',\n            description: 'In DMN diagrams, decisions SHALL have both label and id attributes',\n            filePath,\n            message,\n            line: lineNumber,\n            column: 1,\n            suggestion: `Add missing attributes to dmn:decision element: ${missing.map(attr => `${attr}=\"value\"`).join(', ')}`\n          };\n        }\n      }\n      \n      return null; // Valid\n      \n    } catch (error: any) {\n      return {\n        validationId: 'dmn-decision-label-id',\n        component: 'decision-support-logic',\n        level: 'error',\n        description: 'In DMN diagrams, decisions SHALL have both label and id attributes',\n        filePath,\n        message: `Error parsing DMN: ${error.message}`,\n        line: 1,\n        column: 1,\n        suggestion: 'Ensure the DMN file is well-formed XML'\n      };\n    }\n  },\n  \n  findLineNumber(content: string, searchTerm: string): number | null {\n    const lines = content.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n      if (lines[i].includes(searchTerm)) {\n        return i + 1;\n      }\n    }\n    return null;\n  }\n};\n\n// Add metadata for reference\nexport const metadata = {\n  standard: 'DMN 1.3',\n  reference: 'https://www.omg.org/spec/DMN/1.3/',\n  severity: 'critical'\n};\n\nexport default dmnDecisionLabelId;","/**\n * XML-WELL-FORMED Validation (TypeScript)\n * \n * XML files must be well-formed according to XML 1.0 specification\n */\n\nimport { ValidationDefinition, ValidationContext, DAKValidationResult } from '../../types/core';\n\n// Helper function for checking XML content\nfunction isXMLContent(content: string): boolean {\n  const trimmedContent = content.trim();\n  return trimmedContent.startsWith('<?xml') || \n         (trimmedContent.startsWith('<') && \n         (trimmedContent.includes('xmlns') || trimmedContent.includes('<?xml')));\n}\n\nconst xmlWellFormed: ValidationDefinition = {\n  id: 'xml-well-formed',\n  component: 'file-structure',\n  level: 'error',\n  fileTypes: ['xml', 'bpmn', 'dmn'],\n  descriptionKey: 'validation.xml.wellFormed.description',\n  description: 'XML files must be well-formed according to XML 1.0 specification',\n  \n  async validate(filePath: string, content: string, context: ValidationContext): Promise<DAKValidationResult | null> {\n    // Only validate XML-based files\n    if (!filePath.endsWith('.xml') && !filePath.endsWith('.bpmn') && \n        !filePath.endsWith('.dmn') && !isXMLContent(content)) {\n      return null;\n    }\n    \n    try {\n      // Use DOMParser to check if XML is well-formed\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, 'text/xml');\n      \n      // Check for parsing errors\n      const parserError = doc.querySelector('parsererror');\n      if (parserError) {\n        const errorText = parserError.textContent || 'Unknown parsing error';\n        \n        // Try to extract line and column information from error message\n        const lineMatch = errorText.match(/line (\\d+)/i);\n        const columnMatch = errorText.match(/column (\\d+)/i);\n        \n        let line = 1;\n        let column = 1;\n        \n        if (lineMatch) {\n          line = parseInt(lineMatch[1], 10);\n        }\n        \n        if (columnMatch) {\n          column = parseInt(columnMatch[1], 10);\n        }\n        \n        return {\n          validationId: 'xml-well-formed',\n          component: 'file-structure',\n          level: 'error',\n          description: 'XML files must be well-formed according to XML 1.0 specification',\n          filePath,\n          message: `XML parsing error: ${errorText}`,\n          line: line,\n          column: column,\n          suggestion: 'Fix XML syntax errors such as unclosed tags, invalid characters, or malformed attributes'\n        };\n      }\n      \n      return null; // Valid XML\n      \n    } catch (error: any) {\n      // Fallback error handling for environments where DOMParser isn't available\n      return {\n        validationId: 'xml-well-formed',\n        component: 'file-structure',\n        level: 'error',\n        description: 'XML files must be well-formed according to XML 1.0 specification',\n        filePath,\n        message: `XML validation error: ${error.message}`,\n        line: 1,\n        column: 1,\n        suggestion: 'Ensure the XML file follows valid XML 1.0 syntax'\n      };\n    }\n  }\n};\n\n// Add metadata for reference\nexport const metadata = {\n  standard: 'XML 1.0',\n  reference: 'https://www.w3.org/TR/xml/',\n  severity: 'critical'\n};\n\nexport default xmlWellFormed;","/**\n * FILE-NAMING-CONVENTIONS Validation (TypeScript)\n * \n * Files SHALL follow WHO SMART Guidelines naming conventions\n */\n\nimport { ValidationDefinition, ValidationContext, DAKValidationResult } from '../../types/core';\n\n// Helper functions for naming validation\nconst isValidFileName = (fileName: string): boolean => {\n  // Check for valid characters (alphanumeric, hyphens, underscores, dots)\n  const validPattern = /^[a-zA-Z0-9._-]+$/;\n  return validPattern.test(fileName);\n};\n\nconst isRecommendedNaming = (fileName: string): boolean => {\n  // Recommended: lowercase with hyphens\n  const recommendedPattern = /^[a-z0-9-]+(\\.[a-z0-9]+)*$/;\n  return recommendedPattern.test(fileName);\n};\n\nconst getFileNameFromPath = (filePath: string): string => {\n  return filePath.split('/').pop() || filePath;\n};\n\nconst fileNamingConventions: ValidationDefinition = {\n  id: 'file-naming-conventions',\n  component: 'file-structure',\n  level: 'warning',\n  fileTypes: ['*'],\n  descriptionKey: 'validation.fileNaming.conventions.description',\n  description: 'Files SHALL follow WHO SMART Guidelines naming conventions',\n  \n  async validate(filePath: string, content: string, context: ValidationContext): Promise<DAKValidationResult | null> {\n    const fileName = getFileNameFromPath(filePath);\n    \n    // Skip validation for certain system files\n    const skipFiles = ['.gitignore', '.npmignore', '.env', '.env.local', '.env.development', '.env.production'];\n    if (skipFiles.includes(fileName)) {\n      return null;\n    }\n    \n    // Skip hidden files and directories\n    if (fileName.startsWith('.') && !skipFiles.includes(fileName)) {\n      return null;\n    }\n    \n    try {\n      // Check for invalid characters\n      if (!isValidFileName(fileName)) {\n        return {\n          validationId: 'file-naming-conventions',\n          component: 'file-structure',\n          level: 'error',\n          description: 'Files SHALL follow WHO SMART Guidelines naming conventions',\n          filePath,\n          message: 'File name contains invalid characters',\n          line: 1,\n          column: 1,\n          suggestion: 'Use only alphanumeric characters, hyphens, underscores, and dots in file names'\n        };\n      }\n      \n      // Check for spaces in file name\n      if (fileName.includes(' ')) {\n        return {\n          validationId: 'file-naming-conventions',\n          component: 'file-structure',\n          level: 'error',\n          description: 'Files SHALL follow WHO SMART Guidelines naming conventions',\n          filePath,\n          message: 'File name contains spaces',\n          line: 1,\n          column: 1,\n          suggestion: 'Replace spaces with hyphens or underscores'\n        };\n      }\n      \n      // Check for uppercase letters (warning level)\n      if (!isRecommendedNaming(fileName)) {\n        const hasUppercase = /[A-Z]/.test(fileName);\n        const hasUnderscore = fileName.includes('_');\n        \n        let message = 'File name does not follow recommended naming conventions';\n        let suggestion = 'Use lowercase letters with hyphens for better consistency';\n        \n        if (hasUppercase) {\n          message = 'File name contains uppercase letters';\n          suggestion = 'Convert to lowercase for better consistency with WHO SMART Guidelines';\n        } else if (hasUnderscore) {\n          message = 'File name uses underscores instead of hyphens';\n          suggestion = 'Consider using hyphens instead of underscores for consistency';\n        }\n        \n        return {\n          validationId: 'file-naming-conventions',\n          component: 'file-structure',\n          level: 'warning',\n          description: 'Files SHALL follow WHO SMART Guidelines naming conventions',\n          filePath,\n          message,\n          line: 1,\n          column: 1,\n          suggestion\n        };\n      }\n      \n      return null; // Valid naming\n      \n    } catch (error: any) {\n      return {\n        validationId: 'file-naming-conventions',\n        component: 'file-structure',\n        level: 'error',\n        description: 'Files SHALL follow WHO SMART Guidelines naming conventions',\n        filePath,\n        message: `Error validating file name: ${error.message}`,\n        line: 1,\n        column: 1,\n        suggestion: 'Check file name format and characters'\n      };\n    }\n  }\n};\n\n// Add metadata for reference\nexport const metadata = {\n  standard: 'WHO SMART Guidelines',\n  reference: 'https://smart.who.int/ig-starter-kit/file_naming.html',\n  severity: 'medium'\n};\n\nexport default fileNamingConventions;","/**\n * DMN-BPMN-CROSS-REFERENCE Validation (TypeScript)\n * \n * In BPMN business rule tasks that reference DMN files, \n * the referenced DMN decision SHALL exist\n */\n\nimport { ValidationDefinition, ValidationContext, DAKValidationResult, DAKFile } from '../../types/core';\n\n// Helper functions\nconst isBPMNContent = (content: string): boolean => {\n  return content.includes('http://www.omg.org/spec/BPMN/') || \n         content.includes('businessRuleTask') ||\n         content.includes('bpmn:');\n};\n\nconst isDMNContent = (content: string): boolean => {\n  return content.includes('http://www.omg.org/spec/DMN/') || \n         content.includes('dmn:') ||\n         content.includes('<decision');\n};\n\nconst extractDMNReferences = (bpmnContent: string): string[] => {\n  const references: string[] = [];\n  \n  // Look for DMN references in business rule tasks\n  // This is a simplified approach - in practice, you'd want more sophisticated parsing\n  const dmnRefRegex = /dmn[:\\-_]?(?:decision|ref|name)[\\s]*=[\\s]*[\"']([^\"']+)[\"']/gi;\n  let match;\n  \n  while ((match = dmnRefRegex.exec(bpmnContent)) !== null) {\n    references.push(match[1]);\n  }\n  \n  return references;\n};\n\nconst extractDMNDecisions = (dmnContent: string): string[] => {\n  const decisions: string[] = [];\n  \n  // Extract decision IDs and names from DMN content\n  const decisionRegex = /<dmn:decision[^>]+(?:id|name)[\\s]*=[\\s]*[\"']([^\"']+)[\"']/gi;\n  let match;\n  \n  while ((match = decisionRegex.exec(dmnContent)) !== null) {\n    decisions.push(match[1]);\n  }\n  \n  return decisions;\n};\n\nconst dmnBpmnCrossReference: ValidationDefinition = {\n  id: 'dmn-bpmn-cross-reference',\n  component: 'business-processes',\n  level: 'warning',\n  fileTypes: ['bpmn', 'xml'],\n  descriptionKey: 'validation.dmnBpmn.crossReference.description',\n  description: 'In BPMN business rule tasks that reference DMN files, the referenced DMN decision SHALL exist',\n  \n  async validate(filePath: string, content: string, context: ValidationContext): Promise<DAKValidationResult | null> {\n    // Only validate BPMN files that contain business rule tasks\n    if (!filePath.endsWith('.bpmn') && !filePath.endsWith('.xml') && !isBPMNContent(content)) {\n      return null;\n    }\n    \n    // Skip if no business rule tasks are present\n    if (!content.includes('businessRuleTask')) {\n      return null;\n    }\n    \n    try {\n      // Extract DMN references from BPMN content\n      const dmnReferences = extractDMNReferences(content);\n      \n      if (dmnReferences.length === 0) {\n        return null; // No DMN references to validate\n      }\n      \n      // Get all available DMN files from context\n      const dakFiles = context.dakFiles || [];\n      const dmnFiles = dakFiles.filter((file: DAKFile) => \n        file.path.endsWith('.dmn') || isDMNContent(file.content)\n      );\n      \n      if (dmnFiles.length === 0) {\n        return {\n          validationId: 'dmn-bpmn-cross-reference',\n          component: 'business-processes',\n          level: 'warning',\n          description: 'In BPMN business rule tasks that reference DMN files, the referenced DMN decision SHALL exist',\n          filePath,\n          message: `BPMN file references DMN decisions but no DMN files found in DAK`,\n          line: 1,\n          column: 1,\n          suggestion: 'Add the referenced DMN files to the DAK or remove DMN references from business rule tasks'\n        };\n      }\n      \n      // Collect all available DMN decisions\n      const availableDecisions: string[] = [];\n      dmnFiles.forEach((dmnFile: DAKFile) => {\n        const decisions = extractDMNDecisions(dmnFile.content);\n        availableDecisions.push(...decisions);\n      });\n      \n      // Check for missing references\n      const missingReferences = dmnReferences.filter(ref => \n        !availableDecisions.includes(ref)\n      );\n      \n      if (missingReferences.length > 0) {\n        return {\n          validationId: 'dmn-bpmn-cross-reference',\n          component: 'business-processes',\n          level: 'warning',\n          description: 'In BPMN business rule tasks that reference DMN files, the referenced DMN decision SHALL exist',\n          filePath,\n          message: `BPMN references missing DMN decisions: ${missingReferences.join(', ')}`,\n          line: 1,\n          column: 1,\n          suggestion: `Create DMN decisions with IDs: ${missingReferences.join(', ')} or update BPMN references to match existing decisions: ${availableDecisions.join(', ')}`\n        };\n      }\n      \n      return null; // Valid cross-references\n      \n    } catch (error: any) {\n      return {\n        validationId: 'dmn-bpmn-cross-reference',\n        component: 'business-processes',\n        level: 'error',\n        description: 'In BPMN business rule tasks that reference DMN files, the referenced DMN decision SHALL exist',\n        filePath,\n        message: `Error validating DMN-BPMN cross-references: ${error.message}`,\n        line: 1,\n        column: 1,\n        suggestion: 'Check BPMN and DMN file structure and references'\n      };\n    }\n  },\n  \n  findLineNumber(content: string, searchTerm: string): number | null {\n    const lines = content.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n      if (lines[i].includes(searchTerm)) {\n        return i + 1;\n      }\n    }\n    return null;\n  }\n};\n\n// Add metadata for reference\nexport const metadata = {\n  standard: 'BPMN 2.0 + DMN 1.3',\n  reference: 'https://www.omg.org/spec/BPMN/2.0/ and https://www.omg.org/spec/DMN/1.3/',\n  severity: 'medium'\n};\n\nexport default dmnBpmnCrossReference;","/**\n * DAK Validation Registry (TypeScript)\n * \n * Central registry for all DAK validation definitions.\n * Manages validation discovery, registration, and execution.\n */\n\nimport { \n  ValidationDefinition, \n  DAKComponent, \n  ValidationLevel, \n  DAKValidationResult, \n  ValidationContext,\n  ComponentSummary,\n  ValidationSummary,\n  FormattedValidationResults,\n  DAKFile \n} from '../types/core';\n\n// Import validation definitions\nimport dakSushiBase from './validations/dak-sushi-base';\nimport jsonValid from './validations/json-valid';\nimport bpmnBusinessRuleTaskId from './validations/bpmn-business-rule-task-id';\nimport dmnDecisionLabelId from './validations/dmn-decision-label-id';\nimport xmlWellFormed from './validations/xml-well-formed';\nimport fileNamingConventions from './validations/file-naming-conventions';\nimport dmnBpmnCrossReference from './validations/dmn-bpmn-cross-reference';\n// Note: Other validations will be migrated incrementally\n\n/**\n * DAK component categories for grouping validations\n */\nexport const DAK_COMPONENTS: Record<string, DAKComponent> = {\n  'dak-structure': {\n    id: 'dak-structure',\n    name: 'DAK Structure',\n    description: 'Overall DAK repository structure and configuration'\n  },\n  'business-processes': {\n    id: 'business-processes',\n    name: 'Business Processes',\n    description: 'BPMN workflows and process definitions'\n  },\n  'decision-support-logic': {\n    id: 'decision-support-logic',\n    name: 'Decision Support Logic',\n    description: 'DMN decision tables and business rules'\n  },\n  'core-data-elements': {\n    id: 'core-data-elements',\n    name: 'Core Data Elements',\n    description: 'Terminology and data model definitions'\n  },\n  'indicators': {\n    id: 'indicators',\n    name: 'Program Indicators',\n    description: 'Performance indicators and measures'\n  },\n  'publications': {\n    id: 'publications',\n    name: 'Publications',\n    description: 'Health interventions and recommendations'\n  },\n  'requirements': {\n    id: 'requirements',\n    name: 'Requirements',\n    description: 'Functional and non-functional requirements'\n  },\n  'test-scenarios': {\n    id: 'test-scenarios',\n    name: 'Test Scenarios',\n    description: 'Test cases and validation scenarios'\n  },\n  'personas': {\n    id: 'personas',\n    name: 'Generic Personas',\n    description: 'User roles and actor definitions'\n  },\n  'user-scenarios': {\n    id: 'user-scenarios',\n    name: 'User Scenarios',\n    description: 'Use case narratives and workflows'\n  },\n  'file-structure': {\n    id: 'file-structure',\n    name: 'File Structure',\n    description: 'General file format and structure validations'\n  }\n};\n\n/**\n * Validation severity levels\n */\nexport const VALIDATION_LEVELS: Record<string, ValidationLevel> = {\n  ERROR: 'error',\n  WARNING: 'warning',\n  INFO: 'info'\n};\n\nclass DAKValidationRegistry {\n  private validations: Map<string, ValidationDefinition> = new Map();\n  private componentValidations: Map<string, ValidationDefinition[]> = new Map();\n\n  constructor() {\n    this.initializeValidations();\n  }\n\n  /**\n   * Initialize and register all validation definitions\n   */\n  private initializeValidations(): void {\n    const validationDefinitions: ValidationDefinition[] = [\n      dakSushiBase,\n      jsonValid,\n      bpmnBusinessRuleTaskId,\n      dmnDecisionLabelId,\n      xmlWellFormed,\n      fileNamingConventions,\n      dmnBpmnCrossReference,\n    ];\n\n    validationDefinitions.forEach(validation => {\n      this.registerValidation(validation);\n    });\n\n    console.log(`Registered ${this.validations.size} TypeScript validation definitions`);\n  }\n\n  /**\n   * Register a single validation definition\n   */\n  registerValidation(validation: ValidationDefinition): void {\n    if (!validation.id) {\n      throw new Error('Validation must have an id');\n    }\n\n    if (this.validations.has(validation.id)) {\n      console.warn(`Validation ${validation.id} is already registered. Overwriting.`);\n    }\n\n    // Store validation by ID\n    this.validations.set(validation.id, validation);\n\n    // Group by component\n    if (!this.componentValidations.has(validation.component)) {\n      this.componentValidations.set(validation.component, []);\n    }\n    this.componentValidations.get(validation.component)!.push(validation);\n  }\n\n  /**\n   * Get all validations\n   */\n  getAllValidations(): ValidationDefinition[] {\n    return Array.from(this.validations.values());\n  }\n\n  /**\n   * Get validation by ID\n   */\n  getValidation(id: string): ValidationDefinition | undefined {\n    return this.validations.get(id);\n  }\n\n  /**\n   * Get validations for a specific component\n   */\n  getValidationsForComponent(component: string): ValidationDefinition[] {\n    return this.componentValidations.get(component) || [];\n  }\n\n  /**\n   * Get validations applicable to a specific file type\n   */\n  getValidationsForFileType(fileType: string): ValidationDefinition[] {\n    return this.getAllValidations().filter(validation => \n      validation.fileTypes.includes('*') || \n      validation.fileTypes.includes(fileType)\n    );\n  }\n\n  /**\n   * Get validations by severity level\n   */\n  getValidationsByLevel(level: ValidationLevel): ValidationDefinition[] {\n    return this.getAllValidations().filter(validation => \n      validation.level === level\n    );\n  }\n\n  /**\n   * Get all DAK components with their validation counts\n   */\n  getComponentSummary(): ComponentSummary {\n    const summary: ComponentSummary = {};\n    \n    Object.values(DAK_COMPONENTS).forEach(component => {\n      const validations = this.getValidationsForComponent(component.id);\n      summary[component.id] = {\n        ...component,\n        validationCount: validations.length,\n        errorCount: validations.filter(v => v.level === VALIDATION_LEVELS.ERROR).length,\n        warningCount: validations.filter(v => v.level === VALIDATION_LEVELS.WARNING).length,\n        infoCount: validations.filter(v => v.level === VALIDATION_LEVELS.INFO).length\n      };\n    });\n\n    return summary;\n  }\n\n  /**\n   * Validate a single file against all applicable validations\n   */\n  async validateFile(filePath: string, content: string, context: ValidationContext = {}): Promise<DAKValidationResult[]> {\n    const fileExtension = this.getFileExtension(filePath);\n    const applicableValidations = this.getValidationsForFileType(fileExtension);\n    \n    const results: DAKValidationResult[] = [];\n\n    for (const validation of applicableValidations) {\n      try {\n        const result = await validation.validate(filePath, content, context);\n        \n        if (result) {\n          results.push(result);\n        }\n      } catch (error: any) {\n        console.error(`Error running validation ${validation.id}:`, error);\n        results.push({\n          validationId: validation.id,\n          component: validation.component,\n          level: VALIDATION_LEVELS.ERROR,\n          description: 'Validation execution failed',\n          filePath: filePath,\n          message: `Validation error: ${error.message}`,\n          suggestion: 'Contact support if this error persists'\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Validate files grouped by component\n   */\n  async validateByComponent(component: string, files: DAKFile[], context: ValidationContext = {}): Promise<DAKValidationResult[]> {\n    const componentValidations = this.getValidationsForComponent(component);\n    const results: DAKValidationResult[] = [];\n\n    for (const file of files) {\n      for (const validation of componentValidations) {\n        try {\n          const fileExtension = this.getFileExtension(file.path);\n          \n          // Check if validation applies to this file type\n          if (!validation.fileTypes.includes('*') && \n              !validation.fileTypes.includes(fileExtension)) {\n            continue;\n          }\n\n          const result = await validation.validate(file.path, file.content, context);\n          \n          if (result) {\n            results.push(result);\n          }\n        } catch (error: any) {\n          console.error(`Error running validation ${validation.id} on ${file.path}:`, error);\n          results.push({\n            validationId: validation.id,\n            component: validation.component,\n            level: VALIDATION_LEVELS.ERROR,\n            description: 'Validation execution failed',\n            filePath: file.path,\n            message: `Validation error: ${error.message}`,\n            suggestion: 'Contact support if this error persists'\n          });\n        }\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get file extension from path\n   */\n  private getFileExtension(filePath: string): string {\n    const parts = filePath.split('.');\n    return parts.length > 1 ? parts[parts.length - 1].toLowerCase() : '';\n  }\n\n  /**\n   * Check if validation can save (no error-level violations)\n   */\n  canSave(validationResults: DAKValidationResult[]): boolean {\n    return !validationResults.some(result => result.level === VALIDATION_LEVELS.ERROR);\n  }\n\n  /**\n   * Format validation results for display\n   */\n  formatResults(validationResults: DAKValidationResult[]): FormattedValidationResults {\n    const summary: ValidationSummary = {\n      error: 0,\n      warning: 0,\n      info: 0\n    };\n\n    const byComponent: Record<string, DAKValidationResult[]> = {};\n    const byFile: Record<string, DAKValidationResult[]> = {};\n\n    validationResults.forEach(result => {\n      // Update summary counts\n      summary[result.level]++;\n\n      // Group by component\n      if (!byComponent[result.component]) {\n        byComponent[result.component] = [];\n      }\n      byComponent[result.component].push(result);\n\n      // Group by file\n      if (!byFile[result.filePath]) {\n        byFile[result.filePath] = [];\n      }\n      byFile[result.filePath].push(result);\n    });\n\n    return {\n      summary,\n      byComponent,\n      byFile,\n      canSave: this.canSave(validationResults),\n      total: validationResults.length\n    };\n  }\n}\n\n// Create singleton instance\nconst dakValidationRegistry = new DAKValidationRegistry();\n\nexport default dakValidationRegistry;","/**\n * Enhanced DAK Validation Service (TypeScript)\n * \n * Main orchestrator for the DAK Validation Framework.\n * Provides high-level validation APIs for DAK repositories, components, and files.\n */\n\nimport dakValidationRegistry, { DAK_COMPONENTS, VALIDATION_LEVELS } from './dakValidationRegistry';\nimport githubService from './githubService';\nimport { \n  FormattedValidationResults, \n  ValidationContext, \n  DAKFile, \n  DAKValidationResult,\n  ComponentSummary \n} from '../types/core';\n\ninterface ValidationCacheEntry {\n  results: FormattedValidationResults;\n  timestamp: number;\n}\n\ninterface ValidateDAKOptions {\n  forceRefresh?: boolean;\n  context?: ValidationContext;\n}\n\ninterface ValidateComponentOptions {\n  context?: ValidationContext;\n}\n\ninterface ValidateFileOptions {\n  context?: ValidationContext;\n}\n\ninterface ValidateStagingGroundOptions {\n  context?: ValidationContext;\n}\n\ninterface StagingGround {\n  files?: DAKFile[];\n  [key: string]: any;\n}\n\nclass EnhancedDAKValidationService {\n  private registry = dakValidationRegistry;\n  private cache = new Map<string, ValidationCacheEntry>();\n  private cacheTimeout = 5 * 60 * 1000; // 5 minutes\n\n  /**\n   * Validate an entire DAK repository\n   */\n  async validateDAK(owner: string, repo: string, branch: string = 'main', options: ValidateDAKOptions = {}): Promise<FormattedValidationResults> {\n    const cacheKey = `${owner}/${repo}/${branch}`;\n    \n    // Check cache if not forcing refresh\n    if (!options.forceRefresh && this.cache.has(cacheKey)) {\n      const cached = this.cache.get(cacheKey)!;\n      if (Date.now() - cached.timestamp < this.cacheTimeout) {\n        return cached.results;\n      }\n    }\n\n    try {\n      // Get all files from the repository\n      const files = await this.getDAKFiles(owner, repo, branch);\n      \n      if (!files || files.length === 0) {\n        return {\n          error: 'Could not retrieve DAK files',\n          summary: { error: 1, warning: 0, info: 0 },\n          byComponent: {},\n          byFile: {},\n          canSave: false,\n          total: 1\n        };\n      }\n\n      // Create validation context\n      const context: ValidationContext = {\n        owner,\n        repo,\n        branch,\n        dakFiles: files,\n        githubService: githubService,\n        ...options.context\n      };\n\n      // Run all validations\n      const allResults: DAKValidationResult[] = [];\n      \n      for (const file of files) {\n        const fileResults = await this.registry.validateFile(file.path, file.content, context);\n        allResults.push(...fileResults);\n      }\n\n      // Format results\n      const formattedResults = this.registry.formatResults(allResults);\n      \n      // Add metadata\n      formattedResults.metadata = {\n        owner,\n        repo,\n        branch,\n        filesValidated: files.length,\n        validatedAt: new Date().toISOString(),\n        validationFrameworkVersion: '1.0.0'\n      };\n\n      // Cache results\n      this.cache.set(cacheKey, {\n        results: formattedResults,\n        timestamp: Date.now()\n      });\n\n      return formattedResults;\n\n    } catch (error: any) {\n      console.error('Error validating DAK:', error);\n      return {\n        error: `Validation failed: ${error.message}`,\n        summary: { error: 1, warning: 0, info: 0 },\n        byComponent: {},\n        byFile: {},\n        canSave: false,\n        total: 1\n      };\n    }\n  }\n\n  /**\n   * Validate a specific DAK component\n   */\n  async validateComponent(component: string, files: DAKFile[], options: ValidateComponentOptions = {}): Promise<FormattedValidationResults> {\n    if (!DAK_COMPONENTS[component]) {\n      throw new Error(`Unknown DAK component: ${component}`);\n    }\n\n    try {\n      // Create validation context\n      const context: ValidationContext = {\n        component,\n        dakFiles: files,\n        ...options.context\n      };\n\n      const results = await this.registry.validateByComponent(component, files, context);\n      return this.registry.formatResults(results);\n\n    } catch (error: any) {\n      console.error(`Error validating component ${component}:`, error);\n      return {\n        error: `Component validation failed: ${error.message}`,\n        summary: { error: 1, warning: 0, info: 0 },\n        byComponent: {},\n        byFile: {},\n        canSave: false,\n        total: 1\n      };\n    }\n  }\n\n  /**\n   * Validate a single file\n   */\n  async validateFile(filePath: string, content: string, options: ValidateFileOptions = {}): Promise<FormattedValidationResults> {\n    try {\n      const context: ValidationContext = {\n        ...options.context\n      };\n\n      const results = await this.registry.validateFile(filePath, content, context);\n      return this.registry.formatResults(results);\n\n    } catch (error: any) {\n      console.error(`Error validating file ${filePath}:`, error);\n      return {\n        error: `File validation failed: ${error.message}`,\n        summary: { error: 1, warning: 0, info: 0 },\n        byComponent: {},\n        byFile: {},\n        canSave: false,\n        total: 1\n      };\n    }\n  }\n\n  /**\n   * Validate staging ground files\n   */\n  async validateStagingGround(stagingGround: StagingGround, options: ValidateStagingGroundOptions = {}): Promise<FormattedValidationResults> {\n    try {\n      const files = stagingGround.files || [];\n      \n      // Create validation context\n      const context: ValidationContext = {\n        stagingGround: true,\n        dakFiles: files,\n        ...options.context\n      };\n\n      const allResults: DAKValidationResult[] = [];\n      \n      for (const file of files) {\n        const fileResults = await this.registry.validateFile(file.path, file.content, context);\n        allResults.push(...fileResults);\n      }\n\n      const formattedResults = this.registry.formatResults(allResults);\n      \n      // Add staging ground metadata\n      formattedResults.metadata = {\n        stagingGround: true,\n        filesValidated: files.length,\n        validatedAt: new Date().toISOString(),\n        canUpload: formattedResults.canSave\n      };\n\n      return formattedResults;\n\n    } catch (error: any) {\n      console.error('Error validating staging ground:', error);\n      return {\n        error: `Staging ground validation failed: ${error.message}`,\n        summary: { error: 1, warning: 0, info: 0 },\n        byComponent: {},\n        byFile: {},\n        canSave: false,\n        total: 1\n      };\n    }\n  }\n\n  /**\n   * Get validation summary for dashboard display\n   */\n  getValidationSummary(): ComponentSummary {\n    return this.registry.getComponentSummary();\n  }\n\n  /**\n   * Get available validations for a component\n   */\n  getValidationsForComponent(component: string) {\n    return this.registry.getValidationsForComponent(component);\n  }\n\n  /**\n   * Run specific validation by ID\n   */\n  async runValidation(validationId: string, filePath: string, content: string, context: ValidationContext = {}): Promise<DAKValidationResult | null> {\n    const validation = this.registry.getValidation(validationId);\n    \n    if (!validation) {\n      throw new Error(`Validation not found: ${validationId}`);\n    }\n\n    try {\n      const result = await validation.validate(filePath, content, context);\n      return result;\n      \n    } catch (error: any) {\n      console.error(`Error running validation ${validationId}:`, error);\n      return {\n        validationId: validation.id,\n        component: validation.component,\n        level: VALIDATION_LEVELS.ERROR,\n        description: 'Validation execution failed',\n        filePath: filePath,\n        message: `Validation error: ${error.message}`,\n        suggestion: 'Contact support if this error persists'\n      };\n    }\n  }\n\n  /**\n   * Check if files can be saved (no error-level violations)\n   */\n  async canSaveFiles(files: DAKFile[], context: ValidationContext = {}): Promise<boolean> {\n    const allResults: DAKValidationResult[] = [];\n    \n    for (const file of files) {\n      const fileResults = await this.registry.validateFile(file.path, file.content, context);\n      allResults.push(...fileResults);\n    }\n\n    return this.registry.canSave(allResults);\n  }\n\n  /**\n   * Get real-time validation for editor\n   */\n  async getEditorValidation(filePath: string, content: string, component: string, context: ValidationContext = {}): Promise<DAKValidationResult[]> {\n    const fileExtension = this.getFileExtension(filePath);\n    \n    // Get relevant validations for this file and component\n    const componentValidations = this.registry.getValidationsForComponent(component);\n    const fileTypeValidations = this.registry.getValidationsForFileType(fileExtension);\n    \n    // Combine and deduplicate\n    const relevantValidationsSet = new Set([...componentValidations, ...fileTypeValidations]);\n    const relevantValidations = Array.from(relevantValidationsSet);\n    \n    const results: DAKValidationResult[] = [];\n    \n    for (const validation of relevantValidations) {\n      try {\n        const result = await validation.validate(filePath, content, context);\n        \n        if (result) {\n          results.push(result);\n        }\n      } catch (error: any) {\n        console.error(`Error in editor validation ${validation.id}:`, error);\n        // Don't add error results in real-time validation to avoid noise\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get DAK files from repository\n   */\n  async getDAKFiles(owner: string, repo: string, branch: string = 'main'): Promise<DAKFile[]> {\n    try {\n      if (!githubService.authenticated) {\n        throw new Error('GitHub authentication required');\n      }\n\n      // Get repository contents recursively\n      const files: DAKFile[] = [];\n      await this.getDAKFilesRecursive(owner, repo, '', branch, files);\n      \n      return files;\n\n    } catch (error: any) {\n      console.error('Error getting DAK files:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get DAK files recursively from directory\n   */\n  private async getDAKFilesRecursive(\n    owner: string, \n    repo: string, \n    path: string, \n    branch: string, \n    files: DAKFile[]\n  ): Promise<void> {\n    try {\n      const contents = await githubService.getDirectoryContents(owner, repo, path, branch);\n      \n      for (const item of contents) {\n        if (item.type === 'file' && this.isRelevantFile(item.path || item.name)) {\n          try {\n            const content = await githubService.getFileContent(owner, repo, item.path || item.name, branch);\n            \n            if (content) {\n              files.push({\n                path: item.path || item.name,\n                content: content,\n                size: item.size,\n                sha: item.sha\n              });\n            }\n          } catch (error: any) {\n            console.warn(`Could not get content for ${item.path || item.name}:`, error.message);\n          }\n        } else if (item.type === 'dir') {\n          // Recursively get files from subdirectory\n          await this.getDAKFilesRecursive(owner, repo, item.path || item.name, branch, files);\n        }\n      }\n    } catch (error: any) {\n      console.warn(`Could not get directory contents for ${path}:`, error.message);\n    }\n  }\n\n  /**\n   * Check if file is relevant for validation\n   */\n  private isRelevantFile(filePath: string): boolean {\n    // Skip hidden files and directories\n    if (filePath.startsWith('.') && filePath !== '.gitignore') {\n      return false;\n    }\n\n    // Skip node_modules and other build directories\n    if (filePath.includes('node_modules/') || \n        filePath.includes('build/') || \n        filePath.includes('dist/') ||\n        filePath.includes('.git/')) {\n      return false;\n    }\n\n    // Include specific file types\n    const relevantExtensions = [\n      'yaml', 'yml', 'json', 'xml', 'bpmn', 'dmn', \n      'md', 'txt', 'fsh', 'feature', 'js', 'ts'\n    ];\n\n    const extension = this.getFileExtension(filePath);\n    return relevantExtensions.includes(extension) || \n           filePath === 'sushi-config.yaml' ||\n           filePath === 'README.md';\n  }\n\n  /**\n   * Get file extension\n   */\n  private getFileExtension(filePath: string): string {\n    const parts = filePath.split('.');\n    return parts.length > 1 ? parts[parts.length - 1].toLowerCase() : '';\n  }\n\n  /**\n   * Clear validation cache\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats() {\n    return {\n      size: this.cache.size,\n      entries: Array.from(this.cache.keys())\n    };\n  }\n}\n\n// Create singleton instance\nconst enhancedDAKValidationService = new EnhancedDAKValidationService();\n\nexport default enhancedDAKValidationService;","/**\n * Runtime Validation Service\n * \n * This service provides runtime validation of JSON data against TypeScript-generated\n * JSON schemas using AJV. It serves as a bridge between TypeScript compile-time\n * type checking and runtime data validation, with enhanced support for SGEX \n * domain-specific validation including GitHub, FHIR, and DAK data.\n */\n\nimport Ajv, { JSONSchemaType, ValidateFunction, ErrorObject } from 'ajv';\nimport addFormats from 'ajv-formats';\nimport { \n  ValidationResult, \n  ValidationError, \n  ValidationWarning, \n  RuntimeValidationConfig,\n  ValidatedData,\n  AsyncResult\n} from '../types/core';\n\nexport interface SchemaRegistry {\n  [typeName: string]: object;\n}\n\nexport interface ValidationContext {\n  strict?: boolean;\n  coerceTypes?: boolean;\n  removeAdditional?: boolean;\n  throwOnError?: boolean;\n}\n\nexport class RuntimeValidationService {\n  private ajv: Ajv;\n  private schemas: Map<string, any> = new Map();\n  private validators: Map<string, ValidateFunction> = new Map();\n  private config: RuntimeValidationConfig;\n\n  constructor(config: Partial<RuntimeValidationConfig> = {}) {\n    this.config = {\n      strict: config.strict ?? false,\n      throwOnError: config.throwOnError ?? false,\n      coerceTypes: config.coerceTypes ?? true,\n      removeAdditional: config.removeAdditional ?? true\n    };\n\n    this.ajv = new Ajv({\n      strict: this.config.strict,\n      coerceTypes: this.config.coerceTypes,\n      removeAdditional: this.config.removeAdditional,\n      allErrors: true,\n      verbose: true,\n      loadSchema: this.loadSchema.bind(this)\n    });\n\n    // Add format support (date, time, email, etc.)\n    addFormats(this.ajv);\n\n    // Add custom formats for SGEX-specific validation\n    this.addCustomFormats();\n  }\n\n  /**\n   * Add custom validation formats for GitHub, FHIR, and DAK data\n   */\n  private addCustomFormats(): void {\n    // GitHub username format\n    this.ajv.addFormat('github-username', {\n      type: 'string',\n      validate: (data: string) => /^[a-zA-Z0-9]([a-zA-Z0-9]|-(?=[a-zA-Z0-9])){0,38}$/.test(data)\n    });\n\n    // GitHub token format (basic validation)\n    this.ajv.addFormat('github-token', {\n      type: 'string',\n      validate: (data: string) => /^(ghp_|github_pat_)[a-zA-Z0-9_]{16,}$/.test(data)\n    });\n\n    // FHIR ID format\n    this.ajv.addFormat('fhir-id', {\n      type: 'string', \n      validate: (data: string) => /^[A-Za-z0-9-.]{1,64}$/.test(data)\n    });\n\n    // DAK ID format\n    this.ajv.addFormat('dak-id', {\n      type: 'string',\n      validate: (data: string) => /^[a-z0-9]([a-z0-9-])*[a-z0-9]$/.test(data)\n    });\n\n    // WHO SMART Guidelines dependency\n    this.ajv.addFormat('who-smart-base', {\n      type: 'string',\n      validate: (data: string) => data === 'smart.who.int.base'\n    });\n\n    // Branch name format\n    this.ajv.addFormat('git-branch', {\n      type: 'string',\n      validate: (data: string) => !/[\\s~^:?*\\[\\]\\\\]/.test(data) && !data.startsWith('-') && !data.endsWith('.')\n    });\n\n    // Semantic version format\n    this.ajv.addFormat('semver', {\n      type: 'string',\n      validate: (data: string) => /^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9-]+)?(\\+[a-zA-Z0-9-]+)?$/.test(data)\n    });\n  }\n\n  /**\n   * Register a JSON schema for a TypeScript type\n   */\n  public registerSchema(typeName: string, schema: object): void {\n    this.schemas.set(typeName, schema);\n    const validator = this.ajv.compile(schema);\n    this.validators.set(typeName, validator);\n  }\n\n  /**\n   * Load schema asynchronously (for $ref resolution)\n   */\n  private async loadSchema(uri: string): Promise<object | boolean> {\n    // Handle local schema references\n    if (uri.startsWith('#/')) {\n      return false; // Let AJV handle internal references\n    }\n    \n    // Handle external schema loading if needed in the future\n    console.warn(`External schema loading not implemented for: ${uri}`);\n    return false;\n  }\n\n  /**\n   * Validate data against a registered TypeScript type schema\n   */\n  public validate<T>(typeName: string, data: unknown): ValidatedData<T> {\n    const validator = this.validators.get(typeName);\n    if (!validator) {\n      const error: ValidationError = {\n        code: 'SCHEMA_NOT_FOUND',\n        message: `No schema registered for type: ${typeName}`,\n        path: '',\n        value: typeName\n      };\n      \n      if (this.config.throwOnError) {\n        throw new Error(error.message);\n      }\n      \n      return {\n        data: data as T,\n        isValid: false,\n        errors: [error],\n        warnings: []\n      };\n    }\n\n    const isValid = validator(data);\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n\n    if (!isValid && validator.errors) {\n      for (const error of validator.errors) {\n        const validationError: ValidationError = {\n          code: error.keyword?.toUpperCase() || 'VALIDATION_ERROR',\n          message: error.message || 'Validation failed',\n          path: error.instancePath || error.schemaPath || '',\n          value: error.data\n        };\n        \n        // Classify certain errors as warnings instead\n        if (this.isWarningError(error)) {\n          warnings.push({\n            code: validationError.code,\n            message: validationError.message,\n            path: validationError.path,\n            value: validationError.value\n          });\n        } else {\n          errors.push(validationError);\n        }\n      }\n    }\n\n    if (!isValid && errors.length > 0 && this.config.throwOnError) {\n      throw new Error(`Validation failed: ${errors[0].message}`);\n    }\n\n    return {\n      data: data as T,\n      isValid: isValid && errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\n   * Determine if an AJV error should be treated as a warning\n   */\n  private isWarningError(error: ErrorObject): boolean {\n    // Treat additional properties as warnings in non-strict mode\n    if (!this.config.strict && error.keyword === 'additionalProperties') {\n      return true;\n    }\n    \n    // Treat format errors as warnings for some formats\n    if (error.keyword === 'format') {\n      const formatName = error.schema as string;\n      return ['date-time', 'email', 'uri'].includes(formatName);\n    }\n    \n    return false;\n  }\n\n  /**\n   * Validate DAK configuration data\n   */\n  public async validateDAKConfig(data: unknown): Promise<AsyncResult<any>> {\n    try {\n      const result = this.validate('SushiConfig', data);\n      return {\n        success: result.isValid,\n        data: result.isValid ? result.data : undefined,\n        error: result.errors.length > 0 ? result.errors[0].message : undefined,\n        errors: result.errors.map(e => e.message)\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Validation failed',\n        errors: [error instanceof Error ? error.message : 'Validation failed']\n      };\n    }\n  }\n\n  /**\n   * Validate GitHub repository data\n   */\n  public async validateGitHubRepository(data: unknown): Promise<AsyncResult<any>> {\n    try {\n      const result = this.validate('GitHubRepository', data);\n      return {\n        success: result.isValid,\n        data: result.isValid ? result.data : undefined,\n        error: result.errors.length > 0 ? result.errors[0].message : undefined,\n        errors: result.errors.map(e => e.message)\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Validation failed',\n        errors: [error instanceof Error ? error.message : 'Validation failed']\n      };\n    }\n  }\n\n  /**\n   * Validate user authentication data\n   */\n  public async validateAuthenticationState(data: unknown): Promise<AsyncResult<any>> {\n    try {\n      const result = this.validate('AuthenticationState', data);\n      return {\n        success: result.isValid,\n        data: result.isValid ? result.data : undefined,\n        error: result.errors.length > 0 ? result.errors[0].message : undefined,\n        errors: result.errors.map(e => e.message)\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Validation failed',\n        errors: [error instanceof Error ? error.message : 'Validation failed']\n      };\n    }\n  }\n\n  /**\n   * Batch validate multiple data items\n   */\n  public validateBatch<T>(typeName: string, dataItems: unknown[]): ValidatedData<T>[] {\n    return dataItems.map(data => this.validate<T>(typeName, data));\n  }\n\n  /**\n   * Check if a schema is registered for a given type\n   */\n  public hasType(typeName: string): boolean {\n    return this.validators.has(typeName);\n  }\n\n  /**\n   * Get validation statistics\n   */\n  public getValidationStats(): {\n    registeredSchemas: number;\n    compiledValidators: number;\n    configuration: RuntimeValidationConfig;\n  } {\n    return {\n      registeredSchemas: this.schemas.size,\n      compiledValidators: this.validators.size,\n      configuration: { ...this.config }\n    };\n  }\n\n  /**\n   * Load schemas from generated schema files\n   */\n  public async loadGeneratedSchemas(): Promise<void> {\n    try {\n      // In a real implementation, this would load from the generated schema files\n      // For now, we'll register some basic schemas manually\n      \n      // Basic GitHub User schema\n      this.registerSchema('GitHubUser', {\n        type: 'object',\n        required: ['login', 'id', 'avatar_url'],\n        properties: {\n          login: { type: 'string', format: 'github-username' },\n          id: { type: 'number' },\n          avatar_url: { type: 'string', format: 'uri' },\n          name: { type: ['string', 'null'] },\n          email: { type: ['string', 'null'], format: 'email' }\n        }\n      });\n\n      // Basic SushiConfig schema\n      this.registerSchema('SushiConfig', {\n        type: 'object',\n        properties: {\n          id: { type: 'string', format: 'dak-id' },\n          version: { type: 'string', format: 'semver' },\n          dependencies: {\n            type: 'object',\n            properties: {\n              'smart.who.int.base': { type: 'string' }\n            }\n          }\n        }\n      });\n\n    } catch (error) {\n      console.warn('Failed to load generated schemas:', error);\n    }\n  }\n\n  /**\n   * Clear all registered schemas and validators\n   */\n  public clearSchemas(): void {\n    this.schemas.clear();\n    this.validators.clear();\n  }\n}\n\n// Export singleton instance\nexport const runtimeValidationService = new RuntimeValidationService();\nexport default runtimeValidationService;","import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport enhancedDAKValidationService from '../services/enhancedDAKValidationService';\nimport dakValidationRegistry, { DAK_COMPONENTS, VALIDATION_LEVELS } from '../services/dakValidationRegistry';\nimport runtimeValidationService from '../services/runtimeValidationService';\nimport { \n  FormattedValidationResults, \n  DAKValidationResult, \n  ValidationSummary, \n  GitHubRepository,\n  GitHubUser \n} from '../types/core';\nimport './ValidationPanel.css';\n\n// Component props interface\ninterface ValidationPanelProps {\n  repository?: GitHubRepository | any; // Allow existing structure during migration\n  profile?: GitHubUser | any; // Allow existing structure during migration\n  selectedBranch?: string;\n  onValidationComplete?: (results: FormattedValidationResults) => void;\n}\n\n// Validation history entry interface\ninterface ValidationHistoryEntry {\n  timestamp: number;\n  component: string;\n  summary: ValidationSummary;\n  canSave: boolean;\n  totalIssues: number;\n}\n\n// Get component for file based on path patterns\nconst getComponentForFile = (filePath: string): string => {\n  if (filePath.endsWith('sushi-config.yaml')) return 'dak-structure';\n  if (filePath.endsWith('.bpmn')) return 'business-processes';\n  if (filePath.endsWith('.dmn')) return 'decision-support-logic';\n  if (filePath.includes('questionnaire')) return 'core-data-elements';\n  if (filePath.includes('measure')) return 'indicators';\n  if (filePath.includes('test') || filePath.endsWith('.feature')) return 'test-scenarios';\n  if (filePath.includes('requirement')) return 'requirements';\n  return 'file-structure';\n};\n\nconst ValidationPanel: React.FC<ValidationPanelProps> = ({ \n  repository, \n  profile, \n  selectedBranch, \n  onValidationComplete \n}) => {\n  const { t } = useTranslation();\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n  const [isValidating, setIsValidating] = useState<boolean>(false);\n  const [validationResults, setValidationResults] = useState<FormattedValidationResults | null>(null);\n  const [selectedComponent, setSelectedComponent] = useState<string>('all');\n  const [validationHistory, setValidationHistory] = useState<ValidationHistoryEntry[]>([]);\n\n  // Get validation summary for component overview\n  const componentSummary = dakValidationRegistry.getComponentSummary();\n\n  // Handle validation execution\n  const runValidation = async (component: string = 'all'): Promise<void> => {\n    if (!repository || !profile) {\n      console.warn('Cannot run validation without repository and profile');\n      return;\n    }\n\n    setIsValidating(true);\n    setSelectedComponent(component);\n\n    try {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repo = repository.name;\n      const branch = selectedBranch || repository.default_branch || 'main';\n\n      // Validate repository data with runtime validation\n      if (runtimeValidationService.hasType('GitHubRepository')) {\n        const repoValidation = runtimeValidationService.validate('GitHubRepository', repository);\n        if (!repoValidation.isValid) {\n          console.warn('Repository data validation warnings:', repoValidation.warnings);\n        }\n      }\n\n      let results: FormattedValidationResults;\n      \n      if (component === 'all') {\n        // Validate entire DAK\n        results = await enhancedDAKValidationService.validateDAK(owner, repo, branch);\n      } else {\n        // Validate specific component\n        const files = await enhancedDAKValidationService.getDAKFiles(owner, repo, branch);\n        const componentFiles = files.filter(file => \n          getComponentForFile(file.path) === component\n        );\n        results = await enhancedDAKValidationService.validateComponent(component, componentFiles);\n      }\n\n      // Validate each result with runtime validation if available\n      if (runtimeValidationService.hasType('DAKValidationResult')) {\n        Object.values(results.byComponent).flat().forEach(result => {\n          const validation = runtimeValidationService.validate('DAKValidationResult', result);\n          if (!validation.isValid) {\n            console.warn('Validation result type safety warning:', validation.errors);\n          }\n        });\n      }\n\n      setValidationResults(results);\n      \n      // Add to history\n      const historyEntry: ValidationHistoryEntry = {\n        timestamp: Date.now(),\n        component,\n        summary: results.summary,\n        canSave: results.canSave,\n        totalIssues: results.total\n      };\n      \n      setValidationHistory(prev => [historyEntry, ...prev.slice(0, 4)]); // Keep last 5\n\n      // Notify parent if callback provided\n      if (onValidationComplete) {\n        onValidationComplete(results);\n      }\n\n    } catch (error: any) {\n      console.error('Validation failed:', error);\n      setValidationResults({\n        error: `Validation failed: ${error.message}`,\n        summary: { error: 1, warning: 0, info: 0 },\n        byComponent: {},\n        byFile: {},\n        canSave: false,\n        total: 1\n      });\n    } finally {\n      setIsValidating(false);\n    }\n  };\n\n  // Format validation level for display\n  const formatLevel = (level: string): string => {\n    return t(`validation.levels.${level}`, level);\n  };\n\n  // Get level icon\n  const getLevelIcon = (level: string): string => {\n    switch (level) {\n      case VALIDATION_LEVELS.ERROR: return '🚫';\n      case VALIDATION_LEVELS.WARNING: return '⚠️';\n      case VALIDATION_LEVELS.INFO: return 'ℹ️';\n      default: return '❓';\n    }\n  };\n\n  // Get level color class\n  const getLevelClass = (level: string): string => {\n    switch (level) {\n      case VALIDATION_LEVELS.ERROR: return 'validation-error';\n      case VALIDATION_LEVELS.WARNING: return 'validation-warning'; \n      case VALIDATION_LEVELS.INFO: return 'validation-info';\n      default: return 'validation-unknown';\n    }\n  };\n\n  // Format timestamp for display\n  const formatTimestamp = (timestamp: number): string => {\n    return new Date(timestamp).toLocaleTimeString();\n  };\n\n  // Auto-run validation when repository changes\n  useEffect(() => {\n    if (repository && profile && !isValidating) {\n      runValidation('all');\n    }\n  }, [repository?.name, repository?.owner?.login, selectedBranch, isValidating, profile, runValidation]);\n\n  // Get total issues count for summary\n  const getTotalIssues = (): number => {\n    if (!validationResults) return 0;\n    return validationResults.summary.error + validationResults.summary.warning + validationResults.summary.info;\n  };\n\n  // Render validation result item\n  const renderValidationResult = (result: DAKValidationResult, index: number): React.ReactElement => (\n    <div key={`${result.validationId}-${index}`} className={`validation-result ${getLevelClass(result.level)}`}>\n      <div className=\"validation-result-header\">\n        <span className=\"validation-icon\">{getLevelIcon(result.level)}</span>\n        <span className=\"validation-level\">{formatLevel(result.level)}</span>\n        <span className=\"validation-component\">{DAK_COMPONENTS[result.component]?.name || result.component}</span>\n      </div>\n      <div className=\"validation-result-content\">\n        <div className=\"validation-message\">{result.message}</div>\n        <div className=\"validation-file\">{result.filePath}</div>\n        {result.line && (\n          <div className=\"validation-location\">\n            Line {result.line}{result.column && `, Column ${result.column}`}\n          </div>\n        )}\n        {result.suggestion && (\n          <div className=\"validation-suggestion\">\n            <strong>Suggestion:</strong> {result.suggestion}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  // Render validation results by component\n  const renderResultsByComponent = (): React.ReactElement => {\n    if (!validationResults || !validationResults.byComponent) {\n      return <div className=\"no-results\">No validation results available</div>;\n    }\n\n    return (\n      <div className=\"validation-results-by-component\">\n        {Object.entries(validationResults.byComponent).map(([componentId, results]) => (\n          <div key={componentId} className=\"component-validation-section\">\n            <h4 className=\"component-title\">\n              {DAK_COMPONENTS[componentId]?.name || componentId} ({results.length})\n            </h4>\n            <div className=\"component-results\">\n              {results.map((result, index) => renderValidationResult(result, index))}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  // Render component selector\n  const renderComponentSelector = (): React.ReactElement => (\n    <div className=\"component-selector\">\n      <label htmlFor=\"component-select\">Validate Component:</label>\n      <select\n        id=\"component-select\"\n        value={selectedComponent}\n        onChange={(e) => setSelectedComponent(e.target.value)}\n        disabled={isValidating}\n      >\n        <option value=\"all\">All Components</option>\n        {Object.entries(DAK_COMPONENTS).map(([id, component]) => (\n          <option key={id} value={id}>\n            {component.name} ({componentSummary[id]?.validationCount || 0} validations)\n          </option>\n        ))}\n      </select>\n      <button\n        className=\"validate-button\"\n        onClick={() => runValidation(selectedComponent)}\n        disabled={isValidating || !repository || !profile}\n      >\n        {isValidating ? 'Validating...' : 'Run Validation'}\n      </button>\n    </div>\n  );\n\n  // Render validation summary\n  const renderValidationSummary = (): React.ReactElement | null => {\n    if (!validationResults) return null;\n\n    const { summary } = validationResults;\n    const hasIssues = summary.error > 0 || summary.warning > 0 || summary.info > 0;\n\n    return (\n      <div className=\"validation-summary\">\n        <div className=\"summary-header\">\n          <h3>Validation Summary</h3>\n          <div className={`save-indicator ${validationResults.canSave ? 'can-save' : 'cannot-save'}`}>\n            {validationResults.canSave ? '✅ Can Save' : '❌ Cannot Save'}\n          </div>\n        </div>\n        \n        {hasIssues ? (\n          <div className=\"summary-counts\">\n            {summary.error > 0 && (\n              <span className=\"summary-count summary-error\">\n                🚫 {summary.error} Errors\n              </span>\n            )}\n            {summary.warning > 0 && (\n              <span className=\"summary-count summary-warning\">\n                ⚠️ {summary.warning} Warnings\n              </span>\n            )}\n            {summary.info > 0 && (\n              <span className=\"summary-count summary-info\">\n                ℹ️ {summary.info} Info\n              </span>\n            )}\n          </div>\n        ) : (\n          <div className=\"summary-success\">\n            ✅ All validations passed!\n          </div>\n        )}\n        \n        {validationResults.metadata && (\n          <div className=\"validation-metadata\">\n            <small>\n              {validationResults.metadata.filesValidated} files validated\n              {validationResults.metadata.validatedAt && \n                ` at ${new Date(validationResults.metadata.validatedAt).toLocaleTimeString()}`\n              }\n            </small>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Render validation history\n  const renderValidationHistory = (): React.ReactElement | null => {\n    if (validationHistory.length === 0) return null;\n\n    return (\n      <div className=\"validation-history\">\n        <h4>Recent Validations</h4>\n        <div className=\"history-list\">\n          {validationHistory.map((entry, index) => (\n            <div key={`${entry.timestamp}-${index}`} className=\"history-entry\">\n              <div className=\"history-header\">\n                <span className=\"history-component\">\n                  {entry.component === 'all' ? 'All Components' : DAK_COMPONENTS[entry.component]?.name || entry.component}\n                </span>\n                <span className=\"history-time\">{formatTimestamp(entry.timestamp)}</span>\n              </div>\n              <div className=\"history-summary\">\n                <span className={`history-save-status ${entry.canSave ? 'can-save' : 'cannot-save'}`}>\n                  {entry.canSave ? '✅' : '❌'}\n                </span>\n                <span className=\"history-counts\">\n                  {entry.summary.error > 0 && `🚫 ${entry.summary.error} `}\n                  {entry.summary.warning > 0 && `⚠️ ${entry.summary.warning} `}\n                  {entry.summary.info > 0 && `ℹ️ ${entry.summary.info} `}\n                  {entry.totalIssues === 0 && 'All passed'}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"validation-panel\">\n      <div \n        className=\"validation-panel-header\" \n        onClick={() => setIsExpanded(!isExpanded)}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            setIsExpanded(!isExpanded);\n          }\n        }}\n        role=\"button\"\n        tabIndex={0}\n        aria-expanded={isExpanded}\n        aria-label={isExpanded ? 'Collapse validation panel' : 'Expand validation panel'}\n      >\n        <h2 className=\"validation-panel-title\">\n          DAK Validation \n          {validationResults && (\n            <span className=\"validation-count\">\n              ({getTotalIssues()} issues)\n            </span>\n          )}\n        </h2>\n        <button className=\"expand-button\" aria-label=\"Toggle validation panel\">\n          {isExpanded ? '🔽' : '🔼'}\n        </button>\n      </div>\n\n      {isExpanded && (\n        <div className=\"validation-panel-content\">\n          {renderComponentSelector()}\n          \n          {validationResults?.error && (\n            <div className=\"validation-error-message\">\n              <strong>Error:</strong> {validationResults.error}\n            </div>\n          )}\n          \n          {renderValidationSummary()}\n          \n          {isValidating && (\n            <div className=\"validation-loading\">\n              <div className=\"loading-spinner\">⏳</div>\n              <span>Running validation...</span>\n            </div>\n          )}\n          \n          {!isValidating && validationResults && !validationResults.error && (\n            <div className=\"validation-results\">\n              <h3>Validation Results</h3>\n              {renderResultsByComponent()}\n            </div>\n          )}\n          \n          {renderValidationHistory()}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ValidationPanel;","import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport githubService from '../services/githubService';\nimport dakValidationService from '../services/dakValidationService';\nimport branchContextService from '../services/branchContextService';\nimport HelpButton from './HelpButton';\nimport DAKStatusBox from './DAKStatusBox';\nimport Publications from './Publications';\nimport ValidationPanel from './ValidationPanel';\nimport ForkStatusBar from './ForkStatusBar';\nimport { PageLayout } from './framework';\nimport { handleNavigationClick } from '../utils/navigationUtils';\nimport useThemeImage from '../hooks/useThemeImage';\nimport { ALT_TEXT_KEYS, getAltText } from '../utils/imageAltTextHelper';\n\nconst DAKDashboard = () => {\n  return (\n    <PageLayout pageName=\"dak-dashboard\">\n      <DAKDashboardContent />\n    </PageLayout>\n  );\n};\n\nconst DAKDashboardContent = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user, repo, branch } = useParams();\n  \n  // Theme-aware mascot image for dialog\n  const mascotImage = useThemeImage('sgex-mascot.png');\n  \n  // Try to get data from location.state first, then from URL params\n  const [profile, setProfile] = useState(location.state?.profile || null);\n  const [repository, setRepository] = useState(location.state?.repository || null);\n  const [loading, setLoading] = useState(!profile || !repository);\n  const [error, setError] = useState(null);\n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n  const [showPermissionDialog, setShowPermissionDialog] = useState(false);\n  const [activeTab, setActiveTab] = useState('core'); // 'core' or 'publications'\n  const [selectedBranch, setSelectedBranch] = useState(location.state?.selectedBranch || branch || null);\n  const [issueCounts, setIssueCounts] = useState({});\n  const [showUserMenu, setShowUserMenu] = useState(false);\n\n  // Component Card component defined within the dashboard\n  const ComponentCard = ({ component, handleComponentClick, t }) => {\n    const [imageLoaded, setImageLoaded] = useState(false);\n    const [imageError, setImageError] = useState(false);\n    \n    // Use the theme-aware image hook here instead of in the map function\n    const cardImagePath = useThemeImage(component.cardImage);\n\n    const handleImageLoad = () => {\n      setImageLoaded(true);\n      setImageError(false);\n    };\n\n    const handleImageError = () => {\n      setImageError(true);\n      setImageLoaded(false);\n    };\n\n    return (\n      <div \n        className={`component-card ${component.type.toLowerCase()} large-card ${imageLoaded ? 'image-loaded' : ''}`}\n        onClick={(event) => handleComponentClick(event, component)}\n        style={{ '--component-color': component.color }}\n        tabIndex={0}\n        role=\"button\"\n        aria-label={`${component.name} - ${component.description}`}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            handleComponentClick(event, component);\n          }\n        }}\n      >\n        <div className=\"component-header\">\n          <div className=\"component-image-container\">\n            <img \n              src={cardImagePath}\n              alt={getAltText(t, ALT_TEXT_KEYS.ICON_DAK_COMPONENT, component.name, { name: component.name })}\n              className=\"component-card-image\"\n              onLoad={handleImageLoad}\n              onError={handleImageError}\n              style={{ display: imageError ? 'none' : 'block' }}\n            />\n            {/* Fallback icon when image fails to load */}\n            {imageError && (\n              <div className=\"component-icon\" style={{ color: component.color }}>\n                {component.icon}\n              </div>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"component-content\">\n          {/* Only show title text if image failed to load or as screen reader backup */}\n          <h4 className={imageLoaded && !imageError ? 'visually-hidden' : ''}>\n            {component.name}\n          </h4>\n          <p className={imageLoaded && !imageError ? 'visually-hidden' : ''}>\n            {component.description}\n          </p>\n          \n          <div className=\"component-meta\">\n            <div className=\"file-types\">\n              {component.fileTypes.map((type) => (\n                <span key={type} className=\"file-type-tag\">{type}</span>\n              ))}\n            </div>\n            <div className=\"file-count\">\n              {component.count} files\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Fetch data from URL parameters if not available in location.state\n  useEffect(() => {\n    const fetchDataFromUrlParams = async () => {\n      if ((!profile || !repository) && user && repo) {\n        try {\n          setLoading(true);\n          setError(null);\n\n          // Check if githubService is authenticated (allow demo mode to proceed without auth)\n          if (!githubService.isAuth()) {\n            // In demo mode, use the DAK validation service for demo repositories\n            if (window.location.pathname.includes('/dashboard/')) {\n              const isValidDAK = dakValidationService.validateDemoDAKRepository(user, repo);\n              \n              if (!isValidDAK) {\n                navigate('/', { \n                  state: { \n                    warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n                  } \n                });\n                return;\n              }\n\n              const demoProfile = {\n                login: user,\n                name: user.charAt(0).toUpperCase() + user.slice(1),\n                avatar_url: `https://github.com/${user}.png`,\n                type: 'User',\n                isDemo: true\n              };\n\n              const demoRepository = {\n                name: repo,\n                full_name: `${user}/${repo}`,\n                owner: { login: user },\n                default_branch: branch || 'main',\n                html_url: `https://github.com/${user}/${repo}`,\n                isDemo: true\n              };\n\n              setProfile(demoProfile);\n              setRepository(demoRepository);\n              setSelectedBranch(branch || 'main');\n              setLoading(false);\n              return;\n            } else {\n              setError(t('auth.authRequired'));\n              setLoading(false);\n              return;\n            }\n          }\n\n          // Fetch user profile\n          let userProfile = null;\n          try {\n            const userResponse = await githubService.getUser(user);\n            userProfile = userResponse;\n          } catch (err) {\n            console.error('Error fetching user:', err);\n            // Redirect to landing page with warning message\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. User '${user}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Fetch repository\n          let repoData = null;\n          try {\n            const repoResponse = await githubService.getRepository(user, repo);\n            repoData = repoResponse;\n          } catch (err) {\n            console.error('Error fetching repository:', err);\n            // Redirect to landing page with warning message\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Validate that this is actually a DAK repository\n          const isValidDAK = await dakValidationService.validateDAKRepository(user, repo, branch || repoData.default_branch);\n          \n          if (!isValidDAK) {\n            console.log(`Repository ${user}/${repo} is not a valid DAK repository`);\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Validate branch if specified\n          if (branch) {\n            try {\n              await githubService.getBranch(user, repo, branch);\n              setSelectedBranch(branch);\n            } catch (err) {\n              console.warn(`Branch '${branch}' not found, falling back to default branch`);\n              setSelectedBranch(repoData.default_branch);\n            }\n          } else {\n            setSelectedBranch(repoData.default_branch);\n          }\n\n          setProfile(userProfile);\n          setRepository(repoData);\n          setLoading(false);\n        } catch (err) {\n          console.error('Error fetching data from URL params:', err);\n          setError('Failed to load dashboard data. Please check the URL or try again.');\n          setLoading(false);\n        }\n      } else {\n        setLoading(false);\n      }\n    };\n\n    fetchDataFromUrlParams();\n  }, [user, repo, branch, profile, repository, navigate, t]);\n\n  // Initialize selected branch from session context\n  useEffect(() => {\n    if (repository) {\n      const storedBranch = branchContextService.getSelectedBranch(repository);\n      if (storedBranch) {\n        setSelectedBranch(storedBranch);\n      } else if (profile && profile.login === 'demo-user') {\n        // For demo mode, set a default branch\n        const defaultBranch = repository.default_branch || 'main';\n        setSelectedBranch(defaultBranch);\n        branchContextService.setSelectedBranch(repository, defaultBranch);\n      }\n    }\n  }, [repository, profile]);\n\n  // Load issue counts for repository\n  const loadIssueCounts = async () => {\n    if (!repository) return;\n    \n    try {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      \n      // Get all issues (includes pull requests in GitHub API)\n      const issues = await githubService.getIssues(owner, repoName, {\n        state: 'all',\n        per_page: 100\n      });\n      \n      // Filter out pull requests to get actual issues\n      const actualIssues = issues.filter(issue => !issue.pull_request);\n      \n      // Count issues by state\n      const openIssues = actualIssues.filter(issue => issue.state === 'open').length;\n      const closedIssues = actualIssues.filter(issue => issue.state === 'closed').length;\n      \n      setIssueCounts({\n        total: actualIssues.length,\n        open: openIssues,\n        closed: closedIssues\n      });\n    } catch (err) {\n      console.warn('Could not load issue counts:', err);\n      setIssueCounts({ total: 0, open: 0, closed: 0 });\n    }\n  };\n\n  // Load issue counts when repository changes\n  useEffect(() => {\n    if (repository && !loading) {\n      loadIssueCounts();\n    }\n  }, [repository, loading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Check write permissions on mount\n  useEffect(() => {\n    const checkPermissions = async () => {\n      if (repository && profile) {\n        try {\n          const writeAccess = await githubService.checkRepositoryWritePermissions(\n            repository.owner?.login || repository.full_name.split('/')[0],\n            repository.name\n          );\n          setHasWriteAccess(writeAccess);\n        } catch (error) {\n          console.warn('Could not check write permissions:', error);\n          setHasWriteAccess(false);\n        }\n      }\n      setLoading(false);\n    };\n\n    checkPermissions();\n  }, [repository, profile]);\n\n  // Close user menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (showUserMenu && !event.target.closest('.user-menu-container')) {\n        setShowUserMenu(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showUserMenu]);\n\n\n\n  // Define the 9 core DAK components based on WHO SMART Guidelines documentation\n  const coreDAKComponents = [\n    {\n      id: 'health-interventions',\n      name: t('dak.healthInterventions'),\n      description: 'Clinical guidelines and health intervention specifications that define evidence-based care recommendations',\n      icon: '📖',\n      cardImage: 'dashboard/dak_interventions.png',\n      type: 'L2',\n      color: '#0078d4',\n      fileTypes: ['IRIS', 'Publication'],\n      count: 5,\n      editor: 'Publication reference manager with IRIS integration'\n    },\n    {\n      id: 'generic-personas',\n      name: t('dak.genericPersonas'),\n      description: 'Standardized user roles and actor definitions that represent different types of healthcare workers and patients',\n      icon: '👥',\n      cardImage: 'dashboard/dak_personas.png',\n      type: 'L2',\n      color: '#107c10',\n      fileTypes: ['Actor', 'Role'],\n      count: 8,\n      editor: 'Persona definition editor with role-based access specifications'\n    },\n    {\n      id: 'user-scenarios',\n      name: t('dak.userScenarios'),\n      description: 'Narrative descriptions of how different personas interact with the system in specific healthcare contexts',\n      icon: '📝',\n      cardImage: 'dashboard/dak_user_scenarios.png',\n      type: 'L2',\n      color: '#881798',\n      fileTypes: ['Narrative', 'Use Case'],\n      count: 12,\n      editor: 'Scenario editor with workflow visualization'\n    },\n    {\n      id: 'business-processes',\n      name: t('dak.businessProcesses'),\n      description: 'BPMN workflows and business process definitions that model clinical workflows and care pathways',\n      icon: '🔄',\n      cardImage: 'dashboard/dak_business_processes.png',\n      type: 'L2',\n      color: '#d13438',\n      fileTypes: ['BPMN', 'XML'],\n      count: 15,\n      editor: 'Graphical BPMN editor with SVG visualization'\n    },\n    {\n      id: 'core-data-elements',\n      name: t('dak.coreDataElements'),\n      description: 'Essential data structures and terminology needed for clinical data capture and exchange (includes Terminology Services via OCL and Product Master Data via PCMT)',\n      icon: '🗃️',\n      cardImage: 'dashboard/dak_core_data_elements.png',\n      type: 'L2',\n      color: '#ff8c00',\n      fileTypes: ['OCL', 'Concept', 'PCMT', 'Product'],\n      count: issueCounts.total || 89,\n      editor: 'Data element editor with OCL and PCMT integration'\n    },\n    {\n      id: 'decision-support',\n      name: t('dak.decisionSupportLogic'),\n      description: 'DMN decision tables and clinical decision support rules that encode clinical logic',\n      icon: '🎯',\n      cardImage: 'dashboard/dak_decision_support_logic.png',\n      type: 'L2',\n      color: '#00bcf2',\n      fileTypes: ['DMN', 'XML'],\n      count: 24,\n      editor: 'DMN decision table editor with validation'\n    },\n    {\n      id: 'program-indicators',\n      name: t('dak.programIndicators'),\n      description: 'Performance indicators and measurement definitions for monitoring and evaluation',\n      icon: '📊',\n      cardImage: 'dashboard/dak_indicators.png',\n      type: 'L2',\n      color: '#498205',\n      fileTypes: ['Measure', 'Logic'],\n      count: 18,\n      editor: 'Indicator definition editor with measurement logic'\n    },\n    {\n      id: 'functional-requirements',\n      name: t('dak.requirements'),\n      description: 'System requirements specifications that define capabilities and constraints',\n      icon: '⚙️',\n      cardImage: 'dashboard/dak_requirements.png',\n      type: 'L2',\n      color: '#6b69d6',\n      fileTypes: ['Requirements', 'Specification'],\n      count: 32,\n      editor: 'Requirements editor with structured templates'\n    },\n    {\n      id: 'test-scenarios',\n      name: t('dak.testScenarios') || 'Test Scenarios',\n      description: 'Feature files and test scenarios for validating the DAK implementation',\n      icon: '🧪',\n      cardImage: 'dashboard/dak_testing.png',\n      type: 'L2',\n      color: '#8b5cf6',\n      fileTypes: ['Feature', 'Test'],\n      count: 0,\n      editor: 'Testing viewer with feature file browser'\n    }\n  ];\n\n\n\n  const handleComponentClick = (event, component) => {\n    const navigationState = {\n      profile,\n      repository,\n      component,\n      selectedBranch\n    };\n    \n    // For decision-support, always navigate to view page (no permission check needed)\n    if (component.id === 'decision-support') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/decision-support-logic/${owner}/${repoName}/${selectedBranch}`\n        : `/decision-support-logic/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For business processes, navigate to selection page without permission check\n    if (component.id === 'business-processes') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/business-process-selection/${owner}/${repoName}/${selectedBranch}`\n        : `/business-process-selection/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n\n\n    // For health-interventions (WHO Digital Library), allow access in read-only mode\n    if (component.id === 'health-interventions') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/health-interventions/${owner}/${repoName}/${selectedBranch}`\n        : `/health-interventions/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For core-data-elements (Component 2 Core Data Dictionary), navigate to viewer\n    if (component.id === 'core-data-elements') {\n      const owner = user || repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repo || repository.name;\n      const branchName = selectedBranch;\n      \n      const viewerPath = branchName ? \n        `/core-data-dictionary-viewer/${owner}/${repoName}/${branchName}` :\n        `/core-data-dictionary-viewer/${owner}/${repoName}`;\n        \n      handleNavigationClick(event, viewerPath, navigate, navigationState);\n      return;\n    }\n\n\n\n    // For generic-personas, navigate to actor editor\n    if (component.id === 'generic-personas') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/actor-editor/${owner}/${repoName}/${selectedBranch}`\n        : `/actor-editor/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For test-scenarios, navigate to testing viewer\n    if (component.id === 'test-scenarios') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/testing-viewer/${owner}/${repoName}/${selectedBranch}`\n        : `/testing-viewer/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For other components, check permissions before proceeding\n    if (!hasWriteAccess) {\n      // If command-click, still show permission dialog instead of opening new tab\n      // since the user needs to authenticate first\n      setShowPermissionDialog(true);\n      return;\n    }\n\n    // Navigate to component-specific routes for other components\n    const owner = repository.owner?.login || repository.full_name.split('/')[0];\n    const repoName = repository.name;\n    const path = selectedBranch \n      ? `/${component.id}/${owner}/${repoName}/${selectedBranch}`\n      : `/${component.id}/${owner}/${repoName}`;\n    \n    handleNavigationClick(event, path, navigate, navigationState);\n  };\n\n\n\n  if (loading) {\n    return (\n      <div className=\"dak-dashboard loading-state\">\n        <div className=\"loading-content\">\n          <h2>Loading Dashboard...</h2>\n          <p>Fetching repository and user data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dak-dashboard error-state\">\n        <div className=\"error-content\">\n          <h2>{t('dashboard.errorLoading')}</h2>\n          <p>{error}</p>\n          <div className=\"error-actions\">\n            <button onClick={() => navigate('/')} className=\"action-btn primary\">\n              {t('navigation.home')}\n            </button>\n            <button onClick={() => window.location.reload()} className=\"action-btn secondary\">\n              {t('common.retry')}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!profile || !repository) {\n    navigate('/');\n    return <div>Redirecting...</div>;\n  }\n\n  return (\n    <div className=\"dak-dashboard\">\n      <div className=\"dashboard-content\">\n        <div className=\"dashboard-main\">\n          <div className=\"dashboard-intro\">\n            <h2>{t('dak.components')}</h2>\n            <p>\n              Select a component to edit content for <strong>{repository.name}</strong>\n              {selectedBranch && (\n                <span> on branch <code className=\"branch-display\">{selectedBranch}</code></span>\n              )}. \n              Components are organized according to the WHO SMART Guidelines framework.\n            </p>\n          </div>\n\n          {/* Fork Status Bar - shows forks of sgex repository */}\n          <ForkStatusBar \n            profile={profile}\n            repository={repository}\n            selectedBranch={selectedBranch}\n          />\n\n          {/* DAK Status Box - only show when repository and branch are selected */}\n          {repository && selectedBranch && (\n            <DAKStatusBox \n              repository={repository}\n              selectedBranch={selectedBranch}\n              hasWriteAccess={hasWriteAccess}\n              profile={profile}\n            />\n          )}\n\n          {/* Tab Navigation - Full Width Toggle Buttons */}\n          <div className=\"tab-navigation-fullwidth\">\n            <button \n              className={`tab-button-fullwidth ${activeTab === 'core' ? 'active' : ''}`}\n              onClick={() => setActiveTab('core')}\n            >\n              <span className=\"tab-icon\">⭐</span>\n              <span className=\"tab-text\">9 Core Components</span>\n            </button>\n            <button\n              className={`tab-button-fullwidth ${activeTab === 'publications' ? 'active' : ''}`}\n              onClick={() => setActiveTab('publications')}\n            >\n              <span className=\"tab-icon\">📚</span>\n              <span className=\"tab-text\">Publications</span>\n            </button>\n            <button\n              className={`tab-button-fullwidth ${activeTab === 'other' ? 'active' : ''}`}\n              onClick={() => setActiveTab('other')}\n            >\n              <span className=\"tab-icon\">🔧</span>\n              <span className=\"tab-text\">Other DAK Components</span>\n            </button>\n          </div>\n\n          {/* 9 Core DAK Components Section */}\n          {activeTab === 'core' && (\n            <div className=\"components-section active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">{t('dak.components')}</h3>\n                <p className=\"section-description\">\n                  Essential components that form the foundation of any WHO SMART Guidelines Digital Adaptation Kit\n                </p>\n              </div>\n\n              <div className=\"components-grid core-components\">\n                {coreDAKComponents.map((component) => {\n                  return (\n                    <ComponentCard\n                      key={component.id}\n                      component={component}\n                      handleComponentClick={handleComponentClick}\n                      t={t}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Other DAK Components Section */}\n          {activeTab === 'other' && (\n            <div className=\"components-section other-components active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">Other DAK Components</h3>\n                <p className=\"section-description\">\n                  Additional specialized components for advanced DAK functionality and implementation\n                </p>\n              </div>\n\n              <div className=\"components-grid other-components\">\n                <div \n                  className=\"component-card l3\"\n                  onClick={(event) => {\n                    const component = {\n                      id: 'questionnaire-editor',\n                      name: 'FHIR Questionnaires',\n                      description: 'Structured questionnaires and forms for data collection using FHIR standard'\n                    };\n                    const owner = repository.owner?.login || repository.full_name.split('/')[0];\n                    const repoName = repository.name;\n                    const path = selectedBranch \n                      ? `/questionnaire-editor/${owner}/${repoName}/${selectedBranch}`\n                      : `/questionnaire-editor/${owner}/${repoName}`;\n                    \n                    const navigationState = {\n                      profile,\n                      repository,\n                      component,\n                      selectedBranch\n                    };\n                    \n                    handleNavigationClick(event, path, navigate, navigationState);\n                  }}\n                  style={{ '--component-color': '#17a2b8' }}\n                >\n                  <div className=\"component-header\">\n                    <div className=\"component-icon\" style={{ color: '#17a2b8' }}>\n                      📋\n                    </div>\n                  </div>\n                  \n                  <div className=\"component-content\">\n                    <h4>FHIR Questionnaires</h4>\n                    <p>Structured questionnaires and forms for data collection using FHIR Questionnaire standard</p>\n                    \n                    <div className=\"component-meta\">\n                      <div className=\"file-types\">\n                        <span className=\"file-type-tag\">JSON</span>\n                        <span className=\"file-type-tag\">FHIR</span>\n                      </div>\n                      <div className=\"file-count\">\n                        questionnaires/\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Publications Section */}\n          {activeTab === 'publications' && (\n            <div className=\"components-section publications-section active\">\n              <Publications\n                profile={profile}\n                repository={repository}\n                selectedBranch={selectedBranch}\n                hasWriteAccess={hasWriteAccess}\n              />\n            </div>\n          )}\n          \n          {/* DAK Validation Panel */}\n          <ValidationPanel\n            repository={repository}\n            profile={profile}\n            selectedBranch={selectedBranch}\n            onValidationComplete={(results) => {\n              console.log('Validation completed:', results);\n              // Could integrate with notifications or status updates here\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Permission Upgrade Dialog */}\n      {showPermissionDialog && (\n        <div className=\"permission-dialog-overlay\">\n          <div className=\"permission-dialog\">\n            <div className=\"dialog-header\">\n              <h3>Edit Access Required</h3>\n              <button \n                className=\"dialog-close\"\n                onClick={() => setShowPermissionDialog(false)}\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"dialog-content\">\n              <div className=\"dialog-mascot\">\n                <img src={mascotImage} alt={getAltText(t, ALT_TEXT_KEYS.MASCOT_HELPER, 'SGEX Helper')} className=\"dialog-mascot-img\" />\n                <div className=\"mascot-message\">\n                  <p>You need edit permissions to modify DAK components!</p>\n                  <p>Your current token only provides read access to this repository.</p>\n                </div>\n              </div>\n              <div className=\"permission-options\">\n                <div className=\"option-card\">\n                  <h4>🔧 Upgrade Your Token</h4>\n                  <p>Create a new fine-grained token with write permissions for this repository.</p>\n                  <div className=\"option-buttons\">\n                    <a \n                      href=\"https://github.com/settings/personal-access-tokens/new\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"btn-primary\"\n                    >\n                      Create New Token\n                    </a>\n                    <HelpButton \n                      helpTopic=\"github-token\"\n                      contextData={{ \n                        repository: { owner: repository.owner?.login || repository.full_name.split('/')[0], name: repository.name },\n                        requiredScopes: ['Contents: Write', 'Metadata: Read', 'Pull requests: Write'],\n                        permissionMode: 'edit',\n                        upgradeMode: true\n                      }}\n                    />\n                  </div>\n                </div>\n                <div className=\"option-card\">\n                  <h4>👁️ Continue in Read-Only Mode</h4>\n                  <p>Browse and view DAK components without editing capabilities.</p>\n                  <button \n                    className=\"btn-secondary\"\n                    onClick={() => setShowPermissionDialog(false)}\n                  >\n                    Continue Read-Only\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DAKDashboard;","import type {Format, FormatDefinition} from \"ajv\"\nimport type {FormatValidator, FormatCompare} from \"ajv/dist/types\"\n\nexport type FormatMode = \"fast\" | \"full\"\n\nexport type FormatName =\n  | \"date\"\n  | \"time\"\n  | \"date-time\"\n  | \"iso-time\"\n  | \"iso-date-time\"\n  | \"duration\"\n  | \"uri\"\n  | \"uri-reference\"\n  | \"uri-template\"\n  | \"url\"\n  | \"email\"\n  | \"hostname\"\n  | \"ipv4\"\n  | \"ipv6\"\n  | \"regex\"\n  | \"uuid\"\n  | \"json-pointer\"\n  | \"json-pointer-uri-fragment\"\n  | \"relative-json-pointer\"\n  | \"byte\"\n  | \"int32\"\n  | \"int64\"\n  | \"float\"\n  | \"double\"\n  | \"password\"\n  | \"binary\"\n\nexport type DefinedFormats = {\n  [key in FormatName]: Format\n}\n\nfunction fmtDef(\n  validate: RegExp | FormatValidator<string>,\n  compare: FormatCompare<string>\n): FormatDefinition<string> {\n  return {validate, compare}\n}\n\nexport const fullFormats: DefinedFormats = {\n  // date: http://tools.ietf.org/html/rfc3339#section-5.6\n  date: fmtDef(date, compareDate),\n  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6\n  time: fmtDef(getTime(true), compareTime),\n  \"date-time\": fmtDef(getDateTime(true), compareDateTime),\n  \"iso-time\": fmtDef(getTime(), compareIsoTime),\n  \"iso-date-time\": fmtDef(getDateTime(), compareIsoDateTime),\n  // duration: https://tools.ietf.org/html/rfc3339#appendix-A\n  duration: /^P(?!$)((\\d+Y)?(\\d+M)?(\\d+D)?(T(?=\\d)(\\d+H)?(\\d+M)?(\\d+S)?)?|(\\d+W)?)$/,\n  uri,\n  \"uri-reference\":\n    /^(?:[a-z][a-z0-9+\\-.]*:)?(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'\"()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\\?(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,\n  // uri-template: https://tools.ietf.org/html/rfc6570\n  \"uri-template\":\n    /^(?:(?:[^\\x00-\\x20\"'<>%\\\\^`{|}]|%[0-9a-f]{2})|\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?)*\\})*$/i,\n  // For the source: https://gist.github.com/dperini/729294\n  // For test cases: https://mathiasbynens.be/demo/url-regex\n  url: /^(?:https?|ftp):\\/\\/(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)(?:\\.(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu,\n  email:\n    /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,\n  hostname:\n    /^(?=.{1,253}\\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\\.?$/i,\n  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html\n  ipv4: /^(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)$/,\n  ipv6: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))$/i,\n  regex,\n  // uuid: http://tools.ietf.org/html/rfc4122\n  uuid: /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,\n  // JSON-pointer: https://tools.ietf.org/html/rfc6901\n  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A\n  \"json-pointer\": /^(?:\\/(?:[^~/]|~0|~1)*)*$/,\n  \"json-pointer-uri-fragment\": /^#(?:\\/(?:[a-z0-9_\\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,\n  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00\n  \"relative-json-pointer\": /^(?:0|[1-9][0-9]*)(?:#|(?:\\/(?:[^~/]|~0|~1)*)*)$/,\n  // the following formats are used by the openapi specification: https://spec.openapis.org/oas/v3.0.0#data-types\n  // byte: https://github.com/miguelmota/is-base64\n  byte,\n  // signed 32 bit integer\n  int32: {type: \"number\", validate: validateInt32},\n  // signed 64 bit integer\n  int64: {type: \"number\", validate: validateInt64},\n  // C-type float\n  float: {type: \"number\", validate: validateNumber},\n  // C-type double\n  double: {type: \"number\", validate: validateNumber},\n  // hint to the UI to hide input strings\n  password: true,\n  // unchecked string payload\n  binary: true,\n}\n\nexport const fastFormats: DefinedFormats = {\n  ...fullFormats,\n  date: fmtDef(/^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d$/, compareDate),\n  time: fmtDef(\n    /^(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)$/i,\n    compareTime\n  ),\n  \"date-time\": fmtDef(\n    /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\dt(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)$/i,\n    compareDateTime\n  ),\n  \"iso-time\": fmtDef(\n    /^(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)?$/i,\n    compareIsoTime\n  ),\n  \"iso-date-time\": fmtDef(\n    /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d[t\\s](?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)?$/i,\n    compareIsoDateTime\n  ),\n  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js\n  uri: /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/)?[^\\s]*$/i,\n  \"uri-reference\": /^(?:(?:[a-z][a-z0-9+\\-.]*:)?\\/?\\/)?(?:[^\\\\\\s#][^\\s#]*)?(?:#[^\\\\\\s]*)?$/i,\n  // email (sources from jsen validator):\n  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363\n  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'wilful violation')\n  email:\n    /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,\n}\n\nexport const formatNames = Object.keys(fullFormats) as FormatName[]\n\nfunction isLeapYear(year: number): boolean {\n  // https://tools.ietf.org/html/rfc3339#appendix-C\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0)\n}\n\nconst DATE = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/\nconst DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\nfunction date(str: string): boolean {\n  // full-date from http://tools.ietf.org/html/rfc3339#section-5.6\n  const matches: string[] | null = DATE.exec(str)\n  if (!matches) return false\n  const year: number = +matches[1]\n  const month: number = +matches[2]\n  const day: number = +matches[3]\n  return (\n    month >= 1 &&\n    month <= 12 &&\n    day >= 1 &&\n    day <= (month === 2 && isLeapYear(year) ? 29 : DAYS[month])\n  )\n}\n\nfunction compareDate(d1: string, d2: string): number | undefined {\n  if (!(d1 && d2)) return undefined\n  if (d1 > d2) return 1\n  if (d1 < d2) return -1\n  return 0\n}\n\nconst TIME = /^(\\d\\d):(\\d\\d):(\\d\\d(?:\\.\\d+)?)(z|([+-])(\\d\\d)(?::?(\\d\\d))?)?$/i\n\nfunction getTime(strictTimeZone?: boolean): (str: string) => boolean {\n  return function time(str: string): boolean {\n    const matches: string[] | null = TIME.exec(str)\n    if (!matches) return false\n    const hr: number = +matches[1]\n    const min: number = +matches[2]\n    const sec: number = +matches[3]\n    const tz: string | undefined = matches[4]\n    const tzSign: number = matches[5] === \"-\" ? -1 : 1\n    const tzH: number = +(matches[6] || 0)\n    const tzM: number = +(matches[7] || 0)\n    if (tzH > 23 || tzM > 59 || (strictTimeZone && !tz)) return false\n    if (hr <= 23 && min <= 59 && sec < 60) return true\n    // leap second\n    const utcMin = min - tzM * tzSign\n    const utcHr = hr - tzH * tzSign - (utcMin < 0 ? 1 : 0)\n    return (utcHr === 23 || utcHr === -1) && (utcMin === 59 || utcMin === -1) && sec < 61\n  }\n}\n\nfunction compareTime(s1: string, s2: string): number | undefined {\n  if (!(s1 && s2)) return undefined\n  const t1 = new Date(\"2020-01-01T\" + s1).valueOf()\n  const t2 = new Date(\"2020-01-01T\" + s2).valueOf()\n  if (!(t1 && t2)) return undefined\n  return t1 - t2\n}\n\nfunction compareIsoTime(t1: string, t2: string): number | undefined {\n  if (!(t1 && t2)) return undefined\n  const a1 = TIME.exec(t1)\n  const a2 = TIME.exec(t2)\n  if (!(a1 && a2)) return undefined\n  t1 = a1[1] + a1[2] + a1[3]\n  t2 = a2[1] + a2[2] + a2[3]\n  if (t1 > t2) return 1\n  if (t1 < t2) return -1\n  return 0\n}\n\nconst DATE_TIME_SEPARATOR = /t|\\s/i\nfunction getDateTime(strictTimeZone?: boolean): (str: string) => boolean {\n  const time = getTime(strictTimeZone)\n\n  return function date_time(str: string): boolean {\n    // http://tools.ietf.org/html/rfc3339#section-5.6\n    const dateTime: string[] = str.split(DATE_TIME_SEPARATOR)\n    return dateTime.length === 2 && date(dateTime[0]) && time(dateTime[1])\n  }\n}\n\nfunction compareDateTime(dt1: string, dt2: string): number | undefined {\n  if (!(dt1 && dt2)) return undefined\n  const d1 = new Date(dt1).valueOf()\n  const d2 = new Date(dt2).valueOf()\n  if (!(d1 && d2)) return undefined\n  return d1 - d2\n}\n\nfunction compareIsoDateTime(dt1: string, dt2: string): number | undefined {\n  if (!(dt1 && dt2)) return undefined\n  const [d1, t1] = dt1.split(DATE_TIME_SEPARATOR)\n  const [d2, t2] = dt2.split(DATE_TIME_SEPARATOR)\n  const res = compareDate(d1, d2)\n  if (res === undefined) return undefined\n  return res || compareTime(t1, t2)\n}\n\nconst NOT_URI_FRAGMENT = /\\/|:/\nconst URI =\n  /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\\?(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i\n\nfunction uri(str: string): boolean {\n  // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required \".\"\n  return NOT_URI_FRAGMENT.test(str) && URI.test(str)\n}\n\nconst BYTE = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm\n\nfunction byte(str: string): boolean {\n  BYTE.lastIndex = 0\n  return BYTE.test(str)\n}\n\nconst MIN_INT32 = -(2 ** 31)\nconst MAX_INT32 = 2 ** 31 - 1\n\nfunction validateInt32(value: number): boolean {\n  return Number.isInteger(value) && value <= MAX_INT32 && value >= MIN_INT32\n}\n\nfunction validateInt64(value: number): boolean {\n  // JSON and javascript max Int is 2**53, so any int that passes isInteger is valid for Int64\n  return Number.isInteger(value)\n}\n\nfunction validateNumber(): boolean {\n  return true\n}\n\nconst Z_ANCHOR = /[^\\\\]\\\\Z/\nfunction regex(str: string): boolean {\n  if (Z_ANCHOR.test(str)) return false\n  try {\n    new RegExp(str)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n","import {\n  DefinedFormats,\n  FormatMode,\n  FormatName,\n  formatNames,\n  fastFormats,\n  fullFormats,\n} from \"./formats\"\nimport formatLimit from \"./limit\"\nimport type Ajv from \"ajv\"\nimport type {Plugin, Format} from \"ajv\"\nimport {_, Name} from \"ajv/dist/compile/codegen\"\n\nexport {FormatMode, FormatName} from \"./formats\"\nexport {LimitFormatError} from \"./limit\"\nexport interface FormatOptions {\n  mode?: FormatMode\n  formats?: FormatName[]\n  keywords?: boolean\n}\n\nexport type FormatsPluginOptions = FormatName[] | FormatOptions\n\nexport interface FormatsPlugin extends Plugin<FormatsPluginOptions> {\n  get: (format: FormatName, mode?: FormatMode) => Format\n}\n\nconst fullName = new Name(\"fullFormats\")\nconst fastName = new Name(\"fastFormats\")\n\nconst formatsPlugin: FormatsPlugin = (\n  ajv: Ajv,\n  opts: FormatsPluginOptions = {keywords: true}\n): Ajv => {\n  if (Array.isArray(opts)) {\n    addFormats(ajv, opts, fullFormats, fullName)\n    return ajv\n  }\n  const [formats, exportName] =\n    opts.mode === \"fast\" ? [fastFormats, fastName] : [fullFormats, fullName]\n  const list = opts.formats || formatNames\n  addFormats(ajv, list, formats, exportName)\n  if (opts.keywords) formatLimit(ajv)\n  return ajv\n}\n\nformatsPlugin.get = (name: FormatName, mode: FormatMode = \"full\"): Format => {\n  const formats = mode === \"fast\" ? fastFormats : fullFormats\n  const f = formats[name]\n  if (!f) throw new Error(`Unknown format \"${name}\"`)\n  return f\n}\n\nfunction addFormats(ajv: Ajv, list: FormatName[], fs: DefinedFormats, exportName: Name): void {\n  ajv.opts.code.formats ??= _`require(\"ajv-formats/dist/formats\").${exportName}`\n  for (const f of list) ajv.addFormat(f, fs[f])\n}\n\nmodule.exports = exports = formatsPlugin\nObject.defineProperty(exports, \"__esModule\", {value: true})\n\nexport default formatsPlugin\n","import type Ajv from \"ajv\"\nimport type {\n  Plugin,\n  CodeKeywordDefinition,\n  KeywordErrorDefinition,\n  Code,\n  Name,\n  ErrorObject,\n} from \"ajv\"\nimport type {AddedFormat} from \"ajv/dist/types\"\nimport type {Rule} from \"ajv/dist/compile/rules\"\nimport {KeywordCxt} from \"ajv\"\nimport {_, str, or, getProperty, operators} from \"ajv/dist/compile/codegen\"\n\ntype Kwd = \"formatMaximum\" | \"formatMinimum\" | \"formatExclusiveMaximum\" | \"formatExclusiveMinimum\"\n\ntype Comparison = \"<=\" | \">=\" | \"<\" | \">\"\n\nconst ops = operators\n\nconst KWDs: {[K in Kwd]: {okStr: Comparison; ok: Code; fail: Code}} = {\n  formatMaximum: {okStr: \"<=\", ok: ops.LTE, fail: ops.GT},\n  formatMinimum: {okStr: \">=\", ok: ops.GTE, fail: ops.LT},\n  formatExclusiveMaximum: {okStr: \"<\", ok: ops.LT, fail: ops.GTE},\n  formatExclusiveMinimum: {okStr: \">\", ok: ops.GT, fail: ops.LTE},\n}\n\nexport type LimitFormatError = ErrorObject<Kwd, {limit: string; comparison: Comparison}>\n\nconst error: KeywordErrorDefinition = {\n  message: ({keyword, schemaCode}) => str`should be ${KWDs[keyword as Kwd].okStr} ${schemaCode}`,\n  params: ({keyword, schemaCode}) =>\n    _`{comparison: ${KWDs[keyword as Kwd].okStr}, limit: ${schemaCode}}`,\n}\n\nexport const formatLimitDefinition: CodeKeywordDefinition = {\n  keyword: Object.keys(KWDs),\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {gen, data, schemaCode, keyword, it} = cxt\n    const {opts, self} = it\n    if (!opts.validateFormats) return\n\n    const fCxt = new KeywordCxt(it, (self.RULES.all.format as Rule).definition, \"format\")\n    if (fCxt.$data) validate$DataFormat()\n    else validateFormat()\n\n    function validate$DataFormat(): void {\n      const fmts = gen.scopeValue(\"formats\", {\n        ref: self.formats,\n        code: opts.code.formats,\n      })\n      const fmt = gen.const(\"fmt\", _`${fmts}[${fCxt.schemaCode}]`)\n      cxt.fail$data(\n        or(\n          _`typeof ${fmt} != \"object\"`,\n          _`${fmt} instanceof RegExp`,\n          _`typeof ${fmt}.compare != \"function\"`,\n          compareCode(fmt)\n        )\n      )\n    }\n\n    function validateFormat(): void {\n      const format = fCxt.schema as string\n      const fmtDef: AddedFormat | undefined = self.formats[format]\n      if (!fmtDef || fmtDef === true) return\n      if (\n        typeof fmtDef != \"object\" ||\n        fmtDef instanceof RegExp ||\n        typeof fmtDef.compare != \"function\"\n      ) {\n        throw new Error(`\"${keyword}\": format \"${format}\" does not define \"compare\" function`)\n      }\n      const fmt = gen.scopeValue(\"formats\", {\n        key: format,\n        ref: fmtDef,\n        code: opts.code.formats ? _`${opts.code.formats}${getProperty(format)}` : undefined,\n      })\n\n      cxt.fail$data(compareCode(fmt))\n    }\n\n    function compareCode(fmt: Name): Code {\n      return _`${fmt}.compare(${data}, ${schemaCode}) ${KWDs[keyword as Kwd].fail} 0`\n    }\n  },\n  dependencies: [\"format\"],\n}\n\nconst formatLimitPlugin: Plugin<undefined> = (ajv: Ajv): Ajv => {\n  ajv.addKeyword(formatLimitDefinition)\n  return ajv\n}\n\nexport default formatLimitPlugin\n"],"names":["_ref","helpTopic","contextData","showHelp","setShowHelp","useState","mascotImage","useThemeImage","_jsxs","_Fragment","children","_jsx","className","onClick","handleHelpClick","title","src","alt","HelpModal","topic","onClose","handleCloseHelp","dakSushiBase","id","component","level","fileTypes","descriptionKey","description","validate","filePath","content","context","endsWith","config","yaml","dependencies","validationId","message","line","findLineNumber","column","suggestion","error","_error$mark","_error$mark2","concat","mark","searchTerm","lines","split","i","length","includes","trimmedContent","trim","startsWith","isJSONContent","JSON","parse","lineMatch","match","columnMatch","positionMatch","parseInt","position","substring","isBPMNContent","businessRuleTaskRegex","matches","firstMatch","matchIndex","indexOf","lineNumber","isDMNContent","decisionRegex","Array","from","matchAll","decisionTag","hasId","test","hasLabel","index","missing","push","join","map","attr","isXMLContent","parser","DOMParser","parserError","parseFromString","querySelector","errorText","textContent","fileName","pop","getFileNameFromPath","skipFiles","isValidFileName","isRecommendedNaming","hasUppercase","hasUnderscore","dmnReferences","bpmnContent","references","dmnRefRegex","exec","extractDMNReferences","dmnFiles","dakFiles","filter","file","path","availableDecisions","forEach","dmnFile","decisions","dmnContent","extractDMNDecisions","missingReferences","ref","DAK_COMPONENTS","name","VALIDATION_LEVELS","constructor","validations","Map","componentValidations","this","initializeValidations","jsonValid","bpmnBusinessRuleTaskId","dmnDecisionLabelId","xmlWellFormed","fileNamingConventions","dmnBpmnCrossReference","validation","registerValidation","console","log","size","Error","has","warn","set","get","getAllValidations","values","getValidation","getValidationsForComponent","getValidationsForFileType","fileType","getValidationsByLevel","getComponentSummary","summary","Object","_objectSpread","validationCount","errorCount","v","warningCount","infoCount","validateFile","arguments","undefined","fileExtension","getFileExtension","applicableValidations","results","result","validateByComponent","files","parts","toLowerCase","canSave","validationResults","some","formatResults","warning","info","byComponent","byFile","total","registry","dakValidationRegistry","cache","cacheTimeout","validateDAK","owner","repo","branch","options","cacheKey","forceRefresh","cached","Date","now","timestamp","getDAKFiles","githubService","allResults","fileResults","formattedResults","metadata","filesValidated","validatedAt","toISOString","validationFrameworkVersion","validateComponent","validateStagingGround","stagingGround","canUpload","getValidationSummary","runValidation","canSaveFiles","getEditorValidation","fileTypeValidations","relevantValidationsSet","Set","relevantValidations","authenticated","getDAKFilesRecursive","contents","getDirectoryContents","item","type","isRelevantFile","getFileContent","sha","extension","clearCache","clear","getCacheStats","entries","keys","_config$strict","_config$throwOnError","_config$coerceTypes","_config$removeAdditio","ajv","schemas","validators","strict","throwOnError","coerceTypes","removeAdditional","Ajv","allErrors","verbose","loadSchema","bind","addFormats","addCustomFormats","addFormat","data","registerSchema","typeName","schema","validator","compile","uri","code","value","isValid","errors","warnings","_error$keyword","validationError","keyword","toUpperCase","instancePath","schemaPath","isWarningError","formatName","validateDAKConfig","success","e","validateGitHubRepository","validateAuthenticationState","validateBatch","dataItems","hasType","getValidationStats","registeredSchemas","compiledValidators","configuration","loadGeneratedSchemas","required","properties","login","format","avatar_url","email","version","clearSchemas","_repository$owner2","repository","profile","selectedBranch","onValidationComplete","t","useTranslation","isExpanded","setIsExpanded","isValidating","setIsValidating","setValidationResults","selectedComponent","setSelectedComponent","validationHistory","setValidationHistory","componentSummary","async","_repository$owner","full_name","default_branch","runtimeValidationService","repoValidation","enhancedDAKValidationService","componentFiles","getComponentForFile","flat","historyEntry","totalIssues","prev","slice","getLevelIcon","getLevelClass","useEffect","onKeyDown","key","preventDefault","role","tabIndex","htmlFor","onChange","target","disabled","_ref3","_componentSummary$id","renderValidationSummary","hasIssues","toLocaleTimeString","_ref2","_DAK_COMPONENTS$compo","componentId","renderValidationResult","_DAK_COMPONENTS$resul","entry","_DAK_COMPONENTS$entry","DAKDashboardContent","_location$state","_location$state2","_location$state3","_repository$owner1","location","useLocation","navigate","useNavigate","user","useParams","setProfile","state","setRepository","loading","setLoading","setError","hasWriteAccess","setHasWriteAccess","showPermissionDialog","setShowPermissionDialog","activeTab","setActiveTab","setSelectedBranch","issueCounts","setIssueCounts","showUserMenu","setShowUserMenu","ComponentCard","handleComponentClick","imageLoaded","setImageLoaded","imageError","setImageError","cardImagePath","cardImage","event","style","color","getAltText","ALT_TEXT_KEYS","ICON_DAK_COMPONENT","onLoad","handleImageLoad","onError","handleImageError","display","icon","count","isAuth","window","pathname","dakValidationService","validateDemoDAKRepository","warningMessage","demoProfile","charAt","isDemo","demoRepository","html_url","userProfile","getUser","err","repoData","getRepository","validateDAKRepository","getBranch","fetchDataFromUrlParams","storedBranch","branchContextService","getSelectedBranch","defaultBranch","repoName","actualIssues","getIssues","per_page","issue","pull_request","openIssues","closedIssues","open","closed","loadIssueCounts","writeAccess","checkRepositoryWritePermissions","checkPermissions","handleClickOutside","closest","document","addEventListener","removeEventListener","coreDAKComponents","editor","_repository$owner9","navigationState","_repository$owner3","handleNavigationClick","_repository$owner4","_repository$owner5","_repository$owner6","branchName","viewerPath","_repository$owner7","_repository$owner8","reload","ForkStatusBar","DAKStatusBox","_repository$owner0","Publications","ValidationPanel","MASCOT_HELPER","href","rel","HelpButton","requiredScopes","permissionMode","upgradeMode","DAKDashboard","PageLayout","pageName","fmtDef","compare","exports","date","compareDate","time","getTime","compareTime","getDateTime","compareDateTime","compareIsoTime","compareIsoDateTime","duration","str","NOT_URI_FRAGMENT","URI","url","hostname","ipv4","ipv6","regex","Z_ANCHOR","RegExp","uuid","byte","BYTE","lastIndex","int32","Number","isInteger","MAX_INT32","MIN_INT32","int64","float","validateNumber","double","password","binary","fullFormats","DATE","DAYS","year","month","day","isLeapYear","d1","d2","TIME","strictTimeZone","hr","min","sec","tz","tzSign","tzH","tzM","utcMin","utcHr","s1","s2","t1","valueOf","t2","a1","a2","DATE_TIME_SEPARATOR","dateTime","dt1","dt2","res","formats_1","require","limit_1","codegen_1","fullName","Name","fastName","formatsPlugin","opts","keywords","isArray","formats","exportName","mode","fastFormats","formatNames","default","list","fs","_a","_b","_","_templateObject","_taggedTemplateLiteral","f","module","defineProperty","ajv_1","ops","operators","KWDs","formatMaximum","okStr","ok","LTE","fail","GT","formatMinimum","GTE","LT","formatExclusiveMaximum","formatExclusiveMinimum","schemaCode","params","_templateObject2","schemaType","$data","cxt","gen","it","self","validateFormats","fCxt","KeywordCxt","RULES","all","definition","compareCode","fmt","_templateObject8","fmts","scopeValue","const","_templateObject3","fail$data","or","_templateObject4","_templateObject5","_templateObject6","validate$DataFormat","_templateObject7","getProperty","validateFormat","addKeyword","formatLimitDefinition"],"sourceRoot":""}