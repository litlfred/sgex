{"version":3,"file":"static/js/781.a53fa5ff.chunk.js","mappings":"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","sources":["components/HelpButton.js","services/validations/dak-sushi-base.ts","services/validations/bpmn-business-rule-task-id.ts","services/validations/dmn-decision-label-id.ts","services/validations/dmn-bpmn-cross-reference.ts","services/validations/xml-well-formed.ts","services/validations/json-valid.ts","services/validations/file-naming-conventions.ts","services/dakValidationRegistry.js","services/enhancedDAKValidationService.js","components/ValidationPanel.tsx","components/DAKDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport HelpModal from './HelpModal';\nimport useThemeImage from '../hooks/useThemeImage';\n\nconst HelpButton = ({ helpTopic, contextData = {} }) => {\n  const [showHelp, setShowHelp] = useState(false);\n\n  // Theme-aware mascot image\n  const mascotImage = useThemeImage('sgex-mascot.png');\n\n  const handleHelpClick = () => {\n    setShowHelp(true);\n  };\n\n  const handleCloseHelp = () => {\n    setShowHelp(false);\n  };\n\n  return (\n    <>\n      <button \n        className=\"help-button\"\n        onClick={handleHelpClick}\n        title=\"Get Help\"\n        aria-label=\"Get Help\"\n      >\n        <img \n          src={mascotImage} \n          alt=\"SGEX Helper\" \n          className=\"help-mascot-icon\"\n        />\n      </button>\n      \n      {showHelp && (\n        <HelpModal\n          topic={helpTopic}\n          contextData={contextData}\n          onClose={handleCloseHelp}\n        />\n      )}\n    </>\n  );\n};\n\nexport default HelpButton;","/**\n * DAK-SUSHI-BASE Validation\n * \n * A DAK IG SHALL have smart.who.int.base as a dependency\n */\n\nimport * as yaml from 'js-yaml';\nimport { ValidationDefinition, ValidationContext, DAKValidationResult, SushiConfig } from '../../types/core';\n\nconst dakSushiBase: ValidationDefinition = {\n  id: 'dak-sushi-base',\n  component: 'dak-structure',\n  level: 'error',\n  fileTypes: ['yaml'],\n  descriptionKey: 'validation.dak.sushiBase.description',\n  description: 'DAK IG SHALL have smart.who.int.base as a dependency',\n  \n  async validate(filePath: string, content: string, context: ValidationContext): Promise<DAKValidationResult | null> {\n    // Only validate sushi-config.yaml files\n    if (!filePath.endsWith('sushi-config.yaml')) {\n      return null;\n    }\n    \n    try {\n      const config = yaml.load(content) as SushiConfig;\n      \n      if (!config || typeof config !== 'object') {\n        return {\n          validationId: 'dak-sushi-base',\n          component: 'dak-structure',\n          level: 'error',\n          description: 'DAK IG SHALL have smart.who.int.base as a dependency',\n          filePath,\n          message: 'sushi-config.yaml must contain a valid YAML object',\n          line: 1,\n          column: 1,\n          suggestion: 'Ensure the file contains proper YAML object structure'\n        };\n      }\n      \n      // Check for dependencies section\n      if (!config.dependencies || typeof config.dependencies !== 'object') {\n        return {\n          validationId: 'dak-sushi-base',\n          component: 'dak-structure',\n          level: 'error',\n          description: 'DAK IG SHALL have smart.who.int.base as a dependency',\n          filePath,\n          message: 'sushi-config.yaml missing dependencies section',\n          line: dakSushiBase.findLineNumber ? dakSushiBase.findLineNumber(content, 'dependencies') || 1 : 1,\n          column: 1,\n          suggestion: 'Add dependencies section with smart.who.int.base dependency'\n        };\n      }\n      \n      // Check for smart.who.int.base dependency\n      if (!config.dependencies['smart.who.int.base']) {\n        return {\n          validationId: 'dak-sushi-base',\n          component: 'dak-structure',\n          level: 'error',\n          description: 'DAK IG SHALL have smart.who.int.base as a dependency',\n          filePath,\n          message: 'Missing required smart.who.int.base dependency',\n          line: dakSushiBase.findLineNumber ? dakSushiBase.findLineNumber(content, 'dependencies') || 1 : 1,\n          column: 1,\n          suggestion: 'Add \"smart.who.int.base: current\" to dependencies section'\n        };\n      }\n      \n      return null; // Valid\n      \n    } catch (error: any) {\n      return {\n        validationId: 'dak-sushi-base',\n        component: 'dak-structure',\n        level: 'error',\n        description: 'DAK IG SHALL have smart.who.int.base as a dependency',\n        filePath,\n        message: `YAML parsing error: ${error.message}`,\n        line: error.mark?.line || 1,\n        column: error.mark?.column || 1,\n        suggestion: 'Fix YAML syntax errors'\n      };\n    }\n  },\n  \n  findLineNumber(content: string, searchTerm: string): number | null {\n    const lines = content.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n      if (lines[i].includes(searchTerm)) {\n        return i + 1;\n      }\n    }\n    return null;\n  }\n};\n\n// Add metadata for reference\nexport const metadata = {\n  standard: 'WHO SMART Guidelines',\n  reference: 'https://smart.who.int/ig-starter-kit/authoring_conventions.html',\n  severity: 'critical'\n};\n\nexport default dakSushiBase;","/**\n * BPMN-BUSINESS-RULE-TASK-ID Validation (TypeScript)\n * \n * In BPMN diagrams a bpmn:businessRuleTask SHALL have an @id attribute\n */\n\nimport { ValidationDefinition, ValidationContext, DAKValidationResult } from '../../types/core';\n\n// Helper functions\nconst isBPMNContent = (content: string): boolean => {\n  return content.includes('http://www.omg.org/spec/BPMN/') || \n         content.includes('businessRuleTask') ||\n         content.includes('bpmn:');\n};\n\nconst findElementLineNumber = (content: string, element: string, index: number): number => {\n  // Try to find approximate line number by searching for businessRuleTask\n  const lines = content.split('\\n');\n  let foundCount = 0;\n  \n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].includes('businessRuleTask')) {\n      if (foundCount === index) {\n        return i + 1;\n      }\n      foundCount++;\n    }\n  }\n  \n  return 1; // Fallback\n};\n\nconst bpmnBusinessRuleTaskId: ValidationDefinition = {\n  id: 'bpmn-business-rule-task-id',\n  component: 'business-processes',\n  level: 'error',\n  fileTypes: ['bpmn', 'xml'],\n  descriptionKey: 'validation.bpmn.businessRuleTaskId.description',\n  description: 'In BPMN diagrams a bpmn:businessRuleTask SHALL have an @id attribute',\n  \n  async validate(filePath: string, content: string, context: ValidationContext): Promise<DAKValidationResult | null> {\n    // Only validate BPMN files or XML files that contain BPMN content\n    if (!filePath.endsWith('.bpmn') && !filePath.endsWith('.xml') && !isBPMNContent(content)) {\n      return null;\n    }\n    \n    try {\n      // Check for businessRuleTask elements without id\n      const businessRuleTaskRegex = /<bpmn:businessRuleTask(?![^>]*\\sid\\s*=)[^>]*>/g;\n      const matches = content.match(businessRuleTaskRegex);\n      \n      if (matches && matches.length > 0) {\n        // Find the first businessRuleTask without an id\n        const firstMatch = matches[0];\n        const matchIndex = content.indexOf(firstMatch);\n        const lineNumber = content.substring(0, matchIndex).split('\\n').length;\n        \n        return {\n          validationId: 'bpmn-business-rule-task-id',\n          component: 'business-processes',\n          level: 'error',\n          description: 'In BPMN diagrams a bpmn:businessRuleTask SHALL have an @id attribute',\n          filePath,\n          message: `Found ${matches.length} businessRuleTask${matches.length > 1 ? 's' : ''} without required @id attribute`,\n          line: lineNumber,\n          column: 1,\n          suggestion: 'Add id attribute to each bpmn:businessRuleTask element, e.g., <bpmn:businessRuleTask id=\"BusinessRuleTask_1\">'\n        };\n      }\n      \n      return null; // Valid\n      \n    } catch (error: any) {\n      return {\n        validationId: 'bpmn-business-rule-task-id',\n        component: 'business-processes',\n        level: 'error',\n        description: 'In BPMN diagrams a bpmn:businessRuleTask SHALL have an @id attribute',\n        filePath,\n        message: `Error parsing BPMN: ${error.message}`,\n        line: 1,\n        column: 1,\n        suggestion: 'Ensure the BPMN file is well-formed XML'\n      };\n    }\n  },\n  \n  findLineNumber(content: string, searchTerm: string): number | null {\n    const lines = content.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n      if (lines[i].includes(searchTerm)) {\n        return i + 1;\n      }\n    }\n    return null;\n  }\n};\n\n// Add metadata for reference\nexport const metadata = {\n  standard: 'BPMN 2.0',\n  reference: 'http://www.omg.org/spec/BPMN/20100524/BPMN20.xsd',\n  severity: 'critical'\n};\n\nexport default bpmnBusinessRuleTaskId;","/**\n * DMN-DECISION-LABEL-ID Validation (TypeScript)\n * \n * In DMN diagrams, decisions SHALL have both label and id attributes\n */\n\nimport { ValidationDefinition, ValidationContext, DAKValidationResult } from '../../types/core';\n\n// Helper functions\nconst isDMNContent = (content: string): boolean => {\n  return content.includes('http://www.omg.org/spec/DMN/') || \n         content.includes('dmndi:') ||\n         content.includes('dmn:') ||\n         content.includes('decision');\n};\n\nconst findDecisionLineNumber = (content: string, index: number): number => {\n  const lines = content.split('\\n');\n  let foundCount = 0;\n  \n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].includes('<dmn:decision') || lines[i].includes('<decision')) {\n      if (foundCount === index) {\n        return i + 1;\n      }\n      foundCount++;\n    }\n  }\n  \n  return 1; // Fallback\n};\n\nconst dmnDecisionLabelId: ValidationDefinition = {\n  id: 'dmn-decision-label-id',\n  component: 'decision-support-logic',\n  level: 'error',\n  fileTypes: ['dmn', 'xml'],\n  descriptionKey: 'validation.dmn.decisionLabelId.description',\n  description: 'In DMN diagrams, decisions SHALL have both label and id attributes',\n  \n  async validate(filePath: string, content: string, context: ValidationContext): Promise<DAKValidationResult | null> {\n    // Only validate DMN files or XML files that contain DMN content\n    if (!filePath.endsWith('.dmn') && !filePath.endsWith('.xml') && !isDMNContent(content)) {\n      return null;\n    }\n    \n    try {\n      // Check for decision elements without required attributes\n      const decisionRegex = /<dmn:decision[^>]*>/g;\n      const matches = Array.from(content.matchAll(decisionRegex));\n      \n      for (let i = 0; i < matches.length; i++) {\n        const match = matches[i];\n        const decisionTag = match[0];\n        \n        // Check for id attribute\n        const hasId = /\\sid\\s*=\\s*[\"'][^\"']*[\"']/.test(decisionTag);\n        // Check for label attribute\n        const hasLabel = /\\slabel\\s*=\\s*[\"'][^\"']*[\"']/.test(decisionTag);\n        \n        if (!hasId || !hasLabel) {\n          const matchIndex = match.index || 0;\n          const lineNumber = content.substring(0, matchIndex).split('\\n').length;\n          \n          let message = 'Decision element missing required attributes: ';\n          const missing = [];\n          if (!hasId) missing.push('id');\n          if (!hasLabel) missing.push('label');\n          message += missing.join(', ');\n          \n          return {\n            validationId: 'dmn-decision-label-id',\n            component: 'decision-support-logic',\n            level: 'error',\n            description: 'In DMN diagrams, decisions SHALL have both label and id attributes',\n            filePath,\n            message,\n            line: lineNumber,\n            column: 1,\n            suggestion: `Add missing attributes to dmn:decision element: ${missing.map(attr => `${attr}=\"value\"`).join(', ')}`\n          };\n        }\n      }\n      \n      return null; // Valid\n      \n    } catch (error: any) {\n      return {\n        validationId: 'dmn-decision-label-id',\n        component: 'decision-support-logic',\n        level: 'error',\n        description: 'In DMN diagrams, decisions SHALL have both label and id attributes',\n        filePath,\n        message: `Error parsing DMN: ${error.message}`,\n        line: 1,\n        column: 1,\n        suggestion: 'Ensure the DMN file is well-formed XML'\n      };\n    }\n  },\n  \n  findLineNumber(content: string, searchTerm: string): number | null {\n    const lines = content.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n      if (lines[i].includes(searchTerm)) {\n        return i + 1;\n      }\n    }\n    return null;\n  }\n};\n\n// Add metadata for reference\nexport const metadata = {\n  standard: 'DMN 1.3',\n  reference: 'https://www.omg.org/spec/DMN/1.3/',\n  severity: 'critical'\n};\n\nexport default dmnDecisionLabelId;","/**\n * DMN-BPMN-CROSS-REFERENCE Validation (TypeScript)\n * \n * In BPMN business rule tasks that reference DMN files, \n * the referenced DMN decision SHALL exist\n */\n\nimport { ValidationDefinition, ValidationContext, DAKValidationResult, DAKFile } from '../../types/core';\n\n// Helper functions\nconst isBPMNContent = (content: string): boolean => {\n  return content.includes('http://www.omg.org/spec/BPMN/') || \n         content.includes('businessRuleTask') ||\n         content.includes('bpmn:');\n};\n\nconst isDMNContent = (content: string): boolean => {\n  return content.includes('http://www.omg.org/spec/DMN/') || \n         content.includes('dmn:') ||\n         content.includes('<decision');\n};\n\nconst extractDMNReferences = (bpmnContent: string): string[] => {\n  const references: string[] = [];\n  \n  // Look for DMN references in business rule tasks\n  // This is a simplified approach - in practice, you'd want more sophisticated parsing\n  const dmnRefRegex = /dmn[:\\-_]?(?:decision|ref|name)[\\s]*=[\\s]*[\"']([^\"']+)[\"']/gi;\n  let match;\n  \n  while ((match = dmnRefRegex.exec(bpmnContent)) !== null) {\n    references.push(match[1]);\n  }\n  \n  return references;\n};\n\nconst extractDMNDecisions = (dmnContent: string): string[] => {\n  const decisions: string[] = [];\n  \n  // Extract decision IDs and names from DMN content\n  const decisionRegex = /<dmn:decision[^>]+(?:id|name)[\\s]*=[\\s]*[\"']([^\"']+)[\"']/gi;\n  let match;\n  \n  while ((match = decisionRegex.exec(dmnContent)) !== null) {\n    decisions.push(match[1]);\n  }\n  \n  return decisions;\n};\n\nconst dmnBpmnCrossReference: ValidationDefinition = {\n  id: 'dmn-bpmn-cross-reference',\n  component: 'business-processes',\n  level: 'warning',\n  fileTypes: ['bpmn', 'xml'],\n  descriptionKey: 'validation.dmnBpmn.crossReference.description',\n  description: 'In BPMN business rule tasks that reference DMN files, the referenced DMN decision SHALL exist',\n  \n  async validate(filePath: string, content: string, context: ValidationContext): Promise<DAKValidationResult | null> {\n    // Only validate BPMN files that contain business rule tasks\n    if (!filePath.endsWith('.bpmn') && !filePath.endsWith('.xml') && !isBPMNContent(content)) {\n      return null;\n    }\n    \n    // Skip if no business rule tasks are present\n    if (!content.includes('businessRuleTask')) {\n      return null;\n    }\n    \n    try {\n      // Extract DMN references from BPMN content\n      const dmnReferences = extractDMNReferences(content);\n      \n      if (dmnReferences.length === 0) {\n        return null; // No DMN references to validate\n      }\n      \n      // Get all available DMN files from context\n      const dakFiles = context.dakFiles || [];\n      const dmnFiles = dakFiles.filter((file: DAKFile) => \n        file.path.endsWith('.dmn') || isDMNContent(file.content)\n      );\n      \n      if (dmnFiles.length === 0) {\n        return {\n          validationId: 'dmn-bpmn-cross-reference',\n          component: 'business-processes',\n          level: 'warning',\n          description: 'In BPMN business rule tasks that reference DMN files, the referenced DMN decision SHALL exist',\n          filePath,\n          message: `BPMN file references DMN decisions but no DMN files found in DAK`,\n          line: 1,\n          column: 1,\n          suggestion: 'Add the referenced DMN files to the DAK or remove DMN references from business rule tasks'\n        };\n      }\n      \n      // Collect all available DMN decisions\n      const availableDecisions: string[] = [];\n      dmnFiles.forEach((dmnFile: DAKFile) => {\n        const decisions = extractDMNDecisions(dmnFile.content);\n        availableDecisions.push(...decisions);\n      });\n      \n      // Check for missing references\n      const missingReferences = dmnReferences.filter(ref => \n        !availableDecisions.includes(ref)\n      );\n      \n      if (missingReferences.length > 0) {\n        return {\n          validationId: 'dmn-bpmn-cross-reference',\n          component: 'business-processes',\n          level: 'warning',\n          description: 'In BPMN business rule tasks that reference DMN files, the referenced DMN decision SHALL exist',\n          filePath,\n          message: `BPMN references missing DMN decisions: ${missingReferences.join(', ')}`,\n          line: 1,\n          column: 1,\n          suggestion: `Create DMN decisions with IDs: ${missingReferences.join(', ')} or update BPMN references to match existing decisions: ${availableDecisions.join(', ')}`\n        };\n      }\n      \n      return null; // Valid cross-references\n      \n    } catch (error: any) {\n      return {\n        validationId: 'dmn-bpmn-cross-reference',\n        component: 'business-processes',\n        level: 'error',\n        description: 'In BPMN business rule tasks that reference DMN files, the referenced DMN decision SHALL exist',\n        filePath,\n        message: `Error validating DMN-BPMN cross-references: ${error.message}`,\n        line: 1,\n        column: 1,\n        suggestion: 'Check BPMN and DMN file structure and references'\n      };\n    }\n  },\n  \n  findLineNumber(content: string, searchTerm: string): number | null {\n    const lines = content.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n      if (lines[i].includes(searchTerm)) {\n        return i + 1;\n      }\n    }\n    return null;\n  }\n};\n\n// Add metadata for reference\nexport const metadata = {\n  standard: 'BPMN 2.0 + DMN 1.3',\n  reference: 'https://www.omg.org/spec/BPMN/2.0/ and https://www.omg.org/spec/DMN/1.3/',\n  severity: 'medium'\n};\n\nexport default dmnBpmnCrossReference;","/**\n * XML-WELL-FORMED Validation (TypeScript)\n * \n * XML files must be well-formed according to XML 1.0 specification\n */\n\nimport { ValidationDefinition, ValidationContext, DAKValidationResult } from '../../types/core';\n\n// Helper function for checking XML content\nfunction isXMLContent(content: string): boolean {\n  const trimmedContent = content.trim();\n  return trimmedContent.startsWith('<?xml') || \n         trimmedContent.startsWith('<') && \n         (trimmedContent.includes('xmlns') || trimmedContent.includes('<?xml'));\n}\n\nconst xmlWellFormed: ValidationDefinition = {\n  id: 'xml-well-formed',\n  component: 'file-structure',\n  level: 'error',\n  fileTypes: ['xml', 'bpmn', 'dmn'],\n  descriptionKey: 'validation.xml.wellFormed.description',\n  description: 'XML files must be well-formed according to XML 1.0 specification',\n  \n  async validate(filePath: string, content: string, context: ValidationContext): Promise<DAKValidationResult | null> {\n    // Only validate XML-based files\n    if (!filePath.endsWith('.xml') && !filePath.endsWith('.bpmn') && \n        !filePath.endsWith('.dmn') && !isXMLContent(content)) {\n      return null;\n    }\n    \n    try {\n      // Use DOMParser to check if XML is well-formed\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, 'text/xml');\n      \n      // Check for parsing errors\n      const parserError = doc.querySelector('parsererror');\n      if (parserError) {\n        const errorText = parserError.textContent || 'Unknown parsing error';\n        \n        // Try to extract line and column information from error message\n        const lineMatch = errorText.match(/line (\\d+)/i);\n        const columnMatch = errorText.match(/column (\\d+)/i);\n        \n        let line = 1;\n        let column = 1;\n        \n        if (lineMatch) {\n          line = parseInt(lineMatch[1], 10);\n        }\n        \n        if (columnMatch) {\n          column = parseInt(columnMatch[1], 10);\n        }\n        \n        return {\n          validationId: 'xml-well-formed',\n          component: 'file-structure',\n          level: 'error',\n          description: 'XML files must be well-formed according to XML 1.0 specification',\n          filePath,\n          message: `XML parsing error: ${errorText}`,\n          line: line,\n          column: column,\n          suggestion: 'Fix XML syntax errors such as unclosed tags, invalid characters, or malformed attributes'\n        };\n      }\n      \n      return null; // Valid XML\n      \n    } catch (error: any) {\n      // Fallback error handling for environments where DOMParser isn't available\n      return {\n        validationId: 'xml-well-formed',\n        component: 'file-structure',\n        level: 'error',\n        description: 'XML files must be well-formed according to XML 1.0 specification',\n        filePath,\n        message: `XML validation error: ${error.message}`,\n        line: 1,\n        column: 1,\n        suggestion: 'Ensure the XML file follows valid XML 1.0 syntax'\n      };\n    }\n  }\n};\n\n// Add metadata for reference\nexport const metadata = {\n  standard: 'XML 1.0',\n  reference: 'https://www.w3.org/TR/xml/',\n  severity: 'critical'\n};\n\nexport default xmlWellFormed;","/**\n * JSON-VALID Validation\n * \n * JSON files must be valid JSON\n */\n\nimport { ValidationDefinition, ValidationContext, DAKValidationResult } from '../../types/core';\n\n// Helper function for checking JSON content\nfunction isJSONContent(content: string): boolean {\n  const trimmedContent = content.trim();\n  return (trimmedContent.startsWith('{') && trimmedContent.endsWith('}')) ||\n         (trimmedContent.startsWith('[') && trimmedContent.endsWith(']'));\n}\n\nconst jsonValid: ValidationDefinition = {\n  id: 'json-valid',\n  component: 'file-structure',\n  level: 'error',\n  fileTypes: ['json'],\n  descriptionKey: 'validation.json.valid.description',\n  description: 'JSON files must be valid JSON',\n  \n  async validate(filePath: string, content: string, context: ValidationContext): Promise<DAKValidationResult | null> {\n    // Only validate JSON files\n    if (!filePath.endsWith('.json') && !isJSONContent(content)) {\n      return null;\n    }\n    \n    try {\n      JSON.parse(content);\n      return null; // Valid JSON\n      \n    } catch (error: any) {\n      // Extract line and column information from error message\n      const lineMatch = error.message.match(/line (\\d+)/i);\n      const columnMatch = error.message.match(/column (\\d+)/i);\n      const positionMatch = error.message.match(/position (\\d+)/i);\n      \n      let line = 1;\n      let column = 1;\n      \n      if (lineMatch) {\n        line = parseInt(lineMatch[1], 10);\n      } else if (positionMatch) {\n        // Calculate line and column from position\n        const position = parseInt(positionMatch[1], 10);\n        const lines = content.substring(0, position).split('\\n');\n        line = lines.length;\n        column = lines[lines.length - 1].length + 1;\n      }\n      \n      if (columnMatch) {\n        column = parseInt(columnMatch[1], 10);\n      }\n      \n      return {\n        validationId: 'json-valid',\n        component: 'file-structure',\n        level: 'error',\n        description: 'JSON files must be valid JSON',\n        filePath,\n        message: `JSON syntax error: ${error.message}`,\n        line: line,\n        column: column,\n        suggestion: 'Fix JSON syntax errors such as missing commas, quotes, or brackets'\n      };\n    }\n  }\n};\n\n// Add metadata for reference\nexport const metadata = {\n  standard: 'JSON',\n  reference: 'https://www.json.org/',\n  severity: 'critical'\n};\n\nexport default jsonValid;","/**\n * FILE-NAMING-CONVENTIONS Validation (TypeScript)\n * \n * Files SHALL follow WHO SMART Guidelines naming conventions\n */\n\nimport { ValidationDefinition, ValidationContext, DAKValidationResult } from '../../types/core';\n\n// Helper functions for naming validation\nconst isValidFileName = (fileName: string): boolean => {\n  // Check for valid characters (alphanumeric, hyphens, underscores, dots)\n  const validPattern = /^[a-zA-Z0-9._-]+$/;\n  return validPattern.test(fileName);\n};\n\nconst isRecommendedNaming = (fileName: string): boolean => {\n  // Recommended: lowercase with hyphens\n  const recommendedPattern = /^[a-z0-9-]+(\\.[a-z0-9]+)*$/;\n  return recommendedPattern.test(fileName);\n};\n\nconst getFileNameFromPath = (filePath: string): string => {\n  return filePath.split('/').pop() || filePath;\n};\n\nconst fileNamingConventions: ValidationDefinition = {\n  id: 'file-naming-conventions',\n  component: 'file-structure',\n  level: 'warning',\n  fileTypes: ['*'],\n  descriptionKey: 'validation.fileNaming.conventions.description',\n  description: 'Files SHALL follow WHO SMART Guidelines naming conventions',\n  \n  async validate(filePath: string, content: string, context: ValidationContext): Promise<DAKValidationResult | null> {\n    const fileName = getFileNameFromPath(filePath);\n    \n    // Skip validation for certain system files\n    const skipFiles = ['.gitignore', '.npmignore', '.env', '.env.local', '.env.development', '.env.production'];\n    if (skipFiles.includes(fileName)) {\n      return null;\n    }\n    \n    // Skip hidden files and directories\n    if (fileName.startsWith('.') && !skipFiles.includes(fileName)) {\n      return null;\n    }\n    \n    try {\n      // Check for invalid characters\n      if (!isValidFileName(fileName)) {\n        return {\n          validationId: 'file-naming-conventions',\n          component: 'file-structure',\n          level: 'error',\n          description: 'Files SHALL follow WHO SMART Guidelines naming conventions',\n          filePath,\n          message: 'File name contains invalid characters',\n          line: 1,\n          column: 1,\n          suggestion: 'Use only alphanumeric characters, hyphens, underscores, and dots in file names'\n        };\n      }\n      \n      // Check for spaces in file name\n      if (fileName.includes(' ')) {\n        return {\n          validationId: 'file-naming-conventions',\n          component: 'file-structure',\n          level: 'error',\n          description: 'Files SHALL follow WHO SMART Guidelines naming conventions',\n          filePath,\n          message: 'File name contains spaces',\n          line: 1,\n          column: 1,\n          suggestion: 'Replace spaces with hyphens or underscores'\n        };\n      }\n      \n      // Check for uppercase letters (warning level)\n      if (!isRecommendedNaming(fileName)) {\n        const hasUppercase = /[A-Z]/.test(fileName);\n        const hasUnderscore = fileName.includes('_');\n        \n        let message = 'File name does not follow recommended naming conventions';\n        let suggestion = 'Use lowercase letters with hyphens for better consistency';\n        \n        if (hasUppercase) {\n          message = 'File name contains uppercase letters';\n          suggestion = 'Convert to lowercase for better consistency with WHO SMART Guidelines';\n        } else if (hasUnderscore) {\n          message = 'File name uses underscores instead of hyphens';\n          suggestion = 'Consider using hyphens instead of underscores for consistency';\n        }\n        \n        return {\n          validationId: 'file-naming-conventions',\n          component: 'file-structure',\n          level: 'warning',\n          description: 'Files SHALL follow WHO SMART Guidelines naming conventions',\n          filePath,\n          message,\n          line: 1,\n          column: 1,\n          suggestion\n        };\n      }\n      \n      return null; // Valid naming\n      \n    } catch (error: any) {\n      return {\n        validationId: 'file-naming-conventions',\n        component: 'file-structure',\n        level: 'error',\n        description: 'Files SHALL follow WHO SMART Guidelines naming conventions',\n        filePath,\n        message: `Error validating file name: ${error.message}`,\n        line: 1,\n        column: 1,\n        suggestion: 'Check file name format and characters'\n      };\n    }\n  }\n};\n\n// Add metadata for reference\nexport const metadata = {\n  standard: 'WHO SMART Guidelines',\n  reference: 'https://smart.who.int/ig-starter-kit/file_naming.html',\n  severity: 'medium'\n};\n\nexport default fileNamingConventions;","/**\n * DAK Validation Registry\n * \n * Central registry for all DAK validation definitions.\n * Manages validation discovery, registration, and execution.\n */\n\n// Import all validation definitions\nimport dakSushiBase from './validations/dak-sushi-base.ts';\nimport bpmnBusinessRuleTaskId from './validations/bpmn-business-rule-task-id.ts';\nimport dmnDecisionLabelId from './validations/dmn-decision-label-id.ts';\nimport dmnBpmnCrossReference from './validations/dmn-bpmn-cross-reference.ts';\nimport xmlWellFormed from './validations/xml-well-formed.ts';\nimport jsonValid from './validations/json-valid.ts';\nimport fileNamingConventions from './validations/file-naming-conventions.ts';\n\n/**\n * DAK component categories for grouping validations\n */\nexport const DAK_COMPONENTS = {\n  'dak-structure': {\n    id: 'dak-structure',\n    name: 'DAK Structure',\n    description: 'Overall DAK repository structure and configuration'\n  },\n  'business-processes': {\n    id: 'business-processes',\n    name: 'Business Processes',\n    description: 'BPMN workflows and process definitions'\n  },\n  'decision-support-logic': {\n    id: 'decision-support-logic',\n    name: 'Decision Support Logic',\n    description: 'DMN decision tables and business rules'\n  },\n  'core-data-elements': {\n    id: 'core-data-elements',\n    name: 'Core Data Elements',\n    description: 'Terminology and data model definitions'\n  },\n  'indicators': {\n    id: 'indicators',\n    name: 'Program Indicators',\n    description: 'Performance indicators and measures'\n  },\n  'publications': {\n    id: 'publications',\n    name: 'Publications',\n    description: 'Health interventions and recommendations'\n  },\n  'requirements': {\n    id: 'requirements',\n    name: 'Requirements',\n    description: 'Functional and non-functional requirements'\n  },\n  'test-scenarios': {\n    id: 'test-scenarios',\n    name: 'Test Scenarios',\n    description: 'Test cases and validation scenarios'\n  },\n  'personas': {\n    id: 'personas',\n    name: 'Generic Personas',\n    description: 'User roles and actor definitions'\n  },\n  'user-scenarios': {\n    id: 'user-scenarios',\n    name: 'User Scenarios',\n    description: 'Use case narratives and workflows'\n  },\n  'file-structure': {\n    id: 'file-structure',\n    name: 'File Structure',\n    description: 'General file format and structure validations'\n  }\n};\n\n/**\n * Validation severity levels\n */\nexport const VALIDATION_LEVELS = {\n  ERROR: 'error',\n  WARNING: 'warning',\n  INFO: 'info'\n};\n\nclass DAKValidationRegistry {\n  constructor() {\n    this.validations = new Map();\n    this.componentValidations = new Map();\n    this.initializeValidations();\n  }\n\n  /**\n   * Initialize and register all validation definitions\n   */\n  initializeValidations() {\n    const validationDefinitions = [\n      dakSushiBase,\n      bpmnBusinessRuleTaskId,\n      dmnDecisionLabelId,\n      dmnBpmnCrossReference,\n      xmlWellFormed,\n      jsonValid,\n      fileNamingConventions\n    ];\n\n    validationDefinitions.forEach(validation => {\n      this.registerValidation(validation);\n    });\n\n    console.log(`Registered ${this.validations.size} validation definitions`);\n  }\n\n  /**\n   * Register a single validation definition\n   */\n  registerValidation(validation) {\n    if (!validation.id) {\n      throw new Error('Validation must have an id');\n    }\n\n    if (this.validations.has(validation.id)) {\n      console.warn(`Validation ${validation.id} is already registered. Overwriting.`);\n    }\n\n    // Store validation by ID\n    this.validations.set(validation.id, validation);\n\n    // Group by component\n    if (!this.componentValidations.has(validation.component)) {\n      this.componentValidations.set(validation.component, []);\n    }\n    this.componentValidations.get(validation.component).push(validation);\n  }\n\n  /**\n   * Get all validations\n   */\n  getAllValidations() {\n    return Array.from(this.validations.values());\n  }\n\n  /**\n   * Get validation by ID\n   */\n  getValidation(id) {\n    return this.validations.get(id);\n  }\n\n  /**\n   * Get validations for a specific component\n   */\n  getValidationsForComponent(component) {\n    return this.componentValidations.get(component) || [];\n  }\n\n  /**\n   * Get validations applicable to a specific file type\n   */\n  getValidationsForFileType(fileType) {\n    return this.getAllValidations().filter(validation => \n      validation.fileTypes.includes('*') || \n      validation.fileTypes.includes(fileType)\n    );\n  }\n\n  /**\n   * Get validations by severity level\n   */\n  getValidationsByLevel(level) {\n    return this.getAllValidations().filter(validation => \n      validation.level === level\n    );\n  }\n\n  /**\n   * Get all DAK components with their validation counts\n   */\n  getComponentSummary() {\n    const summary = {};\n    \n    Object.values(DAK_COMPONENTS).forEach(component => {\n      const validations = this.getValidationsForComponent(component.id);\n      summary[component.id] = {\n        ...component,\n        validationCount: validations.length,\n        errorCount: validations.filter(v => v.level === VALIDATION_LEVELS.ERROR).length,\n        warningCount: validations.filter(v => v.level === VALIDATION_LEVELS.WARNING).length,\n        infoCount: validations.filter(v => v.level === VALIDATION_LEVELS.INFO).length\n      };\n    });\n\n    return summary;\n  }\n\n  /**\n   * Validate a single file against all applicable validations\n   */\n  async validateFile(filePath, content, context = {}) {\n    const fileExtension = this.getFileExtension(filePath);\n    const applicableValidations = this.getValidationsForFileType(fileExtension);\n    \n    const results = [];\n\n    for (const validation of applicableValidations) {\n      try {\n        const result = await validation.validate(filePath, content, context);\n        \n        if (result) {\n          results.push({\n            validationId: validation.id,\n            component: validation.component,\n            level: validation.level,\n            description: validation.description,\n            filePath: filePath,\n            ...result\n          });\n        }\n      } catch (error) {\n        console.error(`Error running validation ${validation.id}:`, error);\n        results.push({\n          validationId: validation.id,\n          component: validation.component,\n          level: VALIDATION_LEVELS.ERROR,\n          description: 'Validation execution failed',\n          filePath: filePath,\n          message: `Validation error: ${error.message}`,\n          suggestion: 'Contact support if this error persists'\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Validate files grouped by component\n   */\n  async validateByComponent(component, files, context = {}) {\n    const componentValidations = this.getValidationsForComponent(component);\n    const results = [];\n\n    for (const file of files) {\n      for (const validation of componentValidations) {\n        try {\n          const fileExtension = this.getFileExtension(file.path);\n          \n          // Check if validation applies to this file type\n          if (!validation.fileTypes.includes('*') && \n              !validation.fileTypes.includes(fileExtension)) {\n            continue;\n          }\n\n          const result = await validation.validate(file.path, file.content, context);\n          \n          if (result) {\n            results.push({\n              validationId: validation.id,\n              component: validation.component,\n              level: validation.level,\n              description: validation.description,\n              filePath: file.path,\n              ...result\n            });\n          }\n        } catch (error) {\n          console.error(`Error running validation ${validation.id} on ${file.path}:`, error);\n          results.push({\n            validationId: validation.id,\n            component: validation.component,\n            level: VALIDATION_LEVELS.ERROR,\n            description: 'Validation execution failed',\n            filePath: file.path,\n            message: `Validation error: ${error.message}`,\n            suggestion: 'Contact support if this error persists'\n          });\n        }\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get file extension from path\n   */\n  getFileExtension(filePath) {\n    const parts = filePath.split('.');\n    return parts.length > 1 ? parts[parts.length - 1].toLowerCase() : '';\n  }\n\n  /**\n   * Check if validation can save (no error-level violations)\n   */\n  canSave(validationResults) {\n    return !validationResults.some(result => result.level === VALIDATION_LEVELS.ERROR);\n  }\n\n  /**\n   * Format validation results for display\n   */\n  formatResults(validationResults) {\n    const summary = {\n      error: 0,\n      warning: 0,\n      info: 0\n    };\n\n    const byComponent = {};\n    const byFile = {};\n\n    validationResults.forEach(result => {\n      // Update summary counts\n      summary[result.level]++;\n\n      // Group by component\n      if (!byComponent[result.component]) {\n        byComponent[result.component] = [];\n      }\n      byComponent[result.component].push(result);\n\n      // Group by file\n      if (!byFile[result.filePath]) {\n        byFile[result.filePath] = [];\n      }\n      byFile[result.filePath].push(result);\n    });\n\n    return {\n      summary,\n      byComponent,\n      byFile,\n      canSave: this.canSave(validationResults),\n      total: validationResults.length\n    };\n  }\n}\n\n// Create singleton instance\nconst dakValidationRegistry = new DAKValidationRegistry();\n\nexport default dakValidationRegistry;","/**\n * Enhanced DAK Validation Service\n * \n * Main orchestrator for the DAK Validation Framework.\n * Provides high-level validation APIs for DAK repositories, components, and files.\n */\n\nimport dakValidationRegistry, { DAK_COMPONENTS, VALIDATION_LEVELS } from './dakValidationRegistry.js';\nimport githubService from './githubService.js';\n\nclass EnhancedDAKValidationService {\n  constructor() {\n    this.registry = dakValidationRegistry;\n    this.cache = new Map();\n    this.cacheTimeout = 5 * 60 * 1000; // 5 minutes\n  }\n\n  /**\n   * Validate an entire DAK repository\n   */\n  async validateDAK(owner, repo, branch = 'main', options = {}) {\n    const cacheKey = `${owner}/${repo}/${branch}`;\n    \n    // Check cache if not forcing refresh\n    if (!options.forceRefresh && this.cache.has(cacheKey)) {\n      const cached = this.cache.get(cacheKey);\n      if (Date.now() - cached.timestamp < this.cacheTimeout) {\n        return cached.results;\n      }\n    }\n\n    try {\n      // Get all files from the repository\n      const files = await this.getDAKFiles(owner, repo, branch);\n      \n      if (!files || files.length === 0) {\n        return {\n          error: 'Could not retrieve DAK files',\n          summary: { error: 1, warning: 0, info: 0 },\n          byComponent: {},\n          byFile: {},\n          canSave: false,\n          total: 1\n        };\n      }\n\n      // Create validation context\n      const context = {\n        owner,\n        repo,\n        branch,\n        dakFiles: files,\n        githubService: githubService\n      };\n\n      // Run all validations\n      const allResults = [];\n      \n      for (const file of files) {\n        const fileResults = await this.registry.validateFile(file.path, file.content, context);\n        allResults.push(...fileResults);\n      }\n\n      // Format results\n      const formattedResults = this.registry.formatResults(allResults);\n      \n      // Add metadata\n      formattedResults.metadata = {\n        owner,\n        repo,\n        branch,\n        filesValidated: files.length,\n        validatedAt: new Date().toISOString(),\n        validationFrameworkVersion: '1.0.0'\n      };\n\n      // Cache results\n      this.cache.set(cacheKey, {\n        results: formattedResults,\n        timestamp: Date.now()\n      });\n\n      return formattedResults;\n\n    } catch (error) {\n      console.error('Error validating DAK:', error);\n      return {\n        error: `Validation failed: ${error.message}`,\n        summary: { error: 1, warning: 0, info: 0 },\n        byComponent: {},\n        byFile: {},\n        canSave: false,\n        total: 1\n      };\n    }\n  }\n\n  /**\n   * Validate a specific DAK component\n   */\n  async validateComponent(component, files, options = {}) {\n    if (!DAK_COMPONENTS[component]) {\n      throw new Error(`Unknown DAK component: ${component}`);\n    }\n\n    try {\n      // Create validation context\n      const context = {\n        component,\n        dakFiles: files,\n        ...options.context\n      };\n\n      const results = await this.registry.validateByComponent(component, files, context);\n      return this.registry.formatResults(results);\n\n    } catch (error) {\n      console.error(`Error validating component ${component}:`, error);\n      return {\n        error: `Component validation failed: ${error.message}`,\n        summary: { error: 1, warning: 0, info: 0 },\n        byComponent: {},\n        byFile: {},\n        canSave: false,\n        total: 1\n      };\n    }\n  }\n\n  /**\n   * Validate a single file\n   */\n  async validateFile(filePath, content, options = {}) {\n    try {\n      const context = {\n        ...options.context\n      };\n\n      const results = await this.registry.validateFile(filePath, content, context);\n      return this.registry.formatResults(results);\n\n    } catch (error) {\n      console.error(`Error validating file ${filePath}:`, error);\n      return {\n        error: `File validation failed: ${error.message}`,\n        summary: { error: 1, warning: 0, info: 0 },\n        byComponent: {},\n        byFile: {},\n        canSave: false,\n        total: 1\n      };\n    }\n  }\n\n  /**\n   * Validate staging ground files\n   */\n  async validateStagingGround(stagingGround, options = {}) {\n    try {\n      const files = stagingGround.files || [];\n      \n      // Create validation context\n      const context = {\n        stagingGround: true,\n        dakFiles: files,\n        ...options.context\n      };\n\n      const allResults = [];\n      \n      for (const file of files) {\n        const fileResults = await this.registry.validateFile(file.path, file.content, context);\n        allResults.push(...fileResults);\n      }\n\n      const formattedResults = this.registry.formatResults(allResults);\n      \n      // Add staging ground metadata\n      formattedResults.metadata = {\n        stagingGround: true,\n        filesValidated: files.length,\n        validatedAt: new Date().toISOString(),\n        canUpload: formattedResults.canSave\n      };\n\n      return formattedResults;\n\n    } catch (error) {\n      console.error('Error validating staging ground:', error);\n      return {\n        error: `Staging ground validation failed: ${error.message}`,\n        summary: { error: 1, warning: 0, info: 0 },\n        byComponent: {},\n        byFile: {},\n        canSave: false,\n        total: 1\n      };\n    }\n  }\n\n  /**\n   * Get validation summary for dashboard display\n   */\n  getValidationSummary() {\n    return this.registry.getComponentSummary();\n  }\n\n  /**\n   * Get available validations for a component\n   */\n  getValidationsForComponent(component) {\n    return this.registry.getValidationsForComponent(component);\n  }\n\n  /**\n   * Run specific validation by ID\n   */\n  async runValidation(validationId, filePath, content, context = {}) {\n    const validation = this.registry.getValidation(validationId);\n    \n    if (!validation) {\n      throw new Error(`Validation not found: ${validationId}`);\n    }\n\n    try {\n      const result = await validation.validate(filePath, content, context);\n      \n      if (result) {\n        return {\n          validationId: validation.id,\n          component: validation.component,\n          level: validation.level,\n          description: validation.description,\n          filePath: filePath,\n          ...result\n        };\n      }\n\n      return null; // Validation passed\n      \n    } catch (error) {\n      console.error(`Error running validation ${validationId}:`, error);\n      return {\n        validationId: validation.id,\n        component: validation.component,\n        level: VALIDATION_LEVELS.ERROR,\n        description: 'Validation execution failed',\n        filePath: filePath,\n        message: `Validation error: ${error.message}`,\n        suggestion: 'Contact support if this error persists'\n      };\n    }\n  }\n\n  /**\n   * Check if files can be saved (no error-level violations)\n   */\n  async canSaveFiles(files, context = {}) {\n    const allResults = [];\n    \n    for (const file of files) {\n      const fileResults = await this.registry.validateFile(file.path, file.content, context);\n      allResults.push(...fileResults);\n    }\n\n    return this.registry.canSave(allResults);\n  }\n\n  /**\n   * Get real-time validation for editor\n   */\n  async getEditorValidation(filePath, content, component, context = {}) {\n    const fileExtension = this.getFileExtension(filePath);\n    \n    // Get relevant validations for this file and component\n    const componentValidations = this.registry.getValidationsForComponent(component);\n    const fileTypeValidations = this.registry.getValidationsForFileType(fileExtension);\n    \n    // Combine and deduplicate\n    const relevantValidations = new Set([...componentValidations, ...fileTypeValidations]);\n    \n    const results = [];\n    \n    for (const validation of relevantValidations) {\n      try {\n        const result = await validation.validate(filePath, content, context);\n        \n        if (result) {\n          results.push({\n            validationId: validation.id,\n            component: validation.component,\n            level: validation.level,\n            description: validation.description,\n            filePath: filePath,\n            ...result\n          });\n        }\n      } catch (error) {\n        console.error(`Error in editor validation ${validation.id}:`, error);\n        // Don't add error results in real-time validation to avoid noise\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get DAK files from repository\n   */\n  async getDAKFiles(owner, repo, branch = 'main') {\n    try {\n      if (!githubService.isAuth()) {\n        throw new Error('GitHub authentication required');\n      }\n\n      // Get repository tree\n      const tree = await githubService.getRepositoryTree(owner, repo, branch);\n      \n      if (!tree || !tree.tree) {\n        throw new Error('Could not retrieve repository tree');\n      }\n\n      // Filter for relevant files and get their contents\n      const relevantFiles = tree.tree.filter(item => \n        item.type === 'blob' && this.isRelevantFile(item.path)\n      );\n\n      const files = [];\n      \n      // Get file contents (limit to reasonable number to avoid rate limits)\n      const maxFiles = 100;\n      const filesToProcess = relevantFiles.slice(0, maxFiles);\n      \n      for (const file of filesToProcess) {\n        try {\n          const content = await githubService.getFileContent(owner, repo, file.path, branch);\n          \n          if (content) {\n            files.push({\n              path: file.path,\n              content: content,\n              size: file.size,\n              sha: file.sha\n            });\n          }\n        } catch (error) {\n          console.warn(`Could not get content for ${file.path}:`, error.message);\n        }\n      }\n\n      return files;\n\n    } catch (error) {\n      console.error('Error getting DAK files:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if file is relevant for validation\n   */\n  isRelevantFile(filePath) {\n    // Skip hidden files and directories\n    if (filePath.startsWith('.') && filePath !== '.gitignore') {\n      return false;\n    }\n\n    // Skip node_modules and other build directories\n    if (filePath.includes('node_modules/') || \n        filePath.includes('build/') || \n        filePath.includes('dist/') ||\n        filePath.includes('.git/')) {\n      return false;\n    }\n\n    // Include specific file types\n    const relevantExtensions = [\n      'yaml', 'yml', 'json', 'xml', 'bpmn', 'dmn', \n      'md', 'txt', 'fsh', 'feature', 'js', 'ts'\n    ];\n\n    const extension = this.getFileExtension(filePath);\n    return relevantExtensions.includes(extension) || \n           filePath === 'sushi-config.yaml' ||\n           filePath === 'README.md';\n  }\n\n  /**\n   * Get file extension\n   */\n  getFileExtension(filePath) {\n    const parts = filePath.split('.');\n    return parts.length > 1 ? parts[parts.length - 1].toLowerCase() : '';\n  }\n\n  /**\n   * Clear validation cache\n   */\n  clearCache() {\n    this.cache.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats() {\n    return {\n      size: this.cache.size,\n      entries: Array.from(this.cache.keys())\n    };\n  }\n}\n\n// Create singleton instance\nconst enhancedDAKValidationService = new EnhancedDAKValidationService();\n\nexport default enhancedDAKValidationService;","import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport enhancedDAKValidationService from '../services/enhancedDAKValidationService';\nimport dakValidationRegistry, { DAK_COMPONENTS, VALIDATION_LEVELS } from '../services/dakValidationRegistry';\nimport { \n  FormattedValidationResults, \n  DAKValidationResult, \n  ValidationSummary, \n  GitHubRepository,\n  GitHubUser \n} from '../types/core';\nimport './ValidationPanel.css';\n\n// Component props interface\ninterface ValidationPanelProps {\n  repository?: GitHubRepository | any; // Allow existing structure during migration\n  profile?: GitHubUser | any; // Allow existing structure during migration\n  selectedBranch?: string;\n  onValidationComplete?: (results: FormattedValidationResults) => void;\n}\n\n// Validation history entry interface\ninterface ValidationHistoryEntry {\n  timestamp: number;\n  component: string;\n  summary: ValidationSummary;\n  canSave: boolean;\n  totalIssues: number;\n}\n\n// Get component for file based on path patterns\nconst getComponentForFile = (filePath: string): string => {\n  if (filePath.endsWith('sushi-config.yaml')) return 'dak-structure';\n  if (filePath.endsWith('.bpmn')) return 'business-processes';\n  if (filePath.endsWith('.dmn')) return 'decision-support-logic';\n  if (filePath.includes('questionnaire')) return 'core-data-elements';\n  if (filePath.includes('measure')) return 'indicators';\n  if (filePath.includes('test') || filePath.endsWith('.feature')) return 'test-scenarios';\n  if (filePath.includes('requirement')) return 'requirements';\n  return 'file-structure';\n};\n\nconst ValidationPanel: React.FC<ValidationPanelProps> = ({ \n  repository, \n  profile, \n  selectedBranch, \n  onValidationComplete \n}) => {\n  const { t } = useTranslation();\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n  const [isValidating, setIsValidating] = useState<boolean>(false);\n  const [validationResults, setValidationResults] = useState<FormattedValidationResults | null>(null);\n  const [selectedComponent, setSelectedComponent] = useState<string>('all');\n  const [validationHistory, setValidationHistory] = useState<ValidationHistoryEntry[]>([]);\n\n  // Get validation summary for component overview\n  const componentSummary = dakValidationRegistry.getComponentSummary();\n\n  // Handle validation execution\n  const runValidation = async (component: string = 'all'): Promise<void> => {\n    if (!repository || !profile) {\n      console.warn('Cannot run validation without repository and profile');\n      return;\n    }\n\n    setIsValidating(true);\n    setSelectedComponent(component);\n\n    try {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repo = repository.name;\n      const branch = selectedBranch || repository.default_branch || 'main';\n\n      let results: FormattedValidationResults;\n      \n      if (component === 'all') {\n        // Validate entire DAK\n        results = await enhancedDAKValidationService.validateDAK(owner, repo, branch);\n      } else {\n        // Validate specific component\n        const files = await enhancedDAKValidationService.getDAKFiles(owner, repo, branch);\n        const componentFiles = files.filter(file => \n          getComponentForFile(file.path) === component\n        );\n        results = await enhancedDAKValidationService.validateComponent(component, componentFiles);\n      }\n\n      setValidationResults(results);\n      \n      // Add to history\n      const historyEntry: ValidationHistoryEntry = {\n        timestamp: Date.now(),\n        component,\n        summary: results.summary,\n        canSave: results.canSave,\n        totalIssues: results.total\n      };\n      \n      setValidationHistory(prev => [historyEntry, ...prev.slice(0, 4)]); // Keep last 5\n\n      // Notify parent if callback provided\n      if (onValidationComplete) {\n        onValidationComplete(results);\n      }\n\n    } catch (error: any) {\n      console.error('Validation failed:', error);\n      setValidationResults({\n        error: `Validation failed: ${error.message}`,\n        summary: { error: 1, warning: 0, info: 0 },\n        byComponent: {},\n        byFile: {},\n        canSave: false,\n        total: 1\n      });\n    } finally {\n      setIsValidating(false);\n    }\n  };\n\n  // Format validation level for display\n  const formatLevel = (level: string): string => {\n    return t(`validation.levels.${level}`, level);\n  };\n\n  // Get level icon\n  const getLevelIcon = (level: string): string => {\n    switch (level) {\n      case VALIDATION_LEVELS.ERROR: return '🚫';\n      case VALIDATION_LEVELS.WARNING: return '⚠️';\n      case VALIDATION_LEVELS.INFO: return 'ℹ️';\n      default: return '❓';\n    }\n  };\n\n  // Get level color class\n  const getLevelClass = (level: string): string => {\n    switch (level) {\n      case VALIDATION_LEVELS.ERROR: return 'validation-error';\n      case VALIDATION_LEVELS.WARNING: return 'validation-warning'; \n      case VALIDATION_LEVELS.INFO: return 'validation-info';\n      default: return 'validation-unknown';\n    }\n  };\n\n  // Format timestamp for display\n  const formatTimestamp = (timestamp: number): string => {\n    return new Date(timestamp).toLocaleTimeString();\n  };\n\n  // Auto-run validation when repository changes\n  useEffect(() => {\n    if (repository && profile && !isValidating) {\n      runValidation('all');\n    }\n  }, [repository?.name, repository?.owner?.login, selectedBranch]);\n\n  // Get total issues count for summary\n  const getTotalIssues = (): number => {\n    if (!validationResults) return 0;\n    return validationResults.summary.error + validationResults.summary.warning + validationResults.summary.info;\n  };\n\n  // Render validation result item\n  const renderValidationResult = (result: DAKValidationResult, index: number): React.ReactElement => (\n    <div key={`${result.validationId}-${index}`} className={`validation-result ${getLevelClass(result.level)}`}>\n      <div className=\"validation-result-header\">\n        <span className=\"validation-icon\">{getLevelIcon(result.level)}</span>\n        <span className=\"validation-level\">{formatLevel(result.level)}</span>\n        <span className=\"validation-component\">{DAK_COMPONENTS[result.component]?.name || result.component}</span>\n      </div>\n      <div className=\"validation-result-content\">\n        <div className=\"validation-message\">{result.message}</div>\n        <div className=\"validation-file\">{result.filePath}</div>\n        {result.line && (\n          <div className=\"validation-location\">\n            Line {result.line}{result.column && `, Column ${result.column}`}\n          </div>\n        )}\n        {result.suggestion && (\n          <div className=\"validation-suggestion\">\n            <strong>Suggestion:</strong> {result.suggestion}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  // Render validation results by component\n  const renderResultsByComponent = (): React.ReactElement => {\n    if (!validationResults || !validationResults.byComponent) {\n      return <div className=\"no-results\">No validation results available</div>;\n    }\n\n    return (\n      <div className=\"validation-results-by-component\">\n        {Object.entries(validationResults.byComponent).map(([componentId, results]) => (\n          <div key={componentId} className=\"component-validation-section\">\n            <h4 className=\"component-title\">\n              {DAK_COMPONENTS[componentId]?.name || componentId} ({results.length})\n            </h4>\n            <div className=\"component-results\">\n              {results.map((result, index) => renderValidationResult(result, index))}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  // Render component selector\n  const renderComponentSelector = (): React.ReactElement => (\n    <div className=\"component-selector\">\n      <label htmlFor=\"component-select\">Validate Component:</label>\n      <select\n        id=\"component-select\"\n        value={selectedComponent}\n        onChange={(e) => setSelectedComponent(e.target.value)}\n        disabled={isValidating}\n      >\n        <option value=\"all\">All Components</option>\n        {Object.entries(DAK_COMPONENTS).map(([id, component]) => (\n          <option key={id} value={id}>\n            {component.name} ({componentSummary[id]?.validationCount || 0} validations)\n          </option>\n        ))}\n      </select>\n      <button\n        className=\"validate-button\"\n        onClick={() => runValidation(selectedComponent)}\n        disabled={isValidating || !repository || !profile}\n      >\n        {isValidating ? 'Validating...' : 'Run Validation'}\n      </button>\n    </div>\n  );\n\n  // Render validation summary\n  const renderValidationSummary = (): React.ReactElement | null => {\n    if (!validationResults) return null;\n\n    const { summary } = validationResults;\n    const hasIssues = summary.error > 0 || summary.warning > 0 || summary.info > 0;\n\n    return (\n      <div className=\"validation-summary\">\n        <div className=\"summary-header\">\n          <h3>Validation Summary</h3>\n          <div className={`save-indicator ${validationResults.canSave ? 'can-save' : 'cannot-save'}`}>\n            {validationResults.canSave ? '✅ Can Save' : '❌ Cannot Save'}\n          </div>\n        </div>\n        \n        {hasIssues ? (\n          <div className=\"summary-counts\">\n            {summary.error > 0 && (\n              <span className=\"summary-count summary-error\">\n                🚫 {summary.error} Errors\n              </span>\n            )}\n            {summary.warning > 0 && (\n              <span className=\"summary-count summary-warning\">\n                ⚠️ {summary.warning} Warnings\n              </span>\n            )}\n            {summary.info > 0 && (\n              <span className=\"summary-count summary-info\">\n                ℹ️ {summary.info} Info\n              </span>\n            )}\n          </div>\n        ) : (\n          <div className=\"summary-success\">\n            ✅ All validations passed!\n          </div>\n        )}\n        \n        {validationResults.metadata && (\n          <div className=\"validation-metadata\">\n            <small>\n              {validationResults.metadata.filesValidated} files validated\n              {validationResults.metadata.validatedAt && \n                ` at ${new Date(validationResults.metadata.validatedAt).toLocaleTimeString()}`\n              }\n            </small>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Render validation history\n  const renderValidationHistory = (): React.ReactElement | null => {\n    if (validationHistory.length === 0) return null;\n\n    return (\n      <div className=\"validation-history\">\n        <h4>Recent Validations</h4>\n        <div className=\"history-list\">\n          {validationHistory.map((entry, index) => (\n            <div key={`${entry.timestamp}-${index}`} className=\"history-entry\">\n              <div className=\"history-header\">\n                <span className=\"history-component\">\n                  {entry.component === 'all' ? 'All Components' : DAK_COMPONENTS[entry.component]?.name || entry.component}\n                </span>\n                <span className=\"history-time\">{formatTimestamp(entry.timestamp)}</span>\n              </div>\n              <div className=\"history-summary\">\n                <span className={`history-save-status ${entry.canSave ? 'can-save' : 'cannot-save'}`}>\n                  {entry.canSave ? '✅' : '❌'}\n                </span>\n                <span className=\"history-counts\">\n                  {entry.summary.error > 0 && `🚫 ${entry.summary.error} `}\n                  {entry.summary.warning > 0 && `⚠️ ${entry.summary.warning} `}\n                  {entry.summary.info > 0 && `ℹ️ ${entry.summary.info} `}\n                  {entry.totalIssues === 0 && 'All passed'}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"validation-panel\">\n      <div className=\"validation-panel-header\" onClick={() => setIsExpanded(!isExpanded)}>\n        <h2 className=\"validation-panel-title\">\n          DAK Validation \n          {validationResults && (\n            <span className=\"validation-count\">\n              ({getTotalIssues()} issues)\n            </span>\n          )}\n        </h2>\n        <button className=\"expand-button\" aria-label=\"Toggle validation panel\">\n          {isExpanded ? '🔽' : '🔼'}\n        </button>\n      </div>\n\n      {isExpanded && (\n        <div className=\"validation-panel-content\">\n          {renderComponentSelector()}\n          \n          {validationResults?.error && (\n            <div className=\"validation-error-message\">\n              <strong>Error:</strong> {validationResults.error}\n            </div>\n          )}\n          \n          {renderValidationSummary()}\n          \n          {isValidating && (\n            <div className=\"validation-loading\">\n              <div className=\"loading-spinner\">⏳</div>\n              <span>Running validation...</span>\n            </div>\n          )}\n          \n          {!isValidating && validationResults && !validationResults.error && (\n            <div className=\"validation-results\">\n              <h3>Validation Results</h3>\n              {renderResultsByComponent()}\n            </div>\n          )}\n          \n          {renderValidationHistory()}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ValidationPanel;","import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport githubService from '../services/githubService';\nimport dakValidationService from '../services/dakValidationService';\nimport branchContextService from '../services/branchContextService';\nimport HelpButton from './HelpButton';\nimport DAKStatusBox from './DAKStatusBox';\nimport Publications from './Publications';\nimport ValidationPanel from './ValidationPanel';\nimport ForkStatusBar from './ForkStatusBar';\nimport { PageLayout } from './framework';\nimport { handleNavigationClick } from '../utils/navigationUtils';\nimport useThemeImage from '../hooks/useThemeImage';\nimport { ALT_TEXT_KEYS, getAltText } from '../utils/imageAltTextHelper';\n\nconst DAKDashboard = () => {\n  return (\n    <PageLayout pageName=\"dak-dashboard\">\n      <DAKDashboardContent />\n    </PageLayout>\n  );\n};\n\nconst DAKDashboardContent = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user, repo, branch } = useParams();\n  \n  // Theme-aware mascot image for dialog\n  const mascotImage = useThemeImage('sgex-mascot.png');\n  \n  // Try to get data from location.state first, then from URL params\n  const [profile, setProfile] = useState(location.state?.profile || null);\n  const [repository, setRepository] = useState(location.state?.repository || null);\n  const [loading, setLoading] = useState(!profile || !repository);\n  const [error, setError] = useState(null);\n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n  const [showPermissionDialog, setShowPermissionDialog] = useState(false);\n  const [activeTab, setActiveTab] = useState('core'); // 'core' or 'publications'\n  const [selectedBranch, setSelectedBranch] = useState(location.state?.selectedBranch || branch || null);\n  const [issueCounts, setIssueCounts] = useState({});\n  const [showUserMenu, setShowUserMenu] = useState(false);\n\n  // Component Card component defined within the dashboard\n  const ComponentCard = ({ component, handleComponentClick, t }) => {\n    const [imageLoaded, setImageLoaded] = useState(false);\n    const [imageError, setImageError] = useState(false);\n    \n    // Use the theme-aware image hook here instead of in the map function\n    const cardImagePath = useThemeImage(component.cardImage);\n\n    const handleImageLoad = () => {\n      setImageLoaded(true);\n      setImageError(false);\n    };\n\n    const handleImageError = () => {\n      setImageError(true);\n      setImageLoaded(false);\n    };\n\n    return (\n      <div \n        className={`component-card ${component.type.toLowerCase()} large-card ${imageLoaded ? 'image-loaded' : ''}`}\n        onClick={(event) => handleComponentClick(event, component)}\n        style={{ '--component-color': component.color }}\n        tabIndex={0}\n        role=\"button\"\n        aria-label={`${component.name} - ${component.description}`}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            handleComponentClick(event, component);\n          }\n        }}\n      >\n        <div className=\"component-header\">\n          <div className=\"component-image-container\">\n            <img \n              src={cardImagePath}\n              alt={getAltText(t, ALT_TEXT_KEYS.ICON_DAK_COMPONENT, component.name, { name: component.name })}\n              className=\"component-card-image\"\n              onLoad={handleImageLoad}\n              onError={handleImageError}\n              style={{ display: imageError ? 'none' : 'block' }}\n            />\n            {/* Fallback icon when image fails to load */}\n            {imageError && (\n              <div className=\"component-icon\" style={{ color: component.color }}>\n                {component.icon}\n              </div>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"component-content\">\n          {/* Only show title text if image failed to load or as screen reader backup */}\n          <h4 className={imageLoaded && !imageError ? 'visually-hidden' : ''}>\n            {component.name}\n          </h4>\n          <p className={imageLoaded && !imageError ? 'visually-hidden' : ''}>\n            {component.description}\n          </p>\n          \n          <div className=\"component-meta\">\n            <div className=\"file-types\">\n              {component.fileTypes.map((type) => (\n                <span key={type} className=\"file-type-tag\">{type}</span>\n              ))}\n            </div>\n            <div className=\"file-count\">\n              {component.count} files\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Fetch data from URL parameters if not available in location.state\n  useEffect(() => {\n    const fetchDataFromUrlParams = async () => {\n      if ((!profile || !repository) && user && repo) {\n        try {\n          setLoading(true);\n          setError(null);\n\n          // Check if githubService is authenticated (allow demo mode to proceed without auth)\n          if (!githubService.isAuth()) {\n            // In demo mode, use the DAK validation service for demo repositories\n            if (window.location.pathname.includes('/dashboard/')) {\n              const isValidDAK = dakValidationService.validateDemoDAKRepository(user, repo);\n              \n              if (!isValidDAK) {\n                navigate('/', { \n                  state: { \n                    warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n                  } \n                });\n                return;\n              }\n\n              const demoProfile = {\n                login: user,\n                name: user.charAt(0).toUpperCase() + user.slice(1),\n                avatar_url: `https://github.com/${user}.png`,\n                type: 'User',\n                isDemo: true\n              };\n\n              const demoRepository = {\n                name: repo,\n                full_name: `${user}/${repo}`,\n                owner: { login: user },\n                default_branch: branch || 'main',\n                html_url: `https://github.com/${user}/${repo}`,\n                isDemo: true\n              };\n\n              setProfile(demoProfile);\n              setRepository(demoRepository);\n              setSelectedBranch(branch || 'main');\n              setLoading(false);\n              return;\n            } else {\n              setError(t('auth.authRequired'));\n              setLoading(false);\n              return;\n            }\n          }\n\n          // Fetch user profile\n          let userProfile = null;\n          try {\n            const userResponse = await githubService.getUser(user);\n            userProfile = userResponse;\n          } catch (err) {\n            console.error('Error fetching user:', err);\n            // Redirect to landing page with warning message\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. User '${user}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Fetch repository\n          let repoData = null;\n          try {\n            const repoResponse = await githubService.getRepository(user, repo);\n            repoData = repoResponse;\n          } catch (err) {\n            console.error('Error fetching repository:', err);\n            // Redirect to landing page with warning message\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Validate that this is actually a DAK repository\n          const isValidDAK = await dakValidationService.validateDAKRepository(user, repo, branch || repoData.default_branch);\n          \n          if (!isValidDAK) {\n            console.log(`Repository ${user}/${repo} is not a valid DAK repository`);\n            navigate('/', { \n              state: { \n                warningMessage: `Could not access the requested DAK. Repository '${user}/${repo}' not found or not accessible.` \n              } \n            });\n            return;\n          }\n\n          // Validate branch if specified\n          if (branch) {\n            try {\n              await githubService.getBranch(user, repo, branch);\n              setSelectedBranch(branch);\n            } catch (err) {\n              console.warn(`Branch '${branch}' not found, falling back to default branch`);\n              setSelectedBranch(repoData.default_branch);\n            }\n          } else {\n            setSelectedBranch(repoData.default_branch);\n          }\n\n          setProfile(userProfile);\n          setRepository(repoData);\n          setLoading(false);\n        } catch (err) {\n          console.error('Error fetching data from URL params:', err);\n          setError('Failed to load dashboard data. Please check the URL or try again.');\n          setLoading(false);\n        }\n      } else {\n        setLoading(false);\n      }\n    };\n\n    fetchDataFromUrlParams();\n  }, [user, repo, branch, profile, repository, navigate, t]);\n\n  // Initialize selected branch from session context\n  useEffect(() => {\n    if (repository) {\n      const storedBranch = branchContextService.getSelectedBranch(repository);\n      if (storedBranch) {\n        setSelectedBranch(storedBranch);\n      } else if (profile && profile.login === 'demo-user') {\n        // For demo mode, set a default branch\n        const defaultBranch = repository.default_branch || 'main';\n        setSelectedBranch(defaultBranch);\n        branchContextService.setSelectedBranch(repository, defaultBranch);\n      }\n    }\n  }, [repository, profile]);\n\n  // Load issue counts for repository\n  const loadIssueCounts = async () => {\n    if (!repository) return;\n    \n    try {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      \n      // Get all issues (includes pull requests in GitHub API)\n      const issues = await githubService.getIssues(owner, repoName, {\n        state: 'all',\n        per_page: 100\n      });\n      \n      // Filter out pull requests to get actual issues\n      const actualIssues = issues.filter(issue => !issue.pull_request);\n      \n      // Count issues by state\n      const openIssues = actualIssues.filter(issue => issue.state === 'open').length;\n      const closedIssues = actualIssues.filter(issue => issue.state === 'closed').length;\n      \n      setIssueCounts({\n        total: actualIssues.length,\n        open: openIssues,\n        closed: closedIssues\n      });\n    } catch (err) {\n      console.warn('Could not load issue counts:', err);\n      setIssueCounts({ total: 0, open: 0, closed: 0 });\n    }\n  };\n\n  // Load issue counts when repository changes\n  useEffect(() => {\n    if (repository && !loading) {\n      loadIssueCounts();\n    }\n  }, [repository, loading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Check write permissions on mount\n  useEffect(() => {\n    const checkPermissions = async () => {\n      if (repository && profile) {\n        try {\n          const writeAccess = await githubService.checkRepositoryWritePermissions(\n            repository.owner?.login || repository.full_name.split('/')[0],\n            repository.name\n          );\n          setHasWriteAccess(writeAccess);\n        } catch (error) {\n          console.warn('Could not check write permissions:', error);\n          setHasWriteAccess(false);\n        }\n      }\n      setLoading(false);\n    };\n\n    checkPermissions();\n  }, [repository, profile]);\n\n  // Close user menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (showUserMenu && !event.target.closest('.user-menu-container')) {\n        setShowUserMenu(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showUserMenu]);\n\n\n\n  // Define the 9 core DAK components based on WHO SMART Guidelines documentation\n  const coreDAKComponents = [\n    {\n      id: 'health-interventions',\n      name: t('dak.healthInterventions'),\n      description: 'Clinical guidelines and health intervention specifications that define evidence-based care recommendations',\n      icon: '📖',\n      cardImage: 'dashboard/dak_interventions.png',\n      type: 'L2',\n      color: '#0078d4',\n      fileTypes: ['IRIS', 'Publication'],\n      count: 5,\n      editor: 'Publication reference manager with IRIS integration'\n    },\n    {\n      id: 'generic-personas',\n      name: t('dak.genericPersonas'),\n      description: 'Standardized user roles and actor definitions that represent different types of healthcare workers and patients',\n      icon: '👥',\n      cardImage: 'dashboard/dak_personas.png',\n      type: 'L2',\n      color: '#107c10',\n      fileTypes: ['Actor', 'Role'],\n      count: 8,\n      editor: 'Persona definition editor with role-based access specifications'\n    },\n    {\n      id: 'user-scenarios',\n      name: t('dak.userScenarios'),\n      description: 'Narrative descriptions of how different personas interact with the system in specific healthcare contexts',\n      icon: '📝',\n      cardImage: 'dashboard/dak_user_scenarios.png',\n      type: 'L2',\n      color: '#881798',\n      fileTypes: ['Narrative', 'Use Case'],\n      count: 12,\n      editor: 'Scenario editor with workflow visualization'\n    },\n    {\n      id: 'business-processes',\n      name: t('dak.businessProcesses'),\n      description: 'BPMN workflows and business process definitions that model clinical workflows and care pathways',\n      icon: '🔄',\n      cardImage: 'dashboard/dak_business_processes.png',\n      type: 'L2',\n      color: '#d13438',\n      fileTypes: ['BPMN', 'XML'],\n      count: 15,\n      editor: 'Graphical BPMN editor with SVG visualization'\n    },\n    {\n      id: 'core-data-elements',\n      name: t('dak.coreDataElements'),\n      description: 'Essential data structures and terminology needed for clinical data capture and exchange (includes Terminology Services via OCL and Product Master Data via PCMT)',\n      icon: '🗃️',\n      cardImage: 'dashboard/dak_core_data_elements.png',\n      type: 'L2',\n      color: '#ff8c00',\n      fileTypes: ['OCL', 'Concept', 'PCMT', 'Product'],\n      count: issueCounts.total || 89,\n      editor: 'Data element editor with OCL and PCMT integration'\n    },\n    {\n      id: 'decision-support',\n      name: t('dak.decisionSupportLogic'),\n      description: 'DMN decision tables and clinical decision support rules that encode clinical logic',\n      icon: '🎯',\n      cardImage: 'dashboard/dak_decision_support_logic.png',\n      type: 'L2',\n      color: '#00bcf2',\n      fileTypes: ['DMN', 'XML'],\n      count: 24,\n      editor: 'DMN decision table editor with validation'\n    },\n    {\n      id: 'program-indicators',\n      name: t('dak.programIndicators'),\n      description: 'Performance indicators and measurement definitions for monitoring and evaluation',\n      icon: '📊',\n      cardImage: 'dashboard/dak_indicators.png',\n      type: 'L2',\n      color: '#498205',\n      fileTypes: ['Measure', 'Logic'],\n      count: 18,\n      editor: 'Indicator definition editor with measurement logic'\n    },\n    {\n      id: 'functional-requirements',\n      name: t('dak.requirements'),\n      description: 'System requirements specifications that define capabilities and constraints',\n      icon: '⚙️',\n      cardImage: 'dashboard/dak_requirements.png',\n      type: 'L2',\n      color: '#6b69d6',\n      fileTypes: ['Requirements', 'Specification'],\n      count: 32,\n      editor: 'Requirements editor with structured templates'\n    },\n    {\n      id: 'test-scenarios',\n      name: t('dak.testScenarios') || 'Test Scenarios',\n      description: 'Feature files and test scenarios for validating the DAK implementation',\n      icon: '🧪',\n      cardImage: 'dashboard/dak_testing.png',\n      type: 'L2',\n      color: '#8b5cf6',\n      fileTypes: ['Feature', 'Test'],\n      count: 0,\n      editor: 'Testing viewer with feature file browser'\n    }\n  ];\n\n\n\n  const handleComponentClick = (event, component) => {\n    const navigationState = {\n      profile,\n      repository,\n      component,\n      selectedBranch\n    };\n    \n    // For decision-support, always navigate to view page (no permission check needed)\n    if (component.id === 'decision-support') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/decision-support-logic/${owner}/${repoName}/${selectedBranch}`\n        : `/decision-support-logic/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For business processes, navigate to selection page without permission check\n    if (component.id === 'business-processes') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/business-process-selection/${owner}/${repoName}/${selectedBranch}`\n        : `/business-process-selection/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n\n\n    // For health-interventions (WHO Digital Library), allow access in read-only mode\n    if (component.id === 'health-interventions') {\n      handleNavigationClick(event, `/editor/${component.id}`, navigate, navigationState);\n      return;\n    }\n\n    // For core-data-elements (Component 2 Core Data Dictionary), navigate to viewer\n    if (component.id === 'core-data-elements') {\n      const owner = user || repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repo || repository.name;\n      const branchName = selectedBranch;\n      \n      const viewerPath = branchName ? \n        `/core-data-dictionary-viewer/${owner}/${repoName}/${branchName}` :\n        `/core-data-dictionary-viewer/${owner}/${repoName}`;\n        \n      handleNavigationClick(event, viewerPath, navigate, navigationState);\n      return;\n    }\n\n\n\n    // For generic-personas, navigate to actor editor\n    if (component.id === 'generic-personas') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/actor-editor/${owner}/${repoName}/${selectedBranch}`\n        : `/actor-editor/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For test-scenarios, navigate to testing viewer\n    if (component.id === 'test-scenarios') {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      const repoName = repository.name;\n      const path = selectedBranch \n        ? `/testing-viewer/${owner}/${repoName}/${selectedBranch}`\n        : `/testing-viewer/${owner}/${repoName}`;\n      \n      handleNavigationClick(event, path, navigate, navigationState);\n      return;\n    }\n\n    // For other components, check permissions before proceeding\n    if (!hasWriteAccess) {\n      // If command-click, still show permission dialog instead of opening new tab\n      // since the user needs to authenticate first\n      setShowPermissionDialog(true);\n      return;\n    }\n\n    // Navigate to generic component editor for other components\n    handleNavigationClick(event, `/editor/${component.id}`, navigate, navigationState);\n  };\n\n\n\n  if (loading) {\n    return (\n      <div className=\"dak-dashboard loading-state\">\n        <div className=\"loading-content\">\n          <h2>Loading Dashboard...</h2>\n          <p>Fetching repository and user data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dak-dashboard error-state\">\n        <div className=\"error-content\">\n          <h2>{t('dashboard.errorLoading')}</h2>\n          <p>{error}</p>\n          <div className=\"error-actions\">\n            <button onClick={() => navigate('/')} className=\"action-btn primary\">\n              {t('navigation.home')}\n            </button>\n            <button onClick={() => window.location.reload()} className=\"action-btn secondary\">\n              {t('common.retry')}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!profile || !repository) {\n    navigate('/');\n    return <div>Redirecting...</div>;\n  }\n\n  return (\n    <div className=\"dak-dashboard\">\n      <div className=\"dashboard-content\">\n        <div className=\"dashboard-main\">\n          <div className=\"dashboard-intro\">\n            <h2>{t('dak.components')}</h2>\n            <p>\n              Select a component to edit content for <strong>{repository.name}</strong>\n              {selectedBranch && (\n                <span> on branch <code className=\"branch-display\">{selectedBranch}</code></span>\n              )}. \n              Components are organized according to the WHO SMART Guidelines framework.\n            </p>\n          </div>\n\n          {/* Fork Status Bar - shows forks of sgex repository */}\n          <ForkStatusBar \n            profile={profile}\n            repository={repository}\n            selectedBranch={selectedBranch}\n          />\n\n          {/* DAK Status Box - only show when repository and branch are selected */}\n          {repository && selectedBranch && (\n            <DAKStatusBox \n              repository={repository}\n              selectedBranch={selectedBranch}\n              hasWriteAccess={hasWriteAccess}\n              profile={profile}\n            />\n          )}\n\n          {/* Tab Navigation - Full Width Toggle Buttons */}\n          <div className=\"tab-navigation-fullwidth\">\n            <button \n              className={`tab-button-fullwidth ${activeTab === 'core' ? 'active' : ''}`}\n              onClick={() => setActiveTab('core')}\n            >\n              <span className=\"tab-icon\">⭐</span>\n              <span className=\"tab-text\">9 Core Components</span>\n            </button>\n            <button\n              className={`tab-button-fullwidth ${activeTab === 'publications' ? 'active' : ''}`}\n              onClick={() => setActiveTab('publications')}\n            >\n              <span className=\"tab-icon\">📚</span>\n              <span className=\"tab-text\">Publications</span>\n            </button>\n            <button\n              className={`tab-button-fullwidth ${activeTab === 'other' ? 'active' : ''}`}\n              onClick={() => setActiveTab('other')}\n            >\n              <span className=\"tab-icon\">🔧</span>\n              <span className=\"tab-text\">Other DAK Components</span>\n            </button>\n          </div>\n\n          {/* 9 Core DAK Components Section */}\n          {activeTab === 'core' && (\n            <div className=\"components-section active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">{t('dak.components')}</h3>\n                <p className=\"section-description\">\n                  Essential components that form the foundation of any WHO SMART Guidelines Digital Adaptation Kit\n                </p>\n              </div>\n\n              <div className=\"components-grid core-components\">\n                {coreDAKComponents.map((component) => {\n                  return (\n                    <ComponentCard\n                      key={component.id}\n                      component={component}\n                      handleComponentClick={handleComponentClick}\n                      t={t}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {/* Other DAK Components Section */}\n          {activeTab === 'other' && (\n            <div className=\"components-section other-components active\">\n              <div className=\"section-header\">\n                <h3 className=\"section-title\">Other DAK Components</h3>\n                <p className=\"section-description\">\n                  Additional specialized components for advanced DAK functionality and implementation\n                </p>\n              </div>\n\n              <div className=\"components-grid other-components\">\n                <div \n                  className=\"component-card l3\"\n                  onClick={(event) => {\n                    const component = {\n                      id: 'questionnaire-editor',\n                      name: 'FHIR Questionnaires',\n                      description: 'Structured questionnaires and forms for data collection using FHIR standard'\n                    };\n                    const owner = repository.owner?.login || repository.full_name.split('/')[0];\n                    const repoName = repository.name;\n                    const path = selectedBranch \n                      ? `/questionnaire-editor/${owner}/${repoName}/${selectedBranch}`\n                      : `/questionnaire-editor/${owner}/${repoName}`;\n                    \n                    const navigationState = {\n                      profile,\n                      repository,\n                      component,\n                      selectedBranch\n                    };\n                    \n                    handleNavigationClick(event, path, navigate, navigationState);\n                  }}\n                  style={{ '--component-color': '#17a2b8' }}\n                >\n                  <div className=\"component-header\">\n                    <div className=\"component-icon\" style={{ color: '#17a2b8' }}>\n                      📋\n                    </div>\n                  </div>\n                  \n                  <div className=\"component-content\">\n                    <h4>FHIR Questionnaires</h4>\n                    <p>Structured questionnaires and forms for data collection using FHIR Questionnaire standard</p>\n                    \n                    <div className=\"component-meta\">\n                      <div className=\"file-types\">\n                        <span className=\"file-type-tag\">JSON</span>\n                        <span className=\"file-type-tag\">FHIR</span>\n                      </div>\n                      <div className=\"file-count\">\n                        questionnaires/\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Publications Section */}\n          {activeTab === 'publications' && (\n            <div className=\"components-section publications-section active\">\n              <Publications\n                profile={profile}\n                repository={repository}\n                selectedBranch={selectedBranch}\n                hasWriteAccess={hasWriteAccess}\n              />\n            </div>\n          )}\n          \n          {/* DAK Validation Panel */}\n          <ValidationPanel\n            repository={repository}\n            profile={profile}\n            selectedBranch={selectedBranch}\n            onValidationComplete={(results) => {\n              console.log('Validation completed:', results);\n              // Could integrate with notifications or status updates here\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Permission Upgrade Dialog */}\n      {showPermissionDialog && (\n        <div className=\"permission-dialog-overlay\">\n          <div className=\"permission-dialog\">\n            <div className=\"dialog-header\">\n              <h3>Edit Access Required</h3>\n              <button \n                className=\"dialog-close\"\n                onClick={() => setShowPermissionDialog(false)}\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"dialog-content\">\n              <div className=\"dialog-mascot\">\n                <img src={mascotImage} alt={getAltText(t, ALT_TEXT_KEYS.MASCOT_HELPER, 'SGEX Helper')} className=\"dialog-mascot-img\" />\n                <div className=\"mascot-message\">\n                  <p>You need edit permissions to modify DAK components!</p>\n                  <p>Your current token only provides read access to this repository.</p>\n                </div>\n              </div>\n              <div className=\"permission-options\">\n                <div className=\"option-card\">\n                  <h4>🔧 Upgrade Your Token</h4>\n                  <p>Create a new fine-grained token with write permissions for this repository.</p>\n                  <div className=\"option-buttons\">\n                    <a \n                      href=\"https://github.com/settings/personal-access-tokens/new\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"btn-primary\"\n                    >\n                      Create New Token\n                    </a>\n                    <HelpButton \n                      helpTopic=\"github-token\"\n                      contextData={{ \n                        repository: { owner: repository.owner?.login || repository.full_name.split('/')[0], name: repository.name },\n                        requiredScopes: ['Contents: Write', 'Metadata: Read', 'Pull requests: Write'],\n                        permissionMode: 'edit',\n                        upgradeMode: true\n                      }}\n                    />\n                  </div>\n                </div>\n                <div className=\"option-card\">\n                  <h4>👁️ Continue in Read-Only Mode</h4>\n                  <p>Browse and view DAK components without editing capabilities.</p>\n                  <button \n                    className=\"btn-secondary\"\n                    onClick={() => setShowPermissionDialog(false)}\n                  >\n                    Continue Read-Only\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DAKDashboard;"],"names":["_ref","helpTopic","contextData","showHelp","setShowHelp","useState","mascotImage","useThemeImage","_jsxs","_Fragment","children","_jsx","className","onClick","handleHelpClick","title","src","alt","HelpModal","topic","onClose","handleCloseHelp","dakSushiBase","id","component","level","fileTypes","descriptionKey","description","validate","filePath","content","context","endsWith","config","yaml","dependencies","validationId","message","line","findLineNumber","column","suggestion","error","_error$mark","_error$mark2","concat","mark","searchTerm","lines","split","i","length","includes","isBPMNContent","businessRuleTaskRegex","matches","match","firstMatch","matchIndex","indexOf","lineNumber","substring","isDMNContent","decisionRegex","Array","from","matchAll","decisionTag","hasId","test","hasLabel","index","missing","push","join","map","attr","dmnReferences","bpmnContent","references","dmnRefRegex","exec","extractDMNReferences","dmnFiles","dakFiles","filter","file","path","availableDecisions","forEach","dmnFile","decisions","dmnContent","extractDMNDecisions","missingReferences","ref","trimmedContent","trim","startsWith","isXMLContent","parser","DOMParser","parserError","parseFromString","querySelector","errorText","textContent","lineMatch","columnMatch","parseInt","isJSONContent","JSON","parse","positionMatch","position","fileName","pop","getFileNameFromPath","skipFiles","isValidFileName","isRecommendedNaming","hasUppercase","hasUnderscore","DAK_COMPONENTS","name","VALIDATION_LEVELS","constructor","this","validations","Map","componentValidations","initializeValidations","bpmnBusinessRuleTaskId","dmnDecisionLabelId","dmnBpmnCrossReference","xmlWellFormed","jsonValid","fileNamingConventions","validation","registerValidation","console","log","size","Error","has","warn","set","get","getAllValidations","values","getValidation","getValidationsForComponent","getValidationsForFileType","fileType","getValidationsByLevel","getComponentSummary","summary","Object","_objectSpread","validationCount","errorCount","v","warningCount","infoCount","validateFile","arguments","undefined","fileExtension","getFileExtension","applicableValidations","results","result","validateByComponent","files","parts","toLowerCase","canSave","validationResults","some","formatResults","warning","info","byComponent","byFile","total","registry","dakValidationRegistry","cache","cacheTimeout","validateDAK","owner","repo","branch","options","cacheKey","forceRefresh","cached","Date","now","timestamp","getDAKFiles","githubService","allResults","fileResults","formattedResults","metadata","filesValidated","validatedAt","toISOString","validationFrameworkVersion","validateComponent","validateStagingGround","stagingGround","canUpload","getValidationSummary","runValidation","canSaveFiles","getEditorValidation","fileTypeValidations","relevantValidations","Set","isAuth","tree","getRepositoryTree","relevantFiles","item","type","isRelevantFile","maxFiles","filesToProcess","slice","getFileContent","sha","extension","clearCache","clear","getCacheStats","entries","keys","_repository$owner2","repository","profile","selectedBranch","onValidationComplete","t","useTranslation","isExpanded","setIsExpanded","isValidating","setIsValidating","setValidationResults","selectedComponent","setSelectedComponent","validationHistory","setValidationHistory","componentSummary","async","_repository$owner","login","full_name","default_branch","enhancedDAKValidationService","componentFiles","getComponentForFile","historyEntry","totalIssues","prev","getLevelIcon","getLevelClass","useEffect","htmlFor","value","onChange","e","target","disabled","_ref3","_componentSummary$id","renderValidationSummary","hasIssues","toLocaleTimeString","_ref2","_DAK_COMPONENTS$compo","componentId","renderValidationResult","_DAK_COMPONENTS$resul","entry","_DAK_COMPONENTS$entry","DAKDashboardContent","_location$state","_location$state2","_location$state3","_repository$owner9","location","useLocation","navigate","useNavigate","user","useParams","setProfile","state","setRepository","loading","setLoading","setError","hasWriteAccess","setHasWriteAccess","showPermissionDialog","setShowPermissionDialog","activeTab","setActiveTab","setSelectedBranch","issueCounts","setIssueCounts","showUserMenu","setShowUserMenu","ComponentCard","handleComponentClick","imageLoaded","setImageLoaded","imageError","setImageError","cardImagePath","cardImage","event","style","color","tabIndex","role","onKeyDown","key","preventDefault","getAltText","ALT_TEXT_KEYS","ICON_DAK_COMPONENT","onLoad","handleImageLoad","onError","handleImageError","display","icon","count","window","pathname","dakValidationService","validateDemoDAKRepository","warningMessage","demoProfile","charAt","toUpperCase","avatar_url","isDemo","demoRepository","html_url","userProfile","getUser","err","repoData","getRepository","validateDAKRepository","getBranch","fetchDataFromUrlParams","storedBranch","branchContextService","getSelectedBranch","defaultBranch","repoName","actualIssues","getIssues","per_page","issue","pull_request","openIssues","closedIssues","open","closed","loadIssueCounts","writeAccess","checkRepositoryWritePermissions","checkPermissions","handleClickOutside","closest","document","addEventListener","removeEventListener","coreDAKComponents","editor","navigationState","_repository$owner3","handleNavigationClick","_repository$owner4","_repository$owner5","branchName","viewerPath","_repository$owner6","_repository$owner7","reload","ForkStatusBar","DAKStatusBox","_repository$owner8","Publications","ValidationPanel","MASCOT_HELPER","href","rel","HelpButton","requiredScopes","permissionMode","upgradeMode","DAKDashboard","PageLayout","pageName"],"sourceRoot":""}