"use strict";(self.webpackChunksgex_workbench=self.webpackChunksgex_workbench||[]).push([[857],{95857:(e,s,a)=>{a.r(s),a.d(s,{default:()=>m});var i=a(89379),n=a(9950),t=a(67818),l=a(10827),c=a(87018),r=a(7082),o=a(44414);const d=e=>{let{questionId:s,parameters:a={},githubService:l=null,assetFiles:d=[],showRawData:h=!1,className:p="",executionMode:u="client-side"}=e;const{t:m,i18n:x}=(0,t.Bd)(),[f,j]=(0,n.useState)(null),[v,q]=(0,n.useState)(!1),[g,N]=(0,n.useState)(null),b=(0,n.useCallback)(async()=>{if(s){q(!0),N(null);try{let e;if("client-side"===u){if(!l)throw new Error("GitHub service is required for client-side execution");const n={questionId:s,parameters:(0,i.A)((0,i.A)({},a),{},{locale:x.language.replace("-","_")||"en_US"}),assetFiles:d},t={githubService:l};e=await c.A.executeQuestion(n,t)}else{if("mcp-service"!==u)throw new Error("Unknown execution mode: ".concat(u));{const n={questionId:s,parameters:(0,i.A)((0,i.A)({},a),{},{locale:x.language.replace("-","_")||"en_US"}),assetFiles:d},t=await fetch("http://127.0.0.1:3001/mcp/faq/questions/execute",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({questions:[n]})});if(!t.ok)throw new Error("MCP service error: ".concat(t.status," ").concat(t.statusText));const l=await t.json();if(!l.success||!l.results||0===l.results.length)throw new Error("MCP service returned no results");const c=l.results[0];if(!c.success)throw new Error(c.error||"MCP service execution failed");e=c.result}}j(e)}catch(e){N(e.message)}finally{q(!1)}}},[s,a,l,d,x.language,u]);(0,n.useEffect)(()=>{b()},[b]);return v?(0,o.jsxs)("div",{className:"faq-answer loading ".concat(p),children:[(0,o.jsx)("div",{className:"faq-loading-spinner"}),(0,o.jsx)("p",{children:m("dak.faq.loading")})]}):g?(0,o.jsxs)("div",{className:"faq-answer error ".concat(p),children:[(0,o.jsx)("h4",{children:m("dak.faq.error_title")}),(0,o.jsx)("p",{className:"faq-error-message",children:g}),(0,o.jsx)("button",{onClick:b,className:"faq-retry-button",children:m("dak.faq.retry")})]}):f?(0,o.jsxs)("div",{className:"faq-answer success ".concat(p),children:[(0,o.jsx)("div",{className:"faq-execution-mode",children:(0,o.jsx)("small",{children:"client-side"===u?"\ud83c\udf10 Executed client-side via GitHub API":"\ud83d\udda5\ufe0f Executed via MCP service"})}),(()=>{return null!==f&&void 0!==f&&f.narrative?(0,o.jsx)("div",{className:"faq-narrative",dangerouslySetInnerHTML:{__html:(e=f.narrative,r.default.sanitize(e,{ALLOWED_TAGS:["h1","h2","h3","h4","h5","h6","p","div","span","ul","ol","li","strong","em","code","pre","time","small"],ALLOWED_ATTR:["class","datetime"]}))}}):null;var e})(),(()=>{const e=(null===f||void 0===f?void 0:f.warnings)||[],s=(null===f||void 0===f?void 0:f.errors)||[];return 0===e.length&&0===s.length?null:(0,o.jsxs)("div",{className:"faq-messages",children:[s.map((e,s)=>(0,o.jsxs)("div",{className:"faq-message faq-error",children:[(0,o.jsx)("span",{className:"faq-message-icon",children:"\u26a0\ufe0f"}),e]},"error-".concat(s))),e.map((e,s)=>(0,o.jsxs)("div",{className:"faq-message faq-warning",children:[(0,o.jsx)("span",{className:"faq-message-icon",children:"\u26a0\ufe0f"}),e]},"warning-".concat(s)))]})})(),h&&null!==f&&void 0!==f&&f.structured?(0,o.jsxs)("details",{className:"faq-structured-data",children:[(0,o.jsx)("summary",{children:m("dak.faq.structured_data")}),(0,o.jsx)("pre",{children:JSON.stringify(f.structured,null,2)})]}):null,h&&null!==f&&void 0!==f&&f.meta?(0,o.jsxs)("details",{className:"faq-metadata",children:[(0,o.jsx)("summary",{children:m("dak.faq.metadata")}),(0,o.jsx)("pre",{children:JSON.stringify(f.meta,null,2)})]}):null]}):(0,o.jsx)("div",{className:"faq-answer empty ".concat(p),children:(0,o.jsx)("p",{children:m("dak.faq.no_data")})})};var h=a(29946),p=a(53782);const u=()=>{const{t:e}=(0,t.Bd)(),{user:s,repository:a,branch:r}=(0,p.N5)(),u=(0,l.zy)(),[m,x]=(0,n.useState)([]),[f,j]=(0,n.useState)(!0),[v,q]=(0,n.useState)(null),[g,N]=(0,n.useState)([]),[b,y]=(0,n.useState)("unknown"),[A,w]=(0,n.useState)("client-side"),T=null===a||void 0===a?void 0:a.name,E=[{id:"dak-name",title:"What is the name of this DAK?",description:"Extracts the DAK name from sushi-config.yaml"},{id:"dak-version",title:"What is the version of this DAK?",description:"Extracts the DAK version from sushi-config.yaml"},{id:"decision-table-inputs",title:"What are the inputs required for this decision table?",description:"Analyzes DMN files and extracts input requirements for decision tables"}];(0,n.useEffect)(()=>{S(),k()},[]);const S=async()=>{try{j(!0),await c.A.initialize();const e=c.A.getCatalog();x(e)}catch(e){q(e.message)}finally{j(!1)}},k=async()=>{const e=[{endpoint:"GET /mcp/health",description:"Health check",method:"GET",path:"/mcp/health",fullUrl:"http://127.0.0.1:3001/mcp/health"},{endpoint:"GET /mcp/faq/questions/catalog",description:"List available FAQ questions",method:"GET",path:"/mcp/faq/questions/catalog",fullUrl:"http://127.0.0.1:3001/mcp/faq/questions/catalog"},{endpoint:"POST /mcp/faq/questions/execute",description:"Execute FAQ questions in batch",method:"POST",path:"/mcp/faq/questions/execute",fullUrl:"http://127.0.0.1:3001/mcp/faq/questions/execute"},{endpoint:"POST /mcp/faq/execute/:questionId",description:"Execute a specific FAQ question by ID",method:"POST",path:"/mcp/faq/execute/:questionId",fullUrl:"http://127.0.0.1:3001/mcp/faq/execute/:questionId"},{endpoint:"POST /mcp/faq/execute",description:"Execute a single FAQ question (alternative endpoint)",method:"POST",path:"/mcp/faq/execute",fullUrl:"http://127.0.0.1:3001/mcp/faq/execute"},{endpoint:"GET /mcp/faq/schemas",description:"Get all question schemas",method:"GET",path:"/mcp/faq/schemas",fullUrl:"http://127.0.0.1:3001/mcp/faq/schemas"},{endpoint:"GET /mcp/faq/schemas/:questionId",description:"Get schema for specific question",method:"GET",path:"/mcp/faq/schemas/:questionId",fullUrl:"http://127.0.0.1:3001/mcp/faq/schemas/:questionId"},{endpoint:"GET /mcp/faq/openapi",description:"Get OpenAPI schema for all questions",method:"GET",path:"/mcp/faq/openapi",fullUrl:"http://127.0.0.1:3001/mcp/faq/openapi"},{endpoint:"POST /mcp/faq/validate",description:"Validate question parameters",method:"POST",path:"/mcp/faq/validate",fullUrl:"http://127.0.0.1:3001/mcp/faq/validate"},{endpoint:"GET /mcp/faq/valuesets",description:"List value sets available in this DAK",method:"GET",path:"/mcp/faq/valuesets",fullUrl:"http://127.0.0.1:3001/mcp/faq/valuesets"},{endpoint:"GET /mcp/faq/decision-tables",description:"List decision tables available in this DAK",method:"GET",path:"/mcp/faq/decision-tables",fullUrl:"http://127.0.0.1:3001/mcp/faq/decision-tables"},{endpoint:"GET /mcp/faq/business-processes",description:"List business processes in this DAK",method:"GET",path:"/mcp/faq/business-processes",fullUrl:"http://127.0.0.1:3001/mcp/faq/business-processes"},{endpoint:"GET /mcp/faq/personas",description:"List personas/actors in this DAK",method:"GET",path:"/mcp/faq/personas",fullUrl:"http://127.0.0.1:3001/mcp/faq/personas"},{endpoint:"GET /mcp/faq/questionnaires",description:"List questionnaires available in this DAK",method:"GET",path:"/mcp/faq/questionnaires",fullUrl:"http://127.0.0.1:3001/mcp/faq/questionnaires"}];try{const s=await fetch("http://127.0.0.1:3001/",{method:"GET",timeout:2e3});if(s.ok){const e=await s.json();if(e.endpoints){const s=Object.entries(e.endpoints).map(e=>{let[s,a]=e;return{endpoint:s,description:a,method:s.split(" ")[0],path:s.split(" ")[1],fullUrl:"http://127.0.0.1:3001".concat(s.split(" ")[1])}});return N(s),void y("running")}}y("not-running"),N(e)}catch(v){console.log("MCP service not available, using static endpoints list:",v.message),y("not-running"),N(e)}},P=(()=>{if(s&&T)return{repository:"".concat(s,"/").concat(T),branch:r||"main"};const e=u.state;return null!==e&&void 0!==e&&e.user&&null!==e&&void 0!==e&&e.repo?{repository:"".concat(e.user,"/").concat(e.repo),branch:e.branch||"main"}:null})();return f?(0,o.jsxs)("div",{className:"dak-faq-demo loading",children:[(0,o.jsx)("div",{className:"loading-spinner"}),(0,o.jsx)("p",{children:e("dak.faq.loading")})]}):v?(0,o.jsxs)("div",{className:"dak-faq-demo error",children:[(0,o.jsx)("h2",{children:"FAQ System Error"}),(0,o.jsx)("p",{children:v}),(0,o.jsx)("button",{onClick:S,children:"Retry"})]}):P?(0,o.jsxs)("div",{className:"dak-faq-demo",children:[(0,o.jsxs)("header",{className:"dak-faq-demo-header",children:[(0,o.jsx)("h1",{children:"DAK FAQ Demo"}),(0,o.jsxs)("div",{className:"repository-info",children:[(0,o.jsx)("span",{className:"repo-name",children:P.repository}),(0,o.jsxs)("span",{className:"branch-name",children:["(",P.branch,")"]})]})]}),(0,o.jsxs)("div",{className:"faq-questions",children:[(0,o.jsx)("h2",{children:"DAK FAQ System"}),(0,o.jsx)("p",{children:"Ask questions about this DAK and get automated answers based on repository analysis"}),(0,o.jsxs)("div",{className:"execution-mode-selector",children:[(0,o.jsx)("h3",{children:"Execution Mode"}),(0,o.jsxs)("div",{className:"execution-options",children:[(0,o.jsxs)("label",{className:"execution-option",children:[(0,o.jsx)("input",{type:"radio",name:"executionMode",value:"client-side",checked:"client-side"===A,onChange:e=>w(e.target.value)}),(0,o.jsxs)("span",{className:"option-label",children:[(0,o.jsx)("strong",{children:"Client-Side Execution"}),(0,o.jsx)("small",{children:"Runs directly in your browser using GitHub API"})]})]}),"running"===b&&(0,o.jsxs)("label",{className:"execution-option",children:[(0,o.jsx)("input",{type:"radio",name:"executionMode",value:"mcp-service",checked:"mcp-service"===A,onChange:e=>w(e.target.value)}),(0,o.jsxs)("span",{className:"option-label",children:[(0,o.jsx)("strong",{children:"MCP Service"}),(0,o.jsx)("small",{children:"Uses local MCP server for enhanced performance"})]})]}),"not-running"===b&&(0,o.jsxs)("div",{className:"execution-option disabled",children:[(0,o.jsx)("input",{type:"radio",disabled:!0}),(0,o.jsxs)("span",{className:"option-label",children:[(0,o.jsx)("strong",{children:"MCP Service"}),(0,o.jsx)("small",{children:"Not available - Start MCP server to enable"})]})]})]})]}),(0,o.jsxs)("h3",{children:["Available Questions (",E.length,")"]}),(0,o.jsx)("p",{children:"Click on any question below to expand and see the answer. Questions are executed when you expand them."}),E.map(e=>(0,o.jsxs)("div",{className:"faq-question-section",children:[(0,o.jsx)("h3",{children:e.title}),(0,o.jsx)("p",{className:"question-description",children:e.description}),"decision-table-inputs"===e.id?(0,o.jsxs)("div",{className:"dmn-demo",children:[(0,o.jsx)("p",{children:(0,o.jsx)("em",{children:"This is an asset-level question that analyzes individual DMN files. In a real DAK repository, this would scan DMN files in directories like input/cql/ or input/dmn/."})}),(0,o.jsx)(d,{questionId:e.id,parameters:(0,i.A)((0,i.A)({},P),{},{assetFile:"input/cql/IMMZ.D2.DT.BCG.dmn"}),githubService:h.A,showRawData:!0,executionMode:A})]}):(0,o.jsx)(d,{questionId:e.id,parameters:P,githubService:h.A,showRawData:!0,executionMode:A})]},e.id))]}),(0,o.jsxs)("div",{className:"faq-catalog",children:[(0,o.jsx)("h2",{children:"FAQ Question Catalog"}),(0,o.jsx)("p",{children:"All available questions in the system:"}),(0,o.jsx)("div",{className:"catalog-grid",children:m.map(e=>(0,o.jsxs)("div",{className:"catalog-item",children:[(0,o.jsx)("h4",{children:e.title}),(0,o.jsx)("p",{children:e.description}),(0,o.jsxs)("div",{className:"catalog-meta",children:[(0,o.jsx)("span",{className:"level",children:e.level}),(0,o.jsxs)("span",{className:"version",children:["v",e.version]})]}),(0,o.jsx)("div",{className:"tags",children:e.tags.map(e=>(0,o.jsx)("span",{className:"tag",children:e},e))})]},e.id))})]}),(0,o.jsxs)("div",{className:"mcp-info",children:[(0,o.jsx)("h2",{children:"MCP Server Integration"}),(0,o.jsx)("div",{className:"mcp-status",children:(0,o.jsxs)("p",{children:[(0,o.jsx)("strong",{children:"Service Status:"}),(0,o.jsx)("span",{className:"status-badge ".concat(b),children:"running"===b?"\ud83d\udfe2 Running":"not-running"===b?"\ud83d\udd34 Not Running":"\u26aa Unknown"})]})}),(0,o.jsxs)("p",{children:["The FAQ system can be accessed via the local MCP server API for programmatic access.","running"===b?(0,o.jsxs)("span",{children:[" The MCP service is currently ",(0,o.jsx)("strong",{children:"running locally"})," and available for testing."]}):(0,o.jsxs)("span",{children:[" The MCP service is ",(0,o.jsx)("strong",{children:"not running locally"}),", but all 14 endpoints are listed below for reference."]})]}),(0,o.jsxs)("div",{className:"endpoints-section",children:[(0,o.jsxs)("h3",{children:["Available Endpoints (",g.length,")"]}),g.length>0?(0,o.jsx)("div",{className:"endpoints-list",children:g.map((e,s)=>(0,o.jsxs)("div",{className:"endpoint-item",children:[(0,o.jsxs)("div",{className:"endpoint-header",children:[(0,o.jsx)("span",{className:"method-badge ".concat(e.method.toLowerCase()),children:e.method}),(0,o.jsx)("code",{className:"endpoint-url",children:e.fullUrl})]}),(0,o.jsx)("p",{className:"endpoint-description",children:e.description})]},s))}):(0,o.jsx)("p",{children:"No endpoints available. Start the MCP server to see all available endpoints."})]}),(0,o.jsxs)("div",{className:"mcp-usage-info",children:[(0,o.jsx)("h4",{children:"Usage Instructions"}),(0,o.jsxs)("ol",{children:[(0,o.jsxs)("li",{children:["Start the MCP server: ",(0,o.jsx)("code",{children:"cd services/dak-faq-mcp && npm start"})]}),(0,o.jsx)("li",{children:"Use any HTTP client to access the endpoints above"}),(0,o.jsx)("li",{children:"Refresh this page to see updated endpoint status"})]})]})]})]}):(0,o.jsxs)("div",{className:"dak-faq-demo no-context",children:[(0,o.jsx)("h2",{children:"DAK FAQ Demo"}),(0,o.jsx)("p",{children:"No repository context available. Please navigate from a DAK repository page."}),(0,o.jsxs)("div",{className:"demo-info",children:[(0,o.jsx)("h3",{children:"Available Questions"}),(0,o.jsx)("ul",{children:m.map(e=>(0,o.jsxs)("li",{children:[(0,o.jsx)("strong",{children:e.title})," - ",e.description]},e.id))})]})]})},m=()=>(0,o.jsx)(p.Mx,{pageName:"dak-faq-demo",children:(0,o.jsx)(u,{})})}}]);