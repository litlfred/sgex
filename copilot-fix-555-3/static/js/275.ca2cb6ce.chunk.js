"use strict";(self.webpackChunksgex_workbench=self.webpackChunksgex_workbench||[]).push([[275],{13333:(e,n,o)=>{o.d(n,{hX:()=>i});const i=function(e,n,o){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;if((e=>!!(null!==e&&void 0!==e&&e.ctrlKey||null!==e&&void 0!==e&&e.metaKey))(e)){const e=(e=>{const n="/sgex/copilot-fix-555-3",o=window.location.origin,i=e.startsWith("/")?e.slice(1):e;return n?`${o}${n.endsWith("/")?n:n+"/"}${i}`:`${o}/${i}`})(n);window.open(e,"_blank","noopener,noreferrer")}else i?o(n,{state:i}):o(n)}},46275:(e,n,o)=>{o.r(n),o.d(n,{default:()=>u});var i=o(65043),s=o(29615),t=o(93071),a=o(89387);const l=()=>{var e,n,o;const l=(0,s.zy)(),r=(0,s.Zp)(),{user:d,repo:c,branch:m}=(0,s.g)(),[p,u]=(0,i.useState)((null===(e=l.state)||void 0===e?void 0:e.profile)||null),[h,g]=(0,i.useState)((null===(n=l.state)||void 0===n?void 0:n.repository)||null),[b,v]=(0,i.useState)((null===(o=l.state)||void 0===o?void 0:o.selectedBranch)||m||null),[f,w]=(0,i.useState)(!p||!h),[_,y]=(0,i.useState)(null);return(0,i.useEffect)(()=>{(async()=>{var e,n,o,i,s;if(console.log("\ud83d\udd0d useDAKUrlParams: Starting data fetch analysis:",{urlParams:{user:d,repo:c,branch:m},currentState:{hasProfile:!!p,hasRepository:!!h,profileLogin:null===p||void 0===p?void 0:p.login,repositoryFullName:null===h||void 0===h?void 0:h.full_name,repositoryOwner:null===h||void 0===h||null===(e=h.owner)||void 0===e?void 0:e.login},hasLocationState:!!l.state,locationStateSummary:l.state?{hasProfile:!!l.state.profile,hasRepository:!!l.state.repository,profileLogin:null===(n=l.state.profile)||void 0===n?void 0:n.login,repositoryFullName:null===(o=l.state.repository)||void 0===o?void 0:o.full_name,repositoryOwner:null===(i=l.state.repository)||void 0===i||null===(s=i.owner)||void 0===s?void 0:s.login}:null,isAuthenticated:t.A.isAuth(),needsFetch:(!p||!h)&&d&&c}),p&&h||!d||!c)console.log("\ud83d\udccb useDAKUrlParams: Not fetching from URL params, using existing state:",{hasProfile:!!p,hasRepository:!!h,hasUserParam:!!d,hasRepoParam:!!c,reason:p&&h?"state already populated":"missing URL params"}),w(!1);else{console.log("useDAKUrlParams: Fetching data from URL parameters:",{user:d,repo:c,branch:m,hasProfile:!!p,hasRepository:!!h,hasLocationState:!!l.state,isAuthenticated:t.A.isAuth()});try{if(w(!0),y(null),!t.A.isAuth()){console.log("\ud83d\udeab useDAKUrlParams: Not authenticated, entering demo mode");if(!a.A.validateDemoDAKRepository(d,c))return console.log("\u274c useDAKUrlParams: Demo DAK validation failed, redirecting home"),void r("/",{state:{warningMessage:`Could not access the requested DAK. Repository '${d}/${c}' not found or not accessible.`}});console.log("\u2705 useDAKUrlParams: Demo DAK validation passed, creating demo data");const e={login:d,name:d.charAt(0).toUpperCase()+d.slice(1),avatar_url:`https://github.com/${d}.png`,type:"User",isDemo:!0},n={name:c,full_name:`${d}/${c}`,owner:{login:d},default_branch:m||"main",html_url:`https://github.com/${d}/${c}`,isDemo:!0};return console.log("\ud83d\udccb useDAKUrlParams: Setting demo state:",{profile:e,repository:n,selectedBranch:m||"main"}),u(e),g(n),v(m||"main"),void w(!1)}console.log("\ud83d\udd10 useDAKUrlParams: Authenticated, fetching real repository data");let e=null;try{console.log(`\ud83d\udd0d useDAKUrlParams: Fetching user profile for: ${d}`);e=await t.A.getUser(d),console.log("\u2705 useDAKUrlParams: User profile fetched:",{login:e.login,name:e.name,type:e.type})}catch(b){return console.error("\u274c useDAKUrlParams: Error fetching user:",b),void r("/",{state:{warningMessage:`Could not access the requested DAK. User '${d}' not found or not accessible.`}})}let n=null;try{console.log(`useDAKUrlParams: Fetching repository data for ${d}/${c}`);n=await t.A.getRepository(d,c),console.log("useDAKUrlParams: Repository data fetched successfully:",{name:n.name,full_name:n.full_name,owner:n.owner,default_branch:n.default_branch})}catch(b){return console.error("useDAKUrlParams: Error fetching repository:",b),void r("/",{state:{warningMessage:`Could not access the requested DAK. Repository '${d}/${c}' not found or not accessible.`}})}if(!await a.A.validateDAKRepository(d,c,m||n.default_branch))return console.log(`Repository ${d}/${c} is not a valid DAK repository`),void r("/",{state:{warningMessage:`Could not access the requested DAK. Repository '${d}/${c}' not found or not accessible.`}});if(m)try{await t.A.getBranch(d,c,m),v(m)}catch(b){console.warn(`Branch '${m}' not found, falling back to default branch`),v(n.default_branch)}else v(n.default_branch);console.log("useDAKUrlParams: Setting final state:",{profile:{login:e.login,name:e.name,type:e.type},repository:{name:n.name,full_name:n.full_name,owner:n.owner,default_branch:n.default_branch},selectedBranch:m||n.default_branch}),u(e),g(n),w(!1)}catch(b){console.error("Error fetching data from URL params:",b),y("Failed to load DAK data. Please check the URL or try again."),w(!1)}}})()},[d,c,m,p,h,r,l.state]),{profile:p,repository:h,selectedBranch:b,loading:f,error:_,user:d,repo:c,branch:m||b,navigate:r}};var r=o(76712),d=o(13333),c=o(50784),m=o(70579);const p=e=>{let{file:n,repository:o,selectedBranch:s,profile:a}=e;const l=(0,i.useRef)(null),r=(0,i.useRef)(null),[d,p]=(0,i.useState)(!0),[u,h]=(0,i.useState)(null);return(0,i.useEffect)(()=>(n&&o&&l.current?(async()=>{if(n&&o&&l.current)try{var e,i,a;p(!0),h(null),l.current&&(l.current.innerHTML="");const u=(null===(e=o.owner)||void 0===e?void 0:e.login)||o.full_name.split("/")[0],g=o.name,b=s||"main";let v;if((null===(i=n.path)||void 0===i?void 0:i.includes("demo/"))||(null===(a=n.sha)||void 0===a?void 0:a.startsWith("demo-"))){const e=n.name.replace(".bpmn","").replace(/[-_]/g," ");v=`<?xml version="1.0" encoding="UTF-8"?>\n<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" \n                  xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" \n                  xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" \n                  xmlns:di="http://www.omg.org/spec/DD/20100524/DI" \n                  id="Definitions_1" targetNamespace="http://bpmn.io/schema/bpmn">\n  <bpmn:process id="Process_${n.name.replace(/[^a-zA-Z0-9]/g,"_")}" isExecutable="false">\n    <bpmn:startEvent id="StartEvent_1" name="Start">\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:task id="Task_1" name="${e}">\n      <bpmn:incoming>Flow_1</bpmn:incoming>\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\n    </bpmn:task>\n    <bpmn:endEvent id="EndEvent_1" name="End">\n      <bpmn:incoming>Flow_2</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id="Flow_1" sourceRef="StartEvent_1" targetRef="Task_1" />\n    <bpmn:sequenceFlow id="Flow_2" sourceRef="Task_1" targetRef="EndEvent_1" />\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id="BPMNDiagram_1">\n    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_${n.name.replace(/[^a-zA-Z0-9]/g,"_")}">\n      <bpmndi:BPMNShape id="StartEvent_1_di" bpmnElement="StartEvent_1">\n        <dc:Bounds x="152" y="82" width="36" height="36" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x="158" y="125" width="24" height="14" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Task_1_di" bpmnElement="Task_1">\n        <dc:Bounds x="250" y="60" width="100" height="80" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="EndEvent_1_di" bpmnElement="EndEvent_1">\n        <dc:Bounds x="402" y="82" width="36" height="36" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x="410" y="125" width="20" height="14" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id="Flow_1_di" bpmnElement="Flow_1">\n        <di:waypoint x="188" y="100" />\n        <di:waypoint x="250" y="100" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_2_di" bpmnElement="Flow_2">\n        <di:waypoint x="350" y="100" />\n        <di:waypoint x="402" y="100" />\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>`}else try{v=await t.A.getFileContent(u,g,n.path,b)}catch(d){console.warn("Could not load BPMN file content:",d);const e=n.name.replace(".bpmn","").replace(/[-_]/g," ");v=`<?xml version="1.0" encoding="UTF-8"?>\n<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" \n                  xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" \n                  xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" \n                  xmlns:di="http://www.omg.org/spec/DD/20100524/DI" \n                  id="Definitions_1" targetNamespace="http://bpmn.io/schema/bpmn">\n  <bpmn:process id="Process_${n.name.replace(/[^a-zA-Z0-9]/g,"_")}" isExecutable="false">\n    <bpmn:startEvent id="StartEvent_1" name="Start">\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:task id="Task_1" name="${e}">\n      <bpmn:incoming>Flow_1</bpmn:incoming>\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\n    </bpmn:task>\n    <bpmn:endEvent id="EndEvent_1" name="End">\n      <bpmn:incoming>Flow_2</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id="Flow_1" sourceRef="StartEvent_1" targetRef="Task_1" />\n    <bpmn:sequenceFlow id="Flow_2" sourceRef="Task_1" targetRef="EndEvent_1" />\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id="BPMNDiagram_1">\n    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_${n.name.replace(/[^a-zA-Z0-9]/g,"_")}">\n      <bpmndi:BPMNShape id="StartEvent_1_di" bpmnElement="StartEvent_1">\n        <dc:Bounds x="152" y="82" width="36" height="36" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x="158" y="125" width="24" height="14" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Task_1_di" bpmnElement="Task_1">\n        <dc:Bounds x="250" y="60" width="100" height="80" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="EndEvent_1_di" bpmnElement="EndEvent_1">\n        <dc:Bounds x="402" y="82" width="36" height="36" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x="410" y="125" width="20" height="14" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id="Flow_1_di" bpmnElement="Flow_1">\n        <di:waypoint x="188" y="100" />\n        <di:waypoint x="250" y="100" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_2_di" bpmnElement="Flow_2">\n        <di:waypoint x="350" y="100" />\n        <di:waypoint x="402" y="100" />\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>`}const f=new c.A;r.current=f;try{await f.attachTo(l.current),await f.importXML(v),f.get("canvas").zoom("fit-viewport"),p(!1)}catch(m){console.error("Failed to import BPMN XML:",m),h("Failed to load preview"),p(!1)}}catch(u){console.error("Failed to render BPMN preview:",u),h("Failed to load preview"),p(!1)}})():p(!1),()=>{if(r.current){try{r.current.destroy()}catch(e){console.warn("Error cleaning up BPMN viewer:",e)}r.current=null}}),[n,o,s,a]),d?(0,m.jsx)("div",{className:"bpmn-preview",children:(0,m.jsxs)("div",{className:"preview-loading",children:[(0,m.jsx)("div",{className:"preview-spinner"}),(0,m.jsx)("span",{children:"Loading preview..."})]})}):u?(0,m.jsx)("div",{className:"bpmn-preview",children:(0,m.jsx)("div",{className:"preview-error",children:(0,m.jsxs)("span",{children:["\u274c ",u]})})}):(0,m.jsx)("div",{className:"bpmn-preview",children:(0,m.jsx)("div",{className:"preview-container",ref:l})})},u=()=>{var e;const n=(0,s.zy)(),o=(0,s.Zp)(),{profile:a,repository:c,selectedBranch:u,loading:h,error:g}=l();console.log("\ud83d\ude80 BusinessProcessSelection: Hook data received:",{hasProfile:!!a,hasRepository:!!c,profileLogin:null===a||void 0===a?void 0:a.login,repositoryName:null===c||void 0===c?void 0:c.name,repositoryFullName:null===c||void 0===c?void 0:c.full_name,repositoryOwner:null===c||void 0===c||null===(e=c.owner)||void 0===e?void 0:e.login,selectedBranch:u,dakLoading:h,dakError:g});const{component:b}=n.state||{},[v,f]=(0,i.useState)([]),[w,_]=(0,i.useState)(!0),[y,N]=(0,i.useState)(null),[P,x]=(0,i.useState)(!1);(0,i.useEffect)(()=>{(async()=>{if(c&&a)try{var e;const n=a.token&&(null===(e=c.permissions)||void 0===e?void 0:e.push);x(n||!1)}catch(y){console.warn("Could not check write permissions:",y),x(!1)}})()},[c,a]),(0,i.useEffect)(()=>{(async()=>{if(c)try{var e,n,i,s;_(!0),N(null),console.log("\ud83d\udcc2 BusinessProcessSelection - Repository object analysis:",{name:c.name,full_name:c.full_name,owner:c.owner,ownerLogin:null===(e=c.owner)||void 0===e?void 0:e.login,isDemo:c.isDemo,html_url:c.html_url,default_branch:c.default_branch}),console.log("\ud83d\udc64 BusinessProcessSelection - Profile object analysis:",{login:null===a||void 0===a?void 0:a.login,name:null===a||void 0===a?void 0:a.name,isDemo:null===a||void 0===a?void 0:a.isDemo,type:null===a||void 0===a?void 0:a.type});const o=(null===(n=c.owner)||void 0===n?void 0:n.login)||c.full_name.split("/")[0],l=c.name,r=u||"main";console.log("\ud83d\udccb BusinessProcessSelection: Derived repository info:",{original_owner_login:null===(i=c.owner)||void 0===i?void 0:i.login,original_full_name:c.full_name,derived_owner:o,derived_repoName:l,selected_ref:r,derivation_method:null!==(s=c.owner)&&void 0!==s&&s.login?"owner.login":"full_name.split"}),console.log(`\ud83d\udd0d BusinessProcessSelection: About to fetch BPMN files from ${o}/${l} (branch: ${r})`),console.log("BusinessProcessSelection: Final repository access details:",{derivedOwner:o,repositoryName:l,ref:r,fullRepositoryData:{name:c.name,full_name:c.full_name,owner:c.owner,default_branch:c.default_branch}});const d=await t.A.getBpmnFiles(o,l,r);if(0===d.length&&null!==a&&void 0!==a&&a.isDemo){console.log("No BPMN files found in demo mode, providing fallback demo files");f([{name:"patient-registration.bpmn",path:"demo/business-processes/patient-registration.bpmn",sha:"demo-sha-1",size:2048,download_url:"#",html_url:"#"},{name:"vaccination-workflow.bpmn",path:"demo/business-processes/vaccination-workflow.bpmn",sha:"demo-sha-2",size:3072,download_url:"#"},{name:"appointment-scheduling.bpmn",path:"demo/business-processes/appointment-scheduling.bpmn",sha:"demo-sha-3",size:1536,download_url:"#"}])}else f(d);_(!1)}catch(r){var l;if(console.error("Failed to fetch BPMN files from repository:",r),null!==a&&void 0!==a&&a.isDemo||null!==(l=r.message)&&void 0!==l&&l.includes("Failed to fetch")){console.log("Providing fallback demo BPMN files");return f([{name:"patient-registration.bpmn",path:"demo/business-processes/patient-registration.bpmn",sha:"demo-sha-1",size:2048,download_url:"#",html_url:"#"},{name:"vaccination-workflow.bpmn",path:"demo/business-processes/vaccination-workflow.bpmn",sha:"demo-sha-2",size:3072,download_url:"#"},{name:"appointment-scheduling.bpmn",path:"demo/business-processes/appointment-scheduling.bpmn",sha:"demo-sha-3",size:1536,download_url:"#"}]),void _(!1)}401===r.status||403===r.status?N("Authentication required to access this repository. Please ensure you have a valid GitHub token with appropriate permissions."):404===r.status?N("Repository or branch not found. Please check the repository name and branch."):N(`Failed to load BPMN files from repository: ${r.message}`),f([]),_(!1)}else o("/")})()},[a,c,o,u]);return h?(0,m.jsx)("div",{className:"business-process-selection loading-state",children:(0,m.jsxs)("div",{className:"loading-content",children:[(0,m.jsx)("h2",{children:"Loading DAK Data..."}),(0,m.jsx)("p",{children:"Fetching repository and user data..."})]})}):g?(0,m.jsx)("div",{className:"business-process-selection error-state",children:(0,m.jsxs)("div",{className:"error-content",children:[(0,m.jsx)("h2",{children:"Error Loading DAK Data"}),(0,m.jsx)("p",{children:g}),(0,m.jsxs)("div",{className:"error-actions",children:[(0,m.jsx)("button",{onClick:()=>o("/"),className:"action-btn primary",children:"Return to Home"}),(0,m.jsx)("button",{onClick:()=>window.location.reload(),className:"action-btn secondary",children:"Retry"})]})]})}):a&&c?(0,m.jsx)(r.Mx,{pageName:"business-process-selection",children:(0,m.jsx)("div",{className:"business-process-selection",children:(0,m.jsx)("div",{className:"selection-content",children:(0,m.jsxs)("div",{className:"selection-main",children:[(0,m.jsxs)("div",{className:"selection-intro",children:[(0,m.jsx)("h2",{children:"Business Process Files"}),(0,m.jsxs)("p",{children:["Select a BPMN business process file to view, edit, or examine the source code. Files are loaded from ",(0,m.jsx)("code",{children:"input/business-processes/"})," or ",(0,m.jsx)("code",{children:"input/business-process/"})," directories and subdirectories."]})]}),w?(0,m.jsxs)("div",{className:"loading",children:[(0,m.jsx)("div",{className:"spinner"}),(0,m.jsx)("p",{children:"Loading business process files..."})]}):y?(0,m.jsx)("div",{className:"error",children:(0,m.jsxs)("p",{children:["\u274c ",y]})}):0===v.length?(0,m.jsxs)("div",{className:"empty-state",children:[(0,m.jsx)("div",{className:"empty-icon",children:"\ud83d\udccb"}),(0,m.jsx)("h3",{children:"No BPMN Files Found"}),(0,m.jsx)("p",{children:"No .bpmn files were found in the input/business-processes/ or input/business-process/ directories."})]}):(0,m.jsx)("div",{className:"files-grid",children:v.map(e=>(0,m.jsxs)("div",{className:"file-card",children:[(0,m.jsx)(p,{file:e,repository:c,selectedBranch:u,profile:a}),(0,m.jsxs)("div",{className:"file-header",children:[(0,m.jsx)("div",{className:"file-icon",children:"\ud83d\udd04"}),(0,m.jsxs)("div",{className:"file-details",children:[(0,m.jsx)("h3",{className:"file-name",children:e.name}),(0,m.jsxs)("div",{className:"file-info-compact",children:[(0,m.jsx)("span",{className:"file-path",children:e.path}),(0,m.jsxs)("span",{className:"file-size",children:[(e.size/1024).toFixed(1)," KB"]})]})]})]}),(0,m.jsxs)("div",{className:"file-actions",children:[(0,m.jsx)("button",{className:"action-btn view-btn",onClick:n=>((e,n)=>{var i;const s=`/bpmn-viewer/${(null===(i=c.owner)||void 0===i?void 0:i.login)||c.full_name.split("/")[0]}/${c.name}/${u||"main"}/${n.path}`,t={profile:a,repository:c,component:b,selectedFile:n,selectedBranch:u,mode:"view"};(0,d.hX)(e,s,o,t)})(n,e),title:"View BPMN diagram (read-only)",children:"\ud83d\udc41\ufe0f View"}),(0,m.jsx)("button",{className:"action-btn edit-btn "+(P?"":"disabled"),onClick:n=>((e,n)=>{var i;if(!P)return void alert("You need write permissions to edit BPMN files. Please check your GitHub token permissions.");const s=`/bpmn-editor/${(null===(i=c.owner)||void 0===i?void 0:i.login)||c.full_name.split("/")[0]}/${c.name}/${u||"main"}/${n.path}`,t={profile:a,repository:c,component:b,selectedFile:n,selectedBranch:u,mode:"edit"};(0,d.hX)(e,s,o,t)})(n,e),title:P?"Edit BPMN diagram":"Edit access required",disabled:!P,children:"\u270f\ufe0f Edit"}),(0,m.jsx)("button",{className:"action-btn source-btn",onClick:n=>((e,n)=>{var i;const s=`/bpmn-source/${(null===(i=c.owner)||void 0===i?void 0:i.login)||c.full_name.split("/")[0]}/${c.name}/${u||"main"}/${n.path}`,t={profile:a,repository:c,component:b,selectedFile:n,selectedBranch:u};(0,d.hX)(e,s,o,t)})(n,e),title:"View XML source code",children:"\ud83d\udcc4 Source"})]})]},e.sha))})]})})})}):(o("/"),(0,m.jsx)("div",{children:"Redirecting..."}))}}}]);
//# sourceMappingURL=275.ca2cb6ce.chunk.js.map