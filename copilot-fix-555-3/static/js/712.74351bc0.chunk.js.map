{"version":3,"file":"static/js/712.74351bc0.chunk.js","mappings":"iIA0yBA,MACA,EAD2B,IAzyB3B,MACEA,WAAAA,GAEEC,KAAKC,gBAAkB,CACrBC,cAAe,CACbC,GAAI,qBACJC,MAAO,qBACPC,MAAO,8BACPC,KAAM,SACNC,OAAQA,KAEN,MAAMC,EAAcC,OAAOC,SAASC,SAKpC,IAAIC,EAAW,GACf,GAAIJ,EAAYK,SAAS,SAAU,CACjC,MAAMC,EAAYN,EAAYO,MAAM,KAC9BC,EAAYF,EAAUG,QAAQ,SAEjB,IAAfD,IAMAJ,EAJEE,EAAUI,OAASF,EAAY,GAC/BF,EAAUE,EAAY,KACrB,CAAC,YAAa,OAAQ,iBAAkB,aAAc,iBAAiBH,SAASC,EAAUE,EAAY,IAE9F,IAAIF,EAAUK,MAAM,EAAGH,EAAY,GAAGI,KAAK,OAG3C,IAAIN,EAAUK,MAAM,EAAGH,EAAY,GAAGI,KAAK,OAG5D,CAEAX,OAAOC,SAASW,KAAO,GAAGT,mBAE5BU,QAAS,mSAOXC,UAAW,CACTpB,GAAI,kBACJC,MAAO,oBACPC,MAAO,6BACPC,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,wBACPkB,QAAS,+/DAkCfE,YAAa,CACXrB,GAAI,uBACJC,MAAO,uBACPE,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,+BACPkB,QAAS,k/CA6BjBtB,KAAKyB,WAAa,CAChB,+BAAgC,CAC9B,CACEtB,GAAI,mBACJC,MAAO,+CACPC,MAAO,8BACPC,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,gCACPkB,QAAS,koBAaX,CACElB,MAAO,6BACPkB,QAAS,2jBAaX,CACElB,MAAO,mCACPkB,QAAS,wnBAcX,CACElB,MAAO,yBACPkB,QAAS,ogBAejB,6BAA8B,CAC5B,CACEnB,GAAI,oBACJC,MAAO,yCACPE,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,8BACPkB,QAAS,0oBAejB,uBAAwB,CACtB,CACEnB,GAAI,sBACJC,MAAO,2BACPE,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,4BACPkB,QAAS,isBAejB,uBAAwB,CACtB,CACEnB,GAAI,kBACJC,MAAO,2BACPE,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,iCACPkB,QAAS,ykBAejB,gBAAiB,CACf,CACEnB,GAAI,0BACJC,MAAO,+BACPE,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,sCACPkB,QAAS,ihCAqBjB,gBAAiB,CACf,CACEnB,GAAI,0BACJC,MAAO,qCACPE,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,qCACPkB,QAAS,kwBAgBjB,yBAA0B,CACxB,CACEnB,GAAI,yBACJC,MAAO,2BACPE,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,mCACPkB,QAAS,spBAejB,cAAe,CACb,CACEnB,GAAI,oBACJC,MAAO,wBACPE,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,iCACPkB,QAAS,gwBAgBjB,mBAAoB,CAClB,CACEnB,GAAI,4BACJC,MAAO,qCACPE,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,sBACPkB,QAAS,00BAmBjB,YAAa,CACX,CACEnB,GAAI,0BACJC,MAAO,+BACPC,MAAO,8BACPC,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,8BACPkB,QAAS,mvBAgBjB,yBAA0B,CACxB,CACEnB,GAAI,qBACJC,MAAO,2BACPC,MAAO,8BACPC,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,wBACPkB,QAAS,swBAqBjB,QAAW,CACT,CACEnB,GAAI,mBACJC,MAAO,+CACPC,MAAO,8BACPC,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,gCACPkB,QAAS,koBAaX,CACElB,MAAO,6BACPkB,QAAS,2jBAaX,CACElB,MAAO,mCACPkB,QAAS,wnBAcX,CACElB,MAAO,yBACPkB,QAAS,ogBAejB,oBAAqB,CACnB,CACEnB,GAAI,0BACJC,MAAO,uBACPE,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,kCACPkB,QAAS,mmCAqBjB,8BAA+B,CAC7B,CACEnB,GAAI,4BACJC,MAAO,qCACPC,MAAO,8BACPC,KAAM,YACNgB,QAAS,CACP,CACElB,MAAO,oCACPkB,QAAS,q6CAgBX,CACElB,MAAO,2BACPkB,QAAS,s3BAgBf,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","sources":["services/helpContentService.js","services/cacheManagementService.js","components/LanguageSelector.js","components/ContextualHelpMascot.js","hooks/useThemeImage.js","services/stagingGroundService.js","services/repositoryCacheService.js","components/HelpModal.js","services/profileSubscriptionService.js","components/framework/PageProvider.js","utils/themeUtils.js","services/userAccessService.js","services/bookmarkService.js","components/PreviewBadge.js","components/framework/PageHeader.js","components/framework/AccessBadge.js","components/framework/PageContext.js","components/framework/ErrorHandler.js","components/framework/PageLayout.js","components/framework/usePageParams.js","components/framework/SaveButtonsContainer.js","components/framework/CommitMessageDialog.js","services/dataAccessLayer.js","components/framework/AssetEditorLayout.js","components/framework/useAssetSave.js","components/framework/ToolDefinition.js","services/localStorageService.js","services/branchContextService.js","services/dakValidationService.js","utils/concurrency.js","utils/repositoryCompatibilityCache.js","services/githubService.js"],"sourcesContent":["// Help Content Service - Provides page-specific help topics and content\nclass HelpContentService {\n  constructor() {\n    // Universal help topics that appear on all pages\n    this.universalTopics = {\n      documentation: {\n        id: 'sgex-documentation',\n        title: 'View Documentation',\n        badge: '/sgex/cat-paw-info-icon.svg',\n        type: 'action',\n        action: () => {\n          // Navigate to documentation viewer in the same window\n          const currentPath = window.location.pathname;\n          \n          // Check if we're in a feature branch deployment\n          // Feature branch URLs have the pattern: /sgex/branch-name/page-path\n          // Main branch URLs have the pattern: /sgex/page-path\n          let basePath = '';\n          if (currentPath.includes('/sgex')) {\n            const pathParts = currentPath.split('/');\n            const sgexIndex = pathParts.indexOf('sgex');\n            \n            if (sgexIndex !== -1) {\n              // Check if this is a feature branch (has additional path segment after /sgex)\n              if (pathParts.length > sgexIndex + 2 && \n                  pathParts[sgexIndex + 1] && \n                  !['dashboard', 'docs', 'select_profile', 'dak-action', 'dak-selection'].includes(pathParts[sgexIndex + 1])) {\n                // Feature branch: /sgex/branch-name\n                basePath = `/${pathParts.slice(1, sgexIndex + 2).join('/')}`;\n              } else {\n                // Main branch: /sgex\n                basePath = `/${pathParts.slice(1, sgexIndex + 1).join('/')}`;\n              }\n            }\n          }\n          \n          window.location.href = `${basePath}/docs/overview`;\n        },\n        content: `\n          <p>Access comprehensive documentation and guides for using SGEX Workbench.</p>\n          <div class=\"help-tip\">\n            <strong>📖 Available Documentation:</strong> Requirements, Architecture, DAK Components, User Guides, and more.\n          </div>\n        `\n      },\n      bugReport: {\n        id: 'report-sgex-bug',\n        title: 'Report a SGeX bug',\n        badge: '/sgex/cat-paw-bug-icon.svg',\n        type: 'slideshow',\n        content: [\n          {\n            title: 'Report a Bug or Issue',\n            content: `\n              <p>Help us improve SGeX by reporting bugs and issues:</p>\n              <h4>What type of issue are you experiencing?</h4>\n              <div class=\"bug-report-options\">\n                <button class=\"bug-type-btn\" onclick=\"window.helpModalInstance?.openSgexIssue('bug')\">\n                  🐛 Bug Report - Something isn't working correctly\n                </button>\n                <button class=\"bug-type-btn\" onclick=\"window.helpModalInstance?.openSgexIssue('feature')\">\n                  ✨ Feature Request - Suggest a new feature or improvement\n                </button>\n                <button class=\"bug-type-btn\" onclick=\"window.helpModalInstance?.openSgexIssue('question')\">\n                  ❓ Question - Ask for help or clarification\n                </button>\n                <button class=\"bug-type-btn\" onclick=\"window.helpModalInstance?.openSgexIssue('documentation')\">\n                  📚 Documentation Issue - Report problems with documentation\n                </button>\n                <button class=\"bug-type-btn\" onclick=\"window.helpModalInstance?.openSgexIssue('blank')\">\n                  📝 Blank Issue - Create an issue without a template\n                </button>\n              </div>\n              <div class=\"help-tip\">\n                <strong>💡 Tip:</strong> Please provide as much detail as possible including steps to reproduce, expected behavior, and actual behavior.\n              </div>\n              <div class=\"help-fallback\">\n                <strong>🔗 Can't access GitHub?</strong> If the buttons above don't work in your environment:\n                <ol>\n                  <li>Email us directly at <a href=\"mailto:smart@who.int?subject=SGEX Bug Report\">smart@who.int</a></li>\n                  <li>Or visit <a href=\"https://github.com/litlfred/sgex/issues/new\" target=\"_blank\">github.com/litlfred/sgex/issues/new</a> manually</li>\n                </ol>\n              </div>\n            `\n          }\n        ]\n      },\n      dakFeedback: {\n        id: 'provide-dak-feedback',\n        title: 'Provide DAK Feedback',\n        type: 'slideshow',\n        content: [\n          {\n            title: 'Provide Feedback on this DAK',\n            content: `\n              <p>Share feedback about this Digital Adaptation Kit (DAK):</p>\n              <h4>What type of feedback do you have?</h4>\n              <div class=\"bug-report-options\">\n                <button class=\"bug-type-btn\" onclick=\"window.helpModalInstance?.openDakIssue('content')\">\n                  📝 Report DAK Content Error - Problems with clinical content or logic\n                </button>\n                <button class=\"bug-type-btn\" onclick=\"window.helpModalInstance?.openDakIssue('bug')\">\n                  🐛 DAK Bug - Issue with this specific DAK content\n                </button>\n                <button class=\"bug-type-btn\" onclick=\"window.helpModalInstance?.openDakIssue('improvement')\">\n                  📈 DAK Improvement - Suggest enhancements to this DAK\n                </button>\n                <button class=\"bug-type-btn\" onclick=\"window.helpModalInstance?.openDakIssue('question')\">\n                  ❓ DAK Question - Ask about this DAK's implementation\n                </button>\n                <button class=\"bug-type-btn\" onclick=\"window.helpModalInstance?.openDakIssue('blank')\">\n                  📝 Blank DAK Issue - Create an issue without a template\n                </button>\n              </div>\n              <div class=\"help-tip\">\n                <strong>💡 Note:</strong> This will open an issue in the selected DAK repository for targeted feedback.\n              </div>\n            `\n          }\n        ]\n      }\n    };\n\n    this.helpTopics = {\n      'landing-page-unauthenticated': [\n        {\n          id: 'github-pat-setup',\n          title: 'How to Create a GitHub Personal Access Token',\n          badge: '/sgex/cat-paw-lock-icon.svg',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'Step 1: Go to GitHub Settings',\n              content: `\n                <p>Navigate to your GitHub account settings:</p>\n                <ol>\n                  <li>Click your profile picture in the top right</li>\n                  <li>Select \"Settings\" from the dropdown</li>\n                  <li>Go to \"Developer settings\" → \"Personal access tokens\"</li>\n                  <li>Choose \"Fine-grained tokens\" (recommended) or \"Tokens (classic)\"</li>\n                </ol>\n                <div class=\"help-tip\">\n                  <strong>💡 Tip:</strong> Fine-grained tokens provide better security with repository-specific access.\n                </div>\n              `\n            },\n            {\n              title: 'Step 2: Generate New Token',\n              content: `\n                <p>Create your new token:</p>\n                <ol>\n                  <li>Click \"Generate new token\"</li>\n                  <li>Give it a descriptive name like \"SGEX Workbench\"</li>\n                  <li>Set expiration (90 days recommended)</li>\n                  <li>Select repository access (specific repos or all)</li>\n                </ol>\n                <div class=\"help-warning\">\n                  <strong>⚠️ Important:</strong> You'll only see the token once, so copy it immediately!\n                </div>\n              `\n            },\n            {\n              title: 'Step 3: Set Required Permissions',\n              content: `\n                <p>For <strong>fine-grained tokens</strong>, enable:</p>\n                <ul>\n                  <li><strong>Contents:</strong> Read and Write</li>\n                  <li><strong>Metadata:</strong> Read</li>\n                  <li><strong>Pull requests:</strong> Read and Write</li>\n                </ul>\n                <p>For <strong>classic tokens</strong>, select:</p>\n                <ul>\n                  <li><strong>repo</strong> - Full control of private repositories</li>\n                  <li><strong>read:org</strong> - Read org and team membership</li>\n                </ul>\n              `\n            },\n            {\n              title: 'Step 4: Use Your Token',\n              content: `\n                <p>Now you can authenticate with SGEX:</p>\n                <ol>\n                  <li>Copy your newly generated token</li>\n                  <li>Paste it into the login form</li>\n                  <li>Click \"Sign in with Personal Access Token\"</li>\n                </ol>\n                <div class=\"help-tip\">\n                  <strong>🔒 Security:</strong> Your token is stored securely in your browser and never shared with servers.\n                </div>\n              `\n            }\n          ]\n        }\n      ],\n      'landing-page-authenticated': [\n        {\n          id: 'profile-selection',\n          title: 'Selecting Your Profile or Organization',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'Understanding Profile Types',\n              content: `\n                <p>SGEX shows different types of profiles:</p>\n                <ul>\n                  <li><strong>Personal:</strong> Your individual GitHub repositories</li>\n                  <li><strong>Organization:</strong> Repositories belonging to organizations you're a member of</li>\n                  <li><strong>WHO Official:</strong> World Health Organization repositories (always available)</li>\n                </ul>\n                <div class=\"help-tip\">\n                  <strong>💡 Tip:</strong> DAK count badges show how many SMART Guidelines repositories were found.\n                </div>\n              `\n            }\n          ]\n        }\n      ],\n      'dak-action-selection': [\n        {\n          id: 'choosing-dak-action',\n          title: 'Choosing Your DAK Action',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'Understanding DAK Actions',\n              content: `\n                <p>Choose the right action for your workflow:</p>\n                <ul>\n                  <li><strong>Edit Existing DAK:</strong> Modify an existing repository you have write access to</li>\n                  <li><strong>Fork and Edit:</strong> Create your own copy of a repository to work on</li>\n                  <li><strong>Create New DAK:</strong> Start a brand new DAK repository from scratch</li>\n                </ul>\n                <div class=\"help-tip\">\n                  <strong>💡 Tip:</strong> If you're not sure, start with \"Edit Existing DAK\" if you have permissions, or \"Fork and Edit\" to experiment safely.\n                </div>\n              `\n            }\n          ]\n        }\n      ],\n      'documentation-viewer': [\n        {\n          id: 'navigation-help',\n          title: 'Navigating Documentation',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'Using the Documentation Viewer',\n              content: `\n                <p>The documentation viewer provides easy access to all project information:</p>\n                <ul>\n                  <li>Use the sidebar menu to navigate between sections</li>\n                  <li>Use the dropdown to quickly jump to any document</li>\n                  <li>Click \"Back\" to return to the previous page</li>\n                </ul>\n                <div class=\"help-tip\">\n                  <strong>📖 Available Documentation:</strong> Requirements, Architecture, DAK Components, and more.\n                </div>\n              `\n            }\n          ]\n        }\n      ],\n      'dak-dashboard': [\n        {\n          id: 'dak-components-overview',\n          title: 'Understanding DAK Components',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'WHO SMART Guidelines DAK Components',\n              content: `\n                <p>Digital Adaptation Kits (DAKs) contain 8 core components organized in two levels:</p>\n                <h4>Level 2: Business Logic & Processes</h4>\n                <ul>\n                  <li><strong>Business Processes:</strong> BPMN workflows</li>\n                  <li><strong>Decision Support Logic:</strong> DMN decision tables</li>\n                  <li><strong>Indicators & Measures:</strong> Performance metrics</li>\n                  <li><strong>Data Entry Forms:</strong> Structured questionnaires</li>\n                </ul>\n                <h4>Level 3: Technical Implementation</h4>\n                <ul>\n                  <li><strong>Terminology:</strong> Code systems and value sets</li>\n                  <li><strong>FHIR Profiles:</strong> Resource structure definitions</li>\n                  <li><strong>FHIR Extensions:</strong> Custom data elements</li>\n                  <li><strong>Test Data & Examples:</strong> Sample data for validation</li>\n                </ul>\n              `\n            }\n          ]\n        }\n      ],\n      'dak-selection': [\n        {\n          id: 'choosing-dak-repository',\n          title: 'Selecting the Right DAK Repository',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'Understanding DAK Repository Types',\n              content: `\n                <p>Choose the right repository based on your workflow:</p>\n                <ul>\n                  <li><strong>Published DAKs:</strong> Official WHO repositories with complete implementations</li>\n                  <li><strong>Community DAKs:</strong> Community-maintained repositories with adaptations</li>\n                  <li><strong>Template DAKs:</strong> Starting templates for creating new DAKs</li>\n                  <li><strong>Private DAKs:</strong> Your private repositories or organization-specific DAKs</li>\n                </ul>\n                <div class=\"help-tip\">\n                  <strong>💡 Tip:</strong> Look for the \"SMART Guidelines\" badge to ensure compatibility.\n                </div>\n              `\n            }\n          ]\n        }\n      ],\n      'organization-selection': [\n        {\n          id: 'selecting-organization',\n          title: 'Choosing an Organization',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'Organization vs Personal Account',\n              content: `\n                <p>Decide where to create or fork your DAK:</p>\n                <ul>\n                  <li><strong>Personal Account:</strong> For individual development and experimentation</li>\n                  <li><strong>Organization Account:</strong> For team collaboration and official implementations</li>\n                  <li><strong>WHO Official:</strong> Only for authorized WHO contributors</li>\n                </ul>\n                <div class=\"help-warning\">\n                  <strong>⚠️ Important:</strong> Make sure you have the necessary permissions for the selected organization.\n                </div>\n              `\n            }\n          ]\n        }\n      ],\n      'bpmn-editor': [\n        {\n          id: 'using-bpmn-editor',\n          title: 'Using the BPMN Editor',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'BPMN Business Process Modeling',\n              content: `\n                <p>The BPMN editor helps you create and modify business process workflows:</p>\n                <ul>\n                  <li><strong>Drag and Drop:</strong> Use the palette to add process elements</li>\n                  <li><strong>Connect Elements:</strong> Click and drag to create sequence flows</li>\n                  <li><strong>Properties Panel:</strong> Configure element properties and conditions</li>\n                  <li><strong>Validation:</strong> The editor highlights errors and warnings</li>\n                </ul>\n                <div class=\"help-tip\">\n                  <strong>💡 Tip:</strong> BPMN processes define the clinical workflow and decision logic for your DAK.\n                </div>\n              `\n            }\n          ]\n        }\n      ],\n      'component-editor': [\n        {\n          id: 'component-editor-overview',\n          title: 'Understanding the Component Editor',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'DAK Component Types',\n              content: `\n                <p>The component editor provides specialized interfaces for different DAK components:</p>\n                <h4>Business Logic Components</h4>\n                <ul>\n                  <li><strong>Business Processes:</strong> BPMN workflow editor</li>\n                  <li><strong>Decision Logic:</strong> DMN decision table editor</li>\n                  <li><strong>Forms:</strong> Structured questionnaire builder</li>\n                </ul>\n                <h4>Technical Components</h4>\n                <ul>\n                  <li><strong>FHIR Resources:</strong> Profile and extension definitions</li>\n                  <li><strong>Terminology:</strong> Code systems and value sets</li>\n                  <li><strong>Test Data:</strong> Example data and test cases</li>\n                </ul>\n              `\n            }\n          ]\n        }\n      ],\n      'pat-login': [\n        {\n          id: 'pat-authentication-help',\n          title: 'Using Personal Access Tokens',\n          badge: '/sgex/cat-paw-lock-icon.svg',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'Why Personal Access Tokens?',\n              content: `\n                <p>SGEX uses GitHub Personal Access Tokens (PATs) for secure authentication:</p>\n                <ul>\n                  <li><strong>No Backend Required:</strong> Works entirely in your browser</li>\n                  <li><strong>Fine-grained Control:</strong> Choose which repositories to access</li>\n                  <li><strong>Enhanced Security:</strong> Can be easily rotated and revoked</li>\n                  <li><strong>Privacy Focused:</strong> Your token never leaves your browser</li>\n                </ul>\n                <div class=\"help-tip\">\n                  <strong>🔒 Security:</strong> SGEX stores your token locally and never transmits it to any server.\n                </div>\n              `\n            }\n          ]\n        }\n      ],\n      'pat-setup-instructions': [\n        {\n          id: 'detailed-pat-setup',\n          title: 'Detailed PAT Setup Guide',\n          badge: '/sgex/cat-paw-lock-icon.svg',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'Token Type Comparison',\n              content: `\n                <p>GitHub offers two types of Personal Access Tokens:</p>\n                <h4>Fine-grained Tokens (Recommended)</h4>\n                <ul>\n                  <li>Repository-specific access control</li>\n                  <li>Better security with minimal permissions</li>\n                  <li>More granular permission settings</li>\n                  <li>Shorter default expiration times</li>\n                </ul>\n                <h4>Classic Tokens</h4>\n                <ul>\n                  <li>Broader scope-based permissions</li>\n                  <li>Simpler permission model</li>\n                  <li>Longer expiration options</li>\n                  <li>Works with all GitHub integrations</li>\n                </ul>\n              `\n            }\n          ]\n        }\n      ],\n      'welcome': [\n        {\n          id: 'github-pat-setup',\n          title: 'How to Create a GitHub Personal Access Token',\n          badge: '/sgex/cat-paw-lock-icon.svg',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'Step 1: Go to GitHub Settings',\n              content: `\n                <p>Navigate to your GitHub account settings:</p>\n                <ol>\n                  <li>Click your profile picture in the top right</li>\n                  <li>Select \"Settings\" from the dropdown</li>\n                  <li>Go to \"Developer settings\" → \"Personal access tokens\"</li>\n                  <li>Choose \"Fine-grained tokens\" (recommended) or \"Tokens (classic)\"</li>\n                </ol>\n                <div class=\"help-tip\">\n                  <strong>💡 Tip:</strong> Fine-grained tokens provide better security with repository-specific access.\n                </div>\n              `\n            },\n            {\n              title: 'Step 2: Generate New Token',\n              content: `\n                <p>Create your new token:</p>\n                <ol>\n                  <li>Click \"Generate new token\"</li>\n                  <li>Give it a descriptive name like \"SGEX Workbench\"</li>\n                  <li>Set expiration (90 days recommended)</li>\n                  <li>Select repository access (specific repos or all)</li>\n                </ol>\n                <div class=\"help-warning\">\n                  <strong>⚠️ Important:</strong> You'll only see the token once, so copy it immediately!\n                </div>\n              `\n            },\n            {\n              title: 'Step 3: Set Required Permissions',\n              content: `\n                <p>For <strong>fine-grained tokens</strong>, enable:</p>\n                <ul>\n                  <li><strong>Contents:</strong> Read and Write</li>\n                  <li><strong>Metadata:</strong> Read</li>\n                  <li><strong>Pull requests:</strong> Read and Write</li>\n                </ul>\n                <p>For <strong>classic tokens</strong>, select:</p>\n                <ul>\n                  <li><strong>repo</strong> - Full control of private repositories</li>\n                  <li><strong>read:org</strong> - Read org and team membership</li>\n                </ul>\n              `\n            },\n            {\n              title: 'Step 4: Use Your Token',\n              content: `\n                <p>Now you can authenticate with SGEX:</p>\n                <ol>\n                  <li>Copy your newly generated token</li>\n                  <li>Paste it into the login form</li>\n                  <li>Click \"Sign in with Personal Access Token\"</li>\n                </ol>\n                <div class=\"help-tip\">\n                  <strong>🔒 Security:</strong> Your token is stored securely in your browser and never shared with servers.\n                </div>\n              `\n            }\n          ]\n        }\n      ],\n      'dak-configuration': [\n        {\n          id: 'dak-configuration-guide',\n          title: 'Configuring Your DAK',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'Understanding DAK Configuration',\n              content: `\n                <p>When creating a new DAK, you need to configure both repository and FHIR settings:</p>\n                <h4>Repository Configuration</h4>\n                <ul>\n                  <li><strong>Repository Name:</strong> GitHub repository identifier (lowercase with hyphens)</li>\n                  <li><strong>Description:</strong> Brief description of your DAK's purpose</li>\n                  <li><strong>Topics:</strong> Tags that help others discover your DAK</li>\n                  <li><strong>Visibility:</strong> Public repositories are discoverable by the community</li>\n                </ul>\n                <h4>FHIR Implementation Guide Settings</h4>\n                <ul>\n                  <li><strong>IG ID:</strong> Unique identifier for your Implementation Guide</li>\n                  <li><strong>Name:</strong> Technical name used in code generation</li>\n                  <li><strong>Title:</strong> Human-readable title for documentation</li>\n                  <li><strong>Publisher:</strong> Organization responsible for the DAK</li>\n                </ul>\n              `\n            }\n          ]\n        }\n      ],\n      'core-data-dictionary-viewer': [\n        {\n          id: 'core-data-dictionary-help',\n          title: 'Understanding Core Data Dictionary',\n          badge: '/sgex/cat-paw-info-icon.svg',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'What is the Core Data Dictionary?',\n              content: `\n                <p>The Core Data Dictionary (Component 2) contains the data elements required throughout the different points of the workflow. These data elements are mapped to the International Classification of Diseases version 11 (ICD-11) codes and other established concept mapping standards to ensure the data dictionary is compatible with other digital systems.</p>\n                <h4>Purpose: System Design and Interoperability</h4>\n                <p>To know which data elements need to be logged and how they map to other standard terminologies (e.g. ICD, Systematized Nomenclature of Medicine [SNOMED]) for interoperability with other standards-based systems.</p>\n                <h4>FHIR FSH Source Files</h4>\n                <ul>\n                  <li><strong>CodeSystems:</strong> Define custom codes and concepts used in your DAK</li>\n                  <li><strong>ValueSets:</strong> Specify allowed values for clinical data elements</li>\n                  <li><strong>ConceptMaps:</strong> Map between different terminology systems including ICD-11 and SNOMED</li>\n                  <li><strong>Logical Models:</strong> Define data structures for clinical workflows</li>\n                </ul>\n                <div class=\"help-tip\">\n                  <strong>💡 Location:</strong> FSH files are stored in the <code>input/fsh/</code> directory of your repository.\n                </div>\n              `\n            },\n            {\n              title: 'GitHub Pages Integration',\n              content: `\n                <p>When GitHub Pages is configured, your FSH files are automatically compiled into HTML documentation:</p>\n                <h4>Published Artifacts</h4>\n                <ul>\n                  <li><strong>Code Systems:</strong> Browse and search your custom terminologies</li>\n                  <li><strong>Value Sets:</strong> View allowed values with descriptions</li>\n                  <li><strong>Logical Models:</strong> Interactive data structure documentation</li>\n                  <li><strong>Concept Maps:</strong> Visual mapping between terminologies</li>\n                </ul>\n                <div class=\"help-tip\">\n                  <strong>⚡ URL Pattern:</strong> Main branch publishes to <code>user.github.io/repo</code>, feature branches to <code>user.github.io/repo/branches/branch-name</code>\n                </div>\n              `\n            }\n          ]\n        },\n        {\n          id: 'github-pages-setup',\n          title: 'Setting Up GitHub Pages',\n          badge: '/sgex/cat-paw-settings-icon.svg',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'Enable GitHub Pages for Your DAK',\n              content: `\n                <p>Follow these steps to enable automatic publishing of your Implementation Guide:</p>\n                <h4>Step 1: Repository Settings</h4>\n                <ol>\n                  <li>Go to your repository on GitHub</li>\n                  <li>Click on the <strong>Settings</strong> tab</li>\n                  <li>Scroll down to <strong>Pages</strong> in the left sidebar</li>\n                  <li>Under <strong>Source</strong>, select <strong>GitHub Actions</strong></li>\n                </ol>\n                <div class=\"help-tip\">\n                  <strong>📋 Note:</strong> Your repository must contain a valid FHIR Implementation Guide structure with <code>sushi-config.yaml</code>\n                </div>\n              `\n            },\n            {\n              title: 'Configure IG Publisher Workflow',\n              content: `\n                <p>Set up the automated publishing workflow:</p>\n                <h4>Step 2: GitHub Actions</h4>\n                <ol>\n                  <li>Create <code>.github/workflows/</code> directory in your repository</li>\n                  <li>Add an IG Publisher workflow file (e.g., <code>publish.yml</code>)</li>\n                  <li>Configure the workflow to run on push to main branch</li>\n                  <li>Include steps to build and deploy the Implementation Guide</li>\n                </ol>\n                <h4>Step 3: Verify Publishing</h4>\n                <ul>\n                  <li>Check the <strong>Actions</strong> tab for workflow status</li>\n                  <li>Once successful, visit your GitHub Pages URL</li>\n                  <li>Verify that artifacts are accessible from the Core Data Dictionary viewer</li>\n                </ul>\n                <div class=\"help-tip\">\n                  <strong>🔗 Reference:</strong> See the <a href=\"https://smart.who.int/ig-starter-kit/v1.0.0/ig_setup.html#ghpages-build\" target=\"_blank\">WHO IG Starter Kit</a> for detailed setup instructions.\n                </div>\n              `\n            }\n          ]\n        }\n      ],\n      'business-process-selection': [\n        {\n          id: 'business-process-help',\n          title: 'Understanding Business Processes',\n          badge: '/sgex/cat-paw-workflow-icon.svg',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'What are Business Processes?',\n              content: `\n                <p>Business Processes (Component 5) define the clinical workflows and care processes in your DAK:</p>\n                <h4>BPMN 2.0 Diagrams</h4>\n                <ul>\n                  <li><strong>Clinical Workflows:</strong> Step-by-step patient care processes</li>\n                  <li><strong>Decision Points:</strong> Where clinical decisions are made</li>\n                  <li><strong>Task Assignments:</strong> Who performs each step in the workflow</li>\n                  <li><strong>Data Flows:</strong> How information moves through the process</li>\n                </ul>\n                <div class=\"help-tip\">\n                  <strong>💡 Standard:</strong> Uses BPMN 2.0 (Business Process Model and Notation) for workflow modeling\n                </div>\n              `\n            },\n            {\n              title: 'Working with BPMN Files',\n              content: `\n                <p>Business process diagrams are stored as BPMN XML files in your repository:</p>\n                <h4>File Management</h4>\n                <ul>\n                  <li><strong>Location:</strong> Typically stored in <code>input/models/</code> or <code>input/bpmn/</code></li>\n                  <li><strong>Format:</strong> BPMN 2.0 XML standard format</li>\n                  <li><strong>Editing:</strong> Use the built-in BPMN editor or external tools</li>\n                  <li><strong>Validation:</strong> Automatic validation against BPMN 2.0 schema</li>\n                </ul>\n                <div class=\"help-tip\">\n                  <strong>🔧 Tools:</strong> SGeX includes an integrated BPMN editor for creating and modifying workflow diagrams\n                </div>\n              `\n            }\n          ]\n        }\n      ],\n      'pages-manager': [\n        {\n          id: 'page-content-help',\n          title: 'Managing Page Content',\n          badge: '/sgex/cat-paw-document-icon.svg',\n          type: 'slideshow',\n          content: [\n            {\n              title: 'What is Page Content?',\n              content: `\n                <p>Page Content represents the narrative documentation and educational materials in your DAK:</p>\n                <h4>Content Types</h4>\n                <ul>\n                  <li><strong>Clinical Guidelines:</strong> Evidence-based care recommendations</li>\n                  <li><strong>User Guides:</strong> Instructions for healthcare workers</li>\n                  <li><strong>Training Materials:</strong> Educational content and scenarios</li>\n                  <li><strong>Reference Documentation:</strong> Technical specifications and background</li>\n                </ul>\n                <div class=\"help-tip\">\n                  <strong>💡 Format:</strong> Content is typically authored in Markdown format for easy editing and version control\n                </div>\n              `\n            },\n            {\n              title: 'Content Organization',\n              content: `\n                <p>Page content is organized to support different user needs and workflows:</p>\n                <h4>Structure</h4>\n                <ul>\n                  <li><strong>Pages Directory:</strong> Main content files organized by topic</li>\n                  <li><strong>Assets:</strong> Images, diagrams, and multimedia content</li>\n                  <li><strong>Templates:</strong> Reusable content patterns and layouts</li>\n                  <li><strong>Navigation:</strong> Menus and linking between related content</li>\n                </ul>\n                <h4>Publishing</h4>\n                <ul>\n                  <li><strong>GitHub Pages:</strong> Automatic publishing of content as web pages</li>\n                  <li><strong>FHIR IG:</strong> Integration with Implementation Guide publishing</li>\n                  <li><strong>Version Control:</strong> Track changes and collaborate on content</li>\n                </ul>\n                <div class=\"help-tip\">\n                  <strong>📝 Best Practice:</strong> Use clear headings, bullet points, and visual elements to make content accessible to healthcare workers\n                </div>\n              `\n            }\n          ]\n        }\n      ]\n    };\n  }\n\n  // Get help topics for a specific page\n  getHelpTopicsForPage(pageId, contextData = {}) {\n    const pageTopics = this.helpTopics[pageId] || [];\n    const universalTopics = this.getUniversalTopics(contextData);\n    return [...pageTopics, ...universalTopics];\n  }\n\n  // Get universal topics based on context (e.g., if DAK is selected)\n  getUniversalTopics(contextData = {}) {\n    const topics = [\n      this.universalTopics.documentation,\n      this.universalTopics.bugReport\n    ];\n    \n    // Add DAK feedback if we have DAK context\n    if (contextData.selectedDak || contextData.repository) {\n      topics.push(this.universalTopics.dakFeedback);\n    }\n    \n    return topics;\n  }\n\n  // Get a specific help topic by ID\n  getHelpTopic(topicId) {\n    for (const pageTopics of Object.values(this.helpTopics)) {\n      const topic = pageTopics.find(t => t.id === topicId);\n      if (topic) {\n        return topic;\n      }\n    }\n    return null;\n  }\n\n  // Check if a page has help topics (now always true since we have universal topics)\n  hasHelpTopics(pageId, contextData = {}) {\n    return true; // Always true now due to universal topics\n  }\n\n  // Add a help topic to a page\n  addHelpTopicToPage(pageId, helpTopic) {\n    if (!this.helpTopics[pageId]) {\n      this.helpTopics[pageId] = [];\n    }\n    this.helpTopics[pageId].push(helpTopic);\n  }\n\n  // Get all available page IDs that have help content\n  getAvailablePages() {\n    return Object.keys(this.helpTopics);\n  }\n\n  // Helper method to open DAK-specific issues\n  openDakIssue(issueType, dakRepository) {\n    if (!dakRepository) {\n      console.warn('No DAK repository specified for feedback');\n      return;\n    }\n\n    const baseUrl = `https://github.com/${dakRepository.owner}/${dakRepository.name}/issues/new`;\n    let url = baseUrl;\n\n    switch (issueType) {\n      case 'bug':\n        url += '?template=bug_report.md&labels=bug,dak-issue';\n        break;\n      case 'improvement':\n        url += '?template=feature_request.md&labels=enhancement,dak-improvement';\n        break;\n      case 'content':\n        url += '?labels=content-issue,clinical-content';\n        break;\n      case 'question':\n        url += '?template=question.md&labels=question,dak-question';\n        break;\n      default:\n        url += '?labels=dak-feedback';\n    }\n\n    window.open(url, '_blank');\n  }\n}\n\n// Create and export a singleton instance\nconst helpContentService = new HelpContentService();\nexport default helpContentService;","/**\n * Cache Management Service\n * \n * Centralized service for managing all application cache and local storage\n * including repository cache, branch context, staging ground, and user data\n */\n\nimport repositoryCacheService from './repositoryCacheService';\nimport branchContextService from './branchContextService';\nimport logger from '../utils/logger';\n\nclass CacheManagementService {\n  constructor() {\n    this.logger = logger.getLogger('CacheManagementService');\n  }\n\n  /**\n   * Clear all application cache and local context\n   * This includes:\n   * - Repository cache (localStorage)\n   * - Branch context (sessionStorage) \n   * - Staging ground data (localStorage)\n   * - Any other SGEX-related local storage\n   */\n  clearAllCache() {\n    try {\n      this.logger.info('Starting complete cache clear operation');\n      \n      // Clear repository cache\n      const repoCacheCleared = repositoryCacheService.clearAllCaches();\n      this.logger.debug('Repository cache cleared', { success: repoCacheCleared });\n\n      // Clear branch context\n      branchContextService.clearAllBranchContext();\n      this.logger.debug('Branch context cleared');\n\n      // Clear staging ground data\n      this.clearAllStagingGrounds();\n      this.logger.debug('Staging ground data cleared');\n\n      // Clear any other SGEX-related localStorage items\n      this.clearOtherSGEXData();\n      this.logger.debug('Other SGEX data cleared');\n\n      this.logger.info('Complete cache clear operation completed successfully');\n      return true;\n    } catch (error) {\n      this.logger.error('Error during cache clear operation', { error: error.message });\n      console.error('Error clearing cache:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all staging ground data across repositories and branches\n   */\n  clearAllStagingGrounds() {\n    try {\n      // Find all staging ground keys in localStorage\n      const keys = Object.keys(localStorage);\n      const stagingKeys = keys.filter(key => key.startsWith('sgex_staging_'));\n      \n      stagingKeys.forEach(key => {\n        localStorage.removeItem(key);\n        this.logger.debug('Removed staging ground', { key });\n      });\n\n      // Also clear staging ground history\n      const historyKeys = keys.filter(key => key.startsWith('sgex_staging_history_'));\n      historyKeys.forEach(key => {\n        localStorage.removeItem(key);\n        this.logger.debug('Removed staging ground history', { key });\n      });\n\n      return true;\n    } catch (error) {\n      this.logger.error('Error clearing staging grounds', { error: error.message });\n      console.warn('Error clearing staging grounds:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear other SGEX-related data that might be stored\n   */\n  clearOtherSGEXData() {\n    try {\n      const keys = Object.keys(localStorage);\n      const sgexKeys = keys.filter(key => \n        key.startsWith('sgex_') && \n        !key.startsWith('sgex_repo_cache_') && \n        !key.startsWith('sgex_staging_')\n      );\n      \n      sgexKeys.forEach(key => {\n        localStorage.removeItem(key);\n        this.logger.debug('Removed other SGEX data', { key });\n      });\n\n      // Also check sessionStorage for SGEX data (excluding branch context which is handled separately)\n      const sessionKeys = Object.keys(sessionStorage);\n      const sgexSessionKeys = sessionKeys.filter(key => \n        key.startsWith('sgex_') && key !== 'sgex_branch_context'\n      );\n      \n      sgexSessionKeys.forEach(key => {\n        sessionStorage.removeItem(key);\n        this.logger.debug('Removed SGEX session data', { key });\n      });\n\n      return true;\n    } catch (error) {\n      this.logger.error('Error clearing other SGEX data', { error: error.message });\n      console.warn('Error clearing other SGEX data:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get information about current cache usage\n   * Useful for debugging and showing users what will be cleared\n   */\n  getCacheInfo() {\n    try {\n      const info = {\n        repositoryCache: {\n          count: 0,\n          keys: []\n        },\n        branchContext: {\n          hasData: false,\n          repositoryCount: 0\n        },\n        stagingGround: {\n          count: 0,\n          keys: []\n        },\n        other: {\n          count: 0,\n          keys: []\n        }\n      };\n\n      // Check localStorage\n      const localKeys = Object.keys(localStorage);\n      \n      // Repository cache\n      info.repositoryCache.keys = localKeys.filter(key => key.startsWith('sgex_repo_cache_'));\n      info.repositoryCache.count = info.repositoryCache.keys.length;\n\n      // Staging ground\n      info.stagingGround.keys = localKeys.filter(key => \n        key.startsWith('sgex_staging_') || key.startsWith('sgex_staging_history_')\n      );\n      info.stagingGround.count = info.stagingGround.keys.length;\n\n      // Other SGEX data\n      info.other.keys = localKeys.filter(key => \n        key.startsWith('sgex_') && \n        !key.startsWith('sgex_repo_cache_') && \n        !key.startsWith('sgex_staging_')\n      );\n      info.other.count = info.other.keys.length;\n\n      // Check sessionStorage for branch context\n      try {\n        const branchContext = sessionStorage.getItem('sgex_branch_context');\n        if (branchContext) {\n          const parsed = JSON.parse(branchContext);\n          info.branchContext.hasData = true;\n          info.branchContext.repositoryCount = Object.keys(parsed).length;\n        }\n      } catch (e) {\n        // Ignore parsing errors\n      }\n\n      return info;\n    } catch (error) {\n      this.logger.error('Error getting cache info', { error: error.message });\n      return null;\n    }\n  }\n\n  /**\n   * Check if there's any uncommitted work that would be lost\n   * Returns information about staging grounds with unsaved changes\n   */\n  getUncommittedWork() {\n    try {\n      const uncommittedWork = [];\n      const keys = Object.keys(localStorage);\n      const stagingKeys = keys.filter(key => key.startsWith('sgex_staging_') && !key.includes('_history_'));\n      \n      stagingKeys.forEach(key => {\n        try {\n          const data = JSON.parse(localStorage.getItem(key));\n          if (data && data.files && data.files.length > 0) {\n            // Extract repository and branch from key\n            const keyParts = key.replace('sgex_staging_', '').split('_');\n            const branch = keyParts.pop();\n            const repository = keyParts.join('_');\n            \n            uncommittedWork.push({\n              repository,\n              branch,\n              fileCount: data.files.length,\n              lastModified: data.timestamp ? new Date(data.timestamp) : null,\n              message: data.message || ''\n            });\n          }\n        } catch (e) {\n          // Skip invalid entries\n        }\n      });\n\n      return uncommittedWork;\n    } catch (error) {\n      this.logger.error('Error checking uncommitted work', { error: error.message });\n      return [];\n    }\n  }\n}\n\n// Export singleton instance\nconst cacheManagementService = new CacheManagementService();\nexport default cacheManagementService;","import React, { useState, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport './LanguageSelector.css';\n\n// Default UN languages\nconst UN_LANGUAGES = [\n  { code: 'en', name: 'language.english', flag: '🇺🇸' },\n  { code: 'fr', name: 'language.french', flag: '🇫🇷' },\n  { code: 'es', name: 'language.spanish', flag: '🇪🇸' },\n  { code: 'ar', name: 'language.arabic', flag: '🇸🇦' },\n  { code: 'zh', name: 'language.chinese', flag: '🇨🇳' },\n  { code: 'ru', name: 'language.russian', flag: '🇷🇺' }\n];\n\n// Comprehensive ISO 639-1 language list with native names and English names for searchability\nconst ADDITIONAL_LANGUAGES = [\n  // European languages\n  { code: 'de', name: 'Deutsch', englishName: 'German', flag: '🇩🇪' },\n  { code: 'it', name: 'Italiano', englishName: 'Italian', flag: '🇮🇹' },\n  { code: 'pt', name: 'Português', englishName: 'Portuguese', flag: '🇵🇹' },\n  { code: 'nl', name: 'Nederlands', englishName: 'Dutch', flag: '🇳🇱' },\n  { code: 'sv', name: 'Svenska', englishName: 'Swedish', flag: '🇸🇪' },\n  { code: 'no', name: 'Norsk', englishName: 'Norwegian', flag: '🇳🇴' },\n  { code: 'da', name: 'Dansk', englishName: 'Danish', flag: '🇩🇰' },\n  { code: 'fi', name: 'Suomi', englishName: 'Finnish', flag: '🇫🇮' },\n  { code: 'pl', name: 'Polski', englishName: 'Polish', flag: '🇵🇱' },\n  { code: 'cs', name: 'Čeština', englishName: 'Czech', flag: '🇨🇿' },\n  { code: 'sk', name: 'Slovenčina', englishName: 'Slovak', flag: '🇸🇰' },\n  { code: 'hu', name: 'Magyar', englishName: 'Hungarian', flag: '🇭🇺' },\n  { code: 'ro', name: 'Română', englishName: 'Romanian', flag: '🇷🇴' },\n  { code: 'bg', name: 'Български', englishName: 'Bulgarian', flag: '🇧🇬' },\n  { code: 'hr', name: 'Hrvatski', englishName: 'Croatian', flag: '🇭🇷' },\n  { code: 'el', name: 'Ελληνικά', englishName: 'Greek', flag: '🇬🇷' },\n  { code: 'sr', name: 'Српски', englishName: 'Serbian', flag: '🇷🇸' },\n  { code: 'sl', name: 'Slovenščina', englishName: 'Slovenian', flag: '🇸🇮' },\n  { code: 'lv', name: 'Latviešu', englishName: 'Latvian', flag: '🇱🇻' },\n  { code: 'lt', name: 'Lietuvių', englishName: 'Lithuanian', flag: '🇱🇹' },\n  { code: 'et', name: 'Eesti', englishName: 'Estonian', flag: '🇪🇪' },\n  { code: 'mt', name: 'Malti', englishName: 'Maltese', flag: '🇲🇹' },\n  { code: 'is', name: 'Íslenska', englishName: 'Icelandic', flag: '🇮🇸' },\n  { code: 'ga', name: 'Gaeilge', englishName: 'Irish', flag: '🇮🇪' },\n  { code: 'cy', name: 'Cymraeg', englishName: 'Welsh', flag: '🏴' },\n  { code: 'eu', name: 'Euskera', englishName: 'Basque', flag: '🇪🇸' },\n  { code: 'ca', name: 'Català', englishName: 'Catalan', flag: '🇪🇸' },\n  { code: 'gl', name: 'Galego', englishName: 'Galician', flag: '🇪🇸' },\n\n  // Middle Eastern & Turkic languages\n  { code: 'tr', name: 'Türkçe', englishName: 'Turkish', flag: '🇹🇷' },\n  { code: 'he', name: 'עברית', englishName: 'Hebrew', flag: '🇮🇱' },\n  { code: 'fa', name: 'فارسی', englishName: 'Persian', flag: '🇮🇷' },\n  { code: 'ur', name: 'اردو', englishName: 'Urdu', flag: '🇵🇰' },\n  { code: 'ku', name: 'Kurdî', englishName: 'Kurdish', flag: '🇹🇷' },\n  { code: 'az', name: 'Azərbaycan', englishName: 'Azerbaijani', flag: '🇦🇿' },\n  { code: 'hy', name: 'Հայերեն', englishName: 'Armenian', flag: '🇦🇲' },\n  { code: 'ka', name: 'ქართული', englishName: 'Georgian', flag: '🇬🇪' },\n\n  // Asian languages\n  { code: 'ja', name: '日本語', englishName: 'Japanese', flag: '🇯🇵' },\n  { code: 'ko', name: '한국어', englishName: 'Korean', flag: '🇰🇷' },\n  { code: 'hi', name: 'हिन्दी', englishName: 'Hindi', flag: '🇮🇳' },\n  { code: 'th', name: 'ไทย', englishName: 'Thai', flag: '🇹🇭' },\n  { code: 'vi', name: 'Tiếng Việt', englishName: 'Vietnamese', flag: '🇻🇳' },\n  { code: 'bn', name: 'বাংলা', englishName: 'Bengali', flag: '🇧🇩' },\n  { code: 'ta', name: 'தமிழ்', englishName: 'Tamil', flag: '🇮🇳' },\n  { code: 'te', name: 'తెలుగు', englishName: 'Telugu', flag: '🇮🇳' },\n  { code: 'ml', name: 'മലയാളം', englishName: 'Malayalam', flag: '🇮🇳' },\n  { code: 'kn', name: 'ಕನ್ನಡ', englishName: 'Kannada', flag: '🇮🇳' },\n  { code: 'gu', name: 'ગુજરાતી', englishName: 'Gujarati', flag: '🇮🇳' },\n  { code: 'mr', name: 'मराठी', englishName: 'Marathi', flag: '🇮🇳' },\n  { code: 'pa', name: 'ਪੰਜਾਬੀ', englishName: 'Punjabi', flag: '🇮🇳' },\n  { code: 'or', name: 'ଓଡ଼ିଆ', englishName: 'Odia', flag: '🇮🇳' },\n  { code: 'as', name: 'অসমীয়া', englishName: 'Assamese', flag: '🇮🇳' },\n  { code: 'ne', name: 'नेपाली', englishName: 'Nepali', flag: '🇳🇵' },\n  { code: 'si', name: 'සිංහල', englishName: 'Sinhala', flag: '🇱🇰' },\n  { code: 'my', name: 'မြန်မာ', englishName: 'Myanmar', flag: '🇲🇲' },\n  { code: 'km', name: 'ខ្មែរ', englishName: 'Khmer', flag: '🇰🇭' },\n  { code: 'lo', name: 'ລາວ', englishName: 'Lao', flag: '🇱🇦' },\n  { code: 'mn', name: 'Монгол', englishName: 'Mongolian', flag: '🇲🇳' },\n  { code: 'bo', name: 'བོད་ཡིག', englishName: 'Tibetan', flag: '🇨🇳' },\n  { code: 'dz', name: 'རྫོང་ཁ', englishName: 'Dzongkha', flag: '🇧🇹' },\n\n  // Southeast Asian languages\n  { code: 'id', name: 'Bahasa Indonesia', englishName: 'Indonesian', flag: '🇮🇩' },\n  { code: 'ms', name: 'Bahasa Melayu', englishName: 'Malay', flag: '🇲🇾' },\n  { code: 'tl', name: 'Filipino', englishName: 'Filipino', flag: '🇵🇭' },\n  { code: 'ceb', name: 'Cebuano', englishName: 'Cebuano', flag: '🇵🇭' },\n  { code: 'jv', name: 'Basa Jawa', englishName: 'Javanese', flag: '🇮🇩' },\n\n  // African languages\n  { code: 'sw', name: 'Kiswahili', englishName: 'Swahili', flag: '🇰🇪' },\n  { code: 'am', name: 'አማርኛ', englishName: 'Amharic', flag: '🇪🇹' },\n  { code: 'yo', name: 'Yorùbá', englishName: 'Yoruba', flag: '🇳🇬' },\n  { code: 'ig', name: 'Igbo', englishName: 'Igbo', flag: '🇳🇬' },\n  { code: 'ha', name: 'Hausa', englishName: 'Hausa', flag: '🇳🇬' },\n  { code: 'zu', name: 'isiZulu', englishName: 'Zulu', flag: '🇿🇦' },\n  { code: 'af', name: 'Afrikaans', englishName: 'Afrikaans', flag: '🇿🇦' },\n  { code: 'xh', name: 'isiXhosa', englishName: 'Xhosa', flag: '🇿🇦' },\n  { code: 'st', name: 'Sesotho', englishName: 'Sotho', flag: '🇱🇸' },\n  { code: 'tn', name: 'Setswana', englishName: 'Tswana', flag: '🇧🇼' },\n  { code: 'ss', name: 'SiSwati', englishName: 'Swati', flag: '🇸🇿' },\n  { code: 've', name: 'Tshivenḓa', englishName: 'Venda', flag: '🇿🇦' },\n  { code: 'ts', name: 'Xitsonga', englishName: 'Tsonga', flag: '🇿🇦' },\n  { code: 'sn', name: 'ChiShona', englishName: 'Shona', flag: '🇿🇼' },\n  { code: 'ny', name: 'ChiCheŵa', englishName: 'Chewa', flag: '🇲🇼' },\n  { code: 'rw', name: 'Kinyarwanda', englishName: 'Kinyarwanda', flag: '🇷🇼' },\n  { code: 'rn', name: 'Kirundi', englishName: 'Kirundi', flag: '🇧🇮' },\n  { code: 'lg', name: 'Luganda', englishName: 'Luganda', flag: '🇺🇬' },\n  { code: 'so', name: 'Soomaali', englishName: 'Somali', flag: '🇸🇴' },\n  { code: 'om', name: 'Afaan Oromoo', englishName: 'Oromo', flag: '🇪🇹' },\n  { code: 'ti', name: 'ትግርኛ', englishName: 'Tigrinya', flag: '🇪🇷' },\n\n  // Latin American indigenous languages\n  { code: 'qu', name: 'Quechua', englishName: 'Quechua', flag: '🇵🇪' },\n  { code: 'gn', name: 'Guaraní', englishName: 'Guarani', flag: '🇵🇾' },\n  { code: 'ay', name: 'Aymará', englishName: 'Aymara', flag: '🇧🇴' },\n\n  // Pacific languages\n  { code: 'mi', name: 'Te Reo Māori', englishName: 'Maori', flag: '🇳🇿' },\n  { code: 'sm', name: 'Gagana Samoa', englishName: 'Samoan', flag: '🇼🇸' },\n  { code: 'to', name: 'Lea Faka-Tonga', englishName: 'Tongan', flag: '🇹🇴' },\n  { code: 'fj', name: 'Na Vosa Vakaviti', englishName: 'Fijian', flag: '🇫🇯' },\n\n  // Additional European languages\n  { code: 'fo', name: 'Føroyskt', englishName: 'Faroese', flag: '🇫🇴' },\n  { code: 'kl', name: 'Kalaallisut', englishName: 'Greenlandic', flag: '🇬🇱' },\n  { code: 'se', name: 'Davvisámegiella', englishName: 'Northern Sami', flag: '🇳🇴' },\n\n  // Other languages\n  { code: 'eo', name: 'Esperanto', englishName: 'Esperanto', flag: '🌍' },\n  { code: 'la', name: 'Latina', englishName: 'Latin', flag: '🇻🇦' },\n  { code: 'sa', name: 'संस्कृतम्', englishName: 'Sanskrit', flag: '🇮🇳' }\n];\n\nconst LanguageSelector = ({ className = '' }) => {\n  const { i18n, t } = useTranslation();\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedLanguages, setSelectedLanguages] = useState(() => {\n    // Get selected languages from localStorage or default to UN languages\n    const saved = localStorage.getItem('sgex-selected-languages');\n    return saved ? JSON.parse(saved) : UN_LANGUAGES.map(lang => lang.code);\n  });\n\n  // Get available languages (UN languages + any additional selected languages)\n  const availableLanguages = useMemo(() => {\n    // Start with all UN languages\n    const languages = [...UN_LANGUAGES];\n    \n    // Add any additional languages that have been selected\n    selectedLanguages.forEach(langCode => {\n      // If this language code is not already in UN_LANGUAGES, find it in ADDITIONAL_LANGUAGES\n      if (!UN_LANGUAGES.some(unLang => unLang.code === langCode)) {\n        const additionalLang = ADDITIONAL_LANGUAGES.find(addLang => addLang.code === langCode);\n        if (additionalLang) {\n          languages.push({\n            code: additionalLang.code,\n            name: additionalLang.name, // Use the native name for additional languages\n            englishName: additionalLang.englishName, // Include English name for consistency\n            flag: additionalLang.flag\n          });\n        }\n      }\n    });\n    \n    // Map the languages to include translated names for UN languages\n    return languages.map(lang => ({\n      ...lang,\n      name: UN_LANGUAGES.some(unLang => unLang.code === lang.code) ? t(lang.name) : lang.name\n    }));\n  }, [selectedLanguages, t]);\n\n  // Get searchable languages (excluding already selected ones)\n  const searchableLanguages = useMemo(() => {\n    if (!searchTerm) return [];\n    \n    const searchLower = searchTerm.toLowerCase();\n    return ADDITIONAL_LANGUAGES.filter(lang => \n      !selectedLanguages.includes(lang.code) &&\n      (lang.name.toLowerCase().includes(searchLower) || \n       lang.englishName.toLowerCase().includes(searchLower) ||\n       lang.code.toLowerCase().includes(searchLower))\n    ).slice(0, 10); // Limit to 10 results\n  }, [searchTerm, selectedLanguages]);\n\n  const currentLanguage = availableLanguages.find(lang => lang.code === i18n.language) || availableLanguages[0];\n\n  const handleLanguageChange = (langCode) => {\n    i18n.changeLanguage(langCode);\n    setIsOpen(false);\n    setSearchTerm('');\n  };\n\n  const handleAddLanguage = (langCode) => {\n    const newSelectedLanguages = [...selectedLanguages, langCode];\n    setSelectedLanguages(newSelectedLanguages);\n    localStorage.setItem('sgex-selected-languages', JSON.stringify(newSelectedLanguages));\n    \n    // Optionally switch to the newly added language\n    i18n.changeLanguage(langCode);\n    setIsOpen(false);\n    setSearchTerm('');\n  };\n\n  const handleSearchChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  return (\n    <div className={`language-selector ${className}`}>\n      <button\n        className=\"language-toggle\"\n        onClick={() => setIsOpen(!isOpen)}\n        aria-label={t('language.select')}\n        title={t('language.select')}\n      >\n        <span className=\"language-icon\">🐾🎧</span>\n        <span className=\"language-name\">{currentLanguage?.name}</span>\n        <span className={`dropdown-arrow ${isOpen ? 'open' : ''}`}>▼</span>\n      </button>\n      \n      {isOpen && (\n        <div className=\"language-dropdown\">\n          {/* Available Languages */}\n          {availableLanguages.map((language) => (\n            <button\n              key={language.code}\n              className={`language-option ${i18n.language === language.code ? 'active' : ''}`}\n              onClick={() => handleLanguageChange(language.code)}\n            >\n              <span className=\"language-flag\">{language.flag}</span>\n              <span className=\"language-name\">{language.name}</span>\n              {i18n.language === language.code && (\n                <span className=\"language-checkmark\">✓</span>\n              )}\n            </button>\n          ))}\n          \n          {/* Search Section */}\n          <div className=\"language-search-section\">\n            <div className=\"language-search-divider\"></div>\n            <div className=\"language-search-input\">\n              <input\n                type=\"text\"\n                placeholder={t('language.search')}\n                value={searchTerm}\n                onChange={handleSearchChange}\n                className=\"language-search\"\n                autoFocus={false}\n              />\n            </div>\n            \n            {/* Search Results */}\n            {searchableLanguages.map((language) => (\n              <button\n                key={language.code}\n                className=\"language-option language-option-addable\"\n                onClick={() => handleAddLanguage(language.code)}\n              >\n                <span className=\"language-flag\">{language.flag}</span>\n                <span className=\"language-name\">\n                  {language.name}\n                  {language.englishName !== language.name && (\n                    <span className=\"language-english-name\"> ({language.englishName})</span>\n                  )}\n                </span>\n                <span className=\"language-add-icon\">+</span>\n              </button>\n            ))}\n            \n            {searchTerm && searchableLanguages.length === 0 && (\n              <div className=\"language-no-results\">\n                No languages found for \"{searchTerm}\"\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LanguageSelector;","import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport helpContentService from '../services/helpContentService';\nimport cacheManagementService from '../services/cacheManagementService';\nimport HelpModal from './HelpModal';\nimport LanguageSelector from './LanguageSelector';\nimport useThemeImage from '../hooks/useThemeImage';\nimport './ContextualHelpMascot.css';\n\nconst ContextualHelpMascot = ({ pageId, helpContent, position = 'bottom-right', contextData = {}, notificationBadge = false }) => {\n  const { t, i18n } = useTranslation();\n  const [showHelp, setShowHelp] = useState(false);\n  const [helpSticky, setHelpSticky] = useState(false);\n  const [selectedHelpTopic, setSelectedHelpTopic] = useState(null);\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [cacheClearing, setCacheClearing] = useState(false);\n  const [cacheCleared, setCacheCleared] = useState(false);\n\n  // Theme-aware mascot image\n  const mascotImage = useThemeImage('sgex-mascot.png');\n\n  // Load theme preference from localStorage on mount\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('sgex-theme');\n    if (savedTheme) {\n      setIsDarkMode(savedTheme === 'dark');\n    } else {\n      // Check if user explicitly prefers light mode\n      let prefersLight = false;\n      try {\n        if (window.matchMedia) {\n          prefersLight = window.matchMedia('(prefers-color-scheme: light)').matches;\n        }\n      } catch (e) {\n        // Fallback for test environments\n        prefersLight = false;\n      }\n      // Default to dark mode unless user explicitly prefers light\n      setIsDarkMode(!prefersLight);\n    }\n  }, []);\n\n  // Update body class when theme changes\n  useEffect(() => {\n    document.body.className = isDarkMode ? 'theme-dark' : 'theme-light';\n    localStorage.setItem('sgex-theme', isDarkMode ? 'dark' : 'light');\n  }, [isDarkMode]);\n\n  // Update document direction for RTL languages\n  useEffect(() => {\n    const currentLang = i18n.language || 'en';\n    const isRTL = ['ar', 'he', 'fa'].includes(currentLang);\n    document.documentElement.dir = isRTL ? 'rtl' : 'ltr';\n    document.documentElement.lang = currentLang;\n  }, [i18n.language]);\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  // Get help topics for the page\n  const helpTopics = pageId ? helpContentService.getHelpTopicsForPage(pageId, contextData) : [];\n\n  const handleMouseEnter = () => {\n    if (!helpSticky) {\n      setShowHelp(true);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    if (!helpSticky) {\n      setShowHelp(false);\n    }\n  };\n\n  const handleClick = () => {\n    setHelpSticky(!helpSticky);\n    setShowHelp(!helpSticky || showHelp);\n  };\n\n  const handleCloseHelp = () => {\n    setShowHelp(false);\n    setHelpSticky(false);\n  };\n\n  const handleHelpTopicClick = (topic) => {\n    // If it's an action type, execute the action immediately\n    if (topic.type === 'action' && topic.action) {\n      topic.action();\n      setShowHelp(false);\n      setHelpSticky(false);\n    } else {\n      // For slideshow and other types, show in modal\n      setSelectedHelpTopic(topic);\n      setShowHelp(false);\n      setHelpSticky(false);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setSelectedHelpTopic(null);\n  };\n\n  const handleFlushCache = async () => {\n    if (cacheClearing) return; // Prevent multiple clicks\n    \n    setCacheClearing(true);\n    setCacheCleared(false);\n    \n    try {\n      const success = cacheManagementService.clearAllCache();\n      if (success) {\n        setCacheCleared(true);\n        // Auto-hide success message after 3 seconds\n        setTimeout(() => {\n          setCacheCleared(false);\n        }, 3000);\n      } else {\n        console.error('Failed to clear cache');\n        alert('Failed to clear cache. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error clearing cache:', error);\n      alert('Error clearing cache. Please try again.');\n    } finally {\n      setCacheClearing(false);\n    }\n  };\n\n  // Always render the mascot now since we have universal topics\n  // if (!hasTopics) {\n  //   return null;\n  // }\n\n  return (\n    <>\n      <div className={`contextual-help-mascot ${position}`}>\n        <div \n          className=\"mascot-container\"\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          onClick={handleClick}\n        >\n          <img \n            src={mascotImage} \n            alt=\"SGEX Helper\" \n            className=\"mascot-icon\"\n          />\n          \n          {/* Notification badge for important help messages */}\n          {notificationBadge && (\n            <div className=\"notification-badge\">\n              !\n            </div>\n          )}\n          \n          {/* Question mark thought bubble - always show since we always have topics now */}\n          {!notificationBadge && (\n            <div className={`question-bubble ${showHelp ? 'help-open' : ''}`}>\n              ?\n            </div>\n          )}\n        </div>\n        \n        {showHelp && (\n          <div className=\"help-thought-bubble\">\n            <div className=\"bubble-content\">\n              {helpSticky && (\n                <button \n                  className=\"close-bubble-btn\"\n                  onClick={handleCloseHelp}\n                  aria-label=\"Close help\"\n                >\n                  ×\n                </button>\n              )}\n              <div className=\"help-text\">\n                {helpTopics.length > 0 ? (\n                  <div className=\"help-topics-list\">\n                    <h4>{t('help.title')}</h4>\n                    {helpTopics.map((topic) => (\n                      <button\n                        key={topic.id}\n                        className=\"help-topic-btn\"\n                        onClick={() => handleHelpTopicClick(topic)}\n                      >\n                        {topic.badge && (\n                          <img \n                            src={topic.badge} \n                            alt=\"\" \n                            className=\"help-topic-badge\"\n                          />\n                        )}\n                        <span className=\"help-topic-title\">{topic.title}</span>\n                      </button>\n                    ))}\n                    \n                    {/* Language Selector in Help Menu */}\n                    <div className=\"help-menu-divider\"></div>\n                    <LanguageSelector className=\"help-menu-language-selector\" />\n                    \n                    {/* Theme Toggle in Help Menu */}\n                    <div className=\"help-menu-divider\"></div>\n                    <button \n                      className={`help-theme-toggle-btn ${isDarkMode ? 'dark' : 'light'}`}\n                      onClick={toggleTheme}\n                      aria-label={t('theme.toggle')}\n                      title={t('theme.toggle')}\n                    >\n                      <span className=\"theme-icon\">{isDarkMode ? '🌞' : '🌙'}</span>\n                      <span className=\"theme-label\">{isDarkMode ? t('theme.switchToLight', 'Light Mode') : t('theme.switchToDark', 'Dark Mode')}</span>\n                    </button>\n                    \n                    {/* Flush Cache Option */}\n                    <div className=\"help-menu-divider\"></div>\n                    <div className=\"help-menu-cache-section\">\n                      {cacheCleared ? (\n                        <div className=\"cache-success-message\">\n                          ✅ Cache cleared successfully!\n                        </div>\n                      ) : (\n                        <button\n                          className=\"help-cache-btn\"\n                          onClick={handleFlushCache}\n                          disabled={cacheClearing}\n                          title=\"Clear all cached data including repository info, branch context, and staging ground data\"\n                        >\n                          {cacheClearing ? '🔄 Clearing...' : '🗑️ Flush Cache'}\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                ) : (\n                  <div>\n                    {helpContent}\n                    {/* Language Selector in Help Menu */}\n                    <div className=\"help-menu-divider\"></div>\n                    <LanguageSelector className=\"help-menu-language-selector\" />\n                    \n                    {/* Theme Toggle in Help Menu */}\n                    <div className=\"help-menu-divider\"></div>\n                    <button \n                      className={`help-theme-toggle-btn ${isDarkMode ? 'dark' : 'light'}`}\n                      onClick={toggleTheme}\n                      aria-label={t('theme.toggle')}\n                      title={t('theme.toggle')}\n                    >\n                      <span className=\"theme-icon\">{isDarkMode ? '🌞' : '🌙'}</span>\n                      <span className=\"theme-label\">{isDarkMode ? t('theme.switchToLight', 'Light Mode') : t('theme.switchToDark', 'Dark Mode')}</span>\n                    </button>\n                    \n                    {/* Flush Cache Option */}\n                    <div className=\"help-menu-divider\"></div>\n                    <div className=\"help-menu-cache-section\">\n                      {cacheCleared ? (\n                        <div className=\"cache-success-message\">\n                          ✅ Cache cleared successfully!\n                        </div>\n                      ) : (\n                        <button\n                          className=\"help-cache-btn\"\n                          onClick={handleFlushCache}\n                          disabled={cacheClearing}\n                          title=\"Clear all cached data including repository info, branch context, and staging ground data\"\n                        >\n                          {cacheClearing ? '🔄 Clearing...' : '🗑️ Flush Cache'}\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n            <div className=\"bubble-tail\"></div>\n          </div>\n        )}\n      </div>\n      \n      {/* Help Modal for displaying slideshow content */}\n      {selectedHelpTopic && (\n        <HelpModal\n          helpTopic={selectedHelpTopic}\n          contextData={contextData}\n          onClose={handleCloseModal}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ContextualHelpMascot;","import { useState, useEffect } from 'react';\n\n/**\n * Custom hook that returns the appropriate image path based on the current theme\n * @param {string} baseImagePath - The base image path (e.g., \"sgex-mascot.png\", \"authoring.png\")\n * @returns {string} The theme-appropriate image path\n */\nconst useThemeImage = (baseImagePath) => {\n  const [currentImagePath, setCurrentImagePath] = useState(baseImagePath);\n\n  useEffect(() => {\n    const updateImagePath = () => {\n      const isDarkMode = document.body.classList.contains('theme-dark');\n      \n      // Get the correct base path for the deployment environment\n      const publicUrl = process.env.PUBLIC_URL || '';\n      \n      // Normalize the base image path (remove leading slash if present)\n      const normalizedPath = baseImagePath.startsWith('/') ? baseImagePath.slice(1) : baseImagePath;\n      \n      let finalPath;\n      if (isDarkMode) {\n        // Convert base image to dark mode version\n        // e.g., \"sgex-mascot.png\" -> \"sgex-mascot_grey_tabby.png\"\n        const darkImageName = normalizedPath.replace(/\\.png$/, '_grey_tabby.png');\n        finalPath = publicUrl ? `${publicUrl}/${darkImageName}` : `/${darkImageName}`;\n      } else {\n        // Use original image for light mode\n        finalPath = publicUrl ? `${publicUrl}/${normalizedPath}` : `/${normalizedPath}`;\n      }\n      \n      setCurrentImagePath(finalPath);\n    };\n\n    // Initial update\n    updateImagePath();\n\n    // Create a MutationObserver to watch for body class changes\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {\n          updateImagePath();\n        }\n      });\n    });\n\n    // Start observing the body for class changes\n    observer.observe(document.body, {\n      attributes: true,\n      attributeFilter: ['class']\n    });\n\n    // Cleanup observer on unmount\n    return () => {\n      observer.disconnect();\n    };\n  }, [baseImagePath]);\n\n  return currentImagePath;\n};\n\nexport default useThemeImage;","/**\n * Staging Ground Service\n * \n * Manages local changes to DAK components before they are committed to GitHub.\n * Provides persistent storage, versioning, and integration interfaces for DAK editing tools.\n */\n\nclass StagingGroundService {\n  constructor() {\n    this.listeners = new Set();\n    this.currentRepository = null;\n    this.currentBranch = null;\n  }\n\n  /**\n   * Initialize staging ground for a specific repository and branch\n   */\n  initialize(repository, branch) {\n    this.currentRepository = repository;\n    this.currentBranch = branch;\n    this.notifyListeners();\n  }\n\n  /**\n   * Get the storage key for current repository and branch\n   */\n  getStorageKey() {\n    if (!this.currentRepository || !this.currentBranch) {\n      throw new Error('Staging ground not initialized');\n    }\n    return `sgex_staging_${this.currentRepository.full_name}_${this.currentBranch}`;\n  }\n\n  /**\n   * Get current staging ground state\n   */\n  getStagingGround() {\n    try {\n      const key = this.getStorageKey();\n      const stored = localStorage.getItem(key);\n      if (!stored) {\n        return this.createEmptyStagingGround();\n      }\n      return JSON.parse(stored);\n    } catch (error) {\n      console.warn('Error reading staging ground from localStorage:', error);\n      return this.createEmptyStagingGround();\n    }\n  }\n\n  /**\n   * Create empty staging ground structure\n   */\n  createEmptyStagingGround() {\n    return {\n      message: '',\n      files: [],\n      timestamp: Date.now(),\n      branch: this.currentBranch,\n      repository: this.currentRepository?.full_name\n    };\n  }\n\n  /**\n   * Save staging ground state to localStorage\n   */\n  saveStagingGround(stagingGround) {\n    try {\n      const key = this.getStorageKey();\n      stagingGround.timestamp = Date.now();\n      stagingGround.branch = this.currentBranch;\n      stagingGround.repository = this.currentRepository?.full_name;\n      \n      localStorage.setItem(key, JSON.stringify(stagingGround));\n      this.saveToHistory(stagingGround);\n      this.notifyListeners();\n      return true;\n    } catch (error) {\n      console.error('Error saving staging ground to localStorage:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Add or update a file in the staging ground\n   */\n  updateFile(filePath, content, metadata = {}) {\n    const stagingGround = this.getStagingGround();\n    \n    // Find existing file or create new one\n    const existingFileIndex = stagingGround.files.findIndex(f => f.path === filePath);\n    const fileObject = {\n      path: filePath,\n      content: content,\n      metadata: {\n        ...metadata,\n        lastModified: Date.now()\n      },\n      timestamp: Date.now()\n    };\n\n    if (existingFileIndex >= 0) {\n      stagingGround.files[existingFileIndex] = fileObject;\n    } else {\n      stagingGround.files.push(fileObject);\n    }\n\n    return this.saveStagingGround(stagingGround);\n  }\n\n  /**\n   * Remove a file from the staging ground\n   */\n  removeFile(filePath) {\n    const stagingGround = this.getStagingGround();\n    stagingGround.files = stagingGround.files.filter(f => f.path !== filePath);\n    return this.saveStagingGround(stagingGround);\n  }\n\n  /**\n   * Update commit message\n   */\n  updateCommitMessage(message) {\n    const stagingGround = this.getStagingGround();\n    stagingGround.message = message;\n    return this.saveStagingGround(stagingGround);\n  }\n\n  /**\n   * Check if staging ground has changes\n   */\n  hasChanges() {\n    const stagingGround = this.getStagingGround();\n    return stagingGround.files.length > 0;\n  }\n\n  /**\n   * Get count of changed files\n   */\n  getChangedFilesCount() {\n    const stagingGround = this.getStagingGround();\n    return stagingGround.files.length;\n  }\n\n  /**\n   * Clear all changes in staging ground\n   */\n  clearStagingGround() {\n    const empty = this.createEmptyStagingGround();\n    return this.saveStagingGround(empty);\n  }\n\n  /**\n   * Save current state to history for rollback\n   */\n  saveToHistory(stagingGround) {\n    try {\n      const historyKey = `${this.getStorageKey()}_history`;\n      const history = this.getHistory();\n      \n      // Add current state to history\n      history.push({\n        ...stagingGround,\n        savedAt: Date.now()\n      });\n\n      // Keep only last 10 saves\n      const recentHistory = history.slice(-10);\n      localStorage.setItem(historyKey, JSON.stringify(recentHistory));\n      \n    } catch (error) {\n      console.warn('Error saving to history:', error);\n    }\n  }\n\n  /**\n   * Get history of saves\n   */\n  getHistory() {\n    try {\n      const historyKey = `${this.getStorageKey()}_history`;\n      const stored = localStorage.getItem(historyKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.warn('Error reading history:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Rollback to a previous save\n   */\n  rollbackToSave(timestamp) {\n    const history = this.getHistory();\n    const save = history.find(s => s.savedAt === timestamp);\n    \n    if (!save) {\n      throw new Error('Save not found in history');\n    }\n\n    // Remove the savedAt timestamp before restoring\n    const { savedAt, ...stagingGroundState } = save;\n    return this.saveStagingGround(stagingGroundState);\n  }\n\n  /**\n   * Export staging ground state for backup/sharing\n   */\n  exportStagingGround() {\n    const stagingGround = this.getStagingGround();\n    const history = this.getHistory();\n    \n    return {\n      current: stagingGround,\n      history: history,\n      exportedAt: Date.now(),\n      repository: this.currentRepository?.full_name,\n      branch: this.currentBranch\n    };\n  }\n\n  /**\n   * Import staging ground state from backup\n   */\n  importStagingGround(exportedData) {\n    if (!exportedData.current || !exportedData.repository || !exportedData.branch) {\n      throw new Error('Invalid export data format');\n    }\n\n    if (exportedData.repository !== this.currentRepository?.full_name ||\n        exportedData.branch !== this.currentBranch) {\n      throw new Error('Export data is for different repository or branch');\n    }\n\n    // Save current state and import new one\n    this.saveStagingGround(exportedData.current);\n    \n    // Import history if available\n    if (exportedData.history) {\n      try {\n        const historyKey = `${this.getStorageKey()}_history`;\n        localStorage.setItem(historyKey, JSON.stringify(exportedData.history));\n      } catch (error) {\n        console.warn('Error importing history:', error);\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Clean up old staging grounds and history\n   */\n  cleanup(maxAge = 7 * 24 * 60 * 60 * 1000) { // 7 days default\n    try {\n      const now = Date.now();\n      const keysToRemove = [];\n\n      // Check all localStorage keys for old staging grounds\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && key.startsWith('sgex_staging_')) {\n          try {\n            const data = JSON.parse(localStorage.getItem(key));\n            if (data.timestamp && (now - data.timestamp) > maxAge) {\n              keysToRemove.push(key);\n              keysToRemove.push(`${key}_history`);\n            }\n          } catch (error) {\n            // Invalid data, mark for removal\n            keysToRemove.push(key);\n          }\n        }\n      }\n\n      // Remove old entries\n      keysToRemove.forEach(key => {\n        localStorage.removeItem(key);\n      });\n\n      return keysToRemove.length;\n    } catch (error) {\n      console.error('Error during cleanup:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Add listener for staging ground changes\n   */\n  addListener(callback) {\n    this.listeners.add(callback);\n    \n    // Return unsubscribe function\n    return () => {\n      this.listeners.delete(callback);\n    };\n  }\n\n  /**\n   * Notify all listeners of changes\n   */\n  notifyListeners() {\n    const stagingGround = this.getStagingGround();\n    this.listeners.forEach(callback => {\n      try {\n        callback(stagingGround);\n      } catch (error) {\n        console.error('Error in staging ground listener:', error);\n      }\n    });\n  }\n\n  /**\n   * Interface for DAK editing tools to contribute files\n   */\n  contributeFiles(files, metadata = {}) {\n    if (!Array.isArray(files)) {\n      files = [files];\n    }\n\n    let success = true;\n    const results = [];\n\n    files.forEach(file => {\n      if (!file.path || !file.content) {\n        results.push({ path: file.path, success: false, error: 'Missing path or content' });\n        success = false;\n        return;\n      }\n\n      const result = this.updateFile(file.path, file.content, {\n        ...metadata,\n        source: metadata.tool || 'unknown',\n        contributedAt: Date.now()\n      });\n\n      results.push({ path: file.path, success: result });\n      if (!result) success = false;\n    });\n\n    return { success, results };\n  }\n\n  /**\n   * Get status for DAK editing tools\n   */\n  getStatus() {\n    const stagingGround = this.getStagingGround();\n    return {\n      hasChanges: this.hasChanges(),\n      filesCount: this.getChangedFilesCount(),\n      lastModified: stagingGround.timestamp,\n      branch: this.currentBranch,\n      repository: this.currentRepository?.full_name\n    };\n  }\n}\n\n// Create singleton instance\nconst stagingGroundService = new StagingGroundService();\n\nexport default stagingGroundService;","/**\n * Repository Cache Service\n * Manages caching of discovered SMART Guidelines repositories with expiry\n */\n\nimport logger from '../utils/logger';\n\nclass RepositoryCacheService {\n  constructor() {\n    this.CACHE_KEY_PREFIX = 'sgex_repo_cache_';\n    this.CACHE_EXPIRY_HOURS = 24; // Cache expires after 24 hours\n    this.logger = logger.getLogger('RepositoryCacheService');\n    this.logger.debug('RepositoryCacheService initialized', { \n      cacheExpiryHours: this.CACHE_EXPIRY_HOURS \n    });\n  }\n\n  /**\n   * Generate cache key for a user/organization\n   */\n  getCacheKey(owner, type = 'user') {\n    return `${this.CACHE_KEY_PREFIX}${type}_${owner}`;\n  }\n\n  /**\n   * Check if cached data is stale (older than 24 hours)\n   */\n  isStale(timestamp) {\n    const now = Date.now();\n    const cacheAge = now - timestamp;\n    const maxAge = this.CACHE_EXPIRY_HOURS * 60 * 60 * 1000; // 24 hours in milliseconds\n    return cacheAge > maxAge;\n  }\n\n  /**\n   * Get cached repositories for a user/organization\n   * Returns null if cache doesn't exist or is stale\n   */\n  getCachedRepositories(owner, type = 'user') {\n    try {\n      const cacheKey = this.getCacheKey(owner, type);\n      this.logger.cache('get', cacheKey);\n      \n      const cachedData = localStorage.getItem(cacheKey);\n      \n      if (!cachedData) {\n        this.logger.cache('miss', cacheKey, 'No cached data found');\n        return null;\n      }\n\n      const parsed = JSON.parse(cachedData);\n      \n      // Check if cache is stale\n      if (this.isStale(parsed.timestamp)) {\n        // Remove stale cache\n        this.logger.cache('expired', cacheKey, { age: Date.now() - parsed.timestamp });\n        localStorage.removeItem(cacheKey);\n        return null;\n      }\n\n      this.logger.cache('hit', cacheKey, { \n        repositoryCount: parsed.repositories?.length || 0,\n        age: Date.now() - parsed.timestamp\n      });\n\n      return {\n        repositories: parsed.repositories,\n        timestamp: parsed.timestamp,\n        owner: parsed.owner,\n        type: parsed.type\n      };\n    } catch (error) {\n      const cacheKey = this.getCacheKey(owner, type);\n      this.logger.error('Error reading repository cache', { cacheKey, error: error.message });\n      console.warn('Error reading repository cache:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Cache repositories for a user/organization\n   */\n  setCachedRepositories(owner, type = 'user', repositories) {\n    try {\n      const cacheKey = this.getCacheKey(owner, type);\n      const cacheData = {\n        repositories,\n        timestamp: Date.now(),\n        owner,\n        type\n      };\n\n      this.logger.cache('set', cacheKey, { \n        repositoryCount: repositories?.length || 0,\n        owner, \n        type \n      });\n\n      localStorage.setItem(cacheKey, JSON.stringify(cacheData));\n      return true;\n    } catch (error) {\n      const cacheKey = this.getCacheKey(owner, type);\n      this.logger.error('Error caching repositories', { cacheKey, error: error.message });\n      console.warn('Error caching repositories:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear cache for a specific user/organization\n   */\n  clearCache(owner, type = 'user') {\n    try {\n      const cacheKey = this.getCacheKey(owner, type);\n      this.logger.cache('clear', cacheKey, { owner, type });\n      localStorage.removeItem(cacheKey);\n      return true;\n    } catch (error) {\n      const cacheKey = this.getCacheKey(owner, type);\n      this.logger.error('Error clearing repository cache', { cacheKey, error: error.message });\n      console.warn('Error clearing repository cache:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all repository caches\n   */\n  clearAllCaches() {\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith(this.CACHE_KEY_PREFIX)) {\n          localStorage.removeItem(key);\n        }\n      });\n      return true;\n    } catch (error) {\n      console.warn('Error clearing all repository caches:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get cache info for debugging\n   */\n  getCacheInfo(owner, type = 'user') {\n    const cached = this.getCachedRepositories(owner, type);\n    if (!cached) {\n      return { exists: false, stale: true };\n    }\n\n    const age = Date.now() - cached.timestamp;\n    const ageHours = Math.round(age / (60 * 60 * 1000));\n    \n    return {\n      exists: true,\n      stale: this.isStale(cached.timestamp),\n      age: age,\n      ageHours: ageHours,\n      repositoryCount: cached.repositories.length,\n      timestamp: new Date(cached.timestamp).toISOString()\n    };\n  }\n}\n\n// Create singleton instance\nconst repositoryCacheService = new RepositoryCacheService();\n\nexport default repositoryCacheService;","import React, { useState, useEffect } from 'react';\nimport useThemeImage from '../hooks/useThemeImage';\nimport './HelpModal.css';\n\nconst HelpModal = ({ topic, helpTopic, contextData, onClose }) => {\n  const [showMenu, setShowMenu] = useState(false);\n  const [currentSlide, setCurrentSlide] = useState(0);\n\n  // Theme-aware mascot image\n  const mascotImage = useThemeImage('sgex-mascot.png');\n\n  // Set up global reference for inline onclick handlers\n  useEffect(() => {\n    const createContextualUrl = (baseUrl, params) => {\n      const urlParams = new URLSearchParams(params);\n      \n      // Add contextual information\n      if (contextData.pageId) {\n        urlParams.set('sgex_page', contextData.pageId);\n      }\n      \n      const currentUrl = window.location.href;\n      urlParams.set('sgex_current_url', currentUrl);\n      \n      if (contextData.selectedDak?.name) {\n        urlParams.set('sgex_selected_dak', contextData.selectedDak.name);\n      }\n      \n      return `${baseUrl}?${urlParams.toString()}`;\n    };\n\n    window.helpModalInstance = {\n      openSgexIssue: (issueType) => {\n        const baseUrl = `https://github.com/litlfred/sgex/issues/new`;\n        let params = {};\n\n        switch (issueType) {\n          case 'bug':\n            params.template = 'bug_report.yml';\n            params.labels = 'bug';\n            break;\n          case 'feature':\n            params.template = 'feature_request.yml';\n            params.labels = 'enhancement';\n            break;\n          case 'question':\n            params.template = 'question.yml';\n            params.labels = 'question';\n            break;\n          case 'documentation':\n            params.template = 'documentation.yml';\n            params.labels = 'documentation';\n            break;\n          case 'blank':\n            // No template specified - this will allow users to create a blank issue\n            params.labels = 'blank-issue';\n            break;\n          default:\n            params.labels = 'needs-triage';\n        }\n\n        const url = createContextualUrl(baseUrl, params);\n        \n        // Try to open the GitHub issue, but handle cases where external links are blocked\n        try {\n          const newWindow = window.open(url, '_blank');\n          \n          // Check if the window was blocked or failed to open\n          if (!newWindow || newWindow.closed) {\n            // Fallback: show instructions to manually open the link\n            window.helpModalInstance?.showFallbackInstructions?.('github-blocked', url, issueType);\n          } else {\n            // Check if the window actually loaded after a brief delay\n            setTimeout(() => {\n              try {\n                if (newWindow.closed || !newWindow.location || newWindow.location.href === 'about:blank') {\n                  newWindow.close();\n                  window.helpModalInstance?.showFallbackInstructions?.('github-blocked', url, issueType);\n                }\n              } catch (e) {\n                // Cross-origin restriction means it probably loaded successfully\n                // or the check failed due to security - either way, don't show fallback\n              }\n            }, 1000);\n          }\n        } catch (error) {\n          console.warn('Failed to open GitHub issue:', error);\n          window.helpModalInstance?.showFallbackInstructions?.('github-blocked', url, issueType);\n        }\n      },\n\n      openDakIssue: (issueType) => {\n        const repository = contextData.repository || contextData.selectedDak;\n        if (!repository) {\n          console.warn('No DAK repository specified for feedback');\n          return;\n        }\n\n        const baseUrl = `https://github.com/${repository.owner}/${repository.name}/issues/new`;\n        let params = {};\n\n        switch (issueType) {\n          case 'bug':\n            params.template = 'dak_bug_report.yml';\n            params.labels = 'bug,dak-issue';\n            break;\n          case 'improvement':\n            params.template = 'dak_feature_request.yml';\n            params.labels = 'enhancement,dak-improvement';\n            break;\n          case 'content':\n            params.template = 'dak_content_error.yml';\n            params.labels = 'content-issue,clinical-content';\n            break;\n          case 'question':\n            params.template = 'dak_question.yml';\n            params.labels = 'question,dak-question';\n            break;\n          case 'blank':\n            // No template specified - this will allow users to create a blank issue\n            params.labels = 'blank-issue,dak-feedback';\n            break;\n          default:\n            params.labels = 'dak-feedback';\n        }\n\n        // Add DAK-specific context\n        if (repository.name) {\n          params.sgex_dak_repository = `${repository.owner}/${repository.name}`;\n        }\n\n        const url = createContextualUrl(baseUrl, params);\n        \n        // Try to open the GitHub issue, but handle cases where external links are blocked\n        try {\n          const newWindow = window.open(url, '_blank');\n          \n          // Check if the window was blocked or failed to open\n          if (!newWindow || newWindow.closed) {\n            // Fallback: show instructions to manually open the link\n            window.helpModalInstance?.showFallbackInstructions?.('github-blocked', url, `dak-${issueType}`);\n          } else {\n            // Check if the window actually loaded after a brief delay\n            setTimeout(() => {\n              try {\n                if (newWindow.closed || !newWindow.location || newWindow.location.href === 'about:blank') {\n                  newWindow.close();\n                  window.helpModalInstance?.showFallbackInstructions?.('github-blocked', url, `dak-${issueType}`);\n                }\n              } catch (e) {\n                // Cross-origin restriction means it probably loaded successfully\n                // or the check failed due to security - either way, don't show fallback\n              }\n            }, 1000);\n          }\n        } catch (error) {\n          console.warn('Failed to open DAK issue:', error);\n          window.helpModalInstance?.showFallbackInstructions?.('github-blocked', url, `dak-${issueType}`);\n        }\n      },\n\n      // Function to show fallback instructions when GitHub access is blocked\n      showFallbackInstructions: (reason, url, issueType) => {\n        const instructions = {\n          'github-blocked': {\n            title: 'GitHub Access Required',\n            message: `\n              <div class=\"help-fallback-notice\">\n                <h4>🔗 GitHub Link Blocked</h4>\n                <p>It looks like GitHub access is restricted in your current environment.</p>\n                <h5>To report this issue:</h5>\n                <ol>\n                  <li>Copy the link below</li>\n                  <li>Open it in a browser with GitHub access</li>\n                  <li>Fill out the issue template</li>\n                </ol>\n                <div class=\"fallback-url\">\n                  <strong>Link to copy:</strong><br>\n                  <textarea readonly onclick=\"this.select()\" style=\"width: 100%; height: 60px; margin: 5px 0; padding: 5px; font-family: monospace; font-size: 12px;\">${url}</textarea>\n                </div>\n                <p><em>💡 Tip: You can also email us at <a href=\"mailto:smart@who.int\">smart@who.int</a> with your issue details.</em></p>\n              </div>\n            `\n          }\n        };\n\n        const fallback = instructions[reason] || {\n          title: 'External Link Issue',\n          message: `<p>Unable to open external link. Please copy and visit: <br><code>${url}</code></p>`\n        };\n\n        // Create a temporary modal-like alert for fallback instructions\n        const existingFallback = document.querySelector('.help-fallback-overlay');\n        if (existingFallback) {\n          existingFallback.remove();\n        }\n\n        const fallbackOverlay = document.createElement('div');\n        fallbackOverlay.className = 'help-fallback-overlay';\n        fallbackOverlay.style.cssText = `\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background: rgba(0, 0, 0, 0.7);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          z-index: 10000;\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        `;\n\n        const fallbackModal = document.createElement('div');\n        fallbackModal.style.cssText = `\n          background: white;\n          border-radius: 8px;\n          padding: 20px;\n          max-width: 500px;\n          max-height: 80vh;\n          overflow-y: auto;\n          position: relative;\n          box-shadow: 0 10px 25px rgba(0,0,0,0.3);\n        `;\n\n        fallbackModal.innerHTML = `\n          <button onclick=\"this.closest('.help-fallback-overlay').remove()\" style=\"\n            position: absolute;\n            top: 10px;\n            right: 15px;\n            background: none;\n            border: none;\n            font-size: 24px;\n            cursor: pointer;\n            color: #666;\n          \">×</button>\n          <h3 style=\"margin-top: 0; color: #333;\">${fallback.title}</h3>\n          <div style=\"color: #555; line-height: 1.5;\">${fallback.message}</div>\n        `;\n\n        fallbackOverlay.appendChild(fallbackModal);\n        document.body.appendChild(fallbackOverlay);\n\n        // Click outside to close\n        fallbackOverlay.addEventListener('click', (e) => {\n          if (e.target === fallbackOverlay) {\n            fallbackOverlay.remove();\n          }\n        });\n\n        // Auto-remove after 30 seconds\n        setTimeout(() => {\n          if (document.body.contains(fallbackOverlay)) {\n            fallbackOverlay.remove();\n          }\n        }, 30000);\n      }\n    };\n\n    return () => {\n      // Cleanup\n      delete window.helpModalInstance;\n    };\n  }, [contextData]);\n\n  const handleOverlayClick = (e) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  const handleMenuToggle = () => {\n    setShowMenu(!showMenu);\n  };\n\n  const handleBugReport = () => {\n    // Use the new SGEX issue reporting system\n    if (window.helpModalInstance?.openSgexIssue) {\n      window.helpModalInstance.openSgexIssue('bug');\n    } else {\n      // Fallback to direct URL\n      const params = new URLSearchParams({\n        template: 'bug_report.yml',\n        labels: 'bug',\n        sgex_page: contextData.pageId || 'unknown',\n        sgex_current_url: window.location.href\n      });\n      \n      if (contextData.selectedDak?.name) {\n        params.set('sgex_selected_dak', contextData.selectedDak.name);\n      }\n      \n      const url = `https://github.com/litlfred/sgex/issues/new?${params.toString()}`;\n      \n      // Try to open with error handling\n      try {\n        const newWindow = window.open(url, '_blank');\n        if (!newWindow || newWindow.closed) {\n          window.helpModalInstance?.showFallbackInstructions?.('github-blocked', url, 'bug');\n        }\n      } catch (error) {\n        console.warn('Failed to open GitHub issue:', error);\n        window.helpModalInstance?.showFallbackInstructions?.('github-blocked', url, 'bug');\n      }\n    }\n  };\n\n  const handleDAKFeedback = () => {\n    if (contextData.repository) {\n      // Default to opening content error as the primary DAK feedback type\n      if (window.helpModalInstance?.openDakIssue) {\n        window.helpModalInstance.openDakIssue('content');\n      }\n    }\n  };\n\n  const handleEmailSupport = () => {\n    const topicTitle = helpTopic?.title || topic;\n    const subject = encodeURIComponent(`SGEX Workbench Support: ${topicTitle}`);\n    const body = encodeURIComponent(`\nHello SMART Guidelines Team,\n\nI need assistance with the SGEX Workbench.\n\nTopic: ${topicTitle}\nPage: ${window.location.pathname}\n\nPlease describe your question or issue:\n\n\nBest regards,\n    `.trim());\n    \n    window.open(`mailto:smart@who.int?subject=${subject}&body=${body}`);\n  };\n\n  const handleDocumentation = () => {\n    window.open('/sgex/docs/overview', '_blank');\n  };\n\n  const handlePrevSlide = () => {\n    if (currentSlide > 0) {\n      setCurrentSlide(currentSlide - 1);\n    }\n  };\n\n  const handleNextSlide = () => {\n    if (helpTopic?.content && currentSlide < helpTopic.content.length - 1) {\n      setCurrentSlide(currentSlide + 1);\n    }\n  };\n\n  const renderSlideshow = () => {\n    if (!helpTopic?.content || helpTopic.type !== 'slideshow') {\n      return null;\n    }\n\n    const slides = helpTopic.content;\n    const currentSlideData = slides[currentSlide];\n\n    // Handle DAK feedback buttons by replacing onclick handlers\n    let processedContent = currentSlideData.content;\n    if (helpTopic.id === 'provide-dak-feedback') {\n      processedContent = processedContent.replace(\n        /onclick=\"this\\.openDakIssue\\('([^']+)'\\)\"/g,\n        `onclick=\"window.helpModalInstance?.openDakIssue('$1')\"`\n      );\n    }\n\n    return (\n      <div className=\"help-slideshow\">\n        <div className=\"slideshow-header\">\n          <h3>{currentSlideData.title}</h3>\n          <div className=\"slide-counter\">\n            {currentSlide + 1} of {slides.length}\n          </div>\n        </div>\n        \n        <div \n          className=\"slideshow-content\"\n          dangerouslySetInnerHTML={{ __html: processedContent }}\n        />\n        \n        <div className=\"slideshow-controls\">\n          <button \n            onClick={handlePrevSlide}\n            disabled={currentSlide === 0}\n            className=\"slide-nav-btn\"\n          >\n            ← Previous\n          </button>\n          \n          <div className=\"slide-dots\">\n            {slides.map((_, index) => (\n              <button\n                key={index}\n                className={`slide-dot ${index === currentSlide ? 'active' : ''}`}\n                onClick={() => setCurrentSlide(index)}\n                aria-label={`Go to slide ${index + 1}`}\n              />\n            ))}\n          </div>\n          \n          <button \n            onClick={handleNextSlide}\n            disabled={currentSlide === slides.length - 1}\n            className=\"slide-nav-btn\"\n          >\n            Next →\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  const getHelpContent = () => {\n    // If we have a specific help topic, use it\n    if (helpTopic) {\n      return {\n        title: helpTopic.title,\n        content: helpTopic.type === 'slideshow' ? renderSlideshow() : (\n          <div className=\"help-content\">\n            <div className=\"mascot-message\">\n              <img src={mascotImage} alt=\"SGEX Helper\" className=\"help-mascot\" />\n              <div className=\"message-bubble\">\n                <div dangerouslySetInnerHTML={{ __html: helpTopic.content }} />\n              </div>\n            </div>\n          </div>\n        )\n      };\n    }\n\n    // Legacy support for old topic strings\n    switch (topic) {\n      case 'github-token':\n      case 'pat-help':\n        return {\n          title: 'GitHub Authentication Help',\n          content: (\n            <div className=\"help-content\">\n              <div className=\"mascot-message\">\n                <img src={mascotImage} alt=\"SGEX Helper\" className=\"help-mascot\" />\n                <div className=\"message-bubble\">\n                  <p>SGEX Workbench uses GitHub Personal Access Tokens for secure authentication!</p>\n                  <p><strong>How it works:</strong></p>\n                  <ul>\n                    <li>Create a Personal Access Token in your GitHub settings</li>\n                    <li>Enter the token in the login form</li>\n                    <li>SGEX will securely connect to your GitHub repositories</li>\n                    <li>No backend server required - works entirely in your browser!</li>\n                  </ul>\n                  <p>This approach ensures compliance with our no-backend requirement while keeping your data secure.</p>\n                  <p>If you're having trouble, please use the menu above to get additional support.</p>\n                </div>\n              </div>\n            </div>\n          )\n        };\n      default:\n        return {\n          title: 'SGEX Workbench Help',\n          content: (\n            <div className=\"help-content\">\n              <div className=\"mascot-message\">\n                <img src={mascotImage} alt=\"SGEX Helper\" className=\"help-mascot\" />\n                <div className=\"message-bubble\">\n                  <p>Hi! I'm here to help you with the SGEX Workbench.</p>\n                  <p>Use the menu in the top right to get additional support options.</p>\n                </div>\n              </div>\n            </div>\n          )\n        };\n    }\n  };\n\n  const { title, content } = getHelpContent();\n\n  return (\n    <div className=\"help-modal-overlay\" onClick={handleOverlayClick}>\n      <div className=\"help-modal\">\n        <div className=\"help-modal-header\">\n          <h2>{title}</h2>\n          <div className=\"help-modal-actions\">\n            <button \n              className=\"hamburger-menu-btn\"\n              onClick={handleMenuToggle}\n              aria-label=\"More options\"\n            >\n              <span></span>\n              <span></span>\n              <span></span>\n            </button>\n            <button \n              className=\"close-btn\"\n              onClick={onClose}\n              aria-label=\"Close help\"\n            >\n              ×\n            </button>\n          </div>\n          \n          {showMenu && (\n            <div className=\"help-menu-dropdown\">\n              <button onClick={handleDocumentation} className=\"menu-item\">\n                <span className=\"menu-icon\">📖</span>\n                Documentation\n              </button>\n              \n              <button onClick={handleBugReport} className=\"menu-item\">\n                <img src=\"/sgex/bug-report-icon.svg\" alt=\"Bug\" className=\"menu-icon\" />\n                File Bug Report\n              </button>\n              \n              {contextData.repository && (\n                <button onClick={handleDAKFeedback} className=\"menu-item\">\n                  <span className=\"menu-icon\">📝</span>\n                  Provide DAK Feedback\n                </button>\n              )}\n              \n              <button onClick={handleEmailSupport} className=\"menu-item\">\n                <span className=\"menu-icon\">📧</span>\n                Email Support\n              </button>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"help-modal-content\">\n          {content}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HelpModal;","/**\n * Profile Subscription Service - Manages profile subscriptions in localStorage\n * \n * Provides functionality to manage profile subscriptions:\n * - Always includes WorldHealthOrganization\n * - Includes logged-in user when authenticated\n * - Auto-adds users when browsing their profiles\n * - Allows removal of profiles (except WHO and current user)\n */\nclass ProfileSubscriptionService {\n  constructor() {\n    this.storageKey = 'sgex-profile-subscriptions';\n    this.whoProfile = 'WorldHealthOrganization';\n  }\n\n  /**\n   * Get profile subscriptions from localStorage\n   * @returns {Array} Array of profile objects\n   */\n  getSubscriptions() {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      const subscriptions = stored ? JSON.parse(stored) : [];\n      \n      // Always ensure WHO is included\n      if (!subscriptions.find(profile => profile.login === this.whoProfile)) {\n        subscriptions.unshift({\n          login: this.whoProfile,\n          name: 'World Health Organization',\n          avatar_url: `https://github.com/${this.whoProfile}.png`,\n          type: 'Organization',\n          isPermanent: true,\n          addedAt: new Date().toISOString()\n        });\n        this.saveSubscriptions(subscriptions);\n      }\n      \n      return subscriptions;\n    } catch (error) {\n      console.warn('Error reading profile subscriptions from localStorage:', error);\n      // Return minimal default with WHO\n      return [{\n        login: this.whoProfile,\n        name: 'World Health Organization',\n        avatar_url: `https://github.com/${this.whoProfile}.png`,\n        type: 'Organization',\n        isPermanent: true,\n        addedAt: new Date().toISOString()\n      }];\n    }\n  }\n\n  /**\n   * Save profile subscriptions to localStorage\n   * @param {Array} subscriptions - Array of profile objects\n   */\n  saveSubscriptions(subscriptions) {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(subscriptions));\n    } catch (error) {\n      console.error('Error saving profile subscriptions to localStorage:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add a profile to subscriptions\n   * @param {Object} profile - Profile object with login, name, avatar_url, type\n   * @param {boolean} isPermanent - Whether the profile cannot be removed\n   * @returns {Object} The added profile\n   */\n  addSubscription(profile, isPermanent = false) {\n    if (!profile || !profile.login) {\n      throw new Error('Profile must have a login property');\n    }\n\n    const subscriptions = this.getSubscriptions();\n    \n    // Check if already subscribed\n    const existingIndex = subscriptions.findIndex(p => p.login === profile.login);\n    if (existingIndex !== -1) {\n      // Update existing subscription\n      subscriptions[existingIndex] = {\n        ...subscriptions[existingIndex],\n        ...profile,\n        isPermanent: subscriptions[existingIndex].isPermanent || isPermanent,\n        lastUpdated: new Date().toISOString()\n      };\n      this.saveSubscriptions(subscriptions);\n      return subscriptions[existingIndex];\n    }\n\n    // Add new subscription\n    const newSubscription = {\n      login: profile.login,\n      name: profile.name || profile.login,\n      avatar_url: profile.avatar_url || `https://github.com/${profile.login}.png`,\n      type: profile.type || 'User',\n      isPermanent,\n      addedAt: new Date().toISOString(),\n      lastUpdated: new Date().toISOString()\n    };\n\n    subscriptions.push(newSubscription);\n    this.saveSubscriptions(subscriptions);\n    return newSubscription;\n  }\n\n  /**\n   * Remove a profile from subscriptions\n   * @param {string} login - Login/username to remove\n   * @returns {boolean} Success status\n   */\n  removeSubscription(login) {\n    if (!login) {\n      return false;\n    }\n\n    try {\n      const subscriptions = this.getSubscriptions();\n      const profileIndex = subscriptions.findIndex(p => p.login === login);\n      \n      if (profileIndex === -1) {\n        return false; // Profile not found\n      }\n\n      const profile = subscriptions[profileIndex];\n      \n      // Cannot remove permanent profiles (WHO, current user)\n      if (profile.isPermanent) {\n        console.warn(`Cannot remove permanent profile: ${login}`);\n        return false;\n      }\n\n      subscriptions.splice(profileIndex, 1);\n      this.saveSubscriptions(subscriptions);\n      return true;\n    } catch (error) {\n      console.error('Error removing profile subscription:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if a profile is subscribed\n   * @param {string} login - Login/username to check\n   * @returns {boolean} Whether the profile is subscribed\n   */\n  isSubscribed(login) {\n    if (!login) return false;\n    const subscriptions = this.getSubscriptions();\n    return subscriptions.some(p => p.login === login);\n  }\n\n  /**\n   * Get a specific subscription by login\n   * @param {string} login - Login/username to find\n   * @returns {Object|null} Profile object or null if not found\n   */\n  getSubscription(login) {\n    if (!login) return null;\n    const subscriptions = this.getSubscriptions();\n    return subscriptions.find(p => p.login === login) || null;\n  }\n\n  /**\n   * Auto-add current user to subscriptions (when logged in)\n   * @param {Object} userProfile - Current user's profile\n   */\n  ensureCurrentUserSubscribed(userProfile) {\n    if (!userProfile || !userProfile.login) {\n      return;\n    }\n\n    const existing = this.getSubscription(userProfile.login);\n    if (!existing) {\n      this.addSubscription({\n        ...userProfile,\n        isPermanent: true // Current user cannot be removed\n      }, true);\n    } else if (!existing.isPermanent) {\n      // Update existing to be permanent\n      this.addSubscription({\n        ...existing,\n        ...userProfile,\n        isPermanent: true\n      }, true);\n    }\n  }\n\n  /**\n   * Auto-add a visited user profile (from browsing)\n   * @param {Object} visitedProfile - Profile that user is browsing\n   */\n  autoAddVisitedProfile(visitedProfile) {\n    if (!visitedProfile || !visitedProfile.login) {\n      return;\n    }\n\n    // Don't auto-add if already subscribed\n    if (this.isSubscribed(visitedProfile.login)) {\n      return;\n    }\n\n    // Don't auto-add demo profiles\n    if (visitedProfile.isDemo) {\n      return;\n    }\n\n    this.addSubscription(visitedProfile, false);\n  }\n\n  /**\n   * Get subscriptions sorted alphabetically by name\n   * @returns {Array} Sorted array of profile objects\n   */\n  getSubscriptionsSorted() {\n    const subscriptions = this.getSubscriptions();\n    return subscriptions.sort((a, b) => {\n      // WHO always first\n      if (a.login === this.whoProfile) return -1;\n      if (b.login === this.whoProfile) return 1;\n      \n      // Then sort by name/login\n      const nameA = a.name || a.login;\n      const nameB = b.name || b.login;\n      return nameA.localeCompare(nameB);\n    });\n  }\n\n  /**\n   * Get subscriptions for profile selection (formatted for UI)\n   * @returns {Array} Array of profile objects formatted for selection UI\n   */\n  getSubscriptionsForSelection() {\n    return this.getSubscriptionsSorted().map(profile => ({\n      ...profile,\n      displayName: profile.name || profile.login,\n      isRemovable: !profile.isPermanent\n    }));\n  }\n\n  /**\n   * Update subscription with latest profile information\n   * @param {string} login - Login/username to update\n   * @param {Object} updatedProfile - Updated profile information\n   * @returns {boolean} Success status\n   */\n  updateSubscription(login, updatedProfile) {\n    if (!login || !updatedProfile) {\n      return false;\n    }\n\n    try {\n      const subscriptions = this.getSubscriptions();\n      const index = subscriptions.findIndex(p => p.login === login);\n      \n      if (index === -1) {\n        return false;\n      }\n\n      subscriptions[index] = {\n        ...subscriptions[index],\n        ...updatedProfile,\n        login, // Preserve original login\n        lastUpdated: new Date().toISOString()\n      };\n\n      this.saveSubscriptions(subscriptions);\n      return true;\n    } catch (error) {\n      console.error('Error updating subscription:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all subscriptions (except WHO)\n   */\n  clearSubscriptions() {\n    try {\n      const whoProfile = {\n        login: this.whoProfile,\n        name: 'World Health Organization',\n        avatar_url: `https://github.com/${this.whoProfile}.png`,\n        type: 'Organization',\n        isPermanent: true,\n        addedAt: new Date().toISOString()\n      };\n      this.saveSubscriptions([whoProfile]);\n    } catch (error) {\n      console.error('Error clearing subscriptions:', error);\n    }\n  }\n\n  /**\n   * Export subscriptions as JSON\n   * @returns {string} JSON string of subscriptions\n   */\n  exportSubscriptions() {\n    const subscriptions = this.getSubscriptions();\n    return JSON.stringify(subscriptions, null, 2);\n  }\n\n  /**\n   * Import subscriptions from JSON\n   * @param {string} jsonString - JSON string of subscriptions\n   * @param {boolean} merge - Whether to merge with existing subscriptions\n   * @returns {boolean} Success status\n   */\n  importSubscriptions(jsonString, merge = false) {\n    try {\n      const importedSubscriptions = JSON.parse(jsonString);\n      \n      if (!Array.isArray(importedSubscriptions)) {\n        throw new Error('Invalid subscription format');\n      }\n\n      let finalSubscriptions;\n      \n      if (merge) {\n        const existingSubscriptions = this.getSubscriptions();\n        const mergedSubscriptions = [...existingSubscriptions];\n        \n        importedSubscriptions.forEach(imported => {\n          const existingIndex = mergedSubscriptions.findIndex(p => p.login === imported.login);\n          if (existingIndex !== -1) {\n            // Preserve permanence of existing subscriptions\n            mergedSubscriptions[existingIndex] = {\n              ...imported,\n              isPermanent: mergedSubscriptions[existingIndex].isPermanent || imported.isPermanent\n            };\n          } else {\n            mergedSubscriptions.push(imported);\n          }\n        });\n        \n        finalSubscriptions = mergedSubscriptions;\n      } else {\n        finalSubscriptions = importedSubscriptions;\n      }\n\n      // Ensure WHO is always included\n      if (!finalSubscriptions.find(p => p.login === this.whoProfile)) {\n        finalSubscriptions.unshift({\n          login: this.whoProfile,\n          name: 'World Health Organization',\n          avatar_url: `https://github.com/${this.whoProfile}.png`,\n          type: 'Organization',\n          isPermanent: true,\n          addedAt: new Date().toISOString()\n        });\n      }\n      \n      this.saveSubscriptions(finalSubscriptions);\n      return true;\n    } catch (error) {\n      console.error('Error importing subscriptions:', error);\n      return false;\n    }\n  }\n}\n\n// Create and export singleton instance\nconst profileSubscriptionService = new ProfileSubscriptionService();\nexport default profileSubscriptionService;","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\nimport githubService from '../../services/githubService';\nimport dakValidationService from '../../services/dakValidationService';\nimport profileSubscriptionService from '../../services/profileSubscriptionService';\n\n/**\n * Page types supported by the framework\n */\nexport const PAGE_TYPES = {\n  TOP_LEVEL: 'top-level',\n  USER: 'user', \n  DAK: 'dak',\n  ASSET: 'asset'\n};\n\n/**\n * Context for page framework\n */\nconst PageContext = createContext(null);\n\n/**\n * Hook to use page context\n */\nexport const usePage = () => {\n  const context = useContext(PageContext);\n  console.log('usePage: called, context is:', context ? 'available' : 'null');\n  if (!context) {\n    console.error('usePage: PageContext is null - component not wrapped in PageProvider');\n    // Return a default context instead of throwing to make ErrorHandler more resilient\n    return {\n      pageName: 'unknown',\n      user: null,\n      profile: null,\n      repository: null,\n      branch: null,\n      asset: null,\n      type: 'top-level',\n      loading: false,\n      error: null,\n      isAuthenticated: false,\n      navigate: () => {},\n      params: {},\n      location: { pathname: '/' }\n    };\n  }\n  return context;\n};\n\n/**\n * Determine page type from URL parameters\n */\nconst determinePageType = (params) => {\n  const { user, repo } = params;\n  const asset = params['*']; // Wildcard parameter for asset path\n  \n  console.log('PageProvider: determinePageType called with params:', params);\n  console.log('PageProvider: extracted values:', { user, repo, asset });\n  \n  if (asset) return PAGE_TYPES.ASSET;\n  if (user && repo) return PAGE_TYPES.DAK;\n  if (user) return PAGE_TYPES.USER;\n  return PAGE_TYPES.TOP_LEVEL;\n};\n\n/**\n * Provider component for page framework\n */\nexport const PageProvider = ({ children, pageName }) => {\n  const params = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  \n  console.log('PageProvider: initialized with:', {\n    pageName,\n    params,\n    locationPathname: location.pathname\n  });\n  \n  const [pageState, setPageState] = useState({\n    type: determinePageType(params),\n    pageName,\n    loading: false,\n    error: null,\n    user: null,\n    profile: null,\n    repository: null,\n    branch: null,\n    asset: null,\n    isAuthenticated: githubService.isAuth()\n  });\n\n  // Extract URL parameters\n  const { user, repo } = params;\n  const asset = params['*']; // Wildcard parameter for asset path\n\n  // Load data based on page type\n  useEffect(() => {\n    const loadPageData = async () => {\n      try {\n        setPageState(prev => ({ ...prev, loading: true, error: null }));\n\n        // Use location state if available, otherwise fetch from URL params\n        let profile = location.state?.profile;\n        let repository = location.state?.repository;\n        let selectedBranch = location.state?.selectedBranch || params.branch;\n\n        // For DAK and Asset pages, validate and fetch data\n        if (pageState.type === PAGE_TYPES.DAK || pageState.type === PAGE_TYPES.ASSET) {\n          if (!profile && user) {\n            if (githubService.isAuth()) {\n              try {\n                profile = await githubService.getUser(user);\n              } catch (err) {\n                // For dashboard pages, set error state instead of redirecting\n                if (pageName === 'dashboard' || pageName.includes('editor') || pageName.includes('viewer') || pageState.type === PAGE_TYPES.DAK || pageState.type === PAGE_TYPES.ASSET) {\n                  setPageState(prev => ({\n                    ...prev,\n                    loading: false,\n                    error: `User '${user}' not found or not accessible. Please check the username and try again.`,\n                    user,\n                    // Still set available URL parameters for context\n                    repository: repo ? { name: repo, owner: { login: user }, html_url: `https://github.com/${user}/${repo}`, isNotFound: true } : null,\n                    branch: params.branch || 'main'\n                  }));\n                  return;\n                }\n                throw new Error(`User '${user}' not found or not accessible.`);\n              }\n            } else {\n              // Demo mode for DAK validation\n              const isValidDAK = dakValidationService.validateDemoDAKRepository(user, repo);\n              if (!isValidDAK) {\n                // For dashboard pages, set error state instead of redirecting\n                if (pageName === 'dashboard' || pageName.includes('editor') || pageName.includes('viewer') || pageState.type === PAGE_TYPES.DAK || pageState.type === PAGE_TYPES.ASSET) {\n                  setPageState(prev => ({\n                    ...prev,\n                    loading: false,\n                    error: `Repository '${user}/${repo}' not found or not accessible. This may be a private repository or the repository doesn't exist.`,\n                    user,\n                    profile: {\n                      login: user,\n                      name: user.charAt(0).toUpperCase() + user.slice(1),\n                      avatar_url: `https://github.com/${user}.png`,\n                      type: 'User',\n                      isDemo: true\n                    },\n                    repository: { name: repo, owner: { login: user }, html_url: `https://github.com/${user}/${repo}`, isNotFound: true },\n                    branch: params.branch || 'main'\n                  }));\n                  return;\n                }\n                throw new Error(`Repository '${user}/${repo}' not found or not accessible.`);\n              }\n              profile = {\n                login: user,\n                name: user.charAt(0).toUpperCase() + user.slice(1),\n                avatar_url: `https://github.com/${user}.png`,\n                type: 'User',\n                isDemo: true\n              };\n            }\n          }\n\n          if (!repository && user && repo) {\n            if (githubService.isAuth()) {\n              try {\n                repository = await githubService.getRepository(user, repo);\n                // Validate it's a DAK repository\n                const isValidDAK = await dakValidationService.validateDAKRepository(user, repo, selectedBranch || repository.default_branch);\n                if (!isValidDAK) {\n                  // For dashboard pages, set error state instead of redirecting\n                  if (pageName === 'dashboard' || pageName.includes('editor') || pageName.includes('viewer') || pageState.type === PAGE_TYPES.DAK || pageState.type === PAGE_TYPES.ASSET) {\n                    setPageState(prev => ({\n                      ...prev,\n                      loading: false,\n                      error: `Repository '${user}/${repo}' is not a valid DAK repository. This repository may not contain WHO SMART Guidelines content.`,\n                      user,\n                      profile,\n                      repository: { ...repository, isInvalidDAK: true },\n                      branch: selectedBranch || repository.default_branch\n                    }));\n                    return;\n                  }\n                  throw new Error(`Repository '${user}/${repo}' is not a valid DAK repository.`);\n                }\n              } catch (err) {\n                // For dashboard pages, set error state instead of redirecting\n                if (pageName === 'dashboard' || pageName.includes('editor') || pageName.includes('viewer') || pageState.type === PAGE_TYPES.DAK || pageState.type === PAGE_TYPES.ASSET) {\n                  setPageState(prev => ({\n                    ...prev,\n                    loading: false,\n                    error: `Repository '${user}/${repo}' not found or not accessible. Please check the repository name and your access permissions.`,\n                    user,\n                    profile,\n                    repository: { name: repo, owner: { login: user }, html_url: `https://github.com/${user}/${repo}`, isNotFound: true },\n                    branch: selectedBranch || 'main'\n                  }));\n                  return;\n                }\n                throw new Error(`Repository '${user}/${repo}' not found or not accessible.`);\n              }\n            } else {\n              // For demo mode, validate the demo repository exists\n              const isValidDAK = dakValidationService.validateDemoDAKRepository(user, repo);\n              if (!isValidDAK) {\n                // For dashboard pages, set error state instead of redirecting\n                if (pageName === 'dashboard' || pageName.includes('editor') || pageName.includes('viewer') || pageState.type === PAGE_TYPES.DAK || pageState.type === PAGE_TYPES.ASSET) {\n                  setPageState(prev => ({\n                    ...prev,\n                    loading: false,\n                    error: `Repository '${user}/${repo}' not found or not accessible. This may be a private repository or the repository doesn't exist.`,\n                    user,\n                    profile: {\n                      login: user,\n                      name: user.charAt(0).toUpperCase() + user.slice(1),\n                      avatar_url: `https://github.com/${user}.png`,\n                      type: 'User',\n                      isDemo: true\n                    },\n                    repository: { name: repo, owner: { login: user }, html_url: `https://github.com/${user}/${repo}`, isNotFound: true },\n                    branch: selectedBranch || 'main'\n                  }));\n                  return;\n                }\n                throw new Error(`Repository '${user}/${repo}' not found or not accessible.`);\n              }\n              \n              repository = {\n                name: repo,\n                full_name: `${user}/${repo}`,\n                owner: { login: user },\n                default_branch: selectedBranch || 'main',\n                html_url: `https://github.com/${user}/${repo}`,\n                isDemo: true\n              };\n            }\n          }\n\n          selectedBranch = selectedBranch || repository?.default_branch || 'main';\n\n          // For asset pages, validate the asset exists (when authenticated or public repo)\n          if (pageState.type === PAGE_TYPES.ASSET && asset) {\n            try {\n              await githubService.getFileContent(user, repo, asset, selectedBranch);\n            } catch (err) {\n              // For asset pages, set error state instead of redirecting  \n              if (pageName === 'asset' || pageName.includes('editor') || pageName.includes('viewer')) {\n                setPageState(prev => ({\n                  ...prev,\n                  loading: false,\n                  error: `Asset '${asset}' not found in repository '${user}/${repo}'. The file may have been moved or deleted.`,\n                  user,\n                  profile,\n                  repository,\n                  branch: selectedBranch,\n                  asset\n                }));\n                return;\n              }\n              throw new Error(`Asset '${asset}' not found in repository.`);\n            }\n          }\n        }\n\n        // For User pages, just need profile\n        if (pageState.type === PAGE_TYPES.USER && !profile && user) {\n          if (githubService.isAuth()) {\n            try {\n              profile = await githubService.getUser(user);\n            } catch (err) {\n              // For user pages, set error state instead of redirecting\n              setPageState(prev => ({\n                ...prev,\n                loading: false,\n                error: `User '${user}' not found or not accessible. Please check the username and try again.`,\n                user\n              }));\n              return;\n            }\n          } else {\n            profile = {\n              login: user,\n              name: user.charAt(0).toUpperCase() + user.slice(1),\n              avatar_url: `https://github.com/${user}.png`,\n              type: 'User',\n              isDemo: true\n            };\n          }\n        }\n\n        setPageState(prev => ({\n          ...prev,\n          loading: false,\n          user,\n          profile,\n          repository,\n          branch: selectedBranch,\n          asset,\n          isAuthenticated: githubService.isAuth()\n        }));\n\n        // Handle profile subscriptions asynchronously\n        const handleSubscriptions = async () => {\n          try {\n            const currentUser = await githubService.getCurrentUser();\n            if (currentUser) {\n              profileSubscriptionService.ensureCurrentUserSubscribed(currentUser);\n            }\n          } catch (error) {\n            // Current user fetch failed, but continue with visited profile logic\n            console.debug('Could not fetch current user for subscriptions:', error);\n          }\n\n          // Auto-add visited profiles (if not demo and not already subscribed)\n          if (profile && !profile.isDemo && (pageState.type === PAGE_TYPES.USER || pageState.type === PAGE_TYPES.DAK || pageState.type === PAGE_TYPES.ASSET)) {\n            profileSubscriptionService.autoAddVisitedProfile(profile);\n          }\n        };\n\n        // Run subscription logic without blocking the main page load\n        if (githubService.isAuth()) {\n          handleSubscriptions();\n        }\n\n      } catch (error) {\n        console.error('Page data loading error:', error);\n        setPageState(prev => ({\n          ...prev,\n          loading: false,\n          error: error.message\n        }));\n      }\n    };\n\n    // Only load data if we have URL parameters that require it\n    if ((pageState.type !== PAGE_TYPES.TOP_LEVEL && user) || pageState.type === PAGE_TYPES.TOP_LEVEL) {\n      loadPageData();\n    }\n  }, [user, repo, params.branch, asset, pageState.type, location.state, navigate, pageName]);\n\n  // Monitor authentication state changes\n  useEffect(() => {\n    const checkAuthState = () => {\n      const currentAuthState = githubService.isAuth();\n      if (currentAuthState !== pageState.isAuthenticated) {\n        setPageState(prev => ({\n          ...prev,\n          isAuthenticated: currentAuthState\n        }));\n      }\n    };\n\n    // Check periodically for auth state changes (for logout detection)\n    const interval = setInterval(checkAuthState, 1000);\n    \n    return () => clearInterval(interval);\n  }, [pageState.isAuthenticated]);\n\n  const value = {\n    ...pageState,\n    navigate,\n    params,\n    location\n  };\n\n  return (\n    <PageContext.Provider value={value}>\n      {children}\n    </PageContext.Provider>\n  );\n};","/**\n * Utility function to get the appropriate image path based on the current theme\n * This can be used outside React components\n * @param {string} baseImagePath - The base image path (e.g., \"sgex-mascot.png\")\n * @returns {string} The theme-appropriate image path\n */\nexport const getThemeImagePath = (baseImagePath) => {\n  const isDarkMode = document.body.classList.contains('theme-dark');\n  \n  // Get the correct base path for the deployment environment\n  const publicUrl = process.env.PUBLIC_URL || '';\n  \n  // Normalize the base image path (remove leading slash if present)\n  const normalizedPath = baseImagePath.startsWith('/') ? baseImagePath.slice(1) : baseImagePath;\n  \n  let finalPath;\n  if (isDarkMode) {\n    // Convert base image to dark mode version\n    // e.g., \"sgex-mascot.png\" -> \"sgex-mascot_grey_tabby.png\"\n    const darkImageName = normalizedPath.replace(/\\.png$/, '_grey_tabby.png');\n    finalPath = publicUrl ? `${publicUrl}/${darkImageName}` : `/${darkImageName}`;\n  } else {\n    // Use original image for light mode\n    finalPath = publicUrl ? `${publicUrl}/${normalizedPath}` : `/${normalizedPath}`;\n  }\n  \n  return finalPath;\n};\n\nexport default getThemeImagePath;","/**\n * User Access Service\n * \n * Manages user types and access levels throughout the SGEX Workbench.\n * Supports three user types: authenticated, unauthenticated, and demo users.\n */\n\nimport githubService from './githubService';\nimport logger from '../utils/logger';\nimport { getThemeImagePath } from '../utils/themeUtils';\n\n/**\n * User types supported by the access framework\n */\nexport const USER_TYPES = {\n  AUTHENTICATED: 'authenticated',\n  UNAUTHENTICATED: 'unauthenticated', \n  DEMO: 'demo'\n};\n\n/**\n * Access levels for different operations\n */\nexport const ACCESS_LEVELS = {\n  READ: 'read',\n  WRITE: 'write',\n  NONE: 'none'\n};\n\nclass UserAccessService {\n  constructor() {\n    this.logger = logger.getLogger('UserAccessService');\n    this.currentUser = null;\n    this.userType = USER_TYPES.UNAUTHENTICATED;\n    this.permissions = new Map();\n    this.listeners = new Set();\n  }\n\n  /**\n   * Initialize user access service\n   */\n  async initialize() {\n    this.logger.info('Initializing user access service');\n    await this.detectUserType();\n    this.notifyListeners();\n  }\n\n  /**\n   * Detect current user type based on authentication state\n   */\n  async detectUserType() {\n    try {\n      if (githubService.isAuth()) {\n        // Check if this is a demo user (has demo DAKs configured)\n        const isDemoUser = this.checkIfDemoUser();\n        \n        if (isDemoUser) {\n          this.userType = USER_TYPES.DEMO;\n          this.currentUser = await this.createDemoUser();\n        } else {\n          this.userType = USER_TYPES.AUTHENTICATED;\n          this.currentUser = await githubService.getCurrentUser();\n        }\n      } else {\n        this.userType = USER_TYPES.UNAUTHENTICATED;\n        this.currentUser = null;\n      }\n\n      this.logger.info('User type detected', { \n        userType: this.userType, \n        hasUser: !!this.currentUser \n      });\n    } catch (error) {\n      this.logger.error('Error detecting user type', { error: error.message });\n      // Fallback to unauthenticated\n      this.userType = USER_TYPES.UNAUTHENTICATED;\n      this.currentUser = null;\n    }\n  }\n\n  /**\n   * Check if current authenticated user should be treated as demo user\n   */\n  checkIfDemoUser() {\n    // Demo users are determined by having access to demo DAKs\n    // This can be configured via localStorage or environment variables\n    const demoMode = localStorage.getItem('sgex_demo_mode');\n    const envDemoMode = process.env.REACT_APP_DEMO_MODE;\n    \n    return demoMode === 'true' || envDemoMode === 'true';\n  }\n\n  /**\n   * Create demo user object with demo data\n   */\n  async createDemoUser() {\n    try {\n      const realUser = await githubService.getCurrentUser();\n      return {\n        ...realUser,\n        isDemo: true,\n        demoData: this.getDemoData()\n      };\n    } catch (error) {\n      // If we can't get real user, create a synthetic demo user\n      return {\n        login: 'demo-user',\n        name: 'Demo User',\n        avatar_url: getThemeImagePath('sgex-mascot.png'),\n        type: 'User',\n        isDemo: true,\n        demoData: this.getDemoData()\n      };\n    }\n  }\n\n  /**\n   * Get demo data and DAKs\n   */\n  getDemoData() {\n    return {\n      daks: [\n        {\n          owner: 'WHO',\n          repo: 'smart-anc',\n          name: 'Smart Antenatal Care',\n          description: 'Demo DAK for antenatal care guidelines'\n        },\n        {\n          owner: 'WHO', \n          repo: 'smart-tb',\n          name: 'Smart Tuberculosis',\n          description: 'Demo DAK for tuberculosis care guidelines'\n        }\n      ],\n      sampleAssets: {\n        'input/vocabulary/ValueSet-anc-care-codes.json': {\n          type: 'ValueSet',\n          description: 'Demo value set for antenatal care'\n        }\n      }\n    };\n  }\n\n  /**\n   * Get current user type\n   */\n  getUserType() {\n    return this.userType;\n  }\n\n  /**\n   * Get current user information\n   */\n  getCurrentUser() {\n    return this.currentUser;\n  }\n\n  /**\n   * Check if user is authenticated (includes demo users)\n   */\n  isAuthenticated() {\n    return this.userType === USER_TYPES.AUTHENTICATED || this.userType === USER_TYPES.DEMO;\n  }\n\n  /**\n   * Check if user is in demo mode\n   */\n  isDemoUser() {\n    return this.userType === USER_TYPES.DEMO;\n  }\n\n  /**\n   * Check if user is unauthenticated\n   */\n  isUnauthenticated() {\n    return this.userType === USER_TYPES.UNAUTHENTICATED;\n  }\n\n  /**\n   * Get access level for a specific repository and operation\n   */\n  async getRepositoryAccess(owner, repo, branch = 'main') {\n    const cacheKey = `${owner}/${repo}/${branch}`;\n    \n    // Check cache first\n    if (this.permissions.has(cacheKey)) {\n      return this.permissions.get(cacheKey);\n    }\n\n    let access = ACCESS_LEVELS.NONE;\n\n    try {\n      if (this.userType === USER_TYPES.UNAUTHENTICATED) {\n        // Unauthenticated users only get read access to public repos\n        access = ACCESS_LEVELS.READ;\n      } else if (this.userType === USER_TYPES.DEMO) {\n        // Demo users get read access to demo DAKs, but no write access\n        const isDemoDAK = this.isDemoDAK(owner, repo);\n        access = isDemoDAK ? ACCESS_LEVELS.READ : ACCESS_LEVELS.NONE;\n      } else if (this.userType === USER_TYPES.AUTHENTICATED) {\n        // Authenticated users get access based on GitHub permissions\n        const hasReadAccess = await this.checkGitHubReadAccess(owner, repo);\n        const hasWriteAccess = await this.checkGitHubWriteAccess(owner, repo);\n        \n        if (hasWriteAccess) {\n          access = ACCESS_LEVELS.WRITE;\n        } else if (hasReadAccess) {\n          access = ACCESS_LEVELS.READ;\n        }\n      }\n    } catch (error) {\n      this.logger.error('Error checking repository access', { \n        owner, repo, branch, error: error.message \n      });\n      // Default to read access on error for better UX\n      access = ACCESS_LEVELS.READ;\n    }\n\n    // Cache the result\n    this.permissions.set(cacheKey, access);\n    \n    this.logger.debug('Repository access determined', { \n      owner, repo, branch, access, userType: this.userType \n    });\n\n    return access;\n  }\n\n  /**\n   * Check if a repository is a demo DAK\n   */\n  isDemoDAK(owner, repo) {\n    if (!this.currentUser?.demoData?.daks) {\n      return false;\n    }\n    \n    return this.currentUser.demoData.daks.some(dak => \n      dak.owner === owner && dak.repo === repo\n    );\n  }\n\n  /**\n   * Check GitHub read access for authenticated users\n   */\n  async checkGitHubReadAccess(owner, repo) {\n    try {\n      await githubService.getRepository(owner, repo);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Check GitHub write access for authenticated users\n   */\n  async checkGitHubWriteAccess(owner, repo) {\n    try {\n      return await githubService.hasRepositoryWriteAccess(owner, repo);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Check if user can save to GitHub for a specific repository\n   */\n  async canSaveToGitHub(owner, repo, branch = 'main') {\n    // Demo users and unauthenticated users never have GitHub write access\n    if (this.userType !== USER_TYPES.AUTHENTICATED) {\n      return false;\n    }\n\n    const access = await this.getRepositoryAccess(owner, repo, branch);\n    return access === ACCESS_LEVELS.WRITE;\n  }\n\n  /**\n   * Check if user can save to local storage (staging ground)\n   */\n  canSaveLocal() {\n    // All user types can save to local storage\n    return true;\n  }\n\n  /**\n   * Get UI behavior configuration for current user type\n   */\n  getUIBehavior() {\n    const behavior = {\n      showEditFeatures: true,\n      showSaveToGitHub: true,\n      showSaveLocal: true,\n      confirmBeforeSave: true,\n      allowCreateNew: true,\n      showAccessBadges: true\n    };\n\n    switch (this.userType) {\n      case USER_TYPES.UNAUTHENTICATED:\n        return {\n          ...behavior,\n          showEditFeatures: false,\n          showSaveToGitHub: false,\n          allowCreateNew: false\n        };\n      \n      case USER_TYPES.DEMO:\n        return {\n          ...behavior,\n          showSaveToGitHub: false, // Demo users see the UI but get blocked at save\n          allowCreateNew: false\n        };\n      \n      case USER_TYPES.AUTHENTICATED:\n        return behavior;\n      \n      default:\n        return {\n          ...behavior,\n          showEditFeatures: false,\n          showSaveToGitHub: false,\n          allowCreateNew: false\n        };\n    }\n  }\n\n  /**\n   * Get access badge information for a repository\n   */\n  async getAccessBadge(owner, repo, branch = 'main') {\n    const access = await this.getRepositoryAccess(owner, repo, branch);\n    \n    const badges = {\n      [ACCESS_LEVELS.WRITE]: {\n        text: 'Write Access',\n        icon: '✏️',\n        color: 'green',\n        description: 'You can edit and save changes to this repository'\n      },\n      [ACCESS_LEVELS.READ]: {\n        text: 'Read Only',\n        icon: '👁️',\n        color: 'blue', \n        description: 'You can view this repository but cannot save changes'\n      },\n      [ACCESS_LEVELS.NONE]: {\n        text: 'No Access',\n        icon: '🚫',\n        color: 'red',\n        description: 'You do not have access to this repository'\n      }\n    };\n\n    return badges[access] || badges[ACCESS_LEVELS.NONE];\n  }\n\n  /**\n   * Enable demo mode for current user\n   */\n  enableDemoMode() {\n    localStorage.setItem('sgex_demo_mode', 'true');\n    this.initialize(); // Re-initialize to update user type\n  }\n\n  /**\n   * Disable demo mode\n   */\n  disableDemoMode() {\n    localStorage.removeItem('sgex_demo_mode');\n    this.initialize(); // Re-initialize to update user type\n  }\n\n  /**\n   * Clear cached permissions\n   */\n  clearPermissionsCache() {\n    this.permissions.clear();\n    this.logger.debug('Permissions cache cleared');\n  }\n\n  /**\n   * Add listener for user access changes\n   */\n  addListener(callback) {\n    this.listeners.add(callback);\n    \n    // Return unsubscribe function\n    return () => {\n      this.listeners.delete(callback);\n    };\n  }\n\n  /**\n   * Notify all listeners of changes\n   */\n  notifyListeners() {\n    const accessState = {\n      userType: this.userType,\n      currentUser: this.currentUser,\n      isAuthenticated: this.isAuthenticated(),\n      isDemoUser: this.isDemoUser(),\n      uiBehavior: this.getUIBehavior()\n    };\n\n    this.listeners.forEach(callback => {\n      try {\n        callback(accessState);\n      } catch (error) {\n        this.logger.error('Error in access service listener', { error: error.message });\n      }\n    });\n  }\n\n  /**\n   * Handle authentication state changes\n   */\n  handleAuthChange() {\n    this.clearPermissionsCache();\n    this.initialize();\n  }\n}\n\n// Create singleton instance\nconst userAccessService = new UserAccessService();\n\nexport default userAccessService;","/**\n * Bookmark Service - Manages user bookmarks in localStorage\n * \n * Provides functionality to bookmark pages with context-aware titles:\n * - DAK: {user}/{repo} for DAK pages\n * - DAK: {user}/{repo}/{branch} for DAK pages with specific branch  \n * - {asset} in DAK: {user}/{repo}/{branch} for asset pages\n */\nclass BookmarkService {\n  constructor() {\n    this.storageKey = 'sgex-bookmarks';\n  }\n\n  /**\n   * Get all bookmarks from localStorage\n   * @returns {Array} Array of bookmark objects\n   */\n  getBookmarks() {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.warn('Error reading bookmarks from localStorage:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Save bookmarks to localStorage\n   * @param {Array} bookmarks - Array of bookmark objects\n   */\n  saveBookmarks(bookmarks) {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(bookmarks));\n    } catch (error) {\n      console.error('Error saving bookmarks to localStorage:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate bookmark title based on page context\n   * @param {string} pageName - Name of the page\n   * @param {Object} context - Page context (user, repo, branch, asset)\n   * @returns {string} Generated bookmark title\n   */\n  generateBookmarkTitle(pageName, context) {\n    const { user, repository, branch, asset } = context;\n\n    // Asset pages: {asset} in DAK: {user}/{repo}/{branch}\n    if (asset && user && repository) {\n      const repoName = repository.name || repository;\n      const branchName = branch || 'main';\n      return `${asset} in DAK: ${user}/${repoName}/${branchName}`;\n    }\n\n    // DAK pages with branch: DAK: {user}/{repo}/{branch}\n    if (user && repository && branch) {\n      const repoName = repository.name || repository;\n      return `DAK: ${user}/${repoName}/${branch}`;\n    }\n\n    // DAK pages without specific branch: DAK: {user}/{repo}\n    if (user && repository) {\n      const repoName = repository.name || repository;\n      return `DAK: ${user}/${repoName}`;\n    }\n\n    // User pages: {pageName}: {user}\n    if (user) {\n      return `${pageName}: ${user}`;\n    }\n\n    // Top-level pages: just use page name\n    return pageName;\n  }\n\n  /**\n   * Add a bookmark\n   * @param {string} pageName - Name of the page\n   * @param {string} url - URL of the page\n   * @param {Object} context - Page context for generating title\n   * @returns {Object} The created bookmark\n   */\n  addBookmark(pageName, url, context = {}) {\n    const bookmarks = this.getBookmarks();\n    \n    // Check if bookmark already exists\n    const existingIndex = bookmarks.findIndex(b => b.url === url);\n    if (existingIndex !== -1) {\n      // Update existing bookmark\n      bookmarks[existingIndex] = {\n        ...bookmarks[existingIndex],\n        title: this.generateBookmarkTitle(pageName, context),\n        pageName,\n        context,\n        lastUpdated: new Date().toISOString()\n      };\n    } else {\n      // Create new bookmark\n      const bookmark = {\n        id: Date.now().toString(),\n        title: this.generateBookmarkTitle(pageName, context),\n        url,\n        pageName,\n        context,\n        createdAt: new Date().toISOString(),\n        lastUpdated: new Date().toISOString()\n      };\n      bookmarks.push(bookmark);\n    }\n\n    this.saveBookmarks(bookmarks);\n    return bookmarks[existingIndex] || bookmarks[bookmarks.length - 1];\n  }\n\n  /**\n   * Remove a bookmark by ID\n   * @param {string} bookmarkId - ID of the bookmark to remove\n   * @returns {boolean} Success status\n   */\n  removeBookmark(bookmarkId) {\n    try {\n      const bookmarks = this.getBookmarks();\n      const filteredBookmarks = bookmarks.filter(b => b.id !== bookmarkId);\n      \n      if (filteredBookmarks.length !== bookmarks.length) {\n        this.saveBookmarks(filteredBookmarks);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error removing bookmark:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if current page is bookmarked\n   * @param {string} url - URL to check\n   * @returns {boolean} Whether the page is bookmarked\n   */\n  isBookmarked(url) {\n    const bookmarks = this.getBookmarks();\n    return bookmarks.some(b => b.url === url);\n  }\n\n  /**\n   * Get bookmark for a specific URL\n   * @param {string} url - URL to find\n   * @returns {Object|null} Bookmark object or null if not found\n   */\n  getBookmarkByUrl(url) {\n    const bookmarks = this.getBookmarks();\n    return bookmarks.find(b => b.url === url) || null;\n  }\n\n  /**\n   * Get bookmarks organized by page name (alphabetically)\n   * @returns {Object} Bookmarks grouped by page name\n   */\n  getBookmarksGroupedByPage() {\n    const bookmarks = this.getBookmarks();\n    const grouped = {};\n\n    bookmarks.forEach(bookmark => {\n      const pageName = bookmark.pageName || 'Other';\n      if (!grouped[pageName]) {\n        grouped[pageName] = [];\n      }\n      grouped[pageName].push(bookmark);\n    });\n\n    // Sort each group by title\n    Object.keys(grouped).forEach(pageName => {\n      grouped[pageName].sort((a, b) => a.title.localeCompare(b.title));\n    });\n\n    // Return as sorted array of objects\n    const sortedPages = Object.keys(grouped).sort();\n    return sortedPages.map(pageName => ({\n      pageName,\n      bookmarks: grouped[pageName]\n    }));\n  }\n\n  /**\n   * Clear all bookmarks\n   */\n  clearBookmarks() {\n    try {\n      localStorage.removeItem(this.storageKey);\n    } catch (error) {\n      console.error('Error clearing bookmarks:', error);\n    }\n  }\n\n  /**\n   * Export bookmarks as JSON\n   * @returns {string} JSON string of bookmarks\n   */\n  exportBookmarks() {\n    const bookmarks = this.getBookmarks();\n    return JSON.stringify(bookmarks, null, 2);\n  }\n\n  /**\n   * Import bookmarks from JSON\n   * @param {string} jsonString - JSON string of bookmarks\n   * @param {boolean} merge - Whether to merge with existing bookmarks\n   * @returns {boolean} Success status\n   */\n  importBookmarks(jsonString, merge = false) {\n    try {\n      const importedBookmarks = JSON.parse(jsonString);\n      \n      if (!Array.isArray(importedBookmarks)) {\n        throw new Error('Invalid bookmark format');\n      }\n\n      if (merge) {\n        const existingBookmarks = this.getBookmarks();\n        const mergedBookmarks = [...existingBookmarks];\n        \n        importedBookmarks.forEach(imported => {\n          const existingIndex = mergedBookmarks.findIndex(b => b.url === imported.url);\n          if (existingIndex !== -1) {\n            mergedBookmarks[existingIndex] = imported;\n          } else {\n            mergedBookmarks.push(imported);\n          }\n        });\n        \n        this.saveBookmarks(mergedBookmarks);\n      } else {\n        this.saveBookmarks(importedBookmarks);\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Error importing bookmarks:', error);\n      return false;\n    }\n  }\n}\n\n// Create and export singleton instance\nconst bookmarkService = new BookmarkService();\nexport default bookmarkService;","import React, { useState, useEffect } from 'react';\nimport githubService from '../services/githubService';\nimport './PreviewBadge.css';\n\n/**\n * PreviewBadge component that displays when the app is deployed from a non-main branch\n * Shows branch name and links to the associated PR\n */\nconst PreviewBadge = () => {\n  const [branchInfo, setBranchInfo] = useState(null);\n  const [prInfo, setPrInfo] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const detectBranchAndPR = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Detect current branch from environment or URL\n        const currentBranch = getCurrentBranch();\n        \n        if (!currentBranch || currentBranch === 'main') {\n          // Not a preview branch, don't show badge\n          setLoading(false);\n          return;\n        }\n\n        setBranchInfo({\n          name: currentBranch,\n          safeName: currentBranch.replace(/\\//g, '-')\n        });\n\n        // Try to fetch PR information for this branch\n        try {\n          const prData = await fetchPRForBranch(currentBranch);\n          if (prData) {\n            setPrInfo(prData);\n          }\n        } catch (prError) {\n          console.debug('Could not fetch PR info:', prError);\n          // Continue without PR info - still show branch badge\n        }\n\n        setLoading(false);\n      } catch (err) {\n        console.error('Error detecting branch:', err);\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    detectBranchAndPR();\n  }, []);\n\n  const getCurrentBranch = () => {\n    // First try environment variable (set during build)\n    if (process.env.REACT_APP_GITHUB_REF_NAME) {\n      return process.env.REACT_APP_GITHUB_REF_NAME;\n    }\n    \n    // Fallback: detect from URL path\n    const path = window.location.pathname;\n    \n    // Match pattern: /sgex/{branch-name}/\n    const match = path.match(/^\\/sgex\\/([^/]+)\\//);\n    if (match && match[1] !== 'main') {\n      const safeBranchName = match[1];\n      \n      // Convert safe branch name back to original branch name\n      // This handles the common case where slashes are converted to dashes\n      // Note: This is a heuristic and may not be perfect for all edge cases\n      let branchName = safeBranchName;\n      \n      // Common patterns: feature-name -> feature/name, fix-123 -> fix/123\n      if (safeBranchName.includes('-') && !safeBranchName.startsWith('v') && !safeBranchName.match(/^\\d/)) {\n        // Try to detect if this looks like a feature branch\n        if (safeBranchName.match(/^(feature|fix|hotfix|bugfix|chore|docs|style|refactor|test)-/)) {\n          branchName = safeBranchName.replace(/^([^-]+)-/, '$1/');\n        }\n      }\n      \n      return branchName;\n    }\n\n    return null;\n  };\n\n  const fetchPRForBranch = async (branchName) => {\n    try {\n      // Get current repository context if available\n      // For now, we'll use the main repository\n      const owner = 'litlfred';\n      const repo = 'sgex';\n\n      // Get PR for this specific branch\n      const pr = await githubService.getPullRequestForBranch(owner, repo, branchName);\n      \n      return pr;\n    } catch (error) {\n      console.debug('Failed to fetch PR info:', error);\n      return null;\n    }\n  };\n\n  const handleBadgeClick = () => {\n    if (prInfo && prInfo.html_url) {\n      window.open(prInfo.html_url, '_blank');\n    }\n  };\n\n  // Don't render anything if loading, error, or not a preview branch\n  if (loading || error || !branchInfo) {\n    return null;\n  }\n\n  return (\n    <div className=\"preview-badge-container\">\n      <div \n        className={`preview-badge ${prInfo ? 'clickable' : ''}`}\n        onClick={prInfo ? handleBadgeClick : undefined}\n        title={prInfo ? `Click to view PR: ${prInfo.title}` : `Preview branch: ${branchInfo.name}`}\n      >\n        <div className=\"badge-content\">\n          <span className=\"badge-label\">Preview:</span>\n          <span className=\"badge-branch\">{branchInfo.name}</span>\n          {prInfo && (\n            <>\n              <span className=\"badge-separator\">|</span>\n              <span className=\"badge-pr-title\">{prInfo.title}</span>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PreviewBadge;","import React, { useState, useEffect } from 'react';\nimport { usePage } from './PageProvider';\nimport githubService from '../../services/githubService';\nimport userAccessService from '../../services/userAccessService';\nimport bookmarkService from '../../services/bookmarkService';\nimport PreviewBadge from '../PreviewBadge';\nimport './PageHeader.css';\n\n/**\n * Consistent header component for all pages\n */\nconst PageHeader = () => {\n  const { \n    pageName, \n    profile, \n    repository, \n    branch, \n    asset,\n    isAuthenticated,\n    navigate \n  } = usePage();\n\n  const [showUserDropdown, setShowUserDropdown] = useState(false);\n  const [showBookmarkDropdown, setShowBookmarkDropdown] = useState(false);\n  const [authenticatedUser, setAuthenticatedUser] = useState(null);\n\n  // Always fetch the authenticated user for login button display\n  useEffect(() => {\n    if (isAuthenticated) {\n      const fetchAuthenticatedUser = async () => {\n        try {\n          // Use userAccessService to get the current user (handles both authenticated and demo users)\n          const user = userAccessService.getCurrentUser();\n          if (user) {\n            setAuthenticatedUser(user);\n          } else {\n            // Fallback to githubService for backwards compatibility\n            const githubUser = await githubService.getCurrentUser();\n            setAuthenticatedUser(githubUser);\n          }\n        } catch (error) {\n          console.debug('Could not fetch authenticated user:', error);\n        }\n      };\n      \n      fetchAuthenticatedUser();\n    } else {\n      setAuthenticatedUser(null);\n    }\n  }, [isAuthenticated]);\n\n  const handleLogout = () => {\n    githubService.logout();\n    navigate('/');\n  };\n\n  const handleHomeNavigation = () => {\n    navigate('/');\n  };\n\n  const handleGitHubUser = () => {\n    // Always navigate to the authenticated user's GitHub profile, not the DAK owner's\n    if (authenticatedUser?.html_url) {\n      window.open(authenticatedUser.html_url, '_blank');\n    } else if (authenticatedUser?.login) {\n      window.open(`https://github.com/${authenticatedUser.login}`, '_blank');\n    }\n  };\n\n  const handleBookmarkCurrentPage = () => {\n    const context = {\n      user: authenticatedUser?.login, // Use authenticated user for bookmarks\n      repository,\n      branch,\n      asset\n    };\n    \n    const currentUrl = window.location.pathname;\n    bookmarkService.addBookmark(pageName, currentUrl, context);\n    setShowBookmarkDropdown(false);\n  };\n\n  const handleRemoveBookmark = (bookmarkId) => {\n    bookmarkService.removeBookmark(bookmarkId);\n    // Force re-render by toggling dropdown\n    setShowBookmarkDropdown(false);\n    setTimeout(() => setShowBookmarkDropdown(true), 50);\n  };\n\n  const handleBookmarkNavigation = (bookmark) => {\n    navigate(bookmark.url);\n    setShowBookmarkDropdown(false);\n  };\n\n  const getCurrentPageBookmark = () => {\n    return bookmarkService.getBookmarkByUrl(window.location.pathname);\n  };\n\n  const getBookmarksGrouped = () => {\n    return bookmarkService.getBookmarksGroupedByPage();\n  };\n\n  const currentBookmark = getCurrentPageBookmark();\n  const bookmarksGrouped = getBookmarksGrouped();\n\n  return (\n    <header className=\"page-header\">\n      {/* Left side - Logo and context */}\n      <div className=\"page-header-left\">\n        <div className=\"sgex-logo\" onClick={handleHomeNavigation}>\n          <h1>SGEX Workbench</h1>\n          <p className=\"subtitle\">WHO SMART Guidelines Exchange</p>\n        </div>\n        \n        {/* Preview badge for non-main branches */}\n        <PreviewBadge />\n      </div>\n\n      {/* Right side - Navigation and user controls */}\n      <div className=\"page-header-right\">\n        {/* User info and controls */}\n        {(isAuthenticated || profile?.isDemo) && authenticatedUser ? (\n          <div className=\"user-controls\">\n            <div className=\"user-info\" onClick={() => setShowUserDropdown(!showUserDropdown)}>\n              <img src={authenticatedUser.avatar_url} alt=\"User avatar\" className=\"user-avatar\" />\n              <span className=\"user-name\">{authenticatedUser.name || authenticatedUser.login}</span>\n              <span className=\"dropdown-arrow\">▼</span>\n            </div>\n            {showUserDropdown && (\n              <div className=\"user-dropdown\">\n                <button className=\"dropdown-item\" onClick={handleGitHubUser}>\n                  <svg className=\"github-icon\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\">\n                    <path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"/>\n                  </svg>\n                  GitHub Profile\n                </button>\n                \n                {/* Add/Remove current page bookmark - moved to same level as bookmarks */}\n                {currentBookmark ? (\n                  <button \n                    className=\"dropdown-item bookmark-action\"\n                    onClick={() => handleRemoveBookmark(currentBookmark.id)}\n                  >\n                    ⭐ Remove Bookmark\n                  </button>\n                ) : (\n                  <button \n                    className=\"dropdown-item bookmark-action\"\n                    onClick={handleBookmarkCurrentPage}\n                  >\n                    ☆ Add Bookmark\n                  </button>\n                )}\n                \n                {/* Bookmarks submenu */}\n                <div className=\"bookmarks-section\">\n                  <div className=\"dropdown-item bookmarks-header\" onClick={() => setShowBookmarkDropdown(!showBookmarkDropdown)}>\n                    📖 Bookmarks\n                    <span className=\"dropdown-arrow\">{showBookmarkDropdown ? '▲' : '▼'}</span>\n                  </div>\n                  \n                  {showBookmarkDropdown && (\n                    <div className=\"bookmarks-dropdown\">\n                      {/* Bookmarks list grouped by page */}\n                      {bookmarksGrouped.length > 0 ? (\n                        <div className=\"bookmarks-list\">\n                          {bookmarksGrouped.map(group => (\n                            <div key={group.pageName} className=\"bookmark-group\">\n                              <div className=\"bookmark-group-header\">{group.pageName}</div>\n                              {group.bookmarks.map(bookmark => (\n                                <div key={bookmark.id} className=\"bookmark-item\">\n                                  <button \n                                    className=\"bookmark-link\"\n                                    onClick={() => handleBookmarkNavigation(bookmark)}\n                                    title={bookmark.url}\n                                  >\n                                    {bookmark.title}\n                                  </button>\n                                  <button \n                                    className=\"bookmark-remove\"\n                                    onClick={() => handleRemoveBookmark(bookmark.id)}\n                                    title=\"Remove bookmark\"\n                                  >\n                                    ×\n                                  </button>\n                                </div>\n                              ))}\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"no-bookmarks\">No bookmarks yet</div>\n                      )}\n                    </div>\n                  )}\n                </div>\n                \n                <button className=\"dropdown-item logout-btn\" onClick={handleLogout}>\n                  Logout\n                </button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <button className=\"login-btn\" onClick={handleHomeNavigation}>\n            Login\n          </button>\n        )}\n      </div>\n    </header>\n  );\n};\n\nexport default PageHeader;","import React, { useState, useEffect } from 'react';\nimport userAccessService from '../../services/userAccessService';\nimport './AccessBadge.css';\n\n/**\n * Access Badge Component\n * \n * Displays user's access level (read/write) for the current repository\n * Shows in the title bar with dynamic styling based on permissions\n */\nconst AccessBadge = ({ owner, repo, branch = 'main', className = '' }) => {\n  const [badge, setBadge] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const loadBadge = async () => {\n      if (!owner || !repo) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        const badgeInfo = await userAccessService.getAccessBadge(owner, repo, branch);\n        \n        if (mounted) {\n          setBadge(badgeInfo);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Error loading access badge:', error);\n        if (mounted) {\n          setBadge({\n            text: 'Unknown',\n            icon: '❓',\n            color: 'gray',\n            description: 'Unable to determine access level'\n          });\n          setLoading(false);\n        }\n      }\n    };\n\n    loadBadge();\n\n    // Listen for access changes\n    const unsubscribe = userAccessService.addListener(() => {\n      loadBadge();\n    });\n\n    return () => {\n      mounted = false;\n      unsubscribe();\n    };\n  }, [owner, repo, branch]);\n\n  if (loading) {\n    return (\n      <div className={`access-badge loading ${className}`}>\n        <span className=\"access-badge-icon\">⏳</span>\n        <span className=\"access-badge-text\">Loading...</span>\n      </div>\n    );\n  }\n\n  if (!badge) {\n    return null;\n  }\n\n  return (\n    <div \n      className={`access-badge ${badge.color} ${className}`}\n      onMouseEnter={() => setShowTooltip(true)}\n      onMouseLeave={() => setShowTooltip(false)}\n      title={badge.description}\n    >\n      <span className=\"access-badge-icon\" role=\"img\" aria-label={badge.text}>\n        {badge.icon}\n      </span>\n      <span className=\"access-badge-text\">\n        {badge.text}\n      </span>\n      \n      {showTooltip && (\n        <div className=\"access-badge-tooltip\">\n          <div className=\"tooltip-content\">\n            <strong>{badge.text}</strong>\n            <p>{badge.description}</p>\n            {repo && (\n              <small>Repository: {owner}/{repo}</small>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AccessBadge;","import React, { useState, useEffect } from 'react';\nimport { usePage, PAGE_TYPES } from './PageProvider';\nimport AccessBadge from './AccessBadge';\nimport githubService from '../../services/githubService';\nimport './PageContext.css';\n\n/**\n * Page context component that displays profile/repo/branch information and breadcrumbs\n * Unified navigation component with avatar on left and two-row content on right\n */\nconst PageContext = ({ customBreadcrumbs }) => {\n  const { \n    type, \n    pageName,\n    profile, \n    repository, \n    branch,\n    navigate \n  } = usePage();\n\n  // Branch selector state\n  const [branches, setBranches] = useState([]);\n  const [showBranchDropdown, setShowBranchDropdown] = useState(false);\n  const [branchSearchTerm, setBranchSearchTerm] = useState('');\n  const [loadingBranches, setLoadingBranches] = useState(false);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (showBranchDropdown && !event.target.closest('.page-context-branch-selector')) {\n        setShowBranchDropdown(false);\n        setBranchSearchTerm('');\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showBranchDropdown]);\n\n  // Fetch branches when repository changes\n  useEffect(() => {\n    const fetchBranches = async () => {\n      if (!repository || !(type === PAGE_TYPES.DAK || type === PAGE_TYPES.ASSET)) {\n        setBranches([]);\n        return;\n      }\n\n      try {\n        setLoadingBranches(true);\n        const owner = repository.owner?.login || repository.full_name?.split('/')[0];\n        const branchData = await githubService.getBranches(owner, repository.name);\n        \n        // Sort branches alphabetically as requested\n        const sortedBranches = branchData.sort((a, b) => a.name.localeCompare(b.name));\n        setBranches(sortedBranches);\n      } catch (error) {\n        console.error('Failed to fetch branches for context:', error);\n        setBranches([]);\n      } finally {\n        setLoadingBranches(false);\n      }\n    };\n\n    fetchBranches();\n  }, [repository, type]);\n\n  const handleBranchChange = (newBranch) => {\n    // Update URL with new branch\n    const currentPath = window.location.pathname;\n    const pathParts = currentPath.split('/');\n    \n    // URL structure: /sgex/dashboard/{user}/{repo}/{branch}\n    // After splitting: ['', 'sgex', 'dashboard', '{user}', '{repo}', '{branch}']\n    // So branch is at index 5 when including the empty string at index 0\n    if (pathParts.length >= 5) {\n      if (pathParts.length === 5) {\n        // No branch in URL, append it\n        pathParts.push(newBranch);\n      } else {\n        // Branch exists, replace it\n        pathParts[5] = newBranch;\n      }\n      navigate(pathParts.join('/'));\n    }\n    setShowBranchDropdown(false);\n    setBranchSearchTerm('');\n  };\n\n  // Filter branches based on search term\n  const filteredBranches = branches.filter(b => \n    b.name.toLowerCase().includes(branchSearchTerm.toLowerCase())\n  );\n\n  const handleGitHubRepo = () => {\n    if (repository?.html_url) {\n      window.open(repository.html_url, '_blank');\n    }\n  };\n\n  const handleGitHubUser = () => {\n    if (profile?.html_url) {\n      window.open(profile.html_url, '_blank');\n    } else if (profile?.login) {\n      window.open(`https://github.com/${profile.login}`, '_blank');\n    }\n  };\n\n  // Generate breadcrumbs\n  const getBreadcrumbs = () => {\n    // If custom breadcrumbs are provided, use them\n    if (customBreadcrumbs && customBreadcrumbs.length > 0) {\n      return customBreadcrumbs;\n    }\n\n    // Generate automatic breadcrumbs based on page type\n    const breadcrumbs = [];\n\n    // Always start with home\n    breadcrumbs.push({\n      label: 'Home',\n      path: '/',\n      onClick: () => navigate('/')\n    });\n\n    // Add user context for user/DAK/asset pages\n    if ((type === PAGE_TYPES.USER || type === PAGE_TYPES.DAK || type === PAGE_TYPES.ASSET) && profile) {\n      breadcrumbs.push({\n        label: 'Select Repository',\n        path: `/dak-selection/${profile.login}`,\n        onClick: () => navigate(`/dak-selection/${profile.login}`, { state: { profile } })\n      });\n    }\n\n    // Add DAK context for DAK/asset pages\n    if ((type === PAGE_TYPES.DAK || type === PAGE_TYPES.ASSET) && repository) {\n      const branchPath = branch && branch !== 'main' ? `/${branch}` : '';\n      const ownerLogin = repository.owner?.login || repository.full_name?.split('/')[0];\n      if (ownerLogin) {\n        breadcrumbs.push({\n          label: 'DAK Components',\n          path: `/dashboard/${ownerLogin}/${repository.name}${branchPath}`,\n          onClick: () => navigate(`/dashboard/${ownerLogin}/${repository.name}${branchPath}`)\n        });\n      }\n    }\n\n    // Add current page context\n    const pageLabels = {\n      'landing': 'Home',\n      'landing-unauthenticated': 'Home',\n      'repositories': 'Select Repository', \n      'dak-selection': 'Select DAK',\n      'dak-action': 'Choose DAK Action',\n      'dashboard': 'DAK Components',\n      'dak-dashboard': 'DAK Components',\n      'actor-editor': 'Actor Definitions',\n      'component-editor': 'Component Editor',\n      'bpmn-viewer': 'Business Process Viewer',\n      'bpmn-editor': 'Business Process Editor',\n      'decision-support-logic': 'Decision Support Logic',\n      'core-data-dictionary-viewer': 'Core Data Dictionary',\n      'testing-viewer': 'Testing',\n      'pages-manager': 'Pages',\n      'documentation': 'Documentation'\n    };\n\n    const currentPageLabel = pageLabels[pageName] || pageName;\n    \n    // Don't add duplicate page labels\n    if (breadcrumbs.length === 0 || breadcrumbs[breadcrumbs.length - 1].label !== currentPageLabel) {\n      breadcrumbs.push({\n        label: currentPageLabel,\n        current: true\n      });\n    }\n\n    return breadcrumbs;\n  };\n\n  const breadcrumbs = getBreadcrumbs();\n\n  // Don't render if no context information to show\n  if (!profile && !repository && breadcrumbs.length <= 1) {\n    return null;\n  }\n\n  return (\n    <div className=\"page-context-container\">\n      <div className=\"page-context-content\">\n        {/* Avatar positioned to the far left */}\n        {profile && (\n          <img src={profile.avatar_url} alt={`${profile.login} avatar`} className=\"page-context-avatar\" />\n        )}\n        \n        <div className=\"page-context-info\">\n          {/* First row: Profile / Repository / Branch */}\n          <div className=\"page-context-row page-context-user-repo\">\n            {profile && (\n              <>\n                <span className=\"page-context-profile\" onClick={handleGitHubUser}>\n                  {profile.login}\n                </span>\n                {repository && <span className=\"page-context-separator\">/</span>}\n              </>\n            )}\n            {repository && (\n              <span className=\"page-context-repo\">\n                {repository.name}\n              </span>\n            )}\n            {branch && (type === PAGE_TYPES.DAK || type === PAGE_TYPES.ASSET) && (\n              <>\n                <span className=\"page-context-separator\">@</span>\n                <div className=\"page-context-branch-selector\">\n                  <button \n                    className=\"page-context-branch-btn\"\n                    onClick={() => setShowBranchDropdown(!showBranchDropdown)}\n                    title=\"Switch branch\"\n                  >\n                    <span className=\"branch-icon\">🌿</span>\n                    {branch}\n                    <span className=\"branch-dropdown-arrow\">{showBranchDropdown ? '▲' : '▼'}</span>\n                  </button>\n                  \n                  {showBranchDropdown && (\n                    <div className=\"branch-dropdown\">\n                      <div className=\"branch-search\">\n                        <input\n                          type=\"text\"\n                          placeholder=\"Search branches...\"\n                          value={branchSearchTerm}\n                          onChange={(e) => setBranchSearchTerm(e.target.value)}\n                          className=\"branch-search-input\"\n                          autoFocus\n                        />\n                      </div>\n                      <div className=\"branch-list\">\n                        {loadingBranches ? (\n                          <div className=\"branch-item loading\">Loading branches...</div>\n                        ) : filteredBranches.length > 0 ? (\n                          filteredBranches.map((b) => (\n                            <button\n                              key={b.name}\n                              className={`branch-item ${b.name === branch ? 'current' : ''}`}\n                              onClick={() => handleBranchChange(b.name)}\n                            >\n                              <span className=\"branch-icon\">🌿</span>\n                              {b.name}\n                              {b.name === branch && <span className=\"current-badge\">current</span>}\n                            </button>\n                          ))\n                        ) : (\n                          <div className=\"branch-item no-results\">\n                            {branchSearchTerm ? 'No branches found' : 'No branches available'}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n          \n          {/* Second row: Breadcrumbs */}\n          {breadcrumbs.length > 1 && (\n            <nav className=\"page-context-row page-context-breadcrumbs\" aria-label=\"Breadcrumb navigation\">\n              <ol className=\"breadcrumb-list\">\n                {breadcrumbs.map((crumb, index) => (\n                  <li key={index} className=\"breadcrumb-item\">\n                    {!crumb.current ? (\n                      <>\n                        <button \n                          className=\"breadcrumb-link\" \n                          onClick={() => crumb.onClick ? crumb.onClick() : navigate(crumb.path)}\n                          aria-label={`Navigate to ${crumb.label}`}\n                        >\n                          {crumb.label}\n                        </button>\n                        <span className=\"breadcrumb-separator\" aria-hidden=\"true\">›</span>\n                      </>\n                    ) : (\n                      <span className=\"breadcrumb-current\" aria-current=\"page\">\n                        {crumb.label}\n                      </span>\n                    )}\n                  </li>\n                ))}\n              </ol>\n            </nav>\n          )}\n        </div>\n        \n        {/* Actions area for DAK and Asset pages */}\n        {(type === PAGE_TYPES.DAK || type === PAGE_TYPES.ASSET) && repository && (\n          <div className=\"page-context-actions\">\n            {/* Access badge */}\n            <AccessBadge \n              owner={repository.owner?.login || profile?.login}\n              repo={repository.name}\n              branch={branch}\n              className=\"context-access-badge\"\n            />\n            {/* GitHub repository button */}\n            <button className=\"context-btn github-repo-btn\" onClick={handleGitHubRepo} title=\"Open repository on GitHub\">\n              <svg className=\"github-icon\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\">\n                <path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"/>\n              </svg>\n              Repository\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PageContext;","import React, { useState } from 'react';\nimport { usePage } from './PageProvider';\nimport ContextualHelpMascot from '../ContextualHelpMascot';\nimport useThemeImage from '../../hooks/useThemeImage';\nimport './ErrorHandler.css';\n\n/**\n * Error handler component with automatic bug reporting functionality\n */\nconst ErrorHandler = ({ error, onRetry }) => {\n  const pageContext = usePage();\n  const pageName = pageContext.pageName;\n  const [bugReportSent, setBugReportSent] = useState(false);\n\n  // Theme-aware mascot image\n  const mascotImage = useThemeImage('sgex-mascot.png');\n  const [userExplanation, setUserExplanation] = useState('');\n\n  const generateBugReportUrl = () => {\n    const title = encodeURIComponent('User should not have reached this page');\n    const body = encodeURIComponent(`\n**Error Information:**\n- Page: ${pageName}\n- URL: ${window.location.href}\n- Error: ${error}\n- Timestamp: ${new Date().toISOString()}\n- User Agent: ${navigator.userAgent}\n\n**Context:**\n- Browser: ${navigator.userAgent}\n- Viewport: ${window.innerWidth}x${window.innerHeight}\n- Referrer: ${document.referrer || 'Direct access'}\n\n**User Explanation:**\n${userExplanation || 'No additional details provided'}\n\n**Steps to Reproduce:**\n1. Navigate to: ${window.location.href}\n2. [Please add any additional steps]\n\n**Expected Behavior:**\nThe page should load without errors.\n\n**Actual Behavior:**\n${error}\n    `);\n\n    return `https://github.com/litlfred/sgex/issues/new?title=${title}&body=${body}&labels=bug,user-error`;\n  };\n\n  const handleSendBugReport = () => {\n    const bugReportUrl = generateBugReportUrl();\n    window.open(bugReportUrl, '_blank');\n    setBugReportSent(true);\n  };\n\n  const handleRetry = () => {\n    if (onRetry) {\n      onRetry();\n    } else {\n      window.location.reload();\n    }\n  };\n\n  const handleGoHome = () => {\n    window.location.href = '/sgex/';\n  };\n\n  // Enhanced error message generation for DAK-specific errors\n  const getErrorDisplayInfo = () => {\n    const lowercaseError = error.toLowerCase();\n    \n    // Extract user/repo from URL or page context\n    const user = pageContext?.user;\n    const repo = pageContext?.repository?.name;\n    \n    if (lowercaseError.includes('not found') || lowercaseError.includes('not accessible')) {\n      if (lowercaseError.includes('user')) {\n        return {\n          title: 'User Not Found',\n          message: `The user ${user ? `'${user}'` : 'in the URL'} could not be found on GitHub.`,\n          suggestions: [\n            'Check the spelling of the username',\n            'Verify the user account exists on GitHub',\n            'Try searching for the user on GitHub.com'\n          ],\n          icon: '👤'\n        };\n      } else if (lowercaseError.includes('repository')) {\n        return {\n          title: 'Repository Not Found',\n          message: `The repository ${user && repo ? `'${user}/${repo}'` : 'in the URL'} could not be accessed.`,\n          suggestions: [\n            'Check the spelling of the repository name',\n            'Verify the repository exists and is public',\n            'If it\\'s a private repository, make sure you have access',\n            'Try visiting the repository directly on GitHub.com'\n          ],\n          icon: '📁'\n        };\n      }\n    }\n    \n    if (lowercaseError.includes('not a valid dak') || lowercaseError.includes('invalid dak')) {\n      return {\n        title: 'Not a DAK Repository',\n        message: `The repository ${user && repo ? `'${user}/${repo}'` : 'in the URL'} doesn't appear to contain WHO SMART Guidelines content.`,\n        suggestions: [\n          'Verify this is a WHO SMART Guidelines Digital Adaptation Kit',\n          'Check if the repository has a sushi-config.yaml file',\n          'Look for smart.who.int.base dependencies in the configuration',\n          'Try browsing other DAK repositories for examples'\n        ],\n        icon: '📋'\n      };\n    }\n    \n    if (lowercaseError.includes('asset') && lowercaseError.includes('not found')) {\n      return {\n        title: 'File Not Found',\n        message: `The requested file could not be found in the repository.`,\n        suggestions: [\n          'Check if the file path is correct',\n          'Verify the file exists in the current branch',\n          'The file may have been moved or deleted',\n          'Try browsing the repository to find the correct path'\n        ],\n        icon: '📄'\n      };\n    }\n    \n    // Default error info\n    return {\n      title: 'Something Went Wrong',\n      message: error,\n      suggestions: [\n        'Try refreshing the page',\n        'Check your internet connection',\n        'The service may be temporarily unavailable'\n      ],\n      icon: '⚠️'\n    };\n  };\n\n  const errorInfo = getErrorDisplayInfo();\n\n  return (\n    <div className=\"error-handler\">\n      <div className=\"error-content\">\n        <div className=\"error-mascot-container\">\n          <ContextualHelpMascot\n            helpContent={\n              <div className=\"error-help-content\">\n                <div className=\"error-mascot-large\">\n                  <img \n                    src={mascotImage} \n                    alt=\"SGEX Helper\" \n                    className=\"large-mascot-icon\"\n                  />\n                  <div className=\"mascot-speech-bubble\">\n                    <div className=\"speech-content\">\n                      I'm sorry! Something went wrong.\n                    </div>\n                    <div className=\"speech-tail\"></div>\n                  </div>\n                </div>\n              </div>\n            }\n            position=\"center\"\n          />\n        </div>\n        \n        <div className=\"error-details\">\n          <h2>{errorInfo.icon} {errorInfo.title}</h2>\n          <p className=\"error-message\">{errorInfo.message}</p>\n          \n          {errorInfo.suggestions && (\n            <div className=\"error-suggestions\">\n              <h3>💡 Suggestions:</h3>\n              <ul>\n                {errorInfo.suggestions.map((suggestion, index) => (\n                  <li key={index}>{suggestion}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n          \n          <div className=\"error-actions\">\n            <button className=\"error-btn primary\" onClick={handleRetry}>\n              🔄 Try Again\n            </button>\n            <button className=\"error-btn secondary\" onClick={handleGoHome}>\n              🏠 Go Home\n            </button>\n          </div>\n          \n          <div className=\"bug-report-section\">\n            <h3>Help us improve SGEX</h3>\n            <p>If this error persists, please let us know what happened:</p>\n            \n            <div className=\"user-explanation\">\n              <label htmlFor=\"user-explanation\">\n                What were you trying to do when this error occurred?\n              </label>\n              <textarea\n                id=\"user-explanation\"\n                value={userExplanation}\n                onChange={(e) => setUserExplanation(e.target.value)}\n                placeholder=\"Please describe what you were doing when the error occurred...\"\n                rows={4}\n              />\n            </div>\n            \n            {!bugReportSent ? (\n              <button className=\"bug-report-btn\" onClick={handleSendBugReport}>\n                📧 Send Bug Report\n              </button>\n            ) : (\n              <div className=\"bug-report-sent\">\n                <span className=\"success-icon\">✅</span>\n                Thank you! A bug report has been opened. We'll investigate this issue.\n              </div>\n            )}\n          </div>\n          \n          <div className=\"error-context\">\n            <details>\n              <summary>Technical Details</summary>\n              <div className=\"technical-details\">\n                <p><strong>Page:</strong> {pageName}</p>\n                <p><strong>URL:</strong> {window.location.href}</p>\n                <p><strong>Error:</strong> {error}</p>\n                <p><strong>Timestamp:</strong> {new Date().toISOString()}</p>\n              </div>\n            </details>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ErrorHandler;","import React from 'react';\nimport { PageProvider, usePage } from './PageProvider';\nimport PageHeader from './PageHeader';\nimport PageContext from './PageContext';\nimport ErrorHandler from './ErrorHandler';\nimport ContextualHelpMascot from '../ContextualHelpMascot';\nimport './PageLayout.css';\n\n/**\n * Error boundary wrapper for catching React errors\n */\nclass PageErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error: error.message };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error('PageLayout caught an error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"page-layout-error\">\n          <ErrorHandler \n            error={this.state.error}\n            onRetry={() => {\n              this.setState({ hasError: false, error: null });\n              window.location.reload();\n            }}\n          />\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n/**\n * Inner layout component that uses page context\n */\nconst PageLayoutInner = ({ \n  children, \n  showHeader = true, \n  showMascot = true, \n  showBreadcrumbs = true, \n  customBreadcrumbs \n}) => {\n  const { loading, error, pageName } = usePage();\n\n  // Show loading state\n  if (loading) {\n    return (\n      <div className=\"page-layout\">\n        {showHeader && <PageHeader />}\n        <main className=\"page-main\">\n          <div className=\"page-loading\">\n            <div className=\"loading-spinner\"></div>\n            <p>Loading...</p>\n          </div>\n        </main>\n        {showMascot && (\n          <ContextualHelpMascot \n            pageId={`${pageName}-loading`}\n            position=\"bottom-right\"\n          />\n        )}\n      </div>\n    );\n  }\n\n  // Show error state\n  if (error) {\n    return (\n      <div className=\"page-layout\">\n        {showHeader && <PageHeader />}\n        <main className=\"page-main\">\n          <ErrorHandler \n            error={error}\n            onRetry={() => window.location.reload()}\n          />\n        </main>\n      </div>\n    );\n  }\n\n  // Show normal page content\n  return (\n    <div className=\"page-layout\">\n      {showHeader && <PageHeader />}\n      <PageContext customBreadcrumbs={showBreadcrumbs ? customBreadcrumbs : []} />\n      <main className=\"page-main\">\n        {children}\n        {showMascot && (\n          <ContextualHelpMascot \n            pageId={pageName}\n            position=\"bottom-right\"\n            contextData={{}}\n          />\n        )}\n      </main>\n    </div>\n  );\n};\n\n/**\n * Main page layout component with framework integration\n */\nconst PageLayout = ({ \n  children, \n  pageName, \n  showHeader = true, \n  showMascot = true,\n  showBreadcrumbs = true,\n  customBreadcrumbs\n}) => {\n  return (\n    <PageErrorBoundary>\n      <PageProvider pageName={pageName}>\n        <PageLayoutInner \n          showHeader={showHeader} \n          showMascot={showMascot}\n          showBreadcrumbs={showBreadcrumbs}\n          customBreadcrumbs={customBreadcrumbs}\n        >\n          {children}\n        </PageLayoutInner>\n      </PageProvider>\n    </PageErrorBoundary>\n  );\n};\n\nexport default PageLayout;","import { usePage, PAGE_TYPES } from './PageProvider';\n\n/**\n * Hook for accessing URL parameters in a type-safe way\n */\nexport const usePageParams = () => {\n  const { type, user, profile, repository, branch, asset, params, navigate } = usePage();\n\n  const updateBranch = (newBranch) => {\n    if (type === PAGE_TYPES.DAK || type === PAGE_TYPES.ASSET) {\n      const currentPath = window.location.pathname;\n      const pathParts = currentPath.split('/');\n      \n      // Update branch in URL path\n      if (pathParts.length >= 5) {\n        if (pathParts.length === 5) {\n          // No branch in URL, append it\n          pathParts.push(newBranch);\n        } else {\n          // Branch exists, replace it\n          pathParts[5] = newBranch;\n        }\n        navigate(pathParts.join('/'));\n      }\n    }\n  };\n\n  const navigateToUser = (userLogin) => {\n    navigate(`/${params.page || 'dak-action'}/${userLogin}`);\n  };\n\n  const navigateToDAK = (userLogin, repoName, branchName = 'main') => {\n    navigate(`/${params.page || 'dashboard'}/${userLogin}/${repoName}/${branchName}`);\n  };\n\n  const navigateToAsset = (userLogin, repoName, branchName, assetPath) => {\n    navigate(`/${params.page || 'editor'}/${userLogin}/${repoName}/${branchName}/${assetPath}`);\n  };\n\n  return {\n    type,\n    user,\n    profile,\n    repository,\n    branch,\n    asset,\n    params,\n    updateBranch,\n    navigateToUser,\n    navigateToDAK,\n    navigateToAsset,\n    navigate\n  };\n};\n\n/**\n * Hook specifically for DAK pages (DAK and Asset page types)\n */\nexport const useDAKParams = () => {\n  try {\n    const pageParams = usePageParams();\n    \n    // Only throw error if page is fully loaded and type is not DAK/ASSET\n    // This prevents errors during initial loading or page type determination\n    if (!pageParams.loading && \n        pageParams.type !== PAGE_TYPES.DAK && \n        pageParams.type !== PAGE_TYPES.ASSET) {\n      throw new Error(`useDAKParams can only be used on DAK or Asset pages. Current page type: ${pageParams.type}`);\n    }\n\n    return {\n      user: pageParams.user,\n      profile: pageParams.profile,\n      repository: pageParams.repository,\n      branch: pageParams.branch,\n      asset: pageParams.asset,\n      updateBranch: pageParams.updateBranch,\n      navigate: pageParams.navigate\n    };\n  } catch (error) {\n    // If PageProvider is not ready yet, return empty object\n    if (error.message.includes('usePage must be used within a PageProvider')) {\n      console.log('useDAKParams: PageProvider not ready yet, returning empty data');\n      return {\n        user: null,\n        profile: null,\n        repository: null,\n        branch: null,\n        asset: null,\n        updateBranch: () => {},\n        navigate: () => {}\n      };\n    }\n    throw error;\n  }\n};\n\n/**\n * Hook specifically for User pages\n */\nexport const useUserParams = () => {\n  const pageParams = usePageParams();\n  \n  if (pageParams.type !== PAGE_TYPES.USER) {\n    throw new Error('useUserParams can only be used on User pages');\n  }\n\n  return {\n    user: pageParams.user,\n    profile: pageParams.profile,\n    navigateToDAK: pageParams.navigateToDAK,\n    navigate: pageParams.navigate\n  };\n};","import React from 'react';\nimport './SaveButtonsContainer.css';\n\n/**\n * Container for save buttons with independent states\n * Provides consistent UI for local and GitHub save operations\n */\nconst SaveButtonsContainer = ({\n  // States\n  hasChanges = false,\n  isSavingLocal = false,\n  isSavingGitHub = false,\n  canSaveToGitHub = false,\n  localSaveSuccess = false,\n  githubSaveSuccess = false,\n  savedLocally = false,\n  \n  // Handlers\n  onSaveLocal,\n  onSaveGitHub,\n  \n  // Configuration\n  isDemo = false,\n  showLocalButton = true,\n  showGitHubButton = true,\n  buttonSize = 'medium', // 'small', 'medium', 'large'\n  layout = 'horizontal' // 'horizontal', 'vertical'\n}) => {\n  \n  // Determine button states\n  const localButtonDisabled = !hasChanges || isSavingLocal || localSaveSuccess;\n  const githubButtonDisabled = !hasChanges || isSavingGitHub || githubSaveSuccess || !canSaveToGitHub;\n  \n  // Button text based on state\n  const getLocalButtonText = () => {\n    if (localSaveSuccess) return 'Saved Locally ✓';\n    if (isSavingLocal) return 'Saving...';\n    return 'Save Local';\n  };\n  \n  const getGitHubButtonText = () => {\n    if (githubSaveSuccess) return 'Committed ✓';\n    if (isSavingGitHub) return 'Committing...';\n    return 'Save to GitHub';\n  };\n\n  // CSS classes\n  const containerClasses = [\n    'save-buttons-container',\n    `layout-${layout}`,\n    `size-${buttonSize}`\n  ].join(' ');\n\n  const getButtonClasses = (type, disabled, success) => {\n    const classes = ['save-button', `save-button-${type}`];\n    if (disabled) classes.push('disabled');\n    if (success) classes.push('success');\n    return classes.join(' ');\n  };\n\n  return (\n    <div className={containerClasses}>\n      {/* Local Save Button */}\n      {showLocalButton && (\n        <button\n          className={getButtonClasses('local', localButtonDisabled, localSaveSuccess)}\n          onClick={onSaveLocal}\n          disabled={localButtonDisabled}\n          title={\n            !hasChanges ? 'No changes to save' :\n            localSaveSuccess ? 'Changes saved to local storage' :\n            isSavingLocal ? 'Saving to local storage...' :\n            'Save changes to browser local storage'\n          }\n        >\n          <span className=\"button-icon\">💾</span>\n          <span className=\"button-text\">{getLocalButtonText()}</span>\n        </button>\n      )}\n\n      {/* GitHub Save Button */}\n      {showGitHubButton && canSaveToGitHub && (\n        <button\n          className={getButtonClasses('github', githubButtonDisabled, githubSaveSuccess)}\n          onClick={onSaveGitHub}\n          disabled={githubButtonDisabled}\n          title={\n            !hasChanges ? 'No changes to save' :\n            githubSaveSuccess ? 'Changes committed to GitHub' :\n            isSavingGitHub ? 'Committing to GitHub...' :\n            'Commit changes to GitHub repository'\n          }\n        >\n          <span className=\"button-icon\">📤</span>\n          <span className=\"button-text\">{getGitHubButtonText()}</span>\n        </button>\n      )}\n\n      {/* GitHub unavailable indicator */}\n      {showGitHubButton && !canSaveToGitHub && !isDemo && (\n        <div className=\"github-unavailable\">\n          <span className=\"unavailable-icon\">🔒</span>\n          <span className=\"unavailable-text\">GitHub save unavailable</span>\n          <small>Login required for GitHub access</small>\n        </div>\n      )}\n\n      {/* Demo mode indicator */}\n      {isDemo && (\n        <div className=\"demo-mode-indicator\">\n          <span className=\"demo-icon\">🧪</span>\n          <span className=\"demo-text\">Demo Mode - Local save only</span>\n        </div>\n      )}\n\n      {/* Local storage indicator */}\n      {savedLocally && (\n        <div className=\"local-storage-indicator\">\n          <span className=\"local-icon\">💾</span>\n          <span className=\"local-text\">Local version available</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SaveButtonsContainer;","import React, { useEffect, useRef } from 'react';\nimport './CommitMessageDialog.css';\n\n/**\n * Dialog for entering commit message when saving to GitHub\n * Provides commit message input with validation and cancel functionality\n */\nconst CommitMessageDialog = ({\n  isOpen = false,\n  commitMessage = '',\n  setCommitMessage,\n  onCommit,\n  onCancel,\n  isSaving = false,\n  fileName = '',\n  suggestedMessage = ''\n}) => {\n  const textareaRef = useRef(null);\n  \n  // Auto-focus and suggest message when dialog opens\n  useEffect(() => {\n    if (isOpen && textareaRef.current) {\n      textareaRef.current.focus();\n      \n      // Set suggested message if none provided\n      if (!commitMessage && !suggestedMessage && fileName) {\n        const defaultMessage = `Update ${fileName}`;\n        setCommitMessage(defaultMessage);\n      } else if (suggestedMessage && !commitMessage) {\n        setCommitMessage(suggestedMessage);\n      }\n    }\n  }, [isOpen, commitMessage, suggestedMessage, fileName, setCommitMessage]);\n\n  // Handle key presses\n  const handleKeyDown = (e) => {\n    if (e.key === 'Escape' && !isSaving) {\n      onCancel();\n    } else if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {\n      // Ctrl/Cmd + Enter to commit\n      if (commitMessage.trim() && !isSaving) {\n        onCommit(commitMessage.trim());\n      }\n    }\n  };\n\n  // Handle commit button click\n  const handleCommit = () => {\n    if (commitMessage.trim() && !isSaving) {\n      onCommit(commitMessage.trim());\n    }\n  };\n\n  // Handle overlay click to close\n  const handleOverlayClick = (e) => {\n    if (e.target === e.currentTarget && !isSaving) {\n      onCancel();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"commit-dialog-overlay\" onClick={handleOverlayClick}>\n      <div className=\"commit-dialog\" onKeyDown={handleKeyDown}>\n        <div className=\"commit-dialog-header\">\n          <h3>Commit Changes to GitHub</h3>\n          <button \n            className=\"close-button\"\n            onClick={onCancel}\n            disabled={isSaving}\n            aria-label=\"Close dialog\"\n          >\n            ✕\n          </button>\n        </div>\n        \n        <div className=\"commit-dialog-content\">\n          {fileName && (\n            <div className=\"file-info\">\n              <span className=\"file-icon\">📄</span>\n              <span className=\"file-name\">{fileName}</span>\n            </div>\n          )}\n          \n          <div className=\"commit-message-section\">\n            <label htmlFor=\"commit-message\" className=\"commit-message-label\">\n              Commit Message *\n            </label>\n            <textarea\n              id=\"commit-message\"\n              ref={textareaRef}\n              className=\"commit-message-input\"\n              value={commitMessage}\n              onChange={(e) => setCommitMessage(e.target.value)}\n              placeholder=\"Describe the changes you made...\"\n              rows={4}\n              disabled={isSaving}\n              required\n            />\n            <div className=\"commit-message-help\">\n              <small>\n                Describe what changes you made and why. This will be visible in the repository's commit history.\n              </small>\n            </div>\n          </div>\n          \n          <div className=\"commit-guidelines\">\n            <details>\n              <summary>Commit Message Guidelines</summary>\n              <ul>\n                <li>Use clear, descriptive language</li>\n                <li>Start with a verb (Add, Update, Fix, Remove, etc.)</li>\n                <li>Keep the first line under 72 characters</li>\n                <li>Add details in additional lines if needed</li>\n              </ul>\n            </details>\n          </div>\n        </div>\n        \n        <div className=\"commit-dialog-footer\">\n          <div className=\"dialog-actions\">\n            <button \n              className=\"btn btn-secondary\"\n              onClick={onCancel}\n              disabled={isSaving}\n            >\n              Cancel\n            </button>\n            <button \n              className=\"btn btn-primary\"\n              onClick={handleCommit}\n              disabled={!commitMessage.trim() || isSaving}\n            >\n              {isSaving ? (\n                <>\n                  <span className=\"spinner\"></span>\n                  Committing...\n                </>\n              ) : (\n                'Commit Changes'\n              )}\n            </button>\n          </div>\n          \n          <div className=\"keyboard-shortcut\">\n            <small>\n              Press <kbd>Ctrl+Enter</kbd> to commit or <kbd>Esc</kbd> to cancel\n            </small>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CommitMessageDialog;","/**\n * Data Access Layer\n * \n * Comprehensive service that integrates user access, staging ground, and GitHub\n * for a unified asset management experience across all user types.\n */\n\nimport userAccessService from './userAccessService';\nimport stagingGroundService from './stagingGroundService';\nimport githubService from './githubService';\nimport logger from '../utils/logger';\n\n/**\n * Save targets for asset operations\n */\nexport const SAVE_TARGETS = {\n  LOCAL: 'local',\n  GITHUB: 'github'\n};\n\n/**\n * Asset operation results\n */\nexport const OPERATION_RESULTS = {\n  SUCCESS: 'success',\n  ERROR: 'error',\n  PERMISSION_DENIED: 'permission_denied',\n  DEMO_MODE_BLOCKED: 'demo_mode_blocked'\n};\n\nclass DataAccessLayer {\n  constructor() {\n    this.logger = logger.getLogger('DataAccessLayer');\n    this.pendingOperations = new Map();\n    this.assetCache = new Map();\n  }\n\n  /**\n   * Initialize data access layer\n   */\n  async initialize(repository, branch) {\n    this.logger.info('Initializing data access layer', { \n      repository: repository?.full_name, \n      branch \n    });\n    \n    // Initialize staging ground for the repository\n    stagingGroundService.initialize(repository, branch);\n    \n    // Initialize user access service if not already done\n    await userAccessService.initialize();\n  }\n\n  /**\n   * Get asset content from GitHub or local storage\n   */\n  async getAsset(owner, repo, branch, assetPath) {\n    const cacheKey = `${owner}/${repo}/${branch}/${assetPath}`;\n    \n    try {\n      // Check if user has read access\n      const access = await userAccessService.getRepositoryAccess(owner, repo, branch);\n      if (access === 'none') {\n        throw new Error('No access to this repository');\n      }\n\n      // First, check if there's a local version in staging ground\n      const stagingGround = stagingGroundService.getStagingGround();\n      const localFile = stagingGround.files.find(f => f.path === assetPath);\n      \n      if (localFile) {\n        this.logger.debug('Asset loaded from staging ground', { assetPath });\n        return {\n          content: localFile.content,\n          source: 'local',\n          metadata: localFile.metadata,\n          hasLocalChanges: true\n        };\n      }\n\n      // If no local version, get from GitHub\n      let content;\n      if (userAccessService.isDemoUser() && userAccessService.isDemoDAK(owner, repo)) {\n        // For demo users, provide demo content\n        content = this.getDemoAssetContent(assetPath);\n      } else {\n        // Get real content from GitHub\n        content = await githubService.getFileContent(owner, repo, assetPath, branch);\n      }\n\n      // Cache the content\n      this.assetCache.set(cacheKey, content);\n\n      this.logger.debug('Asset loaded from GitHub', { assetPath, source: 'github' });\n      return {\n        content,\n        source: 'github',\n        hasLocalChanges: false\n      };\n\n    } catch (error) {\n      this.logger.error('Error getting asset', { \n        owner, repo, branch, assetPath, error: error.message \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Save asset to local storage (staging ground)\n   */\n  async saveAssetLocal(assetPath, content, metadata = {}) {\n    try {\n      const userType = userAccessService.getUserType();\n      \n      // All user types can save to local storage\n      const success = stagingGroundService.updateFile(assetPath, content, {\n        ...metadata,\n        savedBy: userType,\n        saveTarget: SAVE_TARGETS.LOCAL\n      });\n\n      if (success) {\n        this.logger.info('Asset saved to local storage', { assetPath, userType });\n        return {\n          result: OPERATION_RESULTS.SUCCESS,\n          message: 'Changes saved to local staging area',\n          target: SAVE_TARGETS.LOCAL\n        };\n      } else {\n        throw new Error('Failed to save to local storage');\n      }\n\n    } catch (error) {\n      this.logger.error('Error saving asset locally', { assetPath, error: error.message });\n      return {\n        result: OPERATION_RESULTS.ERROR,\n        message: `Failed to save locally: ${error.message}`,\n        target: SAVE_TARGETS.LOCAL\n      };\n    }\n  }\n\n  /**\n   * Save asset to GitHub\n   */\n  async saveAssetGitHub(owner, repo, branch, assetPath, content, commitMessage, metadata = {}) {\n    try {\n      const userType = userAccessService.getUserType();\n      \n      // Check if user can save to GitHub\n      const canSave = await userAccessService.canSaveToGitHub(owner, repo, branch);\n      \n      if (!canSave) {\n        if (userType === 'demo') {\n          return {\n            result: OPERATION_RESULTS.DEMO_MODE_BLOCKED,\n            message: 'Demo users cannot save to GitHub. Changes can be saved locally.',\n            target: SAVE_TARGETS.GITHUB\n          };\n        } else if (userType === 'unauthenticated') {\n          return {\n            result: OPERATION_RESULTS.PERMISSION_DENIED,\n            message: 'Please authenticate to save changes to GitHub.',\n            target: SAVE_TARGETS.GITHUB\n          };\n        } else {\n          return {\n            result: OPERATION_RESULTS.PERMISSION_DENIED,\n            message: 'You do not have write access to this repository.',\n            target: SAVE_TARGETS.GITHUB\n          };\n        }\n      }\n\n      // For authenticated users with write access, save to GitHub\n      const result = await githubService.updateFileContent(\n        owner, \n        repo, \n        assetPath, \n        content, \n        commitMessage, \n        branch\n      );\n\n      if (result.success) {\n        // Remove from staging ground since it's now committed\n        stagingGroundService.removeFile(assetPath);\n        \n        // Clear cache\n        const cacheKey = `${owner}/${repo}/${branch}/${assetPath}`;\n        this.assetCache.delete(cacheKey);\n\n        this.logger.info('Asset saved to GitHub', { \n          owner, repo, branch, assetPath, commit: result.data?.commit?.sha \n        });\n\n        return {\n          result: OPERATION_RESULTS.SUCCESS,\n          message: 'Changes successfully committed to GitHub',\n          target: SAVE_TARGETS.GITHUB,\n          commitSha: result.data?.commit?.sha,\n          commitUrl: result.data?.commit?.html_url\n        };\n      } else {\n        throw new Error(result.error || 'GitHub commit failed');\n      }\n\n    } catch (error) {\n      this.logger.error('Error saving asset to GitHub', { \n        owner, repo, branch, assetPath, error: error.message \n      });\n      \n      return {\n        result: OPERATION_RESULTS.ERROR,\n        message: `Failed to save to GitHub: ${error.message}`,\n        target: SAVE_TARGETS.GITHUB\n      };\n    }\n  }\n\n  /**\n   * Get demo asset content for demo users\n   */\n  getDemoAssetContent(assetPath) {\n    const demoAssets = {\n      'input/vocabulary/ValueSet-anc-care-codes.json': JSON.stringify({\n        resourceType: \"ValueSet\",\n        id: \"anc-care-codes\",\n        name: \"ANCCareCodes\",\n        title: \"ANC Care Codes (Demo)\",\n        status: \"draft\",\n        description: \"Demo value set for antenatal care codes\",\n        compose: {\n          include: [{\n            system: \"http://example.org/anc-codes\",\n            concept: [\n              { code: \"anc-visit\", display: \"Antenatal Care Visit\" },\n              { code: \"anc-screening\", display: \"Antenatal Screening\" }\n            ]\n          }]\n        }\n      }, null, 2),\n      \n      'input/actors/Patient.json': JSON.stringify({\n        resourceType: \"ActorDefinition\",\n        id: \"patient\",\n        name: \"Patient\",\n        title: \"Patient (Demo)\",\n        status: \"draft\",\n        description: \"Demo patient actor definition\",\n        type: \"person\"\n      }, null, 2),\n\n      'README.md': `# Demo DAK Repository\n\nThis is a demo repository showing the structure of a SMART Guidelines DAK.\n\n## Components\n\n- **ValueSets**: Terminology definitions\n- **Actors**: System and person actors  \n- **Business Processes**: BPMN workflow definitions\n\nThis is demo data and cannot be saved to GitHub.`\n    };\n\n    return demoAssets[assetPath] || `# Demo Asset: ${assetPath}\n\nThis is demo content for the asset located at: ${assetPath}\n\nDemo users can edit this content and save it locally, but cannot commit changes to GitHub.`;\n  }\n\n  /**\n   * Get save options for current user and asset\n   */\n  async getSaveOptions(owner, repo, branch) {\n    const userType = userAccessService.getUserType();\n    const canSaveGitHub = await userAccessService.canSaveToGitHub(owner, repo, branch);\n    const canSaveLocal = userAccessService.canSaveLocal();\n    const uiBehavior = userAccessService.getUIBehavior();\n\n    return {\n      canSaveLocal,\n      canSaveGitHub,\n      showSaveLocal: uiBehavior.showSaveLocal,\n      showSaveGitHub: uiBehavior.showSaveToGitHub,\n      confirmBeforeSave: uiBehavior.confirmBeforeSave,\n      userType,\n      restrictions: this.getSaveRestrictions(userType, canSaveGitHub)\n    };\n  }\n\n  /**\n   * Get save restrictions and messaging for user type\n   */\n  getSaveRestrictions(userType, canSaveGitHub) {\n    switch (userType) {\n      case 'unauthenticated':\n        return {\n          localMessage: 'Changes will be saved to your browser only',\n          githubMessage: 'Please authenticate to save to GitHub',\n          githubDisabled: true\n        };\n      \n      case 'demo':\n        return {\n          localMessage: 'Changes will be saved to your browser only',\n          githubMessage: 'Demo users cannot save to GitHub',\n          githubDisabled: true\n        };\n      \n      case 'authenticated':\n        if (canSaveGitHub) {\n          return {\n            localMessage: 'Save changes to staging area',\n            githubMessage: 'Commit changes to GitHub repository',\n            githubDisabled: false\n          };\n        } else {\n          return {\n            localMessage: 'Changes will be saved to your browser only',\n            githubMessage: 'You do not have write access to this repository',\n            githubDisabled: true\n          };\n        }\n      \n      default:\n        return {\n          localMessage: 'Local saves only',\n          githubMessage: 'GitHub saves not available',\n          githubDisabled: true\n        };\n    }\n  }\n\n  /**\n   * Get staging ground status\n   */\n  getStagingGroundStatus() {\n    return stagingGroundService.getStatus();\n  }\n\n  /**\n   * Clear staging ground\n   */\n  clearStagingGround() {\n    return stagingGroundService.clearStagingGround();\n  }\n\n  /**\n   * Get changed files in staging ground\n   */\n  getChangedFiles() {\n    const stagingGround = stagingGroundService.getStagingGround();\n    return stagingGround.files;\n  }\n\n  /**\n   * Check if asset has local changes\n   */\n  hasLocalChanges(assetPath) {\n    const stagingGround = stagingGroundService.getStagingGround();\n    return stagingGround.files.some(f => f.path === assetPath);\n  }\n\n  /**\n   * Create new asset (when supported by user type)\n   */\n  async createAsset(owner, repo, branch, assetPath, initialContent = '', metadata = {}) {\n    const uiBehavior = userAccessService.getUIBehavior();\n    \n    if (!uiBehavior.allowCreateNew) {\n      throw new Error('Current user type cannot create new assets');\n    }\n\n    // Save as local first\n    return this.saveAssetLocal(assetPath, initialContent, {\n      ...metadata,\n      isNew: true,\n      createdAt: Date.now()\n    });\n  }\n\n  /**\n   * Batch operations for multiple assets\n   */\n  async batchSaveLocal(assets) {\n    const results = [];\n    \n    for (const asset of assets) {\n      const result = await this.saveAssetLocal(\n        asset.path, \n        asset.content, \n        asset.metadata\n      );\n      results.push({ ...result, path: asset.path });\n    }\n\n    return {\n      success: results.every(r => r.result === OPERATION_RESULTS.SUCCESS),\n      results\n    };\n  }\n\n  /**\n   * Get access information for current context\n   */\n  async getAccessInfo(owner, repo, branch) {\n    const [access, badge, saveOptions] = await Promise.all([\n      userAccessService.getRepositoryAccess(owner, repo, branch),\n      userAccessService.getAccessBadge(owner, repo, branch),\n      this.getSaveOptions(owner, repo, branch)\n    ]);\n\n    return {\n      access,\n      badge,\n      saveOptions,\n      userType: userAccessService.getUserType(),\n      isDemo: userAccessService.isDemoUser()\n    };\n  }\n}\n\n// Create singleton instance\nconst dataAccessLayer = new DataAccessLayer();\n\nexport default dataAccessLayer;","import React, { useState, useCallback, useEffect } from 'react';\nimport { PageLayout } from './index';\nimport SaveButtonsContainer from './SaveButtonsContainer';\nimport CommitMessageDialog from './CommitMessageDialog';\nimport dataAccessLayer from '../../services/dataAccessLayer';\nimport './AssetEditorLayout.css';\n\n/**\n * Enhanced page framework for asset editors\n * Provides consistent save functionality with user access integration\n */\nconst AssetEditorLayout = ({\n  children,\n  pageName,\n  // Asset information\n  file,\n  repository,\n  branch,\n  // Content management\n  content,\n  originalContent,\n  hasChanges = false,\n  // Save callbacks\n  onSave,\n  onContentChange,\n  // Custom save functions (for special cases like BPMN that need XML export)\n  customSaveToGitHub,\n  // UI customization\n  showSaveButtons = true,\n  saveButtonsPosition = 'top', // 'top', 'bottom', 'both'\n  ...pageLayoutProps\n}) => {\n  // Save states\n  const [isSavingLocal, setIsSavingLocal] = useState(false);\n  const [isSavingGitHub, setIsSavingGitHub] = useState(false);\n  const [saveError, setSaveError] = useState(null);\n  const [localSaveSuccess, setLocalSaveSuccess] = useState(false);\n  const [githubSaveSuccess, setGithubSaveSuccess] = useState(false);\n  const [saveOptions, setSaveOptions] = useState(null);\n  \n  // Commit dialog state\n  const [showCommitDialog, setShowCommitDialog] = useState(false);\n  const [commitMessage, setCommitMessage] = useState('');\n\n  // Load save options based on current user and repository\n  useEffect(() => {\n    const loadSaveOptions = async () => {\n      if (repository) {\n        try {\n          const options = await dataAccessLayer.getSaveOptions(\n            repository.owner?.login,\n            repository.name,\n            branch\n          );\n          setSaveOptions(options);\n        } catch (error) {\n          console.error('Error loading save options:', error);\n        }\n      }\n    };\n\n    loadSaveOptions();\n  }, [repository, branch]);\n\n  // Check if user can save to GitHub based on access service\n  const canSaveToGitHub = saveOptions?.canSaveGitHub && saveOptions?.showSaveGitHub;\n\n  // Handle local save\n  const handleSaveLocal = useCallback(async () => {\n    if (!hasChanges || !file?.path) return;\n\n    try {\n      setIsSavingLocal(true);\n      setSaveError(null);\n      setLocalSaveSuccess(false);\n\n      // Use data access layer for local save\n      const result = await dataAccessLayer.saveAssetLocal(file.path, content, {\n        repository: repository?.full_name || `${repository?.owner?.login}/${repository?.name}`,\n        branch: branch || repository?.default_branch || 'main',\n        fileName: file.name,\n        timestamp: new Date().toISOString()\n      });\n      \n      if (result.result === 'success') {\n        setLocalSaveSuccess(true);\n        onSave && onSave(content, 'local');\n        \n        // Auto-hide success message after 3 seconds\n        setTimeout(() => {\n          setLocalSaveSuccess(false);\n        }, 3000);\n      } else {\n        throw new Error(result.message || 'Failed to save to local storage');\n      }\n\n    } catch (error) {\n      console.error('Error saving file locally:', error);\n      setSaveError(`Failed to save locally: ${error.message}`);\n    } finally {\n      setIsSavingLocal(false);\n    }\n  }, [hasChanges, file, content, repository, branch, onSave]);\n\n  // Handle GitHub save - shows commit dialog\n  const handleSaveGitHub = useCallback(() => {\n    if (!hasChanges || !canSaveToGitHub) return;\n    \n    setSaveError(null);\n    setShowCommitDialog(true);\n  }, [hasChanges, canSaveToGitHub]);\n\n  // Handle commit to GitHub with message\n  const handleCommitToGitHub = useCallback(async (message) => {\n    if (!message.trim() || !file?.path) return;\n\n    try {\n      setIsSavingGitHub(true);\n      setSaveError(null);\n      setGithubSaveSuccess(false);\n\n      // Use custom save function if provided (for special cases like BPMN)\n      if (customSaveToGitHub) {\n        const success = await customSaveToGitHub(message.trim());\n        if (success) {\n          setGithubSaveSuccess(true);\n          setShowCommitDialog(false);\n          setCommitMessage('');\n          onSave && onSave(content, 'github');\n          \n          // Auto-hide success message after 3 seconds\n          setTimeout(() => {\n            setGithubSaveSuccess(false);\n          }, 3000);\n        } else {\n          throw new Error('Custom save function failed');\n        }\n        return;\n      }\n\n      // Use data access layer for GitHub save\n      const result = await dataAccessLayer.saveAssetGitHub(\n        repository?.owner?.login,\n        repository?.name,\n        branch,\n        file.path,\n        content,\n        message.trim()\n      );\n\n      if (result.result === 'success') {\n        setGithubSaveSuccess(true);\n        setShowCommitDialog(false);\n        setCommitMessage('');\n        onSave && onSave(content, 'github');\n        \n        // Auto-hide success message after 3 seconds\n        setTimeout(() => {\n          setGithubSaveSuccess(false);\n        }, 3000);\n      } else {\n        // Handle different result types\n        let errorMessage = result.message;\n        if (result.result === 'demo_mode_blocked') {\n          errorMessage = 'Demo users cannot save to GitHub. You can save changes locally instead.';\n        } else if (result.result === 'permission_denied') {\n          errorMessage = 'You do not have permission to save to this repository.';\n        }\n        throw new Error(errorMessage);\n      }\n\n    } catch (error) {\n      console.error('Error saving file to GitHub:', error);\n      setSaveError(`Failed to save to GitHub: ${error.message}`);\n    } finally {\n      setIsSavingGitHub(false);\n    }\n  }, [file, content, repository, branch, onSave, customSaveToGitHub]);\n\n  // Handle commit dialog cancel\n  const handleCancelCommit = useCallback(() => {\n    setShowCommitDialog(false);\n    setCommitMessage('');\n  }, []);\n\n  const saveButtonsProps = {\n    // States\n    hasChanges,\n    isSavingLocal,\n    isSavingGitHub,\n    canSaveToGitHub,\n    localSaveSuccess,\n    githubSaveSuccess,\n    \n    // Handlers\n    onSaveLocal: handleSaveLocal,\n    onSaveGitHub: handleSaveGitHub\n  };\n\n  return (\n    <PageLayout pageName={pageName} {...pageLayoutProps}>\n      <div className=\"asset-editor-layout\">\n        {/* Top save buttons */}\n        {showSaveButtons && (saveButtonsPosition === 'top' || saveButtonsPosition === 'both') && (\n          <div className=\"save-buttons-top\">\n            <SaveButtonsContainer {...saveButtonsProps} />\n          </div>\n        )}\n\n        {/* Error display */}\n        {saveError && (\n          <div className=\"asset-editor-error\">\n            <span className=\"error-icon\">⚠️</span>\n            {saveError}\n            <button \n              className=\"btn-link error-dismiss\"\n              onClick={() => setSaveError(null)}\n            >\n              ✕\n            </button>\n          </div>\n        )}\n\n        {/* Success messages */}\n        {localSaveSuccess && (\n          <div className=\"asset-editor-success\">\n            <span className=\"success-icon\">✅</span>\n            Changes saved locally successfully!\n          </div>\n        )}\n        \n        {githubSaveSuccess && (\n          <div className=\"asset-editor-success\">\n            <span className=\"success-icon\">✅</span>\n            Changes committed to GitHub successfully!\n          </div>\n        )}\n\n        {/* Main content area */}\n        <div className=\"asset-editor-content\">\n          {children}\n        </div>\n\n        {/* Bottom save buttons */}\n        {showSaveButtons && (saveButtonsPosition === 'bottom' || saveButtonsPosition === 'both') && (\n          <div className=\"save-buttons-bottom\">\n            <SaveButtonsContainer {...saveButtonsProps} />\n          </div>\n        )}\n\n        {/* Commit message dialog */}\n        {showCommitDialog && (\n          <CommitMessageDialog\n            isOpen={showCommitDialog}\n            commitMessage={commitMessage}\n            setCommitMessage={setCommitMessage}\n            onCommit={handleCommitToGitHub}\n            onCancel={handleCancelCommit}\n            isSaving={isSavingGitHub}\n            fileName={file?.name}\n          />\n        )}\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default AssetEditorLayout;","import { useState, useCallback, useEffect } from 'react';\nimport githubService from '../../services/githubService';\nimport localStorageService from '../../services/localStorageService';\n\n/**\n * Hook for managing asset editor save state and operations\n * Provides consistent save functionality for asset editors\n */\nexport const useAssetSave = ({\n  file,\n  repository,\n  branch,\n  content,\n  originalContent,\n  isDemo = false,\n  onSave\n}) => {\n  // Save states\n  const [isSavingLocal, setIsSavingLocal] = useState(false);\n  const [isSavingGitHub, setIsSavingGitHub] = useState(false);\n  const [saveError, setSaveError] = useState(null);\n  const [savedLocally, setSavedLocally] = useState(false);\n  const [localSaveSuccess, setLocalSaveSuccess] = useState(false);\n  const [githubSaveSuccess, setGithubSaveSuccess] = useState(false);\n\n  // Derived states\n  const hasChanges = content !== originalContent;\n  const canSaveToGitHub = githubService.isAuth() && !isDemo;\n\n  // Check if there's a local version of this file\n  useEffect(() => {\n    if (file?.path) {\n      const localContent = localStorageService.getLocalContent(file.path);\n      if (localContent && localContent !== originalContent) {\n        setSavedLocally(true);\n      } else {\n        setSavedLocally(false);\n      }\n    }\n  }, [file?.path, originalContent]);\n\n  // Reset success states when content changes\n  useEffect(() => {\n    if (hasChanges) {\n      setLocalSaveSuccess(false);\n      setGithubSaveSuccess(false);\n      setSaveError(null);\n    }\n  }, [hasChanges]);\n\n  // Handle local save\n  const saveLocal = useCallback(async () => {\n    if (!hasChanges || !file?.path) return false;\n\n    try {\n      setIsSavingLocal(true);\n      setSaveError(null);\n      setLocalSaveSuccess(false);\n\n      // Save to local storage\n      const metadata = {\n        repository: repository?.full_name || `${repository?.owner?.login}/${repository?.name}`,\n        branch: branch || repository?.default_branch || 'main',\n        fileName: file.name,\n        timestamp: new Date().toISOString()\n      };\n\n      const saved = localStorageService.saveLocal(file.path, content, metadata);\n      \n      if (saved) {\n        setSavedLocally(true);\n        setLocalSaveSuccess(true);\n        onSave && onSave(content, 'local');\n        \n        // Auto-hide success message after 3 seconds\n        setTimeout(() => {\n          setLocalSaveSuccess(false);\n        }, 3000);\n        \n        return true;\n      } else {\n        throw new Error('Failed to save to local storage');\n      }\n\n    } catch (error) {\n      console.error('Error saving file locally:', error);\n      setSaveError(`Failed to save locally: ${error.message}`);\n      return false;\n    } finally {\n      setIsSavingLocal(false);\n    }\n  }, [hasChanges, file, content, repository, branch, onSave]);\n\n  // Handle GitHub save with commit message\n  const saveToGitHub = useCallback(async (commitMessage) => {\n    if (!commitMessage?.trim() || !file?.path || !canSaveToGitHub) return false;\n\n    try {\n      setIsSavingGitHub(true);\n      setSaveError(null);\n      setGithubSaveSuccess(false);\n\n      let owner, repoName;\n      if (repository?.owner?.login) {\n        owner = repository.owner.login;\n        repoName = repository.name;\n      } else if (repository?.full_name) {\n        [owner, repoName] = repository.full_name.split('/');\n      } else {\n        throw new Error('Repository information not available');\n      }\n\n      await githubService.updateFile(\n        owner,\n        repoName,\n        file.path,\n        content,\n        commitMessage.trim(),\n        branch || repository?.default_branch || 'main'\n      );\n\n      setGithubSaveSuccess(true);\n      onSave && onSave(content, 'github');\n      \n      // Auto-hide success message after 3 seconds\n      setTimeout(() => {\n        setGithubSaveSuccess(false);\n      }, 3000);\n      \n      return true;\n\n    } catch (error) {\n      console.error('Error saving file to GitHub:', error);\n      setSaveError(`Failed to save to GitHub: ${error.message}`);\n      return false;\n    } finally {\n      setIsSavingGitHub(false);\n    }\n  }, [file, content, repository, branch, canSaveToGitHub, onSave]);\n\n  // Load local version of file\n  const loadLocalVersion = useCallback(() => {\n    if (file?.path) {\n      const localContent = localStorageService.getLocalContent(file.path);\n      return localContent;\n    }\n    return null;\n  }, [file?.path]);\n\n  // Discard local version\n  const discardLocalVersion = useCallback(() => {\n    if (file?.path) {\n      localStorageService.removeLocal(file.path);\n      setSavedLocally(false);\n      return true;\n    }\n    return false;\n  }, [file?.path]);\n\n  // Clear save error\n  const clearError = useCallback(() => {\n    setSaveError(null);\n  }, []);\n\n  // Export local changes\n  const exportLocalChanges = useCallback(() => {\n    try {\n      const exportData = localStorageService.exportLocalChanges('json');\n      const url = URL.createObjectURL(exportData);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `sgex-local-changes-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      return true;\n    } catch (error) {\n      console.error('Error exporting local changes:', error);\n      setSaveError(`Failed to export: ${error.message}`);\n      return false;\n    }\n  }, []);\n\n  return {\n    // States\n    hasChanges,\n    isSavingLocal,\n    isSavingGitHub,\n    saveError,\n    savedLocally,\n    localSaveSuccess,\n    githubSaveSuccess,\n    canSaveToGitHub,\n    \n    // Actions\n    saveLocal,\n    saveToGitHub,\n    loadLocalVersion,\n    discardLocalVersion,\n    clearError,\n    exportLocalChanges,\n    \n    // Utilities\n    isLoading: isSavingLocal || isSavingGitHub\n  };\n};","/**\n * Tool Definition Framework\n * \n * Provides a simple API for creating new tools in the SGEX Workbench.\n * Handles page setup, user access, data management, and UI integration.\n */\n\nimport React from 'react';\nimport { PageLayout, AssetEditorLayout } from './index';\nimport { usePageParams } from './usePageParams';\nimport userAccessService from '../../services/userAccessService';\nimport dataAccessLayer from '../../services/dataAccessLayer';\n\n/**\n * Tool types supported by the framework\n */\nexport const TOOL_TYPES = {\n  VIEWER: 'viewer',        // Read-only asset viewer\n  EDITOR: 'editor',        // Asset editor with save capabilities\n  DASHBOARD: 'dashboard',  // DAK-level dashboard\n  UTILITY: 'utility'       // General utility tool\n};\n\n/**\n * Base tool definition interface\n */\nexport class ToolDefinition {\n  constructor(config) {\n    this.id = config.id;\n    this.name = config.name;\n    this.title = config.title || config.name;\n    this.description = config.description;\n    this.type = config.type || TOOL_TYPES.UTILITY;\n    this.route = config.route || `/${this.id}`;\n    this.icon = config.icon;\n    this.category = config.category || 'general';\n    \n    // Access requirements\n    this.requiresAuth = config.requiresAuth !== false; // Default to true\n    this.supportsDemo = config.supportsDemo !== false; // Default to true\n    this.requiresDAK = config.requiresDAK || false;\n    \n    // Asset handling\n    this.assetTypes = config.assetTypes || [];\n    this.assetPattern = config.assetPattern;\n    \n    // UI components\n    this.viewerComponent = config.viewerComponent;\n    this.editorComponent = config.editorComponent;\n    this.dashboardComponent = config.dashboardComponent;\n    \n    // Hooks\n    this.onInit = config.onInit;\n    this.onAssetLoad = config.onAssetLoad;\n    this.onAssetSave = config.onAssetSave;\n    this.onError = config.onError;\n  }\n\n  /**\n   * Check if tool supports the given asset type\n   */\n  supportsAsset(assetPath) {\n    if (!this.assetTypes?.length && !this.assetPattern) {\n      return true; // Tool accepts any asset\n    }\n    \n    if (this.assetPattern) {\n      return new RegExp(this.assetPattern).test(assetPath);\n    }\n    \n    return this.assetTypes.some(type => assetPath.includes(type));\n  }\n\n  /**\n   * Check if current user can access this tool\n   */\n  async canAccess() {\n    if (this.requiresAuth && userAccessService.isUnauthenticated()) {\n      return false;\n    }\n    \n    if (!this.supportsDemo && userAccessService.isDemoUser()) {\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Generate React component for this tool\n   */\n  createComponent() {\n    const toolDef = this;\n    \n    return function ToolComponent(props) {\n      return <ToolWrapper toolDefinition={toolDef} {...props} />;\n    };\n  }\n}\n\n/**\n * Wrapper component that handles framework integration\n */\nconst ToolWrapper = ({ toolDefinition, ...props }) => {\n  const pageParams = usePageParams();\n  const [toolState, setToolState] = React.useState({\n    loading: true,\n    error: null,\n    canAccess: false,\n    assets: [],\n    content: null\n  });\n\n  const initializeTool = React.useCallback(async () => {\n    try {\n      setToolState(prev => ({ ...prev, loading: true, error: null }));\n\n      // Check access\n      const canAccess = await toolDefinition.canAccess();\n      if (!canAccess) {\n        throw new Error(`Access denied: This tool requires ${toolDefinition.requiresAuth ? 'authentication' : 'different user type'}`);\n      }\n\n      // Initialize data access layer if needed\n      if (pageParams.repository) {\n        await dataAccessLayer.initialize(pageParams.repository, pageParams.branch);\n      }\n\n      // Load assets if this is an asset tool\n      let assets = [];\n      let content = null;\n      \n      if (pageParams.asset && (toolDefinition.type === TOOL_TYPES.VIEWER || toolDefinition.type === TOOL_TYPES.EDITOR)) {\n        if (toolDefinition.supportsAsset(pageParams.asset)) {\n          const assetData = await dataAccessLayer.getAsset(\n            pageParams.user,\n            pageParams.repository?.name,\n            pageParams.branch,\n            pageParams.asset\n          );\n          assets = [{ path: pageParams.asset, ...assetData }];\n          content = assetData.content;\n        } else {\n          throw new Error(`This tool does not support asset type: ${pageParams.asset}`);\n        }\n      }\n\n      // Call tool's initialization hook\n      if (toolDefinition.onInit) {\n        await toolDefinition.onInit({\n          pageParams,\n          assets,\n          content\n        });\n      }\n\n      setToolState({\n        loading: false,\n        error: null,\n        canAccess: true,\n        assets,\n        content\n      });\n\n    } catch (error) {\n      console.error(`Error initializing tool ${toolDefinition.id}:`, error);\n      setToolState({\n        loading: false,\n        error: error.message,\n        canAccess: false,\n        assets: [],\n        content: null\n      });\n\n      // Call tool's error hook\n      if (toolDefinition.onError) {\n        toolDefinition.onError(error, { pageParams });\n      }\n    }\n  }, [toolDefinition, pageParams]);\n\n  React.useEffect(() => {\n    initializeTool();\n  }, [initializeTool]);\n\n  const handleAssetSave = async (newContent, saveType) => {\n    if (!pageParams.asset) return;\n\n    try {\n      let result;\n      if (saveType === 'local') {\n        result = await dataAccessLayer.saveAssetLocal(pageParams.asset, newContent);\n      } else if (saveType === 'github') {\n        // This should be called with commit message from UI\n        throw new Error('GitHub save requires commit message - use handleGitHubSave instead');\n      }\n\n      // Call tool's save hook\n      if (toolDefinition.onAssetSave) {\n        await toolDefinition.onAssetSave({\n          asset: pageParams.asset,\n          content: newContent,\n          saveType,\n          result,\n          pageParams\n        });\n      }\n\n      return result;\n    } catch (error) {\n      console.error(`Error saving asset in tool ${toolDefinition.id}:`, error);\n      throw error;\n    }\n  };\n\n  const handleGitHubSave = async (newContent, commitMessage) => {\n    if (!pageParams.asset) return;\n\n    try {\n      const result = await dataAccessLayer.saveAssetGitHub(\n        pageParams.user,\n        pageParams.repository?.name,\n        pageParams.branch,\n        pageParams.asset,\n        newContent,\n        commitMessage\n      );\n\n      // Call tool's save hook\n      if (toolDefinition.onAssetSave) {\n        await toolDefinition.onAssetSave({\n          asset: pageParams.asset,\n          content: newContent,\n          saveType: 'github',\n          result,\n          commitMessage,\n          pageParams\n        });\n      }\n\n      return result;\n    } catch (error) {\n      console.error(`Error saving asset to GitHub in tool ${toolDefinition.id}:`, error);\n      throw error;\n    }\n  };\n\n  // Show loading state\n  if (toolState.loading) {\n    return (\n      <PageLayout pageName={toolDefinition.id}>\n        <div className=\"tool-loading\">\n          <h2>Loading {toolDefinition.title}...</h2>\n          <p>Initializing tool and checking access permissions.</p>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  // Show error state\n  if (toolState.error || !toolState.canAccess) {\n    return (\n      <PageLayout pageName={toolDefinition.id}>\n        <div className=\"tool-error\">\n          <h2>Cannot Access {toolDefinition.title}</h2>\n          <p>{toolState.error || 'Access denied'}</p>\n          <button onClick={() => window.history.back()}>\n            Go Back\n          </button>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  // Render appropriate component based on tool type\n  const renderToolContent = () => {\n    const commonProps = {\n      toolDefinition,\n      pageParams,\n      toolState,\n      onAssetSave: handleAssetSave,\n      onGitHubSave: handleGitHubSave,\n      ...props\n    };\n\n    switch (toolDefinition.type) {\n      case TOOL_TYPES.EDITOR:\n        if (toolDefinition.editorComponent) {\n          const EditorComponent = toolDefinition.editorComponent;\n          \n          if (pageParams.asset && toolState.assets.length > 0) {\n            // Use AssetEditorLayout for asset editors\n            return (\n              <AssetEditorLayout\n                pageName={toolDefinition.id}\n                file={{ name: pageParams.asset, path: pageParams.asset }}\n                repository={pageParams.repository}\n                branch={pageParams.branch}\n                content={toolState.content}\n                originalContent={toolState.assets[0]?.content}\n                hasChanges={false} // Will be managed by the editor component\n                onSave={handleAssetSave}\n                onContentChange={(content) => {\n                  setToolState(prev => ({ ...prev, content }));\n                }}\n              >\n                <EditorComponent {...commonProps} />\n              </AssetEditorLayout>\n            );\n          } else {\n            // General editor without specific asset\n            return (\n              <PageLayout pageName={toolDefinition.id}>\n                <EditorComponent {...commonProps} />\n              </PageLayout>\n            );\n          }\n        }\n        break;\n\n      case TOOL_TYPES.VIEWER:\n        if (toolDefinition.viewerComponent) {\n          const ViewerComponent = toolDefinition.viewerComponent;\n          return (\n            <PageLayout pageName={toolDefinition.id}>\n              <ViewerComponent {...commonProps} />\n            </PageLayout>\n          );\n        }\n        break;\n\n      case TOOL_TYPES.DASHBOARD:\n        if (toolDefinition.dashboardComponent) {\n          const DashboardComponent = toolDefinition.dashboardComponent;\n          return (\n            <PageLayout pageName={toolDefinition.id}>\n              <DashboardComponent {...commonProps} />\n            </PageLayout>\n          );\n        }\n        break;\n\n      case TOOL_TYPES.UTILITY:\n      default:\n        // Use viewer component as fallback, or dashboard component\n        const Component = toolDefinition.viewerComponent || \n                         toolDefinition.editorComponent || \n                         toolDefinition.dashboardComponent;\n        \n        if (Component) {\n          return (\n            <PageLayout pageName={toolDefinition.id}>\n              <Component {...commonProps} />\n            </PageLayout>\n          );\n        }\n        break;\n    }\n\n    // Fallback if no component is provided\n    return (\n      <PageLayout pageName={toolDefinition.id}>\n        <div className=\"tool-fallback\">\n          <h1>{toolDefinition.title}</h1>\n          <p>{toolDefinition.description}</p>\n          <p>No component defined for this tool.</p>\n        </div>\n      </PageLayout>\n    );\n  };\n\n  return renderToolContent();\n};\n\n/**\n * Registry for managing tool definitions\n */\nclass ToolRegistry {\n  constructor() {\n    this.tools = new Map();\n  }\n\n  /**\n   * Register a new tool\n   */\n  register(config) {\n    const tool = new ToolDefinition(config);\n    this.tools.set(tool.id, tool);\n    return tool;\n  }\n\n  /**\n   * Get tool by ID\n   */\n  get(id) {\n    return this.tools.get(id);\n  }\n\n  /**\n   * Get all tools\n   */\n  getAll() {\n    return Array.from(this.tools.values());\n  }\n\n  /**\n   * Get tools by category\n   */\n  getByCategory(category) {\n    return this.getAll().filter(tool => tool.category === category);\n  }\n\n  /**\n   * Get tools that support a specific asset type\n   */\n  getByAssetType(assetPath) {\n    return this.getAll().filter(tool => tool.supportsAsset(assetPath));\n  }\n\n  /**\n   * Get tools accessible by current user\n   */\n  async getAccessibleTools() {\n    const tools = this.getAll();\n    const accessibleTools = [];\n\n    for (const tool of tools) {\n      if (await tool.canAccess()) {\n        accessibleTools.push(tool);\n      }\n    }\n\n    return accessibleTools;\n  }\n}\n\n// Create singleton registry\nconst toolRegistry = new ToolRegistry();\n\n/**\n * Helper function to create a simple tool\n */\nexport const createTool = (config) => {\n  return toolRegistry.register(config);\n};\n\n/**\n * Helper function to create an asset editor tool\n */\nexport const createAssetEditor = (config) => {\n  return createTool({\n    ...config,\n    type: TOOL_TYPES.EDITOR,\n    requiresDAK: true\n  });\n};\n\n/**\n * Helper function to create an asset viewer tool\n */\nexport const createAssetViewer = (config) => {\n  return createTool({\n    ...config,\n    type: TOOL_TYPES.VIEWER,\n    requiresDAK: true,\n    requiresAuth: false // Viewers can be used by unauthenticated users\n  });\n};\n\n/**\n * Helper function to create a dashboard tool\n */\nexport const createDashboard = (config) => {\n  return createTool({\n    ...config,\n    type: TOOL_TYPES.DASHBOARD,\n    requiresDAK: true\n  });\n};\n\nexport default toolRegistry;","/**\n * Service for managing feature file changes in browser localStorage\n * This allows users to edit and save feature files locally without requiring GitHub authentication\n */\n\nclass LocalStorageService {\n  constructor() {\n    this.storageKey = 'sgex_feature_files';\n    this.metadataKey = 'sgex_feature_files_metadata';\n  }\n\n  /**\n   * Get all locally stored feature file changes\n   * @returns {Object} Object with file paths as keys and content as values\n   */\n  getAllLocalChanges() {\n    try {\n      const data = localStorage.getItem(this.storageKey);\n      return data ? JSON.parse(data) : {};\n    } catch (error) {\n      console.error('Error reading local changes:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Get locally stored content for a specific file\n   * @param {string} filePath - The file path\n   * @returns {string|null} The stored content or null if not found\n   */\n  getLocalContent(filePath) {\n    const changes = this.getAllLocalChanges();\n    return changes[filePath] || null;\n  }\n\n  /**\n   * Save feature file content to localStorage\n   * @param {string} filePath - The file path\n   * @param {string} content - The file content\n   * @param {Object} metadata - Additional metadata (repository, branch, etc.)\n   */\n  saveLocal(filePath, content, metadata = {}) {\n    try {\n      // Save the content\n      const changes = this.getAllLocalChanges();\n      changes[filePath] = content;\n      localStorage.setItem(this.storageKey, JSON.stringify(changes));\n\n      // Save metadata\n      const allMetadata = this.getAllMetadata();\n      allMetadata[filePath] = {\n        ...metadata,\n        lastModified: new Date().toISOString(),\n        originalPath: filePath\n      };\n      localStorage.setItem(this.metadataKey, JSON.stringify(allMetadata));\n\n      return true;\n    } catch (error) {\n      console.error('Error saving to localStorage:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Remove locally stored content for a file\n   * @param {string} filePath - The file path\n   */\n  removeLocal(filePath) {\n    try {\n      const changes = this.getAllLocalChanges();\n      delete changes[filePath];\n      localStorage.setItem(this.storageKey, JSON.stringify(changes));\n\n      const metadata = this.getAllMetadata();\n      delete metadata[filePath];\n      localStorage.setItem(this.metadataKey, JSON.stringify(metadata));\n\n      return true;\n    } catch (error) {\n      console.error('Error removing from localStorage:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get metadata for all locally stored files\n   * @returns {Object} Metadata object\n   */\n  getAllMetadata() {\n    try {\n      const data = localStorage.getItem(this.metadataKey);\n      return data ? JSON.parse(data) : {};\n    } catch (error) {\n      console.error('Error reading metadata:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Get metadata for a specific file\n   * @param {string} filePath - The file path\n   * @returns {Object|null} The metadata or null if not found\n   */\n  getMetadata(filePath) {\n    const metadata = this.getAllMetadata();\n    return metadata[filePath] || null;\n  }\n\n  /**\n   * Check if there are any local changes\n   * @returns {boolean} True if there are local changes\n   */\n  hasLocalChanges() {\n    const changes = this.getAllLocalChanges();\n    return Object.keys(changes).length > 0;\n  }\n\n  /**\n   * Get the number of locally changed files\n   * @returns {number} Number of files with local changes\n   */\n  getLocalChangesCount() {\n    const changes = this.getAllLocalChanges();\n    return Object.keys(changes).length;\n  }\n\n  /**\n   * Export local changes as a downloadable file\n   * @param {string} format - Export format ('json' or 'zip')\n   * @returns {Blob} The export data as a Blob\n   */\n  exportLocalChanges(format = 'json') {\n    const changes = this.getAllLocalChanges();\n    const metadata = this.getAllMetadata();\n\n    if (format === 'json') {\n      const exportData = {\n        exported: new Date().toISOString(),\n        version: '1.0',\n        changes,\n        metadata\n      };\n      \n      return new Blob(\n        [JSON.stringify(exportData, null, 2)], \n        { type: 'application/json' }\n      );\n    }\n\n    // For future expansion - could support ZIP format with individual files\n    throw new Error(`Export format '${format}' not supported`);\n  }\n\n  /**\n   * Import local changes from exported data\n   * @param {string} jsonData - The exported JSON data\n   * @returns {boolean} True if import was successful\n   */\n  importLocalChanges(jsonData) {\n    try {\n      const importData = JSON.parse(jsonData);\n      \n      if (!importData.changes || !importData.metadata) {\n        throw new Error('Invalid import data format');\n      }\n\n      // Merge with existing data\n      const existingChanges = this.getAllLocalChanges();\n      const existingMetadata = this.getAllMetadata();\n\n      const mergedChanges = { ...existingChanges, ...importData.changes };\n      const mergedMetadata = { ...existingMetadata, ...importData.metadata };\n\n      localStorage.setItem(this.storageKey, JSON.stringify(mergedChanges));\n      localStorage.setItem(this.metadataKey, JSON.stringify(mergedMetadata));\n\n      return true;\n    } catch (error) {\n      console.error('Error importing local changes:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all local changes\n   */\n  clearAllLocalChanges() {\n    localStorage.removeItem(this.storageKey);\n    localStorage.removeItem(this.metadataKey);\n  }\n\n  /**\n   * Get storage usage information\n   * @returns {Object} Storage usage stats\n   */\n  getStorageInfo() {\n    const changes = this.getAllLocalChanges();\n    const metadata = this.getAllMetadata();\n    \n    const changesSize = JSON.stringify(changes).length;\n    const metadataSize = JSON.stringify(metadata).length;\n    const totalSize = changesSize + metadataSize;\n\n    return {\n      fileCount: Object.keys(changes).length,\n      totalSize,\n      changesSize,\n      metadataSize,\n      formattedSize: this.formatBytes(totalSize)\n    };\n  }\n\n  /**\n   * Format bytes into human readable string\n   * @param {number} bytes - Number of bytes\n   * @returns {string} Formatted string\n   */\n  formatBytes(bytes) {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n}\n\n// Create and export a singleton instance\nconst localStorageService = new LocalStorageService();\nexport default localStorageService;","/**\n * Service for managing DAK branch context in session storage\n * Stores selected branch per repository to maintain context during DAK editing\n */\n\nclass BranchContextService {\n  constructor() {\n    this.storageKey = 'sgex_branch_context';\n  }\n\n  // Get the storage key for a specific repository\n  getRepositoryKey(repository) {\n    if (!repository || !repository.name) return null;\n    const owner = repository.owner?.login || repository.full_name?.split('/')[0];\n    if (!owner) return null;\n    return `${owner}/${repository.name}`;\n  }\n\n  // Get the selected branch for a repository\n  getSelectedBranch(repository) {\n    if (!repository) return null;\n    \n    try {\n      const branchContext = this.getBranchContext();\n      const repoKey = this.getRepositoryKey(repository);\n      return branchContext[repoKey] || null;\n    } catch (error) {\n      console.warn('Failed to get branch context:', error);\n      return null;\n    }\n  }\n\n  // Set the selected branch for a repository\n  setSelectedBranch(repository, branch) {\n    if (!repository || !branch) return;\n\n    try {\n      const branchContext = this.getBranchContext();\n      const repoKey = this.getRepositoryKey(repository);\n      branchContext[repoKey] = branch;\n      this.setBranchContext(branchContext);\n    } catch (error) {\n      console.warn('Failed to set branch context:', error);\n    }\n  }\n\n  // Clear branch context for a specific repository\n  clearRepositoryBranch(repository) {\n    if (!repository) return;\n\n    try {\n      const branchContext = this.getBranchContext();\n      const repoKey = this.getRepositoryKey(repository);\n      delete branchContext[repoKey];\n      this.setBranchContext(branchContext);\n    } catch (error) {\n      console.warn('Failed to clear repository branch context:', error);\n    }\n  }\n\n  // Clear all branch context (e.g., on logout)\n  clearAllBranchContext() {\n    try {\n      sessionStorage.removeItem(this.storageKey);\n    } catch (error) {\n      console.warn('Failed to clear branch context:', error);\n    }\n  }\n\n  // Get all branch context from storage\n  getBranchContext() {\n    try {\n      const stored = sessionStorage.getItem(this.storageKey);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.warn('Failed to parse branch context from storage:', error);\n      return {};\n    }\n  }\n\n  // Set branch context to storage\n  setBranchContext(context) {\n    try {\n      sessionStorage.setItem(this.storageKey, JSON.stringify(context));\n    } catch (error) {\n      console.warn('Failed to save branch context to storage:', error);\n    }\n  }\n\n  // Get default branch name (prefer 'main' over 'master')\n  getDefaultBranchName(repository, availableBranches = []) {\n    if (!repository) return 'main';\n\n    // First try 'main'\n    if (availableBranches.some(b => b.name === 'main')) {\n      return 'main';\n    }\n\n    // Then try the repository's default branch\n    if (repository.default_branch && \n        availableBranches.some(b => b.name === repository.default_branch)) {\n      return repository.default_branch;\n    }\n\n    // Finally fall back to the first available branch or 'main'\n    return availableBranches.length > 0 ? availableBranches[0].name : 'main';\n  }\n\n  // Check if a branch context exists for a repository\n  hasBranchContext(repository) {\n    return this.getSelectedBranch(repository) !== null;\n  }\n\n  // Get a formatted display string for the current branch context\n  getBranchDisplayInfo(repository) {\n    const selectedBranch = this.getSelectedBranch(repository);\n    if (!selectedBranch) return null;\n\n    const isDefault = selectedBranch === (repository?.default_branch || 'main');\n    return {\n      branch: selectedBranch,\n      isDefault,\n      displayText: isDefault ? `${selectedBranch} (default)` : selectedBranch\n    };\n  }\n}\n\n// Create a singleton instance\nconst branchContextService = new BranchContextService();\n\nexport default branchContextService;","import yaml from 'js-yaml';\nimport githubService from './githubService';\n\n/**\n * Service for validating WHO SMART Guidelines Digital Adaptation Kit repositories\n * \n * A repository is considered a valid DAK if:\n * 1. It has a sushi-config.yaml file in the root\n * 2. The sushi-config.yaml contains a 'dependencies' section\n * 3. The dependencies section contains the key 'smart.who.int.base'\n */\nclass DAKValidationService {\n  /**\n   * Validates if a repository is a WHO SMART Guidelines Digital Adaptation Kit\n   * @param {string} owner - Repository owner (username or organization)\n   * @param {string} repo - Repository name\n   * @param {string} branch - Branch to check (defaults to 'main')\n   * @returns {Promise<boolean>} - True if repository is a valid DAK\n   */\n  async validateDAKRepository(owner, repo, branch = 'main') {\n    try {\n      // First, check if this is an existing GitHub repository\n      const repositoryExists = await this.checkRepositoryExists(owner, repo);\n      \n      // Try to fetch the sushi-config.yaml file from the repository root\n      const sushiConfigContent = await this.fetchSushiConfig(owner, repo, branch);\n      \n      if (!sushiConfigContent) {\n        // If no sushi-config.yaml but repository exists, still allow it\n        // This handles cases like litlfred/smart-ips-pilgrimage that exist but may not have full DAK structure\n        if (repositoryExists) {\n          console.log(`Repository ${owner}/${repo} exists on GitHub - allowing access even without sushi-config.yaml`);\n          return true;\n        }\n        console.log(`No sushi-config.yaml found in ${owner}/${repo} and repository doesn't exist`);\n        return false;\n      }\n\n      // Parse the YAML content\n      const config = yaml.load(sushiConfigContent);\n      \n      if (!config || typeof config !== 'object') {\n        // If YAML is invalid but repository exists, still allow it\n        if (repositoryExists) {\n          console.log(`Invalid YAML format in sushi-config.yaml for ${owner}/${repo} but repository exists - allowing access`);\n          return true;\n        }\n        console.log(`Invalid YAML format in sushi-config.yaml for ${owner}/${repo}`);\n        return false;\n      }\n\n      // Check if dependencies section exists\n      if (!config.dependencies || typeof config.dependencies !== 'object') {\n        // If no dependencies but repository exists, still allow it\n        if (repositoryExists) {\n          console.log(`No dependencies section found in sushi-config.yaml for ${owner}/${repo} but repository exists - allowing access`);\n          return true;\n        }\n        console.log(`No dependencies section found in sushi-config.yaml for ${owner}/${repo}`);\n        return false;\n      }\n\n      // Check if smart.who.int.base dependency exists\n      const hasSmartBase = 'smart.who.int.base' in config.dependencies;\n      \n      if (hasSmartBase) {\n        console.log(`Valid DAK repository found: ${owner}/${repo} (has smart.who.int.base dependency)`);\n        return true;\n      } else {\n        // If no smart.who.int.base dependency but repository exists, still allow it\n        if (repositoryExists) {\n          console.log(`Repository ${owner}/${repo} has sushi-config.yaml but missing smart.who.int.base dependency - allowing access since repository exists`);\n          return true;\n        }\n        console.log(`Repository ${owner}/${repo} has sushi-config.yaml but missing smart.who.int.base dependency`);\n        return false;\n      }\n\n    } catch (error) {\n      console.log(`Error validating DAK repository ${owner}/${repo}:`, error.message);\n      return false;\n    }\n  }\n\n  /**\n   * Checks if a repository exists on GitHub\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name\n   * @returns {Promise<boolean>} - True if repository exists\n   */\n  async checkRepositoryExists(owner, repo) {\n    try {\n      // Use the same approach as githubService - get the octokit instance\n      const octokit = githubService.isAuth() ? githubService.octokit : null;\n      \n      if (!octokit) {\n        // In unauthenticated mode, we can't reliably check repository existence\n        console.log(`Cannot check repository existence for ${owner}/${repo} - not authenticated`);\n        return false;\n      }\n\n      await octokit.rest.repos.get({\n        owner,\n        repo\n      });\n      \n      console.log(`Repository ${owner}/${repo} exists on GitHub`);\n      return true;\n    } catch (error) {\n      if (error.status === 404) {\n        console.log(`Repository ${owner}/${repo} does not exist on GitHub`);\n        return false;\n      }\n      // For other errors (like rate limiting, network issues, firewall blocks), \n      // we can't determine if the repository exists, so we'll be permissive\n      console.log(`Error checking repository existence for ${owner}/${repo}:`, error.message, '- assuming it might exist');\n      return true; // Changed from false to true for non-404 errors\n    }\n  }\n\n  /**\n   * Fetches the sushi-config.yaml file content from a repository\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name  \n   * @param {string} branch - Branch to check\n   * @returns {Promise<string|null>} - YAML content or null if not found\n   */\n  async fetchSushiConfig(owner, repo, branch = 'main') {\n    try {\n      // Use the same approach as githubService - get the octokit instance\n      const octokit = githubService.isAuth() ? githubService.octokit : null;\n      \n      if (!octokit) {\n        // In unauthenticated mode, we can't fetch file contents reliably\n        console.log(`Cannot fetch sushi-config.yaml for ${owner}/${repo} - not authenticated`);\n        return null;\n      }\n\n      // Try main branch first if no branch specified\n      const branchesToTry = branch === 'main' ? ['main', 'master'] : [branch];\n      \n      for (const branchName of branchesToTry) {\n        try {\n          const { data } = await octokit.rest.repos.getContent({\n            owner,\n            repo,\n            path: 'sushi-config.yaml',\n            ref: branchName\n          });\n          \n          if (data.type === 'file' && data.content) {\n            // Decode base64 content\n            const content = decodeURIComponent(escape(atob(data.content)));\n            console.log(`Found sushi-config.yaml in ${owner}/${repo} on branch ${branchName}`);\n            return content;\n          }\n        } catch (branchError) {\n          console.log(`sushi-config.yaml not found on branch ${branchName} for ${owner}/${repo}:`, branchError.status === 404 ? 'File not found' : branchError.message);\n          continue;\n        }\n      }\n      \n      return null;\n    } catch (error) {\n      console.log(`Error fetching sushi-config.yaml for ${owner}/${repo}:`, error.message);\n      return null;\n    }\n  }\n\n  /**\n   * Validates DAK repository in demo mode based on basic format\n   * A repository is valid if it has proper org/repo format. In demo mode,\n   * we cannot reliably fetch sushi-config.yaml due to authentication limitations,\n   * so we allow any repository that follows the basic org/repo pattern.\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name\n   * @returns {boolean} - True if repository has valid org/repo format\n   */\n  validateDemoDAKRepository(owner, repo) {\n    // Validate basic format: must look like org/repo\n    if (!owner || !repo || owner.includes('/') || repo.includes('/')) {\n      console.log(`Demo mode: Invalid repository format ${owner}/${repo}`);\n      return false;\n    }\n\n    // Basic validation for reasonable org and repo names\n    // Allow alphanumeric characters, hyphens, underscores, and dots\n    const validNamePattern = /^[a-zA-Z0-9._-]+$/;\n    \n    if (!validNamePattern.test(owner) || !validNamePattern.test(repo)) {\n      console.log(`Demo mode: Invalid characters in repository name ${owner}/${repo}`);\n      return false;\n    }\n\n    const fullName = `${owner}/${repo}`;\n    console.log(`Demo mode: ${fullName} accepted as valid DAK repository (proper org/repo format)`);\n    return true;\n  }\n}\n\nconst dakValidationService = new DAKValidationService();\n\nexport default dakValidationService;","/**\n * Utility for managing concurrent async operations with rate limiting\n */\n\n/**\n * Processes items concurrently with a specified concurrency limit\n * @param {Array} items - Items to process\n * @param {Function} processor - Async function to process each item\n * @param {Object} options - Options for concurrency control\n * @param {number} options.concurrency - Maximum concurrent operations (default: 5)\n * @param {Function} options.onProgress - Progress callback (current, total, item, result)\n * @param {Function} options.onItemComplete - Callback when item completes (item, result, error)\n * @param {Function} options.onItemStart - Callback when item starts processing (item, index)\n * @returns {Promise<Array>} Array of results (in original order)\n */\nexport async function processConcurrently(items, processor, options = {}) {\n  const {\n    concurrency = 5,\n    onProgress = null,\n    onItemComplete = null,\n    onItemStart = null\n  } = options;\n\n  if (!items || items.length === 0) {\n    return [];\n  }\n\n  const results = new Array(items.length);\n  const total = items.length;\n  let completed = 0;\n\n  // Create a queue of work items\n  const queue = items.map((item, index) => ({ item, index }));\n  \n  // Worker function that processes items from the queue\n  const worker = async () => {\n    while (queue.length > 0) {\n      const { item, index } = queue.shift();\n      \n      // Notify that processing is starting\n      if (onItemStart) {\n        onItemStart(item, index);\n      }\n      \n      try {\n        const result = await processor(item, index);\n        results[index] = result;\n        \n        completed++;\n        \n        // Call callbacks\n        if (onProgress) {\n          onProgress(completed, total, item, result);\n        }\n        if (onItemComplete) {\n          onItemComplete(item, result, null);\n        }\n      } catch (error) {\n        // Store error as result\n        results[index] = { error, item };\n        \n        completed++;\n        \n        // Call callbacks\n        if (onProgress) {\n          onProgress(completed, total, item, null);\n        }\n        if (onItemComplete) {\n          onItemComplete(item, null, error);\n        }\n      }\n    }\n  };\n\n  // Start worker promises (limited by concurrency)\n  const workers = Array(Math.min(concurrency, items.length))\n    .fill()\n    .map(() => worker());\n\n  // Wait for all workers to complete\n  await Promise.all(workers);\n\n  return results;\n}\n\n/**\n * Rate-limited function executor\n * Useful for API calls that need to respect rate limits\n */\nexport class RateLimiter {\n  constructor(requestsPerSecond = 5) {\n    this.requestsPerSecond = requestsPerSecond;\n    this.requests = [];\n    this.interval = 1000 / requestsPerSecond; // ms between requests\n  }\n\n  /**\n   * Execute a function with rate limiting\n   * @param {Function} fn - Function to execute\n   * @returns {Promise} Result of the function\n   */\n  async execute(fn) {\n    const now = Date.now();\n    \n    // Remove requests older than 1 second\n    this.requests = this.requests.filter(time => now - time < 1000);\n    \n    // If we're at the limit, wait\n    if (this.requests.length >= this.requestsPerSecond) {\n      const oldestRequest = Math.min(...this.requests);\n      const waitTime = 1000 - (now - oldestRequest) + 10; // Add 10ms buffer\n      if (waitTime > 0) {\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n      }\n    }\n    \n    // Record this request\n    this.requests.push(Date.now());\n    \n    // Execute the function\n    return await fn();\n  }\n}","/**\n * Simple in-memory cache for repository compatibility checks\n * Prevents redundant sushi-config.yaml downloads during scanning\n */\n\nclass RepositoryCompatibilityCache {\n  constructor(ttlMinutes = 30) {\n    this.cache = new Map();\n    this.ttl = ttlMinutes * 60 * 1000; // Convert to milliseconds\n  }\n\n  /**\n   * Generate cache key for a repository\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name\n   * @returns {string} Cache key\n   */\n  _getCacheKey(owner, repo) {\n    return `${owner}/${repo}`;\n  }\n\n  /**\n   * Check if cache entry is still valid\n   * @param {Object} entry - Cache entry\n   * @returns {boolean} True if valid\n   */\n  _isValid(entry) {\n    return Date.now() - entry.timestamp < this.ttl;\n  }\n\n  /**\n   * Get cached compatibility result\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name\n   * @returns {boolean|null} Cached result or null if not cached/expired\n   */\n  get(owner, repo) {\n    const key = this._getCacheKey(owner, repo);\n    const entry = this.cache.get(key);\n    \n    if (!entry) {\n      return null;\n    }\n    \n    if (!this._isValid(entry)) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    return entry.compatible;\n  }\n\n  /**\n   * Set cached compatibility result\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name\n   * @param {boolean} compatible - Whether repository is SMART guidelines compatible\n   */\n  set(owner, repo, compatible) {\n    const key = this._getCacheKey(owner, repo);\n    this.cache.set(key, {\n      compatible,\n      timestamp: Date.now()\n    });\n  }\n\n  /**\n   * Clear all cached entries\n   */\n  clear() {\n    this.cache.clear();\n  }\n\n  /**\n   * Clean up expired entries\n   */\n  cleanup() {\n    const now = Date.now();\n    for (const [key, entry] of this.cache.entries()) {\n      if (now - entry.timestamp >= this.ttl) {\n        this.cache.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Get cache statistics\n   * @returns {Object} Cache stats\n   */\n  getStats() {\n    this.cleanup();\n    return {\n      size: this.cache.size,\n      ttlMinutes: this.ttl / (60 * 1000),\n      entries: Array.from(this.cache.entries()).map(([key, entry]) => ({\n        repository: key,\n        compatible: entry.compatible,\n        ageMinutes: Math.round((Date.now() - entry.timestamp) / (60 * 1000))\n      }))\n    };\n  }\n}\n\n// Create a singleton instance\nconst repositoryCompatibilityCache = new RepositoryCompatibilityCache();\n\nexport default repositoryCompatibilityCache;","import { Octokit } from '@octokit/rest';\nimport { processConcurrently } from '../utils/concurrency';\nimport repositoryCompatibilityCache from '../utils/repositoryCompatibilityCache';\nimport logger from '../utils/logger';\n\nclass GitHubService {\n  constructor() {\n    this.octokit = null;\n    this.isAuthenticated = false;\n    this.permissions = null;\n    this.tokenType = null; // 'classic', 'fine-grained', or 'oauth'\n    this.logger = logger.getLogger('GitHubService');\n    this.logger.debug('GitHubService instance created');\n  }\n\n  // Initialize with a GitHub token (supports both OAuth and PAT tokens)\n  authenticate(token) {\n    const startTime = Date.now();\n    this.logger.auth('Starting authentication', { tokenProvided: !!token, tokenLength: token ? token.length : 0 });\n    \n    try {\n      this.octokit = new Octokit({\n        auth: token,\n      });\n      this.isAuthenticated = true;\n      \n      const duration = Date.now() - startTime;\n      this.logger.auth('Authentication successful', { duration });\n      this.logger.performance('GitHub authentication', duration);\n      \n      return true;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      this.logger.auth('Authentication failed', { error: error.message, duration });\n      console.error('Failed to authenticate with GitHub:', error);\n      this.isAuthenticated = false;\n      return false;\n    }\n  }\n\n  // Initialize with an existing Octokit instance (for OAuth flow)\n  authenticateWithOctokit(octokitInstance) {\n    this.logger.auth('Starting OAuth authentication with Octokit instance');\n    \n    try {\n      this.octokit = octokitInstance;\n      this.isAuthenticated = true;\n      this.tokenType = 'oauth';\n      \n      this.logger.auth('OAuth authentication successful', { tokenType: this.tokenType });\n      return true;\n    } catch (error) {\n      this.logger.auth('OAuth authentication failed', { error: error.message });\n      console.error('Failed to authenticate with Octokit instance:', error);\n      this.isAuthenticated = false;\n      return false;\n    }\n  }\n\n  // Check token permissions and type\n  async checkTokenPermissions() {\n    if (!this.isAuth()) {\n      const error = new Error('Not authenticated with GitHub');\n      this.logger.error('Token permission check failed - not authenticated');\n      throw error;\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', '/user', null);\n\n    try {\n      // Try to get token info to determine type and permissions\n      const response = await this.octokit.request('GET /user');\n      this.logger.apiResponse('GET', '/user', response.status, Date.now() - startTime);\n      \n      // Check if this is a fine-grained token by trying to access rate limit info\n      try {\n        const rateLimitStart = Date.now();\n        this.logger.apiCall('GET', '/rate_limit', null);\n        const rateLimit = await this.octokit.rest.rateLimit.get();\n        this.logger.apiResponse('GET', '/rate_limit', rateLimit.status, Date.now() - rateLimitStart);\n        \n        // Fine-grained tokens have different rate limit structure\n        this.tokenType = rateLimit.data.resources.core ? 'classic' : 'fine-grained';\n        this.logger.debug('Token type determined', { tokenType: this.tokenType, hasCore: !!rateLimit.data.resources.core });\n      } catch (rateLimitError) {\n        this.tokenType = 'unknown';\n        this.logger.warn('Could not determine token type from rate limit', { error: rateLimitError.message });\n      }\n\n      const permissions = {\n        type: this.tokenType,\n        user: response.data\n      };\n      \n      this.permissions = permissions;\n      this.logger.debug('Token permissions checked successfully', { \n        tokenType: this.tokenType, \n        username: response.data.login \n      });\n      \n      return permissions;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      this.logger.apiError('GET', '/user', error);\n      this.logger.performance('Token permission check (failed)', duration);\n      console.error('Failed to check token permissions:', error);\n      throw error;\n    }\n  }\n\n  // Check if we have write permissions for a specific repository\n  async checkRepositoryWritePermissions(owner, repo) {\n    if (!this.isAuth()) {\n      this.logger.warn('Cannot check repository write permissions - not authenticated', { owner, repo });\n      return false;\n    }\n\n    const startTime = Date.now();\n    this.logger.debug('Checking write permissions for repository', { owner, repo });\n\n    try {\n      // Get current user first\n      const currentUser = await this.getCurrentUser();\n      const username = currentUser.login;\n      \n      this.logger.apiCall('GET', `/repos/${owner}/${repo}/collaborators/${username}/permission`, null);\n      \n      // Try to get repository collaborator permissions\n      const { data } = await this.octokit.rest.repos.getCollaboratorPermissionLevel({\n        owner,\n        repo,\n        username\n      });\n      \n      const duration = Date.now() - startTime;\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/collaborators/${username}/permission`, 200, duration);\n      \n      const hasWriteAccess = ['write', 'admin'].includes(data.permission);\n      this.logger.debug('Repository write permissions checked', { \n        owner, \n        repo, \n        permission: data.permission, \n        hasWriteAccess \n      });\n      \n      return hasWriteAccess;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      this.logger.apiError('GET', `/repos/${owner}/${repo}/collaborators/*/permission`, error);\n      this.logger.performance('Repository write permission check (failed)', duration);\n      \n      // If we can't check permissions, assume we don't have write access\n      console.warn('Could not check repository write permissions:', error);\n      this.logger.warn('Assuming no write access due to permission check failure', { owner, repo, error: error.message });\n      return false;\n    }\n  }\n\n  // Alias method for backward compatibility - delegates to checkRepositoryWritePermissions\n  async checkRepositoryPermissions(owner, repo) {\n    return this.checkRepositoryWritePermissions(owner, repo);\n  }\n\n  // Check if authenticated\n  isAuth() {\n    return this.isAuthenticated && this.octokit !== null;\n  }\n\n  // Get current user data\n  async getCurrentUser() {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.users.getAuthenticated();\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch user data:', error);\n      throw error;\n    }\n  }\n\n  // Get user's organizations\n  async getUserOrganizations() {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.orgs.listForAuthenticatedUser();\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch organizations:', error);\n      throw error;\n    }\n  }\n\n  // Get specific organization data (public data, no auth required)\n  async getOrganization(orgLogin) {\n    try {\n      // Create a temporary Octokit instance for public API calls if we don't have one\n      const octokit = this.octokit || new Octokit();\n      \n      const { data } = await octokit.rest.orgs.get({\n        org: orgLogin\n      });\n      return data;\n    } catch (error) {\n      console.error(`Failed to fetch organization ${orgLogin}:`, error);\n      throw error;\n    }\n  }\n\n  // Get specific user data (public data, no auth required)\n  async getUser(username) {\n    try {\n      // Create a temporary Octokit instance for public API calls if we don't have one\n      const octokit = this.octokit || new Octokit();\n      \n      const { data } = await octokit.rest.users.getByUsername({\n        username\n      });\n      return data;\n    } catch (error) {\n      console.error(`Failed to fetch user ${username}:`, error);\n      throw error;\n    }\n  }\n\n  // Get WHO organization data with fresh avatar\n  async getWHOOrganization() {\n    try {\n      const whoData = await this.getOrganization('WorldHealthOrganization');\n      return {\n        id: whoData.id,\n        login: whoData.login,\n        display_name: whoData.name || 'World Health Organization',\n        description: whoData.description || 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n        avatar_url: whoData.avatar_url,\n        html_url: whoData.html_url,\n        type: 'Organization',\n        permissions: {\n          can_create_repositories: true,\n          can_create_private_repositories: true\n        },\n        plan: {\n          name: 'Organization',\n          private_repos: 'unlimited'\n        },\n        isWHO: true\n      };\n    } catch (error) {\n      console.warn('Could not fetch WHO organization data from API, using fallback:', error);\n      // Return hardcoded fallback data\n      return {\n        id: 'who-organization',\n        login: 'WorldHealthOrganization',\n        display_name: 'World Health Organization',\n        description: 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n        avatar_url: 'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',\n        html_url: 'https://github.com/WorldHealthOrganization',\n        type: 'Organization',\n        permissions: {\n          can_create_repositories: true,\n          can_create_private_repositories: true\n        },\n        plan: {\n          name: 'Organization',\n          private_repos: 'unlimited'\n        },\n        isWHO: true\n      };\n    }\n  }\n\n  // Get repositories for a user or organization (now filters by SMART Guidelines compatibility)\n  async getRepositories(owner, type = 'user', isDemo = false) {\n    // Handle demo mode - return demo repositories without requiring authentication\n    if (isDemo || owner === 'demo-user') {\n      return this.getDemoRepositories(owner);\n    }\n    \n    // Use the new SMART guidelines filtering method\n    return this.getSmartGuidelinesRepositories(owner, type);\n  }\n\n  // Get demo repositories for demo mode (no authentication required)\n  getDemoRepositories(owner) {\n    const demoRepos = [\n      {\n        id: 'demo-smart-anc',\n        name: 'smart-anc',\n        full_name: `${owner}/smart-anc`,\n        description: 'Demo SMART Guidelines Digital Adaptation Kit for Antenatal Care',\n        private: false,\n        owner: {\n          login: owner,\n          id: 'demo-owner',\n          avatar_url: `https://github.com/${owner}.png`,\n          type: 'User'\n        },\n        html_url: `https://github.com/${owner}/smart-anc`,\n        clone_url: `https://github.com/${owner}/smart-anc.git`,\n        language: 'FSH',\n        stargazers_count: 15,\n        forks_count: 3,\n        open_issues_count: 2,\n        topics: ['who', 'smart-guidelines', 'dak', 'antenatal-care', 'health'],\n        created_at: '2023-01-15T10:00:00Z',\n        updated_at: '2024-12-15T14:30:00Z',\n        pushed_at: '2024-12-15T14:30:00Z',\n        default_branch: 'main',\n        smart_guidelines_compatible: true,\n        isDemo: true\n      },\n      {\n        id: 'demo-smart-tb',\n        name: 'smart-tb',\n        full_name: `${owner}/smart-tb`,\n        description: 'Demo SMART Guidelines Digital Adaptation Kit for Tuberculosis Care',\n        private: false,\n        owner: {\n          login: owner,\n          id: 'demo-owner',\n          avatar_url: `https://github.com/${owner}.png`,\n          type: 'User'\n        },\n        html_url: `https://github.com/${owner}/smart-tb`,\n        clone_url: `https://github.com/${owner}/smart-tb.git`,\n        language: 'FSH',\n        stargazers_count: 8,\n        forks_count: 1,\n        open_issues_count: 0,\n        topics: ['who', 'smart-guidelines', 'dak', 'tuberculosis', 'health'],\n        created_at: '2023-03-20T15:00:00Z',\n        updated_at: '2024-11-30T09:15:00Z',\n        pushed_at: '2024-11-30T09:15:00Z',\n        default_branch: 'main',\n        smart_guidelines_compatible: true,\n        isDemo: true\n      },\n      {\n        id: 'demo-smart-ips-pilgrimage',\n        name: 'smart-ips-pilgrimage',\n        full_name: `${owner}/smart-ips-pilgrimage`,\n        description: 'Demo SMART Guidelines International Patient Summary for Pilgrimage',\n        private: false,\n        owner: {\n          login: owner,\n          id: 'demo-owner',\n          avatar_url: `https://github.com/${owner}.png`,\n          type: 'User'\n        },\n        html_url: `https://github.com/${owner}/smart-ips-pilgrimage`,\n        clone_url: `https://github.com/${owner}/smart-ips-pilgrimage.git`,\n        language: 'FSH',\n        stargazers_count: 12,\n        forks_count: 2,\n        open_issues_count: 1,\n        topics: ['who', 'smart-guidelines', 'dak', 'ips', 'pilgrimage', 'health'],\n        created_at: '2023-06-10T12:00:00Z',\n        updated_at: '2024-12-01T16:45:00Z',\n        pushed_at: '2024-12-01T16:45:00Z',\n        default_branch: 'main',\n        smart_guidelines_compatible: true,\n        isDemo: true\n      }\n    ];\n\n    return Promise.resolve(demoRepos);\n  }\n\n  // Check if a repository has sushi-config.yaml with smart.who.int.base dependency\n  async checkSmartGuidelinesCompatibility(owner, repo, retryCount = 2) {\n    if (!this.isAuth()) {\n      return false;\n    }\n\n    // Check cache first to prevent redundant downloads\n    const cachedResult = repositoryCompatibilityCache.get(owner, repo);\n    if (cachedResult !== null) {\n      return cachedResult;\n    }\n\n    try {\n      // Try to get sushi-config.yaml from the repository root\n      const { data } = await this.octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path: 'sushi-config.yaml',\n      });\n\n      if (data.type === 'file' && data.content) {\n        // Decode base64 content (browser-compatible)\n        const content = decodeURIComponent(escape(atob(data.content)));\n        \n        // Check if the content contains smart.who.int.base in dependencies\n        const isCompatible = content.includes('smart.who.int.base');\n        \n        // Cache the result\n        repositoryCompatibilityCache.set(owner, repo, isCompatible);\n        return isCompatible;\n      }\n      \n      // Cache negative result\n      repositoryCompatibilityCache.set(owner, repo, false);\n      return false;\n    } catch (error) {\n      // If it's a 404 (file not found), retry once more in case of temporary issues\n      if (error.status === 404 && retryCount > 0) {\n        console.warn(`File not found for ${owner}/${repo}, retrying... (${retryCount} attempts left)`);\n        // Use shorter delay in test environment\n        const delay = process.env.NODE_ENV === 'test' ? 10 : 1000;\n        await new Promise(resolve => setTimeout(resolve, delay));\n        return this.checkSmartGuidelinesCompatibility(owner, repo, retryCount - 1);\n      }\n      \n      // For any error (including rate limiting, network errors, or file not found after retries),\n      // strictly return false - no fallback logic\n      console.warn(`Failed to check ${owner}/${repo} for sushi-config.yaml with smart.who.int.base dependency:`, error.message);\n      \n      // Cache negative result\n      repositoryCompatibilityCache.set(owner, repo, false);\n      return false;\n    }\n  }\n\n\n\n  // Get repositories that are SMART guidelines compatible\n  async getSmartGuidelinesRepositories(owner, type = 'user') {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      let repositories = [];\n      let page = 1;\n      let hasMorePages = true;\n\n      // Fetch all repositories using pagination\n      while (hasMorePages) {\n        let response;\n        if (type === 'user') {\n          response = await this.octokit.rest.repos.listForUser({\n            username: owner,\n            sort: 'updated',\n            per_page: 100,\n            page: page,\n          });\n        } else {\n          response = await this.octokit.rest.repos.listForOrg({\n            org: owner,\n            sort: 'updated',\n            per_page: 100,\n            page: page,\n          });\n        }\n\n        repositories = repositories.concat(response.data);\n        \n        // Check if there are more pages\n        hasMorePages = response.data.length === 100;\n        page++;\n      }\n\n      // Check each repository for SMART guidelines compatibility\n      const smartGuidelinesRepos = [];\n      for (const repo of repositories) {\n        const isCompatible = await this.checkSmartGuidelinesCompatibility(repo.owner.login, repo.name);\n        if (isCompatible) {\n          smartGuidelinesRepos.push({\n            ...repo,\n            smart_guidelines_compatible: true\n          });\n        }\n      }\n\n      return smartGuidelinesRepos;\n    } catch (error) {\n      console.error('Failed to fetch SMART guidelines repositories:', error);\n      throw error;\n    }\n  }\n\n  // Get repositories with progressive scanning (for real-time updates)\n  async getSmartGuidelinesRepositoriesProgressive(owner, type = 'user', onRepositoryFound = null, onProgress = null) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      let repositories = [];\n      let page = 1;\n      let hasMorePages = true;\n\n      // Fetch all repositories using pagination\n      while (hasMorePages) {\n        let response;\n        if (type === 'user') {\n          response = await this.octokit.rest.repos.listForUser({\n            username: owner,\n            sort: 'updated',\n            per_page: 100,\n            page: page,\n          });\n        } else {\n          response = await this.octokit.rest.repos.listForOrg({\n            org: owner,\n            sort: 'updated',\n            per_page: 100,\n            page: page,\n          });\n        }\n\n        repositories = repositories.concat(response.data);\n        \n        // Check if there are more pages\n        hasMorePages = response.data.length === 100;\n        page++;\n      }\n\n      // Handle case where user has no repositories\n      if (repositories.length === 0) {\n        console.log('📊 No repositories found for user, completing scan immediately');\n        // Call progress callback to indicate completion\n        if (onProgress) {\n          onProgress({\n            current: 0,\n            total: 0,\n            currentRepo: 'none',\n            progress: 100,\n            completed: true\n          });\n        }\n        return [];\n      }\n\n      // Process repositories concurrently with rate limiting and enhanced display\n      const processor = async (repo, index) => {\n        // Add a small delay to make scanning progress visible (similar to demo mode)\n        await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));\n        \n        const isCompatible = await this.checkSmartGuidelinesCompatibility(repo.owner.login, repo.name);\n        \n        if (isCompatible) {\n          const smartRepo = {\n            ...repo,\n            smart_guidelines_compatible: true\n          };\n          \n          // Notify that a repository was found\n          if (onRepositoryFound) {\n            onRepositoryFound(smartRepo);\n          }\n          \n          return smartRepo;\n        }\n        \n        return null;\n      };\n\n      // Use concurrent processing with max 5 parallel requests\n      const results = await processConcurrently(repositories, processor, {\n        concurrency: 5,\n        onProgress: (completed, total, repo, result) => {\n          // Progress callback for completed items\n          if (onProgress) {\n            onProgress({\n              current: completed,\n              total: total,\n              currentRepo: repo.name,\n              progress: Math.round((completed / total) * 100),\n              completed: true\n            });\n          }\n        },\n        onItemStart: (repo, index) => {\n          // Progress callback for started items\n          if (onProgress) {\n            onProgress({\n              current: index + 1,\n              total: repositories.length,\n              currentRepo: repo.name,\n              progress: Math.round(((index + 1) / repositories.length) * 100),\n              completed: false,\n              started: true\n            });\n          }\n        }\n      });\n\n      // Filter out null results and collect smart repositories\n      const validResults = results.filter(result => result !== null && !result.error);\n      \n      return validResults;\n    } catch (error) {\n      console.error('Failed to fetch SMART guidelines repositories:', error);\n      throw error;\n    }\n  }\n\n  // Get a specific repository\n  async getRepository(owner, repo) {\n    try {\n      // Use authenticated octokit if available, otherwise create a public instance for public repos\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const { data } = await octokit.rest.repos.get({\n        owner,\n        repo,\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch repository:', error);\n      throw error;\n    }  \n  }\n\n  // Get repository branches\n  async getBranches(owner, repo) {\n    try {\n      console.log(`githubService.getBranches: Fetching branches for ${owner}/${repo}`);\n      console.log('githubService.getBranches: Authentication status:', this.isAuth());\n      \n      // Use authenticated octokit if available, otherwise create a public instance for public repos\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      console.log('githubService.getBranches: Using', this.isAuth() ? 'authenticated' : 'public', 'octokit instance');\n      \n      const { data } = await octokit.rest.repos.listBranches({\n        owner,\n        repo,\n        per_page: 100\n      });\n      \n      console.log(`githubService.getBranches: Successfully fetched ${data.length} branches`);\n      return data;\n    } catch (error) {\n      console.error('githubService.getBranches: Failed to fetch branches:', error);\n      console.error('githubService.getBranches: Error details:', {\n        status: error.status,\n        message: error.message,\n        owner,\n        repo\n      });\n      throw error;\n    }\n  }\n\n  // Create a new branch\n  async createBranch(owner, repo, branchName, fromBranch = 'main') {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      // First get the SHA of the source branch\n      const { data: refData } = await this.octokit.rest.git.getRef({\n        owner,\n        repo,\n        ref: `heads/${fromBranch}`\n      });\n\n      // Create the new branch\n      const { data } = await this.octokit.rest.git.createRef({\n        owner,\n        repo,\n        ref: `refs/heads/${branchName}`,\n        sha: refData.object.sha\n      });\n\n      return data;\n    } catch (error) {\n      console.error('Failed to create branch:', error);\n      throw error;\n    }\n  }\n\n  // Get a specific branch\n  async getBranch(owner, repo, branch) {\n    try {\n      // Use authenticated octokit if available, otherwise create a public instance for public repos\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const { data } = await octokit.rest.repos.getBranch({\n        owner,\n        repo,\n        branch\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch branch:', error);\n      throw error;\n    }\n  }\n\n  // GitHub Actions API methods\n  \n  // Get workflows for a repository (detailed version with file parsing)\n  async getWorkflows(owner, repo) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      // First, try to get the .github/workflows directory\n      const { data } = await this.octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path: '.github/workflows'\n      });\n\n      // Filter for YAML/YML files\n      const workflowFiles = Array.isArray(data) \n        ? data.filter(file => file.name.endsWith('.yml') || file.name.endsWith('.yaml'))\n        : [];\n\n      // Fetch workflow details for each file\n      const workflows = await Promise.all(\n        workflowFiles.map(async (file) => {\n          try {\n            // Get file content to parse workflow name\n            const contentResponse = await this.octokit.rest.repos.getContent({\n              owner,\n              repo,\n              path: file.path\n            });\n\n            const content = decodeURIComponent(escape(atob(contentResponse.data.content)));\n            \n            // Parse workflow name from YAML (simple regex approach)\n            const nameMatch = content.match(/^name:\\s*(.+)$/m);\n            const workflowName = nameMatch ? nameMatch[1].replace(/['\"]/g, '') : file.name.replace(/\\.(yml|yaml)$/, '');\n\n            // Parse triggers\n            const onMatch = content.match(/^on:\\s*$/m);\n            let triggers = [];\n            if (onMatch) {\n              const pushMatch = content.match(/^\\s*push:/m);\n              const prMatch = content.match(/^\\s*pull_request:/m);\n              const scheduleMatch = content.match(/^\\s*schedule:/m);\n              const workflowDispatchMatch = content.match(/^\\s*workflow_dispatch:/m);\n              \n              if (pushMatch) triggers.push('push');\n              if (prMatch) triggers.push('pull_request');\n              if (scheduleMatch) triggers.push('schedule');\n              if (workflowDispatchMatch) triggers.push('manual');\n            }\n\n            return {\n              name: workflowName,\n              filename: file.name,\n              path: file.path,\n              size: file.size,\n              sha: file.sha,\n              url: file.html_url,\n              triggers: triggers.length > 0 ? triggers : ['push'], // default to push if we can't parse\n              lastModified: contentResponse.data.last_modified || 'Unknown'\n            };\n          } catch (error) {\n            console.warn(`Failed to fetch workflow details for ${file.name}:`, error);\n            return {\n              name: file.name.replace(/\\.(yml|yaml)$/, ''),\n              filename: file.name,\n              path: file.path,\n              size: file.size,\n              sha: file.sha,\n              url: file.html_url,\n              triggers: ['unknown'],\n              lastModified: 'Unknown'\n            };\n          }\n        })\n      );\n\n      return workflows;\n    } catch (error) {\n      if (error.status === 404) {\n        // No .github/workflows directory exists\n        return [];\n      }\n      console.error('Failed to fetch workflows:', error);\n      throw error;\n    }\n  }\n\n  // Get workflow runs for a repository\n  async getWorkflowRuns(owner, repo, options = {}) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const params = {\n        owner,\n        repo,\n        per_page: options.per_page || 10,\n        page: options.page || 1\n      };\n\n      if (options.branch) {\n        params.branch = options.branch;\n      }\n\n      if (options.workflow_id) {\n        params.workflow_id = options.workflow_id;\n      }\n\n      const { data } = await this.octokit.rest.actions.listWorkflowRunsForRepo(params);\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch workflow runs:', error);\n      throw error;\n    }\n  }\n\n  // Get workflow runs for a specific workflow\n  async getWorkflowRunsForWorkflow(owner, repo, workflow_id, options = {}) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const params = {\n        owner,\n        repo,\n        workflow_id,\n        per_page: options.per_page || 10,\n        page: options.page || 1\n      };\n\n      if (options.branch) {\n        params.branch = options.branch;\n      }\n\n      const { data } = await this.octokit.rest.actions.listWorkflowRuns(params);\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch workflow runs for workflow:', error);\n      throw error;\n    }\n  }\n\n  // Trigger a workflow run\n  async triggerWorkflow(owner, repo, workflow_id, ref = 'main', inputs = {}) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.actions.createWorkflowDispatch({\n        owner,\n        repo,\n        workflow_id,\n        ref,\n        inputs\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to trigger workflow:', error);\n      throw error;\n    }\n  }\n\n  // Re-run a workflow\n  async rerunWorkflow(owner, repo, run_id) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.actions.reRunWorkflow({\n        owner,\n        repo,\n        run_id\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to re-run workflow:', error);\n      throw error;\n    }\n  }\n\n  // Get workflow run logs\n  async getWorkflowRunLogs(owner, repo, run_id) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.actions.downloadWorkflowRunLogs({\n        owner,\n        repo,\n        run_id\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to get workflow run logs:', error);\n      throw error;\n    }\n  }\n\n  // Approve a workflow run\n  async approveWorkflowRun(owner, repo, run_id) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.actions.approveWorkflowRun({\n        owner,\n        repo,\n        run_id\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to approve workflow run:', error);\n      throw error;\n    }\n  }\n\n  // Get commit comparison (diff)\n  async getCommitDiff(owner, repo, base, head) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.repos.compareCommits({\n        owner,\n        repo,\n        base,\n        head\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to get commit diff:', error);\n      throw error;\n    }\n  }\n\n  // Get commit details\n  async getCommit(owner, repo, sha) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.repos.getCommit({\n        owner,\n        repo,\n        ref: sha\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to get commit details:', error);\n      throw error;\n    }\n  }\n\n  // Releases API methods\n\n  // Get releases for a repository\n  async getReleases(owner, repo, options = {}) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.repos.listReleases({\n        owner,\n        repo,\n        per_page: options.per_page || 10,\n        page: options.page || 1\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch releases:', error);\n      throw error;\n    }\n  }\n\n  // Get latest release\n  async getLatestRelease(owner, repo) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const { data } = await this.octokit.rest.repos.getLatestRelease({\n        owner,\n        repo\n      });\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch latest release:', error);\n      throw error;\n    }\n  }\n\n  // Recursively fetch BPMN files from a directory and its subdirectories\n  async getBpmnFilesRecursive(owner, repo, path, ref = 'main', allFiles = []) {\n    try {\n      // Use authenticated octokit if available, otherwise create a public instance\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const { data } = await octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path,\n        ref\n      });\n\n      // Handle single file response\n      if (!Array.isArray(data)) {\n        if (data.name.endsWith('.bpmn')) {\n          allFiles.push(data);\n        }\n        return allFiles;\n      }\n\n      // Handle directory response\n      for (const item of data) {\n        if (item.type === 'file' && item.name.endsWith('.bpmn')) {\n          allFiles.push(item);\n        } else if (item.type === 'dir') {\n          // Recursively search subdirectories\n          await this.getBpmnFilesRecursive(owner, repo, item.path, ref, allFiles);\n        }\n      }\n\n      return allFiles;\n    } catch (error) {\n      // If directory doesn't exist, return empty array (not an error)\n      if (error.status === 404) {\n        return allFiles;\n      }\n      throw error;\n    }\n  }\n\n  // Get all BPMN files from a repository's business process directories\n  async getBpmnFiles(owner, repo, ref = 'main') {\n    const allBpmnFiles = [];\n    \n    // Try multiple possible directory names where BPMN files might be stored\n    const possiblePaths = [\n      'input/business-processes',\n      'input/business-process',\n      'public/docs/workflows',\n      'docs/workflows',\n      'workflows',\n      'bpmn',\n      'processes'\n    ];\n\n    for (const path of possiblePaths) {\n      try {\n        const files = await this.getBpmnFilesRecursive(owner, repo, path, ref);\n        allBpmnFiles.push(...files);\n      } catch (error) {\n        console.warn(`Could not fetch BPMN files from ${path}:`, error.message);\n        // Continue trying other paths\n      }\n    }\n\n    // Remove duplicates based on path (in case both directories exist and have overlapping files)\n    const uniqueFiles = allBpmnFiles.filter((file, index, self) => \n      index === self.findIndex(f => f.path === file.path)\n    );\n\n    return uniqueFiles;\n  }\n\n  // Get file content from GitHub repository with timeout handling\n  async getFileContent(owner, repo, path, ref = 'main') {\n    const timeoutMs = 15000; // 15 second timeout\n    \n    try {\n      console.log(`🚀 githubService.getFileContent: Starting request for ${owner}/${repo}/${path} (ref: ${ref})`);\n      console.log('🔐 githubService.getFileContent: Authentication status:', this.isAuth());\n      console.log('📋 githubService.getFileContent: Request parameters:', { owner, repo, path, ref });\n      \n      // Use authenticated octokit if available, otherwise create a public instance for public repos\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      console.log('🔧 githubService.getFileContent: Using', this.isAuth() ? 'authenticated' : 'public', 'octokit instance');\n      \n      // Create a promise that rejects after timeout\n      const timeoutPromise = new Promise((_, reject) => {\n        console.log(`⏰ githubService.getFileContent: Setting up ${timeoutMs}ms timeout`);\n        setTimeout(() => {\n          console.error(`⏰ githubService.getFileContent: Request timed out after ${timeoutMs}ms`);\n          reject(new Error(`Request timeout after ${timeoutMs}ms`));\n        }, timeoutMs);\n      });\n      \n      // Race the GitHub API call against the timeout\n      console.log('🌐 githubService.getFileContent: Creating GitHub API promise...');\n      const apiPromise = octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path,\n        ref\n      });\n      \n      console.log('📡 githubService.getFileContent: API request initiated, waiting for response...');\n      const startTime = Date.now();\n      \n      const { data } = await Promise.race([apiPromise, timeoutPromise]);\n      const responseTime = Date.now() - startTime;\n      \n      console.log(`✅ githubService.getFileContent: API response received in ${responseTime}ms`);\n      console.log('📂 githubService.getFileContent: Response data type:', data.type);\n      console.log('📊 githubService.getFileContent: Response details:', {\n        type: data.type,\n        name: data.name,\n        size: data.size,\n        encoding: data.encoding,\n        hasContent: !!data.content\n      });\n\n      // Handle file content\n      if (data.type === 'file' && data.content) {\n        // Decode base64 content\n        console.log('🔧 githubService.getFileContent: Decoding base64 content...');\n        console.log('📊 githubService.getFileContent: Base64 content length:', data.content.length);\n        \n        const content = decodeURIComponent(escape(atob(data.content)));\n        console.log(`✅ githubService.getFileContent: Successfully fetched and decoded file content`);\n        console.log('📏 githubService.getFileContent: Final content length:', content.length, 'characters');\n        console.log('👀 githubService.getFileContent: Content preview (first 200 chars):', content.substring(0, 200));\n        \n        return content;\n      } else {\n        console.error('❌ githubService.getFileContent: Invalid response - not a file or no content');\n        console.error('🔍 githubService.getFileContent: Full response data:', JSON.stringify(data, null, 2));\n        throw new Error('File not found or is not a file');\n      }\n    } catch (error) {\n      console.error(`💥 githubService.getFileContent: Failed to fetch file content from ${owner}/${repo}/${path}:`, error);\n      console.error('🔍 githubService.getFileContent: Error analysis:', {\n        type: typeof error,\n        status: error.status,\n        message: error.message,\n        name: error.name,\n        stack: error.stack?.substring(0, 500) + '...'\n      });\n      \n      // Provide more specific error messages\n      if (error.message.includes('timeout')) {\n        console.error('⏰ githubService.getFileContent: Timeout error detected');\n        throw new Error(`GitHub API request timed out after ${timeoutMs / 1000} seconds. Please try again.`);\n      } else if (error.status === 403) {\n        console.error('🔒 githubService.getFileContent: 403 Forbidden error detected');\n        throw new Error('Access denied. This repository may be private or you may have hit rate limits.');\n      } else if (error.status === 404) {\n        console.error('🔍 githubService.getFileContent: 404 Not Found error detected');\n        throw new Error('File not found in the repository.');\n      } else if (error.message.includes('rate limit')) {\n        console.error('🚦 githubService.getFileContent: Rate limit error detected');\n        throw new Error('GitHub API rate limit exceeded. Please try again later.');\n      } else if (error.message.includes('Network Error') || error.message.includes('Failed to fetch')) {\n        console.error('🌐 githubService.getFileContent: Network error detected');\n        throw new Error('Network error occurred. Please check your internet connection and try again.');\n      }\n      \n      console.error('❓ githubService.getFileContent: Unknown error type, re-throwing original error');\n      throw error;\n    }\n  }\n\n  // Create a commit with multiple files\n  async createCommit(owner, repo, branch, message, files) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      // Get the latest commit SHA\n      const { data: refData } = await this.octokit.rest.git.getRef({\n        owner,\n        repo,\n        ref: `heads/${branch}`\n      });\n      const latestCommitSha = refData.object.sha;\n\n      // Get the tree SHA from the latest commit\n      const { data: commitData } = await this.octokit.rest.git.getCommit({\n        owner,\n        repo,\n        commit_sha: latestCommitSha\n      });\n      const baseTreeSha = commitData.tree.sha;\n\n      // Create blobs for all files\n      const blobs = await Promise.all(\n        files.map(async (file) => {\n          const { data: blobData } = await this.octokit.rest.git.createBlob({\n            owner,\n            repo,\n            content: file.content,\n            encoding: 'utf-8'\n          });\n          return {\n            path: file.path,\n            mode: '100644',\n            type: 'blob',\n            sha: blobData.sha\n          };\n        })\n      );\n\n      // Create a new tree with the blobs\n      const { data: treeData } = await this.octokit.rest.git.createTree({\n        owner,\n        repo,\n        base_tree: baseTreeSha,\n        tree: blobs\n      });\n\n      // Create the commit\n      const { data: newCommitData } = await this.octokit.rest.git.createCommit({\n        owner,\n        repo,\n        message,\n        tree: treeData.sha,\n        parents: [latestCommitSha]\n      });\n\n      // Update the branch reference\n      await this.octokit.rest.git.updateRef({\n        owner,\n        repo,\n        ref: `heads/${branch}`,\n        sha: newCommitData.sha\n      });\n\n      return {\n        sha: newCommitData.sha,\n        html_url: `https://github.com/${owner}/${repo}/commit/${newCommitData.sha}`,\n        message: newCommitData.message,\n        author: newCommitData.author,\n        committer: newCommitData.committer\n      };\n    } catch (error) {\n      console.error('Failed to create commit:', error);\n      throw error;\n    }\n  }\n\n  // Get recent commits for a repository branch\n  async getRecentCommits(owner, repo, branch = 'main', per_page = 5) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', `/repos/${owner}/${repo}/commits`, { sha: branch, per_page });\n\n    try {\n      const response = await this.octokit.rest.repos.listCommits({\n        owner,\n        repo,\n        sha: branch,\n        per_page\n      });\n\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/commits`, response.status, Date.now() - startTime);\n      \n      return response.data.map(commit => ({\n        sha: commit.sha,\n        message: commit.commit.message,\n        author: {\n          name: commit.commit.author.name,\n          email: commit.commit.author.email,\n          date: commit.commit.author.date\n        },\n        committer: {\n          name: commit.commit.committer.name,\n          email: commit.commit.committer.email,\n          date: commit.commit.committer.date\n        },\n        html_url: commit.html_url,\n        stats: commit.stats\n      }));\n    } catch (error) {\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/commits`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to fetch recent commits:', error);\n      throw error;\n    }\n  }\n\n  // Get open pull requests count\n  async getOpenPullRequestsCount(owner, repo) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', `/repos/${owner}/${repo}/pulls`, { state: 'open', per_page: 1 });\n\n    try {\n      const response = await this.octokit.rest.pulls.list({\n        owner,\n        repo,\n        state: 'open',\n        per_page: 1\n      });\n\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/pulls`, response.status, Date.now() - startTime);\n      \n      // GitHub includes the total count in the response headers\n      const linkHeader = response.headers.link;\n      if (linkHeader && linkHeader.includes('rel=\"last\"')) {\n        const lastPageMatch = linkHeader.match(/page=(\\d+)>; rel=\"last\"/);\n        if (lastPageMatch) {\n          return parseInt(lastPageMatch[1], 10);\n        }\n      }\n      \n      // Fallback: use the length of returned items (may not be accurate for large counts)\n      return response.data.length;\n    } catch (error) {\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/pulls`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to fetch pull requests count:', error);\n      throw error;\n    }\n  }\n\n  // Get pull request for a specific branch\n  async getPullRequestForBranch(owner, repo, branchName) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', `/repos/${owner}/${repo}/pulls`, { state: 'open', head: `${owner}:${branchName}` });\n\n    try {\n      const response = await this.octokit.rest.pulls.list({\n        owner,\n        repo,\n        state: 'open',\n        head: `${owner}:${branchName}`,\n        per_page: 1\n      });\n\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/pulls`, response.status, Date.now() - startTime);\n      \n      // Return the first matching PR or null if none found\n      return response.data.length > 0 ? response.data[0] : null;\n    } catch (error) {\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/pulls`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to fetch pull request for branch:', error);\n      return null; // Return null instead of throwing to allow graceful fallback\n    }\n  }\n\n  // Get open issues count\n  async getOpenIssuesCount(owner, repo) {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    const startTime = Date.now();\n    this.logger.apiCall('GET', `/repos/${owner}/${repo}/issues`, { state: 'open', per_page: 1 });\n\n    try {\n      const response = await this.octokit.rest.issues.listForRepo({\n        owner,\n        repo,\n        state: 'open',\n        per_page: 1\n      });\n\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/issues`, response.status, Date.now() - startTime);\n      \n      // GitHub includes the total count in the response headers\n      const linkHeader = response.headers.link;\n      if (linkHeader && linkHeader.includes('rel=\"last\"')) {\n        const lastPageMatch = linkHeader.match(/page=(\\d+)>; rel=\"last\"/);\n        if (lastPageMatch) {\n          return parseInt(lastPageMatch[1], 10);\n        }\n      }\n      \n      // Fallback: use the length of returned items (may not be accurate for large counts)\n      return response.data.length;\n    } catch (error) {\n      this.logger.apiResponse('GET', `/repos/${owner}/${repo}/issues`, error.status || 'error', Date.now() - startTime);\n      console.error('Failed to fetch issues count:', error);\n      throw error;\n    }\n  }\n\n  // Get repository statistics (combined method for efficiency)\n  async getRepositoryStats(owner, repo, branch = 'main') {\n    if (!this.isAuth()) {\n      throw new Error('Not authenticated with GitHub');\n    }\n\n    try {\n      const [recentCommits, openPRsCount, openIssuesCount] = await Promise.allSettled([\n        this.getRecentCommits(owner, repo, branch, 1),\n        this.getOpenPullRequestsCount(owner, repo),\n        this.getOpenIssuesCount(owner, repo)\n      ]);\n\n      return {\n        recentCommits: recentCommits.status === 'fulfilled' ? recentCommits.value : [],\n        openPullRequestsCount: openPRsCount.status === 'fulfilled' ? openPRsCount.value : 0,\n        openIssuesCount: openIssuesCount.status === 'fulfilled' ? openIssuesCount.value : 0,\n        errors: {\n          recentCommits: recentCommits.status === 'rejected' ? recentCommits.reason : null,\n          openPullRequestsCount: openPRsCount.status === 'rejected' ? openPRsCount.reason : null,\n          openIssuesCount: openIssuesCount.status === 'rejected' ? openIssuesCount.reason : null\n        }\n      };\n    } catch (error) {\n      console.error('Failed to fetch repository stats:', error);\n      throw error;\n    }\n  }\n\n  // Get directory contents (supports both authenticated and unauthenticated access)\n  async getDirectoryContents(owner, repo, path = '', ref = 'main') {\n    try {\n      // Create temporary Octokit instance for unauthenticated access if needed\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const { data } = await octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path,\n        ref\n      });\n\n      if (Array.isArray(data)) {\n        return data;\n      } else {\n        throw new Error('Not a directory');\n      }\n    } catch (error) {\n      console.error(`Failed to get directory contents for ${path}:`, error);\n      throw error;\n    }\n  }\n\n  // Update file content (requires authentication)\n  async updateFile(owner, repo, path, content, message, branch = 'main') {\n    if (!this.isAuth()) {\n      throw new Error('Authentication required to update files');\n    }\n\n    try {\n      // First, get the current file to get its SHA\n      const { data: currentFile } = await this.octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path,\n        ref: branch\n      });\n\n      if (Array.isArray(currentFile)) {\n        throw new Error('Path is a directory, not a file');\n      }\n\n      // Update the file\n      const { data } = await this.octokit.rest.repos.createOrUpdateFileContents({\n        owner,\n        repo,\n        path,\n        message,\n        content: btoa(unescape(encodeURIComponent(content))),\n        sha: currentFile.sha,\n        branch\n      });\n\n      return data;\n    } catch (error) {\n      console.error(`Failed to update file ${path}:`, error);\n      throw error;\n    }\n  }\n\n  // Get commits for a repository (supports unauthenticated access)\n  async getCommits(owner, repo, options = {}) {\n    try {\n      // Create temporary Octokit instance for unauthenticated access if needed\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const params = {\n        owner,\n        repo,\n        per_page: options.per_page || 10,\n        page: options.page || 1\n      };\n\n      if (options.sha) {\n        params.sha = options.sha;\n      }\n\n      if (options.since) {\n        params.since = options.since;\n      }\n\n      if (options.until) {\n        params.until = options.until;\n      }\n\n      const { data } = await octokit.rest.repos.listCommits(params);\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch commits:', error);\n      throw error;\n    }\n  }\n\n  // Get issues for a repository (supports unauthenticated access)\n  async getIssues(owner, repo, options = {}) {\n    try {\n      // Create temporary Octokit instance for unauthenticated access if needed\n      const octokit = this.isAuth() ? this.octokit : new Octokit();\n      \n      const params = {\n        owner,\n        repo,\n        state: options.state || 'all',\n        per_page: options.per_page || 30,\n        page: options.page || 1\n      };\n\n      if (options.labels) {\n        params.labels = options.labels;\n      }\n\n      if (options.milestone) {\n        params.milestone = options.milestone;\n      }\n\n      const { data } = await octokit.rest.issues.listForRepo(params);\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch issues:', error);\n      throw error;\n    }\n  }\n\n  // Alias method for backward compatibility - delegates to getIssues\n  async getRepositoryIssues(owner, repo, options = {}) {\n    return this.getIssues(owner, repo, options);\n  }\n\n  // Logout\n  logout() {\n    this.octokit = null;\n    this.isAuthenticated = false;\n    this.tokenType = null;\n    this.permissions = null;\n    localStorage.removeItem('github_token');\n    sessionStorage.removeItem('github_token');\n    \n    // Clear branch context on logout\n    try {\n      const { default: branchContextService } = require('../services/branchContextService');\n      branchContextService.clearAllBranchContext();\n    } catch (error) {\n      // Service might not be available during testing\n      sessionStorage.removeItem('sgex_branch_context');\n    }\n  }\n}\n\n// Create a singleton instance\nconst githubService = new GitHubService();\n\nexport default githubService;"],"names":["constructor","this","universalTopics","documentation","id","title","badge","type","action","currentPath","window","location","pathname","basePath","includes","pathParts","split","sgexIndex","indexOf","length","slice","join","href","content","bugReport","dakFeedback","helpTopics","getHelpTopicsForPage","pageId","contextData","arguments","undefined","getUniversalTopics","topics","selectedDak","repository","push","getHelpTopic","topicId","pageTopics","Object","values","topic","find","t","hasHelpTopics","addHelpTopicToPage","helpTopic","getAvailablePages","keys","openDakIssue","issueType","dakRepository","console","warn","url","owner","name","open","logger","getLogger","clearAllCache","info","repoCacheCleared","repositoryCacheService","clearAllCaches","debug","success","branchContextService","clearAllBranchContext","clearAllStagingGrounds","clearOtherSGEXData","error","message","localStorage","filter","key","startsWith","forEach","removeItem","sessionKeys","sessionStorage","getCacheInfo","repositoryCache","count","branchContext","hasData","repositoryCount","stagingGround","other","localKeys","getItem","parsed","JSON","parse","e","getUncommittedWork","uncommittedWork","data","files","keyParts","replace","branch","pop","fileCount","lastModified","timestamp","Date","UN_LANGUAGES","code","flag","ADDITIONAL_LANGUAGES","englishName","_ref","className","i18n","useTranslation","isOpen","setIsOpen","useState","searchTerm","setSearchTerm","selectedLanguages","setSelectedLanguages","saved","map","lang","availableLanguages","useMemo","languages","langCode","some","unLang","additionalLang","addLang","searchableLanguages","searchLower","toLowerCase","currentLanguage","language","_jsxs","children","onClick","_jsx","handleLanguageChange","changeLanguage","placeholder","value","onChange","target","autoFocus","newSelectedLanguages","setItem","stringify","handleAddLanguage","helpContent","position","notificationBadge","showHelp","setShowHelp","helpSticky","setHelpSticky","selectedHelpTopic","setSelectedHelpTopic","isDarkMode","setIsDarkMode","cacheClearing","setCacheClearing","cacheCleared","setCacheCleared","mascotImage","useThemeImage","useEffect","savedTheme","prefersLight","matchMedia","matches","document","body","currentLang","isRTL","documentElement","dir","toggleTheme","helpContentService","handleFlushCache","async","cacheManagementService","setTimeout","alert","_Fragment","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","handleClick","src","alt","handleCloseHelp","handleHelpTopicClick","LanguageSelector","disabled","HelpModal","onClose","handleCloseModal","baseImagePath","currentImagePath","setCurrentImagePath","updateImagePath","classList","contains","publicUrl","process","normalizedPath","finalPath","darkImageName","observer","MutationObserver","mutations","mutation","attributeName","observe","attributes","attributeFilter","disconnect","listeners","Set","currentRepository","currentBranch","initialize","notifyListeners","getStorageKey","Error","full_name","getStagingGround","stored","createEmptyStagingGround","_this$currentReposito","now","saveStagingGround","_this$currentReposito2","saveToHistory","updateFile","filePath","metadata","existingFileIndex","findIndex","f","path","fileObject","removeFile","updateCommitMessage","hasChanges","getChangedFilesCount","clearStagingGround","empty","historyKey","history","getHistory","savedAt","recentHistory","rollbackToSave","save","s","stagingGroundState","exportStagingGround","_this$currentReposito3","current","exportedAt","importStagingGround","exportedData","_this$currentReposito4","cleanup","maxAge","keysToRemove","i","addListener","callback","add","delete","contributeFiles","Array","isArray","results","file","result","source","tool","contributedAt","getStatus","_this$currentReposito5","filesCount","CACHE_KEY_PREFIX","CACHE_EXPIRY_HOURS","cacheExpiryHours","getCacheKey","isStale","getCachedRepositories","_parsed$repositories","cacheKey","cache","cachedData","age","repositories","setCachedRepositories","cacheData","clearCache","cached","exists","stale","ageHours","Math","round","toISOString","showMenu","setShowMenu","currentSlide","setCurrentSlide","createContextualUrl","baseUrl","params","_contextData$selected","urlParams","URLSearchParams","set","currentUrl","toString","helpModalInstance","openSgexIssue","template","labels","newWindow","_window$helpModalInst","_window$helpModalInst2","closed","showFallbackInstructions","call","_window$helpModalInst3","_window$helpModalInst4","close","_window$helpModalInst5","_window$helpModalInst6","sgex_dak_repository","_window$helpModalInst7","_window$helpModalInst8","_window$helpModalInst9","_window$helpModalInst0","_window$helpModalInst1","_window$helpModalInst10","reason","fallback","existingFallback","querySelector","remove","fallbackOverlay","createElement","style","cssText","fallbackModal","innerHTML","appendChild","addEventListener","handlePrevSlide","handleNextSlide","renderSlideshow","slides","currentSlideData","processedContent","dangerouslySetInnerHTML","__html","_","index","getHelpContent","currentTarget","handleMenuToggle","handleDocumentation","handleBugReport","_window$helpModalInst11","_contextData$selected2","sgex_page","sgex_current_url","_window$helpModalInst12","_window$helpModalInst13","_window$helpModalInst14","_window$helpModalInst15","handleDAKFeedback","_window$helpModalInst16","handleEmailSupport","topicTitle","subject","encodeURIComponent","trim","storageKey","whoProfile","getSubscriptions","subscriptions","profile","login","unshift","avatar_url","isPermanent","addedAt","saveSubscriptions","addSubscription","existingIndex","p","lastUpdated","newSubscription","removeSubscription","profileIndex","splice","isSubscribed","getSubscription","ensureCurrentUserSubscribed","userProfile","existing","autoAddVisitedProfile","visitedProfile","isDemo","getSubscriptionsSorted","sort","a","b","nameA","nameB","localeCompare","getSubscriptionsForSelection","displayName","isRemovable","updateSubscription","updatedProfile","clearSubscriptions","exportSubscriptions","importSubscriptions","jsonString","merge","importedSubscriptions","finalSubscriptions","mergedSubscriptions","imported","PAGE_TYPES","PageContext","createContext","usePage","context","useContext","log","pageName","user","asset","loading","isAuthenticated","navigate","determinePageType","repo","PageProvider","useParams","useLocation","useNavigate","locationPathname","pageState","setPageState","githubService","isAuth","_location$state","_location$state2","_location$state3","prev","state","selectedBranch","_repository","getUser","err","html_url","isNotFound","dakValidationService","validateDemoDAKRepository","charAt","toUpperCase","getRepository","validateDAKRepository","default_branch","isInvalidDAK","getFileContent","handleSubscriptions","currentUser","getCurrentUser","profileSubscriptionService","loadPageData","interval","setInterval","checkAuthState","currentAuthState","clearInterval","Provider","getThemeImagePath","USER_TYPES","ACCESS_LEVELS","userType","permissions","Map","detectUserType","checkIfDemoUser","createDemoUser","hasUser","REACT_APP_DEMO_MODE","demoData","getDemoData","daks","description","sampleAssets","getUserType","isDemoUser","isUnauthenticated","getRepositoryAccess","has","get","access","isDemoDAK","hasReadAccess","checkGitHubReadAccess","checkGitHubWriteAccess","_this$currentUser","_this$currentUser$dem","dak","hasRepositoryWriteAccess","canSaveToGitHub","canSaveLocal","getUIBehavior","behavior","showEditFeatures","showSaveToGitHub","showSaveLocal","confirmBeforeSave","allowCreateNew","showAccessBadges","getAccessBadge","badges","text","icon","color","enableDemoMode","disableDemoMode","clearPermissionsCache","clear","accessState","uiBehavior","handleAuthChange","getBookmarks","saveBookmarks","bookmarks","generateBookmarkTitle","addBookmark","bookmark","createdAt","removeBookmark","bookmarkId","filteredBookmarks","isBookmarked","getBookmarkByUrl","getBookmarksGroupedByPage","grouped","clearBookmarks","exportBookmarks","importBookmarks","importedBookmarks","mergedBookmarks","PreviewBadge","branchInfo","setBranchInfo","prInfo","setPrInfo","setLoading","setError","getCurrentBranch","safeName","prData","fetchPRForBranch","prError","detectBranchAndPR","getPullRequestForBranch","branchName","handleBadgeClick","PageHeader","showUserDropdown","setShowUserDropdown","showBookmarkDropdown","setShowBookmarkDropdown","authenticatedUser","setAuthenticatedUser","userAccessService","githubUser","fetchAuthenticatedUser","handleHomeNavigation","handleRemoveBookmark","bookmarkService","currentBookmark","bookmarksGrouped","handleGitHubUser","viewBox","width","height","d","handleBookmarkCurrentPage","group","handleBookmarkNavigation","handleLogout","logout","setBadge","showTooltip","setShowTooltip","mounted","loadBadge","badgeInfo","unsubscribe","role","_repository$owner3","customBreadcrumbs","branches","setBranches","showBranchDropdown","setShowBranchDropdown","branchSearchTerm","setBranchSearchTerm","loadingBranches","setLoadingBranches","handleClickOutside","event","closest","removeEventListener","_repository$owner","_repository$full_name","sortedBranches","getBranches","fetchBranches","filteredBranches","breadcrumbs","getBreadcrumbs","label","_repository$owner2","_repository$full_name2","branchPath","ownerLogin","currentPageLabel","newBranch","handleBranchChange","crumb","AccessBadge","handleGitHubRepo","onRetry","pageContext","bugReportSent","setBugReportSent","userExplanation","setUserExplanation","errorInfo","getErrorDisplayInfo","_pageContext$reposito","lowercaseError","suggestions","ContextualHelpMascot","suggestion","handleRetry","reload","handleGoHome","htmlFor","rows","handleSendBugReport","bugReportUrl","navigator","userAgent","innerWidth","innerHeight","referrer","PageErrorBoundary","React","props","super","hasError","getDerivedStateFromError","componentDidCatch","render","ErrorHandler","setState","PageLayoutInner","showHeader","showMascot","showBreadcrumbs","_ref2","usePageParams","updateBranch","navigateToUser","userLogin","page","navigateToDAK","repoName","navigateToAsset","assetPath","useDAKParams","pageParams","isSavingLocal","isSavingGitHub","localSaveSuccess","githubSaveSuccess","savedLocally","onSaveLocal","onSaveGitHub","showLocalButton","showGitHubButton","buttonSize","layout","localButtonDisabled","githubButtonDisabled","containerClasses","getButtonClasses","classes","commitMessage","setCommitMessage","onCommit","onCancel","isSaving","fileName","suggestedMessage","textareaRef","useRef","focus","onKeyDown","ctrlKey","metaKey","ref","required","handleCommit","SAVE_TARGETS","OPERATION_RESULTS","pendingOperations","assetCache","stagingGroundService","getAsset","localFile","hasLocalChanges","getDemoAssetContent","saveAssetLocal","savedBy","saveTarget","saveAssetGitHub","updateFileContent","_result$data","_result$data$commit","_result$data2","_result$data2$commit","_result$data3","_result$data3$commit","commit","sha","commitSha","commitUrl","resourceType","status","compose","include","system","concept","display","getSaveOptions","canSaveGitHub","showSaveGitHub","restrictions","getSaveRestrictions","localMessage","githubMessage","githubDisabled","getStagingGroundStatus","getChangedFiles","createAsset","initialContent","isNew","batchSaveLocal","assets","every","r","getAccessInfo","saveOptions","Promise","all","originalContent","onSave","onContentChange","customSaveToGitHub","showSaveButtons","saveButtonsPosition","pageLayoutProps","setIsSavingLocal","setIsSavingGitHub","saveError","setSaveError","setLocalSaveSuccess","setGithubSaveSuccess","setSaveOptions","showCommitDialog","setShowCommitDialog","options","dataAccessLayer","loadSaveOptions","handleSaveLocal","useCallback","handleSaveGitHub","handleCommitToGitHub","errorMessage","handleCancelCommit","saveButtonsProps","PageLayout","SaveButtonsContainer","CommitMessageDialog","TOOL_TYPES","ToolDefinition","config","route","category","requiresAuth","supportsDemo","requiresDAK","assetTypes","assetPattern","viewerComponent","editorComponent","dashboardComponent","onInit","onAssetLoad","onAssetSave","onError","supportsAsset","_this$assetTypes","RegExp","test","canAccess","createComponent","toolDef","ToolWrapper","toolDefinition","toolState","setToolState","initializeTool","_pageParams$repositor","assetData","handleAssetSave","newContent","saveType","handleGitHubSave","_pageParams$repositor2","back","renderToolContent","commonProps","onGitHubSave","EditorComponent","_toolState$assets$","AssetEditorLayout","ViewerComponent","DashboardComponent","Component","tools","register","getAll","from","getByCategory","getByAssetType","getAccessibleTools","accessibleTools","metadataKey","getAllLocalChanges","getLocalContent","saveLocal","changes","allMetadata","getAllMetadata","originalPath","removeLocal","getMetadata","getLocalChangesCount","exportLocalChanges","format","exportData","exported","version","Blob","importLocalChanges","jsonData","importData","existingChanges","existingMetadata","mergedChanges","mergedMetadata","clearAllLocalChanges","getStorageInfo","changesSize","metadataSize","totalSize","formattedSize","formatBytes","bytes","floor","parseFloat","pow","toFixed","getRepositoryKey","getSelectedBranch","getBranchContext","setSelectedBranch","setBranchContext","clearRepositoryBranch","getDefaultBranchName","availableBranches","hasBranchContext","getBranchDisplayInfo","isDefault","displayText","repositoryExists","checkRepositoryExists","sushiConfigContent","fetchSushiConfig","yaml","dependencies","octokit","rest","repos","branchesToTry","getContent","decodeURIComponent","escape","atob","branchError","validNamePattern","fullName","processConcurrently","items","processor","concurrency","onProgress","onItemComplete","onItemStart","total","completed","queue","item","workers","min","fill","shift","worker","ttlMinutes","ttl","_getCacheKey","_isValid","entry","compatible","entries","getStats","size","ageMinutes","tokenType","authenticate","token","startTime","auth","tokenProvided","tokenLength","Octokit","duration","performance","authenticateWithOctokit","octokitInstance","checkTokenPermissions","apiCall","response","request","apiResponse","rateLimitStart","rateLimit","resources","core","hasCore","rateLimitError","username","apiError","checkRepositoryWritePermissions","getCollaboratorPermissionLevel","hasWriteAccess","permission","checkRepositoryPermissions","users","getAuthenticated","getUserOrganizations","orgs","listForAuthenticatedUser","getOrganization","orgLogin","org","getByUsername","getWHOOrganization","whoData","display_name","can_create_repositories","can_create_private_repositories","plan","private_repos","isWHO","getRepositories","getDemoRepositories","getSmartGuidelinesRepositories","demoRepos","private","clone_url","stargazers_count","forks_count","open_issues_count","created_at","updated_at","pushed_at","smart_guidelines_compatible","resolve","checkSmartGuidelinesCompatibility","retryCount","cachedResult","repositoryCompatibilityCache","isCompatible","delay","hasMorePages","listForUser","per_page","listForOrg","concat","smartGuidelinesRepos","getSmartGuidelinesRepositoriesProgressive","onRepositoryFound","currentRepo","progress","random","smartRepo","started","listBranches","createBranch","fromBranch","refData","git","getRef","createRef","object","getBranch","getWorkflows","workflowFiles","endsWith","contentResponse","nameMatch","match","workflowName","onMatch","triggers","pushMatch","prMatch","scheduleMatch","workflowDispatchMatch","filename","last_modified","getWorkflowRuns","workflow_id","actions","listWorkflowRunsForRepo","getWorkflowRunsForWorkflow","listWorkflowRuns","triggerWorkflow","inputs","createWorkflowDispatch","rerunWorkflow","run_id","reRunWorkflow","getWorkflowRunLogs","downloadWorkflowRunLogs","approveWorkflowRun","getCommitDiff","base","head","compareCommits","getCommit","getReleases","listReleases","getLatestRelease","getBpmnFilesRecursive","allFiles","getBpmnFiles","allBpmnFiles","possiblePaths","self","timeoutMs","timeoutPromise","reject","apiPromise","race","responseTime","encoding","hasContent","substring","_error$stack","stack","createCommit","latestCommitSha","commitData","commit_sha","baseTreeSha","tree","blobs","blobData","createBlob","mode","treeData","createTree","base_tree","newCommitData","parents","updateRef","author","committer","getRecentCommits","listCommits","email","date","stats","getOpenPullRequestsCount","pulls","list","linkHeader","headers","link","lastPageMatch","parseInt","getOpenIssuesCount","issues","listForRepo","getRepositoryStats","recentCommits","openPRsCount","openIssuesCount","allSettled","openPullRequestsCount","errors","getDirectoryContents","currentFile","createOrUpdateFileContents","btoa","unescape","getCommits","since","until","getIssues","milestone","getRepositoryIssues","default","require"],"sourceRoot":""}