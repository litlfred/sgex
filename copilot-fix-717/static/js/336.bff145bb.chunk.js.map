{"version":3,"file":"static/js/336.bff145bb.chunk.js","mappings":"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","sources":["services/schemaService.js"],"sourcesContent":["/**\n * Schema Service\n * \n * Centralized service for accessing and managing schemas in the React app.\n * Provides consistent access to minimal, required-field-only schemas.\n */\n\n// Import schemas directly as modules for React app access\nimport dakActionFormSchema from '../schemas/dak-action-form.json';\nimport dakSelectionFormSchema from '../schemas/dak-selection-form.json';\nimport dakConfigFormSchema from '../schemas/dak-config-form.json';\nimport organizationSelectionFormSchema from '../schemas/organization-selection-form.json';\nimport sushiConfigSchema from '../schemas/sushi-config.json';\nimport actorDefinitionSchema from '../schemas/actor-definition.json';\n\nclass SchemaService {\n  constructor() {\n    this.schemas = new Map();\n    this.initializeSchemas();\n  }\n\n  /**\n   * Initialize all schemas with minimal required fields\n   */\n  initializeSchemas() {\n    // Store original schemas\n    this.schemas.set('dak-action-form-original', dakActionFormSchema);\n    this.schemas.set('dak-selection-form-original', dakSelectionFormSchema);\n    this.schemas.set('dak-config-form-original', dakConfigFormSchema);\n    this.schemas.set('organization-selection-form-original', organizationSelectionFormSchema);\n    this.schemas.set('sushi-config-original', sushiConfigSchema);\n    this.schemas.set('actor-definition-original', actorDefinitionSchema);\n\n    // Create minimal versions\n    this.schemas.set('dak-question', this.createMinimalDAKQuestionSchema());\n    this.schemas.set('dak-action-form', this.createMinimalDAKActionSchema());\n    this.schemas.set('dak-selection-form', this.createMinimalDAKSelectionSchema());\n    this.schemas.set('dak-config-form', this.createMinimalDAKConfigSchema());\n  }\n\n  /**\n   * Create minimal DAK question schema with only required fields\n   */\n  createMinimalDAKQuestionSchema() {\n    return {\n      \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n      \"$id\": \"https://litlfred.github.io/sgex/schemas/dak-question.json\",\n      \"title\": \"DAK Question Form\",\n      \"description\": \"Minimal schema for DAK questions requiring only repository identification\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"repositoryUrl\": {\n          \"type\": \"string\",\n          \"title\": \"DAK Repository URL\",\n          \"description\": \"GitHub repository URL or path (e.g., 'user/repo' or 'https://github.com/user/repo')\",\n          \"pattern\": \"^(https://github\\\\.com/)?[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+/?$\",\n          \"examples\": [\n            \"who/smart-immunizations\",\n            \"https://github.com/who/smart-immunizations\",\n            \"litlfred/anc-dak\"\n          ]\n        },\n        \"locale\": {\n          \"type\": \"string\",\n          \"title\": \"Language/Locale\",\n          \"description\": \"Optional language/locale preference\",\n          \"enum\": [\"en\", \"fr\", \"es\", \"ar\", \"zh\", \"ru\"],\n          \"default\": \"en\"\n        }\n      },\n      \"required\": [\"repositoryUrl\"],\n      \"additionalProperties\": false,\n      \"uiSchema\": {\n        \"repositoryUrl\": {\n          \"ui:help\": \"Enter the GitHub repository URL or path (e.g., 'user/repo')\",\n          \"ui:placeholder\": \"user/repository-name\"\n        },\n        \"locale\": {\n          \"ui:help\": \"Optional: Select your preferred language\"\n        }\n      }\n    };\n  }\n\n  /**\n   * Create minimal DAK action schema (already minimal)\n   */\n  createMinimalDAKActionSchema() {\n    return {\n      ...dakActionFormSchema,\n      \"description\": \"Minimal schema for DAK action selection\"\n    };\n  }\n\n  /**\n   * Create minimal DAK selection schema \n   */\n  createMinimalDAKSelectionSchema() {\n    return {\n      \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n      \"$id\": \"https://litlfred.github.io/sgex/schemas/dak-selection-form-minimal.json\",\n      \"title\": \"DAK Selection Form (Minimal)\",\n      \"description\": \"Minimal schema for DAK repository selection\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"repositoryUrl\": {\n          \"type\": \"string\",\n          \"title\": \"DAK Repository\",\n          \"description\": \"GitHub repository URL or path\",\n          \"pattern\": \"^(https://github\\\\.com/)?[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+/?$\"\n        },\n        \"selectedProfile\": {\n          \"type\": \"object\",\n          \"title\": \"GitHub Profile\",\n          \"properties\": {\n            \"login\": {\n              \"type\": \"string\",\n              \"minLength\": 1\n            },\n            \"type\": {\n              \"type\": \"string\",\n              \"enum\": [\"User\", \"Organization\"]\n            }\n          },\n          \"required\": [\"login\", \"type\"]\n        }\n      },\n      \"required\": [\"repositoryUrl\"],\n      \"additionalProperties\": false\n    };\n  }\n\n  /**\n   * Create minimal DAK config schema\n   */\n  createMinimalDAKConfigSchema() {\n    return {\n      \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n      \"$id\": \"https://litlfred.github.io/sgex/schemas/dak-config-form-minimal.json\",\n      \"title\": \"DAK Configuration Form (Minimal)\",\n      \"description\": \"Minimal schema for DAK configuration\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"repositoryUrl\": {\n          \"type\": \"string\",\n          \"title\": \"Target Repository\",\n          \"description\": \"GitHub repository URL or path where DAK will be created/configured\"\n        },\n        \"sushiConfig\": {\n          \"type\": \"object\",\n          \"title\": \"Basic FHIR Implementation Guide Configuration\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"title\": \"Implementation Guide ID\",\n              \"pattern\": \"^[a-z0-9][a-z0-9\\\\-\\\\.]*[a-z0-9]$\",\n              \"minLength\": 3\n            },\n            \"title\": {\n              \"type\": \"string\",\n              \"title\": \"Implementation Guide Title\",\n              \"minLength\": 5\n            },\n            \"description\": {\n              \"type\": \"string\",\n              \"title\": \"Description\",\n              \"minLength\": 20\n            }\n          },\n          \"required\": [\"id\", \"title\", \"description\"]\n        }\n      },\n      \"required\": [\"repositoryUrl\", \"sushiConfig\"],\n      \"additionalProperties\": false\n    };\n  }\n\n  /**\n   * Get schema by name\n   */\n  getSchema(schemaName) {\n    const schema = this.schemas.get(schemaName);\n    if (!schema) {\n      console.warn(`Schema '${schemaName}' not found. Available schemas:`, Array.from(this.schemas.keys()));\n      return null;\n    }\n    return schema;\n  }\n\n  /**\n   * Get all available schema names\n   */\n  getAvailableSchemas() {\n    return Array.from(this.schemas.keys());\n  }\n\n  /**\n   * Check if a schema exists\n   */\n  hasSchema(schemaName) {\n    return this.schemas.has(schemaName);\n  }\n\n  /**\n   * Validate data against a schema (basic validation)\n   */\n  validateData(schemaName, data) {\n    const schema = this.getSchema(schemaName);\n    if (!schema) {\n      return { isValid: false, errors: [`Schema '${schemaName}' not found`] };\n    }\n\n    const errors = [];\n    const requiredFields = schema.required || [];\n    \n    // Check required fields\n    for (const field of requiredFields) {\n      if (!data.hasOwnProperty(field) || data[field] === null || data[field] === undefined) {\n        errors.push(`Required field '${field}' is missing`);\n      }\n    }\n\n    // Basic type checking for properties\n    if (schema.properties) {\n      for (const [fieldName, fieldSchema] of Object.entries(schema.properties)) {\n        if (data.hasOwnProperty(fieldName)) {\n          const value = data[fieldName];\n          if (fieldSchema.type === 'string' && typeof value !== 'string') {\n            errors.push(`Field '${fieldName}' must be a string`);\n          } else if (fieldSchema.type === 'object' && (typeof value !== 'object' || Array.isArray(value))) {\n            errors.push(`Field '${fieldName}' must be an object`);\n          } else if (fieldSchema.pattern && typeof value === 'string') {\n            const regex = new RegExp(fieldSchema.pattern);\n            if (!regex.test(value)) {\n              errors.push(`Field '${fieldName}' does not match required pattern`);\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Parse repository URL to extract user/repo\n   */\n  parseRepositoryUrl(repositoryUrl) {\n    if (!repositoryUrl) return null;\n\n    // Remove trailing slash\n    const cleanUrl = repositoryUrl.replace(/\\/$/, '');\n    \n    // Handle full GitHub URLs\n    const githubUrlMatch = cleanUrl.match(/^https:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\/]+)$/);\n    if (githubUrlMatch) {\n      return {\n        user: githubUrlMatch[1],\n        repo: githubUrlMatch[2]\n      };\n    }\n\n    // Handle user/repo format\n    const pathMatch = cleanUrl.match(/^([^\\/]+)\\/([^\\/]+)$/);\n    if (pathMatch) {\n      return {\n        user: pathMatch[1],\n        repo: pathMatch[2]\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Create a repository URL from user/repo\n   */\n  createRepositoryUrl(user, repo, format = 'path') {\n    if (!user || !repo) return null;\n    \n    if (format === 'full') {\n      return `https://github.com/${user}/${repo}`;\n    }\n    \n    return `${user}/${repo}`;\n  }\n}\n\n// Create singleton instance\nconst schemaService = new SchemaService();\n\nexport default schemaService;"],"names":["constructor","this","schemas","Map","initializeSchemas","set","dakActionFormSchema","dakSelectionFormSchema","dakConfigFormSchema","organizationSelectionFormSchema","sushiConfigSchema","actorDefinitionSchema","createMinimalDAKQuestionSchema","createMinimalDAKActionSchema","createMinimalDAKSelectionSchema","createMinimalDAKConfigSchema","_objectSpread","getSchema","schemaName","schema","get","console","warn","concat","Array","from","keys","getAvailableSchemas","hasSchema","has","validateData","data","isValid","errors","requiredFields","required","field","hasOwnProperty","undefined","push","properties","fieldName","fieldSchema","Object","entries","value","type","isArray","pattern","RegExp","test","length","parseRepositoryUrl","repositoryUrl","cleanUrl","replace","githubUrlMatch","match","user","repo","pathMatch","createRepositoryUrl","arguments"],"sourceRoot":""}