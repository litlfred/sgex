{"version":3,"file":"static/js/13.154d2d7b.chunk.js","mappings":"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","sources":["../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/property-information/lib/normalize.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark-util-character/index.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/micromark-factory-space/index.js","../node_modules/extend/index.js","../node_modules/property-information/lib/find.js","../node_modules/unist-util-position/lib/index.js","../node_modules/style-to-js/src/utilities.ts","../node_modules/property-information/lib/util/info.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/property-information/lib/util/types.js","../node_modules/unist-util-is/lib/index.js","../node_modules/style-to-js/src/index.ts","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/index.js","../node_modules/inline-style-parser/index.js","../node_modules/devlop/lib/default.js"],"sourcesContent":["import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * * if a processor is given,\n *   runs the (rehype) plugins used on it with a hast tree,\n *   then discards the result (*bridge mode*)\n * * otherwise,\n *   returns a hast tree,\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**:\n * > It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\n *   output the raw HTML.\n *   This is typically discouraged as noted by the option name but is useful if\n *   you completely trust authors\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *   into standard hast nodes (`element`, `text`, etc);\n *   this is a heavy task as it needs a full HTML parser,\n *   but it is the only way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark,\n * which we follow by default.\n * They are supported by GitHub,\n * so footnotes can be enabled in markdown with `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes,\n * which is hidden for sighted users but shown to assistive technology.\n * When your page is not in English,\n * you must define translated values.\n *\n * Back references use ARIA attributes,\n * but the section label itself uses a heading that is hidden with an\n * `sr-only` class.\n * To show it to sighted users,\n * define different attributes in `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem,\n * as it links footnote calls to footnote definitions on the page through `id`\n * attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * * when the node has a `value`\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\n *   see later),\n *   create a hast `text` node\n * * otherwise,\n *   create a `<div>` element (which could be changed with `data.hName`),\n *   with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @overload\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge | TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given,\n *   configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {Node, Point, Position} from 'unist'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file = ''\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual = undefined\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected = undefined\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note = undefined\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url = undefined\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","const CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nconst HYPHEN_REGEX = /-([a-z])/g;\nconst NO_HYPHEN_REGEX = /^[^-]+$/;\nconst VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nconst MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n\n/**\n * Checks whether to skip camelCase.\n */\nconst skipCamelCase = (property: string) =>\n  !property ||\n  NO_HYPHEN_REGEX.test(property) ||\n  CUSTOM_PROPERTY_REGEX.test(property);\n\n/**\n * Replacer that capitalizes first character.\n */\nconst capitalize = (match: string, character: string) =>\n  character.toUpperCase();\n\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nconst trimHyphen = (match: string, prefix: string) => `${prefix}-`;\n\n/**\n * CamelCase options.\n */\nexport interface CamelCaseOptions {\n  reactCompat?: boolean;\n}\n\n/**\n * CamelCases a CSS property.\n */\nexport const camelCase = (property: string, options: CamelCaseOptions = {}) => {\n  if (skipCamelCase(property)) {\n    return property;\n  }\n\n  property = property.toLowerCase();\n\n  if (options.reactCompat) {\n    // `-ms` vendor prefix should not be capitalized\n    property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n  } else {\n    // for non-React, remove first hyphen so vendor prefix is not capitalized\n    property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n  }\n\n  return property.replace(HYPHEN_REGEX, capitalize);\n};\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","import StyleToObject from 'style-to-object';\n\nimport { camelCase, CamelCaseOptions } from './utilities';\n\ntype StyleObject = Record<string, string>;\n\ninterface StyleToJSOptions extends CamelCaseOptions {}\n\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style: string, options?: StyleToJSOptions): StyleObject {\n  const output: StyleObject = {};\n\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  StyleToObject(style, (property, value) => {\n    // skip CSS comment\n    if (property && value) {\n      output[camelCase(property, options)] = value;\n    }\n  });\n\n  return output;\n}\n\nStyleToJS.default = StyleToJS;\n\nexport = StyleToJS;\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: overloadedBoolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n"],"names":["normalizeUri","value","result","index","start","skip","length","code","charCodeAt","replace","asciiAlphanumeric","test","String","fromCharCode","next","push","slice","encodeURIComponent","join","defaultFootnoteBackContent","_","rereferenceIndex","type","tagName","properties","children","defaultFootnoteBackLabel","referenceIndex","revert","state","node","subtype","referenceType","suffix","label","identifier","alt","contents","all","head","unshift","tail","listItemLoose","spread","undefined","trimLines","source","search","match","exec","last","lines","trimLine","end","startIndex","endIndex","codePointAt","handlers","blockquote","wrap","patch","applyData","break","lang","className","meta","data","delete","emphasis","footnoteReference","clobberPrefix","options","id","toUpperCase","safeId","toLowerCase","footnoteOrder","indexOf","counter","reuseCounter","footnoteCounts","get","set","link","href","dataFootnoteRef","ariaDescribedBy","sup","heading","depth","html","allowDangerousHtml","imageReference","definition","definitionById","src","url","title","image","inlineCode","text","linkReference","listItem","parent","results","loose","listLoose","checked","paragraph","disabled","child","list","Array","isArray","includes","ordered","root","strong","table","rows","firstRow","shift","tableContent","body","pointStart","pointEnd","position","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","thematicBreak","toml","ignore","yaml","footnoteDefinition","own","hasOwnProperty","emptyOptions","from","to","hName","hChildren","hProperties","Object","assign","structuredClone","defaultUnknownHandler","call","nodes","trimMarkdownSpaceStart","toHast","tree","settings","Map","footnoteById","_objectSpread","defaultHandlers","values","one","handle","passThrough","shallow","_objectWithoutProperties","_excluded","unknownHandler","visit","map","has","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","content","backReferences","counts","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","assert","remarkRehype","destination","async","file","hastTree","run","splice","remove","items","parameters","chunkStart","VFileMessage","Error","constructor","causeOrReason","optionsOrParentOrPlace","origin","super","reason","legacyCause","place","ancestors","cause","message","ruleId","this","column","fatal","line","name","stringifyPosition","stack","actual","expected","note","prototype","classifyCharacter","markdownLineEndingOrSpace","unicodeWhitespace","unicodePunctuation","normalize","parse","tokens","input","token","trim","stringify","padRight","padLeft","split","resolveAll","constructs","events","context","called","resolve","asciiAlpha","regexCheck","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownSpace","regex","env","self","globalThis","deserialize","serialized","deserializer","$","as","out","unpair","arr","object","key","Date","flags","RegExp","Set","add","BigInt","Uint8Array","buffer","DataView","EMPTY","toString","keys","typeOf","asString","shouldSkip","_ref","TYPE","serialize","json","lossy","arguments","serializer","strict","pair","entry","TypeError","valueOf","toJSON","entries","toISOString","any","bail","error","isPlainObject","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","_len","_key","middlewareIndex","callback","pop","fn","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","apply","then","_len4","_key4","use","middelware","CallableInstance","property","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","compiler","freezeIndex","frozen","namespace","parser","transformers","copy","attacher","extend","assertUnfrozen","freeze","transformer","Number","POSITIVE_INFINITY","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","Boolean","isUint8Array","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","rest","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","VFile","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","existing","before","point","pos","checks","types","DefinedInfo","Info","attribute","mask","space","mark","check","defined","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","hasOwn","toStr","defineProperty","gOPD","getOwnPropertyDescriptor","obj","hasOwnConstructor","hasIsPrototypeOf","setProperty","target","enumerable","configurable","newValue","writable","getProperty","module","exports","copyIsArray","clone","i","deep","cap","dash","valid","find","schema","normal","Type","charAt","camelcase","dashes","kebab","$0","offset","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","capitalize","character","trimHyphen","concat","skipCamelCase","reactCompat","booleanish","boolean","commaOrSpaceSeparated","commaSeparated","mustUseProperty","number","overloadedBoolean","spaceSeparated","empty","CONTINUE","EXIT","SKIP","visitParents","visitor","reverse","is","convert","step","factory","parents","subresult","grandparents","toResult","nodeAsParent","blankLine","partial","tokenize","nok","after","element","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","nameRe","nameReJsx","jsx","hastToReact","classId","dataType","itemId","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlnsXLink","emptyMap","tableElements","tableCellElement","docs","toJsxRuntime","Fragment","filePath","create","development","jsxDEV","props","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsxs","productionCreate","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","svg","stylePropertyNameCase","tableCellAlignToStyle","parentSchema","findComponentFromName","prop","createProperty","style","createElementProps","createChildren","filter","whitespace","addNode","addChildren","estree","expression","evaluateExpression","crashEstree","mdxExpression","attributes","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","countsByName","count","info","isNaN","commas","spaces","styleObject","styleToJs","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","isIdentifierName","computed","optional","toDash","urlAttributes","action","cite","formAction","icon","manifest","ping","poster","powers","increment","castFactory","tests","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","style_to_object_1","require","utilities_1","StyleToJS","default","camelCase","includeImageAlt","includeHtml","normalizeIdentifier","declarations","inline_style_parser_1","hasIterator","forEach","declaration","__importDefault","minpath","basename","path","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","sep","JSON","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","history","messages","stored","field","assertNonEmpty","assertPart","stem","fail","encoding","TextDecoder","decode","part","testOrVisitor","visitorOrReverse","maybeReverse","SpliceBuffer","initial","RangeError","setCursor","stop","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","startPosition","startPositions","tokenizer","_contentTypeTextTrailing","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","defineSkip","_gfmTasklistFirstContentOfListItem","write","contentStart","attempt","contentInitial","lineStart","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","endOfFile","seen","disable","null","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","sliceSerialize","flowInitial","afterConstruct","resolver","createResolver","string","initializeFactory","resolveAllLineSuffixes","notText","atBreak","extraResolver","chunks","tabs","bufferIndex","chunk","_bufferIndex","_index","marker","sequence","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","open","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","resolveTo","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","contentBefore","beforeContentChunk","contentChunk","numeric","characterEscape","lineEnding","labelEnd","newEvents","close","media","_inactive","_balanced","group","insideSpan","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","openingSequence","closingSequence","nextEvents","_close","_open","movePoint","attentionMarkers","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","returnState","instruction","tagOpen","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","tailExitIndex","headEnterIndex","between","resolveText","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","atTab","serializeChunks","main","expectedCode","startBufferIndex","endBufferIndex","view","sliceChunks","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","setextHeadingSlurpLineEnding","atHardBreak","inReference","ancestor","decodeString","fragment","characterReferenceType","postprocess","defaultConstructs","atCarriageReturn","endPosition","lastIndex","ceil","preprocess","d","combined","remarkParse","doc","re","thing","Schema","merge","definitions","normals","transform","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","caseSensitiveTransform","caseInsensitiveTransform","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","defer","dir","dirName","download","draggable","encType","enterKeyHint","fetchPriority","form","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","isMap","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","writingSuggestions","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","xlink","xmlns","xmlnsxlink","xml","xmlBase","xmlLang","xmlSpace","htmlBase","svgBase","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","str","lineno","updatePosition","Position","errorsList","msg","err","filename","silent","m","comments","c","val","ret","decl","decls","unreachable"],"sourceRoot":""}