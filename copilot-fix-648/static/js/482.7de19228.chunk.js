/*! For license information please see 482.7de19228.chunk.js.LICENSE.txt */
"use strict";(self.webpackChunksgex_workbench=self.webpackChunksgex_workbench||[]).push([[482],{28998:e=>{const r=function(){};r.prototype=Object.create(null);const t=/; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu,o=/\\([\v\u0020-\u00ff])/gu,s=/^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u,n={type:"",parameters:new r};function i(e){if("string"!==typeof e)throw new TypeError("argument header is required and must be a string");let n=e.indexOf(";");const i=-1!==n?e.slice(0,n).trim():e.trim();if(!1===s.test(i))throw new TypeError("invalid media type");const a={type:i.toLowerCase(),parameters:new r};if(-1===n)return a;let c,p,l;for(t.lastIndex=n;p=t.exec(e);){if(p.index!==n)throw new TypeError("invalid parameter format");n+=p[0].length,c=p[1].toLowerCase(),l=p[2],'"'===l[0]&&(l=l.slice(1,l.length-1),o.test(l)&&(l=l.replace(o,"$1"))),a.parameters[c]=l}if(n!==e.length)throw new TypeError("invalid parameter format");return a}function a(e){if("string"!==typeof e)return n;let i=e.indexOf(";");const a=-1!==i?e.slice(0,i).trim():e.trim();if(!1===s.test(a))return n;const c={type:a.toLowerCase(),parameters:new r};if(-1===i)return c;let p,l,u;for(t.lastIndex=i;l=t.exec(e);){if(l.index!==i)return n;i+=l[0].length,p=l[1].toLowerCase(),u=l[2],'"'===u[0]&&(u=u.slice(1,u.length-1),o.test(u)&&(u=u.replace(o,"$1"))),c.parameters[p]=u}return i!==e.length?n:c}Object.freeze(n.parameters),Object.freeze(n),e.exports.xL=a},55661:(e,r,t)=>{function o(e){return"undefined"===typeof e||null===e}t.d(r,{Ay:()=>or});var s={isNothing:o,isObject:function(e){return"object"===typeof e&&null!==e},toArray:function(e){return Array.isArray(e)?e:o(e)?[]:[e]},repeat:function(e,r){var t,o="";for(t=0;t<r;t+=1)o+=e;return o},isNegativeZero:function(e){return 0===e&&Number.NEGATIVE_INFINITY===1/e},extend:function(e,r){var t,o,s,n;if(r)for(t=0,o=(n=Object.keys(r)).length;t<o;t+=1)e[s=n[t]]=r[s];return e}};function n(e,r){var t="",o=e.reason||"(unknown reason)";return e.mark?(e.mark.name&&(t+='in "'+e.mark.name+'" '),t+="("+(e.mark.line+1)+":"+(e.mark.column+1)+")",!r&&e.mark.snippet&&(t+="\n\n"+e.mark.snippet),o+" "+t):o}function i(e,r){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=r,this.message=n(this,!1),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack||""}i.prototype=Object.create(Error.prototype),i.prototype.constructor=i,i.prototype.toString=function(e){return this.name+": "+n(this,e)};var a=i;function c(e,r,t,o,s){var n="",i="",a=Math.floor(s/2)-1;return o-r>a&&(r=o-a+(n=" ... ").length),t-o>a&&(t=o+a-(i=" ...").length),{str:n+e.slice(r,t).replace(/\t/g,"\u2192")+i,pos:o-r+n.length}}function p(e,r){return s.repeat(" ",r-e.length)+e}var l=function(e,r){if(r=Object.create(r||null),!e.buffer)return null;r.maxLength||(r.maxLength=79),"number"!==typeof r.indent&&(r.indent=1),"number"!==typeof r.linesBefore&&(r.linesBefore=3),"number"!==typeof r.linesAfter&&(r.linesAfter=2);for(var t,o=/\r?\n|\r|\0/g,n=[0],i=[],a=-1;t=o.exec(e.buffer);)i.push(t.index),n.push(t.index+t[0].length),e.position<=t.index&&a<0&&(a=n.length-2);a<0&&(a=n.length-1);var l,u,g="",d=Math.min(e.line+r.linesAfter,i.length).toString().length,m=r.maxLength-(r.indent+d+3);for(l=1;l<=r.linesBefore&&!(a-l<0);l++)u=c(e.buffer,n[a-l],i[a-l],e.position-(n[a]-n[a-l]),m),g=s.repeat(" ",r.indent)+p((e.line-l+1).toString(),d)+" | "+u.str+"\n"+g;for(u=c(e.buffer,n[a],i[a],e.position,m),g+=s.repeat(" ",r.indent)+p((e.line+1).toString(),d)+" | "+u.str+"\n",g+=s.repeat("-",r.indent+d+3+u.pos)+"^\n",l=1;l<=r.linesAfter&&!(a+l>=i.length);l++)u=c(e.buffer,n[a+l],i[a+l],e.position-(n[a]-n[a+l]),m),g+=s.repeat(" ",r.indent)+p((e.line+l+1).toString(),d)+" | "+u.str+"\n";return g.replace(/\n$/,"")},u=["kind","multi","resolve","construct","instanceOf","predicate","represent","representName","defaultStyle","styleAliases"],g=["scalar","sequence","mapping"];var d=function(e,r){if(r=r||{},Object.keys(r).forEach(function(r){if(-1===u.indexOf(r))throw new a('Unknown option "'+r+'" is met in definition of "'+e+'" YAML type.')}),this.options=r,this.tag=e,this.kind=r.kind||null,this.resolve=r.resolve||function(){return!0},this.construct=r.construct||function(e){return e},this.instanceOf=r.instanceOf||null,this.predicate=r.predicate||null,this.represent=r.represent||null,this.representName=r.representName||null,this.defaultStyle=r.defaultStyle||null,this.multi=r.multi||!1,this.styleAliases=function(e){var r={};return null!==e&&Object.keys(e).forEach(function(t){e[t].forEach(function(e){r[String(e)]=t})}),r}(r.styleAliases||null),-1===g.indexOf(this.kind))throw new a('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')};function m(e,r){var t=[];return e[r].forEach(function(e){var r=t.length;t.forEach(function(t,o){t.tag===e.tag&&t.kind===e.kind&&t.multi===e.multi&&(r=o)}),t[r]=e}),t}function h(e){return this.extend(e)}h.prototype.extend=function(e){var r=[],t=[];if(e instanceof d)t.push(e);else if(Array.isArray(e))t=t.concat(e);else{if(!e||!Array.isArray(e.implicit)&&!Array.isArray(e.explicit))throw new a("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");e.implicit&&(r=r.concat(e.implicit)),e.explicit&&(t=t.concat(e.explicit))}r.forEach(function(e){if(!(e instanceof d))throw new a("Specified list of YAML types (or a single Type object) contains a non-Type object.");if(e.loadKind&&"scalar"!==e.loadKind)throw new a("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");if(e.multi)throw new a("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.")}),t.forEach(function(e){if(!(e instanceof d))throw new a("Specified list of YAML types (or a single Type object) contains a non-Type object.")});var o=Object.create(h.prototype);return o.implicit=(this.implicit||[]).concat(r),o.explicit=(this.explicit||[]).concat(t),o.compiledImplicit=m(o,"implicit"),o.compiledExplicit=m(o,"explicit"),o.compiledTypeMap=function(){var e,r,t={scalar:{},sequence:{},mapping:{},fallback:{},multi:{scalar:[],sequence:[],mapping:[],fallback:[]}};function o(e){e.multi?(t.multi[e.kind].push(e),t.multi.fallback.push(e)):t[e.kind][e.tag]=t.fallback[e.tag]=e}for(e=0,r=arguments.length;e<r;e+=1)arguments[e].forEach(o);return t}(o.compiledImplicit,o.compiledExplicit),o};var f=h,T=new d("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return null!==e?e:""}}),E=new d("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return null!==e?e:[]}}),b=new d("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return null!==e?e:{}}}),w=new f({explicit:[T,E,b]});var _=new d("tag:yaml.org,2002:null",{kind:"scalar",resolve:function(e){if(null===e)return!0;var r=e.length;return 1===r&&"~"===e||4===r&&("null"===e||"Null"===e||"NULL"===e)},construct:function(){return null},predicate:function(e){return null===e},represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"},empty:function(){return""}},defaultStyle:"lowercase"});var y=new d("tag:yaml.org,2002:bool",{kind:"scalar",resolve:function(e){if(null===e)return!1;var r=e.length;return 4===r&&("true"===e||"True"===e||"TRUE"===e)||5===r&&("false"===e||"False"===e||"FALSE"===e)},construct:function(e){return"true"===e||"True"===e||"TRUE"===e},predicate:function(e){return"[object Boolean]"===Object.prototype.toString.call(e)},represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"});function k(e){return 48<=e&&e<=57||65<=e&&e<=70||97<=e&&e<=102}function v(e){return 48<=e&&e<=55}function A(e){return 48<=e&&e<=57}var G=new d("tag:yaml.org,2002:int",{kind:"scalar",resolve:function(e){if(null===e)return!1;var r,t=e.length,o=0,s=!1;if(!t)return!1;if("-"!==(r=e[o])&&"+"!==r||(r=e[++o]),"0"===r){if(o+1===t)return!0;if("b"===(r=e[++o])){for(o++;o<t;o++)if("_"!==(r=e[o])){if("0"!==r&&"1"!==r)return!1;s=!0}return s&&"_"!==r}if("x"===r){for(o++;o<t;o++)if("_"!==(r=e[o])){if(!k(e.charCodeAt(o)))return!1;s=!0}return s&&"_"!==r}if("o"===r){for(o++;o<t;o++)if("_"!==(r=e[o])){if(!v(e.charCodeAt(o)))return!1;s=!0}return s&&"_"!==r}}if("_"===r)return!1;for(;o<t;o++)if("_"!==(r=e[o])){if(!A(e.charCodeAt(o)))return!1;s=!0}return!(!s||"_"===r)},construct:function(e){var r,t=e,o=1;if(-1!==t.indexOf("_")&&(t=t.replace(/_/g,"")),"-"!==(r=t[0])&&"+"!==r||("-"===r&&(o=-1),r=(t=t.slice(1))[0]),"0"===t)return 0;if("0"===r){if("b"===t[1])return o*parseInt(t.slice(2),2);if("x"===t[1])return o*parseInt(t.slice(2),16);if("o"===t[1])return o*parseInt(t.slice(2),8)}return o*parseInt(t,10)},predicate:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&e%1===0&&!s.isNegativeZero(e)},represent:{binary:function(e){return e>=0?"0b"+e.toString(2):"-0b"+e.toString(2).slice(1)},octal:function(e){return e>=0?"0o"+e.toString(8):"-0o"+e.toString(8).slice(1)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return e>=0?"0x"+e.toString(16).toUpperCase():"-0x"+e.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}}),O=new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");var P=/^[-+]?[0-9]+e/;var S=new d("tag:yaml.org,2002:float",{kind:"scalar",resolve:function(e){return null!==e&&!(!O.test(e)||"_"===e[e.length-1])},construct:function(e){var r,t;return t="-"===(r=e.replace(/_/g,"").toLowerCase())[0]?-1:1,"+-".indexOf(r[0])>=0&&(r=r.slice(1)),".inf"===r?1===t?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:".nan"===r?NaN:t*parseFloat(r,10)},predicate:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&(e%1!==0||s.isNegativeZero(e))},represent:function(e,r){var t;if(isNaN(e))switch(r){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(r){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(r){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(s.isNegativeZero(e))return"-0.0";return t=e.toString(10),P.test(t)?t.replace("e",".e"):t},defaultStyle:"lowercase"}),F=w.extend({implicit:[_,y,G,S]}),R=F,C=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),U=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");var D=new d("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:function(e){return null!==e&&(null!==C.exec(e)||null!==U.exec(e))},construct:function(e){var r,t,o,s,n,i,a,c,p=0,l=null;if(null===(r=C.exec(e))&&(r=U.exec(e)),null===r)throw new Error("Date resolve error");if(t=+r[1],o=+r[2]-1,s=+r[3],!r[4])return new Date(Date.UTC(t,o,s));if(n=+r[4],i=+r[5],a=+r[6],r[7]){for(p=r[7].slice(0,3);p.length<3;)p+="0";p=+p}return r[9]&&(l=6e4*(60*+r[10]+ +(r[11]||0)),"-"===r[9]&&(l=-l)),c=new Date(Date.UTC(t,o,s,n,i,a,p)),l&&c.setTime(c.getTime()-l),c},instanceOf:Date,represent:function(e){return e.toISOString()}});var L=new d("tag:yaml.org,2002:merge",{kind:"scalar",resolve:function(e){return"<<"===e||null===e}}),I="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";var j=new d("tag:yaml.org,2002:binary",{kind:"scalar",resolve:function(e){if(null===e)return!1;var r,t,o=0,s=e.length,n=I;for(t=0;t<s;t++)if(!((r=n.indexOf(e.charAt(t)))>64)){if(r<0)return!1;o+=6}return o%8===0},construct:function(e){var r,t,o=e.replace(/[\r\n=]/g,""),s=o.length,n=I,i=0,a=[];for(r=0;r<s;r++)r%4===0&&r&&(a.push(i>>16&255),a.push(i>>8&255),a.push(255&i)),i=i<<6|n.indexOf(o.charAt(r));return 0===(t=s%4*6)?(a.push(i>>16&255),a.push(i>>8&255),a.push(255&i)):18===t?(a.push(i>>10&255),a.push(i>>2&255)):12===t&&a.push(i>>4&255),new Uint8Array(a)},predicate:function(e){return"[object Uint8Array]"===Object.prototype.toString.call(e)},represent:function(e){var r,t,o="",s=0,n=e.length,i=I;for(r=0;r<n;r++)r%3===0&&r&&(o+=i[s>>18&63],o+=i[s>>12&63],o+=i[s>>6&63],o+=i[63&s]),s=(s<<8)+e[r];return 0===(t=n%3)?(o+=i[s>>18&63],o+=i[s>>12&63],o+=i[s>>6&63],o+=i[63&s]):2===t?(o+=i[s>>10&63],o+=i[s>>4&63],o+=i[s<<2&63],o+=i[64]):1===t&&(o+=i[s>>2&63],o+=i[s<<4&63],o+=i[64],o+=i[64]),o}}),x=Object.prototype.hasOwnProperty,q=Object.prototype.toString;var H=new d("tag:yaml.org,2002:omap",{kind:"sequence",resolve:function(e){if(null===e)return!0;var r,t,o,s,n,i=[],a=e;for(r=0,t=a.length;r<t;r+=1){if(o=a[r],n=!1,"[object Object]"!==q.call(o))return!1;for(s in o)if(x.call(o,s)){if(n)return!1;n=!0}if(!n)return!1;if(-1!==i.indexOf(s))return!1;i.push(s)}return!0},construct:function(e){return null!==e?e:[]}}),M=Object.prototype.toString;var N=new d("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:function(e){if(null===e)return!0;var r,t,o,s,n,i=e;for(n=new Array(i.length),r=0,t=i.length;r<t;r+=1){if(o=i[r],"[object Object]"!==M.call(o))return!1;if(1!==(s=Object.keys(o)).length)return!1;n[r]=[s[0],o[s[0]]]}return!0},construct:function(e){if(null===e)return[];var r,t,o,s,n,i=e;for(n=new Array(i.length),r=0,t=i.length;r<t;r+=1)o=i[r],s=Object.keys(o),n[r]=[s[0],o[s[0]]];return n}}),W=Object.prototype.hasOwnProperty;var B=new d("tag:yaml.org,2002:set",{kind:"mapping",resolve:function(e){if(null===e)return!0;var r,t=e;for(r in t)if(W.call(t,r)&&null!==t[r])return!1;return!0},construct:function(e){return null!==e?e:{}}}),$=R.extend({implicit:[D,L],explicit:[j,H,N,B]}),V=Object.prototype.hasOwnProperty,z=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,K=/[\x85\u2028\u2029]/,Y=/[,\[\]\{\}]/,J=/^(?:!|!!|![a-z\-]+!)$/i,Z=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function Q(e){return Object.prototype.toString.call(e)}function X(e){return 10===e||13===e}function ee(e){return 9===e||32===e}function re(e){return 9===e||32===e||10===e||13===e}function te(e){return 44===e||91===e||93===e||123===e||125===e}function oe(e){var r;return 48<=e&&e<=57?e-48:97<=(r=32|e)&&r<=102?r-97+10:-1}function se(e){return 120===e?2:117===e?4:85===e?8:0}function ne(e){return 48<=e&&e<=57?e-48:-1}function ie(e){return 48===e?"\0":97===e?"\x07":98===e?"\b":116===e||9===e?"\t":110===e?"\n":118===e?"\v":102===e?"\f":114===e?"\r":101===e?"\x1b":32===e?" ":34===e?'"':47===e?"/":92===e?"\\":78===e?"\x85":95===e?"\xa0":76===e?"\u2028":80===e?"\u2029":""}function ae(e){return e<=65535?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10),56320+(e-65536&1023))}for(var ce=new Array(256),pe=new Array(256),le=0;le<256;le++)ce[le]=ie(le)?1:0,pe[le]=ie(le);function ue(e,r){this.input=e,this.filename=r.filename||null,this.schema=r.schema||$,this.onWarning=r.onWarning||null,this.legacy=r.legacy||!1,this.json=r.json||!1,this.listener=r.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.firstTabInLine=-1,this.documents=[]}function ge(e,r){var t={name:e.filename,buffer:e.input.slice(0,-1),position:e.position,line:e.line,column:e.position-e.lineStart};return t.snippet=l(t),new a(r,t)}function de(e,r){throw ge(e,r)}function me(e,r){e.onWarning&&e.onWarning.call(null,ge(e,r))}var he={YAML:function(e,r,t){var o,s,n;null!==e.version&&de(e,"duplication of %YAML directive"),1!==t.length&&de(e,"YAML directive accepts exactly one argument"),null===(o=/^([0-9]+)\.([0-9]+)$/.exec(t[0]))&&de(e,"ill-formed argument of the YAML directive"),s=parseInt(o[1],10),n=parseInt(o[2],10),1!==s&&de(e,"unacceptable YAML version of the document"),e.version=t[0],e.checkLineBreaks=n<2,1!==n&&2!==n&&me(e,"unsupported YAML version of the document")},TAG:function(e,r,t){var o,s;2!==t.length&&de(e,"TAG directive accepts exactly two arguments"),o=t[0],s=t[1],J.test(o)||de(e,"ill-formed tag handle (first argument) of the TAG directive"),V.call(e.tagMap,o)&&de(e,'there is a previously declared suffix for "'+o+'" tag handle'),Z.test(s)||de(e,"ill-formed tag prefix (second argument) of the TAG directive");try{s=decodeURIComponent(s)}catch(n){de(e,"tag prefix is malformed: "+s)}e.tagMap[o]=s}};function fe(e,r,t,o){var s,n,i,a;if(r<t){if(a=e.input.slice(r,t),o)for(s=0,n=a.length;s<n;s+=1)9===(i=a.charCodeAt(s))||32<=i&&i<=1114111||de(e,"expected valid JSON character");else z.test(a)&&de(e,"the stream contains non-printable characters");e.result+=a}}function Te(e,r,t,o){var n,i,a,c;for(s.isObject(t)||de(e,"cannot merge mappings; the provided source object is unacceptable"),a=0,c=(n=Object.keys(t)).length;a<c;a+=1)i=n[a],V.call(r,i)||(r[i]=t[i],o[i]=!0)}function Ee(e,r,t,o,s,n,i,a,c){var p,l;if(Array.isArray(s))for(p=0,l=(s=Array.prototype.slice.call(s)).length;p<l;p+=1)Array.isArray(s[p])&&de(e,"nested arrays are not supported inside keys"),"object"===typeof s&&"[object Object]"===Q(s[p])&&(s[p]="[object Object]");if("object"===typeof s&&"[object Object]"===Q(s)&&(s="[object Object]"),s=String(s),null===r&&(r={}),"tag:yaml.org,2002:merge"===o)if(Array.isArray(n))for(p=0,l=n.length;p<l;p+=1)Te(e,r,n[p],t);else Te(e,r,n,t);else e.json||V.call(t,s)||!V.call(r,s)||(e.line=i||e.line,e.lineStart=a||e.lineStart,e.position=c||e.position,de(e,"duplicated mapping key")),"__proto__"===s?Object.defineProperty(r,s,{configurable:!0,enumerable:!0,writable:!0,value:n}):r[s]=n,delete t[s];return r}function be(e){var r;10===(r=e.input.charCodeAt(e.position))?e.position++:13===r?(e.position++,10===e.input.charCodeAt(e.position)&&e.position++):de(e,"a line break is expected"),e.line+=1,e.lineStart=e.position,e.firstTabInLine=-1}function we(e,r,t){for(var o=0,s=e.input.charCodeAt(e.position);0!==s;){for(;ee(s);)9===s&&-1===e.firstTabInLine&&(e.firstTabInLine=e.position),s=e.input.charCodeAt(++e.position);if(r&&35===s)do{s=e.input.charCodeAt(++e.position)}while(10!==s&&13!==s&&0!==s);if(!X(s))break;for(be(e),s=e.input.charCodeAt(e.position),o++,e.lineIndent=0;32===s;)e.lineIndent++,s=e.input.charCodeAt(++e.position)}return-1!==t&&0!==o&&e.lineIndent<t&&me(e,"deficient indentation"),o}function _e(e){var r,t=e.position;return!(45!==(r=e.input.charCodeAt(t))&&46!==r||r!==e.input.charCodeAt(t+1)||r!==e.input.charCodeAt(t+2)||(t+=3,0!==(r=e.input.charCodeAt(t))&&!re(r)))}function ye(e,r){1===r?e.result+=" ":r>1&&(e.result+=s.repeat("\n",r-1))}function ke(e,r){var t,o,s=e.tag,n=e.anchor,i=[],a=!1;if(-1!==e.firstTabInLine)return!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=i),o=e.input.charCodeAt(e.position);0!==o&&(-1!==e.firstTabInLine&&(e.position=e.firstTabInLine,de(e,"tab characters must not be used in indentation")),45===o)&&re(e.input.charCodeAt(e.position+1));)if(a=!0,e.position++,we(e,!0,-1)&&e.lineIndent<=r)i.push(null),o=e.input.charCodeAt(e.position);else if(t=e.line,Ge(e,r,3,!1,!0),i.push(e.result),we(e,!0,-1),o=e.input.charCodeAt(e.position),(e.line===t||e.lineIndent>r)&&0!==o)de(e,"bad indentation of a sequence entry");else if(e.lineIndent<r)break;return!!a&&(e.tag=s,e.anchor=n,e.kind="sequence",e.result=i,!0)}function ve(e){var r,t,o,s,n=!1,i=!1;if(33!==(s=e.input.charCodeAt(e.position)))return!1;if(null!==e.tag&&de(e,"duplication of a tag property"),60===(s=e.input.charCodeAt(++e.position))?(n=!0,s=e.input.charCodeAt(++e.position)):33===s?(i=!0,t="!!",s=e.input.charCodeAt(++e.position)):t="!",r=e.position,n){do{s=e.input.charCodeAt(++e.position)}while(0!==s&&62!==s);e.position<e.length?(o=e.input.slice(r,e.position),s=e.input.charCodeAt(++e.position)):de(e,"unexpected end of the stream within a verbatim tag")}else{for(;0!==s&&!re(s);)33===s&&(i?de(e,"tag suffix cannot contain exclamation marks"):(t=e.input.slice(r-1,e.position+1),J.test(t)||de(e,"named tag handle cannot contain such characters"),i=!0,r=e.position+1)),s=e.input.charCodeAt(++e.position);o=e.input.slice(r,e.position),Y.test(o)&&de(e,"tag suffix cannot contain flow indicator characters")}o&&!Z.test(o)&&de(e,"tag name cannot contain such characters: "+o);try{o=decodeURIComponent(o)}catch(a){de(e,"tag name is malformed: "+o)}return n?e.tag=o:V.call(e.tagMap,t)?e.tag=e.tagMap[t]+o:"!"===t?e.tag="!"+o:"!!"===t?e.tag="tag:yaml.org,2002:"+o:de(e,'undeclared tag handle "'+t+'"'),!0}function Ae(e){var r,t;if(38!==(t=e.input.charCodeAt(e.position)))return!1;for(null!==e.anchor&&de(e,"duplication of an anchor property"),t=e.input.charCodeAt(++e.position),r=e.position;0!==t&&!re(t)&&!te(t);)t=e.input.charCodeAt(++e.position);return e.position===r&&de(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(r,e.position),!0}function Ge(e,r,t,o,n){var i,a,c,p,l,u,g,d,m,h=1,f=!1,T=!1;if(null!==e.listener&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,i=a=c=4===t||3===t,o&&we(e,!0,-1)&&(f=!0,e.lineIndent>r?h=1:e.lineIndent===r?h=0:e.lineIndent<r&&(h=-1)),1===h)for(;ve(e)||Ae(e);)we(e,!0,-1)?(f=!0,c=i,e.lineIndent>r?h=1:e.lineIndent===r?h=0:e.lineIndent<r&&(h=-1)):c=!1;if(c&&(c=f||n),1!==h&&4!==t||(d=1===t||2===t?r:r+1,m=e.position-e.lineStart,1===h?c&&(ke(e,m)||function(e,r,t){var o,s,n,i,a,c,p,l=e.tag,u=e.anchor,g={},d=Object.create(null),m=null,h=null,f=null,T=!1,E=!1;if(-1!==e.firstTabInLine)return!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=g),p=e.input.charCodeAt(e.position);0!==p;){if(T||-1===e.firstTabInLine||(e.position=e.firstTabInLine,de(e,"tab characters must not be used in indentation")),o=e.input.charCodeAt(e.position+1),n=e.line,63!==p&&58!==p||!re(o)){if(i=e.line,a=e.lineStart,c=e.position,!Ge(e,t,2,!1,!0))break;if(e.line===n){for(p=e.input.charCodeAt(e.position);ee(p);)p=e.input.charCodeAt(++e.position);if(58===p)re(p=e.input.charCodeAt(++e.position))||de(e,"a whitespace character is expected after the key-value separator within a block mapping"),T&&(Ee(e,g,d,m,h,null,i,a,c),m=h=f=null),E=!0,T=!1,s=!1,m=e.tag,h=e.result;else{if(!E)return e.tag=l,e.anchor=u,!0;de(e,"can not read an implicit mapping pair; a colon is missed")}}else{if(!E)return e.tag=l,e.anchor=u,!0;de(e,"can not read a block mapping entry; a multiline key may not be an implicit key")}}else 63===p?(T&&(Ee(e,g,d,m,h,null,i,a,c),m=h=f=null),E=!0,T=!0,s=!0):T?(T=!1,s=!0):de(e,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),e.position+=1,p=o;if((e.line===n||e.lineIndent>r)&&(T&&(i=e.line,a=e.lineStart,c=e.position),Ge(e,r,4,!0,s)&&(T?h=e.result:f=e.result),T||(Ee(e,g,d,m,h,f,i,a,c),m=h=f=null),we(e,!0,-1),p=e.input.charCodeAt(e.position)),(e.line===n||e.lineIndent>r)&&0!==p)de(e,"bad indentation of a mapping entry");else if(e.lineIndent<r)break}return T&&Ee(e,g,d,m,h,null,i,a,c),E&&(e.tag=l,e.anchor=u,e.kind="mapping",e.result=g),E}(e,m,d))||function(e,r){var t,o,s,n,i,a,c,p,l,u,g,d,m=!0,h=e.tag,f=e.anchor,T=Object.create(null);if(91===(d=e.input.charCodeAt(e.position)))i=93,p=!1,n=[];else{if(123!==d)return!1;i=125,p=!0,n={}}for(null!==e.anchor&&(e.anchorMap[e.anchor]=n),d=e.input.charCodeAt(++e.position);0!==d;){if(we(e,!0,r),(d=e.input.charCodeAt(e.position))===i)return e.position++,e.tag=h,e.anchor=f,e.kind=p?"mapping":"sequence",e.result=n,!0;m?44===d&&de(e,"expected the node content, but found ','"):de(e,"missed comma between flow collection entries"),g=null,a=c=!1,63===d&&re(e.input.charCodeAt(e.position+1))&&(a=c=!0,e.position++,we(e,!0,r)),t=e.line,o=e.lineStart,s=e.position,Ge(e,r,1,!1,!0),u=e.tag,l=e.result,we(e,!0,r),d=e.input.charCodeAt(e.position),!c&&e.line!==t||58!==d||(a=!0,d=e.input.charCodeAt(++e.position),we(e,!0,r),Ge(e,r,1,!1,!0),g=e.result),p?Ee(e,n,T,u,l,g,t,o,s):a?n.push(Ee(e,null,T,u,l,g,t,o,s)):n.push(l),we(e,!0,r),44===(d=e.input.charCodeAt(e.position))?(m=!0,d=e.input.charCodeAt(++e.position)):m=!1}de(e,"unexpected end of the stream within a flow collection")}(e,d)?T=!0:(a&&function(e,r){var t,o,n,i,a=1,c=!1,p=!1,l=r,u=0,g=!1;if(124===(i=e.input.charCodeAt(e.position)))o=!1;else{if(62!==i)return!1;o=!0}for(e.kind="scalar",e.result="";0!==i;)if(43===(i=e.input.charCodeAt(++e.position))||45===i)1===a?a=43===i?3:2:de(e,"repeat of a chomping mode identifier");else{if(!((n=ne(i))>=0))break;0===n?de(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):p?de(e,"repeat of an indentation width identifier"):(l=r+n-1,p=!0)}if(ee(i)){do{i=e.input.charCodeAt(++e.position)}while(ee(i));if(35===i)do{i=e.input.charCodeAt(++e.position)}while(!X(i)&&0!==i)}for(;0!==i;){for(be(e),e.lineIndent=0,i=e.input.charCodeAt(e.position);(!p||e.lineIndent<l)&&32===i;)e.lineIndent++,i=e.input.charCodeAt(++e.position);if(!p&&e.lineIndent>l&&(l=e.lineIndent),X(i))u++;else{if(e.lineIndent<l){3===a?e.result+=s.repeat("\n",c?1+u:u):1===a&&c&&(e.result+="\n");break}for(o?ee(i)?(g=!0,e.result+=s.repeat("\n",c?1+u:u)):g?(g=!1,e.result+=s.repeat("\n",u+1)):0===u?c&&(e.result+=" "):e.result+=s.repeat("\n",u):e.result+=s.repeat("\n",c?1+u:u),c=!0,p=!0,u=0,t=e.position;!X(i)&&0!==i;)i=e.input.charCodeAt(++e.position);fe(e,t,e.position,!1)}}return!0}(e,d)||function(e,r){var t,o,s;if(39!==(t=e.input.charCodeAt(e.position)))return!1;for(e.kind="scalar",e.result="",e.position++,o=s=e.position;0!==(t=e.input.charCodeAt(e.position));)if(39===t){if(fe(e,o,e.position,!0),39!==(t=e.input.charCodeAt(++e.position)))return!0;o=e.position,e.position++,s=e.position}else X(t)?(fe(e,o,s,!0),ye(e,we(e,!1,r)),o=s=e.position):e.position===e.lineStart&&_e(e)?de(e,"unexpected end of the document within a single quoted scalar"):(e.position++,s=e.position);de(e,"unexpected end of the stream within a single quoted scalar")}(e,d)||function(e,r){var t,o,s,n,i,a;if(34!==(a=e.input.charCodeAt(e.position)))return!1;for(e.kind="scalar",e.result="",e.position++,t=o=e.position;0!==(a=e.input.charCodeAt(e.position));){if(34===a)return fe(e,t,e.position,!0),e.position++,!0;if(92===a){if(fe(e,t,e.position,!0),X(a=e.input.charCodeAt(++e.position)))we(e,!1,r);else if(a<256&&ce[a])e.result+=pe[a],e.position++;else if((i=se(a))>0){for(s=i,n=0;s>0;s--)(i=oe(a=e.input.charCodeAt(++e.position)))>=0?n=(n<<4)+i:de(e,"expected hexadecimal character");e.result+=ae(n),e.position++}else de(e,"unknown escape sequence");t=o=e.position}else X(a)?(fe(e,t,o,!0),ye(e,we(e,!1,r)),t=o=e.position):e.position===e.lineStart&&_e(e)?de(e,"unexpected end of the document within a double quoted scalar"):(e.position++,o=e.position)}de(e,"unexpected end of the stream within a double quoted scalar")}(e,d)?T=!0:!function(e){var r,t,o;if(42!==(o=e.input.charCodeAt(e.position)))return!1;for(o=e.input.charCodeAt(++e.position),r=e.position;0!==o&&!re(o)&&!te(o);)o=e.input.charCodeAt(++e.position);return e.position===r&&de(e,"name of an alias node must contain at least one character"),t=e.input.slice(r,e.position),V.call(e.anchorMap,t)||de(e,'unidentified alias "'+t+'"'),e.result=e.anchorMap[t],we(e,!0,-1),!0}(e)?function(e,r,t){var o,s,n,i,a,c,p,l,u=e.kind,g=e.result;if(re(l=e.input.charCodeAt(e.position))||te(l)||35===l||38===l||42===l||33===l||124===l||62===l||39===l||34===l||37===l||64===l||96===l)return!1;if((63===l||45===l)&&(re(o=e.input.charCodeAt(e.position+1))||t&&te(o)))return!1;for(e.kind="scalar",e.result="",s=n=e.position,i=!1;0!==l;){if(58===l){if(re(o=e.input.charCodeAt(e.position+1))||t&&te(o))break}else if(35===l){if(re(e.input.charCodeAt(e.position-1)))break}else{if(e.position===e.lineStart&&_e(e)||t&&te(l))break;if(X(l)){if(a=e.line,c=e.lineStart,p=e.lineIndent,we(e,!1,-1),e.lineIndent>=r){i=!0,l=e.input.charCodeAt(e.position);continue}e.position=n,e.line=a,e.lineStart=c,e.lineIndent=p;break}}i&&(fe(e,s,n,!1),ye(e,e.line-a),s=n=e.position,i=!1),ee(l)||(n=e.position+1),l=e.input.charCodeAt(++e.position)}return fe(e,s,n,!1),!!e.result||(e.kind=u,e.result=g,!1)}(e,d,1===t)&&(T=!0,null===e.tag&&(e.tag="?")):(T=!0,null===e.tag&&null===e.anchor||de(e,"alias node should not have any properties")),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):0===h&&(T=c&&ke(e,m))),null===e.tag)null!==e.anchor&&(e.anchorMap[e.anchor]=e.result);else if("?"===e.tag){for(null!==e.result&&"scalar"!==e.kind&&de(e,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+e.kind+'"'),p=0,l=e.implicitTypes.length;p<l;p+=1)if((g=e.implicitTypes[p]).resolve(e.result)){e.result=g.construct(e.result),e.tag=g.tag,null!==e.anchor&&(e.anchorMap[e.anchor]=e.result);break}}else if("!"!==e.tag){if(V.call(e.typeMap[e.kind||"fallback"],e.tag))g=e.typeMap[e.kind||"fallback"][e.tag];else for(g=null,p=0,l=(u=e.typeMap.multi[e.kind||"fallback"]).length;p<l;p+=1)if(e.tag.slice(0,u[p].tag.length)===u[p].tag){g=u[p];break}g||de(e,"unknown tag !<"+e.tag+">"),null!==e.result&&g.kind!==e.kind&&de(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+g.kind+'", not "'+e.kind+'"'),g.resolve(e.result,e.tag)?(e.result=g.construct(e.result,e.tag),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):de(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")}return null!==e.listener&&e.listener("close",e),null!==e.tag||null!==e.anchor||T}function Oe(e){var r,t,o,s,n=e.position,i=!1;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap=Object.create(null),e.anchorMap=Object.create(null);0!==(s=e.input.charCodeAt(e.position))&&(we(e,!0,-1),s=e.input.charCodeAt(e.position),!(e.lineIndent>0||37!==s));){for(i=!0,s=e.input.charCodeAt(++e.position),r=e.position;0!==s&&!re(s);)s=e.input.charCodeAt(++e.position);for(o=[],(t=e.input.slice(r,e.position)).length<1&&de(e,"directive name must not be less than one character in length");0!==s;){for(;ee(s);)s=e.input.charCodeAt(++e.position);if(35===s){do{s=e.input.charCodeAt(++e.position)}while(0!==s&&!X(s));break}if(X(s))break;for(r=e.position;0!==s&&!re(s);)s=e.input.charCodeAt(++e.position);o.push(e.input.slice(r,e.position))}0!==s&&be(e),V.call(he,t)?he[t](e,t,o):me(e,'unknown document directive "'+t+'"')}we(e,!0,-1),0===e.lineIndent&&45===e.input.charCodeAt(e.position)&&45===e.input.charCodeAt(e.position+1)&&45===e.input.charCodeAt(e.position+2)?(e.position+=3,we(e,!0,-1)):i&&de(e,"directives end mark is expected"),Ge(e,e.lineIndent-1,4,!1,!0),we(e,!0,-1),e.checkLineBreaks&&K.test(e.input.slice(n,e.position))&&me(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&_e(e)?46===e.input.charCodeAt(e.position)&&(e.position+=3,we(e,!0,-1)):e.position<e.length-1&&de(e,"end of the stream or a document separator is expected")}function Pe(e,r){r=r||{},0!==(e=String(e)).length&&(10!==e.charCodeAt(e.length-1)&&13!==e.charCodeAt(e.length-1)&&(e+="\n"),65279===e.charCodeAt(0)&&(e=e.slice(1)));var t=new ue(e,r),o=e.indexOf("\0");for(-1!==o&&(t.position=o,de(t,"null byte is not allowed in input")),t.input+="\0";32===t.input.charCodeAt(t.position);)t.lineIndent+=1,t.position+=1;for(;t.position<t.length-1;)Oe(t);return t.documents}var Se={loadAll:function(e,r,t){null!==r&&"object"===typeof r&&"undefined"===typeof t&&(t=r,r=null);var o=Pe(e,t);if("function"!==typeof r)return o;for(var s=0,n=o.length;s<n;s+=1)r(o[s])},load:function(e,r){var t=Pe(e,r);if(0!==t.length){if(1===t.length)return t[0];throw new a("expected a single document in the stream, but found more")}}},Fe=Object.prototype.toString,Re=Object.prototype.hasOwnProperty,Ce=65279,Ue={0:"\\0",7:"\\a",8:"\\b",9:"\\t",10:"\\n",11:"\\v",12:"\\f",13:"\\r",27:"\\e",34:'\\"',92:"\\\\",133:"\\N",160:"\\_",8232:"\\L",8233:"\\P"},De=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"],Le=/^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;function Ie(e){var r,t,o;if(r=e.toString(16).toUpperCase(),e<=255)t="x",o=2;else if(e<=65535)t="u",o=4;else{if(!(e<=4294967295))throw new a("code point within a string may not be greater than 0xFFFFFFFF");t="U",o=8}return"\\"+t+s.repeat("0",o-r.length)+r}function je(e){this.schema=e.schema||$,this.indent=Math.max(1,e.indent||2),this.noArrayIndent=e.noArrayIndent||!1,this.skipInvalid=e.skipInvalid||!1,this.flowLevel=s.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=function(e,r){var t,o,s,n,i,a,c;if(null===r)return{};for(t={},s=0,n=(o=Object.keys(r)).length;s<n;s+=1)i=o[s],a=String(r[i]),"!!"===i.slice(0,2)&&(i="tag:yaml.org,2002:"+i.slice(2)),(c=e.compiledTypeMap.fallback[i])&&Re.call(c.styleAliases,a)&&(a=c.styleAliases[a]),t[i]=a;return t}(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.quotingType='"'===e.quotingType?2:1,this.forceQuotes=e.forceQuotes||!1,this.replacer="function"===typeof e.replacer?e.replacer:null,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function xe(e,r){for(var t,o=s.repeat(" ",r),n=0,i=-1,a="",c=e.length;n<c;)-1===(i=e.indexOf("\n",n))?(t=e.slice(n),n=c):(t=e.slice(n,i+1),n=i+1),t.length&&"\n"!==t&&(a+=o),a+=t;return a}function qe(e,r){return"\n"+s.repeat(" ",e.indent*r)}function He(e){return 32===e||9===e}function Me(e){return 32<=e&&e<=126||161<=e&&e<=55295&&8232!==e&&8233!==e||57344<=e&&e<=65533&&e!==Ce||65536<=e&&e<=1114111}function Ne(e){return Me(e)&&e!==Ce&&13!==e&&10!==e}function We(e,r,t){var o=Ne(e),s=o&&!He(e);return(t?o:o&&44!==e&&91!==e&&93!==e&&123!==e&&125!==e)&&35!==e&&!(58===r&&!s)||Ne(r)&&!He(r)&&35===e||58===r&&s}function Be(e,r){var t,o=e.charCodeAt(r);return o>=55296&&o<=56319&&r+1<e.length&&(t=e.charCodeAt(r+1))>=56320&&t<=57343?1024*(o-55296)+t-56320+65536:o}function $e(e){return/^\n* /.test(e)}function Ve(e,r,t,o,s,n,i,a){var c,p,l=0,u=null,g=!1,d=!1,m=-1!==o,h=-1,f=Me(p=Be(e,0))&&p!==Ce&&!He(p)&&45!==p&&63!==p&&58!==p&&44!==p&&91!==p&&93!==p&&123!==p&&125!==p&&35!==p&&38!==p&&42!==p&&33!==p&&124!==p&&61!==p&&62!==p&&39!==p&&34!==p&&37!==p&&64!==p&&96!==p&&function(e){return!He(e)&&58!==e}(Be(e,e.length-1));if(r||i)for(c=0;c<e.length;l>=65536?c+=2:c++){if(!Me(l=Be(e,c)))return 5;f=f&&We(l,u,a),u=l}else{for(c=0;c<e.length;l>=65536?c+=2:c++){if(10===(l=Be(e,c)))g=!0,m&&(d=d||c-h-1>o&&" "!==e[h+1],h=c);else if(!Me(l))return 5;f=f&&We(l,u,a),u=l}d=d||m&&c-h-1>o&&" "!==e[h+1]}return g||d?t>9&&$e(e)?5:i?2===n?5:2:d?4:3:!f||i||s(e)?2===n?5:2:1}function ze(e,r,t,o,s){e.dump=function(){if(0===r.length)return 2===e.quotingType?'""':"''";if(!e.noCompatMode&&(-1!==De.indexOf(r)||Le.test(r)))return 2===e.quotingType?'"'+r+'"':"'"+r+"'";var n=e.indent*Math.max(1,t),i=-1===e.lineWidth?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-n),c=o||e.flowLevel>-1&&t>=e.flowLevel;switch(Ve(r,c,e.indent,i,function(r){return function(e,r){var t,o;for(t=0,o=e.implicitTypes.length;t<o;t+=1)if(e.implicitTypes[t].resolve(r))return!0;return!1}(e,r)},e.quotingType,e.forceQuotes&&!o,s)){case 1:return r;case 2:return"'"+r.replace(/'/g,"''")+"'";case 3:return"|"+Ke(r,e.indent)+Ye(xe(r,n));case 4:return">"+Ke(r,e.indent)+Ye(xe(function(e,r){var t,o,s=/(\n+)([^\n]*)/g,n=function(){var t=e.indexOf("\n");return t=-1!==t?t:e.length,s.lastIndex=t,Je(e.slice(0,t),r)}(),i="\n"===e[0]||" "===e[0];for(;o=s.exec(e);){var a=o[1],c=o[2];t=" "===c[0],n+=a+(i||t||""===c?"":"\n")+Je(c,r),i=t}return n}(r,i),n));case 5:return'"'+function(e){for(var r,t="",o=0,s=0;s<e.length;o>=65536?s+=2:s++)o=Be(e,s),!(r=Ue[o])&&Me(o)?(t+=e[s],o>=65536&&(t+=e[s+1])):t+=r||Ie(o);return t}(r)+'"';default:throw new a("impossible error: invalid scalar style")}}()}function Ke(e,r){var t=$e(e)?String(r):"",o="\n"===e[e.length-1];return t+(o&&("\n"===e[e.length-2]||"\n"===e)?"+":o?"":"-")+"\n"}function Ye(e){return"\n"===e[e.length-1]?e.slice(0,-1):e}function Je(e,r){if(""===e||" "===e[0])return e;for(var t,o,s=/ [^ ]/g,n=0,i=0,a=0,c="";t=s.exec(e);)(a=t.index)-n>r&&(o=i>n?i:a,c+="\n"+e.slice(n,o),n=o+1),i=a;return c+="\n",e.length-n>r&&i>n?c+=e.slice(n,i)+"\n"+e.slice(i+1):c+=e.slice(n),c.slice(1)}function Ze(e,r,t,o){var s,n,i,a="",c=e.tag;for(s=0,n=t.length;s<n;s+=1)i=t[s],e.replacer&&(i=e.replacer.call(t,String(s),i)),(Xe(e,r+1,i,!0,!0,!1,!0)||"undefined"===typeof i&&Xe(e,r+1,null,!0,!0,!1,!0))&&(o&&""===a||(a+=qe(e,r)),e.dump&&10===e.dump.charCodeAt(0)?a+="-":a+="- ",a+=e.dump);e.tag=c,e.dump=a||"[]"}function Qe(e,r,t){var o,s,n,i,c,p;for(n=0,i=(s=t?e.explicitTypes:e.implicitTypes).length;n<i;n+=1)if(((c=s[n]).instanceOf||c.predicate)&&(!c.instanceOf||"object"===typeof r&&r instanceof c.instanceOf)&&(!c.predicate||c.predicate(r))){if(t?c.multi&&c.representName?e.tag=c.representName(r):e.tag=c.tag:e.tag="?",c.represent){if(p=e.styleMap[c.tag]||c.defaultStyle,"[object Function]"===Fe.call(c.represent))o=c.represent(r,p);else{if(!Re.call(c.represent,p))throw new a("!<"+c.tag+'> tag resolver accepts not "'+p+'" style');o=c.represent[p](r,p)}e.dump=o}return!0}return!1}function Xe(e,r,t,o,s,n,i){e.tag=null,e.dump=t,Qe(e,t,!1)||Qe(e,t,!0);var c,p=Fe.call(e.dump),l=o;o&&(o=e.flowLevel<0||e.flowLevel>r);var u,g,d="[object Object]"===p||"[object Array]"===p;if(d&&(g=-1!==(u=e.duplicates.indexOf(t))),(null!==e.tag&&"?"!==e.tag||g||2!==e.indent&&r>0)&&(s=!1),g&&e.usedDuplicates[u])e.dump="*ref_"+u;else{if(d&&g&&!e.usedDuplicates[u]&&(e.usedDuplicates[u]=!0),"[object Object]"===p)o&&0!==Object.keys(e.dump).length?(!function(e,r,t,o){var s,n,i,c,p,l,u="",g=e.tag,d=Object.keys(t);if(!0===e.sortKeys)d.sort();else if("function"===typeof e.sortKeys)d.sort(e.sortKeys);else if(e.sortKeys)throw new a("sortKeys must be a boolean or a function");for(s=0,n=d.length;s<n;s+=1)l="",o&&""===u||(l+=qe(e,r)),c=t[i=d[s]],e.replacer&&(c=e.replacer.call(t,i,c)),Xe(e,r+1,i,!0,!0,!0)&&((p=null!==e.tag&&"?"!==e.tag||e.dump&&e.dump.length>1024)&&(e.dump&&10===e.dump.charCodeAt(0)?l+="?":l+="? "),l+=e.dump,p&&(l+=qe(e,r)),Xe(e,r+1,c,!0,p)&&(e.dump&&10===e.dump.charCodeAt(0)?l+=":":l+=": ",u+=l+=e.dump));e.tag=g,e.dump=u||"{}"}(e,r,e.dump,s),g&&(e.dump="&ref_"+u+e.dump)):(!function(e,r,t){var o,s,n,i,a,c="",p=e.tag,l=Object.keys(t);for(o=0,s=l.length;o<s;o+=1)a="",""!==c&&(a+=", "),e.condenseFlow&&(a+='"'),i=t[n=l[o]],e.replacer&&(i=e.replacer.call(t,n,i)),Xe(e,r,n,!1,!1)&&(e.dump.length>1024&&(a+="? "),a+=e.dump+(e.condenseFlow?'"':"")+":"+(e.condenseFlow?"":" "),Xe(e,r,i,!1,!1)&&(c+=a+=e.dump));e.tag=p,e.dump="{"+c+"}"}(e,r,e.dump),g&&(e.dump="&ref_"+u+" "+e.dump));else if("[object Array]"===p)o&&0!==e.dump.length?(e.noArrayIndent&&!i&&r>0?Ze(e,r-1,e.dump,s):Ze(e,r,e.dump,s),g&&(e.dump="&ref_"+u+e.dump)):(!function(e,r,t){var o,s,n,i="",a=e.tag;for(o=0,s=t.length;o<s;o+=1)n=t[o],e.replacer&&(n=e.replacer.call(t,String(o),n)),(Xe(e,r,n,!1,!1)||"undefined"===typeof n&&Xe(e,r,null,!1,!1))&&(""!==i&&(i+=","+(e.condenseFlow?"":" ")),i+=e.dump);e.tag=a,e.dump="["+i+"]"}(e,r,e.dump),g&&(e.dump="&ref_"+u+" "+e.dump));else{if("[object String]"!==p){if("[object Undefined]"===p)return!1;if(e.skipInvalid)return!1;throw new a("unacceptable kind of an object to dump "+p)}"?"!==e.tag&&ze(e,e.dump,r,n,l)}null!==e.tag&&"?"!==e.tag&&(c=encodeURI("!"===e.tag[0]?e.tag.slice(1):e.tag).replace(/!/g,"%21"),c="!"===e.tag[0]?"!"+c:"tag:yaml.org,2002:"===c.slice(0,18)?"!!"+c.slice(18):"!<"+c+">",e.dump=c+" "+e.dump)}return!0}function er(e,r){var t,o,s=[],n=[];for(rr(e,s,n),t=0,o=n.length;t<o;t+=1)r.duplicates.push(s[n[t]]);r.usedDuplicates=new Array(o)}function rr(e,r,t){var o,s,n;if(null!==e&&"object"===typeof e)if(-1!==(s=r.indexOf(e)))-1===t.indexOf(s)&&t.push(s);else if(r.push(e),Array.isArray(e))for(s=0,n=e.length;s<n;s+=1)rr(e[s],r,t);else for(s=0,n=(o=Object.keys(e)).length;s<n;s+=1)rr(e[o[s]],r,t)}function tr(e,r){return function(){throw new Error("Function yaml."+e+" is removed in js-yaml 4. Use yaml."+r+" instead, which is now safe by default.")}}const or={Type:d,Schema:f,FAILSAFE_SCHEMA:w,JSON_SCHEMA:F,CORE_SCHEMA:R,DEFAULT_SCHEMA:$,load:Se.load,loadAll:Se.loadAll,dump:{dump:function(e,r){var t=new je(r=r||{});t.noRefs||er(e,t);var o=e;return t.replacer&&(o=t.replacer.call({"":o},"",o)),Xe(t,0,o,!0,!0)?t.dump+"\n":""}}.dump,YAMLException:a,types:{binary:j,float:S,map:b,null:_,pairs:N,set:B,timestamp:D,bool:y,int:G,merge:L,omap:H,seq:E,str:T},safeLoad:tr("safeLoad","load"),safeLoadAll:tr("safeLoadAll","loadAll"),safeDump:tr("safeDump","dump")}},97036:(e,r,t)=>{function o(){return"object"===typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"===typeof process&&void 0!==process.version?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function s(e,r,t,o){if("function"!==typeof t)throw new Error("method for before hook must be a function");return o||(o={}),Array.isArray(r)?r.reverse().reduce((r,t)=>s.bind(null,e,t,r,o),t)():Promise.resolve().then(()=>e.registry[r]?e.registry[r].reduce((e,r)=>r.hook.bind(null,e,o),t)():t(o))}function n(e,r,t,o){const s=o;e.registry[t]||(e.registry[t]=[]),"before"===r&&(o=(e,r)=>Promise.resolve().then(s.bind(null,r)).then(e.bind(null,r))),"after"===r&&(o=(e,r)=>{let t;return Promise.resolve().then(e.bind(null,r)).then(e=>(t=e,s(t,r))).then(()=>t)}),"error"===r&&(o=(e,r)=>Promise.resolve().then(e.bind(null,r)).catch(e=>s(e,r))),e.registry[t].push({hook:o,orig:s})}function i(e,r,t){if(!e.registry[r])return;const o=e.registry[r].map(e=>e.orig).indexOf(t);-1!==o&&e.registry[r].splice(o,1)}t.d(r,{Octokit:()=>ie});const a=Function.bind,c=a.bind(a);function p(e,r,t){const o=c(i,null).apply(null,t?[r,t]:[r]);e.api={remove:o},e.remove=o,["before","error","after","wrap"].forEach(o=>{const s=t?[r,o,t]:[r,o];e[o]=e.api[o]=c(n,null).apply(null,s)})}const l={Singular:function(){const e=Symbol("Singular"),r={registry:{}},t=s.bind(null,r,e);return p(t,r,e),t},Collection:function(){const e={registry:{}},r=s.bind(null,e);return p(r,e),r}};var u=`octokit-endpoint.js/0.0.0-development ${o()}`;function g(e,r){const t=Object.assign({},e);return Object.keys(r).forEach(o=>{!function(e){if("object"!==typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const r=Object.getPrototypeOf(e);if(null===r)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return"function"===typeof t&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}(r[o])?Object.assign(t,{[o]:r[o]}):o in e?t[o]=g(e[o],r[o]):Object.assign(t,{[o]:r[o]})}),t}function d(e){for(const r in e)void 0===e[r]&&delete e[r];return e}function m(e,r,t){if("string"===typeof r){let[e,o]=r.split(" ");t=Object.assign(o?{method:e,url:o}:{url:e},t)}else t=Object.assign({},r);var o;t.headers=(o=t.headers)?Object.keys(o).reduce((e,r)=>(e[r.toLowerCase()]=o[r],e),{}):{},d(t),d(t.headers);const s=g(e||{},t);return"/graphql"===t.url&&(e&&e.mediaType.previews?.length&&(s.mediaType.previews=e.mediaType.previews.filter(e=>!s.mediaType.previews.includes(e)).concat(s.mediaType.previews)),s.mediaType.previews=(s.mediaType.previews||[]).map(e=>e.replace(/-preview/,""))),s}var h=/\{[^{}}]+\}/g;function f(e){return e.replace(/(?:^\W+)|(?:(?<!\W)\W+$)/g,"").split(/,/)}function T(e,r){const t={__proto__:null};for(const o of Object.keys(e))-1===r.indexOf(o)&&(t[o]=e[o]);return t}function E(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e}).join("")}function b(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function w(e,r,t){return r="+"===e||"#"===e?E(r):b(r),t?b(t)+"="+r:r}function _(e){return void 0!==e&&null!==e}function y(e){return";"===e||"&"===e||"?"===e}function k(e,r){var t=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(e,o,s){if(o){let e="";const s=[];if(-1!==t.indexOf(o.charAt(0))&&(e=o.charAt(0),o=o.substr(1)),o.split(/,/g).forEach(function(t){var o=/([^:\*]*)(?::(\d+)|(\*))?/.exec(t);s.push(function(e,r,t,o){var s=e[t],n=[];if(_(s)&&""!==s)if("string"===typeof s||"number"===typeof s||"boolean"===typeof s)s=s.toString(),o&&"*"!==o&&(s=s.substring(0,parseInt(o,10))),n.push(w(r,s,y(r)?t:""));else if("*"===o)Array.isArray(s)?s.filter(_).forEach(function(e){n.push(w(r,e,y(r)?t:""))}):Object.keys(s).forEach(function(e){_(s[e])&&n.push(w(r,s[e],e))});else{const e=[];Array.isArray(s)?s.filter(_).forEach(function(t){e.push(w(r,t))}):Object.keys(s).forEach(function(t){_(s[t])&&(e.push(b(t)),e.push(w(r,s[t].toString())))}),y(r)?n.push(b(t)+"="+e.join(",")):0!==e.length&&n.push(e.join(","))}else";"===r?_(s)&&n.push(b(t)):""!==s||"&"!==r&&"?"!==r?""===s&&n.push(""):n.push(b(t)+"=");return n}(r,e,o[1],o[2]||o[3]))}),e&&"+"!==e){var n=",";return"?"===e?n="&":"#"!==e&&(n=e),(0!==s.length?e:"")+s.join(n)}return s.join(",")}return E(s)}),"/"===e?e:e.replace(/\/$/,"")}function v(e){let r,t=e.method.toUpperCase(),o=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),s=Object.assign({},e.headers),n=T(e,["method","baseUrl","url","headers","request","mediaType"]);const i=function(e){const r=e.match(h);return r?r.map(f).reduce((e,r)=>e.concat(r),[]):[]}(o);var a;o=(a=o,{expand:k.bind(null,a)}).expand(n),/^http/.test(o)||(o=e.baseUrl+o);const c=T(n,Object.keys(e).filter(e=>i.includes(e)).concat("baseUrl"));if(!/application\/octet-stream/i.test(s.accept)&&(e.mediaType.format&&(s.accept=s.accept.split(/,/).map(r=>r.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),o.endsWith("/graphql")&&e.mediaType.previews?.length)){const r=s.accept.match(/(?<![\w-])[\w-]+(?=-preview)/g)||[];s.accept=r.concat(e.mediaType.previews).map(r=>`application/vnd.github.${r}-preview${e.mediaType.format?`.${e.mediaType.format}`:"+json"}`).join(",")}return["GET","HEAD"].includes(t)?o=function(e,r){const t=/\?/.test(e)?"&":"?",o=Object.keys(r);return 0===o.length?e:e+t+o.map(e=>"q"===e?"q="+r.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(r[e])}`).join("&")}(o,c):"data"in c?r=c.data:Object.keys(c).length&&(r=c),s["content-type"]||"undefined"===typeof r||(s["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&"undefined"===typeof r&&(r=""),Object.assign({method:t,url:o,headers:s},"undefined"!==typeof r?{body:r}:null,e.request?{request:e.request}:null)}function A(e,r,t){return v(m(e,r,t))}var G=function e(r,t){const o=m(r,t),s=A.bind(null,o);return Object.assign(s,{DEFAULTS:o,defaults:e.bind(null,o),merge:m.bind(null,o),parse:v})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":u},mediaType:{format:""}}),O=t(28998);class P extends Error{name;status;request;response;constructor(e,r,t){super(e),this.name="HttpError",this.status=Number.parseInt(r),Number.isNaN(this.status)&&(this.status=0),"response"in t&&(this.response=t.response);const o=Object.assign({},t.request);t.request.headers.authorization&&(o.headers=Object.assign({},t.request.headers,{authorization:t.request.headers.authorization.replace(/(?<! ) .*$/," [REDACTED]")})),o.url=o.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=o}}async function S(e){const r=e.request?.fetch||globalThis.fetch;if(!r)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const t=e.request?.log||console,o=!1!==e.request?.parseSuccessResponseBody,s=function(e){if("object"!==typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const r=Object.getPrototypeOf(e);if(null===r)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return"function"===typeof t&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,n=Object.fromEntries(Object.entries(e.headers).map(e=>{let[r,t]=e;return[r,String(t)]}));let i;try{i=await r(e.url,{method:e.method,body:s,redirect:e.request?.redirect,headers:n,signal:e.request?.signal,...e.body&&{duplex:"half"}})}catch(u){let r="Unknown Error";if(u instanceof Error){if("AbortError"===u.name)throw u.status=500,u;r=u.message,"TypeError"===u.name&&"cause"in u&&(u.cause instanceof Error?r=u.cause.message:"string"===typeof u.cause&&(r=u.cause))}const t=new P(r,500,{request:e});throw t.cause=u,t}const a=i.status,c=i.url,p={};for(const[g,d]of i.headers)p[g]=d;const l={url:c,status:a,headers:p,data:""};if("deprecation"in p){const r=p.link&&p.link.match(/<([^<>]+)>; rel="deprecation"/),o=r&&r.pop();t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${p.sunset}${o?`. See ${o}`:""}`)}if(204===a||205===a)return l;if("HEAD"===e.method){if(a<400)return l;throw new P(i.statusText,a,{response:l,request:e})}if(304===a)throw l.data=await F(i),new P("Not modified",a,{response:l,request:e});if(a>=400)throw l.data=await F(i),new P(function(e){if("string"===typeof e)return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){const r="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(e=>JSON.stringify(e)).join(", ")}${r}`:`${e.message}${r}`}return`Unknown error: ${JSON.stringify(e)}`}(l.data),a,{response:l,request:e});return l.data=o?await F(i):i.body,l}async function F(e){const r=e.headers.get("content-type");if(!r)return e.text().catch(()=>"");const t=(0,O.xL)(r);if(!function(e){return"application/json"===e.type||"application/scim+json"===e.type}(t))return t.type.startsWith("text/")||"utf-8"===t.parameters.charset?.toLowerCase()?e.text().catch(()=>""):e.arrayBuffer().catch(()=>new ArrayBuffer(0));{let r="";try{return r=await e.text(),JSON.parse(r)}catch(o){return r}}}var R=function e(r,t){const o=r.defaults(t);return Object.assign(function(r,t){const s=o.merge(r,t);if(!s.request||!s.request.hook)return S(o.parse(s));const n=(e,r)=>S(o.parse(o.merge(e,r)));return Object.assign(n,{endpoint:o,defaults:e.bind(null,o)}),s.request.hook(n,s)},{endpoint:o,defaults:e.bind(null,o)})}(G,{headers:{"user-agent":`octokit-request.js/10.0.3 ${o()}`}});var C=class extends Error{constructor(e,r,t){super("Request failed due to following response errors:\n"+t.errors.map(e=>` - ${e.message}`).join("\n")),this.request=e,this.headers=r,this.response=t,this.errors=t.errors,this.data=t.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="GraphqlResponseError";errors;data},U=["method","baseUrl","url","headers","request","query","mediaType","operationName"],D=["query","method","url"],L=/\/api\/v3\/?$/;function I(e,r){const t=e.defaults(r);return Object.assign((e,r)=>function(e,r,t){if(t){if("string"===typeof r&&"query"in t)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const e in t)if(D.includes(e))return Promise.reject(new Error(`[@octokit/graphql] "${e}" cannot be used as variable name`))}const o="string"===typeof r?Object.assign({query:r},t):r,s=Object.keys(o).reduce((e,r)=>U.includes(r)?(e[r]=o[r],e):(e.variables||(e.variables={}),e.variables[r]=o[r],e),{}),n=o.baseUrl||e.endpoint.DEFAULTS.baseUrl;return L.test(n)&&(s.url=n.replace(L,"/api/graphql")),e(s).then(e=>{if(e.data.errors){const r={};for(const t of Object.keys(e.headers))r[t]=e.headers[t];throw new C(s,r,e.data)}return e.data.data})}(t,e,r),{defaults:I.bind(null,t),endpoint:t.endpoint})}I(R,{headers:{"user-agent":`octokit-graphql.js/0.0.0-development ${o()}`},method:"POST",url:"/graphql"});var j="(?:[a-zA-Z0-9_-]+)",x=new RegExp(`^${j}\\.${j}\\.${j}$`),q=x.test.bind(x);async function H(e){const r=q(e),t=e.startsWith("v1.")||e.startsWith("ghs_"),o=e.startsWith("ghu_");return{type:"token",token:e,tokenType:r?"app":t?"installation":o?"user-to-server":"oauth"}}async function M(e,r,t,o){const s=r.endpoint.merge(t,o);return s.headers.authorization=function(e){return 3===e.split(/\./).length?`bearer ${e}`:`token ${e}`}(e),r(s)}var N=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!==typeof e)throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(H.bind(null,e),{hook:M.bind(null,e)})};const W="7.0.3",B=()=>{},$=console.warn.bind(console),V=console.error.bind(console);const z=`octokit-core.js/${W} ${o()}`;class K{static VERSION=(()=>W)();static defaults(e){return class extends(this){constructor(){const r=(arguments.length<=0?void 0:arguments[0])||{};super("function"!==typeof e?Object.assign({},e,r,r.userAgent&&e.userAgent?{userAgent:`${r.userAgent} ${e.userAgent}`}:null):e(r))}}}static plugins=[];static plugin(){const e=this.plugins;for(var r=arguments.length,t=new Array(r),o=0;o<r;o++)t[o]=arguments[o];return class extends(this){static plugins=(()=>e.concat(t.filter(r=>!e.includes(r))))()}}constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const r=new l.Collection,t={baseUrl:R.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:r.bind(null,"request")}),mediaType:{previews:[],format:""}};var o;if(t.headers["user-agent"]=e.userAgent?`${e.userAgent} ${z}`:z,e.baseUrl&&(t.baseUrl=e.baseUrl),e.previews&&(t.mediaType.previews=e.previews),e.timeZone&&(t.headers["time-zone"]=e.timeZone),this.request=R.defaults(t),this.graphql=(o=this.request,I(o,{method:"POST",url:"/graphql"})).defaults(t),this.log=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return"function"!==typeof e.debug&&(e.debug=B),"function"!==typeof e.info&&(e.info=B),"function"!==typeof e.warn&&(e.warn=$),"function"!==typeof e.error&&(e.error=V),e}(e.log),this.hook=r,e.authStrategy){const{authStrategy:t,...o}=e,s=t(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:o},e.auth));r.wrap("request",s.hook),this.auth=s}else if(e.auth){const t=N(e.auth);r.wrap("request",t.hook),this.auth=t}else this.auth=async()=>({type:"unauthenticated"});const s=this.constructor;for(let n=0;n<s.plugins.length;++n)Object.assign(this,s.plugins[n](this,e))}request;graphql;log;hook;auth}function Y(e){e.hook.wrap("request",(r,t)=>{e.log.debug("request",t);const o=Date.now(),s=e.request.endpoint.parse(t),n=s.url.replace(t.baseUrl,"");return r(t).then(r=>{const t=r.headers["x-github-request-id"];return e.log.info(`${s.method} ${n} - ${r.status} with id ${t} in ${Date.now()-o}ms`),r}).catch(r=>{const t=r.response?.headers["x-github-request-id"]||"UNKNOWN";throw e.log.error(`${s.method} ${n} - ${r.status} with id ${t} in ${Date.now()-o}ms`),r})})}Y.VERSION="6.0.0";function J(e,r,t){const o="function"===typeof r?r.endpoint(t):e.request.endpoint(r,t),s="function"===typeof r?r:e.request,n=o.method,i=o.headers;let a=o.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:!0};try{const e=function(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data)&&!("total_commits"in e.data)||"url"in e.data)return e;const r=e.data.incomplete_results,t=e.data.repository_selection,o=e.data.total_count,s=e.data.total_commits;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count,delete e.data.total_commits;const n=Object.keys(e.data)[0],i=e.data[n];return e.data=i,"undefined"!==typeof r&&(e.data.incomplete_results=r),"undefined"!==typeof t&&(e.data.repository_selection=t),e.data.total_count=o,e.data.total_commits=s,e}(await s({method:n,url:a,headers:i}));if(a=((e.headers.link||"").match(/<([^<>]+)>;\s*rel="next"/)||[])[1],!a&&"total_commits"in e.data){const r=new URL(e.url),t=r.searchParams,o=parseInt(t.get("page")||"1",10);o*parseInt(t.get("per_page")||"250",10)<e.data.total_commits&&(t.set("page",String(o+1)),a=r.toString())}return{value:e}}catch(e){if(409!==e.status)throw e;return a="",{value:{status:200,headers:{},data:[]}}}}})}}function Z(e,r,t,o){return"function"===typeof t&&(o=t,t=void 0),Q(e,[],J(e,r,t)[Symbol.asyncIterator](),o)}function Q(e,r,t,o){return t.next().then(s=>{if(s.done)return r;let n=!1;return r=r.concat(o?o(s.value,function(){n=!0}):s.value.data),n?r:Q(e,r,t,o)})}Object.assign(Z,{iterator:J});function X(e){return{paginate:Object.assign(Z.bind(null,e),{iterator:J.bind(null,e)})}}X.VERSION="0.0.0-development";const ee="16.0.0";var re={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addRepoAccessToSelfHostedRunnerGroupInOrg:["PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createHostedRunnerForOrg:["POST /orgs/{org}/actions/hosted-runners"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteHostedRunnerForOrg:["DELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getHostedRunnerForOrg:["GET /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],getHostedRunnersGithubOwnedImagesForOrg:["GET /orgs/{org}/actions/hosted-runners/images/github-owned"],getHostedRunnersLimitsForOrg:["GET /orgs/{org}/actions/hosted-runners/limits"],getHostedRunnersMachineSpecsForOrg:["GET /orgs/{org}/actions/hosted-runners/machine-sizes"],getHostedRunnersPartnerImagesForOrg:["GET /orgs/{org}/actions/hosted-runners/images/partner"],getHostedRunnersPlatformsForOrg:["GET /orgs/{org}/actions/hosted-runners/platforms"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listGithubHostedRunnersInGroupForOrg:["GET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners"],listHostedRunnersForOrg:["GET /orgs/{org}/actions/hosted-runners"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateHostedRunnerForOrg:["PATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubBillingUsageReportOrg:["GET /organizations/{org}/settings/billing/usage"],getGithubBillingUsageReportUser:["GET /users/{username}/settings/billing/usage"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},campaigns:{createCampaign:["POST /orgs/{org}/campaigns"],deleteCampaign:["DELETE /orgs/{org}/campaigns/{campaign_number}"],getCampaignSummary:["GET /orgs/{org}/campaigns/{campaign_number}"],listOrgCampaigns:["GET /orgs/{org}/campaigns"],updateCampaign:["PATCH /orgs/{org}/campaigns/{campaign_number}"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{commitAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits"],createAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],createVariantAnalysis:["POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"],deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],deleteCodeqlDatabase:["DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getAutofix:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],getVariantAnalysis:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"],getVariantAnalysisRepoTask:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codeSecurity:{attachConfiguration:["POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"],attachEnterpriseConfiguration:["POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach"],createConfiguration:["POST /orgs/{org}/code-security/configurations"],createConfigurationForEnterprise:["POST /enterprises/{enterprise}/code-security/configurations"],deleteConfiguration:["DELETE /orgs/{org}/code-security/configurations/{configuration_id}"],deleteConfigurationForEnterprise:["DELETE /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],detachConfiguration:["DELETE /orgs/{org}/code-security/configurations/detach"],getConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}"],getConfigurationForRepository:["GET /repos/{owner}/{repo}/code-security-configuration"],getConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations"],getConfigurationsForOrg:["GET /orgs/{org}/code-security/configurations"],getDefaultConfigurations:["GET /orgs/{org}/code-security/configurations/defaults"],getDefaultConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/defaults"],getRepositoriesForConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories"],getRepositoriesForEnterpriseConfiguration:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories"],getSingleConfigurationForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],setConfigurationAsDefault:["PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"],setConfigurationAsDefaultForEnterprise:["PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults"],updateConfiguration:["PATCH /orgs/{org}/code-security/configurations/{configuration_id}"],updateEnterpriseConfiguration:["PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],copilotMetricsForOrganization:["GET /orgs/{org}/copilot/metrics"],copilotMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/metrics"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"]},credentials:{revoke:["POST /credentials/revoke"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},hostedCompute:{createNetworkConfigurationForOrg:["POST /orgs/{org}/settings/network-configurations"],deleteNetworkConfigurationFromOrg:["DELETE /orgs/{org}/settings/network-configurations/{network_configuration_id}"],getNetworkConfigurationForOrg:["GET /orgs/{org}/settings/network-configurations/{network_configuration_id}"],getNetworkSettingsForOrg:["GET /orgs/{org}/settings/network-settings/{network_settings_id}"],listNetworkConfigurationsForOrg:["GET /orgs/{org}/settings/network-configurations"],updateNetworkConfigurationForOrg:["PATCH /orgs/{org}/settings/network-configurations/{network_configuration_id}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],addSubIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],listSubIssues:["GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeSubIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue"],reprioritizeSubIssue:["PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.addSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team"}],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createIssueType:["POST /orgs/{org}/issue-types"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteIssueType:["DELETE /orgs/{org}/issue-types/{issue_type_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}",{},{deprecated:"octokit.rest.orgs.enableOrDisableSecurityProductOnAllOrgRepos() is deprecated, see https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization"}],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getOrgRulesetHistory:["GET /orgs/{org}/rulesets/{ruleset_id}/history"],getOrgRulesetVersion:["GET /orgs/{org}/rulesets/{ruleset_id}/history/{version_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listAttestations:["GET /orgs/{org}/attestations/{subject_digest}"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listIssueTypes:["GET /orgs/{org}/issue-types"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers",{},{deprecated:"octokit.rest.orgs.listSecurityManagerTeams() is deprecated, see https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams"}],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.removeSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team"}],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateIssueType:["PUT /orgs/{org}/issue-types/{issue_type_id}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},privateRegistries:{createOrgPrivateRegistry:["POST /orgs/{org}/private-registries"],deleteOrgPrivateRegistry:["DELETE /orgs/{org}/private-registries/{secret_name}"],getOrgPrivateRegistry:["GET /orgs/{org}/private-registries/{secret_name}"],getOrgPublicKey:["GET /orgs/{org}/private-registries/public-key"],listOrgPrivateRegistries:["GET /orgs/{org}/private-registries"],updateOrgPrivateRegistry:["PATCH /orgs/{org}/private-registries/{secret_name}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAttestation:["POST /repos/{owner}/{repo}/attestations"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesetHistory:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history"],getRepoRulesetVersion:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAttestations:["GET /repos/{owner}/{repo}/attestations/{subject_digest}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues",{},{deprecated:"octokit.rest.search.issuesAndPullRequests() is deprecated, see https://docs.github.com/rest/search/search#search-issues-and-pull-requests"}],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{createPushProtectionBypass:["POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses"],getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],getScanHistory:["GET /repos/{owner}/{repo}/secret-scanning/scan-history"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getById:["GET /user/{account_id}"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listAttestations:["GET /users/{username}/attestations/{subject_digest}"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};const te=new Map;for(const[ae,ce]of Object.entries(re))for(const[e,r]of Object.entries(ce)){const[t,o,s]=r,[n,i]=t.split(/ /),a=Object.assign({method:n,url:i},o);te.has(ae)||te.set(ae,new Map),te.get(ae).set(e,{scope:ae,methodName:e,endpointDefaults:a,decorations:s})}const oe={has(e,r){let{scope:t}=e;return te.get(t).has(r)},getOwnPropertyDescriptor(e,r){return{value:this.get(e,r),configurable:!0,writable:!0,enumerable:!0}},defineProperty:(e,r,t)=>(Object.defineProperty(e.cache,r,t),!0),deleteProperty:(e,r)=>(delete e.cache[r],!0),ownKeys(e){let{scope:r}=e;return[...te.get(r).keys()]},set:(e,r,t)=>e.cache[r]=t,get(e,r){let{octokit:t,scope:o,cache:s}=e;if(s[r])return s[r];const n=te.get(o).get(r);if(!n)return;const{endpointDefaults:i,decorations:a}=n;return s[r]=a?function(e,r,t,o,s){const n=e.request.defaults(o);function i(){let o=n.endpoint.merge(...arguments);if(s.mapToData)return o=Object.assign({},o,{data:o[s.mapToData],[s.mapToData]:void 0}),n(o);if(s.renamed){const[o,n]=s.renamed;e.log.warn(`octokit.${r}.${t}() has been renamed to octokit.${o}.${n}()`)}if(s.deprecated&&e.log.warn(s.deprecated),s.renamedParameters){const o=n.endpoint.merge(...arguments);for(const[n,i]of Object.entries(s.renamedParameters))n in o&&(e.log.warn(`"${n}" parameter is deprecated for "octokit.${r}.${t}()". Use "${i}" instead`),i in o||(o[i]=o[n]),delete o[n]);return n(o)}return n(...arguments)}return Object.assign(i,n)}(t,o,r,i,a):t.request.defaults(i),s[r]}};function se(e){const r={};for(const t of te.keys())r[t]=new Proxy({octokit:e,scope:t,cache:{}},oe);return r}function ne(e){const r=se(e);return{...r,rest:r}}ne.VERSION=ee;const ie=K.plugin(Y,ne,X).defaults({userAgent:"octokit-rest.js/22.0.0"})}}]);
//# sourceMappingURL=482.7de19228.chunk.js.map