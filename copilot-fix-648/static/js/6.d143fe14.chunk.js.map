{"version":3,"file":"static/js/6.d143fe14.chunk.js","mappings":"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","sources":["utils/navigationUtils.js","services/dakComplianceService.js","components/SaveDialog.js","components/StagingGround.js","components/Publications.js","components/ForkStatusBar.js","components/DAKDashboardWithFramework.js"],"sourcesContent":["/**\n * Utility functions for handling navigation with command-click support\n */\n\nimport { validateUrlScheme } from './securityUtils';\n\n/**\n * Detects if a click event should open in a new tab\n * @param {MouseEvent} event - The click event\n * @returns {boolean} - True if should open in new tab (Ctrl/Cmd+click)\n */\nexport const shouldOpenInNewTab = (event) => {\n  return !!(event?.ctrlKey || event?.metaKey); // Ctrl on Windows/Linux, Cmd on Mac\n};\n\n/**\n * Constructs a full URL from a relative path using the current base URL\n * @param {string} relativePath - The relative path (e.g., '/dashboard/user/repo')\n * @returns {string} - The full URL\n */\nexport const constructFullUrl = (relativePath) => {\n  // Validate the relative path to prevent XSS\n  if (!relativePath || typeof relativePath !== 'string') {\n    return window.location.origin;\n  }\n  \n  // Basic validation - don't allow dangerous protocols\n  if (relativePath.includes('javascript:') || relativePath.includes('data:')) { // eslint-disable-line no-script-url\n    console.warn('Blocked dangerous URL scheme in path:', relativePath);\n    return window.location.origin;\n  }\n  \n  const basePath = process.env.PUBLIC_URL || '';\n  const baseUrl = window.location.origin;\n  \n  // Remove leading slash from relativePath if present to avoid double slashes\n  const cleanPath = relativePath.startsWith('/') ? relativePath.slice(1) : relativePath;\n  \n  // Only add basePath if it's not empty\n  if (!basePath) {\n    return `${baseUrl}/${cleanPath}`;\n  }\n  \n  // Ensure basePath ends with slash for proper joining\n  const cleanBasePath = basePath.endsWith('/') ? basePath : basePath + '/';\n  \n  return `${baseUrl}${cleanBasePath}${cleanPath}`;\n};\n\n/**\n * Handles navigation with command-click support\n * @param {MouseEvent} event - The click event\n * @param {string} path - The navigation path\n * @param {Function} navigate - React Router navigate function\n * @param {Object} state - Optional state to pass with navigation\n */\nexport const handleNavigationClick = (event, path, navigate, state = null) => {\n  // Validate the path to prevent malicious navigation\n  if (!path || typeof path !== 'string') {\n    console.warn('Invalid navigation path provided');\n    return;\n  }\n  \n  // For external URLs, validate the scheme\n  if (path.includes('://')) {\n    if (!validateUrlScheme(path)) {\n      console.warn('Blocked navigation to potentially dangerous URL:', path);\n      return;\n    }\n  }\n  \n  if (shouldOpenInNewTab(event)) {\n    // Open in new tab\n    const fullUrl = constructFullUrl(path);\n    window.open(fullUrl, '_blank', 'noopener,noreferrer');\n  } else {\n    // Navigate in same tab\n    if (state) {\n      navigate(path, { state });\n    } else {\n      navigate(path);\n    }\n  }\n};\n\n/**\n * Creates a click handler that supports command-click for new tabs\n * @param {string} path - The navigation path\n * @param {Function} navigate - React Router navigate function\n * @param {Object} state - Optional state to pass with navigation\n * @returns {Function} - Click handler function\n */\nexport const createNavigationClickHandler = (path, navigate, state = null) => {\n  return (event) => {\n    handleNavigationClick(event, path, navigate, state);\n  };\n};","/**\n * DAK Compliance Service\n * \n * Provides comprehensive validation for DAK components with support for error, warning, and info levels.\n * Designed to work in multiple environments: React client-side, command-line, and IDE integration.\n */\n\nimport yaml from 'js-yaml';\nimport Ajv from 'ajv';\nimport addFormats from 'ajv-formats';\n\n// Import schema as a module\nconst sushiConfigSchema = require('../schemas/sushi-config.json');\n\nclass DAKComplianceService {\n  constructor() {\n    this.validators = new Map();\n    this.initializeSchemaValidator();\n    this.initializeDefaultValidators();\n  }\n\n  /**\n   * Initialize AJV schema validator for sushi-config.yaml\n   */\n  initializeSchemaValidator() {\n    this.ajv = new Ajv({ allErrors: true, verbose: true });\n    addFormats(this.ajv);\n    this.sushiConfigValidator = this.ajv.compile(sushiConfigSchema);\n  }\n\n  /**\n   * Initialize default validators for common DAK file types\n   */\n  initializeDefaultValidators() {\n    // XML file validators (general)\n    this.addValidator('xml', 'xml-well-formed', {\n      level: 'error',\n      description: 'XML files must be well-formed',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    // BPMN file validators\n    this.addValidator('bpmn', 'xml-well-formed', {\n      level: 'error',\n      description: 'BPMN files must be well-formed XML',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    this.addValidator('bpmn', 'bpmn-namespace', {\n      level: 'error',\n      description: 'BPMN files must use correct BPMN 2.0 namespace',\n      validator: this.validateBPMNNamespace.bind(this)\n    });\n\n    this.addValidator('bpmn', 'has-start-event', {\n      level: 'warning',\n      description: 'BPMN process should have at least one start event',\n      validator: this.validateBPMNStartEvent.bind(this)\n    });\n\n    // DMN file validators\n    this.addValidator('dmn', 'xml-well-formed', {\n      level: 'error',\n      description: 'DMN files must be well-formed XML',\n      validator: this.validateXMLWellFormed.bind(this)\n    });\n\n    this.addValidator('dmn', 'dmn-namespace', {\n      level: 'error',\n      description: 'DMN files must use correct DMN 1.3 namespace',\n      validator: this.validateDMNNamespace.bind(this)\n    });\n\n    // JSON file validators\n    this.addValidator('json', 'json-valid', {\n      level: 'error',\n      description: 'JSON files must be valid JSON',\n      validator: this.validateJSONSyntax.bind(this)\n    });\n\n    // FHIR resource validators\n    this.addValidator('json', 'fhir-resource-type', {\n      level: 'info',\n      description: 'FHIR resources should have valid resourceType',\n      validator: this.validateFHIRResourceType.bind(this)\n    });\n\n    // General file validators\n    this.addValidator('*', 'file-size-limit', {\n      level: 'warning',\n      description: 'Files should be under 1MB for optimal performance',\n      validator: this.validateFileSize.bind(this)\n    });\n\n    this.addValidator('*', 'filename-conventions', {\n      level: 'info',\n      description: 'Files should follow naming conventions',\n      validator: this.validateFilenameConventions.bind(this)\n    });\n\n    // WHO SMART Guidelines specific validators\n    this.addValidator('yaml', 'sushi-config-valid', {\n      level: 'error',\n      description: 'sushi-config.yaml must be valid and contain required fields',\n      validator: this.validateSushiConfig.bind(this)\n    });\n  }\n\n  /**\n   * Add a new validator\n   */\n  addValidator(fileType, validatorId, config) {\n    if (!this.validators.has(fileType)) {\n      this.validators.set(fileType, new Map());\n    }\n    this.validators.get(fileType).set(validatorId, config);\n  }\n\n  /**\n   * Remove a validator\n   */\n  removeValidator(fileType, validatorId) {\n    if (this.validators.has(fileType)) {\n      this.validators.get(fileType).delete(validatorId);\n    }\n  }\n\n  /**\n   * Validate a single file\n   */\n  async validateFile(filePath, content) {\n    const results = [];\n    const fileExtension = this.getFileExtension(filePath);\n    const fileName = this.getFileName(filePath);\n\n    // Get validators for this file type and universal validators\n    const typeValidators = this.validators.get(fileExtension) || new Map();\n    const universalValidators = this.validators.get('*') || new Map();\n\n    // Run type-specific validators\n    for (const [validatorId, config] of typeValidators) {\n      try {\n        const result = await config.validator(filePath, content, fileName);\n        if (result) {\n          results.push({\n            validatorId,\n            level: config.level,\n            description: config.description,\n            ...result\n          });\n        }\n      } catch (error) {\n        results.push({\n          validatorId,\n          level: 'error',\n          description: 'Validator execution failed',\n          message: error.message,\n          filePath\n        });\n      }\n    }\n\n    // Run universal validators\n    for (const [validatorId, config] of universalValidators) {\n      try {\n        const result = await config.validator(filePath, content, fileName);\n        if (result) {\n          results.push({\n            validatorId,\n            level: config.level,\n            description: config.description,\n            ...result\n          });\n        }\n      } catch (error) {\n        results.push({\n          validatorId,\n          level: 'error',\n          description: 'Validator execution failed',\n          message: error.message,\n          filePath\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Validate entire staging ground\n   */\n  async validateStagingGround(stagingGround) {\n    const results = {\n      summary: { error: 0, warning: 0, info: 0 },\n      files: {},\n      validatedAt: Date.now()\n    };\n\n    for (const file of stagingGround.files) {\n      const fileResults = await this.validateFile(file.path, file.content);\n      results.files[file.path] = fileResults;\n\n      // Update summary counts\n      fileResults.forEach(result => {\n        if (result.level === 'error') results.summary.error++;\n        else if (result.level === 'warning') results.summary.warning++;\n        else if (result.level === 'info') results.summary.info++;\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Check if staging ground can be saved (no error-level violations)\n   */\n  async canSave(stagingGround) {\n    const validation = await this.validateStagingGround(stagingGround);\n    return validation.summary.error === 0;\n  }\n\n  // Validator implementations\n\n  async validateXMLWellFormed(filePath, content) {\n    try {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, 'text/xml');\n      const parserError = doc.querySelector('parsererror');\n      \n      if (parserError) {\n        return {\n          message: 'XML is not well-formed: ' + parserError.textContent,\n          filePath\n        };\n      }\n      return null;\n    } catch (error) {\n      return {\n        message: 'Failed to parse XML: ' + error.message,\n        filePath\n      };\n    }\n  }\n\n  async validateBPMNNamespace(filePath, content) {\n    if (!content.includes('xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"')) {\n      return {\n        message: 'BPMN file missing correct BPMN 2.0 namespace declaration',\n        filePath,\n        suggestion: 'Add xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" to root element'\n      };\n    }\n    return null;\n  }\n\n  async validateBPMNStartEvent(filePath, content) {\n    if (!content.includes('<startEvent') && !content.includes('<bpmn:startEvent')) {\n      return {\n        message: 'BPMN process should contain at least one start event',\n        filePath,\n        suggestion: 'Add a start event to begin the process flow'\n      };\n    }\n    return null;\n  }\n\n  async validateDMNNamespace(filePath, content) {\n    if (!content.includes('xmlns:dmn=\"https://www.omg.org/spec/DMN/20191111/MODEL/\"')) {\n      return {\n        message: 'DMN file missing correct DMN 1.3 namespace declaration',\n        filePath,\n        suggestion: 'Add xmlns:dmn=\"https://www.omg.org/spec/DMN/20191111/MODEL/\" to root element'\n      };\n    }\n    return null;\n  }\n\n  async validateJSONSyntax(filePath, content) {\n    try {\n      JSON.parse(content);\n      return null;\n    } catch (error) {\n      return {\n        message: 'Invalid JSON syntax: ' + error.message,\n        filePath\n      };\n    }\n  }\n\n  async validateFHIRResourceType(filePath, content) {\n    try {\n      const json = JSON.parse(content);\n      const validResourceTypes = [\n        'StructureDefinition', 'ValueSet', 'CodeSystem', 'ConceptMap',\n        'Questionnaire', 'PlanDefinition', 'ActivityDefinition', 'Measure',\n        'Library', 'ImplementationGuide', 'Bundle', 'Patient', 'Practitioner'\n      ];\n\n      if (json.resourceType && !validResourceTypes.includes(json.resourceType)) {\n        return {\n          message: `Unknown FHIR resourceType: ${json.resourceType}`,\n          filePath,\n          suggestion: 'Verify the resourceType is correct for FHIR R4'\n        };\n      }\n      return null;\n    } catch (error) {\n      // Not JSON, skip this validator\n      return null;\n    }\n  }\n\n  async validateFileSize(filePath, content) {\n    const sizeInBytes = new Blob([content]).size;\n    const maxSize = 1024 * 1024; // 1MB\n\n    if (sizeInBytes > maxSize) {\n      return {\n        message: `File size (${(sizeInBytes / 1024 / 1024).toFixed(1)}MB) exceeds recommended limit of 1MB`,\n        filePath,\n        suggestion: 'Consider breaking large files into smaller components'\n      };\n    }\n    return null;\n  }\n\n  async validateFilenameConventions(filePath, content) {\n    const fileName = this.getFileName(filePath);\n    const issues = [];\n\n    // Check for spaces in filename\n    if (fileName.includes(' ')) {\n      issues.push('avoid spaces in filenames');\n    }\n\n    // Check for special characters\n    if (/[<>:\"|?*]/.test(fileName)) {\n      issues.push('avoid special characters (<>:\"|?*)');\n    }\n\n    // Check for very long names\n    if (fileName.length > 100) {\n      issues.push('filename is very long (>100 characters)');\n    }\n\n    if (issues.length > 0) {\n      return {\n        message: `Filename convention issues: ${issues.join(', ')}`,\n        filePath,\n        suggestion: 'Use lowercase letters, numbers, hyphens, and underscores'\n      };\n    }\n    return null;\n  }\n\n  async validateSushiConfig(filePath, content) {\n    if (!filePath.endsWith('sushi-config.yaml')) {\n      return null;\n    }\n\n    try {\n      // Parse YAML content\n      let parsedConfig;\n      try {\n        parsedConfig = yaml.load(content);\n      } catch (yamlError) {\n        return {\n          message: `Invalid YAML syntax: ${yamlError.message}`,\n          filePath,\n          suggestion: 'Fix YAML syntax errors and ensure proper indentation'\n        };\n      }\n\n      if (!parsedConfig || typeof parsedConfig !== 'object') {\n        return {\n          message: 'sushi-config.yaml must contain a valid YAML object',\n          filePath,\n          suggestion: 'Ensure the file contains proper YAML object structure'\n        };\n      }\n\n      // Validate against JSON schema\n      const isValid = this.sushiConfigValidator(parsedConfig);\n      \n      if (!isValid) {\n        const errors = this.sushiConfigValidator.errors;\n        const errorMessages = errors.map(error => {\n          const field = error.instancePath ? error.instancePath.replace('/', '') : error.params?.missingProperty || 'root';\n          let message = `${field}: ${error.message}`;\n          \n          if (error.params?.allowedValues) {\n            message += ` (allowed: ${error.params.allowedValues.join(', ')})`;\n          }\n          \n          return message;\n        });\n\n        return {\n          message: `sushi-config.yaml validation errors: ${errorMessages.join('; ')}`,\n          filePath,\n          suggestion: 'Review the sushi-config.yaml specification at https://fshschool.org/docs/sushi/configuration/',\n          details: errors\n        };\n      }\n\n      // Additional WHO SMART Guidelines specific validation\n      const whoValidation = this.validateWHOSmartGuidelines(parsedConfig);\n      if (whoValidation) {\n        return whoValidation;\n      }\n\n      return null;\n    } catch (error) {\n      return {\n        message: 'Failed to validate sushi-config.yaml: ' + error.message,\n        filePath,\n        suggestion: 'Check file format and content structure'\n      };\n    }\n  }\n\n  /**\n   * Additional validation for WHO SMART Guidelines compliance\n   */\n  validateWHOSmartGuidelines(config) {\n    const issues = [];\n\n    // Check for smart.who.int.base dependency\n    if (!config.dependencies || !config.dependencies['smart.who.int.base']) {\n      issues.push('missing smart.who.int.base dependency (required for WHO DAK compliance)');\n    }\n\n    // Check canonical URL pattern for WHO guidelines\n    if (config.canonical && config.canonical.includes('smart.who.int')) {\n      if (!config.id.startsWith('smart.who.int')) {\n        issues.push('id should start with \"smart.who.int\" when using WHO canonical URL');\n      }\n    }\n\n    // Check for required WHO metadata\n    if (config.canonical && config.canonical.includes('smart.who.int')) {\n      if (!config.publisher || !config.publisher.toLowerCase().includes('world health organization')) {\n        issues.push('publisher should include \"World Health Organization\" for WHO guidelines');\n      }\n\n      if (!config.jurisdiction || !Array.isArray(config.jurisdiction)) {\n        issues.push('jurisdiction should be specified for WHO guidelines');\n      }\n    }\n\n    if (issues.length > 0) {\n      return {\n        message: `WHO SMART Guidelines compliance issues: ${issues.join(', ')}`,\n        filePath: 'sushi-config.yaml',\n        suggestion: 'Ensure compliance with WHO SMART Guidelines requirements'\n      };\n    }\n\n    return null;\n  }\n\n  // Utility methods\n\n  getFileExtension(filePath) {\n    const parts = filePath.split('.');\n    return parts.length > 1 ? parts[parts.length - 1].toLowerCase() : '';\n  }\n\n  getFileName(filePath) {\n    return filePath.split('/').pop() || filePath;\n  }\n\n  /**\n   * Format validation results for display\n   */\n  formatValidationResults(validation) {\n    const formatted = {\n      canSave: validation.summary.error === 0,\n      summary: validation.summary,\n      files: []\n    };\n\n    Object.entries(validation.files).forEach(([filePath, results]) => {\n      if (results.length > 0) {\n        formatted.files.push({\n          path: filePath,\n          issues: results.map(result => ({\n            level: result.level,\n            message: result.message,\n            description: result.description,\n            suggestion: result.suggestion\n          }))\n        });\n      }\n    });\n\n    return formatted;\n  }\n\n  /**\n   * Get validation summary for UI display\n   */\n  getValidationSummary(validation) {\n    return {\n      error: validation.summary.error,\n      warning: validation.summary.warning,\n      info: validation.summary.info,\n      canSave: validation.summary.error === 0,\n      hasIssues: validation.summary.error + validation.summary.warning + validation.summary.info > 0\n    };\n  }\n}\n\n// Create singleton instance\nconst dakComplianceService = new DAKComplianceService();\n\nexport default dakComplianceService;","import React, { useState, useEffect } from 'react';\nimport githubService from '../services/githubService';\nimport dakComplianceService from '../services/dakComplianceService';\nimport stagingGroundService from '../services/stagingGroundService';\nimport './SaveDialog.css';\n\nconst SaveDialog = ({ \n  isOpen, \n  onClose, \n  stagingGround, \n  validation, \n  repository, \n  selectedBranch,\n  hasWriteAccess,\n  onSaveSuccess \n}) => {\n  const [commitMessage, setCommitMessage] = useState('');\n  const [overrideValidation, setOverrideValidation] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [showValidationDetails, setShowValidationDetails] = useState(false);\n\n  // Reset state when dialog opens\n  useEffect(() => {\n    if (isOpen) {\n      setCommitMessage(stagingGround?.message || '');\n      setOverrideValidation(false);\n      setIsSaving(false);\n      setError(null);\n      setShowValidationDetails(false);\n    }\n  }, [isOpen, stagingGround]);\n\n  if (!isOpen) return null;\n\n  const validationSummary = validation ? dakComplianceService.getValidationSummary(validation) : null;\n  const canSave = validationSummary ? (validationSummary.canSave || overrideValidation) : true;\n  const hasErrors = validationSummary ? validationSummary.error > 0 : false;\n\n  const handleSave = async () => {\n    if (!commitMessage.trim()) {\n      setError('Commit message is required');\n      return;\n    }\n\n    if (!hasWriteAccess) {\n      setError('You need write permissions to save changes');\n      return;\n    }\n\n    if (hasErrors && !overrideValidation) {\n      setError('Cannot save with validation errors. Enable override option to proceed anyway.');\n      return;\n    }\n\n    setIsSaving(true);\n    setError(null);\n\n    try {\n      const owner = repository.owner?.login || repository.full_name.split('/')[0];\n      \n      if (repository.isDemo || (repository.owner && repository.owner.login === 'demo-user')) {\n        // Simulate save in demo mode\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        onSaveSuccess({\n          sha: 'demo-commit-sha',\n          message: commitMessage,\n          url: `https://github.com/${repository.full_name}/commit/demo-commit-sha`\n        });\n        return;\n      }\n\n      // Create commit with multiple files\n      const result = await githubService.createCommit(\n        owner,\n        repository.name,\n        selectedBranch,\n        commitMessage.trim(),\n        stagingGround.files\n      );\n\n      onSaveSuccess({\n        sha: result.sha,\n        message: commitMessage,\n        url: result.html_url\n      });\n\n    } catch (err) {\n      console.error('Error saving changes:', err);\n      setError(getErrorMessage(err));\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const getErrorMessage = (error) => {\n    if (error.status === 409) {\n      return 'Conflict detected. The branch has been updated since you started. Please refresh and try again.';\n    } else if (error.status === 403) {\n      return 'Permission denied. Check that your token has write access to this repository.';\n    } else if (error.status === 404) {\n      return 'Repository or branch not found. Please verify the repository exists and you have access.';\n    } else if (error.message) {\n      return error.message;\n    } else {\n      return 'An unexpected error occurred while saving. Please try again.';\n    }\n  };\n\n  const formatValidationIcon = (level) => {\n    switch (level) {\n      case 'error': return '🔴';\n      case 'warning': return '🟡';\n      case 'info': return '🟢';\n      default: return '❓';\n    }\n  };\n\n  // Handle removing individual file\n  const handleRemoveFile = (filePath) => {\n    if (window.confirm(`Are you sure you want to remove \"${filePath}\" from staging? This cannot be undone.`)) {\n      stagingGroundService.removeFile(filePath);\n    }\n  };\n\n  return (\n    <div className=\"save-dialog-overlay\">\n      <div className=\"save-dialog\">\n        <div className=\"dialog-header\">\n          <h3>💾 Save Changes</h3>\n          <button \n            className=\"dialog-close\"\n            onClick={onClose}\n            disabled={isSaving}\n          >\n            ×\n          </button>\n        </div>\n\n        <div className=\"dialog-content\">\n          {/* Files Summary */}\n          <div className=\"save-summary\">\n            <h4>Files to be committed ({stagingGround?.files?.length || 0}):</h4>\n            <div className=\"files-list\">\n              {stagingGround?.files?.map((file, index) => (\n                <div key={index} className=\"file-item\">\n                  <span className=\"file-icon\">📄</span>\n                  <span className=\"file-path\">{file.path}</span>\n                  <span className=\"file-size\">\n                    {(new Blob([file.content]).size / 1024).toFixed(1)} KB\n                  </span>\n                  <button\n                    className=\"remove-file-btn\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleRemoveFile(file.path);\n                    }}\n                    title={`Remove ${file.path} from staging`}\n                    disabled={isSaving}\n                  >\n                    🗑️\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Validation Status */}\n          {validationSummary && (\n            <div className=\"validation-section\">\n              <div \n                className={`validation-summary ${validationSummary.hasIssues ? 'has-issues' : 'clean'}`}\n                onClick={() => setShowValidationDetails(!showValidationDetails)}\n              >\n                <div className=\"validation-header\">\n                  <h4>🚦 Validation Status</h4>\n                  <div className=\"validation-badges\">\n                    {validationSummary.error > 0 && (\n                      <span className=\"validation-badge error\">\n                        🔴 {validationSummary.error}\n                      </span>\n                    )}\n                    {validationSummary.warning > 0 && (\n                      <span className=\"validation-badge warning\">\n                        🟡 {validationSummary.warning}\n                      </span>\n                    )}\n                    {validationSummary.info > 0 && (\n                      <span className=\"validation-badge info\">\n                        🟢 {validationSummary.info}\n                      </span>\n                    )}\n                    {!validationSummary.hasIssues && (\n                      <span className=\"validation-badge success\">\n                        ✅ All clear\n                      </span>\n                    )}\n                  </div>\n                  <span className={`expand-icon ${showValidationDetails ? 'expanded' : ''}`}>\n                    ▼\n                  </span>\n                </div>\n              </div>\n\n              {showValidationDetails && validation && (\n                <div className=\"validation-details\">\n                  {Object.entries(validation.files).map(([filePath, results]) => (\n                    results.length > 0 && (\n                      <div key={filePath} className=\"file-validation\">\n                        <h5>📄 {filePath}</h5>\n                        <div className=\"validation-issues\">\n                          {results.map((result, index) => (\n                            <div key={index} className={`validation-issue ${result.level}`}>\n                              <span className=\"issue-icon\">{formatValidationIcon(result.level)}</span>\n                              <div className=\"issue-content\">\n                                <div className=\"issue-message\">{result.message}</div>\n                                {result.suggestion && (\n                                  <div className=\"issue-suggestion\">💡 {result.suggestion}</div>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )\n                  ))}\n                </div>\n              )}\n\n              {/* Override option for errors */}\n              {hasErrors && (\n                <div className=\"override-section\">\n                  <label className=\"override-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      checked={overrideValidation}\n                      onChange={(e) => setOverrideValidation(e.target.checked)}\n                    />\n                    <span className=\"checkmark\"></span>\n                    Override validation errors and save anyway\n                  </label>\n                  <p className=\"override-warning\">\n                    ⚠️ Saving with validation errors may cause issues with your DAK.\n                    Only enable this if you're sure about your changes.\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Commit Message */}\n          <div className=\"commit-message-section\">\n            <label htmlFor=\"commit-message\">\n              <h4>✍️ Commit Message</h4>\n            </label>\n            <textarea\n              id=\"commit-message\"\n              className=\"commit-message-input\"\n              value={commitMessage}\n              onChange={(e) => setCommitMessage(e.target.value)}\n              placeholder=\"Describe your changes...\"\n              rows={3}\n              disabled={isSaving}\n              required\n            />\n            <div className=\"commit-tips\">\n              <p>💡 <strong>Tip:</strong> Write a clear, descriptive message about what you changed and why.</p>\n            </div>\n          </div>\n\n          {/* Error Display */}\n          {error && (\n            <div className=\"error-section\">\n              <div className=\"error-message\">\n                <span className=\"error-icon\">❌</span>\n                {error}\n              </div>\n            </div>\n          )}\n\n          {/* Repository Info */}\n          <div className=\"repo-info\">\n            <div className=\"info-item\">\n              <span className=\"info-label\">Repository:</span>\n              <span className=\"info-value\">{repository?.full_name}</span>\n            </div>\n            <div className=\"info-item\">\n              <span className=\"info-label\">Branch:</span>\n              <span className=\"info-value\">{selectedBranch}</span>\n            </div>\n            <div className=\"info-item\">\n              <span className=\"info-label\">Access:</span>\n              <span className={`info-value ${hasWriteAccess ? 'write' : 'read'}`}>\n                {hasWriteAccess ? '✏️ Write' : '👁️ Read-only'}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"dialog-actions\">\n          <button\n            className=\"action-btn secondary\"\n            onClick={onClose}\n            disabled={isSaving}\n          >\n            Cancel\n          </button>\n          <button\n            className=\"action-btn primary\"\n            onClick={handleSave}\n            disabled={!canSave || !commitMessage.trim() || isSaving || !hasWriteAccess}\n          >\n            {isSaving ? (\n              <>\n                <span className=\"saving-spinner\">⏳</span>\n                Saving...\n              </>\n            ) : (\n              <>💾 Save Changes</>\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SaveDialog;","import React, { useState, useEffect, useCallback } from 'react';\nimport stagingGroundService from '../services/stagingGroundService';\nimport dakComplianceService from '../services/dakComplianceService';\nimport SaveDialog from './SaveDialog';\nimport './StagingGround.css';\n\nconst StagingGround = ({ repository, selectedBranch, hasWriteAccess, profile }) => {\n  const [stagingGround, setStagingGround] = useState(null);\n  const [validation, setValidation] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n\n  // Load staging ground data\n  const loadStagingGroundData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const currentStagingGround = stagingGroundService.getStagingGround();\n      setStagingGround(currentStagingGround);\n      \n      if (currentStagingGround.files.length > 0) {\n        await validateStagingGround(currentStagingGround);\n      }\n    } catch (err) {\n      setError('Failed to load staging ground data');\n      console.error('Error loading staging ground:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Initialize staging ground service\n  useEffect(() => {\n    if (repository && selectedBranch) {\n      stagingGroundService.initialize(repository, selectedBranch);\n      loadStagingGroundData();\n\n      // Subscribe to staging ground changes\n      const unsubscribe = stagingGroundService.addListener((updatedStagingGround) => {\n        setStagingGround(updatedStagingGround);\n        validateStagingGround(updatedStagingGround);\n      });\n\n      return unsubscribe;\n    }\n  }, [repository, selectedBranch, loadStagingGroundData]);\n\n  // Validate staging ground\n  const validateStagingGround = async (stagingGroundData) => {\n    if (!stagingGroundData || stagingGroundData.files.length === 0) {\n      setValidation(null);\n      return;\n    }\n\n    try {\n      const validationResult = await dakComplianceService.validateStagingGround(stagingGroundData);\n      setValidation(validationResult);\n    } catch (err) {\n      console.error('Error validating staging ground:', err);\n      setValidation(null);\n    }\n  };\n\n  // Handle saving changes\n  const handleSave = () => {\n    if (!hasWriteAccess) {\n      alert('You need write permissions to save changes to this repository.');\n      return;\n    }\n    \n    setShowSaveDialog(true);\n  };\n\n  // Handle successful save\n  const handleSaveSuccess = (result) => {\n    setShowSaveDialog(false);\n    \n    // Clear staging ground after successful save\n    stagingGroundService.clearStagingGround();\n    \n    // Show success message\n    alert(`Changes saved successfully! Commit: ${result.sha.substring(0, 7)}`);\n  };\n\n  // Handle clearing staging ground\n  const handleClearChanges = () => {\n    if (window.confirm('Are you sure you want to discard all changes? This cannot be undone.')) {\n      stagingGroundService.clearStagingGround();\n    }\n  };\n\n  // Handle removing individual file\n  const handleRemoveFile = (filePath) => {\n    if (window.confirm(`Are you sure you want to remove \"${filePath}\" from staging? This cannot be undone.`)) {\n      stagingGroundService.removeFile(filePath);\n    }\n  };\n\n  // Get validation summary for display\n  const getValidationSummary = () => {\n    if (!validation) {\n      return { error: 0, warning: 0, info: 0, canSave: true };\n    }\n    return dakComplianceService.getValidationSummary(validation);\n  };\n\n  // Format file list for display\n  const formatFileList = () => {\n    if (!stagingGround || !stagingGround.files) return [];\n    \n    return stagingGround.files.map(file => ({\n      path: file.path,\n      size: new Blob([file.content]).size,\n      lastModified: file.timestamp\n    }));\n  };\n\n  const validationSummary = getValidationSummary();\n  const hasChanges = stagingGround && stagingGround.files.length > 0;\n  const filesCount = stagingGround ? stagingGround.files.length : 0;\n\n  return (\n    <div className=\"staging-ground-section\">\n      <div className=\"section-header\">\n        <h3 className=\"section-title\">\n          <span className=\"section-icon\">📝</span>\n          Staging Ground\n          {hasChanges && (\n            <span className=\"files-badge\">\n              {filesCount} file{filesCount !== 1 ? 's' : ''}\n            </span>\n          )}\n        </h3>\n        <p className=\"section-description\">\n          Changes made through DAK component editors are staged here before being committed to the repository.\n          Review and commit your changes when ready.\n        </p>\n      </div>\n\n      <div className=\"staging-content\">\n        {loading ? (\n          <div className=\"loading-indicator\">\n            <span className=\"loading-spinner\">⏳</span>\n            Loading staging ground...\n          </div>\n        ) : error ? (\n          <div className=\"error-message\">\n            <span className=\"error-icon\">⚠️</span>\n            {error}\n          </div>\n        ) : (\n          <>\n            {/* Staging Status Bar */}\n            <div className=\"staging-status-bar\">\n              <div className=\"status-indicators\">\n                {/* Validation stoplight */}\n                <div className=\"validation-stoplight\">\n                  <div className={`stoplight-indicator error ${validationSummary.error === 0 ? 'lit' : ''}`}>\n                    🔴\n                    {validationSummary.error > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.error}</span>\n                    )}\n                  </div>\n                  <div className={`stoplight-indicator warning ${validationSummary.warning === 0 ? 'lit' : ''}`}>\n                    🟡\n                    {validationSummary.warning > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.warning}</span>\n                    )}\n                  </div>\n                  <div className={`stoplight-indicator info ${validationSummary.info === 0 ? 'lit' : ''}`}>\n                    🟢\n                    {validationSummary.info > 0 && (\n                      <span className=\"indicator-badge\">{validationSummary.info}</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Save button */}\n              <button\n                className={`save-btn ${!hasChanges || !validationSummary.canSave ? 'disabled' : ''}`}\n                onClick={handleSave}\n                disabled={!hasChanges || !hasWriteAccess}\n                title={\n                  !hasChanges ? 'No changes to save' :\n                  !hasWriteAccess ? 'Write access required' :\n                  !validationSummary.canSave ? 'Fix validation errors first' :\n                  'Save changes to repository'\n                }\n              >\n                💾 Save Changes\n              </button>\n            </div>\n\n            {/* Changed Files Section */}\n            <div className=\"staging-files-section\">\n              <h4>📁 Changed Files</h4>\n              {hasChanges ? (\n                <div className=\"changed-files\">\n                  {formatFileList().map((file, index) => (\n                    <div key={index} className=\"file-item\">\n                      <div className=\"file-info\">\n                        <span className=\"file-icon\">📄</span>\n                        <span className=\"file-path\">{file.path}</span>\n                      </div>\n                      <div className=\"file-meta\">\n                        <span className=\"file-size\">\n                          {(file.size / 1024).toFixed(1)} KB\n                        </span>\n                        <span className=\"file-time\">\n                          {new Date(file.lastModified).toLocaleTimeString()}\n                        </span>\n                        <button\n                          className=\"remove-file-btn\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleRemoveFile(file.path);\n                          }}\n                          title={`Remove ${file.path} from staging`}\n                        >\n                          🗑️\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"file-actions\">\n                    <button\n                      className=\"action-btn secondary small\"\n                      onClick={handleClearChanges}\n                    >\n                      🗑️ Clear All Changes\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"no-changes\">\n                  <p>No changes in staging ground</p>\n                  <p className=\"help-text\">\n                    Changes made through DAK component editors will appear here before being saved to the repository.\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {/* Commit Message Preview */}\n            {hasChanges && stagingGround.message && (\n              <div className=\"commit-message-section\">\n                <h4>✍️ Commit Message</h4>\n                <div className=\"commit-preview\">\n                  <p>{stagingGround.message}</p>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Save Dialog */}\n      <SaveDialog\n        isOpen={showSaveDialog}\n        onClose={() => setShowSaveDialog(false)}\n        stagingGround={stagingGround}\n        validation={validation}\n        repository={repository}\n        selectedBranch={selectedBranch}\n        hasWriteAccess={hasWriteAccess}\n        onSaveSuccess={handleSaveSuccess}\n      />\n    </div>\n  );\n};\n\nexport default StagingGround;","import React, { useState, useEffect } from 'react';\nimport githubService from '../services/githubService';\nimport StagingGround from './StagingGround';\nimport './Publications.css';\n\nconst Publications = ({ profile, repository, selectedBranch, hasWriteAccess }) => {\n  const [branches, setBranches] = useState([]);\n  const [workflows, setWorkflows] = useState([]);\n  const [workflowRuns, setWorkflowRuns] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const owner = repository.owner?.login || repository.full_name.split('/')[0];\n  const repoName = repository.name;\n\n  useEffect(() => {\n    const fetchPublicationData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Handle demo mode - provide mock data\n        if (profile?.isDemo) {\n          const mockBranches = [\n            { name: 'main', commit: { sha: 'abc123' } },\n            { name: 'feature/updates', commit: { sha: 'def456' } },\n            { name: 'dev', commit: { sha: 'ghi789' } }\n          ];\n          setBranches(mockBranches);\n\n          const mockWorkflows = [\n            { id: 'pages-build', name: 'Deploy to GitHub Pages', triggers: ['push', 'manual'] }\n          ];\n          setWorkflows(mockWorkflows);\n\n          // Mock workflow runs\n          const mockWorkflowRuns = {\n            'main': { \n              status: 'completed', \n              conclusion: 'success', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123456`,\n              updated_at: new Date().toISOString()\n            },\n            'feature/updates': { \n              status: 'completed', \n              conclusion: 'action_required', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123457`,\n              updated_at: new Date().toISOString()\n            },\n            'dev': { \n              status: 'completed', \n              conclusion: 'failure', \n              html_url: `https://github.com/${owner}/${repoName}/actions/runs/123458`,\n              updated_at: new Date().toISOString()\n            }\n          };\n          setWorkflowRuns(mockWorkflowRuns);\n          setLoading(false);\n          return;\n        }\n\n        // Fetch branches (excluding gh-pages)\n        const branchesData = await githubService.getBranches(owner, repoName);\n        const filteredBranches = branchesData.filter(branch => branch.name !== 'gh-pages');\n        setBranches(filteredBranches);\n\n        // Fetch workflows to find ghbuild workflow\n        const workflowsData = await githubService.getWorkflows(owner, repoName);\n        setWorkflows(workflowsData);\n\n        // Find the ghbuild workflow (look for workflow with 'build' or 'publish' in name)\n        const ghbuildWorkflow = workflowsData.find(workflow => \n          workflow.name.toLowerCase().includes('build') || \n          workflow.name.toLowerCase().includes('publish') ||\n          workflow.name.toLowerCase().includes('pages')\n        );\n\n        // Fetch recent workflow runs for each branch if ghbuild workflow exists and has valid ID\n        if (ghbuildWorkflow && ghbuildWorkflow.id) {\n          const runsByBranch = {};\n          for (const branch of filteredBranches) {\n            try {\n              const runs = await githubService.getWorkflowRunsForWorkflow(\n                owner, \n                repoName, \n                ghbuildWorkflow.id,\n                { branch: branch.name, per_page: 1 }\n              );\n              if (runs.length > 0) {\n                runsByBranch[branch.name] = runs[0];\n              }\n            } catch (err) {\n              console.warn(`Could not fetch workflow runs for branch ${branch.name}:`, err);\n            }\n          }\n          setWorkflowRuns(runsByBranch);\n        } else if (ghbuildWorkflow && !ghbuildWorkflow.id) {\n          console.warn('Found workflow but missing ID:', ghbuildWorkflow);\n        }\n\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching publication data:', err);\n        setError('Failed to load publication data');\n        setLoading(false);\n      }\n    };\n\n    fetchPublicationData();\n  }, [owner, repoName, profile?.isDemo]);\n\n  const getPublicationUrl = (branchName) => {\n    if (branchName === repository.default_branch || branchName === 'main') {\n      return `https://${owner}.github.io/${repoName}/`;\n    } else {\n      return `https://${owner}.github.io/${repoName}/branches/${branchName}/`;\n    }\n  };\n\n  const getWorkflowStatusIcon = (branchName) => {\n    const run = workflowRuns[branchName];\n    if (!run) return { icon: '⚪', title: 'No recent workflow runs', link: null };\n\n    const status = run.status;\n    const conclusion = run.conclusion;\n\n    if (status === 'in_progress' || status === 'queued') {\n      return { \n        icon: '🔄', \n        title: 'Workflow running', \n        link: run.html_url,\n        className: 'running' \n      };\n    } else if (conclusion === 'success') {\n      return { \n        icon: '✅', \n        title: 'Last build successful', \n        link: run.html_url,\n        className: 'success' \n      };\n    } else if (conclusion === 'failure') {\n      return { \n        icon: '❌', \n        title: 'Last build failed', \n        link: run.html_url,\n        className: 'failure' \n      };\n    } else if (conclusion === 'action_required') {\n      return { \n        icon: '⏳', \n        title: 'Workflow requires approval', \n        link: run.html_url,\n        className: 'approval-required' \n      };\n    } else {\n      return { \n        icon: '⚠️', \n        title: `Build ${conclusion || status}`, \n        link: run.html_url,\n        className: 'warning' \n      };\n    }\n  };\n\n  const handleRestartWorkflow = async (branchName) => {\n    // Handle demo mode\n    if (profile?.isDemo) {\n      alert(`Demo Mode: Workflow restart simulated for branch: ${branchName}`);\n      return;\n    }\n\n    const ghbuildWorkflow = workflows.find(workflow => \n      workflow.name.toLowerCase().includes('build') || \n      workflow.name.toLowerCase().includes('publish') ||\n      workflow.name.toLowerCase().includes('pages')\n    );\n\n    if (!ghbuildWorkflow) {\n      alert('No suitable workflow found to restart');\n      return;\n    }\n\n    if (!ghbuildWorkflow.id) {\n      alert('Workflow found but missing ID - cannot restart');\n      console.warn('Workflow missing ID:', ghbuildWorkflow);\n      return;\n    }\n\n    try {\n      await githubService.triggerWorkflow(owner, repoName, ghbuildWorkflow.id, branchName);\n      alert(`Workflow restarted for branch: ${branchName}`);\n      \n      // Refresh workflow runs after a delay\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    } catch (err) {\n      console.error('Error restarting workflow:', err);\n      alert('Failed to restart workflow. Please check your permissions.');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"publications-loading\">\n        <div className=\"loading-content\">\n          <h3>Loading Publications...</h3>\n          <p>Fetching branch and workflow information...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"publications-error\">\n        <div className=\"error-content\">\n          <h3>Error Loading Publications</h3>\n          <p>{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"publications-section\">\n      {/* Staging Ground Section */}\n      <StagingGround\n        repository={repository}\n        selectedBranch={selectedBranch}\n        hasWriteAccess={hasWriteAccess}\n        profile={profile}\n      />\n      \n      <div className=\"section-header\">\n        <h3 className=\"section-title\">Published DAK Content</h3>\n        <p className=\"section-description\">\n          Access published Implementation Guide content for this DAK repository. Each branch is published \n          automatically via GitHub Actions to GitHub Pages.\n        </p>\n      </div>\n\n      <div className=\"publications-grid\">\n        {branches.map((branch) => {\n          const isMainBranch = branch.name === repository.default_branch || branch.name === 'main';\n          const publicationUrl = getPublicationUrl(branch.name);\n          const workflowStatus = getWorkflowStatusIcon(branch.name);\n\n          return (\n            <div key={branch.name} className={`publication-card ${isMainBranch ? 'main-branch' : ''}`}>\n              <div className=\"publication-header\">\n                <div className=\"branch-info\">\n                  <span className=\"branch-icon\">🌿</span>\n                  <span className=\"branch-name\">{branch.name}</span>\n                  {isMainBranch && <span className=\"main-badge\">MAIN</span>}\n                </div>\n                <div className=\"workflow-status\">\n                  {workflowStatus.link ? (\n                    <a \n                      href={workflowStatus.link} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className={`status-icon ${workflowStatus.className || ''}`}\n                      title={workflowStatus.title}\n                    >\n                      {workflowStatus.icon}\n                    </a>\n                  ) : (\n                    <span \n                      className={`status-icon ${workflowStatus.className || ''}`}\n                      title={workflowStatus.title}\n                    >\n                      {workflowStatus.icon}\n                    </span>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"publication-content\">\n                <div className=\"publication-url\">\n                  <label>Published at:</label>\n                  <a \n                    href={publicationUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"publication-link\"\n                  >\n                    {publicationUrl}\n                    <span className=\"external-link\">↗</span>\n                  </a>\n                </div>\n\n                <div className=\"publication-actions\">\n                  <button\n                    className=\"restart-workflow-btn\"\n                    onClick={() => handleRestartWorkflow(branch.name)}\n                    disabled={!hasWriteAccess}\n                    title={hasWriteAccess ? 'Restart build workflow for this branch' : 'Write permissions required'}\n                  >\n                    🔄 Rebuild\n                  </button>\n                  \n                  <a \n                    href={`https://github.com/${owner}/${repoName}/tree/${branch.name}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"view-source-btn\"\n                    title=\"View source code for this branch\"\n                  >\n                    👁️ View Source\n                  </a>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {branches.length === 0 && (\n        <div className=\"no-branches\">\n          <p>No publishable branches found (excluding gh-pages).</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Publications;","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport githubService from '../services/githubService';\nimport { handleNavigationClick } from '../utils/navigationUtils';\nimport './ForkStatusBar.css';\n\nconst ForkStatusBar = ({ profile, repository, selectedBranch }) => {\n  const navigate = useNavigate();\n  \n  const [isExpanded, setIsExpanded] = useState(false);\n  const [forks, setForks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [parentRepository, setParentRepository] = useState(null);\n\n  // Get session storage key for this repository\n  const getStorageKey = React.useCallback(() => {\n    if (!repository) return null;\n    return `sgex_fork_status_${repository.full_name}`;\n  }, [repository]);\n\n  // Load expansion state from session storage\n  useEffect(() => {\n    const storageKey = getStorageKey();\n    if (storageKey) {\n      const savedState = sessionStorage.getItem(storageKey);\n      if (savedState !== null) {\n        setIsExpanded(JSON.parse(savedState));\n      }\n    }\n  }, [getStorageKey]);\n\n  // Save expansion state to session storage\n  const toggleExpansion = () => {\n    const newState = !isExpanded;\n    setIsExpanded(newState);\n    \n    const storageKey = getStorageKey();\n    if (storageKey) {\n      sessionStorage.setItem(storageKey, JSON.stringify(newState));\n    }\n  };\n\n  // Fetch forks and parent repository info when component mounts\n  useEffect(() => {\n    const fetchRepositoryInfo = async () => {\n      if (!repository) return;\n      \n      setLoading(true);\n      setError(null);\n      \n      try {\n        // Check if we need to fetch full repository details to get parent info\n        let fullRepository = repository;\n        if (!repository.parent && (repository.fork === true || repository.fork === undefined)) {\n          // Fetch full repository details to get parent information\n          try {\n            fullRepository = await githubService.getRepository(repository.owner.login, repository.name);\n          } catch (repoErr) {\n            console.warn('Could not fetch full repository details:', repoErr);\n            // Continue with existing repository data\n          }\n        }\n        \n        // Set parent repository if this is a fork\n        if (fullRepository.fork && fullRepository.parent) {\n          setParentRepository(fullRepository.parent);\n        }\n        \n        // Fetch forks for the current repository being viewed\n        const forks = await githubService.getRepositoryForks(repository.owner.login, repository.name);\n        setForks(forks);\n      } catch (err) {\n        console.error('Error fetching repository information:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRepositoryInfo();\n  }, [repository]);\n\n  // Generate DAK dashboard URL for a fork\n  const getForkDashboardUrl = (fork) => {\n    const owner = fork.owner.login;\n    const repoName = fork.name;\n    const branch = fork.default_branch || 'main';\n    return `/dashboard/${owner}/${repoName}/${branch}`;\n  };\n\n  // Handle parent repository navigation\n  const handleParentClick = (event) => {\n    if (!parentRepository) return;\n    \n    const dashboardUrl = getForkDashboardUrl(parentRepository);\n    const navigationState = {\n      profile: {\n        login: parentRepository.owner.login,\n        name: parentRepository.owner.login,\n        avatar_url: parentRepository.owner.avatar_url,\n        type: parentRepository.owner.type\n      },\n      repository: parentRepository,\n      selectedBranch: parentRepository.default_branch || 'main'\n    };\n    \n    handleNavigationClick(event, dashboardUrl, navigate, navigationState);\n  };\n\n  // Handle fork navigation\n  const handleForkClick = (event, fork) => {\n    const dashboardUrl = getForkDashboardUrl(fork);\n    const navigationState = {\n      profile: {\n        login: fork.owner.login,\n        name: fork.owner.login,\n        avatar_url: fork.owner.avatar_url,\n        type: fork.owner.type\n      },\n      repository: fork,\n      selectedBranch: fork.default_branch || 'main'\n    };\n    \n    handleNavigationClick(event, dashboardUrl, navigate, navigationState);\n  };\n\n  if (!repository || loading) {\n    return (\n      <div className=\"fork-status-bar loading\">\n        <div className=\"fork-status-header\">\n          <div className=\"fork-badge-placeholder\">\n            <span className=\"fork-icon\">🍴</span>\n            <span className=\"fork-count\">...</span>\n          </div>\n          <span className=\"fork-status-title\">Loading repository info...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"fork-status-bar error\">\n        <div className=\"fork-status-header\">\n          <div className=\"fork-badge\">\n            <span className=\"fork-icon\">🍴</span>\n            <span className=\"fork-count\">?</span>\n          </div>\n          <span className=\"fork-status-title\">Unable to load repository info</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`fork-status-bar ${isExpanded ? 'expanded' : 'collapsed'}`}>\n      <div className=\"fork-status-header\" onClick={toggleExpansion}>\n        <div className=\"fork-badge\">\n          <span className=\"fork-icon\">🍴</span>\n          <span className=\"fork-count\">{forks.length}</span>\n        </div>\n        <span className=\"fork-status-title\">\n          {parentRepository ? (\n            <>\n              Fork of{' '}\n              <span \n                className=\"parent-repo-link\" \n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleParentClick(e);\n                }}\n              >\n                {parentRepository.owner.login}/{parentRepository.name}\n              </span>\n              {forks.length > 0 && (\n                <> • {forks.length} fork{forks.length !== 1 ? 's' : ''}</>\n              )}\n            </>\n          ) : (\n            <>\n              {forks.length} fork{forks.length !== 1 ? 's' : ''} of {repository?.name || 'repository'}\n            </>\n          )}\n        </span>\n        <button className=\"fork-toggle-btn\" aria-label={isExpanded ? 'Collapse' : 'Expand'}>\n          <span className={`toggle-icon ${isExpanded ? 'expanded' : ''}`}>▼</span>\n        </button>\n      </div>\n      \n      {isExpanded && (\n        <div className=\"fork-list\">\n          {parentRepository && (\n            <div className=\"parent-section\">\n              <h4 className=\"section-title\">Parent Repository</h4>\n              <div \n                className=\"fork-item parent-item\"\n                onClick={(event) => handleParentClick(event)}\n              >\n                <div className=\"fork-avatar\">\n                  <img \n                    src={parentRepository.owner.avatar_url} \n                    alt={parentRepository.owner.login}\n                    className=\"fork-owner-avatar\"\n                  />\n                </div>\n                <div className=\"fork-info\">\n                  <div className=\"fork-name\">\n                    <strong>{parentRepository.owner.login}/{parentRepository.name}</strong>\n                    <span className=\"parent-badge\">Parent</span>\n                  </div>\n                  <div className=\"fork-description\">\n                    {parentRepository.description || 'No description available'}\n                  </div>\n                  <div className=\"fork-stats\">\n                    <span className=\"fork-stat\">\n                      ⭐ {parentRepository.stargazers_count}\n                    </span>\n                    <span className=\"fork-stat\">\n                      📝 {parentRepository.open_issues_count} issues\n                    </span>\n                    <span className=\"fork-stat\">\n                      📅 Updated {new Date(parentRepository.updated_at).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"fork-actions\">\n                  <span className=\"fork-link-hint\">Click to view DAK →</span>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {forks.length === 0 ? (\n            !parentRepository && (\n              <div className=\"no-forks\">\n                <p>No forks found for this repository.</p>\n              </div>\n            )\n          ) : (\n            <div className=\"forks-section\">\n              {parentRepository && <h4 className=\"section-title\">Forks ({forks.length})</h4>}\n              <div className=\"fork-items\">\n                {forks.map((fork) => (\n                  <div \n                    key={fork.id} \n                    className=\"fork-item\"\n                    onClick={(event) => handleForkClick(event, fork)}\n                  >\n                    <div className=\"fork-avatar\">\n                      <img \n                        src={fork.owner.avatar_url} \n                        alt={fork.owner.login}\n                        className=\"fork-owner-avatar\"\n                      />\n                    </div>\n                    <div className=\"fork-info\">\n                      <div className=\"fork-name\">\n                        <strong>{fork.owner.login}/{fork.name}</strong>\n                      </div>\n                      <div className=\"fork-description\">\n                        {fork.description || 'No description available'}\n                      </div>\n                      <div className=\"fork-stats\">\n                        <span className=\"fork-stat\">\n                          ⭐ {fork.stargazers_count}\n                        </span>\n                        <span className=\"fork-stat\">\n                          📝 {fork.open_issues_count} issues\n                        </span>\n                        <span className=\"fork-stat\">\n                          📅 Updated {new Date(fork.updated_at).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"fork-actions\">\n                      <span className=\"fork-link-hint\">Click to view DAK →</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ForkStatusBar;","import React, { useState, useEffect } from 'react';\nimport { PageLayout, useDAKParams } from './framework';\nimport githubService from '../services/githubService';\nimport branchContextService from '../services/branchContextService';\nimport DAKStatusBox from './DAKStatusBox';\nimport Publications from './Publications';\nimport ForkStatusBar from './ForkStatusBar';\nimport './DAKDashboard.css';\n\nconst DAKDashboardWithFramework = () => {\n  return (\n    <PageLayout pageName=\"dashboard\">\n      <DAKDashboardContent />\n    </PageLayout>\n  );\n};\n\nconst DAKDashboardContent = () => {\n  const { profile, repository, branch, navigate } = useDAKParams();\n  \n  const [hasWriteAccess, setHasWriteAccess] = useState(false);\n  const [showPermissionDialog, setShowPermissionDialog] = useState(false);\n  const [activeTab, setActiveTab] = useState('core'); // 'core', 'additional', or 'publications'\n  const [issueCounts, setIssueCounts] = useState({});\n\n  // Check write permissions\n  useEffect(() => {\n    const checkWritePermissions = async () => {\n      if (!repository || !githubService.isAuth()) {\n        setHasWriteAccess(false);\n        return;\n      }\n\n      try {\n        // Check repository permissions\n        const hasPermission = await githubService.checkRepositoryPermissions(repository.owner.login, repository.name);\n        setHasWriteAccess(hasPermission);\n      } catch (error) {\n        console.error('Error checking repository permissions:', error);\n        setHasWriteAccess(false);\n      }\n    };\n\n    checkWritePermissions();\n  }, [repository]);\n\n  // Set branch context\n  useEffect(() => {\n    if (profile && repository && branch) {\n      branchContextService.setBranchContext(profile.login, repository.name, branch);\n    }\n  }, [profile, repository, branch]);\n\n  // Fetch issue counts for repository (if authenticated)\n  useEffect(() => {\n    const fetchIssueCounts = async () => {\n      if (!repository || !githubService.isAuth()) {\n        return;\n      }\n\n      try {\n        const issues = await githubService.getRepositoryIssues(repository.owner.login, repository.name);\n        \n        // Count issues by label\n        const counts = {};\n        issues.forEach(issue => {\n          issue.labels.forEach(label => {\n            counts[label.name] = (counts[label.name] || 0) + 1;\n          });\n        });\n        \n        setIssueCounts(counts);\n      } catch (error) {\n        console.warn('Could not fetch issue counts:', error);\n      }\n    };\n\n    fetchIssueCounts();\n  }, [repository]);\n\n  const handleComponentNavigate = (componentPath) => {\n    if (profile && repository) {\n      navigate(`/${componentPath}/${profile.login}/${repository.name}/${branch}`, {\n        state: {\n          profile,\n          repository,\n          selectedBranch: branch\n        }\n      });\n    }\n  };\n\n  const handlePublicationNavigate = () => {\n    if (profile && repository) {\n      navigate(`/publications/${profile.login}/${repository.name}/${branch}`, {\n        state: {\n          profile,\n          repository,\n          selectedBranch: branch\n        }\n      });\n    }\n  };\n\n  // Define the 9 core DAK components based on WHO SMART Guidelines documentation\n  const dakComponents = [\n    // Core Components (Level 2)\n    {\n      id: 'health-interventions',\n      title: 'Health Interventions and Recommendations',\n      description: 'Clinical guidelines and health intervention specifications that define evidence-based care recommendations',\n      icon: '📖',\n      path: 'health-interventions',\n      level: 'Level 2: Core Components',\n      color: '#0078d4'\n    },\n    {\n      id: 'generic-personas',\n      title: 'Generic Personas',\n      description: 'Standardized user roles and actor definitions that represent different types of healthcare workers and patients',\n      icon: '👥',\n      path: 'actor-editor',\n      level: 'Level 2: Core Components',\n      color: '#107c10'\n    },\n    {\n      id: 'user-scenarios',\n      title: 'User Scenarios',\n      description: 'Narrative descriptions of how different personas interact with the system in specific healthcare contexts',\n      icon: '📝',\n      path: 'user-scenarios',\n      level: 'Level 2: Core Components',\n      color: '#881798'\n    },\n    {\n      id: 'business-processes',\n      title: 'Generic Business Processes and Workflows',\n      description: 'BPMN workflows and business process definitions that model clinical workflows and care pathways',\n      icon: '🔄',\n      path: 'business-process-selection',\n      level: 'Level 2: Core Components',\n      color: '#d13438'\n    },\n    {\n      id: 'core-data-elements',\n      title: 'Core Data Elements',\n      description: 'Essential data structures and terminology needed for clinical data capture and exchange',\n      icon: '🗃️',\n      path: 'core-data-dictionary-viewer',\n      level: 'Level 2: Core Components',\n      color: '#ff8c00'\n    },\n    {\n      id: 'decision-support',\n      title: 'Decision-Support Logic',\n      description: 'DMN decision tables and clinical decision support rules that encode clinical logic',\n      icon: '🎯',\n      path: 'decision-support-logic',\n      level: 'Level 2: Core Components',\n      color: '#00bcf2'\n    },\n    {\n      id: 'program-indicators',\n      title: 'Program Indicators',\n      description: 'Performance indicators and measurement definitions for monitoring and evaluation',\n      icon: '📊',\n      path: 'program-indicators',\n      level: 'Level 2: Core Components',\n      color: '#498205'\n    },\n    {\n      id: 'functional-requirements',\n      title: 'Functional and Non-Functional Requirements',\n      description: 'System requirements specifications that define capabilities and constraints',\n      icon: '⚙️',\n      path: 'functional-requirements',\n      level: 'Level 2: Core Components',\n      color: '#6b69d6'\n    },\n    {\n      id: 'testing',\n      title: 'Testing',\n      description: 'Feature files and test scenarios for validating the DAK implementation',\n      icon: '🧪',\n      path: 'testing-viewer',\n      level: 'Level 2: Core Components',\n      color: '#8b5cf6'\n    },\n    // Additional Components (Level 3)\n    {\n      id: 'terminology',\n      title: 'Terminology',\n      description: 'Code systems, value sets, and concept maps',\n      icon: '🏷️',\n      path: 'terminology',\n      level: 'Level 3: Technical Implementation',\n      color: '#ff8c00'\n    },\n    {\n      id: 'profiles',\n      title: 'FHIR Profiles',\n      description: 'FHIR resource profiles and constraints',\n      icon: '🔧',\n      path: 'profiles',\n      level: 'Level 3: Technical Implementation',\n      color: '#00bcf2'\n    },\n    {\n      id: 'extensions',\n      title: 'FHIR Extensions',\n      description: 'Custom FHIR extensions and modifications',\n      icon: '🧩',\n      path: 'extensions',\n      level: 'Level 3: Technical Implementation',\n      color: '#498205'\n    },\n    {\n      id: 'test-data',\n      title: 'Test Data & Examples',\n      description: 'Sample data and testing resources',\n      icon: '🧪',\n      path: 'test-data',\n      level: 'Level 3: Technical Implementation',\n      color: '#8b5cf6'\n    }\n  ];\n\n  const coreComponents = dakComponents.filter(comp => comp.level.includes('Level 2: Core Components'));\n  const additionalComponents = dakComponents.filter(comp => comp.level.includes('Level 3: Technical Implementation'));\n\n  return (\n    <div className=\"dak-dashboard\">\n        <div className=\"dashboard-header\">\n          <div className=\"dashboard-title\">\n            <h1>{repository?.name} Dashboard</h1>\n            <p className=\"dashboard-subtitle\">\n              Digital Adaptation Kit for {profile?.name || profile?.login}\n            </p>\n          </div>\n        </div>\n\n        {/* Fork Status Bar - shows forks of sgex repository */}\n        <ForkStatusBar \n          profile={profile}\n          repository={repository}\n          selectedBranch={branch}\n        />\n\n        {repository && (\n          <DAKStatusBox \n            repository={repository}\n            profile={profile}\n            selectedBranch={branch}\n            issueCounts={issueCounts}\n          />\n        )}\n\n        <div className=\"tab-navigation\">\n          <button \n            className={`tab-button ${activeTab === 'core' ? 'active' : ''}`}\n            onClick={() => setActiveTab('core')}\n          >\n            <span className=\"tab-icon\">⭐</span>\n            <span className=\"tab-text\">9 Core Components</span>\n          </button>\n          <button \n            className={`tab-button ${activeTab === 'additional' ? 'active' : ''}`}\n            onClick={() => setActiveTab('additional')}\n          >\n            <span className=\"tab-icon\">🔧</span>\n            <span className=\"tab-text\">Additional Components ({additionalComponents.length})</span>\n          </button>\n          <button \n            className={`tab-button ${activeTab === 'publications' ? 'active' : ''}`}\n            onClick={() => setActiveTab('publications')}\n          >\n            <span className=\"tab-icon\">📚</span>\n            <span className=\"tab-text\">Publications</span>\n          </button>\n        </div>\n\n        <div className=\"dashboard-content\">\n          {activeTab === 'core' && (\n            <div className=\"components-grid core-components\">\n              {coreComponents.map(component => (\n                <div \n                  key={component.id}\n                  className=\"component-card\"\n                  onClick={() => handleComponentNavigate(component.path)}\n                >\n                  <div className=\"component-icon\">{component.icon}</div>\n                  <h3>{component.title}</h3>\n                  <p>{component.description}</p>\n                  {issueCounts[component.id] > 0 && (\n                    <div className=\"issue-badge\">\n                      {issueCounts[component.id]} issues\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n\n          {activeTab === 'additional' && (\n            <div className=\"components-grid additional-components\">\n              {additionalComponents.map(component => (\n                <div \n                  key={component.id}\n                  className=\"component-card\"\n                  onClick={() => handleComponentNavigate(component.path)}\n                >\n                  <div className=\"component-icon\">{component.icon}</div>\n                  <h3>{component.title}</h3>\n                  <p>{component.description}</p>\n                  {issueCounts[component.id] > 0 && (\n                    <div className=\"issue-badge\">\n                      {issueCounts[component.id]} issues\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n\n          {activeTab === 'publications' && (\n            <div className=\"publications-section\">\n              <Publications \n                repository={repository}\n                profile={profile}\n                selectedBranch={branch}\n                onNavigate={handlePublicationNavigate}\n              />\n            </div>\n          )}\n        </div>\n\n        {showPermissionDialog && (\n          <div className=\"permission-dialog\">\n            <div className=\"dialog-overlay\" onClick={() => setShowPermissionDialog(false)}></div>\n            <div className=\"dialog-content\">\n              <h3>Repository Permissions</h3>\n              <p>\n                You have {hasWriteAccess ? 'write' : 'read-only'} access to this repository.\n                {!hasWriteAccess && ' You can view content but cannot make changes.'}\n              </p>\n              <button onClick={() => setShowPermissionDialog(false)}>\n                Got it\n              </button>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default DAKDashboardWithFramework;"],"names":["handleNavigationClick","event","path","navigate","state","arguments","length","undefined","includes","validateUrlScheme","ctrlKey","metaKey","shouldOpenInNewTab","fullUrl","relativePath","window","location","origin","console","warn","basePath","process","baseUrl","cleanPath","startsWith","slice","endsWith","constructFullUrl","open","sushiConfigSchema","require","constructor","this","validators","Map","initializeSchemaValidator","initializeDefaultValidators","ajv","Ajv","allErrors","verbose","addFormats","sushiConfigValidator","compile","addValidator","level","description","validator","validateXMLWellFormed","bind","validateBPMNNamespace","validateBPMNStartEvent","validateDMNNamespace","validateJSONSyntax","validateFHIRResourceType","validateFileSize","validateFilenameConventions","validateSushiConfig","fileType","validatorId","config","has","set","get","removeValidator","delete","validateFile","filePath","content","results","fileExtension","getFileExtension","fileName","getFileName","typeValidators","universalValidators","result","push","error","message","validateStagingGround","stagingGround","summary","warning","info","files","validatedAt","Date","now","file","fileResults","forEach","canSave","parser","DOMParser","parserError","parseFromString","querySelector","textContent","suggestion","JSON","parse","json","validResourceTypes","resourceType","sizeInBytes","Blob","size","toFixed","issues","test","join","parsedConfig","yaml","yamlError","errors","map","_error$params","_error$params2","instancePath","replace","params","missingProperty","allowedValues","details","whoValidation","validateWHOSmartGuidelines","dependencies","canonical","id","publisher","toLowerCase","jurisdiction","Array","isArray","parts","split","pop","formatValidationResults","validation","formatted","Object","entries","_ref","getValidationSummary","hasIssues","_stagingGround$files","_stagingGround$files2","isOpen","onClose","repository","selectedBranch","hasWriteAccess","onSaveSuccess","commitMessage","setCommitMessage","useState","overrideValidation","setOverrideValidation","isSaving","setIsSaving","setError","showValidationDetails","setShowValidationDetails","useEffect","validationSummary","dakComplianceService","hasErrors","getErrorMessage","status","formatValidationIcon","_jsx","className","children","_jsxs","onClick","disabled","index","e","stopPropagation","confirm","stagingGroundService","removeFile","title","_ref2","type","checked","onChange","target","htmlFor","value","placeholder","rows","required","full_name","async","trim","_repository$owner","owner","login","isDemo","Promise","resolve","setTimeout","sha","url","githubService","createCommit","name","html_url","err","_Fragment","profile","setStagingGround","setValidation","loading","setLoading","showSaveDialog","setShowSaveDialog","loadStagingGroundData","useCallback","currentStagingGround","getStagingGround","initialize","addListener","updatedStagingGround","stagingGroundData","validationResult","hasChanges","filesCount","handleSave","alert","lastModified","timestamp","toLocaleTimeString","handleClearChanges","clearStagingGround","SaveDialog","substring","branches","setBranches","workflows","setWorkflows","workflowRuns","setWorkflowRuns","repoName","commit","triggers","mockWorkflowRuns","conclusion","updated_at","toISOString","filteredBranches","getBranches","filter","branch","workflowsData","getWorkflows","ghbuildWorkflow","find","workflow","runsByBranch","runs","getWorkflowRunsForWorkflow","per_page","fetchPublicationData","StagingGround","isMainBranch","default_branch","publicationUrl","branchName","workflowStatus","run","icon","link","getWorkflowStatusIcon","href","rel","triggerWorkflow","reload","handleRestartWorkflow","useNavigate","isExpanded","setIsExpanded","forks","setForks","parentRepository","setParentRepository","getStorageKey","React","storageKey","savedState","sessionStorage","getItem","fullRepository","parent","fork","getRepository","repoErr","getRepositoryForks","fetchRepositoryInfo","getForkDashboardUrl","handleParentClick","dashboardUrl","navigationState","avatar_url","toggleExpansion","newState","setItem","stringify","src","alt","stargazers_count","open_issues_count","toLocaleDateString","handleForkClick","DAKDashboardContent","useDAKParams","setHasWriteAccess","showPermissionDialog","setShowPermissionDialog","activeTab","setActiveTab","issueCounts","setIssueCounts","isAuth","hasPermission","checkRepositoryPermissions","checkWritePermissions","branchContextService","setBranchContext","getRepositoryIssues","counts","issue","labels","label","fetchIssueCounts","handleComponentNavigate","componentPath","dakComponents","color","coreComponents","comp","additionalComponents","ForkStatusBar","DAKStatusBox","component","Publications","onNavigate","handlePublicationNavigate","DAKDashboardWithFramework","PageLayout","pageName"],"sourceRoot":""}