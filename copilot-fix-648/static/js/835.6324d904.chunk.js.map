{"version":3,"file":"static/js/835.6324d904.chunk.js","mappings":"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","sources":["utils/navigationUtils.js","components/SelectProfilePage.js"],"sourcesContent":["/**\n * Utility functions for handling navigation with command-click support\n */\n\nimport { validateUrlScheme } from './securityUtils';\n\n/**\n * Detects if a click event should open in a new tab\n * @param {MouseEvent} event - The click event\n * @returns {boolean} - True if should open in new tab (Ctrl/Cmd+click)\n */\nexport const shouldOpenInNewTab = (event) => {\n  return !!(event?.ctrlKey || event?.metaKey); // Ctrl on Windows/Linux, Cmd on Mac\n};\n\n/**\n * Constructs a full URL from a relative path using the current base URL\n * @param {string} relativePath - The relative path (e.g., '/dashboard/user/repo')\n * @returns {string} - The full URL\n */\nexport const constructFullUrl = (relativePath) => {\n  // Validate the relative path to prevent XSS\n  if (!relativePath || typeof relativePath !== 'string') {\n    return window.location.origin;\n  }\n  \n  // Basic validation - don't allow dangerous protocols\n  if (relativePath.includes('javascript:') || relativePath.includes('data:')) { // eslint-disable-line no-script-url\n    console.warn('Blocked dangerous URL scheme in path:', relativePath);\n    return window.location.origin;\n  }\n  \n  const basePath = process.env.PUBLIC_URL || '';\n  const baseUrl = window.location.origin;\n  \n  // Remove leading slash from relativePath if present to avoid double slashes\n  const cleanPath = relativePath.startsWith('/') ? relativePath.slice(1) : relativePath;\n  \n  // Only add basePath if it's not empty\n  if (!basePath) {\n    return `${baseUrl}/${cleanPath}`;\n  }\n  \n  // Ensure basePath ends with slash for proper joining\n  const cleanBasePath = basePath.endsWith('/') ? basePath : basePath + '/';\n  \n  return `${baseUrl}${cleanBasePath}${cleanPath}`;\n};\n\n/**\n * Handles navigation with command-click support\n * @param {MouseEvent} event - The click event\n * @param {string} path - The navigation path\n * @param {Function} navigate - React Router navigate function\n * @param {Object} state - Optional state to pass with navigation\n */\nexport const handleNavigationClick = (event, path, navigate, state = null) => {\n  // Validate the path to prevent malicious navigation\n  if (!path || typeof path !== 'string') {\n    console.warn('Invalid navigation path provided');\n    return;\n  }\n  \n  // For external URLs, validate the scheme\n  if (path.includes('://')) {\n    if (!validateUrlScheme(path)) {\n      console.warn('Blocked navigation to potentially dangerous URL:', path);\n      return;\n    }\n  }\n  \n  if (shouldOpenInNewTab(event)) {\n    // Open in new tab\n    const fullUrl = constructFullUrl(path);\n    window.open(fullUrl, '_blank', 'noopener,noreferrer');\n  } else {\n    // Navigate in same tab\n    if (state) {\n      navigate(path, { state });\n    } else {\n      navigate(path);\n    }\n  }\n};\n\n/**\n * Creates a click handler that supports command-click for new tabs\n * @param {string} path - The navigation path\n * @param {Function} navigate - React Router navigate function\n * @param {Object} state - Optional state to pass with navigation\n * @returns {Function} - Click handler function\n */\nexport const createNavigationClickHandler = (path, navigate, state = null) => {\n  return (event) => {\n    handleNavigationClick(event, path, navigate, state);\n  };\n};","import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport githubService from '../services/githubService';\nimport repositoryCacheService from '../services/repositoryCacheService';\nimport { PageLayout } from './framework';\nimport { handleNavigationClick } from '../utils/navigationUtils';\nimport './SelectProfilePage.css';\n\nconst SelectProfilePage = () => {\n  const { t } = useTranslation();\n  const [user, setUser] = useState(null);\n  const [organizations, setOrganizations] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [dakCounts, setDakCounts] = useState({});\n  const [warningMessage, setWarningMessage] = useState(null);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Load cached DAK counts without initiating any scanning\n  const loadCachedDakCounts = useCallback((userData, orgsData) => {\n    if (!githubService.isAuth()) {\n      return;\n    }\n\n    const counts = {};\n    \n    // Check cache for user's personal repositories\n    if (userData) {\n      const userCache = repositoryCacheService.getCachedRepositories(userData.login, 'user');\n      if (userCache && userCache.repositories) {\n        counts[`user-${userData.login}`] = userCache.repositories.length;\n      }\n    }\n    \n    // Check cache for organization repositories\n    orgsData.forEach(org => {\n      const orgCache = repositoryCacheService.getCachedRepositories(org.login, 'org');\n      if (orgCache && orgCache.repositories) {\n        counts[`org-${org.login}`] = orgCache.repositories.length;\n      }\n    });\n    \n    setDakCounts(counts);\n  }, []);\n\n  const fetchUserData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Check token permissions first\n      await githubService.checkTokenPermissions();\n      \n      // Fetch user data using GitHub service\n      const userData = await githubService.getCurrentUser();\n      setUser(userData);\n      \n      // Fetch organizations inline\n      let orgsData = [];\n      \n      if (githubService.isAuth()) {\n        try {\n          orgsData = await githubService.getUserOrganizations();\n        } catch (error) {\n          console.error('Error fetching organizations:', error);\n          orgsData = [];\n        }\n      }\n      \n      // Always ensure WHO organization is included\n      try {\n        const whoOrganization = await githubService.getWHOOrganization();\n        \n        // Check if WHO organization is already in the list\n        const whoIndex = orgsData.findIndex(org => org.login === 'WorldHealthOrganization');\n        \n        if (whoIndex >= 0) {\n          // Replace existing WHO org with fresh data and ensure isWHO flag\n          orgsData[whoIndex] = { ...orgsData[whoIndex], ...whoOrganization, isWHO: true };\n        } else {\n          // Add WHO organization at the beginning of the list\n          orgsData.unshift(whoOrganization);\n        }\n      } catch (whoError) {\n        console.warn('Could not fetch WHO organization data, using fallback:', whoError);\n        \n        // Fallback to hardcoded WHO organization\n        const whoOrganization = {\n          id: 'who-organization',\n          login: 'WorldHealthOrganization',\n          name: 'World Health Organization',\n          description: 'The World Health Organization is a specialized agency of the United Nations responsible for international public health.',\n          avatar_url: 'https://avatars.githubusercontent.com/u/12261302?s=200&v=4',\n          html_url: 'https://github.com/WorldHealthOrganization',\n          type: 'Organization',\n          isWHO: true\n        };\n        \n        // Check if WHO organization is already in the list\n        const hasWHO = orgsData.some(org => org.login === 'WorldHealthOrganization');\n        \n        if (!hasWHO) {\n          // Add WHO organization at the beginning of the list\n          orgsData.unshift(whoOrganization);\n        } else {\n          // Ensure existing WHO organization has the isWHO flag\n          orgsData = orgsData.map(org => \n            org.login === 'WorldHealthOrganization' \n              ? { ...org, isWHO: true }\n              : org\n          );\n        }\n      }\n      \n      setOrganizations(orgsData);\n      \n      // Load cached DAK counts (if available)\n      loadCachedDakCounts(userData, orgsData);\n      \n    } catch (error) {\n      console.error('Error fetching user data:', error);\n      setError('Failed to fetch user data. Please check your connection and try again.');\n      setIsAuthenticated(false);\n      sessionStorage.removeItem('github_token');\n      localStorage.removeItem('github_token');\n    } finally {\n      setLoading(false);\n    }\n  }, [loadCachedDakCounts]);\n\n  // Initial authentication check and redirect if not authenticated\n  useEffect(() => {\n    const initializeAuth = () => {\n      // Check if user is already authenticated from previous session\n      const token = sessionStorage.getItem('github_token') || localStorage.getItem('github_token');\n      if (token) {\n        const success = githubService.authenticate(token);\n        if (success) {\n          setIsAuthenticated(true);\n        } else {\n          sessionStorage.removeItem('github_token');\n          localStorage.removeItem('github_token');\n          // Redirect to welcome page if not authenticated\n          navigate('/', { replace: true });\n        }\n      } else {\n        // Redirect to welcome page if no token\n        navigate('/', { replace: true });\n      }\n    };\n\n    initializeAuth();\n  }, [navigate]);\n\n  // Handle warning message from navigation state\n  useEffect(() => {\n    if (location.state?.warningMessage) {\n      setWarningMessage(location.state.warningMessage);\n      // Clear the warning message from navigation state to prevent it from persisting\n      navigate(location.pathname, { replace: true, state: {} });\n    }\n  }, [location.state, navigate, location.pathname]);\n\n  // Fetch user data when authentication state changes\n  useEffect(() => {\n    if (isAuthenticated && !user) {\n      fetchUserData();\n    }\n  }, [isAuthenticated, user, fetchUserData]);\n\n  const handleProfileSelect = (event, profile) => {\n    const navigationState = { profile };\n    handleNavigationClick(event, `/dak-action/${profile.login}`, navigate, navigationState);\n  };\n\n  const handleDismissWarning = () => {\n    setWarningMessage(null);\n  };\n\n  // Don't render anything if not authenticated (will redirect)\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <PageLayout pageName=\"select-profile\">\n      <div className=\"select-profile-content\">\n        {warningMessage && (\n          <div className=\"warning-message\">\n            <div className=\"warning-content\">\n              <div className=\"warning-header\">\n                <span className=\"warning-icon\">⚠️</span>\n                <span className=\"warning-text\">{warningMessage}</span>\n              </div>\n              <button \n                className=\"warning-dismiss\" \n                onClick={handleDismissWarning}\n                aria-label=\"Dismiss warning\"\n              >\n                × Dismiss\n              </button>\n            </div>\n          </div>\n        )}\n        \n        {loading ? (\n          <div className=\"loading-section\">\n            <div className=\"spinner\"></div>\n            <p>Loading profile data...</p>\n          </div>\n        ) : (\n          <div className=\"profile-selection\">\n            <h2>{t('organization.select')}</h2>\n            <p>{t('organization.personal')}:</p>\n            \n            {error && <div className=\"error-message\">{error}</div>}\n            \n            {/* Horizontal profile grid */}\n            <div className=\"profile-grid-horizontal\">\n              {/* Personal Profile */}\n              <div \n                className=\"profile-card\"\n                onClick={(event) => handleProfileSelect(event, { type: 'user', ...user })}\n              >\n                <div className=\"profile-card-header\">\n                  <img src={user?.avatar_url} alt=\"Personal profile\" />\n                  {dakCounts[`user-${user?.login}`] > 0 && (\n                    <div className=\"dak-count-badge\">\n                      {dakCounts[`user-${user?.login}`]}\n                    </div>\n                  )}\n                </div>\n                <h3>{user?.name || user?.login}</h3>\n                <p>Personal repositories</p>\n                <div className=\"profile-badges\">\n                  <span className=\"profile-type\">Personal</span>\n                </div>\n              </div>\n              \n              {/* Organization Profiles */}\n              {organizations.map((org) => (\n                <div \n                  key={org.login}\n                  className={`profile-card ${org.isWHO ? 'who-org' : ''}`}\n                  onClick={(event) => handleProfileSelect(event, { type: 'org', ...org })}\n                >\n                  <div className=\"profile-card-header\">\n                    <img \n                      src={org.avatar_url || `https://github.com/${org.login}.png`} \n                      alt={`${org.name || org.login} organization`} \n                    />\n                    {dakCounts[`org-${org.login}`] > 0 && (\n                      <div className=\"dak-count-badge\">\n                        {dakCounts[`org-${org.login}`]}\n                      </div>\n                    )}\n                  </div>\n                  <h3>{org.name || org.login}</h3>\n                  <p>@{org.login}</p>\n                  <div className=\"profile-badges\">\n                    <span className=\"profile-type\">{t('organization.organizations')}</span>\n                    {org.isWHO && <span className=\"who-badge\">WHO Official</span>}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default SelectProfilePage;"],"names":["handleNavigationClick","event","path","navigate","state","arguments","length","undefined","includes","validateUrlScheme","ctrlKey","metaKey","shouldOpenInNewTab","fullUrl","relativePath","window","location","origin","console","warn","basePath","process","baseUrl","cleanPath","startsWith","slice","endsWith","constructFullUrl","open","SelectProfilePage","t","useTranslation","user","setUser","useState","organizations","setOrganizations","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","dakCounts","setDakCounts","warningMessage","setWarningMessage","useNavigate","useLocation","loadCachedDakCounts","useCallback","userData","orgsData","githubService","isAuth","counts","userCache","repositoryCacheService","getCachedRepositories","login","repositories","forEach","org","orgCache","fetchUserData","async","checkTokenPermissions","getCurrentUser","getUserOrganizations","whoOrganization","getWHOOrganization","whoIndex","findIndex","isWHO","unshift","whoError","id","name","description","avatar_url","html_url","type","some","map","sessionStorage","removeItem","localStorage","useEffect","initializeAuth","token","getItem","authenticate","replace","_location$state","pathname","handleProfileSelect","profile","navigationState","_jsx","PageLayout","pageName","children","_jsxs","className","onClick","handleDismissWarning","src","alt"],"sourceRoot":""}